_RNvXs14_NtCs72lNd55x91m_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvXs_NtCs72lNd55x91m_5ahash13fallback_hashNtB4_7AHasherNtNtCs5KtMyn79NKx_4core4hash6Hasher6finishCskyBRBO12fJg_6simple:
  212|  76.6k|    fn finish(&self) -> u64 {
  213|  76.6k|        let rot = (self.buffer & 63) as u32;
  214|  76.6k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  76.6k|    }
_RNvMNtCs72lNd55x91m_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCskyBRBO12fJg_6simple:
   58|  76.6k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  76.6k|        AHasher {
   60|  76.6k|            buffer: rand_state.k0,
   61|  76.6k|            pad: rand_state.k1,
   62|  76.6k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  76.6k|        }
   64|  76.6k|    }
_RNvXs_NtCs72lNd55x91m_5ahash13fallback_hashNtB4_7AHasherNtNtCs5KtMyn79NKx_4core4hash6Hasher9write_u64CskyBRBO12fJg_6simple:
  163|  76.6k|    fn write_u64(&mut self, i: u64) {
  164|  76.6k|        self.update(i as u64);
  165|  76.6k|    }
_RNvMNtCs72lNd55x91m_5ahash13fallback_hashNtB2_7AHasher6update:
   97|  82.0k|    fn update(&mut self, new_data: u64) {
   98|  82.0k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|  82.0k|    }
_RNvXs_NtCs72lNd55x91m_5ahash13fallback_hashNtB4_7AHasherNtNtCs5KtMyn79NKx_4core4hash6Hasher6finishB6_:
  212|  4.31k|    fn finish(&self) -> u64 {
  213|  4.31k|        let rot = (self.buffer & 63) as u32;
  214|  4.31k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  4.31k|    }
_RNvXs_NtCs72lNd55x91m_5ahash13fallback_hashNtB4_7AHasherNtNtCs5KtMyn79NKx_4core4hash6Hasher9write_u64B6_:
  163|  5.39k|    fn write_u64(&mut self, i: u64) {
  164|  5.39k|        self.update(i as u64);
  165|  5.39k|    }
_RNvXs_NtCs72lNd55x91m_5ahash13fallback_hashNtB4_7AHasherNtNtCs5KtMyn79NKx_4core4hash6Hasher11write_usizeB6_:
  174|  1.07k|    fn write_usize(&mut self, i: usize) {
  175|  1.07k|        self.write_u64(i as u64);
  176|  1.07k|    }
_RNvMNtCs72lNd55x91m_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|  1.07k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  1.07k|        AHasher {
   60|  1.07k|            buffer: rand_state.k0,
   61|  1.07k|            pad: rand_state.k1,
   62|  1.07k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  1.07k|        }
   64|  1.07k|    }
_RNvXs4_NtCs72lNd55x91m_5ahash13fallback_hashNtB5_7AHasherNtNtCs5KtMyn79NKx_4core5clone5Clone5cloneB7_:
   23|  4.31k|#[derive(Debug, Clone)]

_RNvMs0_NtCs72lNd55x91m_5ahash8hash_mapINtB5_8AHashMapyyE3newCskyBRBO12fJg_6simple:
   35|  1.07k|    pub fn new() -> Self {
   36|  1.07k|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|  1.07k|    }
_RINvMs2_NtCs72lNd55x91m_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECskyBRBO12fJg_6simple:
  186|  10.6k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  10.6k|    where
  188|  10.6k|        K: Borrow<Q>,
  189|  10.6k|        Q: Hash + Eq,
  190|  10.6k|    {
  191|  10.6k|        self.0.remove(k)
  192|  10.6k|    }
_RINvMs2_NtCs72lNd55x91m_5ahash8hash_mapINtB6_8AHashMapyyE3getyECskyBRBO12fJg_6simple:
   79|  7.84k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  7.84k|    where
   81|  7.84k|        K: Borrow<Q>,
   82|  7.84k|        Q: Hash + Eq,
   83|  7.84k|    {
   84|  7.84k|        self.0.get(k)
   85|  7.84k|    }
_RNvMs2_NtCs72lNd55x91m_5ahash8hash_mapINtB5_8AHashMapyyE6insertCskyBRBO12fJg_6simple:
  164|  33.4k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  33.4k|        self.0.insert(k, v)
  166|  33.4k|    }

_RNvNtCs72lNd55x91m_5ahash10operations15folded_multiply:
   11|   163k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|   163k|    let result = (s as u128).wrapping_mul(by as u128);
   13|   163k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|   163k|}

_RNvMs1_NtCs72lNd55x91m_5ahash12random_stateNtB5_11RandomState3newCskyBRBO12fJg_6simple:
  196|  1.07k|    pub fn new() -> RandomState {
  197|  1.07k|        let src = Self::get_src();
  198|  1.07k|        let fixed = src.get_fixed_seeds();
  199|  1.07k|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  200|  1.07k|    }
_RNCNvMs1_NtCs72lNd55x91m_5ahash12random_stateNtB7_11RandomState7get_src0CskyBRBO12fJg_6simple:
  184|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvXs2_NtCs72lNd55x91m_5ahash12random_stateNtB5_11RandomStateNtNtCs5KtMyn79NKx_4core7default7Default7defaultCskyBRBO12fJg_6simple:
  256|  1.07k|    fn default() -> Self {
  257|  1.07k|        Self::new()
  258|  1.07k|    }
_RNvXs3_NtCs72lNd55x91m_5ahash12random_stateNtB5_11RandomStateNtNtCs5KtMyn79NKx_4core4hash11BuildHasher12build_hasherCskyBRBO12fJg_6simple:
  293|  76.6k|    fn build_hasher(&self) -> AHasher {
  294|  76.6k|        AHasher::from_random_state(self)
  295|  76.6k|    }
_RNvMs1_NtCs72lNd55x91m_5ahash12random_stateNtB5_11RandomState7get_srcCskyBRBO12fJg_6simple:
  183|  1.07k|    fn get_src() -> &'static dyn RandomSource {
  184|  1.07k|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  185|  1.07k|    }
_RNvMNtCs72lNd55x91m_5ahash12random_stateNtB2_19DefaultRandomSource3new:
   80|      1|    fn new() -> DefaultRandomSource {
   81|      1|        DefaultRandomSource {
   82|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   83|      1|        }
   84|      1|    }
_RNCNvXs_NtCs72lNd55x91m_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
   99|      1|        SEEDS.get_or_init(|| {
  100|      1|            let mut result: [u8; 64] = [0; 64];
  101|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|      1|            Box::new(result.convert())
  103|      1|        })
_RNvXs_NtCs72lNd55x91m_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  130|  1.07k|    fn gen_hasher_seed(&self) -> usize {
  131|  1.07k|        let stack = self as *const _ as usize;
  132|  1.07k|        self.counter.fetch_add(stack, Ordering::Relaxed)
  133|  1.07k|    }
_RNvMs1_NtCs72lNd55x91m_5ahash12random_stateNtB5_11RandomState9from_keys:
  211|  1.07k|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  212|  1.07k|        let &[k0, k1, k2, k3] = a;
  213|  1.07k|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  214|  1.07k|        hasher.write_usize(c);
  215|  1.07k|        let mix = |k: u64| {
  216|       |            let mut h = hasher.clone();
  217|       |            h.write_u64(k);
  218|       |            h.finish()
  219|       |        };
  220|  1.07k|        RandomState {
  221|  1.07k|            k0: mix(b[0]),
  222|  1.07k|            k1: mix(b[1]),
  223|  1.07k|            k2: mix(b[2]),
  224|  1.07k|            k3: mix(b[3]),
  225|  1.07k|        }
  226|  1.07k|    }
_RNvXs_NtCs72lNd55x91m_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
   96|  1.07k|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
   97|  1.07k|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
   98|  1.07k|
   99|  1.07k|        SEEDS.get_or_init(|| {
  100|       |            let mut result: [u8; 64] = [0; 64];
  101|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|       |            Box::new(result.convert())
  103|  1.07k|        })
  104|  1.07k|    }
_RNCNvMs1_NtCs72lNd55x91m_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  215|  4.31k|        let mix = |k: u64| {
  216|  4.31k|            let mut h = hasher.clone();
  217|  4.31k|            h.write_u64(k);
  218|  4.31k|            h.finish()
  219|  4.31k|        };

_RNvXs8_Csbh9Xaz0iShD_9arbitraryINtNtCsTv665f55BC_5alloc3vec3VecNtCskyBRBO12fJg_6simple9OperationENtB5_9Arbitrary19arbitrary_take_restB11_:
  834|  1.07k|        u.arbitrary_take_rest_iter()?.collect()
  835|  1.07k|    }
_RNvXsz_Csbh9Xaz0iShD_9arbitrarymNtB5_9Arbitrary9size_hintCskyBRBO12fJg_6simple:
  332|  1.07k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  333|  1.07k|                    let n = mem::size_of::<$ty>();
  334|  1.07k|                    (n, Some(n))
  335|  1.07k|                }
_RNvXsC_Csbh9Xaz0iShD_9arbitraryjNtB5_9Arbitrary9size_hintCskyBRBO12fJg_6simple:
  332|  1.08k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  333|  1.08k|                    let n = mem::size_of::<$ty>();
  334|  1.08k|                    (n, Some(n))
  335|  1.08k|                }
_RNvYyNtCsbh9Xaz0iShD_9arbitrary9Arbitrary19arbitrary_take_restCskyBRBO12fJg_6simple:
  189|    511|    fn arbitrary_take_rest(mut u: Unstructured<'_>) -> Result<Self> {
  190|    511|        Self::arbitrary(&mut u)
  191|    511|    }
_RNvXs1e_Csbh9Xaz0iShD_9arbitraryThINtNtCsTv665f55BC_5alloc3vec3VecNtCskyBRBO12fJg_6simple9OperationEENtB6_9Arbitrary9size_hintB14_:
  696|  1.08k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  697|  1.08k|                crate::size_hint::and_all(&[
  698|  1.08k|                    <$last as Arbitrary>::size_hint(depth),
  699|  1.08k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  700|  1.08k|                ])
  701|  1.08k|            }
_RNvXsA_Csbh9Xaz0iShD_9arbitraryyNtB5_9Arbitrary9size_hintCskyBRBO12fJg_6simple:
  332|  2.15k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  333|  2.15k|                    let n = mem::size_of::<$ty>();
  334|  2.15k|                    (n, Some(n))
  335|  2.15k|                }
_RNvXs1e_Csbh9Xaz0iShD_9arbitraryThINtNtCsTv665f55BC_5alloc3vec3VecNtCskyBRBO12fJg_6simple9OperationEENtB6_9Arbitrary19arbitrary_take_restB14_:
  689|  1.07k|            fn arbitrary_take_rest(mut u: Unstructured<'_>) -> Result<Self> {
  690|  1.07k|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  691|  1.07k|                let $last = $last::arbitrary_take_rest(u)?;
  692|  1.07k|                Ok(($($xs,)* $last,))
  693|  1.07k|            }
_RNvXsx_Csbh9Xaz0iShD_9arbitraryhNtB5_9Arbitrary9size_hintCskyBRBO12fJg_6simple:
  332|  1.08k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  333|  1.08k|                    let n = mem::size_of::<$ty>();
  334|  1.08k|                    (n, Some(n))
  335|  1.08k|                }
_RNvXs8_Csbh9Xaz0iShD_9arbitraryINtNtCsTv665f55BC_5alloc3vec3VecNtCskyBRBO12fJg_6simple9OperationENtB5_9Arbitrary9size_hintB11_:
  838|  1.08k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  839|  1.08k|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  840|  1.08k|    }
_RNvXsz_Csbh9Xaz0iShD_9arbitrarymNtB5_9Arbitrary9arbitrary:
  321|  53.5k|                fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
  322|  53.5k|                    let mut buf = [0; mem::size_of::<$ty>()];
  323|  53.5k|                    u.fill_buffer(&mut buf)?;
  324|  53.5k|                    let mut x: $unsigned = 0;
  325|   214k|                    for i in 0..mem::size_of::<$ty>() {
  326|   214k|                        x |= buf[i] as $unsigned << (i * 8);
  327|   214k|                    }
  328|  53.5k|                    Ok(x as $ty)
  329|  53.5k|                }
_RNvXsx_Csbh9Xaz0iShD_9arbitraryhNtB5_9Arbitrary9arbitrary:
  321|  1.07k|                fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
  322|  1.07k|                    let mut buf = [0; mem::size_of::<$ty>()];
  323|  1.07k|                    u.fill_buffer(&mut buf)?;
  324|  1.07k|                    let mut x: $unsigned = 0;
  325|  1.07k|                    for i in 0..mem::size_of::<$ty>() {
  326|  1.07k|                        x |= buf[i] as $unsigned << (i * 8);
  327|  1.07k|                    }
  328|  1.07k|                    Ok(x as $ty)
  329|  1.07k|                }
_RNvXsA_Csbh9Xaz0iShD_9arbitraryyNtB5_9Arbitrary9arbitrary:
  321|  86.9k|                fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
  322|  86.9k|                    let mut buf = [0; mem::size_of::<$ty>()];
  323|  86.9k|                    u.fill_buffer(&mut buf)?;
  324|  86.9k|                    let mut x: $unsigned = 0;
  325|   695k|                    for i in 0..mem::size_of::<$ty>() {
  326|   695k|                        x |= buf[i] as $unsigned << (i * 8);
  327|   695k|                    }
  328|  86.9k|                    Ok(x as $ty)
  329|  86.9k|                }

_RNCNvNtCsbh9Xaz0iShD_9arbitrary9size_hint2or0CskyBRBO12fJg_6simple:
   51|  2.15k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCsbh9Xaz0iShD_9arbitrary9size_hint3andCskyBRBO12fJg_6simple:
   29|  7.55k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   30|  7.55k|    let lower = lhs.0 + rhs.0;
   31|  7.55k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   32|  7.55k|    (lower, upper)
   33|  7.55k|}
_RNvNtCsbh9Xaz0iShD_9arbitrary9size_hint7and_allCskyBRBO12fJg_6simple:
   40|  5.39k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   41|  5.39k|    hints.iter().copied().fold((0, Some(0)), and)
   42|  5.39k|}
_RNvNtCsbh9Xaz0iShD_9arbitrary9size_hint2orCskyBRBO12fJg_6simple:
   47|  2.15k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   48|  2.15k|    let lower = std::cmp::min(lhs.0, rhs.0);
   49|  2.15k|    let upper = lhs
   50|  2.15k|        .1
   51|  2.15k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   52|  2.15k|    (lower, upper)
   53|  2.15k|}
_RINvNtCsbh9Xaz0iShD_9arbitrary9size_hint15recursion_guardNCNvXs1_CskyBRBO12fJg_6simpleNtB11_6MethodNtB4_9Arbitrary9size_hint0EB11_:
   15|  1.07k|pub fn recursion_guard(
   16|  1.07k|    depth: usize,
   17|  1.07k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   18|  1.07k|) -> (usize, Option<usize>) {
   19|  1.07k|    const MAX_DEPTH: usize = 20;
   20|  1.07k|    if depth > MAX_DEPTH {
   21|      0|        (0, None)
   22|       |    } else {
   23|  1.07k|        f(depth + 1)
   24|       |    }
   25|  1.07k|}
_RNCNCNvNtCsbh9Xaz0iShD_9arbitrary9size_hint3and00CskyBRBO12fJg_6simple:
   31|  4.31k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCsbh9Xaz0iShD_9arbitrary9size_hint2or00CskyBRBO12fJg_6simple:
   51|  2.15k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCsbh9Xaz0iShD_9arbitrary9size_hint3and0CskyBRBO12fJg_6simple:
   31|  6.47k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsbh9Xaz0iShD_9arbitrary9size_hint6or_allCskyBRBO12fJg_6simple:
   61|  1.07k|    if let Some(head) = hints.first().copied() {
   62|  1.07k|        hints[1..].iter().copied().fold(head, or)
   63|       |    } else {
   64|      0|        (0, Some(0))
   65|       |    }
   66|  1.07k|}
_RINvNtCsbh9Xaz0iShD_9arbitrary9size_hint15recursion_guardNCNvXs_CskyBRBO12fJg_6simpleNtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   15|  1.07k|pub fn recursion_guard(
   16|  1.07k|    depth: usize,
   17|  1.07k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   18|  1.07k|) -> (usize, Option<usize>) {
   19|  1.07k|    const MAX_DEPTH: usize = 20;
   20|  1.07k|    if depth > MAX_DEPTH {
   21|      0|        (0, None)
   22|       |    } else {
   23|  1.07k|        f(depth + 1)
   24|       |    }
   25|  1.07k|}

_RNvXs0_NtCsbh9Xaz0iShD_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCskyBRBO12fJg_6simple9OperationENtNtNtNtCs5KtMyn79NKx_4core4iter6traits8iterator8Iterator4nextB1e_:
  541|  54.5k|        if let Some(mut u) = self.u.take() {
  542|  53.5k|            if self.size == 1 {
  543|  1.07k|                Some(Arbitrary::arbitrary_take_rest(u))
  544|  52.4k|            } else if self.size == 0 {
  545|      2|                None
  546|       |            } else {
  547|  52.4k|                self.size -= 1;
  548|  52.4k|                let ret = Arbitrary::arbitrary(&mut u);
  549|  52.4k|                self.u = Some(u);
  550|  52.4k|                Some(ret)
  551|       |            }
  552|       |        } else {
  553|  1.07k|            None
  554|       |        }
  555|  54.5k|    }
_RNvMNtCsbh9Xaz0iShD_9arbitrary12unstructuredNtB2_12Unstructured3lenCskyBRBO12fJg_6simple:
  107|  1.07k|    pub fn len(&self) -> usize {
  108|  1.07k|        self.data.len()
  109|  1.07k|    }
_RINvMNtCsbh9Xaz0iShD_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCskyBRBO12fJg_6simple9OperationEB1s_:
  497|  1.07k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary>(
  498|  1.07k|        self,
  499|  1.07k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  500|  1.07k|        let (lower, upper) = ElementType::size_hint(0);
  501|  1.07k|
  502|  1.07k|        let elem_size = upper.unwrap_or(lower * 2);
  503|  1.07k|        let elem_size = std::cmp::max(1, elem_size);
  504|  1.07k|        let size = self.len() / elem_size;
  505|  1.07k|        Ok(ArbitraryTakeRestIter {
  506|  1.07k|            size,
  507|  1.07k|            u: Some(self),
  508|  1.07k|            _marker: PhantomData,
  509|  1.07k|        })
  510|  1.07k|    }
_RNvMNtCsbh9Xaz0iShD_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  396|   141k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  397|   141k|        let n = std::cmp::min(buffer.len(), self.data.len());
  398|   910k|        for i in 0..n {
  399|   910k|            buffer[i] = self.data[i];
  400|   910k|        }
  401|   141k|        for i in self.data.len()..buffer.len() {
  402|      0|            buffer[i] = 0;
  403|      0|        }
  404|   141k|        self.data = &self.data[n..];
  405|   141k|        Ok(())
  406|   141k|    }
_RNvMNtCsbh9Xaz0iShD_9arbitrary12unstructuredNtB2_12Unstructured3new:
   84|  1.07k|    pub fn new(data: &'a [u8]) -> Self {
   85|  1.07k|        Unstructured { data }
   86|  1.07k|    }

_RINvNvMCs7r5CEKva1jQ_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|   463k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   463k|                let mut p = a.as_ptr();
  145|   463k|                ( $( {
  146|   463k|                    let aref = &*(p as *const [T; $len]);
  147|   463k|                    p = p.offset($len as isize);
  148|   463k|                    aref
  149|   463k|                } ),* )
  150|   463k|            }
_RINvNvMCs7r5CEKva1jQ_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|   463k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   463k|                let mut p = a.as_ptr();
  145|   463k|                ( $( {
  146|   463k|                    let aref = &*(p as *const [T; $len]);
  147|   463k|                    p = p.offset($len as isize);
  148|   463k|                    aref
  149|   463k|                } ),* )
  150|   463k|            }
_RINvNvCs7r5CEKva1jQ_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|   463k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|   463k|                let mut p = a.as_mut_ptr();
  242|   463k|                ( $( {
  243|   463k|                    let aref = &mut *(p as *mut [T; $len]);
  244|   463k|                    p = p.offset($len as isize);
  245|   463k|                    aref
  246|   463k|                } ),* )
  247|   463k|            }
_RINvNvNtCs7r5CEKva1jQ_12blake2b_simd4avx214compress_blocks0_9as_arrayshEB6_:
  143|   501k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   501k|                let mut p = a.as_ptr();
  145|   501k|                ( $( {
  146|   501k|                    let aref = &*(p as *const [T; $len]);
  147|   501k|                    p = p.offset($len as isize);
  148|   501k|                    aref
  149|   501k|                } ),* )
  150|   501k|            }
_RINvNvNtCs7r5CEKva1jQ_12blake2b_simd4avx214compress_block9as_arraysyEB6_:
  240|   501k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|   501k|                let mut p = a.as_mut_ptr();
  242|   501k|                ( $( {
  243|   501k|                    let aref = &mut *(p as *mut [T; $len]);
  244|   501k|                    p = p.offset($len as isize);
  245|   501k|                    aref
  246|   501k|                } ),* )
  247|   501k|            }
_RINvNvNtCs7r5CEKva1jQ_12blake2b_simd4avx214compress_blocks_9as_arraysyEB6_:
  143|   501k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   501k|                let mut p = a.as_ptr();
  145|   501k|                ( $( {
  146|   501k|                    let aref = &*(p as *const [T; $len]);
  147|   501k|                    p = p.offset($len as isize);
  148|   501k|                    aref
  149|   501k|                } ),* )
  150|   501k|            }
_RINvNvNtCs7r5CEKva1jQ_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  34.0k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  34.0k|                &*(slice.as_ptr() as *const [_; $len])
   63|  34.0k|            }

_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx22g2:
  118|  12.0M|unsafe fn g2(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  119|  12.0M|    *a = add(*a, *m);
  120|  12.0M|    *a = add(*a, *b);
  121|  12.0M|    *d = xor(*d, *a);
  122|  12.0M|    *d = rot16(*d);
  123|  12.0M|    *c = add(*c, *d);
  124|  12.0M|    *b = xor(*b, *c);
  125|  12.0M|    *b = rot63(*b);
  126|  12.0M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx22g1:
  107|  12.0M|unsafe fn g1(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  108|  12.0M|    *a = add(*a, *m);
  109|  12.0M|    *a = add(*a, *b);
  110|  12.0M|    *d = xor(*d, *a);
  111|  12.0M|    *d = rot32(*d);
  112|  12.0M|    *c = add(*c, *d);
  113|  12.0M|    *b = xor(*b, *c);
  114|  12.0M|    *b = rot24(*b);
  115|  12.0M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx214compress_block:
  146|   501k|unsafe fn compress_block(
  147|   501k|    block: &[u8; BLOCKBYTES],
  148|   501k|    words: &mut [Word; 8],
  149|   501k|    count: Count,
  150|   501k|    last_block: Word,
  151|   501k|    last_node: Word,
  152|   501k|) {
  153|   501k|    let (words_low, words_high) = mut_array_refs!(words, DEGREE, DEGREE);
  154|   501k|    let (iv_low, iv_high) = array_refs!(&IV, DEGREE, DEGREE);
  155|   501k|    let mut a = loadu(words_low);
  156|   501k|    let mut b = loadu(words_high);
  157|   501k|    let mut c = loadu(iv_low);
  158|   501k|    let flags = set4(count_low(count), count_high(count), last_block, last_node);
  159|   501k|    let mut d = xor(loadu(iv_high), flags);
  160|   501k|
  161|   501k|    let msg_chunks = array_refs!(block, 16, 16, 16, 16, 16, 16, 16, 16);
  162|   501k|    let m0 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.0));
  163|   501k|    let m1 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.1));
  164|   501k|    let m2 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.2));
  165|   501k|    let m3 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.3));
  166|   501k|    let m4 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.4));
  167|   501k|    let m5 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.5));
  168|   501k|    let m6 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.6));
  169|   501k|    let m7 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.7));
  170|   501k|
  171|   501k|    let iv0 = a;
  172|   501k|    let iv1 = b;
  173|   501k|    let mut t0;
  174|   501k|    let mut t1;
  175|   501k|    let mut b0;
  176|   501k|
  177|   501k|    // round 1
  178|   501k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  179|   501k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  180|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  181|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  182|   501k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  183|   501k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  184|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  185|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  186|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  187|   501k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  188|   501k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  189|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  190|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  191|   501k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  192|   501k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  193|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  194|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  195|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  196|   501k|
  197|   501k|    // round 2
  198|   501k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  199|   501k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  200|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  201|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  202|   501k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  203|   501k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  204|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  205|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  206|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  207|   501k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  208|   501k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  209|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  210|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  211|   501k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  212|   501k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  213|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  214|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  215|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  216|   501k|
  217|   501k|    // round 3
  218|   501k|    t0 = _mm256_alignr_epi8(m6, m5, 8);
  219|   501k|    t1 = _mm256_unpackhi_epi64(m2, m7);
  220|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  221|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  222|   501k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  223|   501k|    t1 = _mm256_blend_epi32(m6, m1, 0x33);
  224|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  225|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  226|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  227|   501k|    t0 = _mm256_alignr_epi8(m5, m4, 8);
  228|   501k|    t1 = _mm256_unpackhi_epi64(m1, m3);
  229|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  230|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  231|   501k|    t0 = _mm256_unpacklo_epi64(m2, m7);
  232|   501k|    t1 = _mm256_blend_epi32(m0, m3, 0x33);
  233|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  234|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  235|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  236|   501k|
  237|   501k|    // round 4
  238|   501k|    t0 = _mm256_unpackhi_epi64(m3, m1);
  239|   501k|    t1 = _mm256_unpackhi_epi64(m6, m5);
  240|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  241|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  242|   501k|    t0 = _mm256_unpackhi_epi64(m4, m0);
  243|   501k|    t1 = _mm256_unpacklo_epi64(m6, m7);
  244|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  245|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  246|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  247|   501k|    t0 = _mm256_alignr_epi8(m1, m7, 8);
  248|   501k|    t1 = _mm256_shuffle_epi32(m2, _MM_SHUFFLE!(1, 0, 3, 2));
  249|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  250|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  251|   501k|    t0 = _mm256_unpacklo_epi64(m4, m3);
  252|   501k|    t1 = _mm256_unpacklo_epi64(m5, m0);
  253|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  254|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  255|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  256|   501k|
  257|   501k|    // round 5
  258|   501k|    t0 = _mm256_unpackhi_epi64(m4, m2);
  259|   501k|    t1 = _mm256_unpacklo_epi64(m1, m5);
  260|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  261|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  262|   501k|    t0 = _mm256_blend_epi32(m3, m0, 0x33);
  263|   501k|    t1 = _mm256_blend_epi32(m7, m2, 0x33);
  264|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  265|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  266|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  267|   501k|    t0 = _mm256_alignr_epi8(m7, m1, 8);
  268|   501k|    t1 = _mm256_alignr_epi8(m3, m5, 8);
  269|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  270|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  271|   501k|    t0 = _mm256_unpackhi_epi64(m6, m0);
  272|   501k|    t1 = _mm256_unpacklo_epi64(m6, m4);
  273|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  274|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  275|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  276|   501k|
  277|   501k|    // round 6
  278|   501k|    t0 = _mm256_unpacklo_epi64(m1, m3);
  279|   501k|    t1 = _mm256_unpacklo_epi64(m0, m4);
  280|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  281|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  282|   501k|    t0 = _mm256_unpacklo_epi64(m6, m5);
  283|   501k|    t1 = _mm256_unpackhi_epi64(m5, m1);
  284|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  285|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  286|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  287|   501k|    t0 = _mm256_alignr_epi8(m2, m0, 8);
  288|   501k|    t1 = _mm256_unpackhi_epi64(m3, m7);
  289|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  290|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  291|   501k|    t0 = _mm256_unpackhi_epi64(m4, m6);
  292|   501k|    t1 = _mm256_alignr_epi8(m7, m2, 8);
  293|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  294|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  295|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  296|   501k|
  297|   501k|    // round 7
  298|   501k|    t0 = _mm256_blend_epi32(m0, m6, 0x33);
  299|   501k|    t1 = _mm256_unpacklo_epi64(m7, m2);
  300|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  301|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  302|   501k|    t0 = _mm256_unpackhi_epi64(m2, m7);
  303|   501k|    t1 = _mm256_alignr_epi8(m5, m6, 8);
  304|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  305|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  306|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  307|   501k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  308|   501k|    t1 = _mm256_blend_epi32(m4, m3, 0x33);
  309|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  310|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  311|   501k|    t0 = _mm256_unpackhi_epi64(m5, m3);
  312|   501k|    t1 = _mm256_shuffle_epi32(m1, _MM_SHUFFLE!(1, 0, 3, 2));
  313|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  314|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  315|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  316|   501k|
  317|   501k|    // round 8
  318|   501k|    t0 = _mm256_unpackhi_epi64(m6, m3);
  319|   501k|    t1 = _mm256_blend_epi32(m1, m6, 0x33);
  320|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  321|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  322|   501k|    t0 = _mm256_alignr_epi8(m7, m5, 8);
  323|   501k|    t1 = _mm256_unpackhi_epi64(m0, m4);
  324|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  325|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  326|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  327|   501k|    t0 = _mm256_blend_epi32(m2, m1, 0x33);
  328|   501k|    t1 = _mm256_alignr_epi8(m4, m7, 8);
  329|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  330|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  331|   501k|    t0 = _mm256_unpacklo_epi64(m5, m0);
  332|   501k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  333|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  334|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  335|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  336|   501k|
  337|   501k|    // round 9
  338|   501k|    t0 = _mm256_unpacklo_epi64(m3, m7);
  339|   501k|    t1 = _mm256_alignr_epi8(m0, m5, 8);
  340|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  341|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  342|   501k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  343|   501k|    t1 = _mm256_alignr_epi8(m4, m1, 8);
  344|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  345|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  346|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  347|   501k|    t0 = _mm256_unpacklo_epi64(m5, m6);
  348|   501k|    t1 = _mm256_unpackhi_epi64(m6, m0);
  349|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  350|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  351|   501k|    t0 = _mm256_alignr_epi8(m1, m2, 8);
  352|   501k|    t1 = _mm256_alignr_epi8(m2, m3, 8);
  353|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  354|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  355|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  356|   501k|
  357|   501k|    // round 10
  358|   501k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  359|   501k|    t1 = _mm256_unpackhi_epi64(m3, m0);
  360|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  361|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  362|   501k|    t0 = _mm256_unpacklo_epi64(m1, m2);
  363|   501k|    t1 = _mm256_blend_epi32(m2, m3, 0x33);
  364|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  365|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  366|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  367|   501k|    t0 = _mm256_unpackhi_epi64(m6, m7);
  368|   501k|    t1 = _mm256_unpackhi_epi64(m4, m1);
  369|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  370|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  371|   501k|    t0 = _mm256_blend_epi32(m5, m0, 0x33);
  372|   501k|    t1 = _mm256_unpacklo_epi64(m7, m6);
  373|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  374|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  375|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  376|   501k|
  377|   501k|    // round 11
  378|   501k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  379|   501k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  380|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  381|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  382|   501k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  383|   501k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  384|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  385|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  386|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  387|   501k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  388|   501k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  389|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  390|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  391|   501k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  392|   501k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  393|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  394|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  395|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  396|   501k|
  397|   501k|    // round 12
  398|   501k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  399|   501k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  400|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  401|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  402|   501k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  403|   501k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  404|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  405|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  406|   501k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  407|   501k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  408|   501k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  409|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  410|   501k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  411|   501k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  412|   501k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  413|   501k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  414|   501k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  415|   501k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  416|   501k|
  417|   501k|    a = xor(a, c);
  418|   501k|    b = xor(b, d);
  419|   501k|    a = xor(a, iv0);
  420|   501k|    b = xor(b, iv1);
  421|   501k|
  422|   501k|    storeu(a, words_low);
  423|   501k|    storeu(b, words_high);
  424|   501k|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx23xor:
   56|  50.6M|unsafe fn xor(a: __m256i, b: __m256i) -> __m256i {
   57|  50.6M|    _mm256_xor_si256(a, b)
   58|  50.6M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx25rot63:
  102|  12.0M|unsafe fn rot63(x: __m256i) -> __m256i {
  103|  12.0M|    _mm256_or_si256(_mm256_srli_epi64(x, 63), _mm256_slli_epi64(x, 64 - 63))
  104|  12.0M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx25loadu:
   18|  2.00M|unsafe fn loadu(src: *const [Word; DEGREE]) -> __m256i {
   19|  2.00M|    // This is an unaligned load, so the pointer cast is allowed.
   20|  2.00M|    _mm256_loadu_si256(src as *const __m256i)
   21|  2.00M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx211diagonalize:
  132|  6.01M|unsafe fn diagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  133|  6.01M|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(2, 1, 0, 3));
  134|  6.01M|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  135|  6.01M|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(0, 3, 2, 1));
  136|  6.01M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx23add:
   35|  72.1M|unsafe fn add(a: __m256i, b: __m256i) -> __m256i {
   36|  72.1M|    _mm256_add_epi64(a, b)
   37|  72.1M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx25rot16:
   97|  12.0M|unsafe fn rot16(x: __m256i) -> __m256i {
   98|  12.0M|    _mm256_or_si256(_mm256_srli_epi64(x, 16), _mm256_slli_epi64(x, 64 - 16))
   99|  12.0M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx25rot32:
   87|  12.0M|unsafe fn rot32(x: __m256i) -> __m256i {
   88|  12.0M|    _mm256_or_si256(_mm256_srli_epi64(x, 32), _mm256_slli_epi64(x, 64 - 32))
   89|  12.0M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx214compress1_loop:
  427|   497k|pub unsafe fn compress1_loop(
  428|   497k|    input: &[u8],
  429|   497k|    words: &mut [Word; 8],
  430|   497k|    mut count: Count,
  431|   497k|    last_node: LastNode,
  432|   497k|    finalize: Finalize,
  433|   497k|    stride: Stride,
  434|   497k|) {
  435|   497k|    input_debug_asserts(input, finalize);
  436|   497k|
  437|   497k|    let mut local_words = *words;
  438|   497k|
  439|   497k|    let mut fin_offset = input.len().saturating_sub(1);
  440|   497k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  441|   497k|    let mut buf = [0; BLOCKBYTES];
  442|   497k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  443|   497k|    let fin_last_block = flag_word(finalize.yes());
  444|   497k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  445|       |
  446|   497k|    let mut offset = 0;
  447|       |    loop {
  448|       |        let block;
  449|       |        let count_delta;
  450|       |        let last_block;
  451|       |        let last_node;
  452|   501k|        if offset == fin_offset {
  453|   497k|            block = fin_block;
  454|   497k|            count_delta = fin_len;
  455|   497k|            last_block = fin_last_block;
  456|   497k|            last_node = fin_last_node;
  457|   497k|        } else {
  458|  3.43k|            // This unsafe cast avoids bounds checks. There's guaranteed to be
  459|  3.43k|            // enough input because `offset < fin_offset`.
  460|  3.43k|            block = &*(input.as_ptr().add(offset) as *const [u8; BLOCKBYTES]);
  461|  3.43k|            count_delta = BLOCKBYTES;
  462|  3.43k|            last_block = flag_word(false);
  463|  3.43k|            last_node = flag_word(false);
  464|  3.43k|        };
  465|       |
  466|   501k|        count = count.wrapping_add(count_delta as Count);
  467|   501k|        compress_block(block, &mut local_words, count, last_block, last_node);
  468|   501k|
  469|   501k|        // Check for termination before bumping the offset, to avoid overflow.
  470|   501k|        if offset == fin_offset {
  471|   497k|            break;
  472|  3.43k|        }
  473|  3.43k|
  474|  3.43k|        offset += stride.padded_blockbytes();
  475|       |    }
  476|       |
  477|   497k|    *words = local_words;
  478|   497k|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx29loadu_128:
   30|  4.01M|unsafe fn loadu_128(mem_addr: &[u8; 16]) -> __m128i {
   31|  4.01M|    _mm_loadu_si128(mem_addr.as_ptr() as *const __m128i)
   32|  4.01M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx24set4:
   66|   501k|unsafe fn set4(a: u64, b: u64, c: u64, d: u64) -> __m256i {
   67|   501k|    _mm256_setr_epi64x(a as i64, b as i64, c as i64, d as i64)
   68|   501k|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx26storeu:
   24|  1.00M|unsafe fn storeu(src: __m256i, dest: *mut [Word; DEGREE]) {
   25|  1.00M|    // This is an unaligned store, so the pointer cast is allowed.
   26|  1.00M|    _mm256_storeu_si256(dest as *mut __m256i, src)
   27|  1.00M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx213undiagonalize:
  139|  6.01M|unsafe fn undiagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  140|  6.01M|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(0, 3, 2, 1));
  141|  6.01M|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  142|  6.01M|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(2, 1, 0, 3));
  143|  6.01M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4avx25rot24:
   92|  12.0M|unsafe fn rot24(x: __m256i) -> __m256i {
   93|  12.0M|    _mm256_or_si256(_mm256_srli_epi64(x, 24), _mm256_slli_epi64(x, 64 - 24))
   94|  12.0M|}

_RNvMNtCs7r5CEKva1jQ_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supported:
   70|   463k|    pub fn avx2_if_supported() -> Option<Self> {
   71|       |        // Check whether AVX2 support is assumed by the build.
   72|       |        #[cfg(target_feature = "avx2")]
   73|       |        {
   74|       |            return Some(Implementation(Platform::AVX2));
   75|       |        }
   76|       |        // Otherwise dynamically check for support if we can.
   77|       |        #[cfg(feature = "std")]
   78|       |        {
   79|      0|            if is_x86_feature_detected!("avx2") {
   80|   463k|                return Some(Implementation(Platform::AVX2));
   81|      0|            }
   82|      0|        }
   83|      0|        None
   84|   463k|    }
_RNvMNtCs7r5CEKva1jQ_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|   497k|    pub fn compress1_loop(
   97|   497k|        &self,
   98|   497k|        input: &[u8],
   99|   497k|        words: &mut [Word; 8],
  100|   497k|        count: Count,
  101|   497k|        last_node: LastNode,
  102|   497k|        finalize: Finalize,
  103|   497k|        stride: Stride,
  104|   497k|    ) {
  105|   497k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|   497k|            Platform::AVX2 => unsafe {
  108|   497k|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|   497k|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|      0|            _ => {
  113|      0|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|      0|            }
  115|       |        }
  116|   497k|    }
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4guts9count_low:
  204|   501k|pub(crate) fn count_low(count: Count) -> Word {
  205|   501k|    count as Word
  206|   501k|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4guts19input_debug_asserts:
  252|   497k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|   497k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|   497k|    // even multiple of the block size.
  255|   497k|    if !finalize.yes() {
  256|  34.0k|        debug_assert!(!input.is_empty());
  257|  34.0k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|   463k|    }
  259|   497k|}
_RNvMs0_NtCs7r5CEKva1jQ_12blake2b_simd4gutsNtB5_8Finalize3yes:
  165|  1.49M|    pub fn yes(&self) -> bool {
  166|  1.49M|        match self {
  167|  1.39M|            Finalize::Yes => true,
  168|   102k|            Finalize::No => false,
  169|       |        }
  170|  1.49M|    }
_RNvMs1_NtCs7r5CEKva1jQ_12blake2b_simd4gutsNtB5_8LastNode3yes:
  181|   463k|    pub fn yes(&self) -> bool {
  182|   463k|        match self {
  183|      0|            LastNode::Yes => true,
  184|   463k|            LastNode::No => false,
  185|       |        }
  186|   463k|    }
_RNvMs2_NtCs7r5CEKva1jQ_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytes:
  196|   535k|    pub fn padded_blockbytes(&self) -> usize {
  197|   535k|        match self {
  198|   535k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|   535k|    }
_RNvMNtCs7r5CEKva1jQ_12blake2b_simd4gutsNtB2_14Implementation6detect:
   33|   463k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|   463k|                return avx2_impl;
   35|      0|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|      0|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|      0|            }
   42|      0|        }
   43|      0|        Self::portable()
   44|   463k|    }
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4guts9flag_word:
  217|  1.00M|pub(crate) fn flag_word(flag: bool) -> Word {
  218|  1.00M|    if flag {
  219|   463k|        !0
  220|       |    } else {
  221|   538k|        0
  222|       |    }
  223|  1.00M|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4guts10count_high:
  208|   501k|pub(crate) fn count_high(count: Count) -> Word {
  209|   501k|    (count >> 8 * size_of::<Word>()) as Word
  210|   501k|}
_RNvNtCs7r5CEKva1jQ_12blake2b_simd4guts11final_block:
  232|   497k|pub fn final_block<'a>(
  233|   497k|    input: &'a [u8],
  234|   497k|    offset: usize,
  235|   497k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|   497k|    stride: Stride,
  237|   497k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|   497k|    let capped_offset = cmp::min(offset, input.len());
  239|   497k|    let offset_slice = &input[capped_offset..];
  240|   497k|    if offset_slice.len() >= BLOCKBYTES {
  241|  34.0k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  34.0k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  34.0k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|   463k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|   463k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|   497k|}

_RNvMCs7r5CEKva1jQ_12blake2b_simdNtB2_6Params11hash_lengthCs5m2urdTiuQk_9multihash:
  238|   463k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|   463k|        assert!(
  240|   463k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|   463k|        self.hash_length = length as u8;
  245|   463k|        self
  246|   463k|    }
_RNvMCs7r5CEKva1jQ_12blake2b_simdNtB2_6Params3newCs5m2urdTiuQk_9multihash:
  165|   463k|    pub fn new() -> Self {
  166|   463k|        Self {
  167|   463k|            hash_length: OUTBYTES as u8,
  168|   463k|            key_length: 0,
  169|   463k|            key_block: [0; BLOCKBYTES],
  170|   463k|            salt: [0; SALTBYTES],
  171|   463k|            personal: [0; PERSONALBYTES],
  172|   463k|            // NOTE: fanout and max_depth don't default to zero!
  173|   463k|            fanout: 1,
  174|   463k|            max_depth: 1,
  175|   463k|            max_leaf_length: 0,
  176|   463k|            node_offset: 0,
  177|   463k|            node_depth: 0,
  178|   463k|            inner_hash_length: 0,
  179|   463k|            last_node: guts::LastNode::No,
  180|   463k|            implementation: guts::Implementation::detect(),
  181|   463k|        }
  182|   463k|    }
_RNvMCs7r5CEKva1jQ_12blake2b_simdNtB2_6Params8to_words:
  185|   463k|    fn to_words(&self) -> [Word; 8] {
  186|   463k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|   463k|        let (personal_left, personal_right) =
  188|   463k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|   463k|        [
  190|   463k|            IV[0]
  191|   463k|                ^ self.hash_length as u64
  192|   463k|                ^ (self.key_length as u64) << 8
  193|   463k|                ^ (self.fanout as u64) << 16
  194|   463k|                ^ (self.max_depth as u64) << 24
  195|   463k|                ^ (self.max_leaf_length as u64) << 32,
  196|   463k|            IV[1] ^ self.node_offset,
  197|   463k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|   463k|            IV[3],
  199|   463k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|   463k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|   463k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|   463k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|   463k|        ]
  204|   463k|    }
_RNvCs7r5CEKva1jQ_12blake2b_simd20state_words_to_bytes:
  529|   463k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|   463k|    let mut bytes = [0; OUTBYTES];
  531|   463k|    {
  532|   463k|        const W: usize = size_of::<Word>();
  533|   463k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|   463k|        *refs.0 = state_words[0].to_le_bytes();
  535|   463k|        *refs.1 = state_words[1].to_le_bytes();
  536|   463k|        *refs.2 = state_words[2].to_le_bytes();
  537|   463k|        *refs.3 = state_words[3].to_le_bytes();
  538|   463k|        *refs.4 = state_words[4].to_le_bytes();
  539|   463k|        *refs.5 = state_words[5].to_le_bytes();
  540|   463k|        *refs.6 = state_words[6].to_le_bytes();
  541|   463k|        *refs.7 = state_words[7].to_le_bytes();
  542|   463k|    }
  543|   463k|    bytes
  544|   463k|}
_RNvMs1_Cs7r5CEKva1jQ_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|   463k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|   463k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|   463k|        }
  450|   463k|    }
_RNvMs1_Cs7r5CEKva1jQ_12blake2b_simdNtB5_5State8finalize:
  482|   463k|    pub fn finalize(&self) -> Hash {
  483|   463k|        let mut words_copy = self.words;
  484|   463k|        self.implementation.compress1_loop(
  485|   463k|            &self.buf[..self.buflen as usize],
  486|   463k|            &mut words_copy,
  487|   463k|            self.count,
  488|   463k|            self.last_node,
  489|   463k|            guts::Finalize::Yes,
  490|   463k|            guts::Stride::Serial,
  491|   463k|        );
  492|   463k|        Hash {
  493|   463k|            bytes: state_words_to_bytes(&words_copy),
  494|   463k|            len: self.hash_length,
  495|   463k|        }
  496|   463k|    }
_RNvMCs7r5CEKva1jQ_12blake2b_simdNtB2_6Params8to_state:
  230|   463k|    pub fn to_state(&self) -> State {
  231|   463k|        State::with_params(self)
  232|   463k|    }
_RNvMs5_Cs7r5CEKva1jQ_12blake2b_simdNtB5_4Hash8as_bytes:
  589|   463k|    pub fn as_bytes(&self) -> &[u8] {
  590|   463k|        &self.bytes[..self.len as usize]
  591|   463k|    }
_RNvMs1_Cs7r5CEKva1jQ_12blake2b_simdNtB5_5State8fill_buf:
  424|   463k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|   463k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|   463k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|   463k|        self.buflen += take as u8;
  428|   463k|        *input = &input[take..];
  429|   463k|    }
_RNvMs1_Cs7r5CEKva1jQ_12blake2b_simdNtB5_5State11with_params:
  406|   463k|    fn with_params(params: &Params) -> Self {
  407|   463k|        let mut state = Self {
  408|   463k|            words: params.to_words(),
  409|   463k|            count: 0,
  410|   463k|            buf: [0; BLOCKBYTES],
  411|   463k|            buflen: 0,
  412|   463k|            last_node: params.last_node,
  413|   463k|            hash_length: params.hash_length,
  414|   463k|            implementation: params.implementation,
  415|   463k|            is_keyed: params.key_length > 0,
  416|   463k|        };
  417|   463k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|   463k|        }
  421|   463k|        state
  422|   463k|    }
_RNvMs1_Cs7r5CEKva1jQ_12blake2b_simdNtB5_5State6update:
  453|   463k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|   463k|        // If we have a partial buffer, try to complete it.
  455|   463k|        self.compress_buffer_if_possible(&mut input);
  456|   463k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|   463k|        // above), compress blocks directly without copying.
  458|   463k|        let mut end = input.len().saturating_sub(1);
  459|   463k|        end -= end % BLOCKBYTES;
  460|   463k|        if end > 0 {
  461|  34.0k|            self.implementation.compress1_loop(
  462|  34.0k|                &input[..end],
  463|  34.0k|                &mut self.words,
  464|  34.0k|                self.count,
  465|  34.0k|                self.last_node,
  466|  34.0k|                guts::Finalize::No,
  467|  34.0k|                guts::Stride::Serial,
  468|  34.0k|            );
  469|  34.0k|            self.count = self.count.wrapping_add(end as Count);
  470|  34.0k|            input = &input[end..];
  471|   429k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|   463k|        self.fill_buf(&mut input);
  477|   463k|        self
  478|   463k|    }

_RNvMNtCsikhUnhnQivz_3cid3cidINtB2_3CidKj40_E3newCskyBRBO12fJg_6simple:
   99|   397k|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|   397k|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|   397k|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|   397k|    }
_RINvMNtCsikhUnhnQivz_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsTv665f55BC_5alloc3vec3VechEECskyBRBO12fJg_6simple:
  143|   584k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|   584k|        let mut version_buf = varint_encode::u64_buffer();
  145|   584k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|   584k|
  147|   584k|        let mut codec_buf = varint_encode::u64_buffer();
  148|   584k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|   584k|
  150|   584k|        w.write_all(version)?;
  151|   584k|        w.write_all(codec)?;
  152|   584k|        self.hash.write(&mut w)?;
  153|   584k|        Ok(())
  154|   584k|    }
_RNvMNtCsikhUnhnQivz_3cid3cidINtB2_3CidKj40_E6new_v1CskyBRBO12fJg_6simple:
   90|   861k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|   861k|        Self {
   92|   861k|            version: Version::V1,
   93|   861k|            codec,
   94|   861k|            hash,
   95|   861k|        }
   96|   861k|    }
_RINvMNtCsikhUnhnQivz_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECskyBRBO12fJg_6simple:
  127|   397k|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|   397k|        let version = varint_read_u64(&mut r)?;
  129|   397k|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|   397k|        if [version, codec] == [0x12, 0x20] {
  132|      0|            let mut digest = [0u8; 32];
  133|      0|            r.read_exact(&mut digest)?;
  134|      0|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|      0|            Self::new_v0(mh)
  136|       |        } else {
  137|   397k|            let version = Version::try_from(version)?;
  138|   397k|            let mh = Multihash::read(r)?;
  139|   397k|            Self::new(version, codec, mh)
  140|       |        }
  141|   397k|    }
_RINvMNtCsikhUnhnQivz_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsTv665f55BC_5alloc3vec3VechEECskyBRBO12fJg_6simple:
  157|   584k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|   584k|        match self.version {
  159|      0|            Version::V0 => self.hash.write(w)?,
  160|   584k|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|   584k|        Ok(())
  163|   584k|    }
_RNvMNtCsikhUnhnQivz_3cid3cidINtB2_3CidKj40_E8to_bytesCskyBRBO12fJg_6simple:
  167|   584k|    pub fn to_bytes(&self) -> Vec<u8> {
  168|   584k|        let mut bytes = Vec::new();
  169|   584k|        self.write_bytes(&mut bytes).unwrap();
  170|   584k|        bytes
  171|   584k|    }
_RNvXs6_NtCsikhUnhnQivz_3cid3cidINtB5_3CidKj40_EINtNtCs5KtMyn79NKx_4core7convert7TryFromRShE8try_fromCskyBRBO12fJg_6simple:
  314|   397k|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|   397k|        Self::read_bytes(&mut bytes)
  316|   397k|    }
_RINvXsk_NtCsikhUnhnQivz_3cid3cidINtB6_3CidKj40_ENtNtCs5KtMyn79NKx_4core4hash4Hash4hashNtNtNtNtCs3zdfyeRZrN1_3std11collections4hash3map13DefaultHasherECs7B7989kbyAV_10fvm_shared:
   64|  1.29M|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RNvXse_NtCsikhUnhnQivz_3cid3cidINtB5_3CidKj40_ENtNtCs5KtMyn79NKx_4core3cmp9PartialEq2eqCs7B7989kbyAV_10fvm_shared:
   64|   380k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXNtCsikhUnhnQivz_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs9JCvGpgyHyQ_5serde3ser9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   29|   584k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|   584k|    where
   31|   584k|        S: ser::Serializer,
   32|   584k|    {
   33|   584k|        let value = ByteBuf::from(self.to_bytes());
   34|   584k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|   584k|    }
_RINvXs0_NtCsikhUnhnQivz_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1P_4read9SliceReadEECskyBRBO12fJg_6simple:
   79|   397k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|   397k|    where
   81|   397k|        D: de::Deserializer<'de>,
   82|   397k|    {
   83|   397k|        /// Main visitor to deserialize a CID.
   84|   397k|        ///
   85|   397k|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|   397k|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|   397k|        /// to bytes.
   88|   397k|        struct MainEntryVisitor;
   89|   397k|
   90|   397k|        impl<'de> de::Visitor<'de> for MainEntryVisitor {
   91|   397k|            type Value = Cid;
   92|   397k|
   93|   397k|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|   397k|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|   397k|            }
   96|   397k|
   97|   397k|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|   397k|            where
   99|   397k|                D: de::Deserializer<'de>,
  100|   397k|            {
  101|   397k|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|   397k|            }
  103|   397k|        }
  104|   397k|
  105|   397k|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|   397k|    }
_RINvXNvXs0_NtCsikhUnhnQivz_3cid5serdeINtNtBb_3cid3CidKj40_ENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserializeNtB3_16MainEntryVisitorNtBX_7Visitor20visit_newtype_structQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de15CidDeserializerNtNtB2O_4read9SliceReadEECskyBRBO12fJg_6simple:
   97|   397k|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|   397k|            where
   99|   397k|                D: de::Deserializer<'de>,
  100|   397k|            {
  101|   397k|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|   397k|            }
_RINvXs_NtCsikhUnhnQivz_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs9JCvGpgyHyQ_5serde2de7Visitor11visit_bytesNtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
   48|   397k|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|   397k|    where
   50|   397k|        E: de::Error,
   51|   397k|    {
   52|   397k|        Cid::try_from(value)
   53|   397k|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|   397k|    }

_RNvXs2_NtCsikhUnhnQivz_3cid7versionNtB5_7VersionNtNtCs5KtMyn79NKx_4core3cmp9PartialEq2eqCs7B7989kbyAV_10fvm_shared:
    6|   380k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RINvXsa_NtCsikhUnhnQivz_3cid7versionNtB6_7VersionNtNtCs5KtMyn79NKx_4core4hash4Hash4hashNtNtNtNtCs3zdfyeRZrN1_3std11collections4hash3map13DefaultHasherECs7B7989kbyAV_10fvm_shared:
    6|  1.29M|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs0_NtCsikhUnhnQivz_3cid7versionyINtNtCs5KtMyn79NKx_4core7convert4FromNtB5_7VersionE4from:
   44|   584k|    fn from(ver: Version) -> u64 {
   45|   584k|        match ver {
   46|      0|            Version::V0 => 0,
   47|   584k|            Version::V1 => 1,
   48|       |        }
   49|   584k|    }
_RNvXs_NtCsikhUnhnQivz_3cid7versionNtB4_7VersionINtNtCs5KtMyn79NKx_4core7convert7TryFromyE8try_from:
   34|   397k|    fn try_from(raw: u64) -> Result<Self> {
   35|   397k|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|   397k|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|   397k|    }

_RINvXsd_NtCsdln2yFZRdsh_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs9JCvGpgyHyQ_5serde2de7Visitor11visit_bytesNtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
  203|   262k|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|   262k|    where
  205|   262k|        E: Error,
  206|   262k|    {
  207|   262k|        Ok(ByteBuf::from(v))
  208|   262k|    }
_RINvMNtCsdln2yFZRdsh_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECskyBRBO12fJg_6simple:
   60|   262k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|   262k|        ByteBuf {
   62|   262k|            bytes: bytes.into(),
   63|   262k|        }
   64|   262k|    }
_RINvXse_NtCsdln2yFZRdsh_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1U_4read9SliceReadEECskyBRBO12fJg_6simple:
  219|   262k|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|   262k|    where
  221|   262k|        D: Deserializer<'de>,
  222|   262k|    {
  223|   262k|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|   262k|    }
_RNvMNtCsdln2yFZRdsh_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|   262k|    pub fn into_vec(self) -> Vec<u8> {
   68|   262k|        self.bytes
   69|   262k|    }

_RINvXs1_NtCsdln2yFZRdsh_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1D_4read9SliceReadEECskyBRBO12fJg_6simple:
   61|   262k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|   262k|    where
   63|   262k|        D: Deserializer<'de>,
   64|   262k|    {
   65|   262k|        // Via the serde::Deserialize impl for ByteBuf.
   66|   262k|        serde::Deserialize::deserialize(deserializer)
   67|   262k|    }
_RINvXs_NtCsdln2yFZRdsh_14cs_serde_bytes2deINtNtCsTv665f55BC_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1N_4read9SliceReadEECskyBRBO12fJg_6simple:
   42|   262k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|   262k|    where
   44|   262k|        D: Deserializer<'de>,
   45|   262k|    {
   46|   262k|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|   262k|    }

_RINvCsdln2yFZRdsh_14cs_serde_bytes9serializeRShQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   77|   463k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|   463k|where
   79|   463k|    T: ?Sized + Serialize,
   80|   463k|    S: Serializer,
   81|   463k|{
   82|   463k|    Serialize::serialize(bytes, serializer)
   83|   463k|}
_RINvCsdln2yFZRdsh_14cs_serde_bytes11deserializeINtNtCsTv665f55BC_5alloc3vec3VechEQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1n_4read9SliceReadEECskyBRBO12fJg_6simple:
  103|   262k|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|   262k|where
  105|   262k|    T: Deserialize<'de>,
  106|   262k|    D: Deserializer<'de>,
  107|   262k|{
  108|   262k|    Deserialize::deserialize(deserializer)
  109|   262k|}

_RINvXs4_NtCsdln2yFZRdsh_14cs_serde_bytes3serRShNtB6_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   88|   463k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|   463k|    where
   90|   463k|        S: Serializer,
   91|   463k|    {
   92|   463k|        (**self).serialize(serializer)
   93|   463k|    }
_RINvXNtCsdln2yFZRdsh_14cs_serde_bytes3serShNtB3_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   27|   463k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   28|   463k|    where
   29|   463k|        S: Serializer,
   30|   463k|    {
   31|   463k|        serializer.serialize_bytes(self)
   32|   463k|    }

_RNvCsaf35BeA1XEK_9getrandom9getrandom:
  258|      1|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  259|      1|    if dest.is_empty() {
  260|      0|        return Ok(());
  261|      1|    }
  262|      1|    imp::getrandom_inner(dest)
  263|      1|}

_RNCNvNtCsaf35BeA1XEK_9getrandom3imp15getrandom_inner0B5_:
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
_RNvNtCsaf35BeA1XEK_9getrandom3imp22is_getrandom_available:
   27|      1|fn is_getrandom_available() -> bool {
   28|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   29|      1|    if res < 0 {
   30|      0|        match last_os_error().raw_os_error() {
   31|      0|            Some(libc::ENOSYS) => false, // No kernel support
   32|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   33|      0|            _ => true,
   34|       |        }
   35|       |    } else {
   36|      1|        true
   37|       |    }
   38|      1|}
_RNvNtCsaf35BeA1XEK_9getrandom3imp15getrandom_inner:
   16|      1|pub fn getrandom_inner(dest: &mut [u8]) -> Result<(), Error> {
   17|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   18|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
   22|       |    } else {
   23|      0|        use_file::getrandom_inner(dest)
   24|       |    }
   25|      1|}
_RNvNtCsaf35BeA1XEK_9getrandom3imp9getrandom:
   40|      2|unsafe fn getrandom(
   41|      2|    buf: *mut libc::c_void,
   42|      2|    buflen: libc::size_t,
   43|      2|    flags: libc::c_uint,
   44|      2|) -> libc::ssize_t {
   45|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   46|      2|}

_RNCINvMs_NtCsaf35BeA1XEK_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   62|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMs_NtCsaf35BeA1XEK_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   61|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   62|      1|        self.0.unsync_init(|| init() as usize) != 0
   63|      1|    }
_RINvMNtCsaf35BeA1XEK_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   42|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   43|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   44|      1|        let mut val = self.0.load(Relaxed);
   45|      1|        if val == Self::UNINIT {
   46|      1|            val = init();
   47|      1|            self.0.store(val, Relaxed);
   48|      1|        }
   49|      1|        val
   50|      1|    }

_RINvNtCsaf35BeA1XEK_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   56|      1|pub fn sys_fill_exact(
   57|      1|    mut buf: &mut [u8],
   58|      1|    sys_fill: impl Fn(&mut [u8]) -> libc::ssize_t,
   59|      1|) -> Result<(), Error> {
   60|      2|    while !buf.is_empty() {
   61|      1|        let res = sys_fill(buf);
   62|      1|        if res < 0 {
   63|      0|            let err = last_os_error();
   64|      0|            // We should try again if the call was interrupted.
   65|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   66|      0|                return Err(err);
   67|      0|            }
   68|      1|        } else {
   69|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   70|      1|            // should be an infinite stream of random bytes.
   71|      1|            buf = &mut buf[(res as usize)..];
   72|      1|        }
   73|       |    }
   74|      1|    Ok(())
   75|      1|}

rust_fuzzer_test_input:
  143|  1.08k|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  144|  1.08k|            use libfuzzer_sys::arbitrary::{Arbitrary, Unstructured};
  145|  1.08k|
  146|  1.08k|            // Early exit if we don't have enough bytes for the `Arbitrary`
  147|  1.08k|            // implementation. This helps the fuzzer avoid exploring all the
  148|  1.08k|            // different not-enough-input-bytes paths inside the `Arbitrary`
  149|  1.08k|            // implementation. Additionally, it exits faster, letting the fuzzer
  150|  1.08k|            // get to longer inputs that actually lead to interesting executions
  151|  1.08k|            // quicker.
  152|  1.08k|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  153|      1|                return;
  154|  1.07k|            }
  155|  1.07k|
  156|  1.07k|            let mut u = Unstructured::new(bytes);
  157|  1.07k|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  158|       |
  159|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  160|       |            // formatting of the input to that file. This is only intended for
  161|       |            // `cargo fuzz`'s use!
  162|  1.07k|            if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
  163|       |                use std::io::Write;
  164|      0|                let mut file = std::fs::File::create(path)
  165|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  166|      0|                (match data {
  167|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  168|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  169|       |                })
  170|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  171|      0|                return;
  172|  1.07k|            }
  173|       |
  174|  1.07k|            let $data = match data {
  175|  1.07k|                Ok(d) => d,
  176|      0|                Err(_) => return,
  177|       |            };
  178|       |
  179|       |            $body
  180|  1.08k|        }
LLVMFuzzerInitialize:
   39|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   40|      2|    // Registers a panic hook that aborts the process before unwinding.
   41|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   42|      2|    // able to analyse the process stack frames to tell different bugs appart.
   43|      2|    //
   44|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   45|      2|    // impossible to build code using compiler plugins with this flag.
   46|      2|    // We will be able to remove this code when
   47|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   48|      2|    let default_hook = ::std::panic::take_hook();
   49|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   50|       |        default_hook(panic_info);
   51|       |        ::std::process::abort();
   52|      2|    }));
   53|      2|    0
   54|      2|}
_RNCNvCs6mcmKjvFoI4_13libfuzzer_sys15test_input_wrap0B3_:
   25|  1.08k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   26|  1.08k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   27|  1.08k|        rust_fuzzer_test_input(data_slice);
   28|  1.08k|    });
LLVMFuzzerTestOneInput:
   24|  1.08k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   25|  1.08k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   26|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   27|       |        rust_fuzzer_test_input(data_slice);
   28|  1.08k|    });
   29|  1.08k|    if test_input.err().is_some() {
   30|       |        // hopefully the custom panic hook will be called before and abort the
   31|       |        // process before the stack frames are unwinded.
   32|      0|        ::std::process::abort();
   33|  1.08k|    }
   34|  1.08k|    0
   35|  1.08k|}

_RNvXNtNtCs5m2urdTiuQk_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCs5KtMyn79NKx_4core7default7Default7defaultB6_:
   35|   463k|            fn default() -> Self {
   36|   463k|                let mut params = $module::Params::new();
   37|   463k|                params.hash_length(S);
   38|   463k|                Self {
   39|   463k|                    state: params.to_state(),
   40|   463k|                    digest: [0; S],
   41|   463k|                }
   42|   463k|            }
_RNvXs_NtNtCs5m2urdTiuQk_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|   463k|            fn update(&mut self, input: &[u8]) {
   47|   463k|                self.state.update(input);
   48|   463k|            }
_RNvXs_NtNtCs5m2urdTiuQk_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|   463k|            fn finalize(&mut self) -> &[u8] {
   51|   463k|                let digest = self.state.finalize();
   52|   463k|                let digest_bytes = digest.as_bytes();
   53|   463k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|   463k|                digest_out.copy_from_slice(digest_bytes);
   55|   463k|                digest_out
   56|   463k|            }

_RINvMs_NtCs5m2urdTiuQk_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECskyBRBO12fJg_6simple:
  135|   397k|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|   397k|    where
  137|   397k|        Self: Sized,
  138|   397k|    {
  139|   397k|        let (code, size, digest) = read_multihash(r)?;
  140|   397k|        Ok(Self { code, size, digest })
  141|   397k|    }
_RNvMs_NtCs5m2urdTiuQk_9multihash9multihashINtB4_9MultihashKj40_E4sizeCskyBRBO12fJg_6simple:
  125|   584k|    pub const fn size(&self) -> u8 {
  126|   584k|        self.size
  127|   584k|    }
_RINvNtCs5m2urdTiuQk_9multihash9multihash15write_multihashQQINtNtCsTv665f55BC_5alloc3vec3VechEECskyBRBO12fJg_6simple:
  276|   584k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|   584k|where
  278|   584k|    W: io::Write,
  279|   584k|{
  280|   584k|    let mut code_buf = varint_encode::u64_buffer();
  281|   584k|    let code = varint_encode::u64(code, &mut code_buf);
  282|   584k|
  283|   584k|    let mut size_buf = varint_encode::u8_buffer();
  284|   584k|    let size = varint_encode::u8(size, &mut size_buf);
  285|   584k|
  286|   584k|    w.write_all(code)?;
  287|   584k|    w.write_all(size)?;
  288|   584k|    w.write_all(digest)?;
  289|   584k|    Ok(())
  290|   584k|}
_RINvMs_NtCs5m2urdTiuQk_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsTv665f55BC_5alloc3vec3VechEECskyBRBO12fJg_6simple:
  163|   584k|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|   584k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|   584k|    }
_RINvNtCs5m2urdTiuQk_9multihash9multihash14read_multihashQRShKj40_ECskyBRBO12fJg_6simple:
  298|   397k|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|   397k|where
  300|   397k|    R: io::Read,
  301|   397k|{
  302|   397k|    let code = read_u64(&mut r)?;
  303|   397k|    let size = read_u64(&mut r)?;
  304|       |
  305|   397k|    if size > S as u64 || size > u8::MAX as u64 {
  306|      0|        return Err(Error::InvalidSize(size));
  307|   397k|    }
  308|   397k|
  309|   397k|    let mut digest = [0; S];
  310|   397k|    r.read_exact(&mut digest[..size as usize])?;
  311|   397k|    Ok((code, size as u8, digest))
  312|   397k|}
_RNvMs_NtCs5m2urdTiuQk_9multihash9multihashINtB4_9MultihashKj40_E6digestCskyBRBO12fJg_6simple:
  130|   584k|    pub fn digest(&self) -> &[u8] {
  131|   584k|        &self.digest[..self.size as usize]
  132|   584k|    }
_RNvMs_NtCs5m2urdTiuQk_9multihash9multihashINtB4_9MultihashKj40_E4codeCskyBRBO12fJg_6simple:
  120|   584k|    pub const fn code(&self) -> u64 {
  121|   584k|        self.code
  122|   584k|    }
_RNvXs2_NtCs5m2urdTiuQk_9multihash9multihashINtB5_9MultihashKj40_ENtNtCs5KtMyn79NKx_4core3cmp9PartialEq2eqCs7B7989kbyAV_10fvm_shared:
  233|   380k|    fn eq(&self, other: &Multihash<B>) -> bool {
  234|   380k|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  235|   380k|        self.code == other.code && self.digest() == other.digest()
  236|   380k|    }
_RNvMs_NtCs5m2urdTiuQk_9multihash9multihashINtB4_9MultihashKj40_E6digestCs7B7989kbyAV_10fvm_shared:
  130|  2.05M|    pub fn digest(&self) -> &[u8] {
  131|  2.05M|        &self.digest[..self.size as usize]
  132|  2.05M|    }
_RINvXs0_NtCs5m2urdTiuQk_9multihash9multihashINtB6_9MultihashKj40_ENtNtCs5KtMyn79NKx_4core4hash4Hash4hashNtNtNtNtCs3zdfyeRZrN1_3std11collections4hash3map13DefaultHasherECs7B7989kbyAV_10fvm_shared:
  219|  1.29M|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  220|  1.29M|        self.code.hash(state);
  221|  1.29M|        self.digest().hash(state);
  222|  1.29M|    }
_RNvMs_NtCs5m2urdTiuQk_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|   463k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|   463k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|   463k|        }
  105|   463k|        let size = input_digest.len();
  106|   463k|        let mut digest = [0; S];
  107|   463k|        let mut i = 0;
  108|  15.3M|        while i < size {
  109|  14.8M|            digest[i] = input_digest[i];
  110|  14.8M|            i += 1;
  111|  14.8M|        }
  112|   463k|        Ok(Self {
  113|   463k|            code,
  114|   463k|            size: size as u8,
  115|   463k|            digest,
  116|   463k|        })
  117|   463k|    }

_RNvXs3_NtCs5m2urdTiuQk_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|   463k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE3newCskyBRBO12fJg_6simple:
  429|   603k|        pub const fn new() -> OnceCell<T> {
  430|   603k|            OnceCell { inner: UnsafeCell::new(None) }
  431|   603k|        }
_RNvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE10try_insertCskyBRBO12fJg_6simple:
  499|  56.1k|        pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {
  500|  56.1k|            if let Some(old) = self.get() {
  501|      0|                return Err((old, value));
  502|  56.1k|            }
  503|  56.1k|            let slot = unsafe { &mut *self.inner.get() };
  504|  56.1k|            // This is the only place where we set the slot, no races
  505|  56.1k|            // due to reentrancy/concurrency are possible, and we've
  506|  56.1k|            // checked that slot is currently `None`, so this write
  507|  56.1k|            // maintains the `inner`'s invariant.
  508|  56.1k|            *slot = Some(value);
  509|  56.1k|            Ok(match &*slot {
  510|  56.1k|                Some(value) => value,
  511|      0|                None => unsafe { hint::unreachable_unchecked() },
  512|       |            })
  513|  56.1k|        }
_RNvXs5_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEEINtNtCs5KtMyn79NKx_4core7convert4FromBR_E4fromCskyBRBO12fJg_6simple:
  422|   453k|        fn from(value: T) -> Self {
  423|   453k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  424|   453k|        }
_RNvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE3getCskyBRBO12fJg_6simple:
  436|   210k|        pub fn get(&self) -> Option<&T> {
  437|   210k|            // Safe due to `inner`'s invariant
  438|   210k|            unsafe { &*self.inner.get() }.as_ref()
  439|   210k|        }
_RNvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE10into_innerCskyBRBO12fJg_6simple:
  637|   206k|        pub fn into_inner(self) -> Option<T> {
  638|   206k|            // Because `into_inner` takes `self` by value, the compiler statically verifies
  639|   206k|            // that it is not currently borrowed. So it is safe to move out `Option<T>`.
  640|   206k|            self.inner.into_inner()
  641|   206k|        }
_RNvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE3setCskyBRBO12fJg_6simple:
  478|  56.1k|        pub fn set(&self, value: T) -> Result<(), T> {
  479|  56.1k|            match self.try_insert(value) {
  480|  56.1k|                Ok(_) => Ok(()),
  481|      0|                Err((_, value)) => Err(value),
  482|       |            }
  483|  56.1k|        }
_RNvXs0_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEENtNtCs5KtMyn79NKx_4core7default7Default7defaultCskyBRBO12fJg_6simple:
  386|   603k|        fn default() -> Self {
  387|   603k|            Self::new()
  388|   603k|        }
_RINvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB6_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE15get_or_try_initNCINvMs4_B1t_B1q_6deleteRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE0NtNtB1v_5error5ErrorECskyBRBO12fJg_6simple:
  572|  46.6k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  573|  46.6k|        where
  574|  46.6k|            F: FnOnce() -> Result<T, E>,
  575|  46.6k|        {
  576|  46.6k|            if let Some(val) = self.get() {
  577|  12.7k|                return Ok(val);
  578|  33.8k|            }
  579|  33.8k|            let val = f()?;
  580|       |            // Note that *some* forms of reentrant initialization might lead to
  581|       |            // UB (see `reentrant_init` test). I believe that just removing this
  582|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  583|       |            // better to panic, rather than to silently use an old value.
  584|  33.8k|            assert!(self.set(val).is_ok(), "reentrant init");
  585|  33.8k|            Ok(self.get().unwrap())
  586|  46.6k|        }
_RNvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB5_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE7get_mutCskyBRBO12fJg_6simple:
  456|  46.6k|        pub fn get_mut(&mut self) -> Option<&mut T> {
  457|  46.6k|            // Safe because we have unique access
  458|  46.6k|            unsafe { &mut *self.inner.get() }.as_mut()
  459|  46.6k|        }
_RINvMs6_NtCskVc9gsDWymA_9once_cell6unsyncINtB6_8OnceCellINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEE15get_or_try_initNCINvMs4_B1t_B1q_3getRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreEs0_0NtNtB1v_5error5ErrorECskyBRBO12fJg_6simple:
  572|  51.8k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  573|  51.8k|        where
  574|  51.8k|            F: FnOnce() -> Result<T, E>,
  575|  51.8k|        {
  576|  51.8k|            if let Some(val) = self.get() {
  577|  29.5k|                return Ok(val);
  578|  22.3k|            }
  579|  22.3k|            let val = f()?;
  580|       |            // Note that *some* forms of reentrant initialization might lead to
  581|       |            // UB (see `reentrant_init` test). I believe that just removing this
  582|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  583|       |            // better to panic, rather than to silently use an old value.
  584|  22.3k|            assert!(self.set(val).is_ok(), "reentrant init");
  585|  22.3k|            Ok(self.get().unwrap())
  586|  51.8k|        }

_RINvMs1_NtNtCskVc9gsDWymA_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsTv665f55BC_5alloc5boxed3BoxDNtNtCs72lNd55x91m_5ahash12random_state12RandomSourceNtNtCs5KtMyn79NKx_4core6marker4SyncNtB2r_4SendEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1B_NtB1B_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECskyBRBO12fJg_6simple:
  256|  1.07k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  257|  1.07k|        where
  258|  1.07k|            F: FnOnce() -> Result<Box<T>, E>,
  259|  1.07k|        {
  260|  1.07k|            let mut ptr = self.inner.load(Ordering::Acquire);
  261|  1.07k|
  262|  1.07k|            if ptr.is_null() {
  263|      1|                let val = f()?;
  264|      1|                ptr = Box::into_raw(val);
  265|      1|                let exchange = self.inner.compare_exchange(
  266|      1|                    ptr::null_mut(),
  267|      1|                    ptr,
  268|      1|                    Ordering::AcqRel,
  269|      1|                    Ordering::Acquire,
  270|      1|                );
  271|      1|                if let Err(old) = exchange {
  272|      0|                    drop(unsafe { Box::from_raw(ptr) });
  273|      0|                    ptr = old;
  274|      1|                }
  275|  1.07k|            };
  276|  1.07k|            Ok(unsafe { &*ptr })
  277|  1.07k|        }
_RNCINvMs1_NtNtCskVc9gsDWymA_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCsTv665f55BC_5alloc5boxed3BoxDNtNtCs72lNd55x91m_5ahash12random_state12RandomSourceNtNtCs5KtMyn79NKx_4core6marker4SyncNtB2t_4SendEL_EE11get_or_initNCNvMs1_B1D_NtB1D_11RandomState7get_src0E0CskyBRBO12fJg_6simple:
  243|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCskVc9gsDWymA_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsTv665f55BC_5alloc5boxed3BoxDNtNtCs72lNd55x91m_5ahash12random_state12RandomSourceNtNtCs5KtMyn79NKx_4core6marker4SyncNtB2r_4SendEL_EE11get_or_initNCNvMs1_B1B_NtB1B_11RandomState7get_src0ECskyBRBO12fJg_6simple:
  238|  1.07k|        pub fn get_or_init<F>(&self, f: F) -> &T
  239|  1.07k|        where
  240|  1.07k|            F: FnOnce() -> Box<T>,
  241|  1.07k|        {
  242|  1.07k|            enum Void {}
  243|  1.07k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  244|  1.07k|                Ok(val) => val,
  245|  1.07k|                Err(void) => match void {},
  246|  1.07k|            }
  247|  1.07k|        }
_RNCINvMs1_NtNtCskVc9gsDWymA_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs72lNd55x91m_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  243|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCskVc9gsDWymA_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs72lNd55x91m_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  238|  1.07k|        pub fn get_or_init<F>(&self, f: F) -> &T
  239|  1.07k|        where
  240|  1.07k|            F: FnOnce() -> Box<T>,
  241|  1.07k|        {
  242|  1.07k|            enum Void {}
  243|  1.07k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  244|  1.07k|                Ok(val) => val,
  245|  1.07k|                Err(void) => match void {},
  246|  1.07k|            }
  247|  1.07k|        }
_RINvMs1_NtNtCskVc9gsDWymA_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCs72lNd55x91m_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  256|  1.07k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  257|  1.07k|        where
  258|  1.07k|            F: FnOnce() -> Result<Box<T>, E>,
  259|  1.07k|        {
  260|  1.07k|            let mut ptr = self.inner.load(Ordering::Acquire);
  261|  1.07k|
  262|  1.07k|            if ptr.is_null() {
  263|      1|                let val = f()?;
  264|      1|                ptr = Box::into_raw(val);
  265|      1|                let exchange = self.inner.compare_exchange(
  266|      1|                    ptr::null_mut(),
  267|      1|                    ptr,
  268|      1|                    Ordering::AcqRel,
  269|      1|                    Ordering::Acquire,
  270|      1|                );
  271|      1|                if let Err(old) = exchange {
  272|      0|                    drop(unsafe { Box::from_raw(ptr) });
  273|      0|                    ptr = old;
  274|      1|                }
  275|  1.07k|            };
  276|  1.07k|            Ok(unsafe { &*ptr })
  277|  1.07k|        }

_RINvXNvXsV_NtNtCs9JCvGpgyHyQ_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u16NtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
  163|    929|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  164|    929|        where
  165|    929|            E: Error,
  166|    929|        {
  167|    929|            Ok(v as Self::Value)
  168|    929|        }
_RINvXsT_NtNtCs9JCvGpgyHyQ_5serde2de5implsmNtB8_11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1f_4read9SliceReadEECskyBRBO12fJg_6simple:
  113|  20.0k|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|  20.0k|            where
  115|  20.0k|                D: Deserializer<'de>,
  116|  20.0k|            {
  117|  20.0k|                struct PrimitiveVisitor;
  118|  20.0k|
  119|  20.0k|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|  20.0k|                    type Value = $primitive;
  121|  20.0k|
  122|  20.0k|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|  20.0k|                        formatter.write_str(stringify!($primitive))
  124|  20.0k|                    }
  125|  20.0k|
  126|  20.0k|                    $($($method!($val : $visit);)*)*
  127|  20.0k|                }
  128|  20.0k|
  129|  20.0k|                deserializer.$deserialize(PrimitiveVisitor)
  130|  20.0k|            }
_RINvXsV_NtNtCs9JCvGpgyHyQ_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1f_4read9SliceReadEECskyBRBO12fJg_6simple:
  113|  24.7k|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|  24.7k|            where
  115|  24.7k|                D: Deserializer<'de>,
  116|  24.7k|            {
  117|  24.7k|                struct PrimitiveVisitor;
  118|  24.7k|
  119|  24.7k|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|  24.7k|                    type Value = $primitive;
  121|  24.7k|
  122|  24.7k|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|  24.7k|                        formatter.write_str(stringify!($primitive))
  124|  24.7k|                    }
  125|  24.7k|
  126|  24.7k|                    $($($method!($val : $visit);)*)*
  127|  24.7k|                }
  128|  24.7k|
  129|  24.7k|                deserializer.$deserialize(PrimitiveVisitor)
  130|  24.7k|            }
_RINvXNvXsV_NtNtCs9JCvGpgyHyQ_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64NtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
  138|  8.48k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|  8.48k|        where
  140|  8.48k|            E: Error,
  141|  8.48k|        {
  142|  8.48k|            Ok(v)
  143|  8.48k|        }
_RINvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EENtB8_11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB2m_4read9SliceReadEECskyBRBO12fJg_6simple:
 1014|   262k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|   262k|    where
 1016|   262k|        D: Deserializer<'de>,
 1017|   262k|    {
 1018|   262k|        struct VecVisitor<T> {
 1019|   262k|            marker: PhantomData<T>,
 1020|   262k|        }
 1021|   262k|
 1022|   262k|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|   262k|        where
 1024|   262k|            T: Deserialize<'de>,
 1025|   262k|        {
 1026|   262k|            type Value = Vec<T>;
 1027|   262k|
 1028|   262k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|   262k|                formatter.write_str("a sequence")
 1030|   262k|            }
 1031|   262k|
 1032|   262k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|   262k|            where
 1034|   262k|                A: SeqAccess<'de>,
 1035|   262k|            {
 1036|   262k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|   262k|
 1038|   262k|                while let Some(value) = try!(seq.next_element()) {
 1039|   262k|                    values.push(value);
 1040|   262k|                }
 1041|   262k|
 1042|   262k|                Ok(values)
 1043|   262k|            }
 1044|   262k|        }
 1045|   262k|
 1046|   262k|        let visitor = VecVisitor {
 1047|   262k|            marker: PhantomData,
 1048|   262k|        };
 1049|   262k|        deserializer.deserialize_seq(visitor)
 1050|   262k|    }
_RINvXNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitoryENtBb_7Visitor9visit_seqINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB2v_4read9SliceReadEECskyBRBO12fJg_6simple:
 1032|   262k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|   262k|            where
 1034|   262k|                A: SeqAccess<'de>,
 1035|   262k|            {
 1036|   262k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|   277k|                while let Some(value) = try!(seq.next_element()) {
 1039|  14.7k|                    values.push(value);
 1040|  14.7k|                }
 1041|       |
 1042|   262k|                Ok(values)
 1043|   262k|            }
_RINvXs2M_NtNtCs9JCvGpgyHyQ_5serde2de5implsTmmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEENtB9_11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB2d_4read9SliceReadEECskyBRBO12fJg_6simple:
 1261|  10.0k|                fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1262|  10.0k|                where
 1263|  10.0k|                    D: Deserializer<'de>,
 1264|  10.0k|                {
 1265|  10.0k|                    struct TupleVisitor<$($name,)+> {
 1266|  10.0k|                        marker: PhantomData<($($name,)+)>,
 1267|  10.0k|                    }
 1268|  10.0k|
 1269|  10.0k|                    impl<'de, $($name: Deserialize<'de>),+> Visitor<'de> for TupleVisitor<$($name,)+> {
 1270|  10.0k|                        type Value = ($($name,)+);
 1271|  10.0k|
 1272|  10.0k|                        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1273|  10.0k|                            formatter.write_str(concat!("a tuple of size ", $len))
 1274|  10.0k|                        }
 1275|  10.0k|
 1276|  10.0k|                        #[inline]
 1277|  10.0k|                        #[allow(non_snake_case)]
 1278|  10.0k|                        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1279|  10.0k|                        where
 1280|  10.0k|                            A: SeqAccess<'de>,
 1281|  10.0k|                        {
 1282|  10.0k|                            $(
 1283|  10.0k|                                let $name = match try!(seq.next_element()) {
 1284|  10.0k|                                    Some(value) => value,
 1285|  10.0k|                                    None => return Err(Error::invalid_length($n, &self)),
 1286|  10.0k|                                };
 1287|  10.0k|                            )+
 1288|  10.0k|
 1289|  10.0k|                            Ok(($($name,)+))
 1290|  10.0k|                        }
 1291|  10.0k|                    }
 1292|  10.0k|
 1293|  10.0k|                    deserializer.deserialize_tuple($len, TupleVisitor { marker: PhantomData })
 1294|  10.0k|                }
_RINvXNvXsV_NtNtCs9JCvGpgyHyQ_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor8visit_u8NtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
  163|  13.7k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  164|  13.7k|        where
  165|  13.7k|            E: Error,
  166|  13.7k|        {
  167|  13.7k|            Ok(v as Self::Value)
  168|  13.7k|        }
_RINvXNvXsV_NtNtCs9JCvGpgyHyQ_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u32NtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
  163|  1.53k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  164|  1.53k|        where
  165|  1.53k|            E: Error,
  166|  1.53k|        {
  167|  1.53k|            Ok(v as Self::Value)
  168|  1.53k|        }
_RINvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecyENtB8_11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1M_4read9SliceReadEECskyBRBO12fJg_6simple:
 1014|   262k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|   262k|    where
 1016|   262k|        D: Deserializer<'de>,
 1017|   262k|    {
 1018|   262k|        struct VecVisitor<T> {
 1019|   262k|            marker: PhantomData<T>,
 1020|   262k|        }
 1021|   262k|
 1022|   262k|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|   262k|        where
 1024|   262k|            T: Deserialize<'de>,
 1025|   262k|        {
 1026|   262k|            type Value = Vec<T>;
 1027|   262k|
 1028|   262k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|   262k|                formatter.write_str("a sequence")
 1030|   262k|            }
 1031|   262k|
 1032|   262k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|   262k|            where
 1034|   262k|                A: SeqAccess<'de>,
 1035|   262k|            {
 1036|   262k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|   262k|
 1038|   262k|                while let Some(value) = try!(seq.next_element()) {
 1039|   262k|                    values.push(value);
 1040|   262k|                }
 1041|   262k|
 1042|   262k|                Ok(values)
 1043|   262k|            }
 1044|   262k|        }
 1045|   262k|
 1046|   262k|        let visitor = VecVisitor {
 1047|   262k|            marker: PhantomData,
 1048|   262k|        };
 1049|   262k|        deserializer.deserialize_seq(visitor)
 1050|   262k|    }
_RINvXNvXsT_NtNtCs9JCvGpgyHyQ_5serde2de5implsmNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor8visit_u8NtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
  163|  20.0k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  164|  20.0k|        where
  165|  20.0k|            E: Error,
  166|  20.0k|        {
  167|  20.0k|            Ok(v as Self::Value)
  168|  20.0k|        }
_RINvXNvXs2M_NtNtCs9JCvGpgyHyQ_5serde2de5implsTppppENtBc_11Deserialize11deserializeINtB3_12TupleVisitormmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEENtBc_7Visitor9visit_seqINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB31_4read9SliceReadEECskyBRBO12fJg_6simple:
 1278|  10.0k|                        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1279|  10.0k|                        where
 1280|  10.0k|                            A: SeqAccess<'de>,
 1281|  10.0k|                        {
 1282|       |                            $(
 1283|  10.0k|                                let $name = match try!(seq.next_element()) {
 1284|  10.0k|                                    Some(value) => value,
 1285|      0|                                    None => return Err(Error::invalid_length($n, &self)),
 1286|       |                                };
 1287|       |                            )+
 1288|       |
 1289|  10.0k|                            Ok(($($name,)+))
 1290|  10.0k|                        }
_RINvXNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EENtBb_7Visitor9visit_seqINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB35_4read9SliceReadEECskyBRBO12fJg_6simple:
 1032|   262k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|   262k|            where
 1034|   262k|                A: SeqAccess<'de>,
 1035|   262k|            {
 1036|   262k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|   659k|                while let Some(value) = try!(seq.next_element()) {
 1039|   397k|                    values.push(value);
 1040|   397k|                }
 1041|       |
 1042|   262k|                Ok(values)
 1043|   262k|            }

_RINvXs3_NtCs9JCvGpgyHyQ_5serde2deINtNtCs5KtMyn79NKx_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1U_4read9SliceReadEECskyBRBO12fJg_6simple:
  783|  24.7k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  24.7k|    where
  785|  24.7k|        D: Deserializer<'de>,
  786|  24.7k|    {
  787|  24.7k|        T::deserialize(deserializer)
  788|  24.7k|    }
_RINvXs3_NtCs9JCvGpgyHyQ_5serde2deINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsTv665f55BC_5alloc3vec3VecINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEENtB6_15DeserializeSeed11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB31_4read9SliceReadEECskyBRBO12fJg_6simple:
  783|   262k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|   262k|    where
  785|   262k|        D: Deserializer<'de>,
  786|   262k|    {
  787|   262k|        T::deserialize(deserializer)
  788|   262k|    }
_RINvYINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess12next_elementINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEECskyBRBO12fJg_6simple:
 1723|  10.0k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  10.0k|    where
 1725|  10.0k|        T: Deserialize<'de>,
 1726|  10.0k|    {
 1727|  10.0k|        self.next_element_seed(PhantomData)
 1728|  10.0k|    }
_RINvXs3_NtCs9JCvGpgyHyQ_5serde2deINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsTv665f55BC_5alloc3vec3VecyEENtB6_15DeserializeSeed11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB2r_4read9SliceReadEECskyBRBO12fJg_6simple:
  783|   262k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|   262k|    where
  785|   262k|        D: Deserializer<'de>,
  786|   262k|    {
  787|   262k|        T::deserialize(deserializer)
  788|   262k|    }
_RINvYNtNtCsdln2yFZRdsh_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs9JCvGpgyHyQ_5serde2de7Visitor20visit_borrowed_bytesNtNtCsb4b1WdChxoo_18serde_ipld_dagcbor5error5ErrorECskyBRBO12fJg_6simple:
 1563|   262k|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|   262k|    where
 1565|   262k|        E: Error,
 1566|   262k|    {
 1567|   262k|        self.visit_bytes(v)
 1568|   262k|    }
_RINvYINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess12next_elementINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EECskyBRBO12fJg_6simple:
 1723|   659k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|   659k|    where
 1725|   659k|        T: Deserialize<'de>,
 1726|   659k|    {
 1727|   659k|        self.next_element_seed(PhantomData)
 1728|   659k|    }
_RINvYINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess12next_elementINtNvXNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB2g_13CollapsedNodepENtB1i_11Deserialize11deserializeINtB2b_9___VisitorpENtB1i_7Visitor9visit_seq17___DeserializeWithyEECskyBRBO12fJg_6simple:
 1723|   262k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|   262k|    where
 1725|   262k|        T: Deserialize<'de>,
 1726|   262k|    {
 1727|   262k|        self.next_element_seed(PhantomData)
 1728|   262k|    }
_RINvYINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess12next_elementINtNtCsTv665f55BC_5alloc3vec3VecyEECskyBRBO12fJg_6simple:
 1723|   262k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|   262k|    where
 1725|   262k|        T: Deserialize<'de>,
 1726|   262k|    {
 1727|   262k|        self.next_element_seed(PhantomData)
 1728|   262k|    }
_RINvYINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess12next_elementyECskyBRBO12fJg_6simple:
 1723|   287k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|   287k|    where
 1725|   287k|        T: Deserialize<'de>,
 1726|   287k|    {
 1727|   287k|        self.next_element_seed(PhantomData)
 1728|   287k|    }
_RINvYINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess12next_elementINtNtCsTv665f55BC_5alloc3vec3VecINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
 1723|   262k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|   262k|    where
 1725|   262k|        T: Deserialize<'de>,
 1726|   262k|    {
 1727|   262k|        self.next_element_seed(PhantomData)
 1728|   262k|    }
_RINvXs3_NtCs9JCvGpgyHyQ_5serde2deINtNtCs5KtMyn79NKx_4core6marker11PhantomDatamENtB6_15DeserializeSeed11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1U_4read9SliceReadEECskyBRBO12fJg_6simple:
  783|  20.0k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  20.0k|    where
  785|  20.0k|        D: Deserializer<'de>,
  786|  20.0k|    {
  787|  20.0k|        T::deserialize(deserializer)
  788|  20.0k|    }
_RINvXs3_NtCs9JCvGpgyHyQ_5serde2deINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB2u_4read9SliceReadEECskyBRBO12fJg_6simple:
  783|   397k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|   397k|    where
  785|   397k|        D: Deserializer<'de>,
  786|   397k|    {
  787|   397k|        T::deserialize(deserializer)
  788|   397k|    }
_RINvXs3_NtCs9JCvGpgyHyQ_5serde2deINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEENtB6_15DeserializeSeed11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB2M_4read9SliceReadEECskyBRBO12fJg_6simple:
  783|  10.0k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  10.0k|    where
  785|  10.0k|        D: Deserializer<'de>,
  786|  10.0k|    {
  787|  10.0k|        T::deserialize(deserializer)
  788|  10.0k|    }
_RINvXs3_NtCs9JCvGpgyHyQ_5serde2deINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNvXNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB1o_13CollapsedNodepENtB6_11Deserialize11deserializeINtB1j_9___VisitorpENtB6_7Visitor9visit_seq17___DeserializeWithyEENtB6_15DeserializeSeed11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB4E_4read9SliceReadEECskyBRBO12fJg_6simple:
  783|   262k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|   262k|    where
  785|   262k|        D: Deserializer<'de>,
  786|   262k|    {
  787|   262k|        T::deserialize(deserializer)
  788|   262k|    }
_RINvYINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess12next_elementmECskyBRBO12fJg_6simple:
 1723|  20.0k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  20.0k|    where
 1725|  20.0k|        T: Deserialize<'de>,
 1726|  20.0k|    {
 1727|  20.0k|        self.next_element_seed(PhantomData)
 1728|  20.0k|    }

_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1t_5implsyNtB1t_11Deserialize11deserialize16PrimitiveVisitorECskyBRBO12fJg_6simple:
  127|  24.7k|        fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
  128|  24.7k|        where
  129|  24.7k|            $v: $crate::de::Visitor<$l>,
  130|  24.7k|        {
  131|  24.7k|            $(
  132|  24.7k|                let _ = $arg;
  133|  24.7k|            )*
  134|  24.7k|            self.deserialize_any(visitor)
  135|  24.7k|        }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1t_5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1t_11Deserialize11deserialize10VecVisitorINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
  127|   262k|        fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
  128|   262k|        where
  129|   262k|            $v: $crate::de::Visitor<$l>,
  130|   262k|        {
  131|   262k|            $(
  132|   262k|                let _ = $arg;
  133|   262k|            )*
  134|   262k|            self.deserialize_any(visitor)
  135|   262k|        }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer20deserialize_byte_bufNtNtCsdln2yFZRdsh_14cs_serde_bytes7bytebuf14ByteBufVisitorECskyBRBO12fJg_6simple:
  127|   262k|        fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
  128|   262k|        where
  129|   262k|            $v: $crate::de::Visitor<$l>,
  130|   262k|        {
  131|   262k|            $(
  132|   262k|                let _ = $arg;
  133|   262k|            )*
  134|   262k|            self.deserialize_any(visitor)
  135|   262k|        }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer24deserialize_tuple_structINtNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB2E_13CollapsedNodepENtB1t_11Deserialize11deserialize9___VisitoryEECskyBRBO12fJg_6simple:
  127|   262k|        fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
  128|   262k|        where
  129|   262k|            $v: $crate::de::Visitor<$l>,
  130|   262k|        {
  131|   262k|            $(
  132|   262k|                let _ = $arg;
  133|   262k|            )*
  134|   262k|            self.deserialize_any(visitor)
  135|   262k|        }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1t_5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1t_11Deserialize11deserialize10VecVisitoryEECskyBRBO12fJg_6simple:
  127|   262k|        fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
  128|   262k|        where
  129|   262k|            $v: $crate::de::Visitor<$l>,
  130|   262k|        {
  131|   262k|            $(
  132|   262k|                let _ = $arg;
  133|   262k|            )*
  134|   262k|            self.deserialize_any(visitor)
  135|   262k|        }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer17deserialize_tupleINtNvXs2M_NtB1t_5implsTppppENtB1t_11Deserialize11deserialize12TupleVisitormmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEEECskyBRBO12fJg_6simple:
  127|  10.0k|        fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
  128|  10.0k|        where
  129|  10.0k|            $v: $crate::de::Visitor<$l>,
  130|  10.0k|        {
  131|  10.0k|            $(
  132|  10.0k|                let _ = $arg;
  133|  10.0k|            )*
  134|  10.0k|            self.deserialize_any(visitor)
  135|  10.0k|        }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_u32NtNvXsT_NtB1t_5implsmNtB1t_11Deserialize11deserialize16PrimitiveVisitorECskyBRBO12fJg_6simple:
  127|  20.0k|        fn $func<$v>(self, $($arg: $ty,)* visitor: $v) -> $crate::__private::Result<$v::Value, Self::Error>
  128|  20.0k|        where
  129|  20.0k|            $v: $crate::de::Visitor<$l>,
  130|  20.0k|        {
  131|  20.0k|            $(
  132|  20.0k|                let _ = $arg;
  133|  20.0k|            )*
  134|  20.0k|            self.deserialize_any(visitor)
  135|  20.0k|        }

_RNvNtNtCs9JCvGpgyHyQ_5serde9___private9size_hint8cautiousCskyBRBO12fJg_6simple:
   12|   525k|pub fn cautious(hint: Option<usize>) -> usize {
   13|   525k|    cmp::min(hint.unwrap_or(0), 4096)
   14|   525k|}

_RINvXs1o_NtNtCs9JCvGpgyHyQ_5serde3ser5implsTNtNtNtCs7B7989kbyAV_10fvm_shared8encoding5bytes8BytesSerINtNtCsTv665f55BC_5alloc3vec3VecRINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEIB1B_RyEENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQIB1B_hEEECskyBRBO12fJg_6simple:
  314|   463k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  315|   463k|                where
  316|   463k|                    S: Serializer,
  317|   463k|                {
  318|   463k|                    let mut tuple = try!(serializer.serialize_tuple($len));
  319|       |                    $(
  320|   463k|                        try!(tuple.serialize_element(&self.$n));
  321|       |                    )+
  322|   463k|                    tuple.end()
  323|   463k|                }
_RINvXs1k_NtNtCs9JCvGpgyHyQ_5serde3ser5implsINtNtCsTv665f55BC_5alloc3vec3VecRyENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQIBG_hEEECskyBRBO12fJg_6simple:
  194|   463k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|   463k|            where
  196|   463k|                S: Serializer,
  197|   463k|            {
  198|   463k|                serializer.collect_seq(self)
  199|   463k|            }
_RINvXs1E_NtNtCs9JCvGpgyHyQ_5serde3ser5implsRRINtNtCsikhUnhnQivz_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  386|   584k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   584k|            where
  388|   584k|                S: Serializer,
  389|   584k|            {
  390|   584k|                (**self).serialize(serializer)
  391|   584k|            }
_RINvXs1G_NtNtCs9JCvGpgyHyQ_5serde3ser5implsINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtBK_3vec3VechEEECskyBRBO12fJg_6simple:
  386|   453k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   453k|            where
  388|   453k|                S: Serializer,
  389|   453k|            {
  390|   453k|                (**self).serialize(serializer)
  391|   453k|            }
_RINvXsD_NtNtCs9JCvGpgyHyQ_5serde3ser5implsmNtB8_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   11|  20.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  20.0k|            where
   13|  20.0k|                S: Serializer,
   14|  20.0k|            {
   15|  20.0k|                serializer.$method(*self $($cast)*)
   16|  20.0k|            }
_RINvXs1E_NtNtCs9JCvGpgyHyQ_5serde3ser5implsRmNtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  386|  20.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  20.0k|            where
  388|  20.0k|                S: Serializer,
  389|  20.0k|            {
  390|  20.0k|                (**self).serialize(serializer)
  391|  20.0k|            }
_RINvXs1E_NtNtCs9JCvGpgyHyQ_5serde3ser5implsRINtNtCsikhUnhnQivz_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  386|   584k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   584k|            where
  388|   584k|                S: Serializer,
  389|   584k|            {
  390|   584k|                (**self).serialize(serializer)
  391|   584k|            }
_RINvXs1p_NtNtCs9JCvGpgyHyQ_5serde3ser5implsTRmBG_RyRINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  314|  10.0k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  315|  10.0k|                where
  316|  10.0k|                    S: Serializer,
  317|  10.0k|                {
  318|  10.0k|                    let mut tuple = try!(serializer.serialize_tuple($len));
  319|       |                    $(
  320|  10.0k|                        try!(tuple.serialize_element(&self.$n));
  321|       |                    )+
  322|  10.0k|                    tuple.end()
  323|  10.0k|                }
_RINvXs1E_NtNtCs9JCvGpgyHyQ_5serde3ser5implsRINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  386|  10.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  10.0k|            where
  388|  10.0k|                S: Serializer,
  389|  10.0k|            {
  390|  10.0k|                (**self).serialize(serializer)
  391|  10.0k|            }
_RINvXs1E_NtNtCs9JCvGpgyHyQ_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  386|  41.5k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  41.5k|            where
  388|  41.5k|                S: Serializer,
  389|  41.5k|            {
  390|  41.5k|                (**self).serialize(serializer)
  391|  41.5k|            }
_RINvXs1k_NtNtCs9JCvGpgyHyQ_5serde3ser5implsINtNtCsTv665f55BC_5alloc3vec3VecRINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EENtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQIBG_hEEECskyBRBO12fJg_6simple:
  194|   463k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|   463k|            where
  196|   463k|                S: Serializer,
  197|   463k|            {
  198|   463k|                serializer.collect_seq(self)
  199|   463k|            }
_RINvXs1E_NtNtCs9JCvGpgyHyQ_5serde3ser5implsRRyNtB9_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  386|  31.5k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  31.5k|            where
  388|  31.5k|                S: Serializer,
  389|  31.5k|            {
  390|  31.5k|                (**self).serialize(serializer)
  391|  31.5k|            }
_RINvXsE_NtNtCs9JCvGpgyHyQ_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   11|  41.5k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  41.5k|            where
   13|  41.5k|                S: Serializer,
   14|  41.5k|            {
   15|  41.5k|                serializer.$method(*self $($cast)*)
   16|  41.5k|            }

_RINvNtCs9JCvGpgyHyQ_5serde3ser17iterator_len_hintINtNtNtCs5KtMyn79NKx_4core5slice4iter4IterRyEECskyBRBO12fJg_6simple:
 1982|   463k|    match iter.size_hint() {
 1983|   463k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|   463k|}
_RNCINvYQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer11collect_seqRIB11_RINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEE0CskyBRBO12fJg_6simple:
 1286|   584k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCs9JCvGpgyHyQ_5serde3ser17iterator_len_hintINtNtNtCs5KtMyn79NKx_4core5slice4iter4IterRINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
 1982|   463k|    match iter.size_hint() {
 1983|   463k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|   463k|}
_RINvYQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer11collect_seqRIBZ_RyEECskyBRBO12fJg_6simple:
 1275|   463k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|   463k|    where
 1277|   463k|        I: IntoIterator,
 1278|   463k|        <I as IntoIterator>::Item: Serialize,
 1279|   463k|    {
 1280|   463k|        let iter = iter.into_iter();
 1281|   463k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|   463k|            let mut iter = iter;
 1286|   463k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|   463k|        serializer.end()
 1297|   463k|    }
_RNCINvYQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer11collect_seqRIB11_RyEE0CskyBRBO12fJg_6simple:
 1286|  31.5k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer11collect_seqRIBZ_RINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
 1275|   463k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|   463k|    where
 1277|   463k|        I: IntoIterator,
 1278|   463k|        <I as IntoIterator>::Item: Serialize,
 1279|   463k|    {
 1280|   463k|        let iter = iter.into_iter();
 1281|   463k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|   463k|            let mut iter = iter;
 1286|   463k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|   463k|        serializer.end()
 1297|   463k|    }

_RINvXsc_NtCs3wF1o2D67r6_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs9JCvGpgyHyQ_5serde3ser9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser13CidSerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
  186|   584k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|   584k|    where
  188|   584k|        S: Serializer,
  189|   584k|    {
  190|   584k|        serializer.serialize_bytes(&self.bytes)
  191|   584k|    }
_RINvMNtCs3wF1o2D67r6_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsTv665f55BC_5alloc3vec3VechEECskyBRBO12fJg_6simple:
   60|   584k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|   584k|        ByteBuf {
   62|   584k|            bytes: bytes.into(),
   63|   584k|        }
   64|   584k|    }

_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_valueINtNvXs2M_NtNtCs9JCvGpgyHyQ_5serde2de5implsTppppENtB1P_11Deserialize11deserialize12TupleVisitormmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEEECskyBRBO12fJg_6simple:
  577|  10.0k|    fn parse_value<V>(&mut self, visitor: V) -> Result<V::Value>
  578|  10.0k|    where
  579|  10.0k|        V: de::Visitor<'de>,
  580|  10.0k|    {
  581|  10.0k|        let byte = self.parse_u8()?;
  582|  10.0k|        match byte {
  583|       |            // Major type 0: an unsigned integer
  584|  10.0k|            0x00..=0x17 => visitor.visit_u8(byte),
  585|       |            0x18 => {
  586|      0|                let value = self.parse_u8()?;
  587|      0|                visitor.visit_u8(value)
  588|       |            }
  589|       |            0x19 => {
  590|      0|                let value = self.parse_u16()?;
  591|      0|                visitor.visit_u16(value)
  592|       |            }
  593|       |            0x1a => {
  594|      0|                let value = self.parse_u32()?;
  595|      0|                visitor.visit_u32(value)
  596|       |            }
  597|       |            0x1b => {
  598|      0|                let value = self.parse_u64()?;
  599|      0|                visitor.visit_u64(value)
  600|       |            }
  601|  10.0k|            0x1c..=0x1f => Err(self.error(ErrorCode::UnassignedCode)),
  602|       |
  603|       |            // Major type 1: a negative integer
  604|  10.0k|            0x20..=0x37 => visitor.visit_i8(-1 - (byte - 0x20) as i8),
  605|       |            0x38 => {
  606|      0|                let value = self.parse_u8()?;
  607|      0|                visitor.visit_i16(-1 - i16::from(value))
  608|       |            }
  609|       |            0x39 => {
  610|      0|                let value = self.parse_u16()?;
  611|      0|                visitor.visit_i32(-1 - i32::from(value))
  612|       |            }
  613|       |            0x3a => {
  614|      0|                let value = self.parse_u32()?;
  615|      0|                visitor.visit_i64(-1 - i64::from(value))
  616|       |            }
  617|       |            0x3b => {
  618|      0|                let value = self.parse_u64()?;
  619|      0|                if value > i64::max_value() as u64 {
  620|      0|                    return visitor.visit_i128(-1 - i128::from(value));
  621|      0|                }
  622|      0|                visitor.visit_i64(-1 - value as i64)
  623|       |            }
  624|  10.0k|            0x3c..=0x3f => Err(self.error(ErrorCode::UnassignedCode)),
  625|       |
  626|       |            // Major type 2: a byte string
  627|  10.0k|            0x40..=0x57 => self.parse_bytes(byte as usize - 0x40, visitor),
  628|       |            0x58 => {
  629|      0|                let len = self.parse_u8()?;
  630|      0|                self.parse_bytes(len as usize, visitor)
  631|       |            }
  632|       |            0x59 => {
  633|      0|                let len = self.parse_u16()?;
  634|      0|                self.parse_bytes(len as usize, visitor)
  635|       |            }
  636|       |            0x5a => {
  637|      0|                let len = self.parse_u32()?;
  638|      0|                self.parse_bytes(len as usize, visitor)
  639|       |            }
  640|       |            0x5b => {
  641|      0|                let len = self.parse_u64()?;
  642|      0|                if len > usize::max_value() as u64 {
  643|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  644|      0|                }
  645|      0|                self.parse_bytes(len as usize, visitor)
  646|       |            }
  647|  10.0k|            0x5c..=0x5e => Err(self.error(ErrorCode::UnassignedCode)),
  648|      0|            0x5f => self.parse_indefinite_bytes(visitor),
  649|       |
  650|       |            // Major type 3: a text string
  651|  10.0k|            0x60..=0x77 => self.parse_str(byte as usize - 0x60, visitor),
  652|       |            0x78 => {
  653|      0|                let len = self.parse_u8()?;
  654|      0|                self.parse_str(len as usize, visitor)
  655|       |            }
  656|       |            0x79 => {
  657|      0|                let len = self.parse_u16()?;
  658|      0|                self.parse_str(len as usize, visitor)
  659|       |            }
  660|       |            0x7a => {
  661|      0|                let len = self.parse_u32()?;
  662|      0|                self.parse_str(len as usize, visitor)
  663|       |            }
  664|       |            0x7b => {
  665|      0|                let len = self.parse_u64()?;
  666|      0|                if len > usize::max_value() as u64 {
  667|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  668|      0|                }
  669|      0|                self.parse_str(len as usize, visitor)
  670|       |            }
  671|  10.0k|            0x7c..=0x7e => Err(self.error(ErrorCode::UnassignedCode)),
  672|      0|            0x7f => self.parse_indefinite_str(visitor),
  673|       |
  674|       |            // Major type 4: an array of data items
  675|  10.0k|            0x80..=0x97 => self.parse_array(byte as usize - 0x80, visitor),
  676|       |            0x98 => {
  677|      0|                let len = self.parse_u8()?;
  678|      0|                self.parse_array(len as usize, visitor)
  679|       |            }
  680|       |            0x99 => {
  681|      0|                let len = self.parse_u16()?;
  682|      0|                self.parse_array(len as usize, visitor)
  683|       |            }
  684|       |            0x9a => {
  685|      0|                let len = self.parse_u32()?;
  686|      0|                self.parse_array(len as usize, visitor)
  687|       |            }
  688|       |            0x9b => {
  689|      0|                let len = self.parse_u64()?;
  690|      0|                if len > usize::max_value() as u64 {
  691|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  692|      0|                }
  693|      0|                self.parse_array(len as usize, visitor)
  694|       |            }
  695|      0|            0x9c..=0x9e => Err(self.error(ErrorCode::UnassignedCode)),
  696|      0|            0x9f => self.parse_indefinite_array(visitor),
  697|       |
  698|       |            // Major type 5: a map of pairs of data items
  699|      0|            0xa0..=0xb7 => self.parse_map(byte as usize - 0xa0, visitor),
  700|       |            0xb8 => {
  701|      0|                let len = self.parse_u8()?;
  702|      0|                self.parse_map(len as usize, visitor)
  703|       |            }
  704|       |            0xb9 => {
  705|      0|                let len = self.parse_u16()?;
  706|      0|                self.parse_map(len as usize, visitor)
  707|       |            }
  708|       |            0xba => {
  709|      0|                let len = self.parse_u32()?;
  710|      0|                self.parse_map(len as usize, visitor)
  711|       |            }
  712|       |            0xbb => {
  713|      0|                let len = self.parse_u64()?;
  714|      0|                if len > usize::max_value() as u64 {
  715|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  716|      0|                }
  717|      0|                self.parse_map(len as usize, visitor)
  718|       |            }
  719|      0|            0xbc..=0xbe => Err(self.error(ErrorCode::UnassignedCode)),
  720|      0|            0xbf => self.parse_indefinite_map(visitor),
  721|       |
  722|       |            // Major type 6: optional semantic tagging of other major types
  723|       |            // Only tag 42 is supported, hence we refuse parsing any other tags here.
  724|      0|            0xc0..=0xd7 => Err(self.error(ErrorCode::UnexpectedCode)),
  725|       |            0xd8 => {
  726|      0|                if self.parse_u8()? == CBOR_TAGS_CID {
  727|      0|                    self.parse_cid(visitor)
  728|       |                } else {
  729|      0|                    Err(self.error(ErrorCode::UnexpectedCode))
  730|       |                }
  731|       |            }
  732|      0|            0xd9..=0xdb => Err(self.error(ErrorCode::UnexpectedCode)),
  733|      0|            0xdc..=0xdf => Err(self.error(ErrorCode::UnassignedCode)),
  734|       |
  735|       |            // Major type 7: floating-point numbers and other simple data types that need no content
  736|      0|            0xe0..=0xf3 => Err(self.error(ErrorCode::UnassignedCode)),
  737|      0|            0xf4 => visitor.visit_bool(false),
  738|      0|            0xf5 => visitor.visit_bool(true),
  739|      0|            0xf6 => visitor.visit_none(),
  740|       |            // DAG-CBOR doesn't support `undefined`
  741|      0|            0xf7 => Err(self.error(ErrorCode::UnexpectedCode)),
  742|      0|            0xf8 => Err(self.error(ErrorCode::UnassignedCode)),
  743|       |            0xf9 => {
  744|      0|                let value = self.parse_f16()?;
  745|      0|                visitor.visit_f32(value)
  746|       |            }
  747|       |            0xfa => {
  748|      0|                let value = self.parse_f32()?;
  749|      0|                visitor.visit_f32(value)
  750|       |            }
  751|       |            0xfb => {
  752|      0|                let value = self.parse_f64()?;
  753|      0|                visitor.visit_f64(value)
  754|       |            }
  755|      0|            0xfc..=0xfe => Err(self.error(ErrorCode::UnassignedCode)),
  756|      0|            0xff => Err(self.error(ErrorCode::UnexpectedCode)),
  757|       |
  758|      0|            _ => unreachable!(),
  759|       |        }
  760|  10.0k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_valueINtNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB1L_13CollapsedNodepENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserialize9___VisitoryEECskyBRBO12fJg_6simple:
  577|   262k|    fn parse_value<V>(&mut self, visitor: V) -> Result<V::Value>
  578|   262k|    where
  579|   262k|        V: de::Visitor<'de>,
  580|   262k|    {
  581|   262k|        let byte = self.parse_u8()?;
  582|   262k|        match byte {
  583|       |            // Major type 0: an unsigned integer
  584|   262k|            0x00..=0x17 => visitor.visit_u8(byte),
  585|       |            0x18 => {
  586|      0|                let value = self.parse_u8()?;
  587|      0|                visitor.visit_u8(value)
  588|       |            }
  589|       |            0x19 => {
  590|      0|                let value = self.parse_u16()?;
  591|      0|                visitor.visit_u16(value)
  592|       |            }
  593|       |            0x1a => {
  594|      0|                let value = self.parse_u32()?;
  595|      0|                visitor.visit_u32(value)
  596|       |            }
  597|       |            0x1b => {
  598|      0|                let value = self.parse_u64()?;
  599|      0|                visitor.visit_u64(value)
  600|       |            }
  601|   262k|            0x1c..=0x1f => Err(self.error(ErrorCode::UnassignedCode)),
  602|       |
  603|       |            // Major type 1: a negative integer
  604|   262k|            0x20..=0x37 => visitor.visit_i8(-1 - (byte - 0x20) as i8),
  605|       |            0x38 => {
  606|      0|                let value = self.parse_u8()?;
  607|      0|                visitor.visit_i16(-1 - i16::from(value))
  608|       |            }
  609|       |            0x39 => {
  610|      0|                let value = self.parse_u16()?;
  611|      0|                visitor.visit_i32(-1 - i32::from(value))
  612|       |            }
  613|       |            0x3a => {
  614|      0|                let value = self.parse_u32()?;
  615|      0|                visitor.visit_i64(-1 - i64::from(value))
  616|       |            }
  617|       |            0x3b => {
  618|      0|                let value = self.parse_u64()?;
  619|      0|                if value > i64::max_value() as u64 {
  620|      0|                    return visitor.visit_i128(-1 - i128::from(value));
  621|      0|                }
  622|      0|                visitor.visit_i64(-1 - value as i64)
  623|       |            }
  624|   262k|            0x3c..=0x3f => Err(self.error(ErrorCode::UnassignedCode)),
  625|       |
  626|       |            // Major type 2: a byte string
  627|   262k|            0x40..=0x57 => self.parse_bytes(byte as usize - 0x40, visitor),
  628|       |            0x58 => {
  629|      0|                let len = self.parse_u8()?;
  630|      0|                self.parse_bytes(len as usize, visitor)
  631|       |            }
  632|       |            0x59 => {
  633|      0|                let len = self.parse_u16()?;
  634|      0|                self.parse_bytes(len as usize, visitor)
  635|       |            }
  636|       |            0x5a => {
  637|      0|                let len = self.parse_u32()?;
  638|      0|                self.parse_bytes(len as usize, visitor)
  639|       |            }
  640|       |            0x5b => {
  641|      0|                let len = self.parse_u64()?;
  642|      0|                if len > usize::max_value() as u64 {
  643|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  644|      0|                }
  645|      0|                self.parse_bytes(len as usize, visitor)
  646|       |            }
  647|   262k|            0x5c..=0x5e => Err(self.error(ErrorCode::UnassignedCode)),
  648|      0|            0x5f => self.parse_indefinite_bytes(visitor),
  649|       |
  650|       |            // Major type 3: a text string
  651|   262k|            0x60..=0x77 => self.parse_str(byte as usize - 0x60, visitor),
  652|       |            0x78 => {
  653|      0|                let len = self.parse_u8()?;
  654|      0|                self.parse_str(len as usize, visitor)
  655|       |            }
  656|       |            0x79 => {
  657|      0|                let len = self.parse_u16()?;
  658|      0|                self.parse_str(len as usize, visitor)
  659|       |            }
  660|       |            0x7a => {
  661|      0|                let len = self.parse_u32()?;
  662|      0|                self.parse_str(len as usize, visitor)
  663|       |            }
  664|       |            0x7b => {
  665|      0|                let len = self.parse_u64()?;
  666|      0|                if len > usize::max_value() as u64 {
  667|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  668|      0|                }
  669|      0|                self.parse_str(len as usize, visitor)
  670|       |            }
  671|   262k|            0x7c..=0x7e => Err(self.error(ErrorCode::UnassignedCode)),
  672|      0|            0x7f => self.parse_indefinite_str(visitor),
  673|       |
  674|       |            // Major type 4: an array of data items
  675|   262k|            0x80..=0x97 => self.parse_array(byte as usize - 0x80, visitor),
  676|       |            0x98 => {
  677|      0|                let len = self.parse_u8()?;
  678|      0|                self.parse_array(len as usize, visitor)
  679|       |            }
  680|       |            0x99 => {
  681|      0|                let len = self.parse_u16()?;
  682|      0|                self.parse_array(len as usize, visitor)
  683|       |            }
  684|       |            0x9a => {
  685|      0|                let len = self.parse_u32()?;
  686|      0|                self.parse_array(len as usize, visitor)
  687|       |            }
  688|       |            0x9b => {
  689|      0|                let len = self.parse_u64()?;
  690|      0|                if len > usize::max_value() as u64 {
  691|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  692|      0|                }
  693|      0|                self.parse_array(len as usize, visitor)
  694|       |            }
  695|      0|            0x9c..=0x9e => Err(self.error(ErrorCode::UnassignedCode)),
  696|      0|            0x9f => self.parse_indefinite_array(visitor),
  697|       |
  698|       |            // Major type 5: a map of pairs of data items
  699|      0|            0xa0..=0xb7 => self.parse_map(byte as usize - 0xa0, visitor),
  700|       |            0xb8 => {
  701|      0|                let len = self.parse_u8()?;
  702|      0|                self.parse_map(len as usize, visitor)
  703|       |            }
  704|       |            0xb9 => {
  705|      0|                let len = self.parse_u16()?;
  706|      0|                self.parse_map(len as usize, visitor)
  707|       |            }
  708|       |            0xba => {
  709|      0|                let len = self.parse_u32()?;
  710|      0|                self.parse_map(len as usize, visitor)
  711|       |            }
  712|       |            0xbb => {
  713|      0|                let len = self.parse_u64()?;
  714|      0|                if len > usize::max_value() as u64 {
  715|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  716|      0|                }
  717|      0|                self.parse_map(len as usize, visitor)
  718|       |            }
  719|      0|            0xbc..=0xbe => Err(self.error(ErrorCode::UnassignedCode)),
  720|      0|            0xbf => self.parse_indefinite_map(visitor),
  721|       |
  722|       |            // Major type 6: optional semantic tagging of other major types
  723|       |            // Only tag 42 is supported, hence we refuse parsing any other tags here.
  724|      0|            0xc0..=0xd7 => Err(self.error(ErrorCode::UnexpectedCode)),
  725|       |            0xd8 => {
  726|      0|                if self.parse_u8()? == CBOR_TAGS_CID {
  727|      0|                    self.parse_cid(visitor)
  728|       |                } else {
  729|      0|                    Err(self.error(ErrorCode::UnexpectedCode))
  730|       |                }
  731|       |            }
  732|      0|            0xd9..=0xdb => Err(self.error(ErrorCode::UnexpectedCode)),
  733|      0|            0xdc..=0xdf => Err(self.error(ErrorCode::UnassignedCode)),
  734|       |
  735|       |            // Major type 7: floating-point numbers and other simple data types that need no content
  736|      0|            0xe0..=0xf3 => Err(self.error(ErrorCode::UnassignedCode)),
  737|      0|            0xf4 => visitor.visit_bool(false),
  738|      0|            0xf5 => visitor.visit_bool(true),
  739|      0|            0xf6 => visitor.visit_none(),
  740|       |            // DAG-CBOR doesn't support `undefined`
  741|      0|            0xf7 => Err(self.error(ErrorCode::UnexpectedCode)),
  742|      0|            0xf8 => Err(self.error(ErrorCode::UnassignedCode)),
  743|       |            0xf9 => {
  744|      0|                let value = self.parse_f16()?;
  745|      0|                visitor.visit_f32(value)
  746|       |            }
  747|       |            0xfa => {
  748|      0|                let value = self.parse_f32()?;
  749|      0|                visitor.visit_f32(value)
  750|       |            }
  751|       |            0xfb => {
  752|      0|                let value = self.parse_f64()?;
  753|      0|                visitor.visit_f64(value)
  754|       |            }
  755|      0|            0xfc..=0xfe => Err(self.error(ErrorCode::UnassignedCode)),
  756|      0|            0xff => Err(self.error(ErrorCode::UnexpectedCode)),
  757|       |
  758|      0|            _ => unreachable!(),
  759|       |        }
  760|   262k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_valueNtNvXsT_NtNtCs9JCvGpgyHyQ_5serde2de5implsmNtB1N_11Deserialize11deserialize16PrimitiveVisitorECskyBRBO12fJg_6simple:
  577|  20.0k|    fn parse_value<V>(&mut self, visitor: V) -> Result<V::Value>
  578|  20.0k|    where
  579|  20.0k|        V: de::Visitor<'de>,
  580|  20.0k|    {
  581|  20.0k|        let byte = self.parse_u8()?;
  582|  20.0k|        match byte {
  583|       |            // Major type 0: an unsigned integer
  584|  20.0k|            0x00..=0x17 => visitor.visit_u8(byte),
  585|       |            0x18 => {
  586|      0|                let value = self.parse_u8()?;
  587|      0|                visitor.visit_u8(value)
  588|       |            }
  589|       |            0x19 => {
  590|      0|                let value = self.parse_u16()?;
  591|      0|                visitor.visit_u16(value)
  592|       |            }
  593|       |            0x1a => {
  594|      0|                let value = self.parse_u32()?;
  595|      0|                visitor.visit_u32(value)
  596|       |            }
  597|       |            0x1b => {
  598|      0|                let value = self.parse_u64()?;
  599|      0|                visitor.visit_u64(value)
  600|       |            }
  601|      0|            0x1c..=0x1f => Err(self.error(ErrorCode::UnassignedCode)),
  602|       |
  603|       |            // Major type 1: a negative integer
  604|      0|            0x20..=0x37 => visitor.visit_i8(-1 - (byte - 0x20) as i8),
  605|       |            0x38 => {
  606|      0|                let value = self.parse_u8()?;
  607|      0|                visitor.visit_i16(-1 - i16::from(value))
  608|       |            }
  609|       |            0x39 => {
  610|      0|                let value = self.parse_u16()?;
  611|      0|                visitor.visit_i32(-1 - i32::from(value))
  612|       |            }
  613|       |            0x3a => {
  614|      0|                let value = self.parse_u32()?;
  615|      0|                visitor.visit_i64(-1 - i64::from(value))
  616|       |            }
  617|       |            0x3b => {
  618|      0|                let value = self.parse_u64()?;
  619|      0|                if value > i64::max_value() as u64 {
  620|      0|                    return visitor.visit_i128(-1 - i128::from(value));
  621|      0|                }
  622|      0|                visitor.visit_i64(-1 - value as i64)
  623|       |            }
  624|      0|            0x3c..=0x3f => Err(self.error(ErrorCode::UnassignedCode)),
  625|       |
  626|       |            // Major type 2: a byte string
  627|      0|            0x40..=0x57 => self.parse_bytes(byte as usize - 0x40, visitor),
  628|       |            0x58 => {
  629|      0|                let len = self.parse_u8()?;
  630|      0|                self.parse_bytes(len as usize, visitor)
  631|       |            }
  632|       |            0x59 => {
  633|      0|                let len = self.parse_u16()?;
  634|      0|                self.parse_bytes(len as usize, visitor)
  635|       |            }
  636|       |            0x5a => {
  637|      0|                let len = self.parse_u32()?;
  638|      0|                self.parse_bytes(len as usize, visitor)
  639|       |            }
  640|       |            0x5b => {
  641|      0|                let len = self.parse_u64()?;
  642|      0|                if len > usize::max_value() as u64 {
  643|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  644|      0|                }
  645|      0|                self.parse_bytes(len as usize, visitor)
  646|       |            }
  647|      0|            0x5c..=0x5e => Err(self.error(ErrorCode::UnassignedCode)),
  648|      0|            0x5f => self.parse_indefinite_bytes(visitor),
  649|       |
  650|       |            // Major type 3: a text string
  651|      0|            0x60..=0x77 => self.parse_str(byte as usize - 0x60, visitor),
  652|       |            0x78 => {
  653|      0|                let len = self.parse_u8()?;
  654|      0|                self.parse_str(len as usize, visitor)
  655|       |            }
  656|       |            0x79 => {
  657|      0|                let len = self.parse_u16()?;
  658|      0|                self.parse_str(len as usize, visitor)
  659|       |            }
  660|       |            0x7a => {
  661|      0|                let len = self.parse_u32()?;
  662|      0|                self.parse_str(len as usize, visitor)
  663|       |            }
  664|       |            0x7b => {
  665|      0|                let len = self.parse_u64()?;
  666|      0|                if len > usize::max_value() as u64 {
  667|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  668|      0|                }
  669|      0|                self.parse_str(len as usize, visitor)
  670|       |            }
  671|      0|            0x7c..=0x7e => Err(self.error(ErrorCode::UnassignedCode)),
  672|      0|            0x7f => self.parse_indefinite_str(visitor),
  673|       |
  674|       |            // Major type 4: an array of data items
  675|      0|            0x80..=0x97 => self.parse_array(byte as usize - 0x80, visitor),
  676|       |            0x98 => {
  677|      0|                let len = self.parse_u8()?;
  678|      0|                self.parse_array(len as usize, visitor)
  679|       |            }
  680|       |            0x99 => {
  681|      0|                let len = self.parse_u16()?;
  682|      0|                self.parse_array(len as usize, visitor)
  683|       |            }
  684|       |            0x9a => {
  685|      0|                let len = self.parse_u32()?;
  686|      0|                self.parse_array(len as usize, visitor)
  687|       |            }
  688|       |            0x9b => {
  689|      0|                let len = self.parse_u64()?;
  690|      0|                if len > usize::max_value() as u64 {
  691|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  692|      0|                }
  693|      0|                self.parse_array(len as usize, visitor)
  694|       |            }
  695|      0|            0x9c..=0x9e => Err(self.error(ErrorCode::UnassignedCode)),
  696|      0|            0x9f => self.parse_indefinite_array(visitor),
  697|       |
  698|       |            // Major type 5: a map of pairs of data items
  699|      0|            0xa0..=0xb7 => self.parse_map(byte as usize - 0xa0, visitor),
  700|       |            0xb8 => {
  701|      0|                let len = self.parse_u8()?;
  702|      0|                self.parse_map(len as usize, visitor)
  703|       |            }
  704|       |            0xb9 => {
  705|      0|                let len = self.parse_u16()?;
  706|      0|                self.parse_map(len as usize, visitor)
  707|       |            }
  708|       |            0xba => {
  709|      0|                let len = self.parse_u32()?;
  710|      0|                self.parse_map(len as usize, visitor)
  711|       |            }
  712|       |            0xbb => {
  713|      0|                let len = self.parse_u64()?;
  714|      0|                if len > usize::max_value() as u64 {
  715|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  716|      0|                }
  717|      0|                self.parse_map(len as usize, visitor)
  718|       |            }
  719|      0|            0xbc..=0xbe => Err(self.error(ErrorCode::UnassignedCode)),
  720|      0|            0xbf => self.parse_indefinite_map(visitor),
  721|       |
  722|       |            // Major type 6: optional semantic tagging of other major types
  723|       |            // Only tag 42 is supported, hence we refuse parsing any other tags here.
  724|      0|            0xc0..=0xd7 => Err(self.error(ErrorCode::UnexpectedCode)),
  725|       |            0xd8 => {
  726|      0|                if self.parse_u8()? == CBOR_TAGS_CID {
  727|      0|                    self.parse_cid(visitor)
  728|       |                } else {
  729|      0|                    Err(self.error(ErrorCode::UnexpectedCode))
  730|       |                }
  731|       |            }
  732|      0|            0xd9..=0xdb => Err(self.error(ErrorCode::UnexpectedCode)),
  733|      0|            0xdc..=0xdf => Err(self.error(ErrorCode::UnassignedCode)),
  734|       |
  735|       |            // Major type 7: floating-point numbers and other simple data types that need no content
  736|      0|            0xe0..=0xf3 => Err(self.error(ErrorCode::UnassignedCode)),
  737|      0|            0xf4 => visitor.visit_bool(false),
  738|      0|            0xf5 => visitor.visit_bool(true),
  739|      0|            0xf6 => visitor.visit_none(),
  740|       |            // DAG-CBOR doesn't support `undefined`
  741|      0|            0xf7 => Err(self.error(ErrorCode::UnexpectedCode)),
  742|      0|            0xf8 => Err(self.error(ErrorCode::UnassignedCode)),
  743|       |            0xf9 => {
  744|      0|                let value = self.parse_f16()?;
  745|      0|                visitor.visit_f32(value)
  746|       |            }
  747|       |            0xfa => {
  748|      0|                let value = self.parse_f32()?;
  749|      0|                visitor.visit_f32(value)
  750|       |            }
  751|       |            0xfb => {
  752|      0|                let value = self.parse_f64()?;
  753|      0|                visitor.visit_f64(value)
  754|       |            }
  755|      0|            0xfc..=0xfe => Err(self.error(ErrorCode::UnassignedCode)),
  756|      0|            0xff => Err(self.error(ErrorCode::UnexpectedCode)),
  757|       |
  758|      0|            _ => unreachable!(),
  759|       |        }
  760|  20.0k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE17recursion_checkedNCINvB2_11parse_arrayINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB2f_11Deserialize11deserialize10VecVisitorINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEE0IB2L_B40_EECskyBRBO12fJg_6simple:
  413|   262k|    fn recursion_checked<F, T>(&mut self, f: F) -> Result<T>
  414|   262k|    where
  415|   262k|        F: FnOnce(&mut Deserializer<R>) -> Result<T>,
  416|   262k|    {
  417|   262k|        self.remaining_depth -= 1;
  418|   262k|        if self.remaining_depth == 0 {
  419|      0|            return Err(self.error(ErrorCode::RecursionLimitExceeded));
  420|   262k|        }
  421|   262k|        let r = f(self);
  422|   262k|        self.remaining_depth += 1;
  423|   262k|        r
  424|   262k|    }
_RNCINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB8_12DeserializerNtNtBa_4read9SliceReadE9parse_cidNtNvXs0_NtCsikhUnhnQivz_3cid5serdeINtNtB1M_3cid3CidKj40_ENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserialize16MainEntryVisitorE0CskyBRBO12fJg_6simple:
  571|   397k|        self.recursion_checked(|de| visitor.visit_newtype_struct(&mut CidDeserializer(de)))
_RNCINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB8_12DeserializerNtNtBa_4read9SliceReadE11parse_arrayINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1Q_11Deserialize11deserialize10VecVisitorINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEE0CskyBRBO12fJg_6simple:
  430|   262k|        self.recursion_checked(|de| {
  431|   262k|            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|   262k|            if len != 0 {
  434|      0|                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|   262k|                Ok(value)
  437|       |            }
  438|   262k|        })
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE17recursion_checkedNCINvB2_11parse_arrayINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB2f_11Deserialize11deserialize10VecVisitoryEE0IB2L_yEECskyBRBO12fJg_6simple:
  413|   262k|    fn recursion_checked<F, T>(&mut self, f: F) -> Result<T>
  414|   262k|    where
  415|   262k|        F: FnOnce(&mut Deserializer<R>) -> Result<T>,
  416|   262k|    {
  417|   262k|        self.remaining_depth -= 1;
  418|   262k|        if self.remaining_depth == 0 {
  419|      0|            return Err(self.error(ErrorCode::RecursionLimitExceeded));
  420|   262k|        }
  421|   262k|        let r = f(self);
  422|   262k|        self.remaining_depth += 1;
  423|   262k|        r
  424|   262k|    }
_RINvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess17next_element_seedINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEEECskyBRBO12fJg_6simple:
  909|  10.0k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>
  910|  10.0k|    where
  911|  10.0k|        T: de::DeserializeSeed<'de>,
  912|  10.0k|    {
  913|  10.0k|        if *self.len == 0 {
  914|      0|            return Ok(None);
  915|  10.0k|        }
  916|  10.0k|        *self.len -= 1;
  917|       |
  918|  10.0k|        let value = seed.deserialize(&mut *self.de)?;
  919|  10.0k|        Ok(Some(value))
  920|  10.0k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_arrayINtNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB1L_13CollapsedNodepENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserialize9___VisitoryEECskyBRBO12fJg_6simple:
  426|   262k|    fn parse_array<V>(&mut self, mut len: usize, visitor: V) -> Result<V::Value>
  427|   262k|    where
  428|   262k|        V: de::Visitor<'de>,
  429|   262k|    {
  430|   262k|        self.recursion_checked(|de| {
  431|       |            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|       |            if len != 0 {
  434|       |                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|       |                Ok(value)
  437|       |            }
  438|   262k|        })
  439|   262k|    }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer26deserialize_newtype_structNtNvXs0_NtCsikhUnhnQivz_3cid5serdeINtNtB2I_3cid3CidKj40_ENtB1t_11Deserialize11deserialize16MainEntryVisitorECskyBRBO12fJg_6simple:
  792|   397k|    fn deserialize_newtype_struct<V>(self, name: &str, visitor: V) -> Result<V::Value>
  793|   397k|    where
  794|   397k|        V: de::Visitor<'de>,
  795|   397k|    {
  796|   397k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  797|       |            // It's only valid if there is really an encoded CID.
  798|   397k|            if self.parse_u16()? == CBOR_TAGS_MAJOR_TYPE_AND_CID {
  799|   397k|                self.parse_cid(visitor)
  800|       |            } else {
  801|      0|                Err(self.error(ErrorCode::UnexpectedCode))
  802|       |            }
  803|       |        } else {
  804|      0|            visitor.visit_newtype_struct(self)
  805|       |        }
  806|   397k|    }
_RINvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess17next_element_seedINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNvXNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB39_13CollapsedNodepENtB1o_11Deserialize11deserializeINtB34_9___VisitorpENtB1o_7Visitor9visit_seq17___DeserializeWithyEEECskyBRBO12fJg_6simple:
  909|   262k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>
  910|   262k|    where
  911|   262k|        T: de::DeserializeSeed<'de>,
  912|   262k|    {
  913|   262k|        if *self.len == 0 {
  914|      0|            return Ok(None);
  915|   262k|        }
  916|   262k|        *self.len -= 1;
  917|       |
  918|   262k|        let value = seed.deserialize(&mut *self.de)?;
  919|   262k|        Ok(Some(value))
  920|   262k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE17recursion_checkedNCINvB2_9parse_cidNtNvXs0_NtCsikhUnhnQivz_3cid5serdeINtNtB2b_3cid3CidKj40_ENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserialize16MainEntryVisitorE0B2z_ECskyBRBO12fJg_6simple:
  413|   397k|    fn recursion_checked<F, T>(&mut self, f: F) -> Result<T>
  414|   397k|    where
  415|   397k|        F: FnOnce(&mut Deserializer<R>) -> Result<T>,
  416|   397k|    {
  417|   397k|        self.remaining_depth -= 1;
  418|   397k|        if self.remaining_depth == 0 {
  419|      0|            return Err(self.error(ErrorCode::RecursionLimitExceeded));
  420|   397k|        }
  421|   397k|        let r = f(self);
  422|   397k|        self.remaining_depth += 1;
  423|   397k|        r
  424|   397k|    }
_RINvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess17next_element_seedINtNtCs5KtMyn79NKx_4core6marker11PhantomDatamEECskyBRBO12fJg_6simple:
  909|  20.0k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>
  910|  20.0k|    where
  911|  20.0k|        T: de::DeserializeSeed<'de>,
  912|  20.0k|    {
  913|  20.0k|        if *self.len == 0 {
  914|      0|            return Ok(None);
  915|  20.0k|        }
  916|  20.0k|        *self.len -= 1;
  917|       |
  918|  20.0k|        let value = seed.deserialize(&mut *self.de)?;
  919|  20.0k|        Ok(Some(value))
  920|  20.0k|    }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_anyINtNvXsh_NtB1t_5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1t_11Deserialize11deserialize10VecVisitorINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
  770|   262k|    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>
  771|   262k|    where
  772|   262k|        V: de::Visitor<'de>,
  773|   262k|    {
  774|   262k|        self.parse_value(visitor)
  775|   262k|    }
_RINvNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de10from_sliceINtNtCsePTVFWlhm1q_12fvm_ipld_amt4root4RootyEECskyBRBO12fJg_6simple:
   51|  10.0k|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T>
   52|  10.0k|where
   53|  10.0k|    T: de::Deserialize<'a>,
   54|  10.0k|{
   55|  10.0k|    let mut deserializer = Deserializer::from_slice(slice);
   56|  10.0k|    let value = de::Deserialize::deserialize(&mut deserializer)?;
   57|  10.0k|    deserializer.end()?;
   58|  10.0k|    Ok(value)
   59|  10.0k|}
_RNCNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB7_12DeserializerNtNtB9_4read9SliceReadE9parse_u640CskyBRBO12fJg_6simple:
  289|  8.48k|            .map(|()| u64::from_be_bytes(buf))
_RNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtB7_4read9SliceReadE9parse_u16CskyBRBO12fJg_6simple:
  271|   398k|    fn parse_u16(&mut self) -> Result<u16> {
  272|   398k|        let mut buf = [0; 2];
  273|   398k|        self.read
  274|   398k|            .read_into(&mut buf)
  275|   398k|            .map(|()| u16::from_be_bytes(buf))
  276|   398k|    }
_RNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtB7_4read9SliceReadE9parse_u32CskyBRBO12fJg_6simple:
  278|  1.53k|    fn parse_u32(&mut self) -> Result<u32> {
  279|  1.53k|        let mut buf = [0; 4];
  280|  1.53k|        self.read
  281|  1.53k|            .read_into(&mut buf)
  282|  1.53k|            .map(|()| u32::from_be_bytes(buf))
  283|  1.53k|    }
_RINvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess17next_element_seedINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
  909|   659k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>
  910|   659k|    where
  911|   659k|        T: de::DeserializeSeed<'de>,
  912|   659k|    {
  913|   659k|        if *self.len == 0 {
  914|   262k|            return Ok(None);
  915|   397k|        }
  916|   397k|        *self.len -= 1;
  917|       |
  918|   397k|        let value = seed.deserialize(&mut *self.de)?;
  919|   397k|        Ok(Some(value))
  920|   659k|    }
_RINvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess17next_element_seedINtNtCs5KtMyn79NKx_4core6marker11PhantomDatayEECskyBRBO12fJg_6simple:
  909|   287k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>
  910|   287k|    where
  911|   287k|        T: de::DeserializeSeed<'de>,
  912|   287k|    {
  913|   287k|        if *self.len == 0 {
  914|   262k|            return Ok(None);
  915|  24.7k|        }
  916|  24.7k|        *self.len -= 1;
  917|       |
  918|  24.7k|        let value = seed.deserialize(&mut *self.de)?;
  919|  24.7k|        Ok(Some(value))
  920|   287k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE9parse_cidNtNvXs0_NtCsikhUnhnQivz_3cid5serdeINtNtB1K_3cid3CidKj40_ENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserialize16MainEntryVisitorECskyBRBO12fJg_6simple:
  567|   397k|    fn parse_cid<V>(&mut self, visitor: V) -> Result<V::Value>
  568|   397k|    where
  569|   397k|        V: de::Visitor<'de>,
  570|   397k|    {
  571|   397k|        self.recursion_checked(|de| visitor.visit_newtype_struct(&mut CidDeserializer(de)))
  572|   397k|    }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_anyINtNvXs2M_NtB1t_5implsTppppENtB1t_11Deserialize11deserialize12TupleVisitormmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEEECskyBRBO12fJg_6simple:
  770|  10.0k|    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>
  771|  10.0k|    where
  772|  10.0k|        V: de::Visitor<'de>,
  773|  10.0k|    {
  774|  10.0k|        self.parse_value(visitor)
  775|  10.0k|    }
_RNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtB7_4read9SliceReadE8parse_u8CskyBRBO12fJg_6simple:
  265|  1.90M|        match self.next()? {
  266|  1.90M|            Some(byte) => Ok(byte),
  267|      0|            None => Err(self.error(ErrorCode::EofWhileParsingValue)),
  268|       |        }
  269|  1.90M|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE17recursion_checkedNCINvB2_11parse_arrayINtNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB2c_13CollapsedNodepENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserialize9___VisitoryEE0IB2R_yEECskyBRBO12fJg_6simple:
  413|   262k|    fn recursion_checked<F, T>(&mut self, f: F) -> Result<T>
  414|   262k|    where
  415|   262k|        F: FnOnce(&mut Deserializer<R>) -> Result<T>,
  416|   262k|    {
  417|   262k|        self.remaining_depth -= 1;
  418|   262k|        if self.remaining_depth == 0 {
  419|      0|            return Err(self.error(ErrorCode::RecursionLimitExceeded));
  420|   262k|        }
  421|   262k|        let r = f(self);
  422|   262k|        self.remaining_depth += 1;
  423|   262k|        r
  424|   262k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_bytesNtNtCsdln2yFZRdsh_14cs_serde_bytes7bytebuf14ByteBufVisitorECskyBRBO12fJg_6simple:
  296|   262k|        match self.read.read(len)? {
  297|   262k|            EitherLifetime::Long(buf) => visitor.visit_borrowed_bytes(buf),
  298|      0|            EitherLifetime::Short(buf) => visitor.visit_bytes(buf),
  299|       |        }
  300|   262k|    }
_RINvNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de10from_sliceINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEECskyBRBO12fJg_6simple:
   51|   252k|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T>
   52|   252k|where
   53|   252k|    T: de::Deserialize<'a>,
   54|   252k|{
   55|   252k|    let mut deserializer = Deserializer::from_slice(slice);
   56|   252k|    let value = de::Deserialize::deserialize(&mut deserializer)?;
   57|   252k|    deserializer.end()?;
   58|   252k|    Ok(value)
   59|   252k|}
_RNCINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB8_12DeserializerNtNtBa_4read9SliceReadE11parse_arrayINtNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB1N_13CollapsedNodepENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserialize9___VisitoryEE0CskyBRBO12fJg_6simple:
  430|   262k|        self.recursion_checked(|de| {
  431|   262k|            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|   262k|            if len != 0 {
  434|      0|                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|   262k|                Ok(value)
  437|       |            }
  438|   262k|        })
_RNCNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB7_12DeserializerNtNtB9_4read9SliceReadE9parse_u160CskyBRBO12fJg_6simple:
  275|   398k|            .map(|()| u16::from_be_bytes(buf))
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_valueNtNtCsdln2yFZRdsh_14cs_serde_bytes7bytebuf14ByteBufVisitorECskyBRBO12fJg_6simple:
  577|   262k|    fn parse_value<V>(&mut self, visitor: V) -> Result<V::Value>
  578|   262k|    where
  579|   262k|        V: de::Visitor<'de>,
  580|   262k|    {
  581|   262k|        let byte = self.parse_u8()?;
  582|   262k|        match byte {
  583|       |            // Major type 0: an unsigned integer
  584|   262k|            0x00..=0x17 => visitor.visit_u8(byte),
  585|       |            0x18 => {
  586|      0|                let value = self.parse_u8()?;
  587|      0|                visitor.visit_u8(value)
  588|       |            }
  589|       |            0x19 => {
  590|      0|                let value = self.parse_u16()?;
  591|      0|                visitor.visit_u16(value)
  592|       |            }
  593|       |            0x1a => {
  594|      0|                let value = self.parse_u32()?;
  595|      0|                visitor.visit_u32(value)
  596|       |            }
  597|       |            0x1b => {
  598|      0|                let value = self.parse_u64()?;
  599|      0|                visitor.visit_u64(value)
  600|       |            }
  601|   262k|            0x1c..=0x1f => Err(self.error(ErrorCode::UnassignedCode)),
  602|       |
  603|       |            // Major type 1: a negative integer
  604|   262k|            0x20..=0x37 => visitor.visit_i8(-1 - (byte - 0x20) as i8),
  605|       |            0x38 => {
  606|      0|                let value = self.parse_u8()?;
  607|      0|                visitor.visit_i16(-1 - i16::from(value))
  608|       |            }
  609|       |            0x39 => {
  610|      0|                let value = self.parse_u16()?;
  611|      0|                visitor.visit_i32(-1 - i32::from(value))
  612|       |            }
  613|       |            0x3a => {
  614|      0|                let value = self.parse_u32()?;
  615|      0|                visitor.visit_i64(-1 - i64::from(value))
  616|       |            }
  617|       |            0x3b => {
  618|      0|                let value = self.parse_u64()?;
  619|      0|                if value > i64::max_value() as u64 {
  620|      0|                    return visitor.visit_i128(-1 - i128::from(value));
  621|      0|                }
  622|      0|                visitor.visit_i64(-1 - value as i64)
  623|       |            }
  624|   262k|            0x3c..=0x3f => Err(self.error(ErrorCode::UnassignedCode)),
  625|       |
  626|       |            // Major type 2: a byte string
  627|   262k|            0x40..=0x57 => self.parse_bytes(byte as usize - 0x40, visitor),
  628|       |            0x58 => {
  629|      0|                let len = self.parse_u8()?;
  630|      0|                self.parse_bytes(len as usize, visitor)
  631|       |            }
  632|       |            0x59 => {
  633|      0|                let len = self.parse_u16()?;
  634|      0|                self.parse_bytes(len as usize, visitor)
  635|       |            }
  636|       |            0x5a => {
  637|      0|                let len = self.parse_u32()?;
  638|      0|                self.parse_bytes(len as usize, visitor)
  639|       |            }
  640|       |            0x5b => {
  641|      0|                let len = self.parse_u64()?;
  642|      0|                if len > usize::max_value() as u64 {
  643|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  644|      0|                }
  645|      0|                self.parse_bytes(len as usize, visitor)
  646|       |            }
  647|      0|            0x5c..=0x5e => Err(self.error(ErrorCode::UnassignedCode)),
  648|      0|            0x5f => self.parse_indefinite_bytes(visitor),
  649|       |
  650|       |            // Major type 3: a text string
  651|      0|            0x60..=0x77 => self.parse_str(byte as usize - 0x60, visitor),
  652|       |            0x78 => {
  653|      0|                let len = self.parse_u8()?;
  654|      0|                self.parse_str(len as usize, visitor)
  655|       |            }
  656|       |            0x79 => {
  657|      0|                let len = self.parse_u16()?;
  658|      0|                self.parse_str(len as usize, visitor)
  659|       |            }
  660|       |            0x7a => {
  661|      0|                let len = self.parse_u32()?;
  662|      0|                self.parse_str(len as usize, visitor)
  663|       |            }
  664|       |            0x7b => {
  665|      0|                let len = self.parse_u64()?;
  666|      0|                if len > usize::max_value() as u64 {
  667|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  668|      0|                }
  669|      0|                self.parse_str(len as usize, visitor)
  670|       |            }
  671|      0|            0x7c..=0x7e => Err(self.error(ErrorCode::UnassignedCode)),
  672|      0|            0x7f => self.parse_indefinite_str(visitor),
  673|       |
  674|       |            // Major type 4: an array of data items
  675|      0|            0x80..=0x97 => self.parse_array(byte as usize - 0x80, visitor),
  676|       |            0x98 => {
  677|      0|                let len = self.parse_u8()?;
  678|      0|                self.parse_array(len as usize, visitor)
  679|       |            }
  680|       |            0x99 => {
  681|      0|                let len = self.parse_u16()?;
  682|      0|                self.parse_array(len as usize, visitor)
  683|       |            }
  684|       |            0x9a => {
  685|      0|                let len = self.parse_u32()?;
  686|      0|                self.parse_array(len as usize, visitor)
  687|       |            }
  688|       |            0x9b => {
  689|      0|                let len = self.parse_u64()?;
  690|      0|                if len > usize::max_value() as u64 {
  691|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  692|      0|                }
  693|      0|                self.parse_array(len as usize, visitor)
  694|       |            }
  695|      0|            0x9c..=0x9e => Err(self.error(ErrorCode::UnassignedCode)),
  696|      0|            0x9f => self.parse_indefinite_array(visitor),
  697|       |
  698|       |            // Major type 5: a map of pairs of data items
  699|      0|            0xa0..=0xb7 => self.parse_map(byte as usize - 0xa0, visitor),
  700|       |            0xb8 => {
  701|      0|                let len = self.parse_u8()?;
  702|      0|                self.parse_map(len as usize, visitor)
  703|       |            }
  704|       |            0xb9 => {
  705|      0|                let len = self.parse_u16()?;
  706|      0|                self.parse_map(len as usize, visitor)
  707|       |            }
  708|       |            0xba => {
  709|      0|                let len = self.parse_u32()?;
  710|      0|                self.parse_map(len as usize, visitor)
  711|       |            }
  712|       |            0xbb => {
  713|      0|                let len = self.parse_u64()?;
  714|      0|                if len > usize::max_value() as u64 {
  715|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  716|      0|                }
  717|      0|                self.parse_map(len as usize, visitor)
  718|       |            }
  719|      0|            0xbc..=0xbe => Err(self.error(ErrorCode::UnassignedCode)),
  720|      0|            0xbf => self.parse_indefinite_map(visitor),
  721|       |
  722|       |            // Major type 6: optional semantic tagging of other major types
  723|       |            // Only tag 42 is supported, hence we refuse parsing any other tags here.
  724|      0|            0xc0..=0xd7 => Err(self.error(ErrorCode::UnexpectedCode)),
  725|       |            0xd8 => {
  726|      0|                if self.parse_u8()? == CBOR_TAGS_CID {
  727|      0|                    self.parse_cid(visitor)
  728|       |                } else {
  729|      0|                    Err(self.error(ErrorCode::UnexpectedCode))
  730|       |                }
  731|       |            }
  732|      0|            0xd9..=0xdb => Err(self.error(ErrorCode::UnexpectedCode)),
  733|      0|            0xdc..=0xdf => Err(self.error(ErrorCode::UnassignedCode)),
  734|       |
  735|       |            // Major type 7: floating-point numbers and other simple data types that need no content
  736|      0|            0xe0..=0xf3 => Err(self.error(ErrorCode::UnassignedCode)),
  737|      0|            0xf4 => visitor.visit_bool(false),
  738|      0|            0xf5 => visitor.visit_bool(true),
  739|      0|            0xf6 => visitor.visit_none(),
  740|       |            // DAG-CBOR doesn't support `undefined`
  741|      0|            0xf7 => Err(self.error(ErrorCode::UnexpectedCode)),
  742|      0|            0xf8 => Err(self.error(ErrorCode::UnassignedCode)),
  743|       |            0xf9 => {
  744|      0|                let value = self.parse_f16()?;
  745|      0|                visitor.visit_f32(value)
  746|       |            }
  747|       |            0xfa => {
  748|      0|                let value = self.parse_f32()?;
  749|      0|                visitor.visit_f32(value)
  750|       |            }
  751|       |            0xfb => {
  752|      0|                let value = self.parse_f64()?;
  753|      0|                visitor.visit_f64(value)
  754|       |            }
  755|      0|            0xfc..=0xfe => Err(self.error(ErrorCode::UnassignedCode)),
  756|      0|            0xff => Err(self.error(ErrorCode::UnexpectedCode)),
  757|       |
  758|      0|            _ => unreachable!(),
  759|       |        }
  760|   262k|    }
_RNCNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB7_12DeserializerNtNtB9_4read9SliceReadE9parse_u320CskyBRBO12fJg_6simple:
  282|  1.53k|            .map(|()| u32::from_be_bytes(buf))
_RNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtB7_4read9SliceReadE3endCskyBRBO12fJg_6simple:
  228|   262k|        match self.next()? {
  229|      0|            Some(_) => Err(self.error(ErrorCode::TrailingData)),
  230|   262k|            None => Ok(()),
  231|       |        }
  232|   262k|    }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_anyINtNvXsh_NtB1t_5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1t_11Deserialize11deserialize10VecVisitoryEECskyBRBO12fJg_6simple:
  770|   262k|    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>
  771|   262k|    where
  772|   262k|        V: de::Visitor<'de>,
  773|   262k|    {
  774|   262k|        self.parse_value(visitor)
  775|   262k|    }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_anyNtNtCsdln2yFZRdsh_14cs_serde_bytes7bytebuf14ByteBufVisitorECskyBRBO12fJg_6simple:
  770|   262k|    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>
  771|   262k|    where
  772|   262k|        V: de::Visitor<'de>,
  773|   262k|    {
  774|   262k|        self.parse_value(visitor)
  775|   262k|    }
_RINvXsm_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer17deserialize_bytesNtNtCsikhUnhnQivz_3cid5serde17BytesToCidVisitorECskyBRBO12fJg_6simple:
 1379|   397k|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value> {
 1380|       |        // Match on the major type, it must be a byte string (major type 2)
 1381|   397k|        let len = match self.0.parse_u8()? {
 1382|       |            // CIDs always have a `0x00` prefix, hence they cannot be zero sized.
 1383|      0|            0x40 => return Err(self.0.error(ErrorCode::LengthOutOfRange)),
 1384|      0|            byte @ 0x41..=0x57 => usize::try_from(byte - 0x40)
 1385|      0|                .map_err(|_| self.0.error(ErrorCode::LengthOutOfRange))?,
 1386|       |            0x58 => {
 1387|   397k|                let len = self.0.parse_u8()?;
 1388|   397k|                usize::try_from(len).map_err(|_| self.0.error(ErrorCode::LengthOutOfRange))?
 1389|       |            }
 1390|       |            0x59 => {
 1391|      0|                let len = self.0.parse_u16()?;
 1392|      0|                usize::try_from(len).map_err(|_| self.0.error(ErrorCode::LengthOutOfRange))?
 1393|       |            }
 1394|       |            0x5a => {
 1395|      0|                let len = self.0.parse_u32()?;
 1396|      0|                usize::try_from(len).map_err(|_| self.0.error(ErrorCode::LengthOutOfRange))?
 1397|       |            }
 1398|       |            0x5b => {
 1399|      0|                let len = self.0.parse_u64()?;
 1400|      0|                usize::try_from(len).map_err(|_| self.0.error(ErrorCode::LengthOutOfRange))?
 1401|       |            }
 1402|      0|            _ => return Err(self.0.error(ErrorCode::UnexpectedCode)),
 1403|       |        };
 1404|       |
 1405|   397k|        match self.0.read.read(len)? {
 1406|   397k|            EitherLifetime::Long(buf) | EitherLifetime::Short(buf) => {
 1407|       |                // In DAG-CBOR the CID is prefixed with a null byte, strip that off.
 1408|   397k|                visitor.visit_bytes(&buf[1..])
 1409|       |            }
 1410|       |        }
 1411|   397k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE17recursion_checkedNCINvB2_11parse_arrayINtNvXs2M_NtNtCs9JCvGpgyHyQ_5serde2de5implsTppppENtB2g_11Deserialize11deserialize12TupleVisitormmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEEE0TmmyB3E_EECskyBRBO12fJg_6simple:
  413|  10.0k|    fn recursion_checked<F, T>(&mut self, f: F) -> Result<T>
  414|  10.0k|    where
  415|  10.0k|        F: FnOnce(&mut Deserializer<R>) -> Result<T>,
  416|  10.0k|    {
  417|  10.0k|        self.remaining_depth -= 1;
  418|  10.0k|        if self.remaining_depth == 0 {
  419|      0|            return Err(self.error(ErrorCode::RecursionLimitExceeded));
  420|  10.0k|        }
  421|  10.0k|        let r = f(self);
  422|  10.0k|        self.remaining_depth += 1;
  423|  10.0k|        r
  424|  10.0k|    }
_RNCINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB8_12DeserializerNtNtBa_4read9SliceReadE11parse_arrayINtNvXs2M_NtNtCs9JCvGpgyHyQ_5serde2de5implsTppppENtB1R_11Deserialize11deserialize12TupleVisitormmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEEE0CskyBRBO12fJg_6simple:
  430|  10.0k|        self.recursion_checked(|de| {
  431|  10.0k|            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|  10.0k|            if len != 0 {
  434|      0|                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|  10.0k|                Ok(value)
  437|       |            }
  438|  10.0k|        })
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_anyNtNvXsV_NtB1t_5implsyNtB1t_11Deserialize11deserialize16PrimitiveVisitorECskyBRBO12fJg_6simple:
  770|  24.7k|    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>
  771|  24.7k|    where
  772|  24.7k|        V: de::Visitor<'de>,
  773|  24.7k|    {
  774|  24.7k|        self.parse_value(visitor)
  775|  24.7k|    }
_RNCINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB8_12DeserializerNtNtBa_4read9SliceReadE11parse_arrayINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1Q_11Deserialize11deserialize10VecVisitoryEE0CskyBRBO12fJg_6simple:
  430|   262k|        self.recursion_checked(|de| {
  431|   262k|            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|   262k|            if len != 0 {
  434|      0|                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|   262k|                Ok(value)
  437|       |            }
  438|   262k|        })
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_arrayINtNvXs2M_NtNtCs9JCvGpgyHyQ_5serde2de5implsTppppENtB1P_11Deserialize11deserialize12TupleVisitormmyINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEEECskyBRBO12fJg_6simple:
  426|  10.0k|    fn parse_array<V>(&mut self, mut len: usize, visitor: V) -> Result<V::Value>
  427|  10.0k|    where
  428|  10.0k|        V: de::Visitor<'de>,
  429|  10.0k|    {
  430|  10.0k|        self.recursion_checked(|de| {
  431|       |            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|       |            if len != 0 {
  434|       |                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|       |                Ok(value)
  437|       |            }
  438|  10.0k|        })
  439|  10.0k|    }
_RNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtB7_4read9SliceReadE9parse_u64CskyBRBO12fJg_6simple:
  285|  8.48k|    fn parse_u64(&mut self) -> Result<u64> {
  286|  8.48k|        let mut buf = [0; 8];
  287|  8.48k|        self.read
  288|  8.48k|            .read_into(&mut buf)
  289|  8.48k|            .map(|()| u64::from_be_bytes(buf))
  290|  8.48k|    }
_RNvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_9SeqAccessNtNtB7_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess9size_hintCskyBRBO12fJg_6simple:
  922|   525k|    fn size_hint(&self) -> Option<usize> {
  923|   525k|        Some(*self.len)
  924|   525k|    }
_RINvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess17next_element_seedINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsTv665f55BC_5alloc3vec3VecyEEECskyBRBO12fJg_6simple:
  909|   262k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>
  910|   262k|    where
  911|   262k|        T: de::DeserializeSeed<'de>,
  912|   262k|    {
  913|   262k|        if *self.len == 0 {
  914|      0|            return Ok(None);
  915|   262k|        }
  916|   262k|        *self.len -= 1;
  917|       |
  918|   262k|        let value = seed.deserialize(&mut *self.de)?;
  919|   262k|        Ok(Some(value))
  920|   262k|    }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_anyNtNvXsT_NtB1t_5implsmNtB1t_11Deserialize11deserialize16PrimitiveVisitorECskyBRBO12fJg_6simple:
  770|  20.0k|    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>
  771|  20.0k|    where
  772|  20.0k|        V: de::Visitor<'de>,
  773|  20.0k|    {
  774|  20.0k|        self.parse_value(visitor)
  775|  20.0k|    }
_RINvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de12Deserializer15deserialize_anyINtNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB2v_13CollapsedNodepENtB1t_11Deserialize11deserialize9___VisitoryEECskyBRBO12fJg_6simple:
  770|   262k|    fn deserialize_any<V>(self, visitor: V) -> Result<V::Value>
  771|   262k|    where
  772|   262k|        V: de::Visitor<'de>,
  773|   262k|    {
  774|   262k|        self.parse_value(visitor)
  775|   262k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_valueINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1O_11Deserialize11deserialize10VecVisitorINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
  577|   262k|    fn parse_value<V>(&mut self, visitor: V) -> Result<V::Value>
  578|   262k|    where
  579|   262k|        V: de::Visitor<'de>,
  580|   262k|    {
  581|   262k|        let byte = self.parse_u8()?;
  582|   262k|        match byte {
  583|       |            // Major type 0: an unsigned integer
  584|   262k|            0x00..=0x17 => visitor.visit_u8(byte),
  585|       |            0x18 => {
  586|      0|                let value = self.parse_u8()?;
  587|      0|                visitor.visit_u8(value)
  588|       |            }
  589|       |            0x19 => {
  590|      0|                let value = self.parse_u16()?;
  591|      0|                visitor.visit_u16(value)
  592|       |            }
  593|       |            0x1a => {
  594|      0|                let value = self.parse_u32()?;
  595|      0|                visitor.visit_u32(value)
  596|       |            }
  597|       |            0x1b => {
  598|      0|                let value = self.parse_u64()?;
  599|      0|                visitor.visit_u64(value)
  600|       |            }
  601|   262k|            0x1c..=0x1f => Err(self.error(ErrorCode::UnassignedCode)),
  602|       |
  603|       |            // Major type 1: a negative integer
  604|   262k|            0x20..=0x37 => visitor.visit_i8(-1 - (byte - 0x20) as i8),
  605|       |            0x38 => {
  606|      0|                let value = self.parse_u8()?;
  607|      0|                visitor.visit_i16(-1 - i16::from(value))
  608|       |            }
  609|       |            0x39 => {
  610|      0|                let value = self.parse_u16()?;
  611|      0|                visitor.visit_i32(-1 - i32::from(value))
  612|       |            }
  613|       |            0x3a => {
  614|      0|                let value = self.parse_u32()?;
  615|      0|                visitor.visit_i64(-1 - i64::from(value))
  616|       |            }
  617|       |            0x3b => {
  618|      0|                let value = self.parse_u64()?;
  619|      0|                if value > i64::max_value() as u64 {
  620|      0|                    return visitor.visit_i128(-1 - i128::from(value));
  621|      0|                }
  622|      0|                visitor.visit_i64(-1 - value as i64)
  623|       |            }
  624|   262k|            0x3c..=0x3f => Err(self.error(ErrorCode::UnassignedCode)),
  625|       |
  626|       |            // Major type 2: a byte string
  627|   262k|            0x40..=0x57 => self.parse_bytes(byte as usize - 0x40, visitor),
  628|       |            0x58 => {
  629|      0|                let len = self.parse_u8()?;
  630|      0|                self.parse_bytes(len as usize, visitor)
  631|       |            }
  632|       |            0x59 => {
  633|      0|                let len = self.parse_u16()?;
  634|      0|                self.parse_bytes(len as usize, visitor)
  635|       |            }
  636|       |            0x5a => {
  637|      0|                let len = self.parse_u32()?;
  638|      0|                self.parse_bytes(len as usize, visitor)
  639|       |            }
  640|       |            0x5b => {
  641|      0|                let len = self.parse_u64()?;
  642|      0|                if len > usize::max_value() as u64 {
  643|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  644|      0|                }
  645|      0|                self.parse_bytes(len as usize, visitor)
  646|       |            }
  647|   262k|            0x5c..=0x5e => Err(self.error(ErrorCode::UnassignedCode)),
  648|      0|            0x5f => self.parse_indefinite_bytes(visitor),
  649|       |
  650|       |            // Major type 3: a text string
  651|   262k|            0x60..=0x77 => self.parse_str(byte as usize - 0x60, visitor),
  652|       |            0x78 => {
  653|      0|                let len = self.parse_u8()?;
  654|      0|                self.parse_str(len as usize, visitor)
  655|       |            }
  656|       |            0x79 => {
  657|      0|                let len = self.parse_u16()?;
  658|      0|                self.parse_str(len as usize, visitor)
  659|       |            }
  660|       |            0x7a => {
  661|      0|                let len = self.parse_u32()?;
  662|      0|                self.parse_str(len as usize, visitor)
  663|       |            }
  664|       |            0x7b => {
  665|      0|                let len = self.parse_u64()?;
  666|      0|                if len > usize::max_value() as u64 {
  667|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  668|      0|                }
  669|      0|                self.parse_str(len as usize, visitor)
  670|       |            }
  671|   262k|            0x7c..=0x7e => Err(self.error(ErrorCode::UnassignedCode)),
  672|      0|            0x7f => self.parse_indefinite_str(visitor),
  673|       |
  674|       |            // Major type 4: an array of data items
  675|   262k|            0x80..=0x97 => self.parse_array(byte as usize - 0x80, visitor),
  676|       |            0x98 => {
  677|      0|                let len = self.parse_u8()?;
  678|      0|                self.parse_array(len as usize, visitor)
  679|       |            }
  680|       |            0x99 => {
  681|      0|                let len = self.parse_u16()?;
  682|      0|                self.parse_array(len as usize, visitor)
  683|       |            }
  684|       |            0x9a => {
  685|      0|                let len = self.parse_u32()?;
  686|      0|                self.parse_array(len as usize, visitor)
  687|       |            }
  688|       |            0x9b => {
  689|      0|                let len = self.parse_u64()?;
  690|      0|                if len > usize::max_value() as u64 {
  691|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  692|      0|                }
  693|      0|                self.parse_array(len as usize, visitor)
  694|       |            }
  695|      0|            0x9c..=0x9e => Err(self.error(ErrorCode::UnassignedCode)),
  696|      0|            0x9f => self.parse_indefinite_array(visitor),
  697|       |
  698|       |            // Major type 5: a map of pairs of data items
  699|      0|            0xa0..=0xb7 => self.parse_map(byte as usize - 0xa0, visitor),
  700|       |            0xb8 => {
  701|      0|                let len = self.parse_u8()?;
  702|      0|                self.parse_map(len as usize, visitor)
  703|       |            }
  704|       |            0xb9 => {
  705|      0|                let len = self.parse_u16()?;
  706|      0|                self.parse_map(len as usize, visitor)
  707|       |            }
  708|       |            0xba => {
  709|      0|                let len = self.parse_u32()?;
  710|      0|                self.parse_map(len as usize, visitor)
  711|       |            }
  712|       |            0xbb => {
  713|      0|                let len = self.parse_u64()?;
  714|      0|                if len > usize::max_value() as u64 {
  715|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  716|      0|                }
  717|      0|                self.parse_map(len as usize, visitor)
  718|       |            }
  719|      0|            0xbc..=0xbe => Err(self.error(ErrorCode::UnassignedCode)),
  720|      0|            0xbf => self.parse_indefinite_map(visitor),
  721|       |
  722|       |            // Major type 6: optional semantic tagging of other major types
  723|       |            // Only tag 42 is supported, hence we refuse parsing any other tags here.
  724|      0|            0xc0..=0xd7 => Err(self.error(ErrorCode::UnexpectedCode)),
  725|       |            0xd8 => {
  726|      0|                if self.parse_u8()? == CBOR_TAGS_CID {
  727|      0|                    self.parse_cid(visitor)
  728|       |                } else {
  729|      0|                    Err(self.error(ErrorCode::UnexpectedCode))
  730|       |                }
  731|       |            }
  732|      0|            0xd9..=0xdb => Err(self.error(ErrorCode::UnexpectedCode)),
  733|      0|            0xdc..=0xdf => Err(self.error(ErrorCode::UnassignedCode)),
  734|       |
  735|       |            // Major type 7: floating-point numbers and other simple data types that need no content
  736|      0|            0xe0..=0xf3 => Err(self.error(ErrorCode::UnassignedCode)),
  737|      0|            0xf4 => visitor.visit_bool(false),
  738|      0|            0xf5 => visitor.visit_bool(true),
  739|      0|            0xf6 => visitor.visit_none(),
  740|       |            // DAG-CBOR doesn't support `undefined`
  741|      0|            0xf7 => Err(self.error(ErrorCode::UnexpectedCode)),
  742|      0|            0xf8 => Err(self.error(ErrorCode::UnassignedCode)),
  743|       |            0xf9 => {
  744|      0|                let value = self.parse_f16()?;
  745|      0|                visitor.visit_f32(value)
  746|       |            }
  747|       |            0xfa => {
  748|      0|                let value = self.parse_f32()?;
  749|      0|                visitor.visit_f32(value)
  750|       |            }
  751|       |            0xfb => {
  752|      0|                let value = self.parse_f64()?;
  753|      0|                visitor.visit_f64(value)
  754|       |            }
  755|      0|            0xfc..=0xfe => Err(self.error(ErrorCode::UnassignedCode)),
  756|      0|            0xff => Err(self.error(ErrorCode::UnexpectedCode)),
  757|       |
  758|      0|            _ => unreachable!(),
  759|       |        }
  760|   262k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_valueINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1O_11Deserialize11deserialize10VecVisitoryEECskyBRBO12fJg_6simple:
  577|   262k|    fn parse_value<V>(&mut self, visitor: V) -> Result<V::Value>
  578|   262k|    where
  579|   262k|        V: de::Visitor<'de>,
  580|   262k|    {
  581|   262k|        let byte = self.parse_u8()?;
  582|   262k|        match byte {
  583|       |            // Major type 0: an unsigned integer
  584|   262k|            0x00..=0x17 => visitor.visit_u8(byte),
  585|       |            0x18 => {
  586|      0|                let value = self.parse_u8()?;
  587|      0|                visitor.visit_u8(value)
  588|       |            }
  589|       |            0x19 => {
  590|      0|                let value = self.parse_u16()?;
  591|      0|                visitor.visit_u16(value)
  592|       |            }
  593|       |            0x1a => {
  594|      0|                let value = self.parse_u32()?;
  595|      0|                visitor.visit_u32(value)
  596|       |            }
  597|       |            0x1b => {
  598|      0|                let value = self.parse_u64()?;
  599|      0|                visitor.visit_u64(value)
  600|       |            }
  601|   262k|            0x1c..=0x1f => Err(self.error(ErrorCode::UnassignedCode)),
  602|       |
  603|       |            // Major type 1: a negative integer
  604|   262k|            0x20..=0x37 => visitor.visit_i8(-1 - (byte - 0x20) as i8),
  605|       |            0x38 => {
  606|      0|                let value = self.parse_u8()?;
  607|      0|                visitor.visit_i16(-1 - i16::from(value))
  608|       |            }
  609|       |            0x39 => {
  610|      0|                let value = self.parse_u16()?;
  611|      0|                visitor.visit_i32(-1 - i32::from(value))
  612|       |            }
  613|       |            0x3a => {
  614|      0|                let value = self.parse_u32()?;
  615|      0|                visitor.visit_i64(-1 - i64::from(value))
  616|       |            }
  617|       |            0x3b => {
  618|      0|                let value = self.parse_u64()?;
  619|      0|                if value > i64::max_value() as u64 {
  620|      0|                    return visitor.visit_i128(-1 - i128::from(value));
  621|      0|                }
  622|      0|                visitor.visit_i64(-1 - value as i64)
  623|       |            }
  624|   262k|            0x3c..=0x3f => Err(self.error(ErrorCode::UnassignedCode)),
  625|       |
  626|       |            // Major type 2: a byte string
  627|   262k|            0x40..=0x57 => self.parse_bytes(byte as usize - 0x40, visitor),
  628|       |            0x58 => {
  629|      0|                let len = self.parse_u8()?;
  630|      0|                self.parse_bytes(len as usize, visitor)
  631|       |            }
  632|       |            0x59 => {
  633|      0|                let len = self.parse_u16()?;
  634|      0|                self.parse_bytes(len as usize, visitor)
  635|       |            }
  636|       |            0x5a => {
  637|      0|                let len = self.parse_u32()?;
  638|      0|                self.parse_bytes(len as usize, visitor)
  639|       |            }
  640|       |            0x5b => {
  641|      0|                let len = self.parse_u64()?;
  642|      0|                if len > usize::max_value() as u64 {
  643|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  644|      0|                }
  645|      0|                self.parse_bytes(len as usize, visitor)
  646|       |            }
  647|   262k|            0x5c..=0x5e => Err(self.error(ErrorCode::UnassignedCode)),
  648|      0|            0x5f => self.parse_indefinite_bytes(visitor),
  649|       |
  650|       |            // Major type 3: a text string
  651|   262k|            0x60..=0x77 => self.parse_str(byte as usize - 0x60, visitor),
  652|       |            0x78 => {
  653|      0|                let len = self.parse_u8()?;
  654|      0|                self.parse_str(len as usize, visitor)
  655|       |            }
  656|       |            0x79 => {
  657|      0|                let len = self.parse_u16()?;
  658|      0|                self.parse_str(len as usize, visitor)
  659|       |            }
  660|       |            0x7a => {
  661|      0|                let len = self.parse_u32()?;
  662|      0|                self.parse_str(len as usize, visitor)
  663|       |            }
  664|       |            0x7b => {
  665|      0|                let len = self.parse_u64()?;
  666|      0|                if len > usize::max_value() as u64 {
  667|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  668|      0|                }
  669|      0|                self.parse_str(len as usize, visitor)
  670|       |            }
  671|   262k|            0x7c..=0x7e => Err(self.error(ErrorCode::UnassignedCode)),
  672|      0|            0x7f => self.parse_indefinite_str(visitor),
  673|       |
  674|       |            // Major type 4: an array of data items
  675|   262k|            0x80..=0x97 => self.parse_array(byte as usize - 0x80, visitor),
  676|       |            0x98 => {
  677|      0|                let len = self.parse_u8()?;
  678|      0|                self.parse_array(len as usize, visitor)
  679|       |            }
  680|       |            0x99 => {
  681|      0|                let len = self.parse_u16()?;
  682|      0|                self.parse_array(len as usize, visitor)
  683|       |            }
  684|       |            0x9a => {
  685|      0|                let len = self.parse_u32()?;
  686|      0|                self.parse_array(len as usize, visitor)
  687|       |            }
  688|       |            0x9b => {
  689|      0|                let len = self.parse_u64()?;
  690|      0|                if len > usize::max_value() as u64 {
  691|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  692|      0|                }
  693|      0|                self.parse_array(len as usize, visitor)
  694|       |            }
  695|      0|            0x9c..=0x9e => Err(self.error(ErrorCode::UnassignedCode)),
  696|      0|            0x9f => self.parse_indefinite_array(visitor),
  697|       |
  698|       |            // Major type 5: a map of pairs of data items
  699|      0|            0xa0..=0xb7 => self.parse_map(byte as usize - 0xa0, visitor),
  700|       |            0xb8 => {
  701|      0|                let len = self.parse_u8()?;
  702|      0|                self.parse_map(len as usize, visitor)
  703|       |            }
  704|       |            0xb9 => {
  705|      0|                let len = self.parse_u16()?;
  706|      0|                self.parse_map(len as usize, visitor)
  707|       |            }
  708|       |            0xba => {
  709|      0|                let len = self.parse_u32()?;
  710|      0|                self.parse_map(len as usize, visitor)
  711|       |            }
  712|       |            0xbb => {
  713|      0|                let len = self.parse_u64()?;
  714|      0|                if len > usize::max_value() as u64 {
  715|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  716|      0|                }
  717|      0|                self.parse_map(len as usize, visitor)
  718|       |            }
  719|      0|            0xbc..=0xbe => Err(self.error(ErrorCode::UnassignedCode)),
  720|      0|            0xbf => self.parse_indefinite_map(visitor),
  721|       |
  722|       |            // Major type 6: optional semantic tagging of other major types
  723|       |            // Only tag 42 is supported, hence we refuse parsing any other tags here.
  724|      0|            0xc0..=0xd7 => Err(self.error(ErrorCode::UnexpectedCode)),
  725|       |            0xd8 => {
  726|      0|                if self.parse_u8()? == CBOR_TAGS_CID {
  727|      0|                    self.parse_cid(visitor)
  728|       |                } else {
  729|      0|                    Err(self.error(ErrorCode::UnexpectedCode))
  730|       |                }
  731|       |            }
  732|      0|            0xd9..=0xdb => Err(self.error(ErrorCode::UnexpectedCode)),
  733|      0|            0xdc..=0xdf => Err(self.error(ErrorCode::UnassignedCode)),
  734|       |
  735|       |            // Major type 7: floating-point numbers and other simple data types that need no content
  736|      0|            0xe0..=0xf3 => Err(self.error(ErrorCode::UnassignedCode)),
  737|      0|            0xf4 => visitor.visit_bool(false),
  738|      0|            0xf5 => visitor.visit_bool(true),
  739|      0|            0xf6 => visitor.visit_none(),
  740|       |            // DAG-CBOR doesn't support `undefined`
  741|      0|            0xf7 => Err(self.error(ErrorCode::UnexpectedCode)),
  742|      0|            0xf8 => Err(self.error(ErrorCode::UnassignedCode)),
  743|       |            0xf9 => {
  744|      0|                let value = self.parse_f16()?;
  745|      0|                visitor.visit_f32(value)
  746|       |            }
  747|       |            0xfa => {
  748|      0|                let value = self.parse_f32()?;
  749|      0|                visitor.visit_f32(value)
  750|       |            }
  751|       |            0xfb => {
  752|      0|                let value = self.parse_f64()?;
  753|      0|                visitor.visit_f64(value)
  754|       |            }
  755|      0|            0xfc..=0xfe => Err(self.error(ErrorCode::UnassignedCode)),
  756|      0|            0xff => Err(self.error(ErrorCode::UnexpectedCode)),
  757|       |
  758|      0|            _ => unreachable!(),
  759|       |        }
  760|   262k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_valueNtNvXsV_NtNtCs9JCvGpgyHyQ_5serde2de5implsyNtB1N_11Deserialize11deserialize16PrimitiveVisitorECskyBRBO12fJg_6simple:
  577|  24.7k|    fn parse_value<V>(&mut self, visitor: V) -> Result<V::Value>
  578|  24.7k|    where
  579|  24.7k|        V: de::Visitor<'de>,
  580|  24.7k|    {
  581|  24.7k|        let byte = self.parse_u8()?;
  582|  24.7k|        match byte {
  583|       |            // Major type 0: an unsigned integer
  584|  24.7k|            0x00..=0x17 => visitor.visit_u8(byte),
  585|       |            0x18 => {
  586|  4.73k|                let value = self.parse_u8()?;
  587|  4.73k|                visitor.visit_u8(value)
  588|       |            }
  589|       |            0x19 => {
  590|    929|                let value = self.parse_u16()?;
  591|    929|                visitor.visit_u16(value)
  592|       |            }
  593|       |            0x1a => {
  594|  1.53k|                let value = self.parse_u32()?;
  595|  1.53k|                visitor.visit_u32(value)
  596|       |            }
  597|       |            0x1b => {
  598|  8.48k|                let value = self.parse_u64()?;
  599|  8.48k|                visitor.visit_u64(value)
  600|       |            }
  601|      0|            0x1c..=0x1f => Err(self.error(ErrorCode::UnassignedCode)),
  602|       |
  603|       |            // Major type 1: a negative integer
  604|      0|            0x20..=0x37 => visitor.visit_i8(-1 - (byte - 0x20) as i8),
  605|       |            0x38 => {
  606|      0|                let value = self.parse_u8()?;
  607|      0|                visitor.visit_i16(-1 - i16::from(value))
  608|       |            }
  609|       |            0x39 => {
  610|      0|                let value = self.parse_u16()?;
  611|      0|                visitor.visit_i32(-1 - i32::from(value))
  612|       |            }
  613|       |            0x3a => {
  614|      0|                let value = self.parse_u32()?;
  615|      0|                visitor.visit_i64(-1 - i64::from(value))
  616|       |            }
  617|       |            0x3b => {
  618|      0|                let value = self.parse_u64()?;
  619|      0|                if value > i64::max_value() as u64 {
  620|      0|                    return visitor.visit_i128(-1 - i128::from(value));
  621|      0|                }
  622|      0|                visitor.visit_i64(-1 - value as i64)
  623|       |            }
  624|      0|            0x3c..=0x3f => Err(self.error(ErrorCode::UnassignedCode)),
  625|       |
  626|       |            // Major type 2: a byte string
  627|      0|            0x40..=0x57 => self.parse_bytes(byte as usize - 0x40, visitor),
  628|       |            0x58 => {
  629|      0|                let len = self.parse_u8()?;
  630|      0|                self.parse_bytes(len as usize, visitor)
  631|       |            }
  632|       |            0x59 => {
  633|      0|                let len = self.parse_u16()?;
  634|      0|                self.parse_bytes(len as usize, visitor)
  635|       |            }
  636|       |            0x5a => {
  637|      0|                let len = self.parse_u32()?;
  638|      0|                self.parse_bytes(len as usize, visitor)
  639|       |            }
  640|       |            0x5b => {
  641|      0|                let len = self.parse_u64()?;
  642|      0|                if len > usize::max_value() as u64 {
  643|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  644|      0|                }
  645|      0|                self.parse_bytes(len as usize, visitor)
  646|       |            }
  647|      0|            0x5c..=0x5e => Err(self.error(ErrorCode::UnassignedCode)),
  648|      0|            0x5f => self.parse_indefinite_bytes(visitor),
  649|       |
  650|       |            // Major type 3: a text string
  651|      0|            0x60..=0x77 => self.parse_str(byte as usize - 0x60, visitor),
  652|       |            0x78 => {
  653|      0|                let len = self.parse_u8()?;
  654|      0|                self.parse_str(len as usize, visitor)
  655|       |            }
  656|       |            0x79 => {
  657|      0|                let len = self.parse_u16()?;
  658|      0|                self.parse_str(len as usize, visitor)
  659|       |            }
  660|       |            0x7a => {
  661|      0|                let len = self.parse_u32()?;
  662|      0|                self.parse_str(len as usize, visitor)
  663|       |            }
  664|       |            0x7b => {
  665|      0|                let len = self.parse_u64()?;
  666|      0|                if len > usize::max_value() as u64 {
  667|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  668|      0|                }
  669|      0|                self.parse_str(len as usize, visitor)
  670|       |            }
  671|      0|            0x7c..=0x7e => Err(self.error(ErrorCode::UnassignedCode)),
  672|      0|            0x7f => self.parse_indefinite_str(visitor),
  673|       |
  674|       |            // Major type 4: an array of data items
  675|      0|            0x80..=0x97 => self.parse_array(byte as usize - 0x80, visitor),
  676|       |            0x98 => {
  677|      0|                let len = self.parse_u8()?;
  678|      0|                self.parse_array(len as usize, visitor)
  679|       |            }
  680|       |            0x99 => {
  681|      0|                let len = self.parse_u16()?;
  682|      0|                self.parse_array(len as usize, visitor)
  683|       |            }
  684|       |            0x9a => {
  685|      0|                let len = self.parse_u32()?;
  686|      0|                self.parse_array(len as usize, visitor)
  687|       |            }
  688|       |            0x9b => {
  689|      0|                let len = self.parse_u64()?;
  690|      0|                if len > usize::max_value() as u64 {
  691|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  692|      0|                }
  693|      0|                self.parse_array(len as usize, visitor)
  694|       |            }
  695|      0|            0x9c..=0x9e => Err(self.error(ErrorCode::UnassignedCode)),
  696|      0|            0x9f => self.parse_indefinite_array(visitor),
  697|       |
  698|       |            // Major type 5: a map of pairs of data items
  699|      0|            0xa0..=0xb7 => self.parse_map(byte as usize - 0xa0, visitor),
  700|       |            0xb8 => {
  701|      0|                let len = self.parse_u8()?;
  702|      0|                self.parse_map(len as usize, visitor)
  703|       |            }
  704|       |            0xb9 => {
  705|      0|                let len = self.parse_u16()?;
  706|      0|                self.parse_map(len as usize, visitor)
  707|       |            }
  708|       |            0xba => {
  709|      0|                let len = self.parse_u32()?;
  710|      0|                self.parse_map(len as usize, visitor)
  711|       |            }
  712|       |            0xbb => {
  713|      0|                let len = self.parse_u64()?;
  714|      0|                if len > usize::max_value() as u64 {
  715|      0|                    return Err(self.error(ErrorCode::LengthOutOfRange));
  716|      0|                }
  717|      0|                self.parse_map(len as usize, visitor)
  718|       |            }
  719|      0|            0xbc..=0xbe => Err(self.error(ErrorCode::UnassignedCode)),
  720|      0|            0xbf => self.parse_indefinite_map(visitor),
  721|       |
  722|       |            // Major type 6: optional semantic tagging of other major types
  723|       |            // Only tag 42 is supported, hence we refuse parsing any other tags here.
  724|      0|            0xc0..=0xd7 => Err(self.error(ErrorCode::UnexpectedCode)),
  725|       |            0xd8 => {
  726|      0|                if self.parse_u8()? == CBOR_TAGS_CID {
  727|      0|                    self.parse_cid(visitor)
  728|       |                } else {
  729|      0|                    Err(self.error(ErrorCode::UnexpectedCode))
  730|       |                }
  731|       |            }
  732|      0|            0xd9..=0xdb => Err(self.error(ErrorCode::UnexpectedCode)),
  733|      0|            0xdc..=0xdf => Err(self.error(ErrorCode::UnassignedCode)),
  734|       |
  735|       |            // Major type 7: floating-point numbers and other simple data types that need no content
  736|      0|            0xe0..=0xf3 => Err(self.error(ErrorCode::UnassignedCode)),
  737|      0|            0xf4 => visitor.visit_bool(false),
  738|      0|            0xf5 => visitor.visit_bool(true),
  739|      0|            0xf6 => visitor.visit_none(),
  740|       |            // DAG-CBOR doesn't support `undefined`
  741|      0|            0xf7 => Err(self.error(ErrorCode::UnexpectedCode)),
  742|      0|            0xf8 => Err(self.error(ErrorCode::UnassignedCode)),
  743|       |            0xf9 => {
  744|      0|                let value = self.parse_f16()?;
  745|      0|                visitor.visit_f32(value)
  746|       |            }
  747|       |            0xfa => {
  748|      0|                let value = self.parse_f32()?;
  749|      0|                visitor.visit_f32(value)
  750|       |            }
  751|       |            0xfb => {
  752|      0|                let value = self.parse_f64()?;
  753|      0|                visitor.visit_f64(value)
  754|       |            }
  755|      0|            0xfc..=0xfe => Err(self.error(ErrorCode::UnassignedCode)),
  756|      0|            0xff => Err(self.error(ErrorCode::UnexpectedCode)),
  757|       |
  758|      0|            _ => unreachable!(),
  759|       |        }
  760|  24.7k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_arrayINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1O_11Deserialize11deserialize10VecVisitoryEECskyBRBO12fJg_6simple:
  426|   262k|    fn parse_array<V>(&mut self, mut len: usize, visitor: V) -> Result<V::Value>
  427|   262k|    where
  428|   262k|        V: de::Visitor<'de>,
  429|   262k|    {
  430|   262k|        self.recursion_checked(|de| {
  431|       |            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|       |            if len != 0 {
  434|       |                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|       |                Ok(value)
  437|       |            }
  438|   262k|        })
  439|   262k|    }
_RINvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtB8_4read9SliceReadE11parse_arrayINtNvXsh_NtNtCs9JCvGpgyHyQ_5serde2de5implsINtNtCsTv665f55BC_5alloc3vec3VecpENtB1O_11Deserialize11deserialize10VecVisitorINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
  426|   262k|    fn parse_array<V>(&mut self, mut len: usize, visitor: V) -> Result<V::Value>
  427|   262k|    where
  428|   262k|        V: de::Visitor<'de>,
  429|   262k|    {
  430|   262k|        self.recursion_checked(|de| {
  431|       |            let value = visitor.visit_seq(SeqAccess { de, len: &mut len })?;
  432|       |
  433|       |            if len != 0 {
  434|       |                Err(de.error(ErrorCode::TrailingData))
  435|       |            } else {
  436|       |                Ok(value)
  437|       |            }
  438|   262k|        })
  439|   262k|    }
_RINvXs5_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB6_9SeqAccessNtNtB8_4read9SliceReadENtNtCs9JCvGpgyHyQ_5serde2de9SeqAccess17next_element_seedINtNtCs5KtMyn79NKx_4core6marker11PhantomDataINtNtCsTv665f55BC_5alloc3vec3VecINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEEECskyBRBO12fJg_6simple:
  909|   262k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>>
  910|   262k|    where
  911|   262k|        T: de::DeserializeSeed<'de>,
  912|   262k|    {
  913|   262k|        if *self.len == 0 {
  914|      0|            return Ok(None);
  915|   262k|        }
  916|   262k|        *self.len -= 1;
  917|       |
  918|   262k|        let value = seed.deserialize(&mut *self.de)?;
  919|   262k|        Ok(Some(value))
  920|   262k|    }
_RNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtB7_4read9SliceReadE4nextCskyBRBO12fJg_6simple:
  247|  2.16M|    fn next(&mut self) -> Result<Option<u8>> {
  248|  2.16M|        self.read.next()
  249|  2.16M|    }
_RNvMs_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtB6_4read9SliceReadE10from_slice:
  158|   262k|    pub fn from_slice(bytes: &'a [u8]) -> Deserializer<SliceRead<'a>> {
  159|   262k|        Deserializer::new(SliceRead::new(bytes))
  160|   262k|    }
_RNvMs2_NtCsb4b1WdChxoo_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtB7_4read9SliceReadE3newB7_:
  190|   262k|    pub fn new(read: R) -> Self {
  191|   262k|        Deserializer {
  192|   262k|            read,
  193|   262k|            remaining_depth: 128,
  194|   262k|            accept_named: true,
  195|   262k|            accept_packed: true,
  196|   262k|            accept_standard_enums: true,
  197|   262k|            accept_legacy_enums: true,
  198|   262k|        }
  199|   262k|    }

_RNvXs6_NtCsb4b1WdChxoo_18serde_ipld_dagcbor4readNtB5_9SliceReadNtB5_4Read4nextCskyBRBO12fJg_6simple:
  346|  2.16M|    fn next(&mut self) -> Result<Option<u8>> {
  347|  2.16M|        Ok(if self.index < self.slice.len() {
  348|  1.90M|            let ch = self.slice[self.index];
  349|  1.90M|            self.index += 1;
  350|  1.90M|            Some(ch)
  351|       |        } else {
  352|   262k|            None
  353|       |        })
  354|  2.16M|    }
_RNvXs6_NtCsb4b1WdChxoo_18serde_ipld_dagcbor4readNtB5_9SliceReadNtB5_4Read9read_intoCskyBRBO12fJg_6simple:
  391|   408k|    fn read_into(&mut self, buf: &mut [u8]) -> Result<()> {
  392|   408k|        let end = self.end(buf.len())?;
  393|   408k|        buf.copy_from_slice(&self.slice[self.index..end]);
  394|   408k|        self.index = end;
  395|   408k|        Ok(())
  396|   408k|    }
_RNvXs6_NtCsb4b1WdChxoo_18serde_ipld_dagcbor4readNtB5_9SliceReadNtB5_4Read4readCskyBRBO12fJg_6simple:
  379|   659k|    fn read<'b>(&'b mut self, n: usize) -> Result<EitherLifetime<'b, 'a>> {
  380|   659k|        let end = self.end(n)?;
  381|   659k|        let slice = &self.slice[self.index..end];
  382|   659k|        self.index = end;
  383|   659k|        Ok(EitherLifetime::Long(slice))
  384|   659k|    }
_RNvMs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor4readNtB5_9SliceRead3end:
  319|  1.06M|        match self.index.checked_add(n) {
  320|  1.06M|            Some(end) if end <= self.slice.len() => Ok(end),
  321|      0|            _ => Err(Error::syntax(
  322|      0|                ErrorCode::EofWhileParsingValue,
  323|      0|                self.slice.len() as u64,
  324|      0|            )),
  325|       |        }
  326|  1.06M|    }
_RNvMs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor4readNtB5_9SliceRead3new:
  310|   262k|    pub fn new(slice: &'a [u8]) -> SliceRead<'a> {
  311|   262k|        SliceRead {
  312|   262k|            slice,
  313|   262k|            scratch: vec![],
  314|   262k|            index: 0,
  315|   262k|        }
  316|   262k|    }

_RINvXs_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB5_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer24serialize_newtype_structNtNtCs3wF1o2D67r6_11serde_bytes7bytebuf7ByteBufECskyBRBO12fJg_6simple:
  392|   584k|    fn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>
  393|   584k|    where
  394|   584k|        T: ?Sized + ser::Serialize,
  395|   584k|    {
  396|   584k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  397|   584k|            value.serialize(&mut CidSerializer(self))
  398|       |        } else {
  399|      0|            value.serialize(self)
  400|       |        }
  401|   584k|    }
_RNvMNtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEE9write_u32CskyBRBO12fJg_6simple:
  166|  2.49M|    fn write_u32(&mut self, major: u8, value: u32) -> Result<()> {
  167|  2.49M|        if value <= u32::from(u16::max_value()) {
  168|  2.48M|            self.write_u16(major, value as u16)
  169|       |        } else {
  170|  2.88k|            let mut buf = [major << 5 | 26, 0, 0, 0, 0];
  171|  2.88k|            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());
  172|  2.88k|            self.writer.write_all(&buf).map_err(|e| e.into())
  173|       |        }
  174|  2.49M|    }
_RNvXs_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer15serialize_tupleCskyBRBO12fJg_6simple:
  431|   473k|        self.write_u64(4, len as u64)?;
  432|   473k|        Ok(self)
  433|   473k|    }
_RINvXs0_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser14SerializeTuple17serialize_elementIB15_RyEECskyBRBO12fJg_6simple:
  552|   463k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|   463k|    where
  554|   463k|        T: ?Sized + ser::Serialize,
  555|   463k|    {
  556|   463k|        value.serialize(&mut **self)
  557|   463k|    }
_RNvMNtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEE20serialize_collectionCskyBRBO12fJg_6simple:
  188|   927k|    fn serialize_collection(
  189|   927k|        &mut self,
  190|   927k|        major: u8,
  191|   927k|        len: Option<usize>,
  192|   927k|    ) -> Result<CollectionSerializer<'_, W>> {
  193|   927k|        let needs_eof = match len {
  194|   927k|            Some(len) => {
  195|   927k|                self.write_u64(major, len as u64)?;
  196|   927k|                false
  197|       |            }
  198|       |            None => {
  199|      0|                self.writer
  200|      0|                    .write_all(&[major << 5 | 31])
  201|      0|                    .map_err(|e| e.into())?;
  202|      0|                true
  203|       |            }
  204|       |        };
  205|       |
  206|   927k|        Ok(CollectionSerializer {
  207|   927k|            ser: self,
  208|   927k|            needs_eof,
  209|   927k|        })
  210|   927k|    }
_RNvXs_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer13serialize_u32CskyBRBO12fJg_6simple:
  296|  20.0k|    fn serialize_u32(self, value: u32) -> Result<()> {
  297|  20.0k|        self.write_u32(0, value)
  298|  20.0k|    }
_RINvXs0_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser14SerializeTuple17serialize_elementIB15_RINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EEECskyBRBO12fJg_6simple:
  552|   463k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|   463k|    where
  554|   463k|        T: ?Sized + ser::Serialize,
  555|   463k|    {
  556|   463k|        value.serialize(&mut **self)
  557|   463k|    }
_RINvXs0_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser14SerializeTuple17serialize_elementRyECskyBRBO12fJg_6simple:
  552|  10.0k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|  10.0k|    where
  554|  10.0k|        T: ?Sized + ser::Serialize,
  555|  10.0k|    {
  556|  10.0k|        value.serialize(&mut **self)
  557|  10.0k|    }
_RNvMNtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEE3newCskyBRBO12fJg_6simple:
   69|   463k|    pub fn new(writer: W) -> Self {
   70|   463k|        Serializer {
   71|   463k|            writer,
   72|   463k|            packed: false,
   73|   463k|            enum_as_map: true,
   74|   463k|        }
   75|   463k|    }
_RNvXs0_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB5_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser14SerializeTuple3endCskyBRBO12fJg_6simple:
  560|   473k|    fn end(self) -> Result<()> {
  561|   473k|        Ok(())
  562|   473k|    }
_RNvXs_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer13serialize_seqCskyBRBO12fJg_6simple:
  425|   927k|    fn serialize_seq(self, len: Option<usize>) -> Result<CollectionSerializer<'a, W>> {
  426|   927k|        self.serialize_collection(4, len)
  427|   927k|    }
_RNvMNtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEE9write_u64CskyBRBO12fJg_6simple:
  177|  2.49M|    fn write_u64(&mut self, major: u8, value: u64) -> Result<()> {
  178|  2.49M|        if value <= u64::from(u32::max_value()) {
  179|  2.47M|            self.write_u32(major, value as u32)
  180|       |        } else {
  181|  18.8k|            let mut buf = [major << 5 | 27, 0, 0, 0, 0, 0, 0, 0, 0];
  182|  18.8k|            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());
  183|  18.8k|            self.writer.write_all(&buf).map_err(|e| e.into())
  184|       |        }
  185|  2.49M|    }
_RNvMNtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEE8write_u8CskyBRBO12fJg_6simple:
  144|  3.07M|    fn write_u8(&mut self, major: u8, value: u8) -> Result<()> {
  145|  3.07M|        if value <= 0x17 {
  146|  1.89M|            self.writer.write_all(&[major << 5 | value])
  147|       |        } else {
  148|  1.17M|            let buf = [major << 5 | 24, value];
  149|  1.17M|            self.writer.write_all(&buf)
  150|       |        }
  151|  3.07M|        .map_err(|e| e.into())
  152|  3.07M|    }
_RINvXs7_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB6_20CollectionSerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser12SerializeSeq17serialize_elementRRINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EECskyBRBO12fJg_6simple:
  724|   584k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  725|   584k|    where
  726|   584k|        T: ?Sized + ser::Serialize,
  727|   584k|    {
  728|   584k|        value.serialize(&mut *self.ser)
  729|   584k|    }
_RINvXs0_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser14SerializeTuple17serialize_elementRmECskyBRBO12fJg_6simple:
  552|  20.0k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|  20.0k|    where
  554|  20.0k|        T: ?Sized + ser::Serialize,
  555|  20.0k|    {
  556|  20.0k|        value.serialize(&mut **self)
  557|  20.0k|    }
_RNvXs_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer15serialize_bytesCskyBRBO12fJg_6simple:
  350|   463k|        self.write_u64(2, value.len() as u64)?;
  351|   463k|        self.writer.write_all(value).map_err(|e| e.into())
  352|   463k|    }
_RNvXs9_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB5_13CidSerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer15serialize_bytesCskyBRBO12fJg_6simple:
  826|   584k|        self.0.write_u8(MAJOR_TYPE_TAG, CBOR_TAGS_CID)?;
  827|       |        // THe CID is prefixed with a null byte, hence add 1 to the length of the byte string.
  828|   584k|        self.0.write_u64(
  829|   584k|            MAJOR_TYPE_BYTES,
  830|   584k|            u64::try_from(value.len() + 1).expect("Platform must be at most 64-bit"),
  831|   584k|        )?;
  832|       |        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  833|   584k|        self.0.writer.write_all(&[0x00]).map_err(Into::into)?;
  834|   584k|        self.0.writer.write_all(value).map_err(Into::into)?;
  835|   584k|        Ok(())
  836|   584k|    }
_RNvMs6_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB5_20CollectionSerializerQINtNtCsTv665f55BC_5alloc3vec3VechEE9end_innerCskyBRBO12fJg_6simple:
  707|   927k|    fn end_inner(self) -> Result<()> {
  708|   927k|        if self.needs_eof {
  709|      0|            self.ser.writer.write_all(&[0xff]).map_err(|e| e.into())
  710|       |        } else {
  711|   927k|            Ok(())
  712|       |        }
  713|   927k|    }
_RNvXs_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser10Serializer13serialize_u64CskyBRBO12fJg_6simple:
  301|  41.5k|    fn serialize_u64(self, value: u64) -> Result<()> {
  302|  41.5k|        self.write_u64(0, value)
  303|  41.5k|    }
_RNvMNtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEE9write_u16CskyBRBO12fJg_6simple:
  155|  2.48M|    fn write_u16(&mut self, major: u8, value: u16) -> Result<()> {
  156|  2.48M|        if value <= u16::from(u8::max_value()) {
  157|  2.48M|            self.write_u8(major, value as u8)
  158|       |        } else {
  159|  1.50k|            let mut buf = [major << 5 | 25, 0, 0];
  160|  1.50k|            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());
  161|  1.50k|            self.writer.write_all(&buf).map_err(|e| e.into())
  162|       |        }
  163|  2.48M|    }
_RINvXs0_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser14SerializeTuple17serialize_elementNtNtNtCs7B7989kbyAV_10fvm_shared8encoding5bytes8BytesSerECskyBRBO12fJg_6simple:
  552|   463k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|   463k|    where
  554|   463k|        T: ?Sized + ser::Serialize,
  555|   463k|    {
  556|   463k|        value.serialize(&mut **self)
  557|   463k|    }
_RINvXs0_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser14SerializeTuple17serialize_elementRINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEECskyBRBO12fJg_6simple:
  552|  10.0k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|  10.0k|    where
  554|  10.0k|        T: ?Sized + ser::Serialize,
  555|  10.0k|    {
  556|  10.0k|        value.serialize(&mut **self)
  557|  10.0k|    }
_RINvXs7_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB6_20CollectionSerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser12SerializeSeq17serialize_elementRRyECskyBRBO12fJg_6simple:
  724|  31.5k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  725|  31.5k|    where
  726|  31.5k|        T: ?Sized + ser::Serialize,
  727|  31.5k|    {
  728|  31.5k|        value.serialize(&mut *self.ser)
  729|  31.5k|    }
_RNvXs7_NtCsb4b1WdChxoo_18serde_ipld_dagcbor3serINtB5_20CollectionSerializerQINtNtCsTv665f55BC_5alloc3vec3VechEENtNtCs9JCvGpgyHyQ_5serde3ser12SerializeSeq3endCskyBRBO12fJg_6simple:
  732|   927k|    fn end(self) -> Result<()> {
  733|   927k|        self.end_inner()
  734|   927k|    }

_RNvXNtCsb4b1WdChxoo_18serde_ipld_dagcbor5writeQINtNtCsTv665f55BC_5alloc3vec3VechENtB2_5Write9write_allCskyBRBO12fJg_6simple:
   60|  4.73M|    fn write_all(&mut self, buf: &[u8]) -> Result<(), Self::Error> {
   61|  4.73M|        (*self).write_all(buf)
   62|  4.73M|    }
_RNvXs3_NtCsb4b1WdChxoo_18serde_ipld_dagcbor5writeINtNtCsTv665f55BC_5alloc3vec3VechENtB5_5Write9write_all:
   99|  4.73M|    fn write_all(&mut self, buf: &[u8]) -> Result<(), Self::Error> {
  100|  4.73M|        self.extend_from_slice(buf);
  101|  4.73M|        Ok(())
  102|  4.73M|    }

_RNvNtCsk3m78UaFiFF_15unsigned_varint6decode7is_lastCskyBRBO12fJg_6simple:
   90|  4.76M|pub fn is_last(b: u8) -> bool {
   91|  4.76M|    b & 0x80 == 0
   92|  4.76M|}
_RNvNtCsk3m78UaFiFF_15unsigned_varint6decode3u64CskyBRBO12fJg_6simple:
  122|  1.58M|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.58M|    decode!(buf, 9, u64)
  124|  1.58M|}

_RNvNtCsk3m78UaFiFF_15unsigned_varint6encode9u8_bufferCskyBRBO12fJg_6simple:
  101|   584k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|   584k|    [0; U8_LEN]
  103|   584k|}
_RNvNtCsk3m78UaFiFF_15unsigned_varint6encode10u64_bufferCskyBRBO12fJg_6simple:
  119|  3.34M|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.34M|    [0; U64_LEN]
  121|  3.34M|}
_RNvNtCsk3m78UaFiFF_15unsigned_varint6encode3u64CskyBRBO12fJg_6simple:
   69|  1.75M|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.75M|    encode!(number, buf)
   71|  1.75M|}
_RNvNtCsk3m78UaFiFF_15unsigned_varint6encode2u8CskyBRBO12fJg_6simple:
   45|   584k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|   584k|    encode!(number, buf)
   47|   584k|}

_RINvNtCsk3m78UaFiFF_15unsigned_varint2io8read_u64QQRShECskyBRBO12fJg_6simple:
   31|  1.58M|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.58M|                let mut b = encode::$b();
   33|  2.38M|                for i in 0 .. b.len() {
   34|  2.38M|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  2.38M|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  2.38M|                    }
   38|  2.38M|                    if decode::is_last(b[i]) {
   39|  1.58M|                        return Ok(decode::$t(&b[..= i])?.0)
   40|   794k|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.58M|            }

_RNvXs_CskyBRBO12fJg_6simpleNtB4_9OperationNtCsbh9Xaz0iShD_9arbitrary9Arbitrary9arbitrary:
   10|  52.4k|#[derive(Debug, Arbitrary)]
_RNvXs_CskyBRBO12fJg_6simpleNtB4_9OperationNtCsbh9Xaz0iShD_9arbitrary9Arbitrary19arbitrary_take_rest:
   10|  1.07k|#[derive(Debug, Arbitrary)]
_RNvXs1_CskyBRBO12fJg_6simpleNtB5_6MethodNtCsbh9Xaz0iShD_9arbitrary9Arbitrary9arbitrary:
   16|  52.4k|#[derive(Debug, Arbitrary)]
_RNvXs_CskyBRBO12fJg_6simpleNtB4_9OperationNtCsbh9Xaz0iShD_9arbitrary9Arbitrary9size_hintB4_:
   10|  1.07k|#[derive(Debug, Arbitrary)]
_RNvXs1_CskyBRBO12fJg_6simpleNtB5_6MethodNtCsbh9Xaz0iShD_9arbitrary9Arbitrary19arbitrary_take_rest:
   16|  1.07k|#[derive(Debug, Arbitrary)]
_RNvXs1_CskyBRBO12fJg_6simpleNtB5_6MethodNtCsbh9Xaz0iShD_9arbitrary9Arbitrary9size_hintB5_:
   16|  1.07k|#[derive(Debug, Arbitrary)]
_RNCNvXs_CskyBRBO12fJg_6simpleNtB6_9OperationNtCsbh9Xaz0iShD_9arbitrary9Arbitrary9size_hint0B6_:
   10|  1.07k|#[derive(Debug, Arbitrary)]
_RNCNvXs1_CskyBRBO12fJg_6simpleNtB7_6MethodNtCsbh9Xaz0iShD_9arbitrary9Arbitrary9size_hint0B7_:
   16|  1.07k|#[derive(Debug, Arbitrary)]

_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE18new_with_bit_widthCskyBRBO12fJg_6simple:
   62|  1.07k|    pub fn new_with_bit_width(block_store: BS, bit_width: u32) -> Self {
   63|  1.07k|        Self {
   64|  1.07k|            root: Root::new(bit_width),
   65|  1.07k|            block_store,
   66|  1.07k|        }
   67|  1.07k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE6heightCskyBRBO12fJg_6simple:
   89|   129k|    pub fn height(&self) -> u32 {
   90|   129k|        self.root.height
   91|   129k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE9bit_widthCskyBRBO12fJg_6simple:
   69|   137k|    fn bit_width(&self) -> u32 {
   70|   137k|        self.root.bit_width
   71|   137k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE4loadCskyBRBO12fJg_6simple:
   74|  10.0k|    pub fn load(cid: &Cid, block_store: BS) -> Result<Self, Error> {
   75|       |        // Load root bytes from database
   76|  10.0k|        let root: Root<V> = block_store
   77|  10.0k|            .get_cbor(cid)?
   78|  10.0k|            .ok_or_else(|| Error::CidNotFound(cid.to_string()))?;
   79|       |
   80|       |        // Sanity check, this should never be possible.
   81|  10.0k|        if root.height > MAX_HEIGHT {
   82|      0|            return Err(Error::MaxHeight(root.height, MAX_HEIGHT));
   83|  10.0k|        }
   84|  10.0k|
   85|  10.0k|        Ok(Self { root, block_store })
   86|  10.0k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE5flushCskyBRBO12fJg_6simple:
  262|  10.0k|        self.root.node.flush(&self.block_store)?;
  263|  10.0k|        Ok(self.block_store.put_cbor(&self.root, Code::Blake2b256)?)
  264|  10.0k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE6deleteCskyBRBO12fJg_6simple:
  174|  10.6k|    pub fn delete(&mut self, i: u64) -> Result<Option<V>, Error> {
  175|  10.6k|        if i > MAX_INDEX {
  176|      0|            return Err(Error::OutOfRange(i));
  177|  10.6k|        }
  178|  10.6k|
  179|  10.6k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  180|       |            // Index was out of range of current AMT
  181|  2.05k|            return Ok(None);
  182|  8.63k|        }
  183|       |
  184|       |        // Delete node from AMT
  185|  8.63k|        let deleted =
  186|  8.63k|            self.root
  187|  8.63k|                .node
  188|  8.63k|                .delete(&self.block_store, self.height(), self.bit_width(), i)?;
  189|       |
  190|  8.63k|        if deleted.is_none() {
  191|  6.13k|            return Ok(None);
  192|  2.49k|        }
  193|  2.49k|
  194|  2.49k|        self.root.count -= 1;
  195|  2.49k|
  196|  2.49k|        if self.root.node.is_empty() {
  197|    174|            // Last link was removed, replace root with a leaf node and reset height.
  198|    174|            self.root.node = Node::Leaf {
  199|    174|                vals: init_sized_vec(self.root.bit_width),
  200|    174|            };
  201|    174|            self.root.height = 0;
  202|    174|        } else {
  203|       |            // Handle collapsing node when the root is a link node with only one link,
  204|       |            // sub node can be moved up into the root.
  205|  6.49k|            while self.root.node.can_collapse() && self.height() > 0 {
  206|  4.16k|                let sub_node: Node<V> = match &mut self.root.node {
  207|  4.16k|                    Node::Link { links, .. } => match &mut links[0] {
  208|  3.70k|                        Some(Link::Dirty(node)) => {
  209|  3.70k|                            *std::mem::replace(node, Box::new(Node::empty()))
  210|       |                        }
  211|    466|                        Some(Link::Cid { cid, cache }) => {
  212|    466|                            let cache_node = std::mem::take(cache);
  213|    466|                            if let Some(sn) = cache_node.into_inner() {
  214|    112|                                *sn
  215|       |                            } else {
  216|       |                                // Only retrieve sub node if not found in cache
  217|    354|                                self.block_store
  218|    354|                                    .get_cbor::<CollapsedNode<V>>(cid)?
  219|    354|                                    .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  220|    354|                                    .expand(self.root.bit_width)?
  221|       |                            }
  222|       |                        }
  223|      0|                        _ => unreachable!("First index checked to be Some in `can_collapse`"),
  224|       |                    },
  225|      0|                    Node::Leaf { .. } => unreachable!("Non zero height cannot be a leaf node"),
  226|       |                };
  227|       |
  228|  4.16k|                self.root.node = sub_node;
  229|  4.16k|                self.root.height -= 1;
  230|       |            }
  231|       |        }
  232|       |
  233|  2.49k|        Ok(deleted)
  234|  10.6k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE3setCskyBRBO12fJg_6simple:
  123|  33.4k|    pub fn set(&mut self, i: u64, val: V) -> Result<(), Error> {
  124|  33.4k|        if i > MAX_INDEX {
  125|      0|            return Err(Error::OutOfRange(i));
  126|  33.4k|        }
  127|       |
  128|  58.5k|        while i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  129|       |            // node at index exists
  130|  25.1k|            if !self.root.node.is_empty() {
  131|  13.7k|                // Parent node for expansion
  132|  13.7k|                let mut new_links: Vec<Option<Link<V>>> = init_sized_vec(self.root.bit_width);
  133|  13.7k|
  134|  13.7k|                // Take root node to be moved down
  135|  13.7k|                let node = std::mem::replace(&mut self.root.node, Node::empty());
  136|  13.7k|
  137|  13.7k|                // Set link to child node being expanded
  138|  13.7k|                new_links[0] = Some(Link::Dirty(Box::new(node)));
  139|  13.7k|
  140|  13.7k|                self.root.node = Node::Link { links: new_links };
  141|  13.7k|            } else {
  142|  11.4k|                // If first expansion is before a value inserted, convert base node to Link
  143|  11.4k|                self.root.node = Node::Link {
  144|  11.4k|                    links: init_sized_vec(self.bit_width()),
  145|  11.4k|                };
  146|  11.4k|            }
  147|       |            // Incrememnt height after each iteration
  148|  25.1k|            self.root.height += 1;
  149|       |        }
  150|       |
  151|  33.4k|        if self
  152|  33.4k|            .root
  153|  33.4k|            .node
  154|  33.4k|            .set(&self.block_store, self.height(), self.bit_width(), i, val)?
  155|  33.4k|            .is_none()
  156|  22.4k|        {
  157|  22.4k|            self.root.count += 1;
  158|  22.4k|        }
  159|       |
  160|  33.4k|        Ok(())
  161|  33.4k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE3getCskyBRBO12fJg_6simple:
  108|  7.84k|    pub fn get(&self, i: u64) -> Result<Option<&V>, Error> {
  109|  7.84k|        if i > MAX_INDEX {
  110|      0|            return Err(Error::OutOfRange(i));
  111|  7.84k|        }
  112|  7.84k|
  113|  7.84k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  114|  1.24k|            return Ok(None);
  115|  6.60k|        }
  116|  6.60k|
  117|  6.60k|        self.root
  118|  6.60k|            .node
  119|  6.60k|            .get(&self.block_store, self.height(), self.bit_width(), i)
  120|  7.84k|    }
_RNvMs_NtCsePTVFWlhm1q_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE3newCskyBRBO12fJg_6simple:
   57|  1.07k|    pub fn new(block_store: BS) -> Self {
   58|  1.07k|        Self::new_with_bit_width(block_store, DEFAULT_BIT_WIDTH)
   59|  1.07k|    }

_RINvCsePTVFWlhm1q_12fvm_ipld_amt14init_sized_vecyECskyBRBO12fJg_6simple:
   36|  33.3k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   37|  33.3k|    std::iter::repeat_with(|| None)
   38|  33.3k|        .take(1 << bit_width)
   39|  33.3k|        .collect()
   40|  33.3k|}
_RINvCsePTVFWlhm1q_12fvm_ipld_amt14init_sized_vecINtNtB2_4node4LinkyEECskyBRBO12fJg_6simple:
   36|   531k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   37|   531k|    std::iter::repeat_with(|| None)
   38|   531k|        .take(1 << bit_width)
   39|   531k|        .collect()
   40|   531k|}
_RNCINvCsePTVFWlhm1q_12fvm_ipld_amt14init_sized_vecyE0CskyBRBO12fJg_6simple:
   37|   267k|    std::iter::repeat_with(|| None)
_RNCINvCsePTVFWlhm1q_12fvm_ipld_amt14init_sized_vecINtNtB4_4node4LinkyEE0CskyBRBO12fJg_6simple:
   37|  4.25M|    std::iter::repeat_with(|| None)
_RNvCsePTVFWlhm1q_12fvm_ipld_amt10bmap_bytes:
   42|   262k|fn bmap_bytes(bit_width: u32) -> usize {
   43|   262k|    if bit_width <= 3 {
   44|   262k|        1
   45|       |    } else {
   46|      0|        1 << (bit_width - 3)
   47|       |    }
   48|   262k|}
_RNvCsePTVFWlhm1q_12fvm_ipld_amt16nodes_for_height:
   28|  1.06M|fn nodes_for_height(bit_width: u32, height: u32) -> u64 {
   29|  1.06M|    let height_log_two = bit_width as u64 * height as u64;
   30|  1.06M|    if height_log_two >= 64 {
   31|  34.0k|        return std::u64::MAX;
   32|  1.02M|    }
   33|  1.02M|    1 << height_log_two
   34|  1.06M|}

_RNCINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB8_4NodeyE6deleteRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE0CskyBRBO12fJg_6simple:
  384|  33.8k|                        cache.get_or_try_init(|| {
  385|  33.8k|                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  386|  33.8k|                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  387|  33.8k|                                .expand(bit_width)
  388|  33.8k|                                .map(Box::new)
  389|  33.8k|                        })?;
_RNCNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapse0CskyBRBO12fJg_6simple:
  213|  6.35k|                links.get(0).and_then(|l| l.as_ref()).is_some()
_RNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB5_4NodeyE8set_leafCskyBRBO12fJg_6simple:
  333|  33.4k|    fn set_leaf(&mut self, i: u64, val: V) -> Option<V> {
  334|  33.4k|        match self {
  335|  33.4k|            Node::Leaf { vals } => {
  336|  33.4k|                let prev = std::mem::replace(
  337|  33.4k|                    vals.get_mut(usize::try_from(i).unwrap()).unwrap(),
  338|  33.4k|                    Some(val),
  339|  33.4k|                );
  340|  33.4k|                prev
  341|       |            }
  342|      0|            Node::Link { .. } => panic!("set_leaf should never be called on a shard of links"),
  343|       |        }
  344|  33.4k|    }
_RNCNCNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB9_4NodeyE12can_collapses_00CskyBRBO12fJg_6simple:
  216|  32.9k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RINvXs2_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB6_4NodeyENtNtCs9JCvGpgyHyQ_5serde3ser9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   84|   463k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   85|   463k|    where
   86|   463k|        S: ser::Serializer,
   87|   463k|    {
   88|   463k|        match &self {
   89|  27.9k|            Node::Leaf { vals } => {
   90|  27.9k|                let mut values = Vec::<&V>::with_capacity(vals.len());
   91|  27.9k|                let mut bmap = vec![0u8; ((vals.len().saturating_sub(1)) / 8) + 1];
   92|   223k|                for (i, v) in vals.iter().enumerate() {
   93|   223k|                    if let Some(val) = v {
   94|  31.5k|                        values.push(val);
   95|  31.5k|                        bmap[i / 8] |= 1 << (i % 8);
   96|   191k|                    }
   97|       |                }
   98|  27.9k|                (BytesSer(&bmap), Vec::<&Cid>::new(), values).serialize(s)
   99|       |            }
  100|   435k|            Node::Link { links } => {
  101|   435k|                let mut collapsed = Vec::<&Cid>::with_capacity(links.len());
  102|   435k|                let mut bmap = vec![0u8; ((links.len().saturating_sub(1)) / 8) + 1];
  103|  3.48M|                for (i, v) in links.iter().enumerate() {
  104|  3.48M|                    if let Some(val) = v {
  105|   584k|                        if let Link::Cid { cid, .. } = val {
  106|   584k|                            collapsed.push(cid);
  107|   584k|                            bmap[i / 8] |= 1 << (i % 8);
  108|   584k|                        } else {
  109|      0|                            return Err(ser::Error::custom(Error::Cached));
  110|       |                        }
  111|  2.90M|                    }
  112|       |                }
  113|   435k|                (BytesSer(&bmap), collapsed, Vec::<&V>::new()).serialize(s)
  114|       |            }
  115|       |        }
  116|   463k|    }
_RINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB6_4NodeyE6deleteRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreECskyBRBO12fJg_6simple:
  347|   102k|    pub(super) fn delete<DB: Blockstore>(
  348|   102k|        &mut self,
  349|   102k|        bs: &DB,
  350|   102k|        height: u32,
  351|   102k|        bit_width: u32,
  352|   102k|        i: u64,
  353|   102k|    ) -> Result<Option<V>, Error> {
  354|   102k|        match self {
  355|  3.27k|            Self::Leaf { vals } => Ok(vals
  356|  3.27k|                .get_mut(usize::try_from(i).unwrap())
  357|  3.27k|                .and_then(std::mem::take)),
  358|  98.8k|            Self::Link { links } => {
  359|  98.8k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  360|  98.8k|                    .try_into()
  361|  98.8k|                    .unwrap();
  362|  98.8k|                let (deleted, replace) = match &mut links[sub_i] {
  363|  46.8k|                    Some(Link::Dirty(n)) => {
  364|  46.8k|                        let deleted = n.delete(
  365|  46.8k|                            bs,
  366|  46.8k|                            height - 1,
  367|  46.8k|                            bit_width,
  368|  46.8k|                            i % nodes_for_height(bit_width, height),
  369|  46.8k|                        )?;
  370|  46.8k|                        if deleted.is_none() {
  371|       |                            // Index to be deleted was not found
  372|  16.3k|                            return Ok(None);
  373|  30.5k|                        }
  374|  30.5k|                        if !n.is_empty() {
  375|       |                            // Link node is not empty yet, just return deleted
  376|  16.0k|                            return Ok(deleted);
  377|  14.5k|                        }
  378|  14.5k|
  379|  14.5k|                        // Remove needs to be done outside of the `if let` for memory safety.
  380|  14.5k|                        (deleted, None)
  381|       |                    }
  382|  46.6k|                    Some(Link::Cid { cid, cache }) => {
  383|  46.6k|                        // Take cache, will be replaced if no nodes deleted
  384|  46.6k|                        cache.get_or_try_init(|| {
  385|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  386|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  387|       |                                .expand(bit_width)
  388|       |                                .map(Box::new)
  389|  46.6k|                        })?;
  390|  46.6k|                        let sub_node = cache.get_mut().expect("filled line above");
  391|  46.6k|                        let deleted = sub_node.delete(
  392|  46.6k|                            bs,
  393|  46.6k|                            height - 1,
  394|  46.6k|                            bit_width,
  395|  46.6k|                            i % nodes_for_height(bit_width, height),
  396|  46.6k|                        )?;
  397|  46.6k|                        if deleted.is_none() {
  398|       |                            // Index to be deleted was not found
  399|  30.9k|                            return Ok(None);
  400|  15.6k|                        };
  401|  15.6k|                        let sub_node = std::mem::replace(sub_node, Box::new(Node::empty()));
  402|  15.6k|
  403|  15.6k|                        if sub_node.is_empty() {
  404|       |                            // Sub node is empty, clear link.
  405|  8.05k|                            (deleted, None)
  406|       |                        } else {
  407|       |                            // Link was modified and is now marked dirty.
  408|  7.62k|                            (deleted, Some(Link::Dirty(sub_node)))
  409|       |                        }
  410|       |                    }
  411|       |                    // Link index is empty.
  412|  5.35k|                    None => return Ok(None),
  413|       |                };
  414|       |
  415|  30.2k|                links[sub_i] = replace;
  416|  30.2k|
  417|  30.2k|                Ok(deleted)
  418|       |            }
  419|       |        }
  420|   102k|    }
_RNCINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreEs_0CskyBRBO12fJg_6simple:
  245|  68.7k|                match links.get(sub_i).and_then(|v| v.as_ref()) {
_RNCINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreEs0_0CskyBRBO12fJg_6simple:
  247|  22.3k|                        let cached_node = cache.get_or_try_init(|| {
  248|  22.3k|                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  249|  22.3k|                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  250|  22.3k|                                .expand(bit_width)
  251|  22.3k|                                .map(Box::new)
  252|  22.3k|                        })?;
_RNCINvXNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtBa_13CollapsedNodepENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserializeINtB5_9___VisitoryENtB1d_7Visitor9visit_seqINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de9SeqAccessNtNtB2O_4read9SliceReadEE0CskyBRBO12fJg_6simple:
  119|   262k|#[derive(Serialize, Deserialize)]
_RNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB5_4NodeyE5emptyCskyBRBO12fJg_6simple:
  176|   486k|    pub(super) fn empty() -> Self {
  177|   486k|        Node::Leaf {
  178|   486k|            vals: Default::default(),
  179|   486k|        }
  180|   486k|    }
_RNCNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_emptys_0CskyBRBO12fJg_6simple:
  227|  24.1k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
_RINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB6_4NodeyE5flushRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreECskyBRBO12fJg_6simple:
  184|   463k|        if let Node::Link { links } = self {
  185|   584k|            for link in links.iter_mut().flatten() {
  186|       |                // links should only be flushed if the bitmap is set.
  187|   584k|                if let Link::Dirty(n) = link {
  188|       |                    // flush sub node to clear caches
  189|   453k|                    n.flush(bs)?;
  190|       |
  191|       |                    // Puts node in blockstore and and retrieves it's CID
  192|   453k|                    let cid = bs.put_cbor(n, Code::Blake2b256)?;
  193|       |
  194|       |                    // Replace the data with some arbitrary node to move without requiring clone
  195|   453k|                    let existing = std::mem::replace(n, Box::new(Node::empty()));
  196|   453k|
  197|   453k|                    // Can keep the flushed node in link cache
  198|   453k|                    let cache = OnceCell::from(existing);
  199|   453k|                    *link = Link::Cid { cid, cache };
  200|   131k|                }
  201|       |            }
  202|  27.9k|        }
  203|       |
  204|   463k|        Ok(())
  205|   463k|    }
_RNCNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_empty0CskyBRBO12fJg_6simple:
  226|   325k|            Node::Link { links } => links.iter().all(|l| l.is_none()),
_RNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB5_4NodeyE12can_collapseCskyBRBO12fJg_6simple:
  209|  6.49k|    pub(super) fn can_collapse(&self) -> bool {
  210|  6.49k|        match self {
  211|  6.35k|            Node::Link { links } => {
  212|  6.35k|                // Check if first index is a link and all other values are empty.
  213|  6.35k|                links.get(0).and_then(|l| l.as_ref()).is_some()
  214|  6.01k|                    && links
  215|  6.01k|                        .get(1..)
  216|  6.01k|                        .map(|l| l.iter().all(|l| l.is_none()))
  217|  6.01k|                        .unwrap_or(true)
  218|       |            }
  219|    138|            Node::Leaf { .. } => false,
  220|       |        }
  221|  6.49k|    }
_RINvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtB5_13CollapsedNodeyENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB23_4read9SliceReadEECskyBRBO12fJg_6simple:
  119|   262k|#[derive(Serialize, Deserialize)]
_RINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB6_4NodeyE3getRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreECskyBRBO12fJg_6simple:
  232|  70.8k|    pub(super) fn get<DB: Blockstore>(
  233|  70.8k|        &self,
  234|  70.8k|        bs: &DB,
  235|  70.8k|        height: u32,
  236|  70.8k|        bit_width: u32,
  237|  70.8k|        i: u64,
  238|  70.8k|    ) -> Result<Option<&V>, Error> {
  239|  70.8k|        match self {
  240|  2.03k|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
  241|  68.7k|            Node::Link { links, .. } => {
  242|  68.7k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  243|  68.7k|                    .try_into()
  244|  68.7k|                    .unwrap();
  245|  68.7k|                match links.get(sub_i).and_then(|v| v.as_ref()) {
  246|  51.8k|                    Some(Link::Cid { cid, cache }) => {
  247|  51.8k|                        let cached_node = cache.get_or_try_init(|| {
  248|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  249|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  250|       |                                .expand(bit_width)
  251|       |                                .map(Box::new)
  252|  51.8k|                        })?;
  253|       |
  254|  51.8k|                        cached_node.get(
  255|  51.8k|                            bs,
  256|  51.8k|                            height - 1,
  257|  51.8k|                            bit_width,
  258|  51.8k|                            i % nodes_for_height(bit_width, height),
  259|  51.8k|                        )
  260|       |                    }
  261|  12.3k|                    Some(Link::Dirty(n)) => n.get(
  262|  12.3k|                        bs,
  263|  12.3k|                        height - 1,
  264|  12.3k|                        bit_width,
  265|  12.3k|                        i % nodes_for_height(bit_width, height),
  266|  12.3k|                    ),
  267|  4.57k|                    None => Ok(None),
  268|       |                }
  269|       |            }
  270|       |        }
  271|  70.8k|    }
_RNCNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapses_0CskyBRBO12fJg_6simple:
  216|  6.01k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB6_4NodeyE3setRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreECskyBRBO12fJg_6simple:
  274|   694k|    pub(super) fn set<DB: Blockstore>(
  275|   694k|        &mut self,
  276|   694k|        bs: &DB,
  277|   694k|        height: u32,
  278|   694k|        bit_width: u32,
  279|   694k|        i: u64,
  280|   694k|        val: V,
  281|   694k|    ) -> Result<Option<V>, Error> {
  282|   694k|        if height == 0 {
  283|  33.4k|            return Ok(self.set_leaf(i, val));
  284|   660k|        }
  285|   660k|
  286|   660k|        let nfh = nodes_for_height(bit_width, height);
  287|   660k|
  288|   660k|        // If dividing by nodes for height should give an index for link in node
  289|   660k|        let idx: usize = (i / nfh).try_into().expect("index overflow");
  290|       |
  291|   660k|        if let Node::Link { links } = self {
  292|   660k|            links[idx] = match &mut links[idx] {
  293|   205k|                Some(Link::Cid { cid, cache }) => {
  294|   205k|                    let cache_node = std::mem::take(cache);
  295|   205k|                    let sub_node = if let Some(sn) = cache_node.into_inner() {
  296|  9.95k|                        sn
  297|       |                    } else {
  298|       |                        // Only retrieve sub node if not found in cache
  299|   195k|                        bs.get_cbor::<CollapsedNode<V>>(cid)?
  300|   195k|                            .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  301|   195k|                            .expand(bit_width)
  302|   195k|                            .map(Box::new)?
  303|       |                    };
  304|       |
  305|   205k|                    Some(Link::Dirty(sub_node))
  306|       |                }
  307|       |                None => {
  308|   276k|                    let node = match height {
  309|  20.8k|                        1 => Node::Leaf {
  310|  20.8k|                            vals: init_sized_vec(bit_width),
  311|  20.8k|                        },
  312|   255k|                        _ => Node::Link {
  313|   255k|                            links: init_sized_vec(bit_width),
  314|   255k|                        },
  315|       |                    };
  316|   276k|                    Some(Link::Dirty(Box::new(node)))
  317|       |                }
  318|   178k|                Some(Link::Dirty(node)) => {
  319|   178k|                    return node.set(bs, height - 1, bit_width, i % nfh, val)
  320|       |                }
  321|       |            };
  322|       |
  323|   482k|            if let Some(Link::Dirty(n)) = &mut links[idx] {
  324|   482k|                n.set(bs, height - 1, bit_width, i % nfh, val)
  325|       |            } else {
  326|      0|                unreachable!("Value is set as cached")
  327|       |            }
  328|       |        } else {
  329|      0|            unreachable!("should not be handled");
  330|       |        }
  331|   694k|    }
_RINvXNvXNvXNvNtCsePTVFWlhm1q_12fvm_ipld_amt4nodes_1__INtBb_13CollapsedNodepENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserializeINtB6_9___VisitorpENtB1e_7Visitor9visit_seqINtB3_17___DeserializeWithyEB1c_11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB3z_4read9SliceReadEECskyBRBO12fJg_6simple:
  119|   262k|#[derive(Serialize, Deserialize)]
_RNvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB5_4NodeyE8is_emptyCskyBRBO12fJg_6simple:
  224|  73.8k|    pub(super) fn is_empty(&self) -> bool {
  225|  73.8k|        match self {
  226|  70.2k|            Node::Link { links } => links.iter().all(|l| l.is_none()),
  227|  3.65k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
  228|       |        }
  229|  73.8k|    }
_RNCINvMs4_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreE0CskyBRBO12fJg_6simple:
  240|  2.03k|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
_RNvXs1_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB5_4LinkyEINtNtCs5KtMyn79NKx_4core7convert4FromINtNtCsikhUnhnQivz_3cid3cid3CidKj40_EE4fromCskyBRBO12fJg_6simple:
   62|   397k|    fn from(cid: Cid) -> Link<V> {
   63|   397k|        Link::Cid {
   64|   397k|            cid,
   65|   397k|            cache: Default::default(),
   66|   397k|        }
   67|   397k|    }
_RNvMs3_NtCsePTVFWlhm1q_12fvm_ipld_amt4nodeINtB5_13CollapsedNodeyE6expandCskyBRBO12fJg_6simple:
  123|   262k|    pub(crate) fn expand(self, bit_width: u32) -> Result<Node<V>, Error> {
  124|   262k|        let CollapsedNode(bmap, links, values) = self;
  125|   262k|        if !links.is_empty() && !values.is_empty() {
  126|      0|            return Err(Error::LinksAndValues);
  127|   262k|        }
  128|   262k|
  129|   262k|        if bmap_bytes(bit_width) != bmap.len() {
  130|      0|            return Err(anyhow!(
  131|      0|                "expected bitfield of length {}, found bitfield with length {}",
  132|      0|                bmap_bytes(bit_width),
  133|      0|                bmap.len()
  134|      0|            )
  135|      0|            .into());
  136|   262k|        }
  137|   262k|
  138|   262k|        if !links.is_empty() {
  139|   251k|            let mut links_iter = links.into_iter();
  140|   251k|            let mut links = init_sized_vec::<Link<V>>(bit_width);
  141|  2.00M|            for (i, v) in links.iter_mut().enumerate() {
  142|  2.00M|                if bmap[i / 8] & (1 << (i % 8)) != 0 {
  143|   397k|                    *v = Some(Link::from(links_iter.next().ok_or_else(|| {
  144|       |                        anyhow!("Bitmap contained more set bits than links provided",)
  145|   397k|                    })?))
  146|  1.61M|                }
  147|       |            }
  148|   251k|            if links_iter.next().is_some() {
  149|      0|                return Err(anyhow!("Bitmap contained less set bits than links provided",).into());
  150|   251k|            }
  151|   251k|            Ok(Node::Link { links })
  152|       |        } else {
  153|  11.2k|            let mut val_iter = values.into_iter();
  154|  11.2k|            let mut vals = init_sized_vec::<V>(bit_width);
  155|  90.0k|            for (i, v) in vals.iter_mut().enumerate() {
  156|  90.0k|                if bmap[i / 8] & (1 << (i % 8)) != 0 {
  157|  14.7k|                    *v = Some(val_iter.next().ok_or_else(|| {
  158|       |                        anyhow!("Bitmap contained more set bits than values provided")
  159|  14.7k|                    })?)
  160|  75.3k|                }
  161|       |            }
  162|  11.2k|            if val_iter.next().is_some() {
  163|      0|                return Err(anyhow!("Bitmap contained less set bits than values provided").into());
  164|  11.2k|            }
  165|  11.2k|            Ok(Node::Leaf { vals })
  166|       |        }
  167|   262k|    }

_RNvMNtCsePTVFWlhm1q_12fvm_ipld_amt4rootINtB2_4RootyE3newCskyBRBO12fJg_6simple:
   20|  1.07k|    pub(super) fn new(bit_width: u32) -> Self {
   21|  1.07k|        Self {
   22|  1.07k|            bit_width,
   23|  1.07k|            count: 0,
   24|  1.07k|            height: 0,
   25|  1.07k|            node: Node::Leaf {
   26|  1.07k|                vals: init_sized_vec(bit_width),
   27|  1.07k|            },
   28|  1.07k|        }
   29|  1.07k|    }
_RINvXs0_NtCsePTVFWlhm1q_12fvm_ipld_amt4rootINtB6_4RootyENtNtCs9JCvGpgyHyQ_5serde2de11Deserialize11deserializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor2de12DeserializerNtNtB1P_4read9SliceReadEECskyBRBO12fJg_6simple:
   48|  10.0k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   49|  10.0k|    where
   50|  10.0k|        D: de::Deserializer<'de>,
   51|  10.0k|    {
   52|  10.0k|        let (bit_width, height, count, node): (_, _, _, CollapsedNode<V>) =
   53|  10.0k|            Deserialize::deserialize(deserializer)?;
   54|       |        Ok(Self {
   55|  10.0k|            bit_width,
   56|  10.0k|            height,
   57|  10.0k|            count,
   58|  10.0k|            node: node.expand(bit_width).map_err(de::Error::custom)?,
   59|       |        })
   60|  10.0k|    }
_RINvXs_NtCsePTVFWlhm1q_12fvm_ipld_amt4rootINtB5_4RootyENtNtCs9JCvGpgyHyQ_5serde3ser9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
   36|  10.0k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   37|  10.0k|    where
   38|  10.0k|        S: ser::Serializer,
   39|  10.0k|    {
   40|  10.0k|        (&self.bit_width, &self.height, &self.count, &self.node).serialize(s)
   41|  10.0k|    }

_RNvXs_NtNtCs7B7989kbyAV_10fvm_shared10blockstore5blockINtB4_5BlockRINtNtCsTv665f55BC_5alloc3vec3VechEEINtNtCs5KtMyn79NKx_4core7convert5AsRefShE6as_refCskyBRBO12fJg_6simple:
   40|   463k|    fn as_ref(&self) -> &[u8] {
   41|   463k|        self.data.as_ref()
   42|   463k|    }
_RNvMNtNtCs7B7989kbyAV_10fvm_shared10blockstore5blockINtB2_5BlockRINtNtCsTv665f55BC_5alloc3vec3VechEE3cidCskyBRBO12fJg_6simple:
   26|   463k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   27|   463k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   28|   463k|    }

_RINvYRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreNtNtB8_4cbor9CborStore8get_cborINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node13CollapsedNodeyEECskyBRBO12fJg_6simple:
   13|   252k|        match self.get(cid)? {
   14|   252k|            Some(bz) => Ok(Some(from_slice(&bz)?)),
   15|      0|            None => Ok(None),
   16|       |        }
   17|   252k|    }
_RINvYRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreNtNtB8_4cbor9CborStore8get_cborINtNtCsePTVFWlhm1q_12fvm_ipld_amt4root4RootyEECskyBRBO12fJg_6simple:
   13|  10.0k|        match self.get(cid)? {
   14|  10.0k|            Some(bz) => Ok(Some(from_slice(&bz)?)),
   15|      0|            None => Ok(None),
   16|       |        }
   17|  10.0k|    }
_RINvYRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreNtNtB8_4cbor9CborStore8put_cborINtNtCsePTVFWlhm1q_12fvm_ipld_amt4root4RootyEECskyBRBO12fJg_6simple:
   20|  10.0k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   21|  10.0k|    where
   22|  10.0k|        S: ser::Serialize,
   23|  10.0k|    {
   24|  10.0k|        let bytes = to_vec(obj)?;
   25|  10.0k|        self.put(
   26|  10.0k|            code,
   27|  10.0k|            &Block {
   28|  10.0k|                codec: DAG_CBOR,
   29|  10.0k|                data: &bytes,
   30|  10.0k|            },
   31|  10.0k|        )
   32|  10.0k|    }
_RINvYRNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreNtNtB8_4cbor9CborStore8put_cborINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEECskyBRBO12fJg_6simple:
   20|   453k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   21|   453k|    where
   22|   453k|        S: ser::Serialize,
   23|   453k|    {
   24|   453k|        let bytes = to_vec(obj)?;
   25|   453k|        self.put(
   26|   453k|            code,
   27|   453k|            &Block {
   28|   453k|                codec: DAG_CBOR,
   29|   453k|                data: &bytes,
   30|   453k|            },
   31|   453k|        )
   32|   453k|    }

_RNvXs1_NtNtCs7B7989kbyAV_10fvm_shared10blockstore6memoryNtB5_16MemoryBlockstoreNtNtCs5KtMyn79NKx_4core7default7Default7defaultCskyBRBO12fJg_6simple:
    9|  1.07k|#[derive(Debug, Default, Clone)]
_RNvXs_NtNtCs7B7989kbyAV_10fvm_shared10blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   29|   463k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   30|   463k|        self.blocks.borrow_mut().insert(*k, block.into());
   31|   463k|        Ok(())
   32|   463k|    }
_RNvXs_NtNtCs7B7989kbyAV_10fvm_shared10blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore3get:
   25|   262k|    fn get(&self, k: &Cid) -> Result<Option<Vec<u8>>> {
   26|   262k|        Ok(self.blocks.borrow().get(k).cloned())
   27|   262k|    }

_RINvXNtCs7B7989kbyAV_10fvm_shared10blockstoreRNtNtB3_6memory16MemoryBlockstoreNtB3_10Blockstore3putRINtNtCsTv665f55BC_5alloc3vec3VechEECskyBRBO12fJg_6simple:
  107|   463k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  108|   463k|    where
  109|   463k|        Self: Sized,
  110|   463k|        D: AsRef<[u8]>,
  111|   463k|    {
  112|   463k|        (*self).put(mh_code, block)
  113|   463k|    }
_RINvYNtNtNtCs7B7989kbyAV_10fvm_shared10blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCsTv665f55BC_5alloc3vec3VechEECskyBRBO12fJg_6simple:
   40|   463k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   41|   463k|    where
   42|   463k|        Self: Sized,
   43|   463k|        D: AsRef<[u8]>,
   44|   463k|    {
   45|   463k|        let k = block.cid(mh_code);
   46|   463k|        self.put_keyed(&k, block.as_ref())?;
   47|   463k|        Ok(k)
   48|   463k|    }
_RNvXNtCs7B7989kbyAV_10fvm_shared10blockstoreRNtNtB2_6memory16MemoryBlockstoreNtB2_10Blockstore3getCskyBRBO12fJg_6simple:
   95|   262k|    fn get(&self, k: &Cid) -> Result<Option<Vec<u8>>> {
   96|   262k|        (*self).get(k)
   97|   262k|    }

_RINvXNvNtNtCs7B7989kbyAV_10fvm_shared8encoding5bytes1__NtB5_8BytesSerNtNtCs9JCvGpgyHyQ_5serde3ser9Serialize9serializeQINtNtCsb4b1WdChxoo_18serde_ipld_dagcbor3ser10SerializerQINtNtCsTv665f55BC_5alloc3vec3VechEEECskyBRBO12fJg_6simple:
    8|   463k|#[derive(Serialize)]

_RINvNtCs7B7989kbyAV_10fvm_shared8encoding6to_vecINtNtCsePTVFWlhm1q_12fvm_ipld_amt4root4RootyEECskyBRBO12fJg_6simple:
   35|  10.0k|pub fn to_vec<T>(value: &T) -> serde_ipld_dagcbor::Result<Vec<u8>>
   36|  10.0k|where
   37|  10.0k|    T: ser::Serialize + ?Sized,
   38|  10.0k|{
   39|  10.0k|    let mut vec = Vec::new();
   40|  10.0k|    value.serialize(&mut serde_ipld_dagcbor::Serializer::new(&mut vec))?;
   41|  10.0k|    Ok(vec)
   42|  10.0k|}
_RINvNtCs7B7989kbyAV_10fvm_shared8encoding6to_vecINtNtCsTv665f55BC_5alloc5boxed3BoxINtNtCsePTVFWlhm1q_12fvm_ipld_amt4node4NodeyEEECskyBRBO12fJg_6simple:
   35|   453k|pub fn to_vec<T>(value: &T) -> serde_ipld_dagcbor::Result<Vec<u8>>
   36|   453k|where
   37|   453k|    T: ser::Serialize + ?Sized,
   38|   453k|{
   39|   453k|    let mut vec = Vec::new();
   40|   453k|    value.serialize(&mut serde_ipld_dagcbor::Serializer::new(&mut vec))?;
   41|   453k|    Ok(vec)
   42|   453k|}

