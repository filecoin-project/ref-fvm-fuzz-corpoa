_RNvXs14_NtCs7h6iRseGexw_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvMNtCs7h6iRseGexw_5ahash13fallback_hashNtB2_7AHasher6update:
   97|   151k|    fn update(&mut self, new_data: u64) {
   98|   151k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|   151k|    }
_RNvMNtCs7h6iRseGexw_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCs7uao2NoihGb_11equivalence:
   58|   142k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|   142k|        AHasher {
   60|   142k|            buffer: rand_state.k0,
   61|   142k|            pad: rand_state.k1,
   62|   142k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|   142k|        }
   64|   142k|    }
_RNvXs_NtCs7h6iRseGexw_5ahash13fallback_hashNtB4_7AHasherNtNtCslXuQP8d5bfj_4core4hash6Hasher6finishCs7uao2NoihGb_11equivalence:
  212|   142k|    fn finish(&self) -> u64 {
  213|   142k|        let rot = (self.buffer & 63) as u32;
  214|   142k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|   142k|    }
_RNvXs_NtCs7h6iRseGexw_5ahash13fallback_hashNtB4_7AHasherNtNtCslXuQP8d5bfj_4core4hash6Hasher9write_u64Cs7uao2NoihGb_11equivalence:
  163|   142k|    fn write_u64(&mut self, i: u64) {
  164|   142k|        self.update(i as u64);
  165|   142k|    }
_RNvXs_NtCs7h6iRseGexw_5ahash13fallback_hashNtB4_7AHasherNtNtCslXuQP8d5bfj_4core4hash6Hasher9write_u64B6_:
  163|  9.62k|    fn write_u64(&mut self, i: u64) {
  164|  9.62k|        self.update(i as u64);
  165|  9.62k|    }
_RNvXs4_NtCs7h6iRseGexw_5ahash13fallback_hashNtB5_7AHasherNtNtCslXuQP8d5bfj_4core5clone5Clone5cloneB7_:
   23|  7.69k|#[derive(Debug, Clone)]
_RNvXs_NtCs7h6iRseGexw_5ahash13fallback_hashNtB4_7AHasherNtNtCslXuQP8d5bfj_4core4hash6Hasher11write_usizeB6_:
  174|  1.92k|    fn write_usize(&mut self, i: usize) {
  175|  1.92k|        self.write_u64(i as u64);
  176|  1.92k|    }
_RNvMNtCs7h6iRseGexw_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|  1.92k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  1.92k|        AHasher {
   60|  1.92k|            buffer: rand_state.k0,
   61|  1.92k|            pad: rand_state.k1,
   62|  1.92k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  1.92k|        }
   64|  1.92k|    }
_RNvXs_NtCs7h6iRseGexw_5ahash13fallback_hashNtB4_7AHasherNtNtCslXuQP8d5bfj_4core4hash6Hasher6finishB6_:
  212|  7.69k|    fn finish(&self) -> u64 {
  213|  7.69k|        let rot = (self.buffer & 63) as u32;
  214|  7.69k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  7.69k|    }

_RNvMs0_NtCs7h6iRseGexw_5ahash8hash_mapINtB5_8AHashMapyyE3newCs7uao2NoihGb_11equivalence:
   35|  1.92k|    pub fn new() -> Self {
   36|  1.92k|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|  1.92k|    }
_RNvXs3_NtCs7h6iRseGexw_5ahash8hash_mapINtB5_8AHashMapyyENtNtNtCslXuQP8d5bfj_4core3ops5deref5Deref5derefCs7uao2NoihGb_11equivalence:
  197|    962|    fn deref(&self) -> &Self::Target {
  198|    962|        &self.0
  199|    962|    }
_RINvMs2_NtCs7h6iRseGexw_5ahash8hash_mapINtB6_8AHashMapyyE3getyECs7uao2NoihGb_11equivalence:
   79|  14.5k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  14.5k|    where
   81|  14.5k|        K: Borrow<Q>,
   82|  14.5k|        Q: Hash + Eq,
   83|  14.5k|    {
   84|  14.5k|        self.0.get(k)
   85|  14.5k|    }
_RNvMs2_NtCs7h6iRseGexw_5ahash8hash_mapINtB5_8AHashMapyyE6insertCs7uao2NoihGb_11equivalence:
  164|  60.6k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  60.6k|        self.0.insert(k, v)
  166|  60.6k|    }
_RINvMs2_NtCs7h6iRseGexw_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECs7uao2NoihGb_11equivalence:
  186|  11.0k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  11.0k|    where
  188|  11.0k|        K: Borrow<Q>,
  189|  11.0k|        Q: Hash + Eq,
  190|  11.0k|    {
  191|  11.0k|        self.0.remove(k)
  192|  11.0k|    }

_RNvNtCs7h6iRseGexw_5ahash10operations15folded_multiply:
   11|   301k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|   301k|    let result = (s as u128).wrapping_mul(by as u128);
   13|   301k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|   301k|}

_RNvMs1_NtCs7h6iRseGexw_5ahash12random_stateNtB5_11RandomState3newCs7uao2NoihGb_11equivalence:
  196|  1.92k|    pub fn new() -> RandomState {
  197|  1.92k|        let src = Self::get_src();
  198|  1.92k|        let fixed = src.get_fixed_seeds();
  199|  1.92k|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  200|  1.92k|    }
_RNvXs3_NtCs7h6iRseGexw_5ahash12random_stateNtB5_11RandomStateNtNtCslXuQP8d5bfj_4core4hash11BuildHasher12build_hasherCs7uao2NoihGb_11equivalence:
  293|   142k|    fn build_hasher(&self) -> AHasher {
  294|   142k|        AHasher::from_random_state(self)
  295|   142k|    }
_RNCNvMs1_NtCs7h6iRseGexw_5ahash12random_stateNtB7_11RandomState7get_src0Cs7uao2NoihGb_11equivalence:
  184|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvXs2_NtCs7h6iRseGexw_5ahash12random_stateNtB5_11RandomStateNtNtCslXuQP8d5bfj_4core7default7Default7defaultCs7uao2NoihGb_11equivalence:
  256|  1.92k|    fn default() -> Self {
  257|  1.92k|        Self::new()
  258|  1.92k|    }
_RNvMs1_NtCs7h6iRseGexw_5ahash12random_stateNtB5_11RandomState7get_srcCs7uao2NoihGb_11equivalence:
  183|  1.92k|    fn get_src() -> &'static dyn RandomSource {
  184|  1.92k|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  185|  1.92k|    }
_RNvXs_NtCs7h6iRseGexw_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  130|  1.92k|    fn gen_hasher_seed(&self) -> usize {
  131|  1.92k|        let stack = self as *const _ as usize;
  132|  1.92k|        self.counter.fetch_add(stack, Ordering::Relaxed)
  133|  1.92k|    }
_RNvMs1_NtCs7h6iRseGexw_5ahash12random_stateNtB5_11RandomState9from_keys:
  211|  1.92k|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  212|  1.92k|        let &[k0, k1, k2, k3] = a;
  213|  1.92k|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  214|  1.92k|        hasher.write_usize(c);
  215|  1.92k|        let mix = |k: u64| {
  216|       |            let mut h = hasher.clone();
  217|       |            h.write_u64(k);
  218|       |            h.finish()
  219|       |        };
  220|  1.92k|        RandomState {
  221|  1.92k|            k0: mix(b[0]),
  222|  1.92k|            k1: mix(b[1]),
  223|  1.92k|            k2: mix(b[2]),
  224|  1.92k|            k3: mix(b[3]),
  225|  1.92k|        }
  226|  1.92k|    }
_RNvXs_NtCs7h6iRseGexw_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
   96|  1.92k|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
   97|  1.92k|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
   98|  1.92k|
   99|  1.92k|        SEEDS.get_or_init(|| {
  100|       |            let mut result: [u8; 64] = [0; 64];
  101|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|       |            Box::new(result.convert())
  103|  1.92k|        })
  104|  1.92k|    }
_RNCNvXs_NtCs7h6iRseGexw_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
   99|      1|        SEEDS.get_or_init(|| {
  100|      1|            let mut result: [u8; 64] = [0; 64];
  101|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|      1|            Box::new(result.convert())
  103|      1|        })
_RNCNvMs1_NtCs7h6iRseGexw_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  215|  7.69k|        let mix = |k: u64| {
  216|  7.69k|            let mut h = hasher.clone();
  217|  7.69k|            h.write_u64(k);
  218|  7.69k|            h.finish()
  219|  7.69k|        };
_RNvMNtCs7h6iRseGexw_5ahash12random_stateNtB2_19DefaultRandomSource3new:
   80|      1|    fn new() -> DefaultRandomSource {
   81|      1|        DefaultRandomSource {
   82|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   83|      1|        }
   84|      1|    }

_RNvXsF_Cs7icU9HQMbEh_9arbitraryyNtB5_9Arbitrary9size_hintCs7uao2NoihGb_11equivalence:
  302|    962|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    962|                    let n = mem::size_of::<$ty>();
  304|    962|                    (n, Some(n))
  305|    962|                }
_RNvXsD_Cs7icU9HQMbEh_9arbitrarytNtB5_9Arbitrary9size_hintCs7uao2NoihGb_11equivalence:
  302|    962|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    962|                    let n = mem::size_of::<$ty>();
  304|    962|                    (n, Some(n))
  305|    962|                }
_RNvXsC_Cs7icU9HQMbEh_9arbitraryhNtB5_9Arbitrary9size_hintCs7uao2NoihGb_11equivalence:
  302|    962|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    962|                    let n = mem::size_of::<$ty>();
  304|    962|                    (n, Some(n))
  305|    962|                }
_RNvXsE_Cs7icU9HQMbEh_9arbitrarymNtB5_9Arbitrary9size_hintCs7uao2NoihGb_11equivalence:
  302|    962|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    962|                    let n = mem::size_of::<$ty>();
  304|    962|                    (n, Some(n))
  305|    962|                }
_RNvXsa_Cs7icU9HQMbEh_9arbitraryINtNtCsiLX6d1GG2fK_5alloc3vec3VecNtCs7uao2NoihGb_11equivalence9OperationENtB5_9Arbitrary19arbitrary_take_restB12_:
  686|    962|        u.arbitrary_take_rest_iter()?.collect()
  687|    962|    }
_RNvXsa_Cs7icU9HQMbEh_9arbitraryINtNtCsiLX6d1GG2fK_5alloc3vec3VecNtCs7uao2NoihGb_11equivalence9OperationENtB5_9Arbitrary9size_hintB12_:
  690|    963|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    963|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    963|    }
_RNvYhNtCs7icU9HQMbEh_9arbitrary9Arbitrary19arbitrary_take_restCs7uao2NoihGb_11equivalence:
  182|    958|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    958|        Self::arbitrary(&mut u)
  184|    958|    }
_RNvXsH_Cs7icU9HQMbEh_9arbitraryjNtB5_9Arbitrary9size_hintCs7uao2NoihGb_11equivalence:
  302|    963|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    963|                    let n = mem::size_of::<$ty>();
  304|    963|                    (n, Some(n))
  305|    963|                }
_RNvXsE_Cs7icU9HQMbEh_9arbitrarymNtB5_9Arbitrary9arbitrary:
  291|  64.3k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  64.3k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  64.3k|                    u.fill_buffer(&mut buf)?;
  294|  64.3k|                    let mut x: $unsigned = 0;
  295|   257k|                    for i in 0..mem::size_of::<$ty>() {
  296|   257k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   257k|                    }
  298|  64.3k|                    Ok(x as $ty)
  299|  64.3k|                }
_RNvXsC_Cs7icU9HQMbEh_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  64.3k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  64.3k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  64.3k|                    u.fill_buffer(&mut buf)?;
  294|  64.3k|                    let mut x: $unsigned = 0;
  295|  64.3k|                    for i in 0..mem::size_of::<$ty>() {
  296|  64.3k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  64.3k|                    }
  298|  64.3k|                    Ok(x as $ty)
  299|  64.3k|                }
_RNvXsD_Cs7icU9HQMbEh_9arbitrarytNtB5_9Arbitrary9arbitrary:
  291|  64.3k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  64.3k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  64.3k|                    u.fill_buffer(&mut buf)?;
  294|  64.3k|                    let mut x: $unsigned = 0;
  295|   128k|                    for i in 0..mem::size_of::<$ty>() {
  296|   128k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   128k|                    }
  298|  64.3k|                    Ok(x as $ty)
  299|  64.3k|                }
_RNvXsF_Cs7icU9HQMbEh_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  38.7k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  38.7k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  38.7k|                    u.fill_buffer(&mut buf)?;
  294|  38.7k|                    let mut x: $unsigned = 0;
  295|   310k|                    for i in 0..mem::size_of::<$ty>() {
  296|   310k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   310k|                    }
  298|  38.7k|                    Ok(x as $ty)
  299|  38.7k|                }

_RNvNtCs7icU9HQMbEh_9arbitrary9size_hint3andCs7uao2NoihGb_11equivalence:
   26|  5.77k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  5.77k|    let lower = lhs.0 + rhs.0;
   28|  5.77k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  5.77k|    (lower, upper)
   30|  5.77k|}
_RNvNtCs7icU9HQMbEh_9arbitrary9size_hint6or_allCs7uao2NoihGb_11equivalence:
   58|    962|    if let Some(head) = hints.first().copied() {
   59|    962|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    962|}
_RINvNtCs7icU9HQMbEh_9arbitrary9size_hint15recursion_guardNCNvXs1_Cs7uao2NoihGb_11equivalenceNtB11_6MethodNtB4_9Arbitrary9size_hint0EB11_:
   12|    962|pub fn recursion_guard(
   13|    962|    depth: usize,
   14|    962|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    962|) -> (usize, Option<usize>) {
   16|    962|    const MAX_DEPTH: usize = 20;
   17|    962|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    962|        f(depth + 1)
   21|       |    }
   22|    962|}
_RNvNtCs7icU9HQMbEh_9arbitrary9size_hint7and_allCs7uao2NoihGb_11equivalence:
   37|  3.84k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  3.84k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  3.84k|}
_RNCNvNtCs7icU9HQMbEh_9arbitrary9size_hint3and0Cs7uao2NoihGb_11equivalence:
   28|  5.77k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCs7icU9HQMbEh_9arbitrary9size_hint2or0Cs7uao2NoihGb_11equivalence:
   48|  1.92k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCs7icU9HQMbEh_9arbitrary9size_hint2or00Cs7uao2NoihGb_11equivalence:
   48|  1.92k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RINvNtCs7icU9HQMbEh_9arbitrary9size_hint15recursion_guardNCNvXs_Cs7uao2NoihGb_11equivalenceNtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   12|    962|pub fn recursion_guard(
   13|    962|    depth: usize,
   14|    962|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    962|) -> (usize, Option<usize>) {
   16|    962|    const MAX_DEPTH: usize = 20;
   17|    962|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    962|        f(depth + 1)
   21|       |    }
   22|    962|}
_RNvNtCs7icU9HQMbEh_9arbitrary9size_hint2orCs7uao2NoihGb_11equivalence:
   44|  1.92k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.92k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.92k|    let upper = lhs
   47|  1.92k|        .1
   48|  1.92k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.92k|    (lower, upper)
   50|  1.92k|}
_RNCNCNvNtCs7icU9HQMbEh_9arbitrary9size_hint3and00Cs7uao2NoihGb_11equivalence:
   28|  4.81k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs7icU9HQMbEh_9arbitrary12unstructuredNtB2_12Unstructured3lenCs7uao2NoihGb_11equivalence:
  108|    962|    pub fn len(&self) -> usize {
  109|    962|        self.data.len()
  110|    962|    }
_RINvMNtCs7icU9HQMbEh_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCs7uao2NoihGb_11equivalence9OperationEB1s_:
  548|    962|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  549|    962|        self,
  550|    962|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  551|    962|        let (lower, upper) = ElementType::size_hint(0);
  552|    962|
  553|    962|        let elem_size = upper.unwrap_or(lower * 2);
  554|    962|        let elem_size = std::cmp::max(1, elem_size);
  555|    962|        let size = self.len() / elem_size;
  556|    962|        Ok(ArbitraryTakeRestIter {
  557|    962|            size,
  558|    962|            u: Some(self),
  559|    962|            _marker: PhantomData,
  560|    962|        })
  561|    962|    }
_RNvXs0_NtCs7icU9HQMbEh_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCs7uao2NoihGb_11equivalence9OperationENtNtNtNtCslXuQP8d5bfj_4core4iter6traits8iterator8Iterator4nextB1e_:
  686|  65.3k|        if let Some(mut u) = self.u.take() {
  687|  64.3k|            if self.size == 1 {
  688|    958|                Some(Arbitrary::arbitrary_take_rest(u))
  689|  63.3k|            } else if self.size == 0 {
  690|      4|                None
  691|       |            } else {
  692|  63.3k|                self.size -= 1;
  693|  63.3k|                let ret = Arbitrary::arbitrary(&mut u);
  694|  63.3k|                self.u = Some(u);
  695|  63.3k|                Some(ret)
  696|       |            }
  697|       |        } else {
  698|    958|            None
  699|       |        }
  700|  65.3k|    }
_RNvMNtCs7icU9HQMbEh_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    962|    pub fn new(data: &'a [u8]) -> Self {
   86|    962|        Unstructured { data }
   87|    962|    }
_RNvMNtCs7icU9HQMbEh_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|   231k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|   231k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|   231k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|   231k|        for byte in buffer[n..].iter_mut() {
  453|      0|            *byte = 0;
  454|      0|        }
  455|   231k|        self.data = &self.data[n..];
  456|   231k|        Ok(())
  457|   231k|    }

_RINvNvNtCs2QYh44H8coo_12blake2b_simd4avx214compress_block9as_arraysyEB6_:
  240|   212k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|   212k|                let mut p = a.as_mut_ptr();
  242|   212k|                ( $( {
  243|   212k|                    let aref = &mut *(p as *mut [T; $len]);
  244|   212k|                    p = p.offset($len as isize);
  245|   212k|                    aref
  246|   212k|                } ),* )
  247|   212k|            }
_RINvNvMCs2QYh44H8coo_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|   183k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   183k|                let mut p = a.as_ptr();
  145|   183k|                ( $( {
  146|   183k|                    let aref = &*(p as *const [T; $len]);
  147|   183k|                    p = p.offset($len as isize);
  148|   183k|                    aref
  149|   183k|                } ),* )
  150|   183k|            }
_RINvNvNtCs2QYh44H8coo_12blake2b_simd4avx214compress_blocks_9as_arraysyEB6_:
  143|   212k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   212k|                let mut p = a.as_ptr();
  145|   212k|                ( $( {
  146|   212k|                    let aref = &*(p as *const [T; $len]);
  147|   212k|                    p = p.offset($len as isize);
  148|   212k|                    aref
  149|   212k|                } ),* )
  150|   212k|            }
_RINvNvCs2QYh44H8coo_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|   183k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|   183k|                let mut p = a.as_mut_ptr();
  242|   183k|                ( $( {
  243|   183k|                    let aref = &mut *(p as *mut [T; $len]);
  244|   183k|                    p = p.offset($len as isize);
  245|   183k|                    aref
  246|   183k|                } ),* )
  247|   183k|            }
_RINvNvNtCs2QYh44H8coo_12blake2b_simd4avx214compress_blocks0_9as_arrayshEB6_:
  143|   212k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   212k|                let mut p = a.as_ptr();
  145|   212k|                ( $( {
  146|   212k|                    let aref = &*(p as *const [T; $len]);
  147|   212k|                    p = p.offset($len as isize);
  148|   212k|                    aref
  149|   212k|                } ),* )
  150|   212k|            }
_RINvNvNtCs2QYh44H8coo_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  23.4k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  23.4k|                &*(slice.as_ptr() as *const [_; $len])
   63|  23.4k|            }
_RINvNvMCs2QYh44H8coo_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|   183k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   183k|                let mut p = a.as_ptr();
  145|   183k|                ( $( {
  146|   183k|                    let aref = &*(p as *const [T; $len]);
  147|   183k|                    p = p.offset($len as isize);
  148|   183k|                    aref
  149|   183k|                } ),* )
  150|   183k|            }

_RNvNtCs2QYh44H8coo_12blake2b_simd4avx214compress1_loop:
  427|   206k|pub unsafe fn compress1_loop(
  428|   206k|    input: &[u8],
  429|   206k|    words: &mut [Word; 8],
  430|   206k|    mut count: Count,
  431|   206k|    last_node: LastNode,
  432|   206k|    finalize: Finalize,
  433|   206k|    stride: Stride,
  434|   206k|) {
  435|   206k|    input_debug_asserts(input, finalize);
  436|   206k|
  437|   206k|    let mut local_words = *words;
  438|   206k|
  439|   206k|    let mut fin_offset = input.len().saturating_sub(1);
  440|   206k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  441|   206k|    let mut buf = [0; BLOCKBYTES];
  442|   206k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  443|   206k|    let fin_last_block = flag_word(finalize.yes());
  444|   206k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  445|       |
  446|   206k|    let mut offset = 0;
  447|       |    loop {
  448|       |        let block;
  449|       |        let count_delta;
  450|       |        let last_block;
  451|       |        let last_node;
  452|   212k|        if offset == fin_offset {
  453|   206k|            block = fin_block;
  454|   206k|            count_delta = fin_len;
  455|   206k|            last_block = fin_last_block;
  456|   206k|            last_node = fin_last_node;
  457|   206k|        } else {
  458|  6.15k|            // This unsafe cast avoids bounds checks. There's guaranteed to be
  459|  6.15k|            // enough input because `offset < fin_offset`.
  460|  6.15k|            block = &*(input.as_ptr().add(offset) as *const [u8; BLOCKBYTES]);
  461|  6.15k|            count_delta = BLOCKBYTES;
  462|  6.15k|            last_block = flag_word(false);
  463|  6.15k|            last_node = flag_word(false);
  464|  6.15k|        };
  465|       |
  466|   212k|        count = count.wrapping_add(count_delta as Count);
  467|   212k|        compress_block(block, &mut local_words, count, last_block, last_node);
  468|   212k|
  469|   212k|        // Check for termination before bumping the offset, to avoid overflow.
  470|   212k|        if offset == fin_offset {
  471|   206k|            break;
  472|  6.15k|        }
  473|  6.15k|
  474|  6.15k|        offset += stride.padded_blockbytes();
  475|       |    }
  476|       |
  477|   206k|    *words = local_words;
  478|   206k|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx214compress_block:
  146|   212k|unsafe fn compress_block(
  147|   212k|    block: &[u8; BLOCKBYTES],
  148|   212k|    words: &mut [Word; 8],
  149|   212k|    count: Count,
  150|   212k|    last_block: Word,
  151|   212k|    last_node: Word,
  152|   212k|) {
  153|   212k|    let (words_low, words_high) = mut_array_refs!(words, DEGREE, DEGREE);
  154|   212k|    let (iv_low, iv_high) = array_refs!(&IV, DEGREE, DEGREE);
  155|   212k|    let mut a = loadu(words_low);
  156|   212k|    let mut b = loadu(words_high);
  157|   212k|    let mut c = loadu(iv_low);
  158|   212k|    let flags = set4(count_low(count), count_high(count), last_block, last_node);
  159|   212k|    let mut d = xor(loadu(iv_high), flags);
  160|   212k|
  161|   212k|    let msg_chunks = array_refs!(block, 16, 16, 16, 16, 16, 16, 16, 16);
  162|   212k|    let m0 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.0));
  163|   212k|    let m1 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.1));
  164|   212k|    let m2 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.2));
  165|   212k|    let m3 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.3));
  166|   212k|    let m4 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.4));
  167|   212k|    let m5 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.5));
  168|   212k|    let m6 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.6));
  169|   212k|    let m7 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.7));
  170|   212k|
  171|   212k|    let iv0 = a;
  172|   212k|    let iv1 = b;
  173|   212k|    let mut t0;
  174|   212k|    let mut t1;
  175|   212k|    let mut b0;
  176|   212k|
  177|   212k|    // round 1
  178|   212k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  179|   212k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  180|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  181|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  182|   212k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  183|   212k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  184|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  185|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  186|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  187|   212k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  188|   212k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  189|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  190|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  191|   212k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  192|   212k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  193|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  194|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  195|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  196|   212k|
  197|   212k|    // round 2
  198|   212k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  199|   212k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  200|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  201|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  202|   212k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  203|   212k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  204|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  205|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  206|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  207|   212k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  208|   212k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  209|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  210|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  211|   212k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  212|   212k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  213|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  214|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  215|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  216|   212k|
  217|   212k|    // round 3
  218|   212k|    t0 = _mm256_alignr_epi8(m6, m5, 8);
  219|   212k|    t1 = _mm256_unpackhi_epi64(m2, m7);
  220|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  221|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  222|   212k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  223|   212k|    t1 = _mm256_blend_epi32(m6, m1, 0x33);
  224|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  225|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  226|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  227|   212k|    t0 = _mm256_alignr_epi8(m5, m4, 8);
  228|   212k|    t1 = _mm256_unpackhi_epi64(m1, m3);
  229|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  230|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  231|   212k|    t0 = _mm256_unpacklo_epi64(m2, m7);
  232|   212k|    t1 = _mm256_blend_epi32(m0, m3, 0x33);
  233|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  234|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  235|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  236|   212k|
  237|   212k|    // round 4
  238|   212k|    t0 = _mm256_unpackhi_epi64(m3, m1);
  239|   212k|    t1 = _mm256_unpackhi_epi64(m6, m5);
  240|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  241|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  242|   212k|    t0 = _mm256_unpackhi_epi64(m4, m0);
  243|   212k|    t1 = _mm256_unpacklo_epi64(m6, m7);
  244|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  245|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  246|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  247|   212k|    t0 = _mm256_alignr_epi8(m1, m7, 8);
  248|   212k|    t1 = _mm256_shuffle_epi32(m2, _MM_SHUFFLE!(1, 0, 3, 2));
  249|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  250|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  251|   212k|    t0 = _mm256_unpacklo_epi64(m4, m3);
  252|   212k|    t1 = _mm256_unpacklo_epi64(m5, m0);
  253|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  254|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  255|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  256|   212k|
  257|   212k|    // round 5
  258|   212k|    t0 = _mm256_unpackhi_epi64(m4, m2);
  259|   212k|    t1 = _mm256_unpacklo_epi64(m1, m5);
  260|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  261|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  262|   212k|    t0 = _mm256_blend_epi32(m3, m0, 0x33);
  263|   212k|    t1 = _mm256_blend_epi32(m7, m2, 0x33);
  264|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  265|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  266|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  267|   212k|    t0 = _mm256_alignr_epi8(m7, m1, 8);
  268|   212k|    t1 = _mm256_alignr_epi8(m3, m5, 8);
  269|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  270|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  271|   212k|    t0 = _mm256_unpackhi_epi64(m6, m0);
  272|   212k|    t1 = _mm256_unpacklo_epi64(m6, m4);
  273|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  274|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  275|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  276|   212k|
  277|   212k|    // round 6
  278|   212k|    t0 = _mm256_unpacklo_epi64(m1, m3);
  279|   212k|    t1 = _mm256_unpacklo_epi64(m0, m4);
  280|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  281|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  282|   212k|    t0 = _mm256_unpacklo_epi64(m6, m5);
  283|   212k|    t1 = _mm256_unpackhi_epi64(m5, m1);
  284|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  285|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  286|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  287|   212k|    t0 = _mm256_alignr_epi8(m2, m0, 8);
  288|   212k|    t1 = _mm256_unpackhi_epi64(m3, m7);
  289|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  290|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  291|   212k|    t0 = _mm256_unpackhi_epi64(m4, m6);
  292|   212k|    t1 = _mm256_alignr_epi8(m7, m2, 8);
  293|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  294|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  295|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  296|   212k|
  297|   212k|    // round 7
  298|   212k|    t0 = _mm256_blend_epi32(m0, m6, 0x33);
  299|   212k|    t1 = _mm256_unpacklo_epi64(m7, m2);
  300|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  301|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  302|   212k|    t0 = _mm256_unpackhi_epi64(m2, m7);
  303|   212k|    t1 = _mm256_alignr_epi8(m5, m6, 8);
  304|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  305|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  306|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  307|   212k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  308|   212k|    t1 = _mm256_blend_epi32(m4, m3, 0x33);
  309|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  310|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  311|   212k|    t0 = _mm256_unpackhi_epi64(m5, m3);
  312|   212k|    t1 = _mm256_shuffle_epi32(m1, _MM_SHUFFLE!(1, 0, 3, 2));
  313|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  314|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  315|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  316|   212k|
  317|   212k|    // round 8
  318|   212k|    t0 = _mm256_unpackhi_epi64(m6, m3);
  319|   212k|    t1 = _mm256_blend_epi32(m1, m6, 0x33);
  320|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  321|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  322|   212k|    t0 = _mm256_alignr_epi8(m7, m5, 8);
  323|   212k|    t1 = _mm256_unpackhi_epi64(m0, m4);
  324|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  325|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  326|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  327|   212k|    t0 = _mm256_blend_epi32(m2, m1, 0x33);
  328|   212k|    t1 = _mm256_alignr_epi8(m4, m7, 8);
  329|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  330|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  331|   212k|    t0 = _mm256_unpacklo_epi64(m5, m0);
  332|   212k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  333|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  334|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  335|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  336|   212k|
  337|   212k|    // round 9
  338|   212k|    t0 = _mm256_unpacklo_epi64(m3, m7);
  339|   212k|    t1 = _mm256_alignr_epi8(m0, m5, 8);
  340|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  341|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  342|   212k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  343|   212k|    t1 = _mm256_alignr_epi8(m4, m1, 8);
  344|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  345|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  346|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  347|   212k|    t0 = _mm256_unpacklo_epi64(m5, m6);
  348|   212k|    t1 = _mm256_unpackhi_epi64(m6, m0);
  349|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  350|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  351|   212k|    t0 = _mm256_alignr_epi8(m1, m2, 8);
  352|   212k|    t1 = _mm256_alignr_epi8(m2, m3, 8);
  353|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  354|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  355|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  356|   212k|
  357|   212k|    // round 10
  358|   212k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  359|   212k|    t1 = _mm256_unpackhi_epi64(m3, m0);
  360|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  361|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  362|   212k|    t0 = _mm256_unpacklo_epi64(m1, m2);
  363|   212k|    t1 = _mm256_blend_epi32(m2, m3, 0x33);
  364|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  365|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  366|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  367|   212k|    t0 = _mm256_unpackhi_epi64(m6, m7);
  368|   212k|    t1 = _mm256_unpackhi_epi64(m4, m1);
  369|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  370|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  371|   212k|    t0 = _mm256_blend_epi32(m5, m0, 0x33);
  372|   212k|    t1 = _mm256_unpacklo_epi64(m7, m6);
  373|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  374|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  375|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  376|   212k|
  377|   212k|    // round 11
  378|   212k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  379|   212k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  380|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  381|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  382|   212k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  383|   212k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  384|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  385|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  386|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  387|   212k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  388|   212k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  389|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  390|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  391|   212k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  392|   212k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  393|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  394|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  395|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  396|   212k|
  397|   212k|    // round 12
  398|   212k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  399|   212k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  400|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  401|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  402|   212k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  403|   212k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  404|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  405|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  406|   212k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  407|   212k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  408|   212k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  409|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  410|   212k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  411|   212k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  412|   212k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  413|   212k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  414|   212k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  415|   212k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  416|   212k|
  417|   212k|    a = xor(a, c);
  418|   212k|    b = xor(b, d);
  419|   212k|    a = xor(a, iv0);
  420|   212k|    b = xor(b, iv1);
  421|   212k|
  422|   212k|    storeu(a, words_low);
  423|   212k|    storeu(b, words_high);
  424|   212k|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx23add:
   35|  30.6M|unsafe fn add(a: __m256i, b: __m256i) -> __m256i {
   36|  30.6M|    _mm256_add_epi64(a, b)
   37|  30.6M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx213undiagonalize:
  139|  2.55M|unsafe fn undiagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  140|  2.55M|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(0, 3, 2, 1));
  141|  2.55M|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  142|  2.55M|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(2, 1, 0, 3));
  143|  2.55M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx25loadu:
   18|   851k|unsafe fn loadu(src: *const [Word; DEGREE]) -> __m256i {
   19|   851k|    // This is an unaligned load, so the pointer cast is allowed.
   20|   851k|    _mm256_loadu_si256(src as *const __m256i)
   21|   851k|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx25rot24:
   92|  5.11M|unsafe fn rot24(x: __m256i) -> __m256i {
   93|  5.11M|    _mm256_or_si256(_mm256_srli_epi64(x, 24), _mm256_slli_epi64(x, 64 - 24))
   94|  5.11M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx211diagonalize:
  132|  2.55M|unsafe fn diagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  133|  2.55M|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(2, 1, 0, 3));
  134|  2.55M|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  135|  2.55M|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(0, 3, 2, 1));
  136|  2.55M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx22g2:
  118|  5.11M|unsafe fn g2(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  119|  5.11M|    *a = add(*a, *m);
  120|  5.11M|    *a = add(*a, *b);
  121|  5.11M|    *d = xor(*d, *a);
  122|  5.11M|    *d = rot16(*d);
  123|  5.11M|    *c = add(*c, *d);
  124|  5.11M|    *b = xor(*b, *c);
  125|  5.11M|    *b = rot63(*b);
  126|  5.11M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx26storeu:
   24|   425k|unsafe fn storeu(src: __m256i, dest: *mut [Word; DEGREE]) {
   25|   425k|    // This is an unaligned store, so the pointer cast is allowed.
   26|   425k|    _mm256_storeu_si256(dest as *mut __m256i, src)
   27|   425k|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx23xor:
   56|  21.5M|unsafe fn xor(a: __m256i, b: __m256i) -> __m256i {
   57|  21.5M|    _mm256_xor_si256(a, b)
   58|  21.5M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx25rot16:
   97|  5.11M|unsafe fn rot16(x: __m256i) -> __m256i {
   98|  5.11M|    _mm256_or_si256(_mm256_srli_epi64(x, 16), _mm256_slli_epi64(x, 64 - 16))
   99|  5.11M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx24set4:
   66|   212k|unsafe fn set4(a: u64, b: u64, c: u64, d: u64) -> __m256i {
   67|   212k|    _mm256_setr_epi64x(a as i64, b as i64, c as i64, d as i64)
   68|   212k|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx22g1:
  107|  5.11M|unsafe fn g1(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  108|  5.11M|    *a = add(*a, *m);
  109|  5.11M|    *a = add(*a, *b);
  110|  5.11M|    *d = xor(*d, *a);
  111|  5.11M|    *d = rot32(*d);
  112|  5.11M|    *c = add(*c, *d);
  113|  5.11M|    *b = xor(*b, *c);
  114|  5.11M|    *b = rot24(*b);
  115|  5.11M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx29loadu_128:
   30|  1.70M|unsafe fn loadu_128(mem_addr: &[u8; 16]) -> __m128i {
   31|  1.70M|    _mm_loadu_si128(mem_addr.as_ptr() as *const __m128i)
   32|  1.70M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx25rot32:
   87|  5.11M|unsafe fn rot32(x: __m256i) -> __m256i {
   88|  5.11M|    _mm256_or_si256(_mm256_srli_epi64(x, 32), _mm256_slli_epi64(x, 64 - 32))
   89|  5.11M|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4avx25rot63:
  102|  5.11M|unsafe fn rot63(x: __m256i) -> __m256i {
  103|  5.11M|    _mm256_or_si256(_mm256_srli_epi64(x, 63), _mm256_slli_epi64(x, 64 - 63))
  104|  5.11M|}

_RNvNtCs2QYh44H8coo_12blake2b_simd4guts19input_debug_asserts:
  252|   206k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|   206k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|   206k|    // even multiple of the block size.
  255|   206k|    if !finalize.yes() {
  256|  23.4k|        debug_assert!(!input.is_empty());
  257|  23.4k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|   183k|    }
  259|   206k|}
_RNvMs2_NtCs2QYh44H8coo_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytes:
  196|   236k|    pub fn padded_blockbytes(&self) -> usize {
  197|   236k|        match self {
  198|   236k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|   236k|    }
_RNvNtCs2QYh44H8coo_12blake2b_simd4guts11final_block:
  232|   206k|pub fn final_block<'a>(
  233|   206k|    input: &'a [u8],
  234|   206k|    offset: usize,
  235|   206k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|   206k|    stride: Stride,
  237|   206k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|   206k|    let capped_offset = cmp::min(offset, input.len());
  239|   206k|    let offset_slice = &input[capped_offset..];
  240|   206k|    if offset_slice.len() >= BLOCKBYTES {
  241|  23.4k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  23.4k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  23.4k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|   183k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|   183k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|   206k|}
_RNvNtCs2QYh44H8coo_12blake2b_simd4guts9flag_word:
  217|   425k|pub(crate) fn flag_word(flag: bool) -> Word {
  218|   425k|    if flag {
  219|   183k|        !0
  220|       |    } else {
  221|   242k|        0
  222|       |    }
  223|   425k|}
_RNvMs1_NtCs2QYh44H8coo_12blake2b_simd4gutsNtB5_8LastNode3yes:
  181|   183k|    pub fn yes(&self) -> bool {
  182|   183k|        match self {
  183|      0|            LastNode::Yes => true,
  184|   183k|            LastNode::No => false,
  185|       |        }
  186|   183k|    }
_RNvNtCs2QYh44H8coo_12blake2b_simd4guts9count_low:
  204|   212k|pub(crate) fn count_low(count: Count) -> Word {
  205|   212k|    count as Word
  206|   212k|}
_RNvMNtCs2QYh44H8coo_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|   206k|    pub fn compress1_loop(
   97|   206k|        &self,
   98|   206k|        input: &[u8],
   99|   206k|        words: &mut [Word; 8],
  100|   206k|        count: Count,
  101|   206k|        last_node: LastNode,
  102|   206k|        finalize: Finalize,
  103|   206k|        stride: Stride,
  104|   206k|    ) {
  105|   206k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|   206k|            Platform::AVX2 => unsafe {
  108|   206k|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|   206k|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|      0|            _ => {
  113|      0|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|      0|            }
  115|       |        }
  116|   206k|    }
_RNvMs0_NtCs2QYh44H8coo_12blake2b_simd4gutsNtB5_8Finalize3yes:
  165|   620k|    pub fn yes(&self) -> bool {
  166|   620k|        match self {
  167|   550k|            Finalize::Yes => true,
  168|  70.2k|            Finalize::No => false,
  169|       |        }
  170|   620k|    }
_RNvNtCs2QYh44H8coo_12blake2b_simd4guts10count_high:
  208|   212k|pub(crate) fn count_high(count: Count) -> Word {
  209|   212k|    (count >> 8 * size_of::<Word>()) as Word
  210|   212k|}
_RNvMNtCs2QYh44H8coo_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supported:
   70|   183k|    pub fn avx2_if_supported() -> Option<Self> {
   71|       |        // Check whether AVX2 support is assumed by the build.
   72|       |        #[cfg(target_feature = "avx2")]
   73|       |        {
   74|       |            return Some(Implementation(Platform::AVX2));
   75|       |        }
   76|       |        // Otherwise dynamically check for support if we can.
   77|       |        #[cfg(feature = "std")]
   78|       |        {
   79|      0|            if is_x86_feature_detected!("avx2") {
   80|   183k|                return Some(Implementation(Platform::AVX2));
   81|      0|            }
   82|      0|        }
   83|      0|        None
   84|   183k|    }
_RNvMNtCs2QYh44H8coo_12blake2b_simd4gutsNtB2_14Implementation6detect:
   33|   183k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|   183k|                return avx2_impl;
   35|      0|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|      0|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|      0|            }
   42|      0|        }
   43|      0|        Self::portable()
   44|   183k|    }

_RNvMCs2QYh44H8coo_12blake2b_simdNtB2_6Params3newCsdMka0SqTmHA_9multihash:
  165|   183k|    pub fn new() -> Self {
  166|   183k|        Self {
  167|   183k|            hash_length: OUTBYTES as u8,
  168|   183k|            key_length: 0,
  169|   183k|            key_block: [0; BLOCKBYTES],
  170|   183k|            salt: [0; SALTBYTES],
  171|   183k|            personal: [0; PERSONALBYTES],
  172|   183k|            // NOTE: fanout and max_depth don't default to zero!
  173|   183k|            fanout: 1,
  174|   183k|            max_depth: 1,
  175|   183k|            max_leaf_length: 0,
  176|   183k|            node_offset: 0,
  177|   183k|            node_depth: 0,
  178|   183k|            inner_hash_length: 0,
  179|   183k|            last_node: guts::LastNode::No,
  180|   183k|            implementation: guts::Implementation::detect(),
  181|   183k|        }
  182|   183k|    }
_RNvMCs2QYh44H8coo_12blake2b_simdNtB2_6Params11hash_lengthCsdMka0SqTmHA_9multihash:
  238|   183k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|   183k|        assert!(
  240|   183k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|   183k|        self.hash_length = length as u8;
  245|   183k|        self
  246|   183k|    }
_RNvMs1_Cs2QYh44H8coo_12blake2b_simdNtB5_5State11with_params:
  406|   183k|    fn with_params(params: &Params) -> Self {
  407|   183k|        let mut state = Self {
  408|   183k|            words: params.to_words(),
  409|   183k|            count: 0,
  410|   183k|            buf: [0; BLOCKBYTES],
  411|   183k|            buflen: 0,
  412|   183k|            last_node: params.last_node,
  413|   183k|            hash_length: params.hash_length,
  414|   183k|            implementation: params.implementation,
  415|   183k|            is_keyed: params.key_length > 0,
  416|   183k|        };
  417|   183k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|   183k|        }
  421|   183k|        state
  422|   183k|    }
_RNvMs1_Cs2QYh44H8coo_12blake2b_simdNtB5_5State6update:
  453|   183k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|   183k|        // If we have a partial buffer, try to complete it.
  455|   183k|        self.compress_buffer_if_possible(&mut input);
  456|   183k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|   183k|        // above), compress blocks directly without copying.
  458|   183k|        let mut end = input.len().saturating_sub(1);
  459|   183k|        end -= end % BLOCKBYTES;
  460|   183k|        if end > 0 {
  461|  23.4k|            self.implementation.compress1_loop(
  462|  23.4k|                &input[..end],
  463|  23.4k|                &mut self.words,
  464|  23.4k|                self.count,
  465|  23.4k|                self.last_node,
  466|  23.4k|                guts::Finalize::No,
  467|  23.4k|                guts::Stride::Serial,
  468|  23.4k|            );
  469|  23.4k|            self.count = self.count.wrapping_add(end as Count);
  470|  23.4k|            input = &input[end..];
  471|   159k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|   183k|        self.fill_buf(&mut input);
  477|   183k|        self
  478|   183k|    }
_RNvMCs2QYh44H8coo_12blake2b_simdNtB2_6Params8to_words:
  185|   183k|    fn to_words(&self) -> [Word; 8] {
  186|   183k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|   183k|        let (personal_left, personal_right) =
  188|   183k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|   183k|        [
  190|   183k|            IV[0]
  191|   183k|                ^ self.hash_length as u64
  192|   183k|                ^ (self.key_length as u64) << 8
  193|   183k|                ^ (self.fanout as u64) << 16
  194|   183k|                ^ (self.max_depth as u64) << 24
  195|   183k|                ^ (self.max_leaf_length as u64) << 32,
  196|   183k|            IV[1] ^ self.node_offset,
  197|   183k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|   183k|            IV[3],
  199|   183k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|   183k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|   183k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|   183k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|   183k|        ]
  204|   183k|    }
_RNvMs1_Cs2QYh44H8coo_12blake2b_simdNtB5_5State8fill_buf:
  424|   183k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|   183k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|   183k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|   183k|        self.buflen += take as u8;
  428|   183k|        *input = &input[take..];
  429|   183k|    }
_RNvMCs2QYh44H8coo_12blake2b_simdNtB2_6Params8to_state:
  230|   183k|    pub fn to_state(&self) -> State {
  231|   183k|        State::with_params(self)
  232|   183k|    }
_RNvCs2QYh44H8coo_12blake2b_simd20state_words_to_bytes:
  529|   183k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|   183k|    let mut bytes = [0; OUTBYTES];
  531|   183k|    {
  532|   183k|        const W: usize = size_of::<Word>();
  533|   183k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|   183k|        *refs.0 = state_words[0].to_le_bytes();
  535|   183k|        *refs.1 = state_words[1].to_le_bytes();
  536|   183k|        *refs.2 = state_words[2].to_le_bytes();
  537|   183k|        *refs.3 = state_words[3].to_le_bytes();
  538|   183k|        *refs.4 = state_words[4].to_le_bytes();
  539|   183k|        *refs.5 = state_words[5].to_le_bytes();
  540|   183k|        *refs.6 = state_words[6].to_le_bytes();
  541|   183k|        *refs.7 = state_words[7].to_le_bytes();
  542|   183k|    }
  543|   183k|    bytes
  544|   183k|}
_RNvMs5_Cs2QYh44H8coo_12blake2b_simdNtB5_4Hash8as_bytes:
  589|   183k|    pub fn as_bytes(&self) -> &[u8] {
  590|   183k|        &self.bytes[..self.len as usize]
  591|   183k|    }
_RNvMs1_Cs2QYh44H8coo_12blake2b_simdNtB5_5State8finalize:
  482|   183k|    pub fn finalize(&self) -> Hash {
  483|   183k|        let mut words_copy = self.words;
  484|   183k|        self.implementation.compress1_loop(
  485|   183k|            &self.buf[..self.buflen as usize],
  486|   183k|            &mut words_copy,
  487|   183k|            self.count,
  488|   183k|            self.last_node,
  489|   183k|            guts::Finalize::Yes,
  490|   183k|            guts::Stride::Serial,
  491|   183k|        );
  492|   183k|        Hash {
  493|   183k|            bytes: state_words_to_bytes(&words_copy),
  494|   183k|            len: self.hash_length,
  495|   183k|        }
  496|   183k|    }
_RNvMs1_Cs2QYh44H8coo_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|   183k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|   183k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|   183k|        }
  450|   183k|    }

_RNvNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec8if_majorCs7uao2NoihGb_11equivalence:
  890|   171k|pub fn if_major(byte: u8) -> u8 {
  891|   171k|    byte >> 5
  892|   171k|}
_RINvXss_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  252|  32.6k|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|  32.6k|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|  32.6k|                }
_RINvYNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
   73|   287k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|   287k|        let byte = pull_one(reader)?;
   75|   287k|        Self::decode_with(byte, reader)
   76|   287k|    }
_RINvXsr_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decmNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  252|  27.6k|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|  27.6k|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|  27.6k|                }
_RINvXs5_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsiLX6d1GG2fK_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  506|   262k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|   262k|        use crate::alloc::borrow::Cow;
  508|   262k|
  509|   262k|        let mut buf = Vec::new();
  510|   262k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|   262k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|      0|            Cow::Owned(buf)
  514|       |        }))
  515|   262k|    }
_RINvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decNtB6_7TypeNum10decode_u32NtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  204|  27.6k|    fn decode_u32<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u32, Error<R::Error>> {
  205|  27.6k|        match self.byte & self.major_limit {
  206|  27.6k|            x @ 0 ..= 0x17 => Ok(x.into()),
  207|      0|            0x18 => pull_one(reader).map(Into::into),
  208|       |            0x19 => {
  209|      0|                let mut buf = [0; 2];
  210|      0|                pull_exact(reader, &mut buf)?;
  211|      0|                Ok(u16::from_be_bytes(buf).into())
  212|       |            },
  213|       |            0x1a => {
  214|      0|                let mut buf = [0; 4];
  215|      0|                pull_exact(reader, &mut buf)?;
  216|      0|                Ok(u32::from_be_bytes(buf))
  217|       |            }
  218|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  219|       |        }
  220|  27.6k|    }
_RINvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  223|   754k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|   754k|        match self.byte & self.major_limit {
  225|   754k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|   348k|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|  1.04k|                let mut buf = [0; 2];
  229|  1.04k|                pull_exact(reader, &mut buf)?;
  230|  1.04k|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|  1.32k|                let mut buf = [0; 4];
  234|  1.32k|                pull_exact(reader, &mut buf)?;
  235|  1.32k|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|  13.9k|                let mut buf = [0; 8];
  239|  13.9k|                pull_exact(reader, &mut buf)?;
  240|  13.9k|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|   754k|    }
_RINvYmNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
   73|  27.6k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  27.6k|        let byte = pull_one(reader)?;
   75|  27.6k|        Self::decode_with(byte, reader)
   76|  27.6k|    }
_RNvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decNtB5_7TypeNum3newCs7uao2NoihGb_11equivalence:
  175|   782k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|   782k|        TypeNum { major_limit, byte }
  177|   782k|    }
_RINvYNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
   73|   171k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|   171k|        let byte = pull_one(reader)?;
   75|   171k|        Self::decode_with(byte, reader)
   76|   171k|    }
_RINvXsc_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  611|   287k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|   287k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|   287k|    }
_RINvNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  136|  16.3k|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  32.6k|    while !buf.is_empty() {
  138|  16.3k|        let readbuf = reader.fill(buf.len())?;
  139|  16.3k|        let readbuf = readbuf.as_ref();
  140|  16.3k|
  141|  16.3k|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|  16.3k|        }
  144|  16.3k|
  145|  16.3k|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|  16.3k|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|  16.3k|        reader.advance(len);
  148|  16.3k|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|  16.3k|    Ok(())
  152|  16.3k|}
_RINvNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  427|   262k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|   262k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|   262k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|   262k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|   262k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|   262k|            if buf.len() >= len {
  436|   262k|                reader.advance(len);
  437|   262k|                return Ok(Some(&buf[..len]));
  438|      0|            }
  439|      0|        }
  440|       |
  441|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|      0|        while len != 0 {
  444|      0|            let readbuf = reader.fill(len)?;
  445|      0|            let readbuf = readbuf.as_ref();
  446|      0|
  447|      0|            if readbuf.is_empty() {
  448|      0|                return Err(Error::Eof);
  449|      0|            }
  450|      0|
  451|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      0|
  453|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      0|            reader.advance(readlen);
  455|      0|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|      0|            let byte = pull_one(reader)?;
  463|       |
  464|      0|            if byte == marker::BREAK {
  465|      0|                break
  466|      0|            }
  467|      0|
  468|      0|            if !reader.step_in() {
  469|      0|                return Err(Error::DepthLimit);
  470|      0|            }
  471|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|      0|            let reader = &mut *reader;
  473|       |
  474|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|      0|                buf.extend_from_slice(longbuf);
  476|      0|            }
  477|       |        }
  478|       |
  479|      0|        Ok(None)
  480|       |    }
  481|   262k|}
_RNvMNtNtCs9gAJ6Qj8foR_7cbor4ii4core3decNtB2_9Reference6as_refCs7uao2NoihGb_11equivalence:
   81|  1.14M|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  1.14M|        match self {
   83|  1.14M|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  1.14M|    }
_RINvYyNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
   73|  32.6k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  32.6k|        let byte = pull_one(reader)?;
   75|  32.6k|        Self::decode_with(byte, reader)
   76|  32.6k|    }
_RINvXsg_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  703|   171k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|   171k|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|   171k|    }
_RINvNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  125|  1.13M|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  1.13M|    let b = reader.fill(1)?
  127|  1.13M|        .as_ref()
  128|  1.13M|        .get(0)
  129|  1.13M|        .copied()
  130|  1.13M|        .ok_or(Error::Eof)?;
  131|  1.13M|    reader.advance(1);
  132|  1.13M|    Ok(b)
  133|  1.13M|}
_RINvNtNtCs9gAJ6Qj8foR_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
  595|   549k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|   549k|    -> Result<Option<usize>, Error<R::Error>>
  597|   549k|{
  598|   549k|    if byte != (marker::START | (major << 5)) {
  599|   549k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|   549k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|   549k|        Ok(Some(len))
  602|       |    } else {
  603|      0|        Ok(None)
  604|       |    }
  605|   549k|}
_RINvYINtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5types5BytesINtNtCsiLX6d1GG2fK_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs7uao2NoihGb_11equivalence:
   73|   262k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|   262k|        let byte = pull_one(reader)?;
   75|   262k|        Self::decode_with(byte, reader)
   76|   262k|    }

_RNvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB5_7TypeNummE3newCs7uao2NoihGb_11equivalence:
   52|  1.29M|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.29M|        TypeNum { type_, value }
   54|  1.29M|    }
_RINvXsu_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
  159|  73.1k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|  73.1k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|  73.1k|                }
_RINvXs2_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
   70|  1.29M|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  1.29M|        match u8::try_from(self.value) {
   72|  1.29M|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|  1.90k|                let [x0, x1] = self.value.to_be_bytes();
   75|  1.90k|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  1.29M|        Ok(())
   79|  1.29M|    }
_RINvXsi_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
  317|   244k|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|   244k|        self.1.encode(writer)
  319|   244k|    }
_RNvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB5_7TypeNumtE3newCs7uao2NoihGb_11equivalence:
   52|  1.29M|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.29M|        TypeNum { type_, value }
   54|  1.29M|    }
_RINvXs3_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
   84|  1.29M|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  1.29M|        match u16::try_from(self.value) {
   86|  1.29M|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|  3.91k|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|  3.91k|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  1.29M|        Ok(())
   93|  1.29M|    }
_RINvXs4_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
   98|  1.31M|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  1.31M|        match u32::try_from(self.value) {
  100|  1.26M|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|  44.0k|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|  44.0k|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  1.31M|        Ok(())
  107|  1.31M|    }
_RINvXs1_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
   59|  1.29M|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  1.29M|        match self.value {
   61|  1.29M|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|   495k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  1.29M|        Ok(())
   65|  1.29M|    }
_RNvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB5_7TypeNumyE3newCs7uao2NoihGb_11equivalence:
   52|  1.31M|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.31M|        TypeNum { type_, value }
   54|  1.31M|    }
_RNvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtB5_7TypeNumhE3newCs7uao2NoihGb_11equivalence:
   52|  1.29M|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.29M|        TypeNum { type_, value }
   54|  1.29M|    }
_RINvXsd_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
  270|   565k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|   565k|        Ok(())
  272|   565k|    }
_RINvXs7_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
  209|   428k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|   428k|        writer.push(self.0)?;
  211|   428k|        Ok(())
  212|   428k|    }
_RINvXst_NtNtCs9gAJ6Qj8foR_7cbor4ii4core3encmNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs7uao2NoihGb_11equivalence:
  159|  31.4k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|  31.4k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|  31.4k|                }

_RNvXs1_NtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCs7uao2NoihGb_11equivalence:
   75|   287k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|   287k|            self.limit = limit;
   77|   287k|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|   287k|    }
_RNvXs1_NtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCs7uao2NoihGb_11equivalence:
   62|  1.67M|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  1.67M|        let len = core::cmp::min(self.buf.len(), want);
   64|  1.67M|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  1.67M|    }
_RNvXs_NtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCs7uao2NoihGb_11equivalence:
   40|  1.77M|        self.0.try_reserve(input.len())?;
   41|  1.77M|        self.0.extend_from_slice(input);
   42|  1.77M|        Ok(())
   43|  1.77M|    }
_RNvXs1_NtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCs7uao2NoihGb_11equivalence:
   68|  1.41M|    fn advance(&mut self, n: usize) {
   69|  1.41M|        let len = core::cmp::min(self.buf.len(), n);
   70|  1.41M|        self.buf = &self.buf[len..];
   71|  1.41M|    }
_RNvXs1_NtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCs7uao2NoihGb_11equivalence:
   84|   287k|    fn step_out(&mut self) {
   85|   287k|        self.limit += 1;
   86|   287k|    }
_RNvMNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|   183k|    pub fn new(buf: Vec<u8>) -> Self {
   15|   183k|       BufWriter(buf)
   16|   183k|    }
_RNvMs0_NtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|  91.0k|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|  91.0k|        SliceReader { buf, limit: 256 }
   55|  91.0k|    }
_RNvMNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|   183k|    pub fn into_inner(self) -> Vec<u8> {
   25|   183k|        self.0
   26|   183k|    }

_RNvXs6_NtCsdCHgg67ySCu_3cid3cidINtB5_3CidKj40_EINtNtCslXuQP8d5bfj_4core7convert7TryFromRShE8try_fromCs7uao2NoihGb_11equivalence:
  314|   171k|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|   171k|        Self::read_bytes(&mut bytes)
  316|   171k|    }
_RINvMNtCsdCHgg67ySCu_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECs7uao2NoihGb_11equivalence:
  127|   171k|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|   171k|        let version = varint_read_u64(&mut r)?;
  129|   171k|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|   171k|        if [version, codec] == [0x12, 0x20] {
  132|      0|            let mut digest = [0u8; 32];
  133|      0|            r.read_exact(&mut digest)?;
  134|      0|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|      0|            Self::new_v0(mh)
  136|       |        } else {
  137|   171k|            let version = Version::try_from(version)?;
  138|   171k|            let mh = Multihash::read(r)?;
  139|   171k|            Self::new(version, codec, mh)
  140|       |        }
  141|   171k|    }
_RNvMNtCsdCHgg67ySCu_3cid3cidINtB2_3CidKj40_E3newCs7uao2NoihGb_11equivalence:
   99|   171k|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|   171k|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|   171k|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|   171k|    }
_RNvMNtCsdCHgg67ySCu_3cid3cidINtB2_3CidKj40_E6new_v1Cs7uao2NoihGb_11equivalence:
   90|   355k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|   355k|        Self {
   92|   355k|            version: Version::V1,
   93|   355k|            codec,
   94|   355k|            hash,
   95|   355k|        }
   96|   355k|    }
_RINvMNtCsdCHgg67ySCu_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsiLX6d1GG2fK_5alloc3vec3VechEECs7uao2NoihGb_11equivalence:
  157|   244k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|   244k|        match self.version {
  159|      0|            Version::V0 => self.hash.write(w)?,
  160|   244k|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|   244k|        Ok(())
  163|   244k|    }
_RNvMNtCsdCHgg67ySCu_3cid3cidINtB2_3CidKj40_E8to_bytesCs7uao2NoihGb_11equivalence:
  167|   244k|    pub fn to_bytes(&self) -> Vec<u8> {
  168|   244k|        let mut bytes = Vec::new();
  169|   244k|        self.write_bytes(&mut bytes).unwrap();
  170|   244k|        bytes
  171|   244k|    }
_RINvMNtCsdCHgg67ySCu_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsiLX6d1GG2fK_5alloc3vec3VechEECs7uao2NoihGb_11equivalence:
  143|   244k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|   244k|        let mut version_buf = varint_encode::u64_buffer();
  145|   244k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|   244k|
  147|   244k|        let mut codec_buf = varint_encode::u64_buffer();
  148|   244k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|   244k|
  150|   244k|        w.write_all(version)?;
  151|   244k|        w.write_all(codec)?;
  152|   244k|        self.hash.write(&mut w)?;
  153|   244k|        Ok(())
  154|   244k|    }
_RNvXse_NtCsdCHgg67ySCu_3cid3cidINtB5_3CidKj40_ENtNtCslXuQP8d5bfj_4core3cmp9PartialEq2eqCs7uao2NoihGb_11equivalence:
   64|    962|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RNvXse_NtCsdCHgg67ySCu_3cid3cidINtB5_3CidKj40_ENtNtCslXuQP8d5bfj_4core3cmp9PartialEq2eqCskChX8UIw6rR_19fvm_ipld_blockstore:
   64|   125k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RINvXsk_NtCsdCHgg67ySCu_3cid3cidINtB6_3CidKj40_ENtNtCslXuQP8d5bfj_4core4hash4Hash4hashNtNtNtNtCsf4GaSpkAWgL_3std11collections4hash3map13DefaultHasherECskChX8UIw6rR_19fvm_ipld_blockstore:
   64|   511k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXs_NtCsdCHgg67ySCu_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs17YjD8CsNSI_5serde2de7Visitor11visit_bytesINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCslXuQP8d5bfj_4core7convert10InfallibleEECs7uao2NoihGb_11equivalence:
   48|   171k|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|   171k|    where
   50|   171k|        E: de::Error,
   51|   171k|    {
   52|   171k|        CidGeneric::<SIZE>::try_from(value)
   53|   171k|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|   171k|    }
_RINvXs0_NtCsdCHgg67ySCu_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
   79|   171k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|   171k|    where
   81|   171k|        D: de::Deserializer<'de>,
   82|   171k|    {
   83|   171k|        /// Main visitor to deserialize a CID.
   84|   171k|        ///
   85|   171k|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|   171k|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|   171k|        /// to bytes.
   88|   171k|        struct MainEntryVisitor<const SIZE: usize>;
   89|   171k|
   90|   171k|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|   171k|            type Value = CidGeneric<SIZE>;
   92|   171k|
   93|   171k|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|   171k|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|   171k|            }
   96|   171k|
   97|   171k|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|   171k|            where
   99|   171k|                D: de::Deserializer<'de>,
  100|   171k|            {
  101|   171k|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|   171k|            }
  103|   171k|        }
  104|   171k|
  105|   171k|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|   171k|    }
_RINvXNtCsdCHgg67ySCu_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs17YjD8CsNSI_5serde3ser9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   29|   244k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|   244k|    where
   31|   244k|        S: ser::Serializer,
   32|   244k|    {
   33|   244k|        let value = ByteBuf::from(self.to_bytes());
   34|   244k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|   244k|    }
_RINvXNvXs0_NtCsdCHgg67ySCu_3cid5serdeINtNtBb_3cid3CidKpENtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
   97|   171k|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|   171k|            where
   99|   171k|                D: de::Deserializer<'de>,
  100|   171k|            {
  101|   171k|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|   171k|            }

_RNvXs2_NtCsdCHgg67ySCu_3cid7versionNtB5_7VersionNtNtCslXuQP8d5bfj_4core3cmp9PartialEq2eqCs7uao2NoihGb_11equivalence:
    6|    962|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs2_NtCsdCHgg67ySCu_3cid7versionNtB5_7VersionNtNtCslXuQP8d5bfj_4core3cmp9PartialEq2eqCskChX8UIw6rR_19fvm_ipld_blockstore:
    6|   125k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RINvXsa_NtCsdCHgg67ySCu_3cid7versionNtB6_7VersionNtNtCslXuQP8d5bfj_4core4hash4Hash4hashNtNtNtNtCsf4GaSpkAWgL_3std11collections4hash3map13DefaultHasherECskChX8UIw6rR_19fvm_ipld_blockstore:
    6|   511k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs_NtCsdCHgg67ySCu_3cid7versionNtB4_7VersionINtNtCslXuQP8d5bfj_4core7convert7TryFromyE8try_from:
   34|   171k|    fn try_from(raw: u64) -> Result<Self> {
   35|   171k|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|   171k|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|   171k|    }
_RNvXs0_NtCsdCHgg67ySCu_3cid7versionyINtNtCslXuQP8d5bfj_4core7convert4FromNtB5_7VersionE4from:
   44|   244k|    fn from(ver: Version) -> u64 {
   45|   244k|        match ver {
   46|      0|            Version::V0 => 0,
   47|   244k|            Version::V1 => 1,
   48|       |        }
   49|   244k|    }

_RINvXsd_NtCsaHmdmBitGtM_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs17YjD8CsNSI_5serde2de7Visitor11visit_bytesINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCslXuQP8d5bfj_4core7convert10InfallibleEECs7uao2NoihGb_11equivalence:
  203|  91.0k|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|  91.0k|    where
  205|  91.0k|        E: Error,
  206|  91.0k|    {
  207|  91.0k|        Ok(ByteBuf::from(v))
  208|  91.0k|    }
_RINvMNtCsaHmdmBitGtM_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECs7uao2NoihGb_11equivalence:
   60|  91.0k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|  91.0k|        ByteBuf {
   62|  91.0k|            bytes: bytes.into(),
   63|  91.0k|        }
   64|  91.0k|    }
_RINvXse_NtCsaHmdmBitGtM_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  219|  91.0k|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|  91.0k|    where
  221|  91.0k|        D: Deserializer<'de>,
  222|  91.0k|    {
  223|  91.0k|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|  91.0k|    }
_RNvMNtCsaHmdmBitGtM_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|  91.0k|    pub fn into_vec(self) -> Vec<u8> {
   68|  91.0k|        self.bytes
   69|  91.0k|    }

_RINvXs1_NtCsaHmdmBitGtM_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
   61|  91.0k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|  91.0k|    where
   63|  91.0k|        D: Deserializer<'de>,
   64|  91.0k|    {
   65|  91.0k|        // Via the serde::Deserialize impl for ByteBuf.
   66|  91.0k|        serde::Deserialize::deserialize(deserializer)
   67|  91.0k|    }
_RINvXs_NtCsaHmdmBitGtM_14cs_serde_bytes2deINtNtCsiLX6d1GG2fK_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
   42|  91.0k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|  91.0k|    where
   44|  91.0k|        D: Deserializer<'de>,
   45|  91.0k|    {
   46|  91.0k|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|  91.0k|    }

_RINvCsaHmdmBitGtM_14cs_serde_bytes9serializeRShQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   77|   183k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|   183k|where
   79|   183k|    T: ?Sized + Serialize,
   80|   183k|    S: Serializer,
   81|   183k|{
   82|   183k|    Serialize::serialize(bytes, serializer)
   83|   183k|}
_RINvCsaHmdmBitGtM_14cs_serde_bytes11deserializeINtNtCsiLX6d1GG2fK_5alloc3vec3VechEQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  103|  91.0k|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|  91.0k|where
  105|  91.0k|    T: Deserialize<'de>,
  106|  91.0k|    D: Deserializer<'de>,
  107|  91.0k|{
  108|  91.0k|    Deserialize::deserialize(deserializer)
  109|  91.0k|}

_RINvXs4_NtCsaHmdmBitGtM_14cs_serde_bytes3serRShNtB6_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   88|   183k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|   183k|    where
   90|   183k|        S: Serializer,
   91|   183k|    {
   92|   183k|        (**self).serialize(serializer)
   93|   183k|    }
_RINvXNtCsaHmdmBitGtM_14cs_serde_bytes3serShNtB3_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   27|   183k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   28|   183k|    where
   29|   183k|        S: Serializer,
   30|   183k|    {
   31|   183k|        serializer.serialize_bytes(self)
   32|   183k|    }

_RNvCslY86qOjZQQE_9getrandom9getrandom:
  258|      1|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  259|      1|    if dest.is_empty() {
  260|      0|        return Ok(());
  261|      1|    }
  262|      1|    imp::getrandom_inner(dest)
  263|      1|}

_RNvNtCslY86qOjZQQE_9getrandom3imp22is_getrandom_available:
   27|      1|fn is_getrandom_available() -> bool {
   28|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   29|      1|    if res < 0 {
   30|      0|        match last_os_error().raw_os_error() {
   31|      0|            Some(libc::ENOSYS) => false, // No kernel support
   32|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   33|      0|            _ => true,
   34|       |        }
   35|       |    } else {
   36|      1|        true
   37|       |    }
   38|      1|}
_RNCNvNtCslY86qOjZQQE_9getrandom3imp15getrandom_inner0B5_:
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
_RNvNtCslY86qOjZQQE_9getrandom3imp15getrandom_inner:
   16|      1|pub fn getrandom_inner(dest: &mut [u8]) -> Result<(), Error> {
   17|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   18|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
   22|       |    } else {
   23|      0|        use_file::getrandom_inner(dest)
   24|       |    }
   25|      1|}
_RNvNtCslY86qOjZQQE_9getrandom3imp9getrandom:
   40|      2|unsafe fn getrandom(
   41|      2|    buf: *mut libc::c_void,
   42|      2|    buflen: libc::size_t,
   43|      2|    flags: libc::c_uint,
   44|      2|) -> libc::ssize_t {
   45|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   46|      2|}

_RINvMNtCslY86qOjZQQE_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   42|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   43|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   44|      1|        let mut val = self.0.load(Relaxed);
   45|      1|        if val == Self::UNINIT {
   46|      1|            val = init();
   47|      1|            self.0.store(val, Relaxed);
   48|      1|        }
   49|      1|        val
   50|      1|    }
_RINvMs_NtCslY86qOjZQQE_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   61|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   62|      1|        self.0.unsync_init(|| init() as usize) != 0
   63|      1|    }
_RNCINvMs_NtCslY86qOjZQQE_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   62|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCslY86qOjZQQE_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   56|      1|pub fn sys_fill_exact(
   57|      1|    mut buf: &mut [u8],
   58|      1|    sys_fill: impl Fn(&mut [u8]) -> libc::ssize_t,
   59|      1|) -> Result<(), Error> {
   60|      2|    while !buf.is_empty() {
   61|      1|        let res = sys_fill(buf);
   62|      1|        if res < 0 {
   63|      0|            let err = last_os_error();
   64|      0|            // We should try again if the call was interrupted.
   65|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   66|      0|                return Err(err);
   67|      0|            }
   68|      1|        } else {
   69|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   70|      1|            // should be an infinite stream of random bytes.
   71|      1|            buf = &mut buf[(res as usize)..];
   72|      1|        }
   73|       |    }
   74|      1|    Ok(())
   75|      1|}

_RINvYINtNtNtNtCsf4GaSpkAWgL_3std11collections4hash3map4IteryyENtCs238SgXsuHch_9itertools9Itertools13sorted_by_keyRyNCNvCs7uao2NoihGb_11equivalence22rust_fuzzer_test_input0EB1T_:
 2661|    962|    fn sorted_by_key<K, F>(self, f: F) -> VecIntoIter<Self::Item>
 2662|    962|        where Self: Sized,
 2663|    962|              K: Ord,
 2664|    962|              F: FnMut(&Self::Item) -> K,
 2665|    962|    {
 2666|    962|        let mut v = Vec::from_iter(self);
 2667|    962|        v.sort_by_key(f);
 2668|    962|        v.into_iter()
 2669|    962|    }

rust_fuzzer_test_input:
  167|    963|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
LLVMFuzzerTestOneInput:
   27|    963|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    963|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    963|    });
   32|    963|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    963|    }
   37|    963|    0
   38|    963|}
_RNCNvCsatfKNJFQuKP_13libfuzzer_sys15test_input_wrap0B3_:
   28|    963|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    963|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    963|        rust_fuzzer_test_input(data_slice);
   31|    963|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs_NtNtCsdMka0SqTmHA_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|   183k|            fn update(&mut self, input: &[u8]) {
   47|   183k|                self.state.update(input);
   48|   183k|            }
_RNvXNtNtCsdMka0SqTmHA_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCslXuQP8d5bfj_4core7default7Default7defaultB6_:
   35|   183k|            fn default() -> Self {
   36|   183k|                let mut params = $module::Params::new();
   37|   183k|                params.hash_length(S);
   38|   183k|                Self {
   39|   183k|                    state: params.to_state(),
   40|   183k|                    digest: [0; S],
   41|   183k|                }
   42|   183k|            }
_RNvXs_NtNtCsdMka0SqTmHA_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|   183k|            fn finalize(&mut self) -> &[u8] {
   51|   183k|                let digest = self.state.finalize();
   52|   183k|                let digest_bytes = digest.as_bytes();
   53|   183k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|   183k|                digest_out.copy_from_slice(digest_bytes);
   55|   183k|                digest_out
   56|   183k|            }

_RNvMs_NtCsdMka0SqTmHA_9multihash9multihashINtB4_9MultihashKj40_E6digestCs7uao2NoihGb_11equivalence:
  130|   246k|    pub fn digest(&self) -> &[u8] {
  131|   246k|        &self.digest[..self.size as usize]
  132|   246k|    }
_RINvNtCsdMka0SqTmHA_9multihash9multihash14read_multihashQRShKj40_ECs7uao2NoihGb_11equivalence:
  298|   171k|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|   171k|where
  300|   171k|    R: io::Read,
  301|   171k|{
  302|   171k|    let code = read_u64(&mut r)?;
  303|   171k|    let size = read_u64(&mut r)?;
  304|       |
  305|   171k|    if size > S as u64 || size > u8::MAX as u64 {
  306|      0|        return Err(Error::InvalidSize(size));
  307|   171k|    }
  308|   171k|
  309|   171k|    let mut digest = [0; S];
  310|   171k|    r.read_exact(&mut digest[..size as usize])?;
  311|   171k|    Ok((code, size as u8, digest))
  312|   171k|}
_RNvXs2_NtCsdMka0SqTmHA_9multihash9multihashINtB5_9MultihashKj40_ENtNtCslXuQP8d5bfj_4core3cmp9PartialEq2eqCs7uao2NoihGb_11equivalence:
  233|    962|    fn eq(&self, other: &Multihash<B>) -> bool {
  234|    962|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  235|    962|        self.code == other.code && self.digest() == other.digest()
  236|    962|    }
_RINvMs_NtCsdMka0SqTmHA_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsiLX6d1GG2fK_5alloc3vec3VechEECs7uao2NoihGb_11equivalence:
  163|   244k|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|   244k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|   244k|    }
_RNvMs_NtCsdMka0SqTmHA_9multihash9multihashINtB4_9MultihashKj40_E4codeCs7uao2NoihGb_11equivalence:
  120|   244k|    pub const fn code(&self) -> u64 {
  121|   244k|        self.code
  122|   244k|    }
_RNvMs_NtCsdMka0SqTmHA_9multihash9multihashINtB4_9MultihashKj40_E4sizeCs7uao2NoihGb_11equivalence:
  125|   244k|    pub const fn size(&self) -> u8 {
  126|   244k|        self.size
  127|   244k|    }
_RINvNtCsdMka0SqTmHA_9multihash9multihash15write_multihashQQINtNtCsiLX6d1GG2fK_5alloc3vec3VechEECs7uao2NoihGb_11equivalence:
  276|   244k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|   244k|where
  278|   244k|    W: io::Write,
  279|   244k|{
  280|   244k|    let mut code_buf = varint_encode::u64_buffer();
  281|   244k|    let code = varint_encode::u64(code, &mut code_buf);
  282|   244k|
  283|   244k|    let mut size_buf = varint_encode::u8_buffer();
  284|   244k|    let size = varint_encode::u8(size, &mut size_buf);
  285|   244k|
  286|   244k|    w.write_all(code)?;
  287|   244k|    w.write_all(size)?;
  288|   244k|    w.write_all(digest)?;
  289|   244k|    Ok(())
  290|   244k|}
_RINvMs_NtCsdMka0SqTmHA_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECs7uao2NoihGb_11equivalence:
  135|   171k|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|   171k|    where
  137|   171k|        Self: Sized,
  138|   171k|    {
  139|   171k|        let (code, size, digest) = read_multihash(r)?;
  140|   171k|        Ok(Self { code, size, digest })
  141|   171k|    }
_RNvXs2_NtCsdMka0SqTmHA_9multihash9multihashINtB5_9MultihashKj40_ENtNtCslXuQP8d5bfj_4core3cmp9PartialEq2eqCskChX8UIw6rR_19fvm_ipld_blockstore:
  233|   125k|    fn eq(&self, other: &Multihash<B>) -> bool {
  234|   125k|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  235|   125k|        self.code == other.code && self.digest() == other.digest()
  236|   125k|    }
_RINvXs0_NtCsdMka0SqTmHA_9multihash9multihashINtB6_9MultihashKj40_ENtNtCslXuQP8d5bfj_4core4hash4Hash4hashNtNtNtNtCsf4GaSpkAWgL_3std11collections4hash3map13DefaultHasherECskChX8UIw6rR_19fvm_ipld_blockstore:
  219|   511k|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  220|   511k|        self.code.hash(state);
  221|   511k|        self.digest().hash(state);
  222|   511k|    }
_RNvMs_NtCsdMka0SqTmHA_9multihash9multihashINtB4_9MultihashKj40_E6digestCskChX8UIw6rR_19fvm_ipld_blockstore:
  130|   763k|    pub fn digest(&self) -> &[u8] {
  131|   763k|        &self.digest[..self.size as usize]
  132|   763k|    }
_RNvMs_NtCsdMka0SqTmHA_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|   183k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|   183k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|   183k|        }
  105|   183k|        let size = input_digest.len();
  106|   183k|        let mut digest = [0; S];
  107|   183k|        let mut i = 0;
  108|  6.05M|        while i < size {
  109|  5.86M|            digest[i] = input_digest[i];
  110|  5.86M|            i += 1;
  111|  5.86M|        }
  112|   183k|        Ok(Self {
  113|   183k|            code,
  114|   183k|            size: size as u8,
  115|   183k|            digest,
  116|   183k|        })
  117|   183k|    }

_RNvXs3_NtCsdMka0SqTmHA_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|   183k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvMs2_NtCsbWFVtmsv0ur_9once_cell3impINtB5_8OnceCellNtNtCsiLX6d1GG2fK_5alloc6string6StringE14is_initializedCs7uao2NoihGb_11equivalence:
   62|    962|    pub(crate) fn is_initialized(&self) -> bool {
   63|    962|        // An `Acquire` load is enough because that makes all the initialization
   64|    962|        // operations visible to us, and, this being a fast path, weaker
   65|    962|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    962|        // `SeqCst` operations on the slow path.
   67|    962|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    962|    }

_RNvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE10try_insertCs7uao2NoihGb_11equivalence:
  512|  40.0k|        pub fn try_insert(&self, value: T) -> Result<&T, (&T, T)> {
  513|  40.0k|            if let Some(old) = self.get() {
  514|      0|                return Err((old, value));
  515|  40.0k|            }
  516|  40.0k|            let slot = unsafe { &mut *self.inner.get() };
  517|  40.0k|            // This is the only place where we set the slot, no races
  518|  40.0k|            // due to reentrancy/concurrency are possible, and we've
  519|  40.0k|            // checked that slot is currently `None`, so this write
  520|  40.0k|            // maintains the `inner`'s invariant.
  521|  40.0k|            *slot = Some(value);
  522|  40.0k|            Ok(match &*slot {
  523|  40.0k|                Some(value) => value,
  524|      0|                None => unsafe { hint::unreachable_unchecked() },
  525|       |            })
  526|  40.0k|        }
_RNvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE3setCs7uao2NoihGb_11equivalence:
  491|  40.0k|        pub fn set(&self, value: T) -> Result<(), T> {
  492|  40.0k|            match self.try_insert(value) {
  493|  40.0k|                Ok(_) => Ok(()),
  494|      0|                Err((_, value)) => Err(value),
  495|       |            }
  496|  40.0k|        }
_RINvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB6_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE15get_or_try_initNCINvMs4_B1u_B1r_3getRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0NtNtB1w_5error5ErrorECs7uao2NoihGb_11equivalence:
  585|  34.2k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  586|  34.2k|        where
  587|  34.2k|            F: FnOnce() -> Result<T, E>,
  588|  34.2k|        {
  589|  34.2k|            if let Some(val) = self.get() {
  590|  1.34k|                return Ok(val);
  591|  32.9k|            }
  592|  32.9k|            let val = f()?;
  593|       |            // Note that *some* forms of reentrant initialization might lead to
  594|       |            // UB (see `reentrant_init` test). I believe that just removing this
  595|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  596|       |            // better to panic, rather than to silently use an old value.
  597|  32.9k|            assert!(self.set(val).is_ok(), "reentrant init");
  598|  32.9k|            Ok(self.get().unwrap())
  599|  34.2k|        }
_RNvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE3getCs7uao2NoihGb_11equivalence:
  449|   125k|        pub fn get(&self) -> Option<&T> {
  450|   125k|            // Safe due to `inner`'s invariant
  451|   125k|            unsafe { &*self.inner.get() }.as_ref()
  452|   125k|        }
_RNvMs4_NtCsbWFVtmsv0ur_9once_cell4syncINtB5_8OnceCellNtNtCsiLX6d1GG2fK_5alloc6string6StringE3getCs7uao2NoihGb_11equivalence:
  869|    962|        pub fn get(&self) -> Option<&T> {
  870|    962|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    962|                None
  875|       |            }
  876|    962|        }
_RNvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE3newCs7uao2NoihGb_11equivalence:
  437|   215k|        pub const fn new() -> OnceCell<T> {
  438|   215k|            OnceCell { inner: UnsafeCell::new(None) }
  439|   215k|        }
_RINvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB6_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE15get_or_try_initNCINvMs4_B1u_B1r_6deleteRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs7uao2NoihGb_11equivalence:
  585|  10.9k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  586|  10.9k|        where
  587|  10.9k|            F: FnOnce() -> Result<T, E>,
  588|  10.9k|        {
  589|  10.9k|            if let Some(val) = self.get() {
  590|  3.80k|                return Ok(val);
  591|  7.10k|            }
  592|  7.10k|            let val = f()?;
  593|       |            // Note that *some* forms of reentrant initialization might lead to
  594|       |            // UB (see `reentrant_init` test). I believe that just removing this
  595|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  596|       |            // better to panic, rather than to silently use an old value.
  597|  7.10k|            assert!(self.set(val).is_ok(), "reentrant init");
  598|  7.10k|            Ok(self.get().unwrap())
  599|  10.9k|        }
_RNvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE7get_mutCs7uao2NoihGb_11equivalence:
  469|  10.9k|        pub fn get_mut(&mut self) -> Option<&mut T> {
  470|  10.9k|            // Safe because we have unique access
  471|  10.9k|            unsafe { &mut *self.inner.get() }.as_mut()
  472|  10.9k|        }
_RNvXs5_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEEINtNtCslXuQP8d5bfj_4core7convert4FromBR_E4fromCs7uao2NoihGb_11equivalence:
  430|   167k|        fn from(value: T) -> Self {
  431|   167k|            OnceCell::with_value(value)
  432|   167k|        }
_RNvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE10into_innerCs7uao2NoihGb_11equivalence:
  650|  43.3k|        pub fn into_inner(self) -> Option<T> {
  651|  43.3k|            // Because `into_inner` takes `self` by value, the compiler statically verifies
  652|  43.3k|            // that it is not currently borrowed. So it is safe to move out `Option<T>`.
  653|  43.3k|            self.inner.into_inner()
  654|  43.3k|        }
_RNvMs6_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEE10with_valueCs7uao2NoihGb_11equivalence:
  442|   167k|        pub const fn with_value(value: T) -> OnceCell<T> {
  443|   167k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  444|   167k|        }
_RNvXs0_NtCsbWFVtmsv0ur_9once_cell6unsyncINtB5_8OnceCellINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEENtNtCslXuQP8d5bfj_4core7default7Default7defaultCs7uao2NoihGb_11equivalence:
  391|   215k|        fn default() -> Self {
  392|   215k|            Self::new()
  393|   215k|        }

_RINvMs1_NtNtCsbWFVtmsv0ur_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxDNtNtCs7h6iRseGexw_5ahash12random_state12RandomSourceNtNtCslXuQP8d5bfj_4core6marker4SyncNtB2s_4SendEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECs7uao2NoihGb_11equivalence:
  269|  1.92k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  270|  1.92k|        where
  271|  1.92k|            F: FnOnce() -> Result<Box<T>, E>,
  272|  1.92k|        {
  273|  1.92k|            let mut ptr = self.inner.load(Ordering::Acquire);
  274|  1.92k|
  275|  1.92k|            if ptr.is_null() {
  276|      1|                let val = f()?;
  277|      1|                ptr = Box::into_raw(val);
  278|      1|                let exchange = self.inner.compare_exchange(
  279|      1|                    ptr::null_mut(),
  280|      1|                    ptr,
  281|      1|                    Ordering::AcqRel,
  282|      1|                    Ordering::Acquire,
  283|      1|                );
  284|      1|                if let Err(old) = exchange {
  285|      0|                    drop(unsafe { Box::from_raw(ptr) });
  286|      0|                    ptr = old;
  287|      1|                }
  288|  1.92k|            };
  289|  1.92k|            Ok(unsafe { &*ptr })
  290|  1.92k|        }
_RNCINvMs1_NtNtCsbWFVtmsv0ur_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxDNtNtCs7h6iRseGexw_5ahash12random_state12RandomSourceNtNtCslXuQP8d5bfj_4core6marker4SyncNtB2u_4SendEL_EE11get_or_initNCNvMs1_B1E_NtB1E_11RandomState7get_src0E0Cs7uao2NoihGb_11equivalence:
  256|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCsbWFVtmsv0ur_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxDNtNtCs7h6iRseGexw_5ahash12random_state12RandomSourceNtNtCslXuQP8d5bfj_4core6marker4SyncNtB2s_4SendEL_EE11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0ECs7uao2NoihGb_11equivalence:
  251|  1.92k|        pub fn get_or_init<F>(&self, f: F) -> &T
  252|  1.92k|        where
  253|  1.92k|            F: FnOnce() -> Box<T>,
  254|  1.92k|        {
  255|  1.92k|            enum Void {}
  256|  1.92k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  257|  1.92k|                Ok(val) => val,
  258|  1.92k|                Err(void) => match void {},
  259|  1.92k|            }
  260|  1.92k|        }
_RNCINvMs1_NtNtCsbWFVtmsv0ur_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs7h6iRseGexw_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  256|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCsbWFVtmsv0ur_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs7h6iRseGexw_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  251|  1.92k|        pub fn get_or_init<F>(&self, f: F) -> &T
  252|  1.92k|        where
  253|  1.92k|            F: FnOnce() -> Box<T>,
  254|  1.92k|        {
  255|  1.92k|            enum Void {}
  256|  1.92k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  257|  1.92k|                Ok(val) => val,
  258|  1.92k|                Err(void) => match void {},
  259|  1.92k|            }
  260|  1.92k|        }
_RINvMs1_NtNtCsbWFVtmsv0ur_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCs7h6iRseGexw_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  269|  1.92k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  270|  1.92k|        where
  271|  1.92k|            F: FnOnce() -> Result<Box<T>, E>,
  272|  1.92k|        {
  273|  1.92k|            let mut ptr = self.inner.load(Ordering::Acquire);
  274|  1.92k|
  275|  1.92k|            if ptr.is_null() {
  276|      1|                let val = f()?;
  277|      1|                ptr = Box::into_raw(val);
  278|      1|                let exchange = self.inner.compare_exchange(
  279|      1|                    ptr::null_mut(),
  280|      1|                    ptr,
  281|      1|                    Ordering::AcqRel,
  282|      1|                    Ordering::Acquire,
  283|      1|                );
  284|      1|                if let Err(old) = exchange {
  285|      0|                    drop(unsafe { Box::from_raw(ptr) });
  286|      0|                    ptr = old;
  287|      1|                }
  288|  1.92k|            };
  289|  1.92k|            Ok(unsafe { &*ptr })
  290|  1.92k|        }

_RNvMs1_Cs6PAIY6Gh2eg_10scopeguardINtB5_10ScopeGuardQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCs7uao2NoihGb_11equivalence:
  317|   287k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|   287k|        ScopeGuard {
  319|   287k|            value: ManuallyDrop::new(v),
  320|   287k|            dropfn: ManuallyDrop::new(dropfn),
  321|   287k|            strategy: PhantomData,
  322|   287k|        }
  323|   287k|    }
_RINvCs6PAIY6Gh2eg_10scopeguard5guardQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEFBy_EuECs7uao2NoihGb_11equivalence:
  367|   287k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|   287k|    where F: FnOnce(T)
  369|   287k|{
  370|   287k|    ScopeGuard::with_strategy(v, dropfn)
  371|   287k|}
_RNvXs4_Cs6PAIY6Gh2eg_10scopeguardINtB5_10ScopeGuardQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCslXuQP8d5bfj_4core3ops5deref8DerefMut9deref_mutCs7uao2NoihGb_11equivalence:
  443|   287k|    fn deref_mut(&mut self) -> &mut T {
  444|   287k|        &mut *self.value
  445|   287k|    }
_RNvXs5_Cs6PAIY6Gh2eg_10scopeguardINtB5_10ScopeGuardQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCslXuQP8d5bfj_4core3ops4drop4Drop4dropCs7uao2NoihGb_11equivalence:
  452|   287k|    fn drop(&mut self) {
  453|   287k|        // This is OK because the fields are `ManuallyDrop`s
  454|   287k|        // which will not be dropped by the compiler.
  455|   287k|        let (value, dropfn) = unsafe {
  456|   287k|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|   287k|        };
  458|   287k|        if S::should_run() {
  459|   287k|            dropfn(value);
  460|   287k|        }
  461|   287k|    }
_RNvXCs6PAIY6Gh2eg_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|   287k|    fn should_run() -> bool { true }

_RINvXNvXsh_NtNtCs17YjD8CsNSI_5serde2de5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EENtBb_7Visitor9visit_seqINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
 1032|  91.0k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|  91.0k|            where
 1034|  91.0k|                A: SeqAccess<'de>,
 1035|  91.0k|            {
 1036|  91.0k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|   262k|                while let Some(value) = try!(seq.next_element()) {
 1039|   171k|                    values.push(value);
 1040|   171k|                }
 1041|       |
 1042|  91.0k|                Ok(values)
 1043|  91.0k|            }
_RINvXs2M_NtNtCs17YjD8CsNSI_5serde2de5implsTmmyINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEENtB9_11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
 1261|  13.8k|                fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1262|  13.8k|                where
 1263|  13.8k|                    D: Deserializer<'de>,
 1264|  13.8k|                {
 1265|  13.8k|                    struct TupleVisitor<$($name,)+> {
 1266|  13.8k|                        marker: PhantomData<($($name,)+)>,
 1267|  13.8k|                    }
 1268|  13.8k|
 1269|  13.8k|                    impl<'de, $($name: Deserialize<'de>),+> Visitor<'de> for TupleVisitor<$($name,)+> {
 1270|  13.8k|                        type Value = ($($name,)+);
 1271|  13.8k|
 1272|  13.8k|                        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1273|  13.8k|                            formatter.write_str(concat!("a tuple of size ", $len))
 1274|  13.8k|                        }
 1275|  13.8k|
 1276|  13.8k|                        #[inline]
 1277|  13.8k|                        #[allow(non_snake_case)]
 1278|  13.8k|                        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1279|  13.8k|                        where
 1280|  13.8k|                            A: SeqAccess<'de>,
 1281|  13.8k|                        {
 1282|  13.8k|                            $(
 1283|  13.8k|                                let $name = match try!(seq.next_element()) {
 1284|  13.8k|                                    Some(value) => value,
 1285|  13.8k|                                    None => return Err(Error::invalid_length($n, &self)),
 1286|  13.8k|                                };
 1287|  13.8k|                            )+
 1288|  13.8k|
 1289|  13.8k|                            Ok(($($name,)+))
 1290|  13.8k|                        }
 1291|  13.8k|                    }
 1292|  13.8k|
 1293|  13.8k|                    deserializer.deserialize_tuple($len, TupleVisitor { marker: PhantomData })
 1294|  13.8k|                }
_RINvXsV_NtNtCs17YjD8CsNSI_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  113|  32.6k|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|  32.6k|            where
  115|  32.6k|                D: Deserializer<'de>,
  116|  32.6k|            {
  117|  32.6k|                struct PrimitiveVisitor;
  118|  32.6k|
  119|  32.6k|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|  32.6k|                    type Value = $primitive;
  121|  32.6k|
  122|  32.6k|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|  32.6k|                        formatter.write_str(stringify!($primitive))
  124|  32.6k|                    }
  125|  32.6k|
  126|  32.6k|                    $($($method!($val : $visit);)*)*
  127|  32.6k|                }
  128|  32.6k|
  129|  32.6k|                deserializer.$deserialize(PrimitiveVisitor)
  130|  32.6k|            }
_RINvXNvXsV_NtNtCs17YjD8CsNSI_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsfoKpyytHyUA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCslXuQP8d5bfj_4core7convert10InfallibleEECs7uao2NoihGb_11equivalence:
  138|  32.6k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|  32.6k|        where
  140|  32.6k|            E: Error,
  141|  32.6k|        {
  142|  32.6k|            Ok(v)
  143|  32.6k|        }
_RINvXsT_NtNtCs17YjD8CsNSI_5serde2de5implsmNtB8_11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  113|  27.6k|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|  27.6k|            where
  115|  27.6k|                D: Deserializer<'de>,
  116|  27.6k|            {
  117|  27.6k|                struct PrimitiveVisitor;
  118|  27.6k|
  119|  27.6k|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|  27.6k|                    type Value = $primitive;
  121|  27.6k|
  122|  27.6k|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|  27.6k|                        formatter.write_str(stringify!($primitive))
  124|  27.6k|                    }
  125|  27.6k|
  126|  27.6k|                    $($($method!($val : $visit);)*)*
  127|  27.6k|                }
  128|  27.6k|
  129|  27.6k|                deserializer.$deserialize(PrimitiveVisitor)
  130|  27.6k|            }
_RINvXsh_NtNtCs17YjD8CsNSI_5serde2de5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EENtB8_11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
 1014|  91.0k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|  91.0k|    where
 1016|  91.0k|        D: Deserializer<'de>,
 1017|  91.0k|    {
 1018|  91.0k|        struct VecVisitor<T> {
 1019|  91.0k|            marker: PhantomData<T>,
 1020|  91.0k|        }
 1021|  91.0k|
 1022|  91.0k|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|  91.0k|        where
 1024|  91.0k|            T: Deserialize<'de>,
 1025|  91.0k|        {
 1026|  91.0k|            type Value = Vec<T>;
 1027|  91.0k|
 1028|  91.0k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|  91.0k|                formatter.write_str("a sequence")
 1030|  91.0k|            }
 1031|  91.0k|
 1032|  91.0k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|  91.0k|            where
 1034|  91.0k|                A: SeqAccess<'de>,
 1035|  91.0k|            {
 1036|  91.0k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|  91.0k|
 1038|  91.0k|                while let Some(value) = try!(seq.next_element()) {
 1039|  91.0k|                    values.push(value);
 1040|  91.0k|                }
 1041|  91.0k|
 1042|  91.0k|                Ok(values)
 1043|  91.0k|            }
 1044|  91.0k|        }
 1045|  91.0k|
 1046|  91.0k|        let visitor = VecVisitor {
 1047|  91.0k|            marker: PhantomData,
 1048|  91.0k|        };
 1049|  91.0k|        deserializer.deserialize_seq(visitor)
 1050|  91.0k|    }
_RINvXsh_NtNtCs17YjD8CsNSI_5serde2de5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecyENtB8_11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
 1014|  91.0k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|  91.0k|    where
 1016|  91.0k|        D: Deserializer<'de>,
 1017|  91.0k|    {
 1018|  91.0k|        struct VecVisitor<T> {
 1019|  91.0k|            marker: PhantomData<T>,
 1020|  91.0k|        }
 1021|  91.0k|
 1022|  91.0k|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|  91.0k|        where
 1024|  91.0k|            T: Deserialize<'de>,
 1025|  91.0k|        {
 1026|  91.0k|            type Value = Vec<T>;
 1027|  91.0k|
 1028|  91.0k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|  91.0k|                formatter.write_str("a sequence")
 1030|  91.0k|            }
 1031|  91.0k|
 1032|  91.0k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|  91.0k|            where
 1034|  91.0k|                A: SeqAccess<'de>,
 1035|  91.0k|            {
 1036|  91.0k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|  91.0k|
 1038|  91.0k|                while let Some(value) = try!(seq.next_element()) {
 1039|  91.0k|                    values.push(value);
 1040|  91.0k|                }
 1041|  91.0k|
 1042|  91.0k|                Ok(values)
 1043|  91.0k|            }
 1044|  91.0k|        }
 1045|  91.0k|
 1046|  91.0k|        let visitor = VecVisitor {
 1047|  91.0k|            marker: PhantomData,
 1048|  91.0k|        };
 1049|  91.0k|        deserializer.deserialize_seq(visitor)
 1050|  91.0k|    }
_RINvXNvXsh_NtNtCs17YjD8CsNSI_5serde2de5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitoryENtBb_7Visitor9visit_seqINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
 1032|  91.0k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|  91.0k|            where
 1034|  91.0k|                A: SeqAccess<'de>,
 1035|  91.0k|            {
 1036|  91.0k|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|   109k|                while let Some(value) = try!(seq.next_element()) {
 1039|  18.8k|                    values.push(value);
 1040|  18.8k|                }
 1041|       |
 1042|  91.0k|                Ok(values)
 1043|  91.0k|            }
_RINvXNvXs2M_NtNtCs17YjD8CsNSI_5serde2de5implsTppppENtBc_11Deserialize11deserializeINtB3_12TupleVisitormmyINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEENtBc_7Visitor9visit_seqINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
 1278|  13.8k|                        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1279|  13.8k|                        where
 1280|  13.8k|                            A: SeqAccess<'de>,
 1281|  13.8k|                        {
 1282|       |                            $(
 1283|  13.8k|                                let $name = match try!(seq.next_element()) {
 1284|  13.8k|                                    Some(value) => value,
 1285|      0|                                    None => return Err(Error::invalid_length($n, &self)),
 1286|       |                                };
 1287|       |                            )+
 1288|       |
 1289|  13.8k|                            Ok(($($name,)+))
 1290|  13.8k|                        }
_RINvXNvXsT_NtNtCs17YjD8CsNSI_5serde2de5implsmNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u32INtNtCsfoKpyytHyUA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCslXuQP8d5bfj_4core7convert10InfallibleEECs7uao2NoihGb_11equivalence:
  138|  27.6k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|  27.6k|        where
  140|  27.6k|            E: Error,
  141|  27.6k|        {
  142|  27.6k|            Ok(v)
  143|  27.6k|        }

_RINvYINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess12next_elementINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EECs7uao2NoihGb_11equivalence:
 1723|   262k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|   262k|    where
 1725|   262k|        T: Deserialize<'de>,
 1726|   262k|    {
 1727|   262k|        self.next_element_seed(PhantomData)
 1728|   262k|    }
_RINvYINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess12next_elementyECs7uao2NoihGb_11equivalence:
 1723|   123k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|   123k|    where
 1725|   123k|        T: Deserialize<'de>,
 1726|   123k|    {
 1727|   123k|        self.next_element_seed(PhantomData)
 1728|   123k|    }
_RINvXs3_NtCs17YjD8CsNSI_5serde2deINtNtCslXuQP8d5bfj_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  783|  32.6k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  32.6k|    where
  785|  32.6k|        D: Deserializer<'de>,
  786|  32.6k|    {
  787|  32.6k|        T::deserialize(deserializer)
  788|  32.6k|    }
_RINvXs3_NtCs17YjD8CsNSI_5serde2deINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsiLX6d1GG2fK_5alloc3vec3VecINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEENtB6_15DeserializeSeed11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  783|  91.0k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  91.0k|    where
  785|  91.0k|        D: Deserializer<'de>,
  786|  91.0k|    {
  787|  91.0k|        T::deserialize(deserializer)
  788|  91.0k|    }
_RINvYINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess12next_elementINtNvXNvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtB2J_13CollapsedNodepENtB1L_11Deserialize11deserializeINtB2E_9___VisitorpENtB1L_7Visitor9visit_seq17___DeserializeWithyEECs7uao2NoihGb_11equivalence:
 1723|  91.0k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  91.0k|    where
 1725|  91.0k|        T: Deserialize<'de>,
 1726|  91.0k|    {
 1727|  91.0k|        self.next_element_seed(PhantomData)
 1728|  91.0k|    }
_RINvYINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess12next_elementINtNtCsiLX6d1GG2fK_5alloc3vec3VecINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEECs7uao2NoihGb_11equivalence:
 1723|  91.0k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  91.0k|    where
 1725|  91.0k|        T: Deserialize<'de>,
 1726|  91.0k|    {
 1727|  91.0k|        self.next_element_seed(PhantomData)
 1728|  91.0k|    }
_RINvYNtNtCsaHmdmBitGtM_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs17YjD8CsNSI_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCslXuQP8d5bfj_4core7convert10InfallibleEECs7uao2NoihGb_11equivalence:
 1563|  91.0k|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|  91.0k|    where
 1565|  91.0k|        E: Error,
 1566|  91.0k|    {
 1567|  91.0k|        self.visit_bytes(v)
 1568|  91.0k|    }
_RINvYINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess12next_elementINtNtCsiLX6d1GG2fK_5alloc3vec3VecyEECs7uao2NoihGb_11equivalence:
 1723|  91.0k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  91.0k|    where
 1725|  91.0k|        T: Deserialize<'de>,
 1726|  91.0k|    {
 1727|  91.0k|        self.next_element_seed(PhantomData)
 1728|  91.0k|    }
_RINvXs3_NtCs17YjD8CsNSI_5serde2deINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsiLX6d1GG2fK_5alloc3vec3VecyEENtB6_15DeserializeSeed11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  783|  91.0k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  91.0k|    where
  785|  91.0k|        D: Deserializer<'de>,
  786|  91.0k|    {
  787|  91.0k|        T::deserialize(deserializer)
  788|  91.0k|    }
_RINvXs3_NtCs17YjD8CsNSI_5serde2deINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEENtB6_15DeserializeSeed11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  783|  13.8k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  13.8k|    where
  785|  13.8k|        D: Deserializer<'de>,
  786|  13.8k|    {
  787|  13.8k|        T::deserialize(deserializer)
  788|  13.8k|    }
_RINvYINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess12next_elementINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEECs7uao2NoihGb_11equivalence:
 1723|  13.8k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  13.8k|    where
 1725|  13.8k|        T: Deserialize<'de>,
 1726|  13.8k|    {
 1727|  13.8k|        self.next_element_seed(PhantomData)
 1728|  13.8k|    }
_RINvXs3_NtCs17YjD8CsNSI_5serde2deINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  783|   171k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|   171k|    where
  785|   171k|        D: Deserializer<'de>,
  786|   171k|    {
  787|   171k|        T::deserialize(deserializer)
  788|   171k|    }
_RINvYNtNtCsdCHgg67ySCu_3cid5serde17BytesToCidVisitorNtNtCs17YjD8CsNSI_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCslXuQP8d5bfj_4core7convert10InfallibleEECs7uao2NoihGb_11equivalence:
 1563|   171k|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|   171k|    where
 1565|   171k|        E: Error,
 1566|   171k|    {
 1567|   171k|        self.visit_bytes(v)
 1568|   171k|    }
_RINvYINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess12next_elementmECs7uao2NoihGb_11equivalence:
 1723|  27.6k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  27.6k|    where
 1725|  27.6k|        T: Deserialize<'de>,
 1726|  27.6k|    {
 1727|  27.6k|        self.next_element_seed(PhantomData)
 1728|  27.6k|    }
_RINvXs3_NtCs17YjD8CsNSI_5serde2deINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNvXNvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtB1o_13CollapsedNodepENtB6_11Deserialize11deserializeINtB1j_9___VisitorpENtB6_7Visitor9visit_seq17___DeserializeWithyEENtB6_15DeserializeSeed11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  783|  91.0k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  91.0k|    where
  785|  91.0k|        D: Deserializer<'de>,
  786|  91.0k|    {
  787|  91.0k|        T::deserialize(deserializer)
  788|  91.0k|    }
_RINvXs3_NtCs17YjD8CsNSI_5serde2deINtNtCslXuQP8d5bfj_4core6marker11PhantomDatamENtB6_15DeserializeSeed11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  783|  27.6k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  27.6k|    where
  785|  27.6k|        D: Deserializer<'de>,
  786|  27.6k|    {
  787|  27.6k|        T::deserialize(deserializer)
  788|  27.6k|    }

_RNvNtNtCs17YjD8CsNSI_5serde9___private9size_hint8cautiousCs7uao2NoihGb_11equivalence:
   12|   182k|pub fn cautious(hint: Option<usize>) -> usize {
   13|   182k|    cmp::min(hint.unwrap_or(0), 4096)
   14|   182k|}

_RINvXsE_NtNtCs17YjD8CsNSI_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   11|  73.1k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  73.1k|            where
   13|  73.1k|                S: Serializer,
   14|  73.1k|            {
   15|  73.1k|                serializer.$method(*self $($cast)*)
   16|  73.1k|            }
_RINvXs1G_NtNtCs17YjD8CsNSI_5serde3ser5implsINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  386|   167k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   167k|            where
  388|   167k|                S: Serializer,
  389|   167k|            {
  390|   167k|                (**self).serialize(serializer)
  391|   167k|            }
_RINvXsD_NtNtCs17YjD8CsNSI_5serde3ser5implsmNtB8_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   11|  31.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  31.4k|            where
   13|  31.4k|                S: Serializer,
   14|  31.4k|            {
   15|  31.4k|                serializer.$method(*self $($cast)*)
   16|  31.4k|            }
_RINvXs1E_NtNtCs17YjD8CsNSI_5serde3ser5implsRmNtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  386|  31.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  31.4k|            where
  388|  31.4k|                S: Serializer,
  389|  31.4k|            {
  390|  31.4k|                (**self).serialize(serializer)
  391|  31.4k|            }
_RINvXs1p_NtNtCs17YjD8CsNSI_5serde3ser5implsTRmBG_RyRINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  314|  15.7k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  315|  15.7k|                where
  316|  15.7k|                    S: Serializer,
  317|  15.7k|                {
  318|  15.7k|                    let mut tuple = try!(serializer.serialize_tuple($len));
  319|       |                    $(
  320|  15.7k|                        try!(tuple.serialize_element(&self.$n));
  321|       |                    )+
  322|  15.7k|                    tuple.end()
  323|  15.7k|                }
_RINvXs1E_NtNtCs17YjD8CsNSI_5serde3ser5implsRINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  386|  15.7k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  15.7k|            where
  388|  15.7k|                S: Serializer,
  389|  15.7k|            {
  390|  15.7k|                (**self).serialize(serializer)
  391|  15.7k|            }
_RINvXs1k_NtNtCs17YjD8CsNSI_5serde3ser5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecRyENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  194|   183k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|   183k|            where
  196|   183k|                S: Serializer,
  197|   183k|            {
  198|   183k|                serializer.collect_seq(self)
  199|   183k|            }
_RINvXs1o_NtNtCs17YjD8CsNSI_5serde3ser5implsTNtNtCs3XquoB0ZjnL_17fvm_ipld_encoding5bytes8BytesSerINtNtCsiLX6d1GG2fK_5alloc3vec3VecRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEIB1x_RyEENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  314|   183k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  315|   183k|                where
  316|   183k|                    S: Serializer,
  317|   183k|                {
  318|   183k|                    let mut tuple = try!(serializer.serialize_tuple($len));
  319|       |                    $(
  320|   183k|                        try!(tuple.serialize_element(&self.$n));
  321|       |                    )+
  322|   183k|                    tuple.end()
  323|   183k|                }
_RINvXs1k_NtNtCs17YjD8CsNSI_5serde3ser5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  194|   183k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|   183k|            where
  196|   183k|                S: Serializer,
  197|   183k|            {
  198|   183k|                serializer.collect_seq(self)
  199|   183k|            }
_RINvXs1E_NtNtCs17YjD8CsNSI_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  386|  73.1k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  73.1k|            where
  388|  73.1k|                S: Serializer,
  389|  73.1k|            {
  390|  73.1k|                (**self).serialize(serializer)
  391|  73.1k|            }
_RINvXs1E_NtNtCs17YjD8CsNSI_5serde3ser5implsRRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  386|   244k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   244k|            where
  388|   244k|                S: Serializer,
  389|   244k|            {
  390|   244k|                (**self).serialize(serializer)
  391|   244k|            }
_RINvXs1E_NtNtCs17YjD8CsNSI_5serde3ser5implsRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  386|   244k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   244k|            where
  388|   244k|                S: Serializer,
  389|   244k|            {
  390|   244k|                (**self).serialize(serializer)
  391|   244k|            }
_RINvXs1E_NtNtCs17YjD8CsNSI_5serde3ser5implsRRyNtB9_9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  386|  57.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  57.4k|            where
  388|  57.4k|                S: Serializer,
  389|  57.4k|            {
  390|  57.4k|                (**self).serialize(serializer)
  391|  57.4k|            }

_RINvNtCs17YjD8CsNSI_5serde3ser17iterator_len_hintINtNtNtCslXuQP8d5bfj_4core5slice4iter4IterRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEECs7uao2NoihGb_11equivalence:
 1982|   183k|    match iter.size_hint() {
 1983|   183k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|   183k|}
_RNCINvYQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer11collect_seqRINtNtCsiLX6d1GG2fK_5alloc3vec3VecRyEE0Cs7uao2NoihGb_11equivalence:
 1286|  57.4k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCs17YjD8CsNSI_5serde3ser17iterator_len_hintINtNtNtCslXuQP8d5bfj_4core5slice4iter4IterRyEECs7uao2NoihGb_11equivalence:
 1982|   183k|    match iter.size_hint() {
 1983|   183k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|   183k|}
_RINvYQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer11collect_seqRINtNtCsiLX6d1GG2fK_5alloc3vec3VecRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEECs7uao2NoihGb_11equivalence:
 1275|   183k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|   183k|    where
 1277|   183k|        I: IntoIterator,
 1278|   183k|        <I as IntoIterator>::Item: Serialize,
 1279|   183k|    {
 1280|   183k|        let iter = iter.into_iter();
 1281|   183k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|   183k|            let mut iter = iter;
 1286|   183k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|   183k|        serializer.end()
 1297|   183k|    }
_RINvYQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer11collect_seqRINtNtCsiLX6d1GG2fK_5alloc3vec3VecRyEECs7uao2NoihGb_11equivalence:
 1275|   183k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|   183k|    where
 1277|   183k|        I: IntoIterator,
 1278|   183k|        <I as IntoIterator>::Item: Serialize,
 1279|   183k|    {
 1280|   183k|        let iter = iter.into_iter();
 1281|   183k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|   183k|            let mut iter = iter;
 1286|   183k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|   183k|        serializer.end()
 1297|   183k|    }
_RNCINvYQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer11collect_seqRINtNtCsiLX6d1GG2fK_5alloc3vec3VecRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEE0Cs7uao2NoihGb_11equivalence:
 1286|   244k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXsc_NtCsacR71AG7Nuv_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs17YjD8CsNSI_5serde3ser9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
  186|   244k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|   244k|    where
  188|   244k|        S: Serializer,
  189|   244k|    {
  190|   244k|        serializer.serialize_bytes(&self.bytes)
  191|   244k|    }
_RINvMNtCsacR71AG7Nuv_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsiLX6d1GG2fK_5alloc3vec3VechEECs7uao2NoihGb_11equivalence:
   60|   244k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|   244k|        ByteBuf {
   62|   244k|            bytes: bytes.into(),
   63|   244k|        }
   64|   244k|    }

_RINvNtCsfoKpyytHyUA_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderECs7uao2NoihGb_11equivalence:
   26|   262k|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|   262k|    let buf = match reader.fill(1)? {
   28|   262k|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|   262k|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|   171k|    Ok(byte)
   33|   262k|}

_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer24deserialize_tuple_structINtNvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtB38_13CollapsedNodepENtB1X_11Deserialize11deserialize9___VisitoryEECs7uao2NoihGb_11equivalence:
  354|  91.0k|    fn deserialize_tuple_struct<V>(
  355|  91.0k|        self,
  356|  91.0k|        _name: &'static str,
  357|  91.0k|        len: usize,
  358|  91.0k|        visitor: V,
  359|  91.0k|    ) -> Result<V::Value, Self::Error>
  360|  91.0k|    where
  361|  91.0k|        V: Visitor<'de>,
  362|  91.0k|    {
  363|  91.0k|        self.deserialize_tuple(len, visitor)
  364|  91.0k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCsdCHgg67ySCu_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECs7uao2NoihGb_11equivalence:
  318|   171k|    fn deserialize_newtype_struct<V>(
  319|   171k|        self,
  320|   171k|        name: &'static str,
  321|   171k|        visitor: V,
  322|   171k|    ) -> Result<V::Value, Self::Error>
  323|   171k|    where
  324|   171k|        V: Visitor<'de>,
  325|   171k|    {
  326|   171k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|   171k|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|   171k|    }
_RNvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess9size_hintCs7uao2NoihGb_11equivalence:
  500|   182k|    fn size_hint(&self) -> Option<usize> {
  501|   182k|        self.len
  502|   182k|    }
_RNCNvMs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderE8try_step0Cs7uao2NoihGb_11equivalence:
  106|   287k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs7_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer17deserialize_bytesNtNtCsdCHgg67ySCu_3cid5serde17BytesToCidVisitorECs7uao2NoihGb_11equivalence:
  646|   171k|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|   171k|        let byte = peek_one(&mut self.0.reader)?;
  648|   171k|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|   171k|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|   171k|                    Cow::Borrowed(buf) => {
  653|   171k|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|   171k|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      0|                    Cow::Owned(mut buf) => {
  660|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      0|                            buf.remove(0);
  664|      0|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      0|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|   171k|    }
_RNvMs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderE8try_stepCs7uao2NoihGb_11equivalence:
  101|   287k|    fn try_step<'a>(
  102|   287k|        &'a mut self,
  103|   287k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|   287k|    {
  105|   287k|        if self.reader.step_in() {
  106|   287k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|   287k|    }
_RNvMs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderE5arrayCs7uao2NoihGb_11equivalence:
  434|   182k|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|   182k|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|   182k|        Ok(Accessor {
  437|   182k|            de,
  438|   182k|            len: array_start.0,
  439|   182k|        })
  440|   182k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer15deserialize_u32NtNvXsT_NtB1X_5implsmNtB1X_11Deserialize11deserialize16PrimitiveVisitorECs7uao2NoihGb_11equivalence:
  142|  27.6k|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|  27.6k|        where V: Visitor<'de>
  144|  27.6k|        {
  145|  27.6k|            let value = <$t>::decode(&mut self.reader)?;
  146|  27.6k|            visitor.$visit(value)
  147|  27.6k|        }
_RINvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess17next_element_seedINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsiLX6d1GG2fK_5alloc3vec3VecINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEEECs7uao2NoihGb_11equivalence:
  484|  91.0k|        if let Some(len) = self.len.as_mut() {
  485|  91.0k|            if *len > 0 {
  486|  91.0k|                *len -= 1;
  487|  91.0k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  91.0k|    }
_RINvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess17next_element_seedINtNtCslXuQP8d5bfj_4core6marker11PhantomDatayEECs7uao2NoihGb_11equivalence:
  484|   123k|        if let Some(len) = self.len.as_mut() {
  485|   123k|            if *len > 0 {
  486|  32.6k|                *len -= 1;
  487|  32.6k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|  91.0k|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|   123k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer20deserialize_byte_bufNtNtCsaHmdmBitGtM_14cs_serde_bytes7bytebuf14ByteBufVisitorECs7uao2NoihGb_11equivalence:
  239|  91.0k|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  91.0k|    where
  241|  91.0k|        V: Visitor<'de>,
  242|  91.0k|    {
  243|  91.0k|        self.deserialize_bytes(visitor)
  244|  91.0k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitoryEECs7uao2NoihGb_11equivalence:
  334|  91.0k|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|  91.0k|    where
  336|  91.0k|        V: Visitor<'de>,
  337|  91.0k|    {
  338|  91.0k|        let mut de = self.try_step()?;
  339|  91.0k|        let seq = Accessor::array(&mut de)?;
  340|  91.0k|        visitor.visit_seq(seq)
  341|  91.0k|    }
_RINvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess17next_element_seedINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNvXNvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtB3C_13CollapsedNodepENtB1R_11Deserialize11deserializeINtB3x_9___VisitorpENtB1R_7Visitor9visit_seq17___DeserializeWithyEEECs7uao2NoihGb_11equivalence:
  484|  91.0k|        if let Some(len) = self.len.as_mut() {
  485|  91.0k|            if *len > 0 {
  486|  91.0k|                *len -= 1;
  487|  91.0k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  91.0k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECs7uao2NoihGb_11equivalence:
  142|  32.6k|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|  32.6k|        where V: Visitor<'de>
  144|  32.6k|        {
  145|  32.6k|            let value = <$t>::decode(&mut self.reader)?;
  146|  32.6k|            visitor.$visit(value)
  147|  32.6k|        }
_RNvMNtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderE11from_readerCs7uao2NoihGb_11equivalence:
   93|  91.0k|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|  91.0k|        Deserializer { reader }
   95|  91.0k|    }
_RINvNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de10from_sliceINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEECs7uao2NoihGb_11equivalence:
   40|  77.2k|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|  77.2k|where
   42|  77.2k|    T: de::Deserialize<'a>,
   43|  77.2k|{
   44|  77.2k|    let reader = SliceReader::new(buf);
   45|  77.2k|    let mut deserializer = Deserializer::from_reader(reader);
   46|  77.2k|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|  77.2k|    deserializer.end()?;
   48|  77.2k|    Ok(value)
   49|  77.2k|}
_RINvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess17next_element_seedINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEEECs7uao2NoihGb_11equivalence:
  484|  13.8k|        if let Some(len) = self.len.as_mut() {
  485|  13.8k|            if *len > 0 {
  486|  13.8k|                *len -= 1;
  487|  13.8k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  13.8k|    }
_RINvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess17next_element_seedINtNtCslXuQP8d5bfj_4core6marker11PhantomDatamEECs7uao2NoihGb_11equivalence:
  484|  27.6k|        if let Some(len) = self.len.as_mut() {
  485|  27.6k|            if *len > 0 {
  486|  27.6k|                *len -= 1;
  487|  27.6k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  27.6k|    }
_RINvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess17next_element_seedINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsiLX6d1GG2fK_5alloc3vec3VecyEEECs7uao2NoihGb_11equivalence:
  484|  91.0k|        if let Some(len) = self.len.as_mut() {
  485|  91.0k|            if *len > 0 {
  486|  91.0k|                *len -= 1;
  487|  91.0k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  91.0k|    }
_RINvMs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCsdCHgg67ySCu_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECs7uao2NoihGb_11equivalence:
  113|   171k|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|   171k|    where
  115|   171k|        V: Visitor<'de>,
  116|   171k|    {
  117|   171k|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|   171k|        match tag.0 {
  120|   171k|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|   171k|    }
_RNvMs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderE3endCs7uao2NoihGb_11equivalence:
  131|  91.0k|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|  91.0k|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|  91.0k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer17deserialize_bytesNtNtCsaHmdmBitGtM_14cs_serde_bytes7bytebuf14ByteBufVisitorECs7uao2NoihGb_11equivalence:
  228|  91.0k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  91.0k|    where
  230|  91.0k|        V: Visitor<'de>,
  231|  91.0k|    {
  232|  91.0k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  91.0k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  91.0k|    }
_RINvXs2_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de9SeqAccess17next_element_seedINtNtCslXuQP8d5bfj_4core6marker11PhantomDataINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEECs7uao2NoihGb_11equivalence:
  484|   262k|        if let Some(len) = self.len.as_mut() {
  485|   262k|            if *len > 0 {
  486|   171k|                *len -= 1;
  487|   171k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|  91.0k|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|   262k|    }
_RINvNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de10from_sliceINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4root4RootyEECs7uao2NoihGb_11equivalence:
   40|  13.8k|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|  13.8k|where
   42|  13.8k|    T: de::Deserialize<'a>,
   43|  13.8k|{
   44|  13.8k|    let reader = SliceReader::new(buf);
   45|  13.8k|    let mut deserializer = Deserializer::from_reader(reader);
   46|  13.8k|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|  13.8k|    deserializer.end()?;
   48|  13.8k|    Ok(value)
   49|  13.8k|}
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer17deserialize_tupleINtNvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtB31_13CollapsedNodepENtB1X_11Deserialize11deserialize9___VisitoryEECs7uao2NoihGb_11equivalence:
  344|  91.0k|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|  91.0k|    where
  346|  91.0k|        V: Visitor<'de>,
  347|  91.0k|    {
  348|  91.0k|        let mut de = self.try_step()?;
  349|  91.0k|        let seq = Accessor::tuple(&mut de, len)?;
  350|  91.0k|        visitor.visit_seq(seq)
  351|  91.0k|    }
_RNvMs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderE5tupleCs7uao2NoihGb_11equivalence:
  443|   104k|    pub fn tuple(
  444|   104k|        de: &'a mut Deserializer<R>,
  445|   104k|        len: usize,
  446|   104k|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|   104k|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|   104k|        if array_start.0 == Some(len) {
  450|   104k|            Ok(Accessor {
  451|   104k|                de,
  452|   104k|                len: array_start.0,
  453|   104k|            })
  454|       |        } else {
  455|      0|            Err(DecodeError::RequireLength {
  456|      0|                name: "tuple",
  457|      0|                expect: len,
  458|      0|                value: array_start.0.unwrap_or(0),
  459|      0|            })
  460|       |        }
  461|   104k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer17deserialize_tupleINtNvXs2M_NtB1X_5implsTppppENtB1X_11Deserialize11deserialize12TupleVisitormmyINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEEECs7uao2NoihGb_11equivalence:
  344|  13.8k|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|  13.8k|    where
  346|  13.8k|        V: Visitor<'de>,
  347|  13.8k|    {
  348|  13.8k|        let mut de = self.try_step()?;
  349|  13.8k|        let seq = Accessor::tuple(&mut de, len)?;
  350|  13.8k|        visitor.visit_seq(seq)
  351|  13.8k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderENtNtCs17YjD8CsNSI_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsiLX6d1GG2fK_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEECs7uao2NoihGb_11equivalence:
  334|  91.0k|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|  91.0k|    where
  336|  91.0k|        V: Visitor<'de>,
  337|  91.0k|    {
  338|  91.0k|        let mut de = self.try_step()?;
  339|  91.0k|        let seq = Accessor::array(&mut de)?;
  340|  91.0k|        visitor.visit_seq(seq)
  341|  91.0k|    }

_RINvXs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser14SerializeTuple17serialize_elementRINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEECs7uao2NoihGb_11equivalence:
  388|  15.7k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|  15.7k|        value.serialize(&mut *self.ser)
  390|  15.7k|    }
_RINvXs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser14SerializeTuple17serialize_elementINtNtCsiLX6d1GG2fK_5alloc3vec3VecRyEECs7uao2NoihGb_11equivalence:
  388|   183k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|   183k|        value.serialize(&mut *self.ser)
  390|   183k|    }
_RNvXs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser14SerializeTuple3endCs7uao2NoihGb_11equivalence:
  393|   199k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  394|   199k|        Ok(())
  395|   199k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser12SerializeSeq17serialize_elementRRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EECs7uao2NoihGb_11equivalence:
  369|   244k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|   244k|        value.serialize(&mut *self.ser)
  371|   244k|    }
_RINvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser12SerializeSeq17serialize_elementRRyECs7uao2NoihGb_11equivalence:
  369|  57.4k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  57.4k|        value.serialize(&mut *self.ser)
  371|  57.4k|    }
_RINvXs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser14SerializeTuple17serialize_elementRyECs7uao2NoihGb_11equivalence:
  388|  15.7k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|  15.7k|        value.serialize(&mut *self.ser)
  390|  15.7k|    }
_RINvXs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser14SerializeTuple17serialize_elementINtNtCsiLX6d1GG2fK_5alloc3vec3VecRINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EEECs7uao2NoihGb_11equivalence:
  388|   183k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|   183k|        value.serialize(&mut *self.ser)
  390|   183k|    }
_RNvXs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer15serialize_bytesCs7uao2NoihGb_11equivalence:
  160|   183k|        types::Bytes(v).encode(&mut self.writer)?;
  161|   183k|        Ok(())
  162|   183k|    }
_RINvXs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer24serialize_newtype_structNtNtCsacR71AG7Nuv_11serde_bytes7bytebuf7ByteBufECs7uao2NoihGb_11equivalence:
  199|   244k|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|   244k|        self,
  201|   244k|        name: &'static str,
  202|   244k|        value: &T,
  203|   244k|    ) -> Result<Self::Ok, Self::Error> {
  204|   244k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|   244k|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|   244k|    }
_RNvXs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer15serialize_tupleCs7uao2NoihGb_11equivalence:
  239|   199k|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|   199k|        Ok(BoundedCollect { ser: self })
  241|   199k|    }
_RNvXs7_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer15serialize_bytesCs7uao2NoihGb_11equivalence:
  550|   244k|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|   244k|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|   244k|        let prefixed = [&[0x00], value].concat();
  553|   244k|        // CIDs are serialized with CBOR tag 42.
  554|   244k|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|   244k|        Ok(())
  556|   244k|    }
_RNvXs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer13serialize_u64Cs7uao2NoihGb_11equivalence:
  123|  73.1k|        v.encode(&mut self.writer)?;
  124|  73.1k|        Ok(())
  125|  73.1k|    }
_RNvXs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer13serialize_seqCs7uao2NoihGb_11equivalence:
  226|   366k|        if let Some(len) = len {
  227|   366k|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|   366k|        Ok(Collect {
  232|   366k|            bounded: len.is_some(),
  233|   366k|            ser: self,
  234|   366k|        })
  235|   366k|    }
_RNvMNtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterE10into_innerCs7uao2NoihGb_11equivalence:
   56|   183k|    pub fn into_inner(self) -> W {
   57|   183k|        self.writer
   58|   183k|    }
_RNvMNtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterE3newCs7uao2NoihGb_11equivalence:
   51|   183k|    pub fn new(writer: W) -> Serializer<W> {
   52|   183k|        Serializer { writer }
   53|   183k|    }
_RINvNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser6to_vecINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4root4RootyEECs7uao2NoihGb_11equivalence:
   23|  15.7k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  15.7k|where
   25|  15.7k|    T: Serialize + ?Sized,
   26|  15.7k|{
   27|  15.7k|    let writer = BufWriter::new(Vec::new());
   28|  15.7k|    let mut serializer = Serializer::new(writer);
   29|  15.7k|    value.serialize(&mut serializer)?;
   30|  15.7k|    Ok(serializer.into_inner().into_inner())
   31|  15.7k|}
_RINvXs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser14SerializeTuple17serialize_elementRmECs7uao2NoihGb_11equivalence:
  388|  31.4k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|  31.4k|        value.serialize(&mut *self.ser)
  390|  31.4k|    }
_RINvNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser6to_vecINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEECs7uao2NoihGb_11equivalence:
   23|   167k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|   167k|where
   25|   167k|    T: Serialize + ?Sized,
   26|   167k|{
   27|   167k|    let writer = BufWriter::new(Vec::new());
   28|   167k|    let mut serializer = Serializer::new(writer);
   29|   167k|    value.serialize(&mut serializer)?;
   30|   167k|    Ok(serializer.into_inner().into_inner())
   31|   167k|}
_RINvXs1_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser14SerializeTuple17serialize_elementNtNtCs3XquoB0ZjnL_17fvm_ipld_encoding5bytes8BytesSerECs7uao2NoihGb_11equivalence:
  388|   183k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|   183k|        value.serialize(&mut *self.ser)
  390|   183k|    }
_RNvXs0_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser12SerializeSeq3endCs7uao2NoihGb_11equivalence:
  374|   366k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|   366k|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|   366k|        }
  378|       |
  379|   366k|        Ok(())
  380|   366k|    }
_RNvXs_NtCsfoKpyytHyUA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterENtNtCs17YjD8CsNSI_5serde3ser10Serializer13serialize_u32Cs7uao2NoihGb_11equivalence:
  117|  31.4k|        v.encode(&mut self.writer)?;
  118|  31.4k|        Ok(())
  119|  31.4k|    }

_RNvNtCsl9ScgBTLyac_15unsigned_varint6decode7is_lastCs7uao2NoihGb_11equivalence:
   90|  2.06M|pub fn is_last(b: u8) -> bool {
   91|  2.06M|    b & 0x80 == 0
   92|  2.06M|}
_RNvNtCsl9ScgBTLyac_15unsigned_varint6decode3u64Cs7uao2NoihGb_11equivalence:
  122|   687k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|   687k|    decode!(buf, 9, u64)
  124|   687k|}

_RNvNtCsl9ScgBTLyac_15unsigned_varint6encode2u8Cs7uao2NoihGb_11equivalence:
   45|   244k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|   244k|    encode!(number, buf)
   47|   244k|}
_RNvNtCsl9ScgBTLyac_15unsigned_varint6encode3u64Cs7uao2NoihGb_11equivalence:
   69|   734k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|   734k|    encode!(number, buf)
   71|   734k|}
_RNvNtCsl9ScgBTLyac_15unsigned_varint6encode10u64_bufferCs7uao2NoihGb_11equivalence:
  119|  1.42M|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.42M|    [0; U64_LEN]
  121|  1.42M|}
_RNvNtCsl9ScgBTLyac_15unsigned_varint6encode9u8_bufferCs7uao2NoihGb_11equivalence:
  101|   244k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|   244k|    [0; U8_LEN]
  103|   244k|}

_RINvNtCsl9ScgBTLyac_15unsigned_varint2io8read_u64QQRShECs7uao2NoihGb_11equivalence:
   31|   687k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|   687k|                let mut b = encode::$b();
   33|  1.03M|                for i in 0 .. b.len() {
   34|  1.03M|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.03M|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.03M|                    }
   38|  1.03M|                    if decode::is_last(b[i]) {
   39|   687k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|   343k|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|   687k|            }

_RNCNvXs_Cs7uao2NoihGb_11equivalenceNtB6_9OperationNtCs7icU9HQMbEh_9arbitrary9Arbitrary9size_hint0B6_:
   11|    962|#[derive(Debug, Arbitrary)]
_RNCNvCs7uao2NoihGb_11equivalence22rust_fuzzer_test_inputs_0B3_:
   67|  21.8k|        .map(|(k, v)| Operation {
   68|  21.8k|            idx: *k as u16,
   69|  21.8k|            method: Method::Insert(*v),
   70|  21.8k|            flush: 0,
   71|  21.8k|        })
_RNvXs_Cs7uao2NoihGb_11equivalenceNtB4_9OperationNtCs7icU9HQMbEh_9arbitrary9Arbitrary9arbitrary:
   11|  63.3k|#[derive(Debug, Arbitrary)]
_RNCNvCs7uao2NoihGb_11equivalence22rust_fuzzer_test_input0B3_:
   66|   227k|        .sorted_by_key(|(_, v)| *v)
_RNvXs_Cs7uao2NoihGb_11equivalenceNtB4_9OperationNtCs7icU9HQMbEh_9arbitrary9Arbitrary9size_hintB4_:
   11|    962|#[derive(Debug, Arbitrary)]
_RNvXs1_Cs7uao2NoihGb_11equivalenceNtB5_6MethodNtCs7icU9HQMbEh_9arbitrary9Arbitrary9arbitrary:
   18|  64.3k|#[derive(Debug, Arbitrary)]
_RNCNvXs1_Cs7uao2NoihGb_11equivalenceNtB7_6MethodNtCs7icU9HQMbEh_9arbitrary9Arbitrary9size_hint0B7_:
   18|    962|#[derive(Debug, Arbitrary)]
_RNvXs_Cs7uao2NoihGb_11equivalenceNtB4_9OperationNtCs7icU9HQMbEh_9arbitrary9Arbitrary19arbitrary_take_rest:
   11|    958|#[derive(Debug, Arbitrary)]
_RNvXs1_Cs7uao2NoihGb_11equivalenceNtB5_6MethodNtCs7icU9HQMbEh_9arbitrary9Arbitrary9size_hintB5_:
   18|    962|#[derive(Debug, Arbitrary)]
_RNvCs7uao2NoihGb_11equivalence7execute:
   24|  1.92k|fn execute(ops: Vec<Operation>) -> (Cid, ahash::AHashMap<u64, u64>) {
   25|  1.92k|    let db = fvm_ipld_blockstore::MemoryBlockstore::default();
   26|  1.92k|    let mut amt = Amt::new(&db);
   27|  1.92k|    let mut elements = ahash::AHashMap::new();
   28|       |
   29|  86.2k|    for (i, Operation { idx, method, flush }) in ops.into_iter().enumerate() {
   30|  86.2k|        let idx = idx as u64;
   31|  86.2k|        if flush > 255 - 13 {
   32|  13.8k|            // Periodic flushing and reloading of Amt to fuzz blockstore usage also
   33|  13.8k|            let cid = amt.flush().unwrap();
   34|  13.8k|            amt = Amt::load(&cid, &db).unwrap();
   35|  72.4k|        }
   36|       |
   37|  86.2k|        match method {
   38|  60.6k|            Method::Insert(v) => {
   39|  60.6k|                elements.insert(idx, v);
   40|  60.6k|                amt.set(idx, v).unwrap();
   41|  60.6k|            }
   42|       |            Method::Remove => {
   43|  11.0k|                let el = elements.remove(&idx);
   44|  11.0k|                let amt_deleted = amt.delete(idx).unwrap();
   45|  11.0k|                assert_eq!(amt_deleted, el, "step {}", i);
   46|       |            }
   47|       |            Method::Get => {
   48|  14.5k|                let ev = elements.get(&idx);
   49|  14.5k|                let av = amt.get(idx).unwrap();
   50|  14.5k|                assert_eq!(av, ev, "step {}", i);
   51|       |            }
   52|       |        }
   53|       |    }
   54|  1.92k|    (amt.flush().unwrap(), elements)
   55|  1.92k|}

_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE3getCs7uao2NoihGb_11equivalence:
  109|  14.5k|    pub fn get(&self, i: u64) -> Result<Option<&V>, Error> {
  110|  14.5k|        if i > MAX_INDEX {
  111|      0|            return Err(Error::OutOfRange(i));
  112|  14.5k|        }
  113|  14.5k|
  114|  14.5k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  115|  2.43k|            return Ok(None);
  116|  12.1k|        }
  117|  12.1k|
  118|  12.1k|        self.root
  119|  12.1k|            .node
  120|  12.1k|            .get(&self.block_store, self.height(), self.bit_width(), i)
  121|  14.5k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE9bit_widthCs7uao2NoihGb_11equivalence:
   70|   183k|    fn bit_width(&self) -> u32 {
   71|   183k|        self.root.bit_width
   72|   183k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE5flushCs7uao2NoihGb_11equivalence:
  263|  15.7k|        self.root.node.flush(&self.block_store)?;
  264|  15.7k|        Ok(self.block_store.put_cbor(&self.root, Code::Blake2b256)?)
  265|  15.7k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE6heightCs7uao2NoihGb_11equivalence:
   90|   179k|    pub fn height(&self) -> u32 {
   91|   179k|        self.root.height
   92|   179k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE3setCs7uao2NoihGb_11equivalence:
  124|  60.6k|    pub fn set(&mut self, i: u64, val: V) -> Result<(), Error> {
  125|  60.6k|        if i > MAX_INDEX {
  126|      0|            return Err(Error::OutOfRange(i));
  127|  60.6k|        }
  128|       |
  129|  70.3k|        while i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  130|       |            // node at index exists
  131|  9.66k|            if !self.root.node.is_empty() {
  132|  4.30k|                // Parent node for expansion
  133|  4.30k|                let mut new_links: Vec<Option<Link<V>>> = init_sized_vec(self.root.bit_width);
  134|  4.30k|
  135|  4.30k|                // Take root node to be moved down
  136|  4.30k|                let node = std::mem::replace(&mut self.root.node, Node::empty());
  137|  4.30k|
  138|  4.30k|                // Set link to child node being expanded
  139|  4.30k|                new_links[0] = Some(Link::Dirty(Box::new(node)));
  140|  4.30k|
  141|  4.30k|                self.root.node = Node::Link { links: new_links };
  142|  5.35k|            } else {
  143|  5.35k|                // If first expansion is before a value inserted, convert base node to Link
  144|  5.35k|                self.root.node = Node::Link {
  145|  5.35k|                    links: init_sized_vec(self.bit_width()),
  146|  5.35k|                };
  147|  5.35k|            }
  148|       |            // Incrememnt height after each iteration
  149|  9.66k|            self.root.height += 1;
  150|       |        }
  151|       |
  152|  60.6k|        if self
  153|  60.6k|            .root
  154|  60.6k|            .node
  155|  60.6k|            .set(&self.block_store, self.height(), self.bit_width(), i, val)?
  156|  60.6k|            .is_none()
  157|  47.3k|        {
  158|  47.3k|            self.root.count += 1;
  159|  47.3k|        }
  160|       |
  161|  60.6k|        Ok(())
  162|  60.6k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE3newCs7uao2NoihGb_11equivalence:
   58|  1.92k|    pub fn new(block_store: BS) -> Self {
   59|  1.92k|        Self::new_with_bit_width(block_store, DEFAULT_BIT_WIDTH)
   60|  1.92k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE18new_with_bit_widthCs7uao2NoihGb_11equivalence:
   63|  1.92k|    pub fn new_with_bit_width(block_store: BS, bit_width: u32) -> Self {
   64|  1.92k|        Self {
   65|  1.92k|            root: Root::new(bit_width),
   66|  1.92k|            block_store,
   67|  1.92k|        }
   68|  1.92k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE6deleteCs7uao2NoihGb_11equivalence:
  175|  11.0k|    pub fn delete(&mut self, i: u64) -> Result<Option<V>, Error> {
  176|  11.0k|        if i > MAX_INDEX {
  177|      0|            return Err(Error::OutOfRange(i));
  178|  11.0k|        }
  179|  11.0k|
  180|  11.0k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  181|       |            // Index was out of range of current AMT
  182|  1.37k|            return Ok(None);
  183|  9.66k|        }
  184|       |
  185|       |        // Delete node from AMT
  186|  9.66k|        let deleted =
  187|  9.66k|            self.root
  188|  9.66k|                .node
  189|  9.66k|                .delete(&self.block_store, self.height(), self.bit_width(), i)?;
  190|       |
  191|  9.66k|        if deleted.is_none() {
  192|  6.12k|            return Ok(None);
  193|  3.54k|        }
  194|  3.54k|
  195|  3.54k|        self.root.count -= 1;
  196|  3.54k|
  197|  3.54k|        if self.root.node.is_empty() {
  198|    316|            // Last link was removed, replace root with a leaf node and reset height.
  199|    316|            self.root.node = Node::Leaf {
  200|    316|                vals: init_sized_vec(self.root.bit_width),
  201|    316|            };
  202|    316|            self.root.height = 0;
  203|    316|        } else {
  204|       |            // Handle collapsing node when the root is a link node with only one link,
  205|       |            // sub node can be moved up into the root.
  206|  4.31k|            while self.root.node.can_collapse() && self.height() > 0 {
  207|  1.09k|                let sub_node: Node<V> = match &mut self.root.node {
  208|  1.09k|                    Node::Link { links, .. } => match &mut links[0] {
  209|    599|                        Some(Link::Dirty(node)) => {
  210|    599|                            *std::mem::replace(node, Box::new(Node::empty()))
  211|       |                        }
  212|    494|                        Some(Link::Cid { cid, cache }) => {
  213|    494|                            let cache_node = std::mem::take(cache);
  214|    494|                            if let Some(sn) = cache_node.into_inner() {
  215|    124|                                *sn
  216|       |                            } else {
  217|       |                                // Only retrieve sub node if not found in cache
  218|    370|                                self.block_store
  219|    370|                                    .get_cbor::<CollapsedNode<V>>(cid)?
  220|    370|                                    .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  221|    370|                                    .expand(self.root.bit_width)?
  222|       |                            }
  223|       |                        }
  224|      0|                        _ => unreachable!("First index checked to be Some in `can_collapse`"),
  225|       |                    },
  226|      0|                    Node::Leaf { .. } => unreachable!("Non zero height cannot be a leaf node"),
  227|       |                };
  228|       |
  229|  1.09k|                self.root.node = sub_node;
  230|  1.09k|                self.root.height -= 1;
  231|       |            }
  232|       |        }
  233|       |
  234|  3.54k|        Ok(deleted)
  235|  11.0k|    }
_RNvMs_NtCsfIuMWG6gMwD_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE4loadCs7uao2NoihGb_11equivalence:
   75|  13.8k|    pub fn load(cid: &Cid, block_store: BS) -> Result<Self, Error> {
   76|       |        // Load root bytes from database
   77|  13.8k|        let root: Root<V> = block_store
   78|  13.8k|            .get_cbor(cid)?
   79|  13.8k|            .ok_or_else(|| Error::CidNotFound(cid.to_string()))?;
   80|       |
   81|       |        // Sanity check, this should never be possible.
   82|  13.8k|        if root.height > MAX_HEIGHT {
   83|      0|            return Err(Error::MaxHeight(root.height, MAX_HEIGHT));
   84|  13.8k|        }
   85|  13.8k|
   86|  13.8k|        Ok(Self { root, block_store })
   87|  13.8k|    }

_RNCINvCsfIuMWG6gMwD_12fvm_ipld_amt14init_sized_vecINtNtB4_4node4LinkyEE0Cs7uao2NoihGb_11equivalence:
   37|  1.33M|    std::iter::repeat_with(|| None)
_RINvCsfIuMWG6gMwD_12fvm_ipld_amt14init_sized_vecyECs7uao2NoihGb_11equivalence:
   36|  58.8k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   37|  58.8k|    std::iter::repeat_with(|| None)
   38|  58.8k|        .take(1 << bit_width)
   39|  58.8k|        .collect()
   40|  58.8k|}
_RNCINvCsfIuMWG6gMwD_12fvm_ipld_amt14init_sized_vecyE0Cs7uao2NoihGb_11equivalence:
   37|   470k|    std::iter::repeat_with(|| None)
_RINvCsfIuMWG6gMwD_12fvm_ipld_amt14init_sized_vecINtNtB2_4node4LinkyEECs7uao2NoihGb_11equivalence:
   36|   166k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   37|   166k|    std::iter::repeat_with(|| None)
   38|   166k|        .take(1 << bit_width)
   39|   166k|        .collect()
   40|   166k|}
_RNvCsfIuMWG6gMwD_12fvm_ipld_amt16nodes_for_height:
   28|   542k|fn nodes_for_height(bit_width: u32, height: u32) -> u64 {
   29|   542k|    let height_log_two = bit_width as u64 * height as u64;
   30|   542k|    if height_log_two >= 64 {
   31|      0|        return std::u64::MAX;
   32|   542k|    }
   33|   542k|    1 << height_log_two
   34|   542k|}
_RNvCsfIuMWG6gMwD_12fvm_ipld_amt10bmap_bytes:
   42|  91.0k|fn bmap_bytes(bit_width: u32) -> usize {
   43|  91.0k|    if bit_width <= 3 {
   44|  91.0k|        1
   45|       |    } else {
   46|      0|        1 << (bit_width - 3)
   47|       |    }
   48|  91.0k|}

_RNCINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0Cs7uao2NoihGb_11equivalence:
  240|  5.83k|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
_RINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB6_4NodeyE5flushRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs7uao2NoihGb_11equivalence:
  184|   183k|        if let Node::Link { links } = self {
  185|   244k|            for link in links.iter_mut().flatten() {
  186|       |                // links should only be flushed if the bitmap is set.
  187|   244k|                if let Link::Dirty(n) = link {
  188|       |                    // flush sub node to clear caches
  189|   167k|                    n.flush(bs)?;
  190|       |
  191|       |                    // Puts node in blockstore and and retrieves it's CID
  192|   167k|                    let cid = bs.put_cbor(n, Code::Blake2b256)?;
  193|       |
  194|       |                    // Replace the data with some arbitrary node to move without requiring clone
  195|   167k|                    let existing = std::mem::replace(n, Box::new(Node::empty()));
  196|   167k|
  197|   167k|                    // Can keep the flushed node in link cache
  198|   167k|                    let cache = OnceCell::from(existing);
  199|   167k|                    *link = Link::Cid { cid, cache };
  200|  77.1k|                }
  201|       |            }
  202|  50.8k|        }
  203|       |
  204|   183k|        Ok(())
  205|   183k|    }
_RNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB5_4NodeyE12can_collapseCs7uao2NoihGb_11equivalence:
  209|  4.31k|    pub(super) fn can_collapse(&self) -> bool {
  210|  4.31k|        match self {
  211|  3.97k|            Node::Link { links } => {
  212|  3.97k|                // Check if first index is a link and all other values are empty.
  213|  3.97k|                links.get(0).and_then(|l| l.as_ref()).is_some()
  214|  3.64k|                    && links
  215|  3.64k|                        .get(1..)
  216|  3.64k|                        .map(|l| l.iter().all(|l| l.is_none()))
  217|  3.64k|                        .unwrap_or(true)
  218|       |            }
  219|    344|            Node::Leaf { .. } => false,
  220|       |        }
  221|  4.31k|    }
_RINvXNvXNvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtBb_13CollapsedNodepENtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserializeINtB6_9___VisitorpENtB1e_7Visitor9visit_seqINtB3_17___DeserializeWithyEB1c_11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  119|  91.0k|#[derive(Serialize, Deserialize)]
_RNCNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapses_0Cs7uao2NoihGb_11equivalence:
  216|  3.64k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB5_4NodeyE5emptyCs7uao2NoihGb_11equivalence:
  176|   176k|    pub(super) fn empty() -> Self {
  177|   176k|        Node::Leaf {
  178|   176k|            vals: Default::default(),
  179|   176k|        }
  180|   176k|    }
_RNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB5_4NodeyE8set_leafCs7uao2NoihGb_11equivalence:
  333|  60.6k|    fn set_leaf(&mut self, i: u64, val: V) -> Option<V> {
  334|  60.6k|        match self {
  335|  60.6k|            Node::Leaf { vals } => {
  336|  60.6k|                let prev = std::mem::replace(
  337|  60.6k|                    vals.get_mut(usize::try_from(i).unwrap()).unwrap(),
  338|  60.6k|                    Some(val),
  339|  60.6k|                );
  340|  60.6k|                prev
  341|       |            }
  342|      0|            Node::Link { .. } => panic!("set_leaf should never be called on a shard of links"),
  343|       |        }
  344|  60.6k|    }
_RINvXs2_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB6_4NodeyENtNtCs17YjD8CsNSI_5serde3ser9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   84|   183k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   85|   183k|    where
   86|   183k|        S: ser::Serializer,
   87|   183k|    {
   88|   183k|        match &self {
   89|  50.8k|            Node::Leaf { vals } => {
   90|  50.8k|                let mut values = Vec::<&V>::with_capacity(vals.len());
   91|  50.8k|                let mut bmap = vec![0u8; ((vals.len().saturating_sub(1)) / 8) + 1];
   92|   406k|                for (i, v) in vals.iter().enumerate() {
   93|   406k|                    if let Some(val) = v {
   94|  57.4k|                        values.push(val);
   95|  57.4k|                        bmap[i / 8] |= 1 << (i % 8);
   96|   349k|                    }
   97|       |                }
   98|  50.8k|                (BytesSer(&bmap), Vec::<&Cid>::new(), values).serialize(s)
   99|       |            }
  100|   132k|            Node::Link { links } => {
  101|   132k|                let mut collapsed = Vec::<&Cid>::with_capacity(links.len());
  102|   132k|                let mut bmap = vec![0u8; ((links.len().saturating_sub(1)) / 8) + 1];
  103|  1.05M|                for (i, v) in links.iter().enumerate() {
  104|  1.05M|                    if let Some(val) = v {
  105|   244k|                        if let Link::Cid { cid, .. } = val {
  106|   244k|                            collapsed.push(cid);
  107|   244k|                            bmap[i / 8] |= 1 << (i % 8);
  108|   244k|                        } else {
  109|      0|                            return Err(ser::Error::custom(Error::Cached));
  110|       |                        }
  111|   815k|                    }
  112|       |                }
  113|   132k|                (BytesSer(&bmap), collapsed, Vec::<&V>::new()).serialize(s)
  114|       |            }
  115|       |        }
  116|   183k|    }
_RNCINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB8_4NodeyE6deleteRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0Cs7uao2NoihGb_11equivalence:
  384|  7.10k|                        cache.get_or_try_init(|| {
  385|  7.10k|                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  386|  7.10k|                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  387|  7.10k|                                .expand(bit_width)
  388|  7.10k|                                .map(Box::new)
  389|  7.10k|                        })?;
_RNCINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0Cs7uao2NoihGb_11equivalence:
  247|  32.9k|                        let cached_node = cache.get_or_try_init(|| {
  248|  32.9k|                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  249|  32.9k|                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  250|  32.9k|                                .expand(bit_width)
  251|  32.9k|                                .map(Box::new)
  252|  32.9k|                        })?;
_RINvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtB5_13CollapsedNodeyENtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
  119|  91.0k|#[derive(Serialize, Deserialize)]
_RNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB5_4NodeyE8is_emptyCs7uao2NoihGb_11equivalence:
  224|  28.8k|    pub(super) fn is_empty(&self) -> bool {
  225|  28.8k|        match self {
  226|  23.2k|            Node::Link { links } => links.iter().all(|l| l.is_none()),
  227|  5.54k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
  228|       |        }
  229|  28.8k|    }
_RNCNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapse0Cs7uao2NoihGb_11equivalence:
  213|  3.97k|                links.get(0).and_then(|l| l.as_ref()).is_some()
_RNCNCNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB9_4NodeyE12can_collapses_00Cs7uao2NoihGb_11equivalence:
  216|  10.6k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RNCNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_emptys_0Cs7uao2NoihGb_11equivalence:
  227|  33.9k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
_RNvXs1_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB5_4LinkyEINtNtCslXuQP8d5bfj_4core7convert4FromINtNtCsdCHgg67ySCu_3cid3cid3CidKj40_EE4fromCs7uao2NoihGb_11equivalence:
   62|   171k|    fn from(cid: Cid) -> Link<V> {
   63|   171k|        Link::Cid {
   64|   171k|            cid,
   65|   171k|            cache: Default::default(),
   66|   171k|        }
   67|   171k|    }
_RNCINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0Cs7uao2NoihGb_11equivalence:
  245|  48.2k|                match links.get(sub_i).and_then(|v| v.as_ref()) {
_RINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB6_4NodeyE6deleteRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs7uao2NoihGb_11equivalence:
  347|  40.2k|    pub(super) fn delete<DB: Blockstore>(
  348|  40.2k|        &mut self,
  349|  40.2k|        bs: &DB,
  350|  40.2k|        height: u32,
  351|  40.2k|        bit_width: u32,
  352|  40.2k|        i: u64,
  353|  40.2k|    ) -> Result<Option<V>, Error> {
  354|  40.2k|        match self {
  355|  4.65k|            Self::Leaf { vals } => Ok(vals
  356|  4.65k|                .get_mut(usize::try_from(i).unwrap())
  357|  4.65k|                .and_then(std::mem::take)),
  358|  35.5k|            Self::Link { links } => {
  359|  35.5k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  360|  35.5k|                    .try_into()
  361|  35.5k|                    .unwrap();
  362|  35.5k|                let (deleted, replace) = match &mut links[sub_i] {
  363|  19.6k|                    Some(Link::Dirty(n)) => {
  364|  19.6k|                        let deleted = n.delete(
  365|  19.6k|                            bs,
  366|  19.6k|                            height - 1,
  367|  19.6k|                            bit_width,
  368|  19.6k|                            i % nodes_for_height(bit_width, height),
  369|  19.6k|                        )?;
  370|  19.6k|                        if deleted.is_none() {
  371|       |                            // Index to be deleted was not found
  372|  8.43k|                            return Ok(None);
  373|  11.2k|                        }
  374|  11.2k|                        if !n.is_empty() {
  375|       |                            // Link node is not empty yet, just return deleted
  376|  7.67k|                            return Ok(deleted);
  377|  3.54k|                        }
  378|  3.54k|
  379|  3.54k|                        // Remove needs to be done outside of the `if let` for memory safety.
  380|  3.54k|                        (deleted, None)
  381|       |                    }
  382|  10.9k|                    Some(Link::Cid { cid, cache }) => {
  383|  10.9k|                        // Take cache, will be replaced if no nodes deleted
  384|  10.9k|                        cache.get_or_try_init(|| {
  385|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  386|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  387|       |                                .expand(bit_width)
  388|       |                                .map(Box::new)
  389|  10.9k|                        })?;
  390|  10.9k|                        let sub_node = cache.get_mut().expect("filled line above");
  391|  10.9k|                        let deleted = sub_node.delete(
  392|  10.9k|                            bs,
  393|  10.9k|                            height - 1,
  394|  10.9k|                            bit_width,
  395|  10.9k|                            i % nodes_for_height(bit_width, height),
  396|  10.9k|                        )?;
  397|  10.9k|                        if deleted.is_none() {
  398|       |                            // Index to be deleted was not found
  399|  6.49k|                            return Ok(None);
  400|  4.42k|                        };
  401|  4.42k|                        let sub_node = std::mem::replace(sub_node, Box::new(Node::empty()));
  402|  4.42k|
  403|  4.42k|                        if sub_node.is_empty() {
  404|       |                            // Sub node is empty, clear link.
  405|  2.11k|                            (deleted, None)
  406|       |                        } else {
  407|       |                            // Link was modified and is now marked dirty.
  408|  2.30k|                            (deleted, Some(Link::Dirty(sub_node)))
  409|       |                        }
  410|       |                    }
  411|       |                    // Link index is empty.
  412|  5.01k|                    None => return Ok(None),
  413|       |                };
  414|       |
  415|  7.96k|                links[sub_i] = replace;
  416|  7.96k|
  417|  7.96k|                Ok(deleted)
  418|       |            }
  419|       |        }
  420|  40.2k|    }
_RINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB6_4NodeyE3getRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs7uao2NoihGb_11equivalence:
  232|  54.1k|    pub(super) fn get<DB: Blockstore>(
  233|  54.1k|        &self,
  234|  54.1k|        bs: &DB,
  235|  54.1k|        height: u32,
  236|  54.1k|        bit_width: u32,
  237|  54.1k|        i: u64,
  238|  54.1k|    ) -> Result<Option<&V>, Error> {
  239|  54.1k|        match self {
  240|  5.83k|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
  241|  48.2k|            Node::Link { links, .. } => {
  242|  48.2k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  243|  48.2k|                    .try_into()
  244|  48.2k|                    .unwrap();
  245|  48.2k|                match links.get(sub_i).and_then(|v| v.as_ref()) {
  246|  34.2k|                    Some(Link::Cid { cid, cache }) => {
  247|  34.2k|                        let cached_node = cache.get_or_try_init(|| {
  248|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  249|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  250|       |                                .expand(bit_width)
  251|       |                                .map(Box::new)
  252|  34.2k|                        })?;
  253|       |
  254|  34.2k|                        cached_node.get(
  255|  34.2k|                            bs,
  256|  34.2k|                            height - 1,
  257|  34.2k|                            bit_width,
  258|  34.2k|                            i % nodes_for_height(bit_width, height),
  259|  34.2k|                        )
  260|       |                    }
  261|  7.69k|                    Some(Link::Dirty(n)) => n.get(
  262|  7.69k|                        bs,
  263|  7.69k|                        height - 1,
  264|  7.69k|                        bit_width,
  265|  7.69k|                        i % nodes_for_height(bit_width, height),
  266|  7.69k|                    ),
  267|  6.28k|                    None => Ok(None),
  268|       |                }
  269|       |            }
  270|       |        }
  271|  54.1k|    }
_RINvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB6_4NodeyE3setRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs7uao2NoihGb_11equivalence:
  274|   350k|    pub(super) fn set<DB: Blockstore>(
  275|   350k|        &mut self,
  276|   350k|        bs: &DB,
  277|   350k|        height: u32,
  278|   350k|        bit_width: u32,
  279|   350k|        i: u64,
  280|   350k|        val: V,
  281|   350k|    ) -> Result<Option<V>, Error> {
  282|   350k|        if height == 0 {
  283|  60.6k|            return Ok(self.set_leaf(i, val));
  284|   290k|        }
  285|   290k|
  286|   290k|        let nfh = nodes_for_height(bit_width, height);
  287|   290k|
  288|   290k|        // If dividing by nodes for height should give an index for link in node
  289|   290k|        let idx: usize = (i / nfh).try_into().expect("index overflow");
  290|       |
  291|   290k|        if let Node::Link { links } = self {
  292|   290k|            links[idx] = match &mut links[idx] {
  293|  42.8k|                Some(Link::Cid { cid, cache }) => {
  294|  42.8k|                    let cache_node = std::mem::take(cache);
  295|  42.8k|                    let sub_node = if let Some(sn) = cache_node.into_inner() {
  296|  6.02k|                        sn
  297|       |                    } else {
  298|       |                        // Only retrieve sub node if not found in cache
  299|  36.8k|                        bs.get_cbor::<CollapsedNode<V>>(cid)?
  300|  36.8k|                            .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  301|  36.8k|                            .expand(bit_width)
  302|  36.8k|                            .map(Box::new)?
  303|       |                    };
  304|       |
  305|  42.8k|                    Some(Link::Dirty(sub_node))
  306|       |                }
  307|       |                None => {
  308|   122k|                    let node = match height {
  309|  42.5k|                        1 => Node::Leaf {
  310|  42.5k|                            vals: init_sized_vec(bit_width),
  311|  42.5k|                        },
  312|  79.7k|                        _ => Node::Link {
  313|  79.7k|                            links: init_sized_vec(bit_width),
  314|  79.7k|                        },
  315|       |                    };
  316|   122k|                    Some(Link::Dirty(Box::new(node)))
  317|       |                }
  318|   125k|                Some(Link::Dirty(node)) => {
  319|   125k|                    return node.set(bs, height - 1, bit_width, i % nfh, val)
  320|       |                }
  321|       |            };
  322|       |
  323|   165k|            if let Some(Link::Dirty(n)) = &mut links[idx] {
  324|   165k|                n.set(bs, height - 1, bit_width, i % nfh, val)
  325|       |            } else {
  326|      0|                unreachable!("Value is set as cached")
  327|       |            }
  328|       |        } else {
  329|      0|            unreachable!("should not be handled");
  330|       |        }
  331|   350k|    }
_RNCINvXNvXNvNtCsfIuMWG6gMwD_12fvm_ipld_amt4nodes_1__INtBa_13CollapsedNodepENtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserializeINtB5_9___VisitoryENtB1d_7Visitor9visit_seqINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEE0Cs7uao2NoihGb_11equivalence:
  119|  91.0k|#[derive(Serialize, Deserialize)]
_RNvMs3_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB5_13CollapsedNodeyE6expandCs7uao2NoihGb_11equivalence:
  123|  91.0k|    pub(crate) fn expand(self, bit_width: u32) -> Result<Node<V>, Error> {
  124|  91.0k|        let CollapsedNode(bmap, links, values) = self;
  125|  91.0k|        if !links.is_empty() && !values.is_empty() {
  126|      0|            return Err(Error::LinksAndValues);
  127|  91.0k|        }
  128|  91.0k|
  129|  91.0k|        if bmap_bytes(bit_width) != bmap.len() {
  130|      0|            return Err(anyhow!(
  131|      0|                "expected bitfield of length {}, found bitfield with length {}",
  132|      0|                bmap_bytes(bit_width),
  133|      0|                bmap.len()
  134|      0|            )
  135|      0|            .into());
  136|  91.0k|        }
  137|  91.0k|
  138|  91.0k|        if !links.is_empty() {
  139|  77.0k|            let mut links_iter = links.into_iter();
  140|  77.0k|            let mut links = init_sized_vec::<Link<V>>(bit_width);
  141|   616k|            for (i, v) in links.iter_mut().enumerate() {
  142|   616k|                if bmap[i / 8] & (1 << (i % 8)) != 0 {
  143|   171k|                    *v = Some(Link::from(links_iter.next().ok_or_else(|| {
  144|       |                        anyhow!("Bitmap contained more set bits than links provided",)
  145|   171k|                    })?))
  146|   444k|                }
  147|       |            }
  148|  77.0k|            if links_iter.next().is_some() {
  149|      0|                return Err(anyhow!("Bitmap contained less set bits than links provided",).into());
  150|  77.0k|            }
  151|  77.0k|            Ok(Node::Link { links })
  152|       |        } else {
  153|  14.0k|            let mut val_iter = values.into_iter();
  154|  14.0k|            let mut vals = init_sized_vec::<V>(bit_width);
  155|   112k|            for (i, v) in vals.iter_mut().enumerate() {
  156|   112k|                if bmap[i / 8] & (1 << (i % 8)) != 0 {
  157|  18.8k|                    *v = Some(val_iter.next().ok_or_else(|| {
  158|       |                        anyhow!("Bitmap contained more set bits than values provided")
  159|  18.8k|                    })?)
  160|  93.3k|                }
  161|       |            }
  162|  14.0k|            if val_iter.next().is_some() {
  163|      0|                return Err(anyhow!("Bitmap contained less set bits than values provided").into());
  164|  14.0k|            }
  165|  14.0k|            Ok(Node::Leaf { vals })
  166|       |        }
  167|  91.0k|    }
_RNCNvMs4_NtCsfIuMWG6gMwD_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_empty0Cs7uao2NoihGb_11equivalence:
  226|  88.3k|            Node::Link { links } => links.iter().all(|l| l.is_none()),

_RINvXs0_NtCsfIuMWG6gMwD_12fvm_ipld_amt4rootINtB6_4RootyENtNtCs17YjD8CsNSI_5serde2de11Deserialize11deserializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils11SliceReaderEECs7uao2NoihGb_11equivalence:
   48|  13.8k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   49|  13.8k|    where
   50|  13.8k|        D: de::Deserializer<'de>,
   51|  13.8k|    {
   52|  13.8k|        let (bit_width, height, count, node): (_, _, _, CollapsedNode<V>) =
   53|  13.8k|            Deserialize::deserialize(deserializer)?;
   54|       |        Ok(Self {
   55|  13.8k|            bit_width,
   56|  13.8k|            height,
   57|  13.8k|            count,
   58|  13.8k|            node: node.expand(bit_width).map_err(de::Error::custom)?,
   59|       |        })
   60|  13.8k|    }
_RNvMNtCsfIuMWG6gMwD_12fvm_ipld_amt4rootINtB2_4RootyE3newCs7uao2NoihGb_11equivalence:
   20|  1.92k|    pub(super) fn new(bit_width: u32) -> Self {
   21|  1.92k|        Self {
   22|  1.92k|            bit_width,
   23|  1.92k|            count: 0,
   24|  1.92k|            height: 0,
   25|  1.92k|            node: Node::Leaf {
   26|  1.92k|                vals: init_sized_vec(bit_width),
   27|  1.92k|            },
   28|  1.92k|        }
   29|  1.92k|    }
_RINvXs_NtCsfIuMWG6gMwD_12fvm_ipld_amt4rootINtB5_4RootyENtNtCs17YjD8CsNSI_5serde3ser9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
   36|  15.7k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   37|  15.7k|    where
   38|  15.7k|        S: ser::Serializer,
   39|  15.7k|    {
   40|  15.7k|        (&self.bit_width, &self.height, &self.count, &self.node).serialize(s)
   41|  15.7k|    }

_RNvMNtCskChX8UIw6rR_19fvm_ipld_blockstore5blockINtB2_5BlockRINtNtCsiLX6d1GG2fK_5alloc3vec3VechEE3cidCs7uao2NoihGb_11equivalence:
   26|   183k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   27|   183k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   28|   183k|    }
_RNvXs_NtCskChX8UIw6rR_19fvm_ipld_blockstore5blockINtB4_5BlockRINtNtCsiLX6d1GG2fK_5alloc3vec3VechEEINtNtCslXuQP8d5bfj_4core7convert5AsRefShE6as_refCs7uao2NoihGb_11equivalence:
   40|   183k|    fn as_ref(&self) -> &[u8] {
   41|   183k|        self.data.as_ref()
   42|   183k|    }

_RNvXCskChX8UIw6rR_19fvm_ipld_blockstoreRNtNtB2_6memory16MemoryBlockstoreNtB2_10Blockstore3getCs7uao2NoihGb_11equivalence:
   92|  91.0k|    fn get(&self, k: &Cid) -> Result<Option<Vec<u8>>> {
   93|  91.0k|        (*self).get(k)
   94|  91.0k|    }
_RINvXCskChX8UIw6rR_19fvm_ipld_blockstoreRNtNtB3_6memory16MemoryBlockstoreNtB3_10Blockstore3putRINtNtCsiLX6d1GG2fK_5alloc3vec3VechEECs7uao2NoihGb_11equivalence:
  104|   183k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  105|   183k|    where
  106|   183k|        Self: Sized,
  107|   183k|        D: AsRef<[u8]>,
  108|   183k|    {
  109|   183k|        (*self).put(mh_code, block)
  110|   183k|    }
_RINvYNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCsiLX6d1GG2fK_5alloc3vec3VechEECs7uao2NoihGb_11equivalence:
   37|   183k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   38|   183k|    where
   39|   183k|        Self: Sized,
   40|   183k|        D: AsRef<[u8]>,
   41|   183k|    {
   42|   183k|        let k = block.cid(mh_code);
   43|   183k|        self.put_keyed(&k, block.as_ref())?;
   44|   183k|        Ok(k)
   45|   183k|    }

_RNvXs1_NtCskChX8UIw6rR_19fvm_ipld_blockstore6memoryNtB5_16MemoryBlockstoreNtNtCslXuQP8d5bfj_4core7default7Default7defaultCs7uao2NoihGb_11equivalence:
    9|  1.92k|#[derive(Debug, Default, Clone)]
_RNvXs_NtCskChX8UIw6rR_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   29|   183k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   30|   183k|        self.blocks.borrow_mut().insert(*k, block.into());
   31|   183k|        Ok(())
   32|   183k|    }
_RNvXs_NtCskChX8UIw6rR_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore3get:
   25|  91.0k|    fn get(&self, k: &Cid) -> Result<Option<Vec<u8>>> {
   26|  91.0k|        Ok(self.blocks.borrow().get(k).cloned())
   27|  91.0k|    }

_RINvXNvNtCs3XquoB0ZjnL_17fvm_ipld_encoding5bytes1__NtB5_8BytesSerNtNtCs17YjD8CsNSI_5serde3ser9Serialize9serializeQINtNtCsfoKpyytHyUA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs9gAJ6Qj8foR_7cbor4ii4core5utils9BufWriterEECs7uao2NoihGb_11equivalence:
    8|   183k|#[derive(Serialize)]

_RINvYRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs3XquoB0ZjnL_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEECs7uao2NoihGb_11equivalence:
   24|   167k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   25|   167k|    where
   26|   167k|        S: ser::Serialize,
   27|   167k|    {
   28|   167k|        let bytes = crate::to_vec(obj)?;
   29|   167k|        self.put(
   30|   167k|            code,
   31|   167k|            &Block {
   32|   167k|                codec: DAG_CBOR,
   33|   167k|                data: &bytes,
   34|   167k|            },
   35|   167k|        )
   36|   167k|    }
_RINvYRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs3XquoB0ZjnL_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4root4RootyEECs7uao2NoihGb_11equivalence:
   24|  15.7k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   25|  15.7k|    where
   26|  15.7k|        S: ser::Serialize,
   27|  15.7k|    {
   28|  15.7k|        let bytes = crate::to_vec(obj)?;
   29|  15.7k|        self.put(
   30|  15.7k|            code,
   31|  15.7k|            &Block {
   32|  15.7k|                codec: DAG_CBOR,
   33|  15.7k|                data: &bytes,
   34|  15.7k|            },
   35|  15.7k|        )
   36|  15.7k|    }
_RINvYRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs3XquoB0ZjnL_17fvm_ipld_encoding10cbor_store9CborStore8get_cborINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4root4RootyEECs7uao2NoihGb_11equivalence:
   14|  13.8k|        match self.get(cid)? {
   15|  13.8k|            Some(bz) => {
   16|  13.8k|                let res = crate::from_slice(&bz)?;
   17|  13.8k|                Ok(Some(res))
   18|       |            }
   19|      0|            None => Ok(None),
   20|       |        }
   21|  13.8k|    }
_RINvYRNtNtCskChX8UIw6rR_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs3XquoB0ZjnL_17fvm_ipld_encoding10cbor_store9CborStore8get_cborINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEECs7uao2NoihGb_11equivalence:
   14|  77.2k|        match self.get(cid)? {
   15|  77.2k|            Some(bz) => {
   16|  77.2k|                let res = crate::from_slice(&bz)?;
   17|  77.2k|                Ok(Some(res))
   18|       |            }
   19|      0|            None => Ok(None),
   20|       |        }
   21|  77.2k|    }

_RINvCs3XquoB0ZjnL_17fvm_ipld_encoding6to_vecINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4root4RootyEECs7uao2NoihGb_11equivalence:
   33|  15.7k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|  15.7k|where
   35|  15.7k|    T: ser::Serialize + ?Sized,
   36|  15.7k|{
   37|  15.7k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|  15.7k|}
_RINvCs3XquoB0ZjnL_17fvm_ipld_encoding10from_sliceINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node13CollapsedNodeyEECs7uao2NoihGb_11equivalence:
   50|  77.2k|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|  77.2k|where
   52|  77.2k|    T: de::Deserialize<'a>,
   53|  77.2k|{
   54|  77.2k|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|  77.2k|}
_RINvCs3XquoB0ZjnL_17fvm_ipld_encoding6to_vecINtNtCsiLX6d1GG2fK_5alloc5boxed3BoxINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4node4NodeyEEECs7uao2NoihGb_11equivalence:
   33|   167k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|   167k|where
   35|   167k|    T: ser::Serialize + ?Sized,
   36|   167k|{
   37|   167k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|   167k|}
_RINvCs3XquoB0ZjnL_17fvm_ipld_encoding10from_sliceINtNtCsfIuMWG6gMwD_12fvm_ipld_amt4root4RootyEECs7uao2NoihGb_11equivalence:
   50|  13.8k|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|  13.8k|where
   52|  13.8k|    T: de::Deserialize<'a>,
   53|  13.8k|{
   54|  13.8k|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|  13.8k|}

