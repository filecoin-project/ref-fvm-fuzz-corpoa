_RNvXs14_NtCs1zRBNpMlaOD_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvXs_NtCs1zRBNpMlaOD_5ahash13fallback_hashNtB4_7AHasherNtNtCs95Py6UJrfQF_4core4hash6Hasher6finishCsd5SYClHmoOi_11equivalence:
  212|  53.1k|    fn finish(&self) -> u64 {
  213|  53.1k|        let rot = (self.buffer & 63) as u32;
  214|  53.1k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  53.1k|    }
_RNvXs_NtCs1zRBNpMlaOD_5ahash13fallback_hashNtB4_7AHasherNtNtCs95Py6UJrfQF_4core4hash6Hasher9write_u64Csd5SYClHmoOi_11equivalence:
  163|  53.1k|    fn write_u64(&mut self, i: u64) {
  164|  53.1k|        self.update(i as u64);
  165|  53.1k|    }
_RNvMNtCs1zRBNpMlaOD_5ahash13fallback_hashNtB2_7AHasher6update:
   97|  58.8k|    fn update(&mut self, new_data: u64) {
   98|  58.8k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|  58.8k|    }
_RNvMNtCs1zRBNpMlaOD_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCsd5SYClHmoOi_11equivalence:
   58|  53.1k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  53.1k|        AHasher {
   60|  53.1k|            buffer: rand_state.k0,
   61|  53.1k|            pad: rand_state.k1,
   62|  53.1k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  53.1k|        }
   64|  53.1k|    }
_RNvMNtCs1zRBNpMlaOD_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|  1.13k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  1.13k|        AHasher {
   60|  1.13k|            buffer: rand_state.k0,
   61|  1.13k|            pad: rand_state.k1,
   62|  1.13k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  1.13k|        }
   64|  1.13k|    }
_RNvXs_NtCs1zRBNpMlaOD_5ahash13fallback_hashNtB4_7AHasherNtNtCs95Py6UJrfQF_4core4hash6Hasher6finishB6_:
  212|  4.55k|    fn finish(&self) -> u64 {
  213|  4.55k|        let rot = (self.buffer & 63) as u32;
  214|  4.55k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  4.55k|    }
_RNvXs_NtCs1zRBNpMlaOD_5ahash13fallback_hashNtB4_7AHasherNtNtCs95Py6UJrfQF_4core4hash6Hasher9write_u64B6_:
  163|  5.69k|    fn write_u64(&mut self, i: u64) {
  164|  5.69k|        self.update(i as u64);
  165|  5.69k|    }
_RNvXs4_NtCs1zRBNpMlaOD_5ahash13fallback_hashNtB5_7AHasherNtNtCs95Py6UJrfQF_4core5clone5Clone5cloneB7_:
   23|  4.55k|#[derive(Debug, Clone)]
_RNvXs_NtCs1zRBNpMlaOD_5ahash13fallback_hashNtB4_7AHasherNtNtCs95Py6UJrfQF_4core4hash6Hasher11write_usizeB6_:
  174|  1.13k|    fn write_usize(&mut self, i: usize) {
  175|  1.13k|        self.write_u64(i as u64);
  176|  1.13k|    }

_RNvMs0_NtCs1zRBNpMlaOD_5ahash8hash_mapINtB5_8AHashMapyyE3newCsd5SYClHmoOi_11equivalence:
   35|  1.13k|    pub fn new() -> Self {
   36|  1.13k|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|  1.13k|    }
_RINvMs2_NtCs1zRBNpMlaOD_5ahash8hash_mapINtB6_8AHashMapyyE3getyECsd5SYClHmoOi_11equivalence:
   79|  2.36k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  2.36k|    where
   81|  2.36k|        K: Borrow<Q>,
   82|  2.36k|        Q: Hash + Eq,
   83|  2.36k|    {
   84|  2.36k|        self.0.get(k)
   85|  2.36k|    }
_RINvMs2_NtCs1zRBNpMlaOD_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECsd5SYClHmoOi_11equivalence:
  186|  4.11k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  4.11k|    where
  188|  4.11k|        K: Borrow<Q>,
  189|  4.11k|        Q: Hash + Eq,
  190|  4.11k|    {
  191|  4.11k|        self.0.remove(k)
  192|  4.11k|    }
_RNvMs2_NtCs1zRBNpMlaOD_5ahash8hash_mapINtB5_8AHashMapyyE6insertCsd5SYClHmoOi_11equivalence:
  164|  23.4k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  23.4k|        self.0.insert(k, v)
  166|  23.4k|    }
_RNvXs3_NtCs1zRBNpMlaOD_5ahash8hash_mapINtB5_8AHashMapyyENtNtNtCs95Py6UJrfQF_4core3ops5deref5Deref5derefCsd5SYClHmoOi_11equivalence:
  197|    569|    fn deref(&self) -> &Self::Target {
  198|    569|        &self.0
  199|    569|    }

_RNvNtCs1zRBNpMlaOD_5ahash10operations15folded_multiply:
   11|   116k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|   116k|    let result = (s as u128).wrapping_mul(by as u128);
   13|   116k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|   116k|}

_RNvXs3_NtCs1zRBNpMlaOD_5ahash12random_stateNtB5_11RandomStateNtNtCs95Py6UJrfQF_4core4hash11BuildHasher12build_hasherCsd5SYClHmoOi_11equivalence:
  293|  53.1k|    fn build_hasher(&self) -> AHasher {
  294|  53.1k|        AHasher::from_random_state(self)
  295|  53.1k|    }
_RNvMs1_NtCs1zRBNpMlaOD_5ahash12random_stateNtB5_11RandomState3newCsd5SYClHmoOi_11equivalence:
  196|  1.13k|    pub fn new() -> RandomState {
  197|  1.13k|        let src = Self::get_src();
  198|  1.13k|        let fixed = src.get_fixed_seeds();
  199|  1.13k|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  200|  1.13k|    }
_RNCNvMs1_NtCs1zRBNpMlaOD_5ahash12random_stateNtB7_11RandomState7get_src0Csd5SYClHmoOi_11equivalence:
  184|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvMs1_NtCs1zRBNpMlaOD_5ahash12random_stateNtB5_11RandomState7get_srcCsd5SYClHmoOi_11equivalence:
  183|  1.13k|    fn get_src() -> &'static dyn RandomSource {
  184|  1.13k|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  185|  1.13k|    }
_RNvXs2_NtCs1zRBNpMlaOD_5ahash12random_stateNtB5_11RandomStateNtNtCs95Py6UJrfQF_4core7default7Default7defaultCsd5SYClHmoOi_11equivalence:
  256|  1.13k|    fn default() -> Self {
  257|  1.13k|        Self::new()
  258|  1.13k|    }
_RNCNvXs_NtCs1zRBNpMlaOD_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
   99|      1|        SEEDS.get_or_init(|| {
  100|      1|            let mut result: [u8; 64] = [0; 64];
  101|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|      1|            Box::new(result.convert())
  103|      1|        })
_RNvMNtCs1zRBNpMlaOD_5ahash12random_stateNtB2_19DefaultRandomSource3new:
   80|      1|    fn new() -> DefaultRandomSource {
   81|      1|        DefaultRandomSource {
   82|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   83|      1|        }
   84|      1|    }
_RNCNvMs1_NtCs1zRBNpMlaOD_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  215|  4.55k|        let mix = |k: u64| {
  216|  4.55k|            let mut h = hasher.clone();
  217|  4.55k|            h.write_u64(k);
  218|  4.55k|            h.finish()
  219|  4.55k|        };
_RNvXs_NtCs1zRBNpMlaOD_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  130|  1.13k|    fn gen_hasher_seed(&self) -> usize {
  131|  1.13k|        let stack = self as *const _ as usize;
  132|  1.13k|        self.counter.fetch_add(stack, Ordering::Relaxed)
  133|  1.13k|    }
_RNvMs1_NtCs1zRBNpMlaOD_5ahash12random_stateNtB5_11RandomState9from_keys:
  211|  1.13k|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  212|  1.13k|        let &[k0, k1, k2, k3] = a;
  213|  1.13k|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  214|  1.13k|        hasher.write_usize(c);
  215|  1.13k|        let mix = |k: u64| {
  216|       |            let mut h = hasher.clone();
  217|       |            h.write_u64(k);
  218|       |            h.finish()
  219|       |        };
  220|  1.13k|        RandomState {
  221|  1.13k|            k0: mix(b[0]),
  222|  1.13k|            k1: mix(b[1]),
  223|  1.13k|            k2: mix(b[2]),
  224|  1.13k|            k3: mix(b[3]),
  225|  1.13k|        }
  226|  1.13k|    }
_RNvXs_NtCs1zRBNpMlaOD_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
   96|  1.13k|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
   97|  1.13k|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
   98|  1.13k|
   99|  1.13k|        SEEDS.get_or_init(|| {
  100|       |            let mut result: [u8; 64] = [0; 64];
  101|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|       |            Box::new(result.convert())
  103|  1.13k|        })
  104|  1.13k|    }

_RNvXsz_Cs7HZv1qFp7mx_9arbitrarymNtB5_9Arbitrary9size_hintCsd5SYClHmoOi_11equivalence:
  332|    569|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  333|    569|                    let n = mem::size_of::<$ty>();
  334|    569|                    (n, Some(n))
  335|    569|                }
_RNvXs8_Cs7HZv1qFp7mx_9arbitraryINtNtCsjf6kfgi4wLr_5alloc3vec3VecNtCsd5SYClHmoOi_11equivalence9OperationENtB5_9Arbitrary19arbitrary_take_restB12_:
  834|    569|        u.arbitrary_take_rest_iter()?.collect()
  835|    569|    }
_RNvXsA_Cs7HZv1qFp7mx_9arbitraryyNtB5_9Arbitrary9size_hintCsd5SYClHmoOi_11equivalence:
  332|  1.13k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  333|  1.13k|                    let n = mem::size_of::<$ty>();
  334|  1.13k|                    (n, Some(n))
  335|  1.13k|                }
_RNvYyNtCs7HZv1qFp7mx_9arbitrary9Arbitrary19arbitrary_take_restCsd5SYClHmoOi_11equivalence:
  189|    313|    fn arbitrary_take_rest(mut u: Unstructured<'_>) -> Result<Self> {
  190|    313|        Self::arbitrary(&mut u)
  191|    313|    }
_RNvXsC_Cs7HZv1qFp7mx_9arbitraryjNtB5_9Arbitrary9size_hintCsd5SYClHmoOi_11equivalence:
  332|    570|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  333|    570|                    let n = mem::size_of::<$ty>();
  334|    570|                    (n, Some(n))
  335|    570|                }
_RNvXs8_Cs7HZv1qFp7mx_9arbitraryINtNtCsjf6kfgi4wLr_5alloc3vec3VecNtCsd5SYClHmoOi_11equivalence9OperationENtB5_9Arbitrary9size_hintB12_:
  838|    570|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  839|    570|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  840|    570|    }
_RNvXsz_Cs7HZv1qFp7mx_9arbitrarymNtB5_9Arbitrary9arbitrary:
  321|  20.9k|                fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
  322|  20.9k|                    let mut buf = [0; mem::size_of::<$ty>()];
  323|  20.9k|                    u.fill_buffer(&mut buf)?;
  324|  20.9k|                    let mut x: $unsigned = 0;
  325|  83.6k|                    for i in 0..mem::size_of::<$ty>() {
  326|  83.6k|                        x |= buf[i] as $unsigned << (i * 8);
  327|  83.6k|                    }
  328|  20.9k|                    Ok(x as $ty)
  329|  20.9k|                }
_RNvXsA_Cs7HZv1qFp7mx_9arbitraryyNtB5_9Arbitrary9arbitrary:
  321|  34.9k|                fn arbitrary(u: &mut Unstructured<'_>) -> Result<Self> {
  322|  34.9k|                    let mut buf = [0; mem::size_of::<$ty>()];
  323|  34.9k|                    u.fill_buffer(&mut buf)?;
  324|  34.9k|                    let mut x: $unsigned = 0;
  325|   279k|                    for i in 0..mem::size_of::<$ty>() {
  326|   279k|                        x |= buf[i] as $unsigned << (i * 8);
  327|   279k|                    }
  328|  34.9k|                    Ok(x as $ty)
  329|  34.9k|                }

_RNvNtCs7HZv1qFp7mx_9arbitrary9size_hint7and_allCsd5SYClHmoOi_11equivalence:
   40|  2.27k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   41|  2.27k|    hints.iter().copied().fold((0, Some(0)), and)
   42|  2.27k|}
_RINvNtCs7HZv1qFp7mx_9arbitrary9size_hint15recursion_guardNCNvXs_Csd5SYClHmoOi_11equivalenceNtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   15|    569|pub fn recursion_guard(
   16|    569|    depth: usize,
   17|    569|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   18|    569|) -> (usize, Option<usize>) {
   19|    569|    const MAX_DEPTH: usize = 20;
   20|    569|    if depth > MAX_DEPTH {
   21|      0|        (0, None)
   22|       |    } else {
   23|    569|        f(depth + 1)
   24|       |    }
   25|    569|}
_RNvNtCs7HZv1qFp7mx_9arbitrary9size_hint3andCsd5SYClHmoOi_11equivalence:
   29|  2.84k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   30|  2.84k|    let lower = lhs.0 + rhs.0;
   31|  2.84k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   32|  2.84k|    (lower, upper)
   33|  2.84k|}
_RNCNCNvNtCs7HZv1qFp7mx_9arbitrary9size_hint2or00Csd5SYClHmoOi_11equivalence:
   51|  1.13k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCs7HZv1qFp7mx_9arbitrary9size_hint3and0Csd5SYClHmoOi_11equivalence:
   31|  2.84k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCs7HZv1qFp7mx_9arbitrary9size_hint3and00Csd5SYClHmoOi_11equivalence:
   31|  2.27k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs7HZv1qFp7mx_9arbitrary9size_hint6or_allCsd5SYClHmoOi_11equivalence:
   61|    569|    if let Some(head) = hints.first().copied() {
   62|    569|        hints[1..].iter().copied().fold(head, or)
   63|       |    } else {
   64|      0|        (0, Some(0))
   65|       |    }
   66|    569|}
_RNvNtCs7HZv1qFp7mx_9arbitrary9size_hint2orCsd5SYClHmoOi_11equivalence:
   47|  1.13k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   48|  1.13k|    let lower = std::cmp::min(lhs.0, rhs.0);
   49|  1.13k|    let upper = lhs
   50|  1.13k|        .1
   51|  1.13k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   52|  1.13k|    (lower, upper)
   53|  1.13k|}
_RINvNtCs7HZv1qFp7mx_9arbitrary9size_hint15recursion_guardNCNvXs1_Csd5SYClHmoOi_11equivalenceNtB11_6MethodNtB4_9Arbitrary9size_hint0EB11_:
   15|    569|pub fn recursion_guard(
   16|    569|    depth: usize,
   17|    569|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   18|    569|) -> (usize, Option<usize>) {
   19|    569|    const MAX_DEPTH: usize = 20;
   20|    569|    if depth > MAX_DEPTH {
   21|      0|        (0, None)
   22|       |    } else {
   23|    569|        f(depth + 1)
   24|       |    }
   25|    569|}
_RNCNvNtCs7HZv1qFp7mx_9arbitrary9size_hint2or0Csd5SYClHmoOi_11equivalence:
   51|  1.13k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));

_RNvMNtCs7HZv1qFp7mx_9arbitrary12unstructuredNtB2_12Unstructured3lenCsd5SYClHmoOi_11equivalence:
  107|    569|    pub fn len(&self) -> usize {
  108|    569|        self.data.len()
  109|    569|    }
_RINvMNtCs7HZv1qFp7mx_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCsd5SYClHmoOi_11equivalence9OperationEB1s_:
  497|    569|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary>(
  498|    569|        self,
  499|    569|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  500|    569|        let (lower, upper) = ElementType::size_hint(0);
  501|    569|
  502|    569|        let elem_size = upper.unwrap_or(lower * 2);
  503|    569|        let elem_size = std::cmp::max(1, elem_size);
  504|    569|        let size = self.len() / elem_size;
  505|    569|        Ok(ArbitraryTakeRestIter {
  506|    569|            size,
  507|    569|            u: Some(self),
  508|    569|            _marker: PhantomData,
  509|    569|        })
  510|    569|    }
_RNvXs0_NtCs7HZv1qFp7mx_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCsd5SYClHmoOi_11equivalence9OperationENtNtNtNtCs95Py6UJrfQF_4core4iter6traits8iterator8Iterator4nextB1e_:
  541|  21.4k|        if let Some(mut u) = self.u.take() {
  542|  20.9k|            if self.size == 1 {
  543|    567|                Some(Arbitrary::arbitrary_take_rest(u))
  544|  20.3k|            } else if self.size == 0 {
  545|      2|                None
  546|       |            } else {
  547|  20.3k|                self.size -= 1;
  548|  20.3k|                let ret = Arbitrary::arbitrary(&mut u);
  549|  20.3k|                self.u = Some(u);
  550|  20.3k|                Some(ret)
  551|       |            }
  552|       |        } else {
  553|    567|            None
  554|       |        }
  555|  21.4k|    }
_RNvMNtCs7HZv1qFp7mx_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  396|  55.8k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  397|  55.8k|        let n = std::cmp::min(buffer.len(), self.data.len());
  398|   363k|        for i in 0..n {
  399|   363k|            buffer[i] = self.data[i];
  400|   363k|        }
  401|  55.8k|        for i in self.data.len()..buffer.len() {
  402|      0|            buffer[i] = 0;
  403|      0|        }
  404|  55.8k|        self.data = &self.data[n..];
  405|  55.8k|        Ok(())
  406|  55.8k|    }
_RNvMNtCs7HZv1qFp7mx_9arbitrary12unstructuredNtB2_12Unstructured3new:
   84|    569|    pub fn new(data: &'a [u8]) -> Self {
   85|    569|        Unstructured { data }
   86|    569|    }

_RINvNvCsht4s1DXp2vD_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|   262k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|   262k|                let mut p = a.as_mut_ptr();
  242|   262k|                ( $( {
  243|   262k|                    let aref = &mut *(p as *mut [T; $len]);
  244|   262k|                    p = p.offset($len as isize);
  245|   262k|                    aref
  246|   262k|                } ),* )
  247|   262k|            }
_RINvNvNtCsht4s1DXp2vD_12blake2b_simd4avx214compress_blocks0_9as_arrayshEB6_:
  143|   266k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   266k|                let mut p = a.as_ptr();
  145|   266k|                ( $( {
  146|   266k|                    let aref = &*(p as *const [T; $len]);
  147|   266k|                    p = p.offset($len as isize);
  148|   266k|                    aref
  149|   266k|                } ),* )
  150|   266k|            }
_RINvNvNtCsht4s1DXp2vD_12blake2b_simd4avx214compress_block9as_arraysyEB6_:
  240|   266k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|   266k|                let mut p = a.as_mut_ptr();
  242|   266k|                ( $( {
  243|   266k|                    let aref = &mut *(p as *mut [T; $len]);
  244|   266k|                    p = p.offset($len as isize);
  245|   266k|                    aref
  246|   266k|                } ),* )
  247|   266k|            }
_RINvNvNtCsht4s1DXp2vD_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  3.61k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  3.61k|                &*(slice.as_ptr() as *const [_; $len])
   63|  3.61k|            }
_RINvNvMCsht4s1DXp2vD_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|   262k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   262k|                let mut p = a.as_ptr();
  145|   262k|                ( $( {
  146|   262k|                    let aref = &*(p as *const [T; $len]);
  147|   262k|                    p = p.offset($len as isize);
  148|   262k|                    aref
  149|   262k|                } ),* )
  150|   262k|            }
_RINvNvMCsht4s1DXp2vD_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|   262k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   262k|                let mut p = a.as_ptr();
  145|   262k|                ( $( {
  146|   262k|                    let aref = &*(p as *const [T; $len]);
  147|   262k|                    p = p.offset($len as isize);
  148|   262k|                    aref
  149|   262k|                } ),* )
  150|   262k|            }
_RINvNvNtCsht4s1DXp2vD_12blake2b_simd4avx214compress_blocks_9as_arraysyEB6_:
  143|   266k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|   266k|                let mut p = a.as_ptr();
  145|   266k|                ( $( {
  146|   266k|                    let aref = &*(p as *const [T; $len]);
  147|   266k|                    p = p.offset($len as isize);
  148|   266k|                    aref
  149|   266k|                } ),* )
  150|   266k|            }

_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx213undiagonalize:
  139|  3.19M|unsafe fn undiagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  140|  3.19M|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(0, 3, 2, 1));
  141|  3.19M|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  142|  3.19M|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(2, 1, 0, 3));
  143|  3.19M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx25loadu:
   18|  1.06M|unsafe fn loadu(src: *const [Word; DEGREE]) -> __m256i {
   19|  1.06M|    // This is an unaligned load, so the pointer cast is allowed.
   20|  1.06M|    _mm256_loadu_si256(src as *const __m256i)
   21|  1.06M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx25rot24:
   92|  6.38M|unsafe fn rot24(x: __m256i) -> __m256i {
   93|  6.38M|    _mm256_or_si256(_mm256_srli_epi64(x, 24), _mm256_slli_epi64(x, 64 - 24))
   94|  6.38M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx211diagonalize:
  132|  3.19M|unsafe fn diagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  133|  3.19M|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(2, 1, 0, 3));
  134|  3.19M|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  135|  3.19M|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(0, 3, 2, 1));
  136|  3.19M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx22g2:
  118|  6.38M|unsafe fn g2(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  119|  6.38M|    *a = add(*a, *m);
  120|  6.38M|    *a = add(*a, *b);
  121|  6.38M|    *d = xor(*d, *a);
  122|  6.38M|    *d = rot16(*d);
  123|  6.38M|    *c = add(*c, *d);
  124|  6.38M|    *b = xor(*b, *c);
  125|  6.38M|    *b = rot63(*b);
  126|  6.38M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx23xor:
   56|  26.8M|unsafe fn xor(a: __m256i, b: __m256i) -> __m256i {
   57|  26.8M|    _mm256_xor_si256(a, b)
   58|  26.8M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx25rot63:
  102|  6.38M|unsafe fn rot63(x: __m256i) -> __m256i {
  103|  6.38M|    _mm256_or_si256(_mm256_srli_epi64(x, 63), _mm256_slli_epi64(x, 64 - 63))
  104|  6.38M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx25rot16:
   97|  6.38M|unsafe fn rot16(x: __m256i) -> __m256i {
   98|  6.38M|    _mm256_or_si256(_mm256_srli_epi64(x, 16), _mm256_slli_epi64(x, 64 - 16))
   99|  6.38M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx23add:
   35|  38.3M|unsafe fn add(a: __m256i, b: __m256i) -> __m256i {
   36|  38.3M|    _mm256_add_epi64(a, b)
   37|  38.3M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx29loadu_128:
   30|  2.12M|unsafe fn loadu_128(mem_addr: &[u8; 16]) -> __m128i {
   31|  2.12M|    _mm_loadu_si128(mem_addr.as_ptr() as *const __m128i)
   32|  2.12M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx26storeu:
   24|   532k|unsafe fn storeu(src: __m256i, dest: *mut [Word; DEGREE]) {
   25|   532k|    // This is an unaligned store, so the pointer cast is allowed.
   26|   532k|    _mm256_storeu_si256(dest as *mut __m256i, src)
   27|   532k|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx25rot32:
   87|  6.38M|unsafe fn rot32(x: __m256i) -> __m256i {
   88|  6.38M|    _mm256_or_si256(_mm256_srli_epi64(x, 32), _mm256_slli_epi64(x, 64 - 32))
   89|  6.38M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx214compress1_loop:
  427|   265k|pub unsafe fn compress1_loop(
  428|   265k|    input: &[u8],
  429|   265k|    words: &mut [Word; 8],
  430|   265k|    mut count: Count,
  431|   265k|    last_node: LastNode,
  432|   265k|    finalize: Finalize,
  433|   265k|    stride: Stride,
  434|   265k|) {
  435|   265k|    input_debug_asserts(input, finalize);
  436|   265k|
  437|   265k|    let mut local_words = *words;
  438|   265k|
  439|   265k|    let mut fin_offset = input.len().saturating_sub(1);
  440|   265k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  441|   265k|    let mut buf = [0; BLOCKBYTES];
  442|   265k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  443|   265k|    let fin_last_block = flag_word(finalize.yes());
  444|   265k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  445|       |
  446|   265k|    let mut offset = 0;
  447|       |    loop {
  448|       |        let block;
  449|       |        let count_delta;
  450|       |        let last_block;
  451|       |        let last_node;
  452|   266k|        if offset == fin_offset {
  453|   265k|            block = fin_block;
  454|   265k|            count_delta = fin_len;
  455|   265k|            last_block = fin_last_block;
  456|   265k|            last_node = fin_last_node;
  457|   265k|        } else {
  458|    350|            // This unsafe cast avoids bounds checks. There's guaranteed to be
  459|    350|            // enough input because `offset < fin_offset`.
  460|    350|            block = &*(input.as_ptr().add(offset) as *const [u8; BLOCKBYTES]);
  461|    350|            count_delta = BLOCKBYTES;
  462|    350|            last_block = flag_word(false);
  463|    350|            last_node = flag_word(false);
  464|    350|        };
  465|       |
  466|   266k|        count = count.wrapping_add(count_delta as Count);
  467|   266k|        compress_block(block, &mut local_words, count, last_block, last_node);
  468|   266k|
  469|   266k|        // Check for termination before bumping the offset, to avoid overflow.
  470|   266k|        if offset == fin_offset {
  471|   265k|            break;
  472|    350|        }
  473|    350|
  474|    350|        offset += stride.padded_blockbytes();
  475|       |    }
  476|       |
  477|   265k|    *words = local_words;
  478|   265k|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx24set4:
   66|   266k|unsafe fn set4(a: u64, b: u64, c: u64, d: u64) -> __m256i {
   67|   266k|    _mm256_setr_epi64x(a as i64, b as i64, c as i64, d as i64)
   68|   266k|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx22g1:
  107|  6.38M|unsafe fn g1(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  108|  6.38M|    *a = add(*a, *m);
  109|  6.38M|    *a = add(*a, *b);
  110|  6.38M|    *d = xor(*d, *a);
  111|  6.38M|    *d = rot32(*d);
  112|  6.38M|    *c = add(*c, *d);
  113|  6.38M|    *b = xor(*b, *c);
  114|  6.38M|    *b = rot24(*b);
  115|  6.38M|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4avx214compress_block:
  146|   266k|unsafe fn compress_block(
  147|   266k|    block: &[u8; BLOCKBYTES],
  148|   266k|    words: &mut [Word; 8],
  149|   266k|    count: Count,
  150|   266k|    last_block: Word,
  151|   266k|    last_node: Word,
  152|   266k|) {
  153|   266k|    let (words_low, words_high) = mut_array_refs!(words, DEGREE, DEGREE);
  154|   266k|    let (iv_low, iv_high) = array_refs!(&IV, DEGREE, DEGREE);
  155|   266k|    let mut a = loadu(words_low);
  156|   266k|    let mut b = loadu(words_high);
  157|   266k|    let mut c = loadu(iv_low);
  158|   266k|    let flags = set4(count_low(count), count_high(count), last_block, last_node);
  159|   266k|    let mut d = xor(loadu(iv_high), flags);
  160|   266k|
  161|   266k|    let msg_chunks = array_refs!(block, 16, 16, 16, 16, 16, 16, 16, 16);
  162|   266k|    let m0 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.0));
  163|   266k|    let m1 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.1));
  164|   266k|    let m2 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.2));
  165|   266k|    let m3 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.3));
  166|   266k|    let m4 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.4));
  167|   266k|    let m5 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.5));
  168|   266k|    let m6 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.6));
  169|   266k|    let m7 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.7));
  170|   266k|
  171|   266k|    let iv0 = a;
  172|   266k|    let iv1 = b;
  173|   266k|    let mut t0;
  174|   266k|    let mut t1;
  175|   266k|    let mut b0;
  176|   266k|
  177|   266k|    // round 1
  178|   266k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  179|   266k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  180|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  181|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  182|   266k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  183|   266k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  184|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  185|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  186|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  187|   266k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  188|   266k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  189|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  190|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  191|   266k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  192|   266k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  193|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  194|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  195|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  196|   266k|
  197|   266k|    // round 2
  198|   266k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  199|   266k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  200|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  201|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  202|   266k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  203|   266k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  204|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  205|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  206|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  207|   266k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  208|   266k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  209|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  210|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  211|   266k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  212|   266k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  213|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  214|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  215|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  216|   266k|
  217|   266k|    // round 3
  218|   266k|    t0 = _mm256_alignr_epi8(m6, m5, 8);
  219|   266k|    t1 = _mm256_unpackhi_epi64(m2, m7);
  220|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  221|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  222|   266k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  223|   266k|    t1 = _mm256_blend_epi32(m6, m1, 0x33);
  224|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  225|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  226|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  227|   266k|    t0 = _mm256_alignr_epi8(m5, m4, 8);
  228|   266k|    t1 = _mm256_unpackhi_epi64(m1, m3);
  229|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  230|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  231|   266k|    t0 = _mm256_unpacklo_epi64(m2, m7);
  232|   266k|    t1 = _mm256_blend_epi32(m0, m3, 0x33);
  233|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  234|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  235|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  236|   266k|
  237|   266k|    // round 4
  238|   266k|    t0 = _mm256_unpackhi_epi64(m3, m1);
  239|   266k|    t1 = _mm256_unpackhi_epi64(m6, m5);
  240|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  241|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  242|   266k|    t0 = _mm256_unpackhi_epi64(m4, m0);
  243|   266k|    t1 = _mm256_unpacklo_epi64(m6, m7);
  244|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  245|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  246|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  247|   266k|    t0 = _mm256_alignr_epi8(m1, m7, 8);
  248|   266k|    t1 = _mm256_shuffle_epi32(m2, _MM_SHUFFLE!(1, 0, 3, 2));
  249|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  250|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  251|   266k|    t0 = _mm256_unpacklo_epi64(m4, m3);
  252|   266k|    t1 = _mm256_unpacklo_epi64(m5, m0);
  253|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  254|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  255|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  256|   266k|
  257|   266k|    // round 5
  258|   266k|    t0 = _mm256_unpackhi_epi64(m4, m2);
  259|   266k|    t1 = _mm256_unpacklo_epi64(m1, m5);
  260|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  261|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  262|   266k|    t0 = _mm256_blend_epi32(m3, m0, 0x33);
  263|   266k|    t1 = _mm256_blend_epi32(m7, m2, 0x33);
  264|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  265|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  266|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  267|   266k|    t0 = _mm256_alignr_epi8(m7, m1, 8);
  268|   266k|    t1 = _mm256_alignr_epi8(m3, m5, 8);
  269|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  270|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  271|   266k|    t0 = _mm256_unpackhi_epi64(m6, m0);
  272|   266k|    t1 = _mm256_unpacklo_epi64(m6, m4);
  273|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  274|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  275|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  276|   266k|
  277|   266k|    // round 6
  278|   266k|    t0 = _mm256_unpacklo_epi64(m1, m3);
  279|   266k|    t1 = _mm256_unpacklo_epi64(m0, m4);
  280|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  281|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  282|   266k|    t0 = _mm256_unpacklo_epi64(m6, m5);
  283|   266k|    t1 = _mm256_unpackhi_epi64(m5, m1);
  284|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  285|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  286|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  287|   266k|    t0 = _mm256_alignr_epi8(m2, m0, 8);
  288|   266k|    t1 = _mm256_unpackhi_epi64(m3, m7);
  289|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  290|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  291|   266k|    t0 = _mm256_unpackhi_epi64(m4, m6);
  292|   266k|    t1 = _mm256_alignr_epi8(m7, m2, 8);
  293|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  294|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  295|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  296|   266k|
  297|   266k|    // round 7
  298|   266k|    t0 = _mm256_blend_epi32(m0, m6, 0x33);
  299|   266k|    t1 = _mm256_unpacklo_epi64(m7, m2);
  300|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  301|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  302|   266k|    t0 = _mm256_unpackhi_epi64(m2, m7);
  303|   266k|    t1 = _mm256_alignr_epi8(m5, m6, 8);
  304|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  305|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  306|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  307|   266k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  308|   266k|    t1 = _mm256_blend_epi32(m4, m3, 0x33);
  309|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  310|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  311|   266k|    t0 = _mm256_unpackhi_epi64(m5, m3);
  312|   266k|    t1 = _mm256_shuffle_epi32(m1, _MM_SHUFFLE!(1, 0, 3, 2));
  313|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  314|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  315|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  316|   266k|
  317|   266k|    // round 8
  318|   266k|    t0 = _mm256_unpackhi_epi64(m6, m3);
  319|   266k|    t1 = _mm256_blend_epi32(m1, m6, 0x33);
  320|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  321|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  322|   266k|    t0 = _mm256_alignr_epi8(m7, m5, 8);
  323|   266k|    t1 = _mm256_unpackhi_epi64(m0, m4);
  324|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  325|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  326|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  327|   266k|    t0 = _mm256_blend_epi32(m2, m1, 0x33);
  328|   266k|    t1 = _mm256_alignr_epi8(m4, m7, 8);
  329|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  330|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  331|   266k|    t0 = _mm256_unpacklo_epi64(m5, m0);
  332|   266k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  333|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  334|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  335|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  336|   266k|
  337|   266k|    // round 9
  338|   266k|    t0 = _mm256_unpacklo_epi64(m3, m7);
  339|   266k|    t1 = _mm256_alignr_epi8(m0, m5, 8);
  340|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  341|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  342|   266k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  343|   266k|    t1 = _mm256_alignr_epi8(m4, m1, 8);
  344|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  345|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  346|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  347|   266k|    t0 = _mm256_unpacklo_epi64(m5, m6);
  348|   266k|    t1 = _mm256_unpackhi_epi64(m6, m0);
  349|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  350|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  351|   266k|    t0 = _mm256_alignr_epi8(m1, m2, 8);
  352|   266k|    t1 = _mm256_alignr_epi8(m2, m3, 8);
  353|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  354|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  355|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  356|   266k|
  357|   266k|    // round 10
  358|   266k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  359|   266k|    t1 = _mm256_unpackhi_epi64(m3, m0);
  360|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  361|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  362|   266k|    t0 = _mm256_unpacklo_epi64(m1, m2);
  363|   266k|    t1 = _mm256_blend_epi32(m2, m3, 0x33);
  364|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  365|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  366|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  367|   266k|    t0 = _mm256_unpackhi_epi64(m6, m7);
  368|   266k|    t1 = _mm256_unpackhi_epi64(m4, m1);
  369|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  370|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  371|   266k|    t0 = _mm256_blend_epi32(m5, m0, 0x33);
  372|   266k|    t1 = _mm256_unpacklo_epi64(m7, m6);
  373|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  374|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  375|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  376|   266k|
  377|   266k|    // round 11
  378|   266k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  379|   266k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  380|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  381|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  382|   266k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  383|   266k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  384|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  385|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  386|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  387|   266k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  388|   266k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  389|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  390|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  391|   266k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  392|   266k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  393|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  394|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  395|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  396|   266k|
  397|   266k|    // round 12
  398|   266k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  399|   266k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  400|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  401|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  402|   266k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  403|   266k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  404|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  405|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  406|   266k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  407|   266k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  408|   266k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  409|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  410|   266k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  411|   266k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  412|   266k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  413|   266k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  414|   266k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  415|   266k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  416|   266k|
  417|   266k|    a = xor(a, c);
  418|   266k|    b = xor(b, d);
  419|   266k|    a = xor(a, iv0);
  420|   266k|    b = xor(b, iv1);
  421|   266k|
  422|   266k|    storeu(a, words_low);
  423|   266k|    storeu(b, words_high);
  424|   266k|}

_RNvNtCsht4s1DXp2vD_12blake2b_simd4guts10count_high:
  208|   266k|pub(crate) fn count_high(count: Count) -> Word {
  209|   266k|    (count >> 8 * size_of::<Word>()) as Word
  210|   266k|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4guts9count_low:
  204|   266k|pub(crate) fn count_low(count: Count) -> Word {
  205|   266k|    count as Word
  206|   266k|}
_RNvMNtCsht4s1DXp2vD_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supported:
   70|   262k|    pub fn avx2_if_supported() -> Option<Self> {
   71|       |        // Check whether AVX2 support is assumed by the build.
   72|       |        #[cfg(target_feature = "avx2")]
   73|       |        {
   74|       |            return Some(Implementation(Platform::AVX2));
   75|       |        }
   76|       |        // Otherwise dynamically check for support if we can.
   77|       |        #[cfg(feature = "std")]
   78|       |        {
   79|      0|            if is_x86_feature_detected!("avx2") {
   80|   262k|                return Some(Implementation(Platform::AVX2));
   81|      0|            }
   82|      0|        }
   83|      0|        None
   84|   262k|    }
_RNvMNtCsht4s1DXp2vD_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|   265k|    pub fn compress1_loop(
   97|   265k|        &self,
   98|   265k|        input: &[u8],
   99|   265k|        words: &mut [Word; 8],
  100|   265k|        count: Count,
  101|   265k|        last_node: LastNode,
  102|   265k|        finalize: Finalize,
  103|   265k|        stride: Stride,
  104|   265k|    ) {
  105|   265k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|   265k|            Platform::AVX2 => unsafe {
  108|   265k|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|   265k|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|      0|            _ => {
  113|      0|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|      0|            }
  115|       |        }
  116|   265k|    }
_RNvNtCsht4s1DXp2vD_12blake2b_simd4guts19input_debug_asserts:
  252|   265k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|   265k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|   265k|    // even multiple of the block size.
  255|   265k|    if !finalize.yes() {
  256|  3.61k|        debug_assert!(!input.is_empty());
  257|  3.61k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|   262k|    }
  259|   265k|}
_RNvMs0_NtCsht4s1DXp2vD_12blake2b_simd4gutsNtB5_8Finalize3yes:
  165|   797k|    pub fn yes(&self) -> bool {
  166|   797k|        match self {
  167|   786k|            Finalize::Yes => true,
  168|  10.8k|            Finalize::No => false,
  169|       |        }
  170|   797k|    }
_RNvMs1_NtCsht4s1DXp2vD_12blake2b_simd4gutsNtB5_8LastNode3yes:
  181|   262k|    pub fn yes(&self) -> bool {
  182|   262k|        match self {
  183|      0|            LastNode::Yes => true,
  184|   262k|            LastNode::No => false,
  185|       |        }
  186|   262k|    }
_RNvMNtCsht4s1DXp2vD_12blake2b_simd4gutsNtB2_14Implementation6detect:
   33|   262k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|   262k|                return avx2_impl;
   35|      0|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|      0|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|      0|            }
   42|      0|        }
   43|      0|        Self::portable()
   44|   262k|    }
_RNvMs2_NtCsht4s1DXp2vD_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytes:
  196|   269k|    pub fn padded_blockbytes(&self) -> usize {
  197|   269k|        match self {
  198|   269k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|   269k|    }
_RNvNtCsht4s1DXp2vD_12blake2b_simd4guts11final_block:
  232|   265k|pub fn final_block<'a>(
  233|   265k|    input: &'a [u8],
  234|   265k|    offset: usize,
  235|   265k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|   265k|    stride: Stride,
  237|   265k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|   265k|    let capped_offset = cmp::min(offset, input.len());
  239|   265k|    let offset_slice = &input[capped_offset..];
  240|   265k|    if offset_slice.len() >= BLOCKBYTES {
  241|  3.61k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  3.61k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  3.61k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|   262k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|   262k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|   265k|}
_RNvNtCsht4s1DXp2vD_12blake2b_simd4guts9flag_word:
  217|   532k|pub(crate) fn flag_word(flag: bool) -> Word {
  218|   532k|    if flag {
  219|   262k|        !0
  220|       |    } else {
  221|   270k|        0
  222|       |    }
  223|   532k|}

_RNvMCsht4s1DXp2vD_12blake2b_simdNtB2_6Params11hash_lengthCsjZI7mQ9h8pj_9multihash:
  238|   262k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|   262k|        assert!(
  240|   262k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|   262k|        self.hash_length = length as u8;
  245|   262k|        self
  246|   262k|    }
_RNvMCsht4s1DXp2vD_12blake2b_simdNtB2_6Params3newCsjZI7mQ9h8pj_9multihash:
  165|   262k|    pub fn new() -> Self {
  166|   262k|        Self {
  167|   262k|            hash_length: OUTBYTES as u8,
  168|   262k|            key_length: 0,
  169|   262k|            key_block: [0; BLOCKBYTES],
  170|   262k|            salt: [0; SALTBYTES],
  171|   262k|            personal: [0; PERSONALBYTES],
  172|   262k|            // NOTE: fanout and max_depth don't default to zero!
  173|   262k|            fanout: 1,
  174|   262k|            max_depth: 1,
  175|   262k|            max_leaf_length: 0,
  176|   262k|            node_offset: 0,
  177|   262k|            node_depth: 0,
  178|   262k|            inner_hash_length: 0,
  179|   262k|            last_node: guts::LastNode::No,
  180|   262k|            implementation: guts::Implementation::detect(),
  181|   262k|        }
  182|   262k|    }
_RNvMCsht4s1DXp2vD_12blake2b_simdNtB2_6Params8to_words:
  185|   262k|    fn to_words(&self) -> [Word; 8] {
  186|   262k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|   262k|        let (personal_left, personal_right) =
  188|   262k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|   262k|        [
  190|   262k|            IV[0]
  191|   262k|                ^ self.hash_length as u64
  192|   262k|                ^ (self.key_length as u64) << 8
  193|   262k|                ^ (self.fanout as u64) << 16
  194|   262k|                ^ (self.max_depth as u64) << 24
  195|   262k|                ^ (self.max_leaf_length as u64) << 32,
  196|   262k|            IV[1] ^ self.node_offset,
  197|   262k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|   262k|            IV[3],
  199|   262k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|   262k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|   262k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|   262k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|   262k|        ]
  204|   262k|    }
_RNvCsht4s1DXp2vD_12blake2b_simd20state_words_to_bytes:
  529|   262k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|   262k|    let mut bytes = [0; OUTBYTES];
  531|   262k|    {
  532|   262k|        const W: usize = size_of::<Word>();
  533|   262k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|   262k|        *refs.0 = state_words[0].to_le_bytes();
  535|   262k|        *refs.1 = state_words[1].to_le_bytes();
  536|   262k|        *refs.2 = state_words[2].to_le_bytes();
  537|   262k|        *refs.3 = state_words[3].to_le_bytes();
  538|   262k|        *refs.4 = state_words[4].to_le_bytes();
  539|   262k|        *refs.5 = state_words[5].to_le_bytes();
  540|   262k|        *refs.6 = state_words[6].to_le_bytes();
  541|   262k|        *refs.7 = state_words[7].to_le_bytes();
  542|   262k|    }
  543|   262k|    bytes
  544|   262k|}
_RNvMs1_Csht4s1DXp2vD_12blake2b_simdNtB5_5State8finalize:
  482|   262k|    pub fn finalize(&self) -> Hash {
  483|   262k|        let mut words_copy = self.words;
  484|   262k|        self.implementation.compress1_loop(
  485|   262k|            &self.buf[..self.buflen as usize],
  486|   262k|            &mut words_copy,
  487|   262k|            self.count,
  488|   262k|            self.last_node,
  489|   262k|            guts::Finalize::Yes,
  490|   262k|            guts::Stride::Serial,
  491|   262k|        );
  492|   262k|        Hash {
  493|   262k|            bytes: state_words_to_bytes(&words_copy),
  494|   262k|            len: self.hash_length,
  495|   262k|        }
  496|   262k|    }
_RNvMs1_Csht4s1DXp2vD_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|   262k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|   262k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|   262k|        }
  450|   262k|    }
_RNvMs1_Csht4s1DXp2vD_12blake2b_simdNtB5_5State8fill_buf:
  424|   262k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|   262k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|   262k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|   262k|        self.buflen += take as u8;
  428|   262k|        *input = &input[take..];
  429|   262k|    }
_RNvMs1_Csht4s1DXp2vD_12blake2b_simdNtB5_5State11with_params:
  406|   262k|    fn with_params(params: &Params) -> Self {
  407|   262k|        let mut state = Self {
  408|   262k|            words: params.to_words(),
  409|   262k|            count: 0,
  410|   262k|            buf: [0; BLOCKBYTES],
  411|   262k|            buflen: 0,
  412|   262k|            last_node: params.last_node,
  413|   262k|            hash_length: params.hash_length,
  414|   262k|            implementation: params.implementation,
  415|   262k|            is_keyed: params.key_length > 0,
  416|   262k|        };
  417|   262k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|   262k|        }
  421|   262k|        state
  422|   262k|    }
_RNvMs1_Csht4s1DXp2vD_12blake2b_simdNtB5_5State6update:
  453|   262k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|   262k|        // If we have a partial buffer, try to complete it.
  455|   262k|        self.compress_buffer_if_possible(&mut input);
  456|   262k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|   262k|        // above), compress blocks directly without copying.
  458|   262k|        let mut end = input.len().saturating_sub(1);
  459|   262k|        end -= end % BLOCKBYTES;
  460|   262k|        if end > 0 {
  461|  3.61k|            self.implementation.compress1_loop(
  462|  3.61k|                &input[..end],
  463|  3.61k|                &mut self.words,
  464|  3.61k|                self.count,
  465|  3.61k|                self.last_node,
  466|  3.61k|                guts::Finalize::No,
  467|  3.61k|                guts::Stride::Serial,
  468|  3.61k|            );
  469|  3.61k|            self.count = self.count.wrapping_add(end as Count);
  470|  3.61k|            input = &input[end..];
  471|   258k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|   262k|        self.fill_buf(&mut input);
  477|   262k|        self
  478|   262k|    }
_RNvMCsht4s1DXp2vD_12blake2b_simdNtB2_6Params8to_state:
  230|   262k|    pub fn to_state(&self) -> State {
  231|   262k|        State::with_params(self)
  232|   262k|    }
_RNvMs5_Csht4s1DXp2vD_12blake2b_simdNtB5_4Hash8as_bytes:
  589|   262k|    pub fn as_bytes(&self) -> &[u8] {
  590|   262k|        &self.bytes[..self.len as usize]
  591|   262k|    }

_RINvMNtCshvy9p117Pde_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsjf6kfgi4wLr_5alloc3vec3VechEECsd5SYClHmoOi_11equivalence:
  143|   260k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|   260k|        let mut version_buf = varint_encode::u64_buffer();
  145|   260k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|   260k|
  147|   260k|        let mut codec_buf = varint_encode::u64_buffer();
  148|   260k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|   260k|
  150|   260k|        w.write_all(version)?;
  151|   260k|        w.write_all(codec)?;
  152|   260k|        self.hash.write(&mut w)?;
  153|   260k|        Ok(())
  154|   260k|    }
_RINvMNtCshvy9p117Pde_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEECsd5SYClHmoOi_11equivalence:
  157|   260k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|   260k|        match self.version {
  159|      0|            Version::V0 => self.hash.write(w)?,
  160|   260k|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|   260k|        Ok(())
  163|   260k|    }
_RNvMNtCshvy9p117Pde_3cid3cidINtB2_3CidKj40_E6new_v1Csd5SYClHmoOi_11equivalence:
   90|   262k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|   262k|        Self {
   92|   262k|            version: Version::V1,
   93|   262k|            codec,
   94|   262k|            hash,
   95|   262k|        }
   96|   262k|    }
_RNvMNtCshvy9p117Pde_3cid3cidINtB2_3CidKj40_E8to_bytesCsd5SYClHmoOi_11equivalence:
  167|   260k|    pub fn to_bytes(&self) -> Vec<u8> {
  168|   260k|        let mut bytes = Vec::new();
  169|   260k|        self.write_bytes(&mut bytes).unwrap();
  170|   260k|        bytes
  171|   260k|    }
_RNvXse_NtCshvy9p117Pde_3cid3cidINtB5_3CidKj40_ENtNtCs95Py6UJrfQF_4core3cmp9PartialEq2eqCsd5SYClHmoOi_11equivalence:
   64|    569|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RINvXsk_NtCshvy9p117Pde_3cid3cidINtB6_3CidKj40_ENtNtCs95Py6UJrfQF_4core4hash4Hash4hashNtNtNtNtCscp48s4T3X9v_3std11collections4hash3map13DefaultHasherECs1bVuCDejzKf_10fvm_shared:
   64|   608k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RNvXse_NtCshvy9p117Pde_3cid3cidINtB5_3CidKj40_ENtNtCs95Py6UJrfQF_4core3cmp9PartialEq2eqCs1bVuCDejzKf_10fvm_shared:
   64|  39.4k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXNtCshvy9p117Pde_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs5A5HtGEAAwP_5serde3ser9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   29|   260k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|   260k|    where
   31|   260k|        S: ser::Serializer,
   32|   260k|    {
   33|   260k|        let value = ByteBuf::from(self.to_bytes());
   34|   260k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|   260k|    }

_RNvXs2_NtCshvy9p117Pde_3cid7versionNtB5_7VersionNtNtCs95Py6UJrfQF_4core3cmp9PartialEq2eqCsd5SYClHmoOi_11equivalence:
    6|    569|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RINvXsa_NtCshvy9p117Pde_3cid7versionNtB6_7VersionNtNtCs95Py6UJrfQF_4core4hash4Hash4hashNtNtNtNtCscp48s4T3X9v_3std11collections4hash3map13DefaultHasherECs1bVuCDejzKf_10fvm_shared:
    6|   608k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs2_NtCshvy9p117Pde_3cid7versionNtB5_7VersionNtNtCs95Py6UJrfQF_4core3cmp9PartialEq2eqCs1bVuCDejzKf_10fvm_shared:
    6|  39.4k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs0_NtCshvy9p117Pde_3cid7versionyINtNtCs95Py6UJrfQF_4core7convert4FromNtB5_7VersionE4from:
   44|   260k|    fn from(ver: Version) -> u64 {
   45|   260k|        match ver {
   46|      0|            Version::V0 => 0,
   47|   260k|            Version::V1 => 1,
   48|       |        }
   49|   260k|    }

_RINvCs21W9Xsi2WC7_14cs_serde_bytes9serializeRShQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   77|   262k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|   262k|where
   79|   262k|    T: ?Sized + Serialize,
   80|   262k|    S: Serializer,
   81|   262k|{
   82|   262k|    Serialize::serialize(bytes, serializer)
   83|   262k|}

_RINvXs4_NtCs21W9Xsi2WC7_14cs_serde_bytes3serRShNtB6_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   88|   262k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|   262k|    where
   90|   262k|        S: Serializer,
   91|   262k|    {
   92|   262k|        (**self).serialize(serializer)
   93|   262k|    }
_RINvXNtCs21W9Xsi2WC7_14cs_serde_bytes3serShNtB3_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   27|   262k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   28|   262k|    where
   29|   262k|        S: Serializer,
   30|   262k|    {
   31|   262k|        serializer.serialize_bytes(self)
   32|   262k|    }

_RNvCs2EbrZcZXB4Q_9getrandom9getrandom:
  252|      1|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  253|      1|    if dest.is_empty() {
  254|      0|        return Ok(());
  255|      1|    }
  256|      1|    imp::getrandom_inner(dest)
  257|      1|}

_RNCNvNtCs2EbrZcZXB4Q_9getrandom3imp15getrandom_inner0B5_:
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
_RNvNtCs2EbrZcZXB4Q_9getrandom3imp22is_getrandom_available:
   27|      1|fn is_getrandom_available() -> bool {
   28|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   29|      1|    if res < 0 {
   30|      0|        match last_os_error().raw_os_error() {
   31|      0|            Some(libc::ENOSYS) => false, // No kernel support
   32|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   33|      0|            _ => true,
   34|       |        }
   35|       |    } else {
   36|      1|        true
   37|       |    }
   38|      1|}
_RNvNtCs2EbrZcZXB4Q_9getrandom3imp15getrandom_inner:
   16|      1|pub fn getrandom_inner(dest: &mut [u8]) -> Result<(), Error> {
   17|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   18|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
   22|       |    } else {
   23|      0|        use_file::getrandom_inner(dest)
   24|       |    }
   25|      1|}
_RNvNtCs2EbrZcZXB4Q_9getrandom3imp9getrandom:
   40|      2|unsafe fn getrandom(
   41|      2|    buf: *mut libc::c_void,
   42|      2|    buflen: libc::size_t,
   43|      2|    flags: libc::c_uint,
   44|      2|) -> libc::ssize_t {
   45|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   46|      2|}

_RINvMNtCs2EbrZcZXB4Q_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   42|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   43|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   44|      1|        let mut val = self.0.load(Relaxed);
   45|      1|        if val == Self::UNINIT {
   46|      1|            val = init();
   47|      1|            self.0.store(val, Relaxed);
   48|      1|        }
   49|      1|        val
   50|      1|    }
_RINvMs_NtCs2EbrZcZXB4Q_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   61|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   62|      1|        self.0.unsync_init(|| init() as usize) != 0
   63|      1|    }
_RNCINvMs_NtCs2EbrZcZXB4Q_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   62|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCs2EbrZcZXB4Q_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   50|      1|pub fn sys_fill_exact(
   51|      1|    mut buf: &mut [u8],
   52|      1|    sys_fill: impl Fn(&mut [u8]) -> libc::ssize_t,
   53|      1|) -> Result<(), Error> {
   54|      2|    while !buf.is_empty() {
   55|      1|        let res = sys_fill(buf);
   56|      1|        if res < 0 {
   57|      0|            let err = last_os_error();
   58|      0|            // We should try again if the call was interrupted.
   59|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   60|      0|                return Err(err);
   61|      0|            }
   62|      1|        } else {
   63|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   64|      1|            // should be an infinite stream of random bytes.
   65|      1|            buf = &mut buf[(res as usize)..];
   66|      1|        }
   67|       |    }
   68|      1|    Ok(())
   69|      1|}

_RINvYINtNtNtNtCscp48s4T3X9v_3std11collections4hash3map4IteryyENtCsg48q8KUMYI1_9itertools9Itertools13sorted_by_keyRyNCNvCsd5SYClHmoOi_11equivalence22rust_fuzzer_test_input0EB1T_:
 2661|    569|    fn sorted_by_key<K, F>(self, f: F) -> VecIntoIter<Self::Item>
 2662|    569|        where Self: Sized,
 2663|    569|              K: Ord,
 2664|    569|              F: FnMut(&Self::Item) -> K,
 2665|    569|    {
 2666|    569|        let mut v = Vec::from_iter(self);
 2667|    569|        v.sort_by_key(f);
 2668|    569|        v.into_iter()
 2669|    569|    }

rust_fuzzer_test_input:
  143|    570|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
LLVMFuzzerInitialize:
   39|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   40|      2|    // Registers a panic hook that aborts the process before unwinding.
   41|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   42|      2|    // able to analyse the process stack frames to tell different bugs appart.
   43|      2|    //
   44|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   45|      2|    // impossible to build code using compiler plugins with this flag.
   46|      2|    // We will be able to remove this code when
   47|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   48|      2|    let default_hook = ::std::panic::take_hook();
   49|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   50|       |        default_hook(panic_info);
   51|       |        ::std::process::abort();
   52|      2|    }));
   53|      2|    0
   54|      2|}
_RNCNvCsfQGg5ZDqU7v_13libfuzzer_sys15test_input_wrap0B3_:
   25|    570|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   26|    570|        let data_slice = ::std::slice::from_raw_parts(data, size);
   27|    570|        rust_fuzzer_test_input(data_slice);
   28|    570|    });
LLVMFuzzerTestOneInput:
   24|    570|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   25|    570|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   26|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   27|       |        rust_fuzzer_test_input(data_slice);
   28|    570|    });
   29|    570|    if test_input.err().is_some() {
   30|       |        // hopefully the custom panic hook will be called before and abort the
   31|       |        // process before the stack frames are unwinded.
   32|      0|        ::std::process::abort();
   33|    570|    }
   34|    570|    0
   35|    570|}

_RNvXs_NtNtCsjZI7mQ9h8pj_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|   262k|            fn update(&mut self, input: &[u8]) {
   47|   262k|                self.state.update(input);
   48|   262k|            }
_RNvXs_NtNtCsjZI7mQ9h8pj_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|   262k|            fn finalize(&mut self) -> &[u8] {
   51|   262k|                let digest = self.state.finalize();
   52|   262k|                let digest_bytes = digest.as_bytes();
   53|   262k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|   262k|                digest_out.copy_from_slice(digest_bytes);
   55|   262k|                digest_out
   56|   262k|            }
_RNvXNtNtCsjZI7mQ9h8pj_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCs95Py6UJrfQF_4core7default7Default7defaultB6_:
   35|   262k|            fn default() -> Self {
   36|   262k|                let mut params = $module::Params::new();
   37|   262k|                params.hash_length(S);
   38|   262k|                Self {
   39|   262k|                    state: params.to_state(),
   40|   262k|                    digest: [0; S],
   41|   262k|                }
   42|   262k|            }

_RINvMs_NtCsjZI7mQ9h8pj_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEECsd5SYClHmoOi_11equivalence:
  163|   260k|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|   260k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|   260k|    }
_RNvMs_NtCsjZI7mQ9h8pj_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsd5SYClHmoOi_11equivalence:
  125|   260k|    pub const fn size(&self) -> u8 {
  126|   260k|        self.size
  127|   260k|    }
_RNvMs_NtCsjZI7mQ9h8pj_9multihash9multihashINtB4_9MultihashKj40_E4codeCsd5SYClHmoOi_11equivalence:
  120|   260k|    pub const fn code(&self) -> u64 {
  121|   260k|        self.code
  122|   260k|    }
_RINvNtCsjZI7mQ9h8pj_9multihash9multihash15write_multihashQQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEECsd5SYClHmoOi_11equivalence:
  276|   260k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|   260k|where
  278|   260k|    W: io::Write,
  279|   260k|{
  280|   260k|    let mut code_buf = varint_encode::u64_buffer();
  281|   260k|    let code = varint_encode::u64(code, &mut code_buf);
  282|   260k|
  283|   260k|    let mut size_buf = varint_encode::u8_buffer();
  284|   260k|    let size = varint_encode::u8(size, &mut size_buf);
  285|   260k|
  286|   260k|    w.write_all(code)?;
  287|   260k|    w.write_all(size)?;
  288|   260k|    w.write_all(digest)?;
  289|   260k|    Ok(())
  290|   260k|}
_RNvXs2_NtCsjZI7mQ9h8pj_9multihash9multihashINtB5_9MultihashKj40_ENtNtCs95Py6UJrfQF_4core3cmp9PartialEq2eqCsd5SYClHmoOi_11equivalence:
  233|    569|    fn eq(&self, other: &Multihash<B>) -> bool {
  234|    569|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  235|    569|        self.code == other.code && self.digest() == other.digest()
  236|    569|    }
_RNvMs_NtCsjZI7mQ9h8pj_9multihash9multihashINtB4_9MultihashKj40_E6digestCsd5SYClHmoOi_11equivalence:
  130|   262k|    pub fn digest(&self) -> &[u8] {
  131|   262k|        &self.digest[..self.size as usize]
  132|   262k|    }
_RNvXs2_NtCsjZI7mQ9h8pj_9multihash9multihashINtB5_9MultihashKj40_ENtNtCs95Py6UJrfQF_4core3cmp9PartialEq2eqCs1bVuCDejzKf_10fvm_shared:
  233|  39.4k|    fn eq(&self, other: &Multihash<B>) -> bool {
  234|  39.4k|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  235|  39.4k|        self.code == other.code && self.digest() == other.digest()
  236|  39.4k|    }
_RNvMs_NtCsjZI7mQ9h8pj_9multihash9multihashINtB4_9MultihashKj40_E6digestCs1bVuCDejzKf_10fvm_shared:
  130|   687k|    pub fn digest(&self) -> &[u8] {
  131|   687k|        &self.digest[..self.size as usize]
  132|   687k|    }
_RINvXs0_NtCsjZI7mQ9h8pj_9multihash9multihashINtB6_9MultihashKj40_ENtNtCs95Py6UJrfQF_4core4hash4Hash4hashNtNtNtNtCscp48s4T3X9v_3std11collections4hash3map13DefaultHasherECs1bVuCDejzKf_10fvm_shared:
  219|   608k|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  220|   608k|        self.code.hash(state);
  221|   608k|        self.digest().hash(state);
  222|   608k|    }
_RNvMs_NtCsjZI7mQ9h8pj_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|   262k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|   262k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|   262k|        }
  105|   262k|        let size = input_digest.len();
  106|   262k|        let mut digest = [0; S];
  107|   262k|        let mut i = 0;
  108|  8.64M|        while i < size {
  109|  8.38M|            digest[i] = input_digest[i];
  110|  8.38M|            i += 1;
  111|  8.38M|        }
  112|   262k|        Ok(Self {
  113|   262k|            code,
  114|   262k|            size: size as u8,
  115|   262k|            digest,
  116|   262k|        })
  117|   262k|    }

_RNvXs3_NtCsjZI7mQ9h8pj_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|   262k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvXs5_NtCs8D4BVHmAsR7_9once_cell6unsyncINtB5_8OnceCellINtNtCsjf6kfgi4wLr_5alloc5boxed3BoxINtNtCse63mXF9YMld_12fvm_ipld_amt4node4NodeyEEEINtNtCs95Py6UJrfQF_4core7convert4FromBR_E4fromCsd5SYClHmoOi_11equivalence:
  422|   260k|        fn from(value: T) -> Self {
  423|   260k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  424|   260k|        }

_RINvMs1_NtNtCs8D4BVHmAsR7_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsjf6kfgi4wLr_5alloc5boxed3BoxDNtNtCs1zRBNpMlaOD_5ahash12random_state12RandomSourceNtNtCs95Py6UJrfQF_4core6marker4SyncNtB2s_4SendEL_EE11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0ECsd5SYClHmoOi_11equivalence:
  238|  1.13k|        pub fn get_or_init<F>(&self, f: F) -> &T
  239|  1.13k|        where
  240|  1.13k|            F: FnOnce() -> Box<T>,
  241|  1.13k|        {
  242|  1.13k|            enum Void {}
  243|  1.13k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  244|  1.13k|                Ok(val) => val,
  245|  1.13k|                Err(void) => match void {},
  246|  1.13k|            }
  247|  1.13k|        }
_RNCINvMs1_NtNtCs8D4BVHmAsR7_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCsjf6kfgi4wLr_5alloc5boxed3BoxDNtNtCs1zRBNpMlaOD_5ahash12random_state12RandomSourceNtNtCs95Py6UJrfQF_4core6marker4SyncNtB2u_4SendEL_EE11get_or_initNCNvMs1_B1E_NtB1E_11RandomState7get_src0E0Csd5SYClHmoOi_11equivalence:
  243|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCs8D4BVHmAsR7_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsjf6kfgi4wLr_5alloc5boxed3BoxDNtNtCs1zRBNpMlaOD_5ahash12random_state12RandomSourceNtNtCs95Py6UJrfQF_4core6marker4SyncNtB2s_4SendEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECsd5SYClHmoOi_11equivalence:
  256|  1.13k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  257|  1.13k|        where
  258|  1.13k|            F: FnOnce() -> Result<Box<T>, E>,
  259|  1.13k|        {
  260|  1.13k|            let mut ptr = self.inner.load(Ordering::Acquire);
  261|  1.13k|
  262|  1.13k|            if ptr.is_null() {
  263|      1|                let val = f()?;
  264|      1|                ptr = Box::into_raw(val);
  265|      1|                let exchange = self.inner.compare_exchange(
  266|      1|                    ptr::null_mut(),
  267|      1|                    ptr,
  268|      1|                    Ordering::AcqRel,
  269|      1|                    Ordering::Acquire,
  270|      1|                );
  271|      1|                if let Err(old) = exchange {
  272|      0|                    drop(unsafe { Box::from_raw(ptr) });
  273|      0|                    ptr = old;
  274|      1|                }
  275|  1.13k|            };
  276|  1.13k|            Ok(unsafe { &*ptr })
  277|  1.13k|        }
_RNCINvMs1_NtNtCs8D4BVHmAsR7_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs1zRBNpMlaOD_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  243|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCs8D4BVHmAsR7_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs1zRBNpMlaOD_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  238|  1.13k|        pub fn get_or_init<F>(&self, f: F) -> &T
  239|  1.13k|        where
  240|  1.13k|            F: FnOnce() -> Box<T>,
  241|  1.13k|        {
  242|  1.13k|            enum Void {}
  243|  1.13k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  244|  1.13k|                Ok(val) => val,
  245|  1.13k|                Err(void) => match void {},
  246|  1.13k|            }
  247|  1.13k|        }
_RINvMs1_NtNtCs8D4BVHmAsR7_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCs1zRBNpMlaOD_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  256|  1.13k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  257|  1.13k|        where
  258|  1.13k|            F: FnOnce() -> Result<Box<T>, E>,
  259|  1.13k|        {
  260|  1.13k|            let mut ptr = self.inner.load(Ordering::Acquire);
  261|  1.13k|
  262|  1.13k|            if ptr.is_null() {
  263|      1|                let val = f()?;
  264|      1|                ptr = Box::into_raw(val);
  265|      1|                let exchange = self.inner.compare_exchange(
  266|      1|                    ptr::null_mut(),
  267|      1|                    ptr,
  268|      1|                    Ordering::AcqRel,
  269|      1|                    Ordering::Acquire,
  270|      1|                );
  271|      1|                if let Err(old) = exchange {
  272|      0|                    drop(unsafe { Box::from_raw(ptr) });
  273|      0|                    ptr = old;
  274|      1|                }
  275|  1.13k|            };
  276|  1.13k|            Ok(unsafe { &*ptr })
  277|  1.13k|        }

_RINvXs1E_NtNtCs5A5HtGEAAwP_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  386|  20.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  20.0k|            where
  388|  20.0k|                S: Serializer,
  389|  20.0k|            {
  390|  20.0k|                (**self).serialize(serializer)
  391|  20.0k|            }
_RINvXs1o_NtNtCs5A5HtGEAAwP_5serde3ser5implsTNtNtNtCs1bVuCDejzKf_10fvm_shared8encoding5bytes8BytesSerINtNtCsjf6kfgi4wLr_5alloc3vec3VecRINtNtCshvy9p117Pde_3cid3cid3CidKj40_EEIB1B_RyEENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQIB1B_hEEECsd5SYClHmoOi_11equivalence:
  314|   262k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  315|   262k|                where
  316|   262k|                    S: Serializer,
  317|   262k|                {
  318|   262k|                    let mut tuple = try!(serializer.serialize_tuple($len));
  319|       |                    $(
  320|   262k|                        try!(tuple.serialize_element(&self.$n));
  321|       |                    )+
  322|   262k|                    tuple.end()
  323|   262k|                }
_RINvXs1E_NtNtCs5A5HtGEAAwP_5serde3ser5implsRmNtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  386|  2.27k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  2.27k|            where
  388|  2.27k|                S: Serializer,
  389|  2.27k|            {
  390|  2.27k|                (**self).serialize(serializer)
  391|  2.27k|            }
_RINvXs1G_NtNtCs5A5HtGEAAwP_5serde3ser5implsINtNtCsjf6kfgi4wLr_5alloc5boxed3BoxINtNtCse63mXF9YMld_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtBK_3vec3VechEEECsd5SYClHmoOi_11equivalence:
  386|   260k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   260k|            where
  388|   260k|                S: Serializer,
  389|   260k|            {
  390|   260k|                (**self).serialize(serializer)
  391|   260k|            }
_RINvXs1k_NtNtCs5A5HtGEAAwP_5serde3ser5implsINtNtCsjf6kfgi4wLr_5alloc3vec3VecRINtNtCshvy9p117Pde_3cid3cid3CidKj40_EENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQIBG_hEEECsd5SYClHmoOi_11equivalence:
  194|   262k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|   262k|            where
  196|   262k|                S: Serializer,
  197|   262k|            {
  198|   262k|                serializer.collect_seq(self)
  199|   262k|            }
_RINvXsD_NtNtCs5A5HtGEAAwP_5serde3ser5implsmNtB8_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   11|  2.27k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  2.27k|            where
   13|  2.27k|                S: Serializer,
   14|  2.27k|            {
   15|  2.27k|                serializer.$method(*self $($cast)*)
   16|  2.27k|            }
_RINvXs1E_NtNtCs5A5HtGEAAwP_5serde3ser5implsRRyNtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  386|  18.8k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  18.8k|            where
  388|  18.8k|                S: Serializer,
  389|  18.8k|            {
  390|  18.8k|                (**self).serialize(serializer)
  391|  18.8k|            }
_RINvXs1k_NtNtCs5A5HtGEAAwP_5serde3ser5implsINtNtCsjf6kfgi4wLr_5alloc3vec3VecRyENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQIBG_hEEECsd5SYClHmoOi_11equivalence:
  194|   262k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|   262k|            where
  196|   262k|                S: Serializer,
  197|   262k|            {
  198|   262k|                serializer.collect_seq(self)
  199|   262k|            }
_RINvXs1E_NtNtCs5A5HtGEAAwP_5serde3ser5implsRINtNtCse63mXF9YMld_12fvm_ipld_amt4node4NodeyENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  386|  1.13k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  1.13k|            where
  388|  1.13k|                S: Serializer,
  389|  1.13k|            {
  390|  1.13k|                (**self).serialize(serializer)
  391|  1.13k|            }
_RINvXs1p_NtNtCs5A5HtGEAAwP_5serde3ser5implsTRmBG_RyRINtNtCse63mXF9YMld_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  314|  1.13k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  315|  1.13k|                where
  316|  1.13k|                    S: Serializer,
  317|  1.13k|                {
  318|  1.13k|                    let mut tuple = try!(serializer.serialize_tuple($len));
  319|       |                    $(
  320|  1.13k|                        try!(tuple.serialize_element(&self.$n));
  321|       |                    )+
  322|  1.13k|                    tuple.end()
  323|  1.13k|                }
_RINvXsE_NtNtCs5A5HtGEAAwP_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   11|  20.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  20.0k|            where
   13|  20.0k|                S: Serializer,
   14|  20.0k|            {
   15|  20.0k|                serializer.$method(*self $($cast)*)
   16|  20.0k|            }
_RINvXs1E_NtNtCs5A5HtGEAAwP_5serde3ser5implsRRINtNtCshvy9p117Pde_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  386|   260k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   260k|            where
  388|   260k|                S: Serializer,
  389|   260k|            {
  390|   260k|                (**self).serialize(serializer)
  391|   260k|            }
_RINvXs1E_NtNtCs5A5HtGEAAwP_5serde3ser5implsRINtNtCshvy9p117Pde_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  386|   260k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|   260k|            where
  388|   260k|                S: Serializer,
  389|   260k|            {
  390|   260k|                (**self).serialize(serializer)
  391|   260k|            }

_RINvYQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer11collect_seqRIBZ_RINtNtCshvy9p117Pde_3cid3cid3CidKj40_EEECsd5SYClHmoOi_11equivalence:
 1275|   262k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|   262k|    where
 1277|   262k|        I: IntoIterator,
 1278|   262k|        <I as IntoIterator>::Item: Serialize,
 1279|   262k|    {
 1280|   262k|        let iter = iter.into_iter();
 1281|   262k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|   262k|            let mut iter = iter;
 1286|   262k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|   262k|        serializer.end()
 1297|   262k|    }
_RNCINvYQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer11collect_seqRIB11_RyEE0Csd5SYClHmoOi_11equivalence:
 1286|  18.8k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCs5A5HtGEAAwP_5serde3ser17iterator_len_hintINtNtNtCs95Py6UJrfQF_4core5slice4iter4IterRyEECsd5SYClHmoOi_11equivalence:
 1982|   262k|    match iter.size_hint() {
 1983|   262k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|   262k|}
_RINvNtCs5A5HtGEAAwP_5serde3ser17iterator_len_hintINtNtNtCs95Py6UJrfQF_4core5slice4iter4IterRINtNtCshvy9p117Pde_3cid3cid3CidKj40_EEECsd5SYClHmoOi_11equivalence:
 1982|   262k|    match iter.size_hint() {
 1983|   262k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|   262k|}
_RINvYQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer11collect_seqRIBZ_RyEECsd5SYClHmoOi_11equivalence:
 1275|   262k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|   262k|    where
 1277|   262k|        I: IntoIterator,
 1278|   262k|        <I as IntoIterator>::Item: Serialize,
 1279|   262k|    {
 1280|   262k|        let iter = iter.into_iter();
 1281|   262k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|   262k|            let mut iter = iter;
 1286|   262k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|   262k|        serializer.end()
 1297|   262k|    }
_RNCINvYQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer11collect_seqRIB11_RINtNtCshvy9p117Pde_3cid3cid3CidKj40_EEE0Csd5SYClHmoOi_11equivalence:
 1286|   260k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXsc_NtCsfQ0iEhy9rYZ_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs5A5HtGEAAwP_5serde3ser9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser13CidSerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
  186|   260k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|   260k|    where
  188|   260k|        S: Serializer,
  189|   260k|    {
  190|   260k|        serializer.serialize_bytes(&self.bytes)
  191|   260k|    }
_RINvMNtCsfQ0iEhy9rYZ_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsjf6kfgi4wLr_5alloc3vec3VechEECsd5SYClHmoOi_11equivalence:
   60|   260k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|   260k|        ByteBuf {
   62|   260k|            bytes: bytes.into(),
   63|   260k|        }
   64|   260k|    }

_RINvXs0_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser14SerializeTuple17serialize_elementIB15_RyEECsd5SYClHmoOi_11equivalence:
  552|   262k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|   262k|    where
  554|   262k|        T: ?Sized + ser::Serialize,
  555|   262k|    {
  556|   262k|        value.serialize(&mut **self)
  557|   262k|    }
_RINvXs0_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser14SerializeTuple17serialize_elementRINtNtCse63mXF9YMld_12fvm_ipld_amt4node4NodeyEECsd5SYClHmoOi_11equivalence:
  552|  1.13k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|  1.13k|    where
  554|  1.13k|        T: ?Sized + ser::Serialize,
  555|  1.13k|    {
  556|  1.13k|        value.serialize(&mut **self)
  557|  1.13k|    }
_RINvXs7_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB6_20CollectionSerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser12SerializeSeq17serialize_elementRRyECsd5SYClHmoOi_11equivalence:
  724|  18.8k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  725|  18.8k|    where
  726|  18.8k|        T: ?Sized + ser::Serialize,
  727|  18.8k|    {
  728|  18.8k|        value.serialize(&mut *self.ser)
  729|  18.8k|    }
_RNvMNtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE8write_u8Csd5SYClHmoOi_11equivalence:
  144|  1.57M|    fn write_u8(&mut self, major: u8, value: u8) -> Result<()> {
  145|  1.57M|        if value <= 0x17 {
  146|  1.05M|            self.writer.write_all(&[major << 5 | value])
  147|       |        } else {
  148|   522k|            let buf = [major << 5 | 24, value];
  149|   522k|            self.writer.write_all(&buf)
  150|       |        }
  151|  1.57M|        .map_err(|e| e.into())
  152|  1.57M|    }
_RNvMNtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE9write_u64Csd5SYClHmoOi_11equivalence:
  177|  1.33M|    fn write_u64(&mut self, major: u8, value: u64) -> Result<()> {
  178|  1.33M|        if value <= u64::from(u32::max_value()) {
  179|  1.31M|            self.write_u32(major, value as u32)
  180|       |        } else {
  181|  12.0k|            let mut buf = [major << 5 | 27, 0, 0, 0, 0, 0, 0, 0, 0];
  182|  12.0k|            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());
  183|  12.0k|            self.writer.write_all(&buf).map_err(|e| e.into())
  184|       |        }
  185|  1.33M|    }
_RNvXs_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer15serialize_tupleCsd5SYClHmoOi_11equivalence:
  431|   263k|        self.write_u64(4, len as u64)?;
  432|   263k|        Ok(self)
  433|   263k|    }
_RINvXs7_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB6_20CollectionSerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser12SerializeSeq17serialize_elementRRINtNtCshvy9p117Pde_3cid3cid3CidKj40_EECsd5SYClHmoOi_11equivalence:
  724|   260k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  725|   260k|    where
  726|   260k|        T: ?Sized + ser::Serialize,
  727|   260k|    {
  728|   260k|        value.serialize(&mut *self.ser)
  729|   260k|    }
_RNvXs_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer13serialize_u32Csd5SYClHmoOi_11equivalence:
  296|  2.27k|    fn serialize_u32(self, value: u32) -> Result<()> {
  297|  2.27k|        self.write_u32(0, value)
  298|  2.27k|    }
_RNvXs_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer13serialize_seqCsd5SYClHmoOi_11equivalence:
  425|   524k|    fn serialize_seq(self, len: Option<usize>) -> Result<CollectionSerializer<'a, W>> {
  426|   524k|        self.serialize_collection(4, len)
  427|   524k|    }
_RNvMNtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE9write_u32Csd5SYClHmoOi_11equivalence:
  166|  1.32M|    fn write_u32(&mut self, major: u8, value: u32) -> Result<()> {
  167|  1.32M|        if value <= u32::from(u16::max_value()) {
  168|  1.31M|            self.write_u16(major, value as u16)
  169|       |        } else {
  170|  1.93k|            let mut buf = [major << 5 | 26, 0, 0, 0, 0];
  171|  1.93k|            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());
  172|  1.93k|            self.writer.write_all(&buf).map_err(|e| e.into())
  173|       |        }
  174|  1.32M|    }
_RINvXs0_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser14SerializeTuple17serialize_elementIB15_RINtNtCshvy9p117Pde_3cid3cid3CidKj40_EEECsd5SYClHmoOi_11equivalence:
  552|   262k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|   262k|    where
  554|   262k|        T: ?Sized + ser::Serialize,
  555|   262k|    {
  556|   262k|        value.serialize(&mut **self)
  557|   262k|    }
_RINvXs0_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser14SerializeTuple17serialize_elementRyECsd5SYClHmoOi_11equivalence:
  552|  1.13k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|  1.13k|    where
  554|  1.13k|        T: ?Sized + ser::Serialize,
  555|  1.13k|    {
  556|  1.13k|        value.serialize(&mut **self)
  557|  1.13k|    }
_RNvXs0_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB5_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser14SerializeTuple3endCsd5SYClHmoOi_11equivalence:
  560|   263k|    fn end(self) -> Result<()> {
  561|   263k|        Ok(())
  562|   263k|    }
_RNvXs_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer13serialize_u64Csd5SYClHmoOi_11equivalence:
  301|  20.0k|    fn serialize_u64(self, value: u64) -> Result<()> {
  302|  20.0k|        self.write_u64(0, value)
  303|  20.0k|    }
_RNvXs9_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB5_13CidSerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer15serialize_bytesCsd5SYClHmoOi_11equivalence:
  826|   260k|        self.0.write_u8(MAJOR_TYPE_TAG, CBOR_TAGS_CID)?;
  827|       |        // THe CID is prefixed with a null byte, hence add 1 to the length of the byte string.
  828|   260k|        self.0.write_u64(
  829|   260k|            MAJOR_TYPE_BYTES,
  830|   260k|            u64::try_from(value.len() + 1).expect("Platform must be at most 64-bit"),
  831|   260k|        )?;
  832|       |        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  833|   260k|        self.0.writer.write_all(&[0x00]).map_err(Into::into)?;
  834|   260k|        self.0.writer.write_all(value).map_err(Into::into)?;
  835|   260k|        Ok(())
  836|   260k|    }
_RINvXs_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB5_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer24serialize_newtype_structNtNtCsfQ0iEhy9rYZ_11serde_bytes7bytebuf7ByteBufECsd5SYClHmoOi_11equivalence:
  392|   260k|    fn serialize_newtype_struct<T>(self, name: &'static str, value: &T) -> Result<()>
  393|   260k|    where
  394|   260k|        T: ?Sized + ser::Serialize,
  395|   260k|    {
  396|   260k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  397|   260k|            value.serialize(&mut CidSerializer(self))
  398|       |        } else {
  399|      0|            value.serialize(self)
  400|       |        }
  401|   260k|    }
_RNvXs_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB4_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser10Serializer15serialize_bytesCsd5SYClHmoOi_11equivalence:
  350|   262k|        self.write_u64(2, value.len() as u64)?;
  351|   262k|        self.writer.write_all(value).map_err(|e| e.into())
  352|   262k|    }
_RNvMNtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE9write_u16Csd5SYClHmoOi_11equivalence:
  155|  1.31M|    fn write_u16(&mut self, major: u8, value: u16) -> Result<()> {
  156|  1.31M|        if value <= u16::from(u8::max_value()) {
  157|  1.31M|            self.write_u8(major, value as u8)
  158|       |        } else {
  159|    718|            let mut buf = [major << 5 | 25, 0, 0];
  160|    718|            (&mut buf[1..]).copy_from_slice(&value.to_be_bytes());
  161|    718|            self.writer.write_all(&buf).map_err(|e| e.into())
  162|       |        }
  163|  1.31M|    }
_RINvXs0_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser14SerializeTuple17serialize_elementNtNtNtCs1bVuCDejzKf_10fvm_shared8encoding5bytes8BytesSerECsd5SYClHmoOi_11equivalence:
  552|   262k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|   262k|    where
  554|   262k|        T: ?Sized + ser::Serialize,
  555|   262k|    {
  556|   262k|        value.serialize(&mut **self)
  557|   262k|    }
_RINvXs0_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serQINtB6_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser14SerializeTuple17serialize_elementRmECsd5SYClHmoOi_11equivalence:
  552|  2.27k|    fn serialize_element<T>(&mut self, value: &T) -> Result<()>
  553|  2.27k|    where
  554|  2.27k|        T: ?Sized + ser::Serialize,
  555|  2.27k|    {
  556|  2.27k|        value.serialize(&mut **self)
  557|  2.27k|    }
_RNvXs7_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB5_20CollectionSerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEENtNtCs5A5HtGEAAwP_5serde3ser12SerializeSeq3endCsd5SYClHmoOi_11equivalence:
  732|   524k|    fn end(self) -> Result<()> {
  733|   524k|        self.end_inner()
  734|   524k|    }
_RNvMNtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE20serialize_collectionCsd5SYClHmoOi_11equivalence:
  188|   524k|    fn serialize_collection(
  189|   524k|        &mut self,
  190|   524k|        major: u8,
  191|   524k|        len: Option<usize>,
  192|   524k|    ) -> Result<CollectionSerializer<'_, W>> {
  193|   524k|        let needs_eof = match len {
  194|   524k|            Some(len) => {
  195|   524k|                self.write_u64(major, len as u64)?;
  196|   524k|                false
  197|       |            }
  198|       |            None => {
  199|      0|                self.writer
  200|      0|                    .write_all(&[major << 5 | 31])
  201|      0|                    .map_err(|e| e.into())?;
  202|      0|                true
  203|       |            }
  204|       |        };
  205|       |
  206|   524k|        Ok(CollectionSerializer {
  207|   524k|            ser: self,
  208|   524k|            needs_eof,
  209|   524k|        })
  210|   524k|    }
_RNvMs6_NtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB5_20CollectionSerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE9end_innerCsd5SYClHmoOi_11equivalence:
  707|   524k|    fn end_inner(self) -> Result<()> {
  708|   524k|        if self.needs_eof {
  709|      0|            self.ser.writer.write_all(&[0xff]).map_err(|e| e.into())
  710|       |        } else {
  711|   524k|            Ok(())
  712|       |        }
  713|   524k|    }
_RNvMNtCs4vxJXQSajVf_18serde_ipld_dagcbor3serINtB2_10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE3newCsd5SYClHmoOi_11equivalence:
   69|   262k|    pub fn new(writer: W) -> Self {
   70|   262k|        Serializer {
   71|   262k|            writer,
   72|   262k|            packed: false,
   73|   262k|            enum_as_map: true,
   74|   262k|        }
   75|   262k|    }

_RNvXNtCs4vxJXQSajVf_18serde_ipld_dagcbor5writeQINtNtCsjf6kfgi4wLr_5alloc3vec3VechENtB2_5Write9write_allCsd5SYClHmoOi_11equivalence:
   60|  2.37M|    fn write_all(&mut self, buf: &[u8]) -> Result<(), Self::Error> {
   61|  2.37M|        (*self).write_all(buf)
   62|  2.37M|    }
_RNvXs3_NtCs4vxJXQSajVf_18serde_ipld_dagcbor5writeINtNtCsjf6kfgi4wLr_5alloc3vec3VechENtB5_5Write9write_all:
   99|  2.37M|    fn write_all(&mut self, buf: &[u8]) -> Result<(), Self::Error> {
  100|  2.37M|        self.extend_from_slice(buf);
  101|  2.37M|        Ok(())
  102|  2.37M|    }

_RNvNtCsk8iju7mtsh4_15unsigned_varint6encode2u8Csd5SYClHmoOi_11equivalence:
   45|   260k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|   260k|    encode!(number, buf)
   47|   260k|}
_RNvNtCsk8iju7mtsh4_15unsigned_varint6encode9u8_bufferCsd5SYClHmoOi_11equivalence:
  101|   260k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|   260k|    [0; U8_LEN]
  103|   260k|}
_RNvNtCsk8iju7mtsh4_15unsigned_varint6encode10u64_bufferCsd5SYClHmoOi_11equivalence:
  119|   782k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|   782k|    [0; U64_LEN]
  121|   782k|}
_RNvNtCsk8iju7mtsh4_15unsigned_varint6encode3u64Csd5SYClHmoOi_11equivalence:
   69|   782k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|   782k|    encode!(number, buf)
   71|   782k|}

_RNvXs1_Csd5SYClHmoOi_11equivalenceNtB5_6MethodNtCs7HZv1qFp7mx_9arbitrary9Arbitrary19arbitrary_take_rest:
   18|    567|#[derive(Debug, Arbitrary)]
_RNCNvCsd5SYClHmoOi_11equivalence22rust_fuzzer_test_inputs_0B3_:
   62|  9.44k|    let simplified_ops = m.iter().sorted_by_key(|(_, v)| *v).map(|(k ,v)| {
   63|  9.44k|        Operation{idx: *k, method: Method::Insert(*v)}
   64|  9.44k|    }).collect();
_RNCNvXs1_Csd5SYClHmoOi_11equivalenceNtB7_6MethodNtCs7HZv1qFp7mx_9arbitrary9Arbitrary9size_hint0B7_:
   18|    569|#[derive(Debug, Arbitrary)]
_RNvXs_Csd5SYClHmoOi_11equivalenceNtB4_9OperationNtCs7HZv1qFp7mx_9arbitrary9Arbitrary9size_hintB4_:
   12|    569|#[derive(Debug, Arbitrary)]
_RNCNvXs_Csd5SYClHmoOi_11equivalenceNtB6_9OperationNtCs7HZv1qFp7mx_9arbitrary9Arbitrary9size_hint0B6_:
   12|    569|#[derive(Debug, Arbitrary)]
_RNvXs_Csd5SYClHmoOi_11equivalenceNtB4_9OperationNtCs7HZv1qFp7mx_9arbitrary9Arbitrary19arbitrary_take_rest:
   12|    567|#[derive(Debug, Arbitrary)]
_RNvXs1_Csd5SYClHmoOi_11equivalenceNtB5_6MethodNtCs7HZv1qFp7mx_9arbitrary9Arbitrary9arbitrary:
   18|  20.3k|#[derive(Debug, Arbitrary)]
_RNvCsd5SYClHmoOi_11equivalence7execute:
   25|  1.13k|fn execute(ops: Vec<Operation>) -> (Cid, ahash::AHashMap<u64, u64>) {
   26|  1.13k|    let db = fvm_shared::blockstore::MemoryBlockstore::default();
   27|  1.13k|    let mut amt = Amt::new(&db);
   28|  1.13k|    let mut elements = ahash::AHashMap::new();
   29|       |
   30|  30.3k|    for (i, Operation { idx, method }) in ops.into_iter().enumerate() {
   31|  30.3k|        if idx > MAX_INDEX {
   32|    391|            continue;
   33|  29.9k|        }
   34|  29.9k|
   35|  29.9k|        match method {
   36|  23.4k|            Method::Insert(v) => {
   37|  23.4k|                elements.insert(idx, v);
   38|  23.4k|                amt.set(idx, v).unwrap();
   39|  23.4k|            }
   40|       |            Method::Remove => {
   41|  4.11k|                let el = elements.remove(&idx);
   42|  4.11k|                let amt_deleted = amt.delete(idx).unwrap();
   43|  4.11k|                assert_eq!(amt_deleted, el, "step {}", i);
   44|       |            }
   45|       |            Method::Get => {
   46|  2.36k|                let ev = elements.get(&idx);
   47|  2.36k|                let av = amt.get(idx).unwrap();
   48|  2.36k|                assert_eq!(av, ev, "step {}", i);
   49|       |            }
   50|       |        }
   51|       |    }
   52|  1.13k|    (amt.flush().unwrap(), elements)
   53|  1.13k|}
_RNvXs_Csd5SYClHmoOi_11equivalenceNtB4_9OperationNtCs7HZv1qFp7mx_9arbitrary9Arbitrary9arbitrary:
   12|  20.3k|#[derive(Debug, Arbitrary)]
_RNvXs1_Csd5SYClHmoOi_11equivalenceNtB5_6MethodNtCs7HZv1qFp7mx_9arbitrary9Arbitrary9size_hintB5_:
   18|    569|#[derive(Debug, Arbitrary)]
_RNCNvCsd5SYClHmoOi_11equivalence22rust_fuzzer_test_input0B3_:
   62|  92.8k|    let simplified_ops = m.iter().sorted_by_key(|(_, v)| *v).map(|(k ,v)| {

_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE6deleteCsd5SYClHmoOi_11equivalence:
  174|  4.11k|    pub fn delete(&mut self, i: u64) -> Result<Option<V>, Error> {
  175|  4.11k|        if i > MAX_INDEX {
  176|      0|            return Err(Error::OutOfRange(i));
  177|  4.11k|        }
  178|  4.11k|
  179|  4.11k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  180|       |            // Index was out of range of current AMT
  181|    815|            return Ok(None);
  182|  3.29k|        }
  183|       |
  184|       |        // Delete node from AMT
  185|  3.29k|        let deleted =
  186|  3.29k|            self.root
  187|  3.29k|                .node
  188|  3.29k|                .delete(&self.block_store, self.height(), self.bit_width(), i)?;
  189|       |
  190|  3.29k|        if deleted.is_none() {
  191|  2.61k|            return Ok(None);
  192|    680|        }
  193|    680|
  194|    680|        self.root.count -= 1;
  195|    680|
  196|    680|        if self.root.node.is_empty() {
  197|    103|            // Last link was removed, replace root with a leaf node and reset height.
  198|    103|            self.root.node = Node::Leaf {
  199|    103|                vals: init_sized_vec(self.root.bit_width),
  200|    103|            };
  201|    103|            self.root.height = 0;
  202|    103|        } else {
  203|       |            // Handle collapsing node when the root is a link node with only one link,
  204|       |            // sub node can be moved up into the root.
  205|  2.23k|            while self.root.node.can_collapse() && self.height() > 0 {
  206|  1.66k|                let sub_node: Node<V> = match &mut self.root.node {
  207|  1.66k|                    Node::Link { links, .. } => match &mut links[0] {
  208|  1.66k|                        Some(Link::Dirty(node)) => {
  209|  1.66k|                            *std::mem::replace(node, Box::new(Node::empty()))
  210|       |                        }
  211|      0|                        Some(Link::Cid { cid, cache }) => {
  212|      0|                            let cache_node = std::mem::take(cache);
  213|      0|                            if let Some(sn) = cache_node.into_inner() {
  214|      0|                                *sn
  215|       |                            } else {
  216|       |                                // Only retrieve sub node if not found in cache
  217|      0|                                self.block_store
  218|      0|                                    .get_cbor::<CollapsedNode<V>>(cid)?
  219|      0|                                    .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  220|      0|                                    .expand(self.root.bit_width)?
  221|       |                            }
  222|       |                        }
  223|      0|                        _ => unreachable!("First index checked to be Some in `can_collapse`"),
  224|       |                    },
  225|      0|                    Node::Leaf { .. } => unreachable!("Non zero height cannot be a leaf node"),
  226|       |                };
  227|       |
  228|  1.66k|                self.root.node = sub_node;
  229|  1.66k|                self.root.height -= 1;
  230|       |            }
  231|       |        }
  232|       |
  233|    680|        Ok(deleted)
  234|  4.11k|    }
_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE3setCsd5SYClHmoOi_11equivalence:
  123|  23.4k|    pub fn set(&mut self, i: u64, val: V) -> Result<(), Error> {
  124|  23.4k|        if i > MAX_INDEX {
  125|      0|            return Err(Error::OutOfRange(i));
  126|  23.4k|        }
  127|       |
  128|  45.9k|        while i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  129|       |            // node at index exists
  130|  22.4k|            if !self.root.node.is_empty() {
  131|  6.76k|                // Parent node for expansion
  132|  6.76k|                let mut new_links: Vec<Option<Link<V>>> = init_sized_vec(self.root.bit_width);
  133|  6.76k|
  134|  6.76k|                // Take root node to be moved down
  135|  6.76k|                let node = std::mem::replace(&mut self.root.node, Node::empty());
  136|  6.76k|
  137|  6.76k|                // Set link to child node being expanded
  138|  6.76k|                new_links[0] = Some(Link::Dirty(Box::new(node)));
  139|  6.76k|
  140|  6.76k|                self.root.node = Node::Link { links: new_links };
  141|  15.7k|            } else {
  142|  15.7k|                // If first expansion is before a value inserted, convert base node to Link
  143|  15.7k|                self.root.node = Node::Link {
  144|  15.7k|                    links: init_sized_vec(self.bit_width()),
  145|  15.7k|                };
  146|  15.7k|            }
  147|       |            // Incrememnt height after each iteration
  148|  22.4k|            self.root.height += 1;
  149|       |        }
  150|       |
  151|  23.4k|        if self
  152|  23.4k|            .root
  153|  23.4k|            .node
  154|  23.4k|            .set(&self.block_store, self.height(), self.bit_width(), i, val)?
  155|  23.4k|            .is_none()
  156|  19.5k|        {
  157|  19.5k|            self.root.count += 1;
  158|  19.5k|        }
  159|       |
  160|  23.4k|        Ok(())
  161|  23.4k|    }
_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE3newCsd5SYClHmoOi_11equivalence:
   57|  1.13k|    pub fn new(block_store: BS) -> Self {
   58|  1.13k|        Self::new_with_bit_width(block_store, DEFAULT_BIT_WIDTH)
   59|  1.13k|    }
_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE5flushCsd5SYClHmoOi_11equivalence:
  262|  1.13k|        self.root.node.flush(&self.block_store)?;
  263|  1.13k|        Ok(self.block_store.put_cbor(&self.root, Code::Blake2b256)?)
  264|  1.13k|    }
_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE9bit_widthCsd5SYClHmoOi_11equivalence:
   69|  96.7k|    fn bit_width(&self) -> u32 {
   70|  96.7k|        self.root.bit_width
   71|  96.7k|    }
_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE6heightCsd5SYClHmoOi_11equivalence:
   89|  82.7k|    pub fn height(&self) -> u32 {
   90|  82.7k|        self.root.height
   91|  82.7k|    }
_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE3getCsd5SYClHmoOi_11equivalence:
  108|  2.36k|    pub fn get(&self, i: u64) -> Result<Option<&V>, Error> {
  109|  2.36k|        if i > MAX_INDEX {
  110|      0|            return Err(Error::OutOfRange(i));
  111|  2.36k|        }
  112|  2.36k|
  113|  2.36k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  114|    490|            return Ok(None);
  115|  1.87k|        }
  116|  1.87k|
  117|  1.87k|        self.root
  118|  1.87k|            .node
  119|  1.87k|            .get(&self.block_store, self.height(), self.bit_width(), i)
  120|  2.36k|    }
_RNvMs_NtCse63mXF9YMld_12fvm_ipld_amt3amtINtB4_3AmtyRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE18new_with_bit_widthCsd5SYClHmoOi_11equivalence:
   62|  1.13k|    pub fn new_with_bit_width(block_store: BS, bit_width: u32) -> Self {
   63|  1.13k|        Self {
   64|  1.13k|            root: Root::new(bit_width),
   65|  1.13k|            block_store,
   66|  1.13k|        }
   67|  1.13k|    }

_RNCINvCse63mXF9YMld_12fvm_ipld_amt14init_sized_vecyE0Csd5SYClHmoOi_11equivalence:
   37|   163k|    std::iter::repeat_with(|| None)
_RNCINvCse63mXF9YMld_12fvm_ipld_amt14init_sized_vecINtNtB4_4node4LinkyEE0Csd5SYClHmoOi_11equivalence:
   37|  2.15M|    std::iter::repeat_with(|| None)
_RINvCse63mXF9YMld_12fvm_ipld_amt14init_sized_vecyECsd5SYClHmoOi_11equivalence:
   36|  20.4k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   37|  20.4k|    std::iter::repeat_with(|| None)
   38|  20.4k|        .take(1 << bit_width)
   39|  20.4k|        .collect()
   40|  20.4k|}
_RINvCse63mXF9YMld_12fvm_ipld_amt14init_sized_vecINtNtB2_4node4LinkyEECsd5SYClHmoOi_11equivalence:
   36|   269k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   37|   269k|    std::iter::repeat_with(|| None)
   38|   269k|        .take(1 << bit_width)
   39|   269k|        .collect()
   40|   269k|}
_RNvCse63mXF9YMld_12fvm_ipld_amt16nodes_for_height:
   28|   601k|fn nodes_for_height(bit_width: u32, height: u32) -> u64 {
   29|   601k|    let height_log_two = bit_width as u64 * height as u64;
   30|   601k|    if height_log_two >= 64 {
   31|  23.2k|        return std::u64::MAX;
   32|   577k|    }
   33|   577k|    1 << height_log_two
   34|   601k|}

_RNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB5_4NodeyE8set_leafCsd5SYClHmoOi_11equivalence:
  333|  23.4k|    fn set_leaf(&mut self, i: u64, val: V) -> Option<V> {
  334|  23.4k|        match self {
  335|  23.4k|            Node::Leaf { vals } => {
  336|  23.4k|                let prev = std::mem::replace(
  337|  23.4k|                    vals.get_mut(usize::try_from(i).unwrap()).unwrap(),
  338|  23.4k|                    Some(val),
  339|  23.4k|                );
  340|  23.4k|                prev
  341|       |            }
  342|      0|            Node::Link { .. } => panic!("set_leaf should never be called on a shard of links"),
  343|       |        }
  344|  23.4k|    }
_RINvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB6_4NodeyE5flushRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreECsd5SYClHmoOi_11equivalence:
  184|   262k|        if let Node::Link { links } = self {
  185|   260k|            for link in links.iter_mut().flatten() {
  186|       |                // links should only be flushed if the bitmap is set.
  187|   260k|                if let Link::Dirty(n) = link {
  188|       |                    // flush sub node to clear caches
  189|   260k|                    n.flush(bs)?;
  190|       |
  191|       |                    // Puts node in blockstore and and retrieves it's CID
  192|   260k|                    let cid = bs.put_cbor(n, Code::Blake2b256)?;
  193|       |
  194|       |                    // Replace the data with some arbitrary node to move without requiring clone
  195|   260k|                    let existing = std::mem::replace(n, Box::new(Node::empty()));
  196|   260k|
  197|   260k|                    // Can keep the flushed node in link cache
  198|   260k|                    let cache = OnceCell::from(existing);
  199|   260k|                    *link = Link::Cid { cid, cache };
  200|      0|                }
  201|       |            }
  202|  18.8k|        }
  203|       |
  204|   262k|        Ok(())
  205|   262k|    }
_RNCNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapses_0Csd5SYClHmoOi_11equivalence:
  216|  2.12k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB5_4NodeyE8is_emptyCsd5SYClHmoOi_11equivalence:
  224|  36.3k|    pub(super) fn is_empty(&self) -> bool {
  225|  36.3k|        match self {
  226|  34.5k|            Node::Link { links } => links.iter().all(|l| l.is_none()),
  227|  1.81k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
  228|       |        }
  229|  36.3k|    }
_RNCNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_emptys_0Csd5SYClHmoOi_11equivalence:
  227|  13.5k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
_RNCNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_empty0Csd5SYClHmoOi_11equivalence:
  226|   209k|            Node::Link { links } => links.iter().all(|l| l.is_none()),
_RNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB5_4NodeyE5emptyCsd5SYClHmoOi_11equivalence:
  176|   269k|    pub(super) fn empty() -> Self {
  177|   269k|        Node::Leaf {
  178|   269k|            vals: Default::default(),
  179|   269k|        }
  180|   269k|    }
_RINvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB6_4NodeyE6deleteRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreECsd5SYClHmoOi_11equivalence:
  347|  29.5k|    pub(super) fn delete<DB: Blockstore>(
  348|  29.5k|        &mut self,
  349|  29.5k|        bs: &DB,
  350|  29.5k|        height: u32,
  351|  29.5k|        bit_width: u32,
  352|  29.5k|        i: u64,
  353|  29.5k|    ) -> Result<Option<V>, Error> {
  354|  29.5k|        match self {
  355|    712|            Self::Leaf { vals } => Ok(vals
  356|    712|                .get_mut(usize::try_from(i).unwrap())
  357|    712|                .and_then(std::mem::take)),
  358|  28.8k|            Self::Link { links } => {
  359|  28.8k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  360|  28.8k|                    .try_into()
  361|  28.8k|                    .unwrap();
  362|  28.8k|                let (deleted, replace) = match &mut links[sub_i] {
  363|  26.2k|                    Some(Link::Dirty(n)) => {
  364|  26.2k|                        let deleted = n.delete(
  365|  26.2k|                            bs,
  366|  26.2k|                            height - 1,
  367|  26.2k|                            bit_width,
  368|  26.2k|                            i % nodes_for_height(bit_width, height),
  369|  26.2k|                        )?;
  370|  26.2k|                        if deleted.is_none() {
  371|       |                            // Index to be deleted was not found
  372|  13.0k|                            return Ok(None);
  373|  13.2k|                        }
  374|  13.2k|                        if !n.is_empty() {
  375|       |                            // Link node is not empty yet, just return deleted
  376|  3.29k|                            return Ok(deleted);
  377|  9.92k|                        }
  378|  9.92k|
  379|  9.92k|                        // Remove needs to be done outside of the `if let` for memory safety.
  380|  9.92k|                        (deleted, None)
  381|       |                    }
  382|      0|                    Some(Link::Cid { cid, cache }) => {
  383|      0|                        // Take cache, will be replaced if no nodes deleted
  384|      0|                        cache.get_or_try_init(|| {
  385|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  386|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  387|       |                                .expand(bit_width)
  388|       |                                .map(Box::new)
  389|      0|                        })?;
  390|      0|                        let sub_node = cache.get_mut().expect("filled line above");
  391|      0|                        let deleted = sub_node.delete(
  392|      0|                            bs,
  393|      0|                            height - 1,
  394|      0|                            bit_width,
  395|      0|                            i % nodes_for_height(bit_width, height),
  396|      0|                        )?;
  397|      0|                        if deleted.is_none() {
  398|       |                            // Index to be deleted was not found
  399|      0|                            return Ok(None);
  400|      0|                        };
  401|      0|                        let sub_node = std::mem::replace(sub_node, Box::new(Node::empty()));
  402|      0|
  403|      0|                        if sub_node.is_empty() {
  404|       |                            // Sub node is empty, clear link.
  405|      0|                            (deleted, None)
  406|       |                        } else {
  407|       |                            // Link was modified and is now marked dirty.
  408|      0|                            (deleted, Some(Link::Dirty(sub_node)))
  409|       |                        }
  410|       |                    }
  411|       |                    // Link index is empty.
  412|  2.58k|                    None => return Ok(None),
  413|       |                };
  414|       |
  415|  9.92k|                links[sub_i] = replace;
  416|  9.92k|
  417|  9.92k|                Ok(deleted)
  418|       |            }
  419|       |        }
  420|  29.5k|    }
_RINvXs2_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB6_4NodeyENtNtCs5A5HtGEAAwP_5serde3ser9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   84|   262k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   85|   262k|    where
   86|   262k|        S: ser::Serializer,
   87|   262k|    {
   88|   262k|        match &self {
   89|  18.8k|            Node::Leaf { vals } => {
   90|  18.8k|                let mut values = Vec::<&V>::with_capacity(vals.len());
   91|  18.8k|                let mut bmap = vec![0u8; ((vals.len().saturating_sub(1)) / 8) + 1];
   92|   150k|                for (i, v) in vals.iter().enumerate() {
   93|   150k|                    if let Some(val) = v {
   94|  18.8k|                        values.push(val);
   95|  18.8k|                        bmap[i / 8] |= 1 << (i % 8);
   96|   131k|                    }
   97|       |                }
   98|  18.8k|                (BytesSer(&bmap), Vec::<&Cid>::new(), values).serialize(s)
   99|       |            }
  100|   243k|            Node::Link { links } => {
  101|   243k|                let mut collapsed = Vec::<&Cid>::with_capacity(links.len());
  102|   243k|                let mut bmap = vec![0u8; ((links.len().saturating_sub(1)) / 8) + 1];
  103|  1.94M|                for (i, v) in links.iter().enumerate() {
  104|  1.94M|                    if let Some(val) = v {
  105|   260k|                        if let Link::Cid { cid, .. } = val {
  106|   260k|                            collapsed.push(cid);
  107|   260k|                            bmap[i / 8] |= 1 << (i % 8);
  108|   260k|                        } else {
  109|      0|                            return Err(ser::Error::custom(Error::Cached));
  110|       |                        }
  111|  1.68M|                    }
  112|       |                }
  113|   243k|                (BytesSer(&bmap), collapsed, Vec::<&V>::new()).serialize(s)
  114|       |            }
  115|       |        }
  116|   262k|    }
_RNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB5_4NodeyE12can_collapseCsd5SYClHmoOi_11equivalence:
  209|  2.23k|    pub(super) fn can_collapse(&self) -> bool {
  210|  2.23k|        match self {
  211|  2.18k|            Node::Link { links } => {
  212|  2.18k|                // Check if first index is a link and all other values are empty.
  213|  2.18k|                links.get(0).and_then(|l| l.as_ref()).is_some()
  214|  2.12k|                    && links
  215|  2.12k|                        .get(1..)
  216|  2.12k|                        .map(|l| l.iter().all(|l| l.is_none()))
  217|  2.12k|                        .unwrap_or(true)
  218|       |            }
  219|     56|            Node::Leaf { .. } => false,
  220|       |        }
  221|  2.23k|    }
_RINvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB6_4NodeyE3getRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreECsd5SYClHmoOi_11equivalence:
  232|  12.3k|    pub(super) fn get<DB: Blockstore>(
  233|  12.3k|        &self,
  234|  12.3k|        bs: &DB,
  235|  12.3k|        height: u32,
  236|  12.3k|        bit_width: u32,
  237|  12.3k|        i: u64,
  238|  12.3k|    ) -> Result<Option<&V>, Error> {
  239|  12.3k|        match self {
  240|    237|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
  241|  12.0k|            Node::Link { links, .. } => {
  242|  12.0k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  243|  12.0k|                    .try_into()
  244|  12.0k|                    .unwrap();
  245|  12.0k|                match links.get(sub_i).and_then(|v| v.as_ref()) {
  246|      0|                    Some(Link::Cid { cid, cache }) => {
  247|      0|                        let cached_node = cache.get_or_try_init(|| {
  248|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  249|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  250|       |                                .expand(bit_width)
  251|       |                                .map(Box::new)
  252|      0|                        })?;
  253|       |
  254|      0|                        cached_node.get(
  255|      0|                            bs,
  256|      0|                            height - 1,
  257|      0|                            bit_width,
  258|      0|                            i % nodes_for_height(bit_width, height),
  259|      0|                        )
  260|       |                    }
  261|  10.4k|                    Some(Link::Dirty(n)) => n.get(
  262|  10.4k|                        bs,
  263|  10.4k|                        height - 1,
  264|  10.4k|                        bit_width,
  265|  10.4k|                        i % nodes_for_height(bit_width, height),
  266|  10.4k|                    ),
  267|  1.63k|                    None => Ok(None),
  268|       |                }
  269|       |            }
  270|       |        }
  271|  12.3k|    }
_RNCINvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreE0Csd5SYClHmoOi_11equivalence:
  240|    237|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
_RINvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB6_4NodeyE3setRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreECsd5SYClHmoOi_11equivalence:
  274|   494k|    pub(super) fn set<DB: Blockstore>(
  275|   494k|        &mut self,
  276|   494k|        bs: &DB,
  277|   494k|        height: u32,
  278|   494k|        bit_width: u32,
  279|   494k|        i: u64,
  280|   494k|        val: V,
  281|   494k|    ) -> Result<Option<V>, Error> {
  282|   494k|        if height == 0 {
  283|  23.4k|            return Ok(self.set_leaf(i, val));
  284|   471k|        }
  285|   471k|
  286|   471k|        let nfh = nodes_for_height(bit_width, height);
  287|   471k|
  288|   471k|        // If dividing by nodes for height should give an index for link in node
  289|   471k|        let idx: usize = (i / nfh).try_into().expect("index overflow");
  290|       |
  291|   471k|        if let Node::Link { links } = self {
  292|   471k|            links[idx] = match &mut links[idx] {
  293|      0|                Some(Link::Cid { cid, cache }) => {
  294|      0|                    let cache_node = std::mem::take(cache);
  295|      0|                    let sub_node = if let Some(sn) = cache_node.into_inner() {
  296|      0|                        sn
  297|       |                    } else {
  298|       |                        // Only retrieve sub node if not found in cache
  299|      0|                        bs.get_cbor::<CollapsedNode<V>>(cid)?
  300|      0|                            .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  301|      0|                            .expand(bit_width)
  302|      0|                            .map(Box::new)?
  303|       |                    };
  304|       |
  305|      0|                    Some(Link::Dirty(sub_node))
  306|       |                }
  307|       |                None => {
  308|   265k|                    let node = match height {
  309|  19.2k|                        1 => Node::Leaf {
  310|  19.2k|                            vals: init_sized_vec(bit_width),
  311|  19.2k|                        },
  312|   246k|                        _ => Node::Link {
  313|   246k|                            links: init_sized_vec(bit_width),
  314|   246k|                        },
  315|       |                    };
  316|   265k|                    Some(Link::Dirty(Box::new(node)))
  317|       |                }
  318|   205k|                Some(Link::Dirty(node)) => {
  319|   205k|                    return node.set(bs, height - 1, bit_width, i % nfh, val)
  320|       |                }
  321|       |            };
  322|       |
  323|   265k|            if let Some(Link::Dirty(n)) = &mut links[idx] {
  324|   265k|                n.set(bs, height - 1, bit_width, i % nfh, val)
  325|       |            } else {
  326|      0|                unreachable!("Value is set as cached")
  327|       |            }
  328|       |        } else {
  329|      0|            unreachable!("should not be handled");
  330|       |        }
  331|   494k|    }
_RNCNCNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB9_4NodeyE12can_collapses_00Csd5SYClHmoOi_11equivalence:
  216|  12.5k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RNCNvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapse0Csd5SYClHmoOi_11equivalence:
  213|  2.18k|                links.get(0).and_then(|l| l.as_ref()).is_some()
_RNCINvMs4_NtCse63mXF9YMld_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreEs_0Csd5SYClHmoOi_11equivalence:
  245|  12.0k|                match links.get(sub_i).and_then(|v| v.as_ref()) {

_RINvXs_NtCse63mXF9YMld_12fvm_ipld_amt4rootINtB5_4RootyENtNtCs5A5HtGEAAwP_5serde3ser9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
   36|  1.13k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   37|  1.13k|    where
   38|  1.13k|        S: ser::Serializer,
   39|  1.13k|    {
   40|  1.13k|        (&self.bit_width, &self.height, &self.count, &self.node).serialize(s)
   41|  1.13k|    }
_RNvMNtCse63mXF9YMld_12fvm_ipld_amt4rootINtB2_4RootyE3newCsd5SYClHmoOi_11equivalence:
   20|  1.13k|    pub(super) fn new(bit_width: u32) -> Self {
   21|  1.13k|        Self {
   22|  1.13k|            bit_width,
   23|  1.13k|            count: 0,
   24|  1.13k|            height: 0,
   25|  1.13k|            node: Node::Leaf {
   26|  1.13k|                vals: init_sized_vec(bit_width),
   27|  1.13k|            },
   28|  1.13k|        }
   29|  1.13k|    }

_RNvXs_NtNtCs1bVuCDejzKf_10fvm_shared10blockstore5blockINtB4_5BlockRINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEINtNtCs95Py6UJrfQF_4core7convert5AsRefShE6as_refCsd5SYClHmoOi_11equivalence:
   40|   262k|    fn as_ref(&self) -> &[u8] {
   41|   262k|        self.data.as_ref()
   42|   262k|    }
_RNvMNtNtCs1bVuCDejzKf_10fvm_shared10blockstore5blockINtB2_5BlockRINtNtCsjf6kfgi4wLr_5alloc3vec3VechEE3cidCsd5SYClHmoOi_11equivalence:
   26|   262k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   27|   262k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   28|   262k|    }

_RINvYRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreNtNtB8_4cbor9CborStore8put_cborINtNtCse63mXF9YMld_12fvm_ipld_amt4root4RootyEECsd5SYClHmoOi_11equivalence:
   20|  1.13k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   21|  1.13k|    where
   22|  1.13k|        S: ser::Serialize,
   23|  1.13k|    {
   24|  1.13k|        let bytes = to_vec(obj)?;
   25|  1.13k|        self.put(
   26|  1.13k|            code,
   27|  1.13k|            &Block {
   28|  1.13k|                codec: DAG_CBOR,
   29|  1.13k|                data: &bytes,
   30|  1.13k|            },
   31|  1.13k|        )
   32|  1.13k|    }
_RINvYRNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreNtNtB8_4cbor9CborStore8put_cborINtNtCsjf6kfgi4wLr_5alloc5boxed3BoxINtNtCse63mXF9YMld_12fvm_ipld_amt4node4NodeyEEECsd5SYClHmoOi_11equivalence:
   20|   260k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   21|   260k|    where
   22|   260k|        S: ser::Serialize,
   23|   260k|    {
   24|   260k|        let bytes = to_vec(obj)?;
   25|   260k|        self.put(
   26|   260k|            code,
   27|   260k|            &Block {
   28|   260k|                codec: DAG_CBOR,
   29|   260k|                data: &bytes,
   30|   260k|            },
   31|   260k|        )
   32|   260k|    }

_RNvXs1_NtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memoryNtB5_16MemoryBlockstoreNtNtCs95Py6UJrfQF_4core7default7Default7defaultCsd5SYClHmoOi_11equivalence:
    9|  1.13k|#[derive(Debug, Default, Clone)]
_RNvXs_NtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   29|   262k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   30|   262k|        self.blocks.borrow_mut().insert(*k, block.into());
   31|   262k|        Ok(())
   32|   262k|    }

_RINvYNtNtNtCs1bVuCDejzKf_10fvm_shared10blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCsjf6kfgi4wLr_5alloc3vec3VechEECsd5SYClHmoOi_11equivalence:
   40|   262k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   41|   262k|    where
   42|   262k|        Self: Sized,
   43|   262k|        D: AsRef<[u8]>,
   44|   262k|    {
   45|   262k|        let k = block.cid(mh_code);
   46|   262k|        self.put_keyed(&k, block.as_ref())?;
   47|   262k|        Ok(k)
   48|   262k|    }
_RINvXNtCs1bVuCDejzKf_10fvm_shared10blockstoreRNtNtB3_6memory16MemoryBlockstoreNtB3_10Blockstore3putRINtNtCsjf6kfgi4wLr_5alloc3vec3VechEECsd5SYClHmoOi_11equivalence:
  107|   262k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  108|   262k|    where
  109|   262k|        Self: Sized,
  110|   262k|        D: AsRef<[u8]>,
  111|   262k|    {
  112|   262k|        (*self).put(mh_code, block)
  113|   262k|    }

_RINvXNvNtNtCs1bVuCDejzKf_10fvm_shared8encoding5bytes1__NtB5_8BytesSerNtNtCs5A5HtGEAAwP_5serde3ser9Serialize9serializeQINtNtCs4vxJXQSajVf_18serde_ipld_dagcbor3ser10SerializerQINtNtCsjf6kfgi4wLr_5alloc3vec3VechEEECsd5SYClHmoOi_11equivalence:
    8|   262k|#[derive(Serialize)]

_RINvNtCs1bVuCDejzKf_10fvm_shared8encoding6to_vecINtNtCsjf6kfgi4wLr_5alloc5boxed3BoxINtNtCse63mXF9YMld_12fvm_ipld_amt4node4NodeyEEECsd5SYClHmoOi_11equivalence:
   35|   260k|pub fn to_vec<T>(value: &T) -> serde_ipld_dagcbor::Result<Vec<u8>>
   36|   260k|where
   37|   260k|    T: ser::Serialize + ?Sized,
   38|   260k|{
   39|   260k|    let mut vec = Vec::new();
   40|   260k|    value.serialize(&mut serde_ipld_dagcbor::Serializer::new(&mut vec))?;
   41|   260k|    Ok(vec)
   42|   260k|}
_RINvNtCs1bVuCDejzKf_10fvm_shared8encoding6to_vecINtNtCse63mXF9YMld_12fvm_ipld_amt4root4RootyEECsd5SYClHmoOi_11equivalence:
   35|  1.13k|pub fn to_vec<T>(value: &T) -> serde_ipld_dagcbor::Result<Vec<u8>>
   36|  1.13k|where
   37|  1.13k|    T: ser::Serialize + ?Sized,
   38|  1.13k|{
   39|  1.13k|    let mut vec = Vec::new();
   40|  1.13k|    value.serialize(&mut serde_ipld_dagcbor::Serializer::new(&mut vec))?;
   41|  1.13k|    Ok(vec)
   42|  1.13k|}

