_RNvXs14_NtCs6K1YSUf17yh_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvMNtCs6K1YSUf17yh_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCskivaWyxXAKd_11equivalence:
   58|  50.9k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  50.9k|        AHasher {
   60|  50.9k|            buffer: rand_state.k0,
   61|  50.9k|            pad: rand_state.k1,
   62|  50.9k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  50.9k|        }
   64|  50.9k|    }
_RNvMNtCs6K1YSUf17yh_5ahash13fallback_hashNtB2_7AHasher6update:
   97|  57.2k|    fn update(&mut self, new_data: u64) {
   98|  57.2k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|  57.2k|    }
_RNvXs_NtCs6K1YSUf17yh_5ahash13fallback_hashNtB4_7AHasherNtNtCsinBTLzipKNW_4core4hash6Hasher6finishCskivaWyxXAKd_11equivalence:
  212|  50.9k|    fn finish(&self) -> u64 {
  213|  50.9k|        let rot = (self.buffer & 63) as u32;
  214|  50.9k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  50.9k|    }
_RNvXs_NtCs6K1YSUf17yh_5ahash13fallback_hashNtB4_7AHasherNtNtCsinBTLzipKNW_4core4hash6Hasher9write_u64CskivaWyxXAKd_11equivalence:
  163|  50.9k|    fn write_u64(&mut self, i: u64) {
  164|  50.9k|        self.update(i as u64);
  165|  50.9k|    }
_RNvXs_NtCs6K1YSUf17yh_5ahash13fallback_hashNtB4_7AHasherNtNtCsinBTLzipKNW_4core4hash6Hasher9write_u64B6_:
  163|  6.27k|    fn write_u64(&mut self, i: u64) {
  164|  6.27k|        self.update(i as u64);
  165|  6.27k|    }
_RNvXs_NtCs6K1YSUf17yh_5ahash13fallback_hashNtB4_7AHasherNtNtCsinBTLzipKNW_4core4hash6Hasher6finishB6_:
  212|  5.01k|    fn finish(&self) -> u64 {
  213|  5.01k|        let rot = (self.buffer & 63) as u32;
  214|  5.01k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  5.01k|    }
_RNvMNtCs6K1YSUf17yh_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|  1.25k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  1.25k|        AHasher {
   60|  1.25k|            buffer: rand_state.k0,
   61|  1.25k|            pad: rand_state.k1,
   62|  1.25k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  1.25k|        }
   64|  1.25k|    }
_RNvXs4_NtCs6K1YSUf17yh_5ahash13fallback_hashNtB5_7AHasherNtNtCsinBTLzipKNW_4core5clone5Clone5cloneB7_:
   23|  5.01k|#[derive(Debug, Clone)]
_RNvXs_NtCs6K1YSUf17yh_5ahash13fallback_hashNtB4_7AHasherNtNtCsinBTLzipKNW_4core4hash6Hasher11write_usizeB6_:
  174|  1.25k|    fn write_usize(&mut self, i: usize) {
  175|  1.25k|        self.write_u64(i as u64);
  176|  1.25k|    }

_RNvMs2_NtCs6K1YSUf17yh_5ahash8hash_mapINtB5_8AHashMapyyE6insertCskivaWyxXAKd_11equivalence:
  164|  20.7k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  20.7k|        self.0.insert(k, v)
  166|  20.7k|    }
_RNvMs0_NtCs6K1YSUf17yh_5ahash8hash_mapINtB5_8AHashMapyyE3newCskivaWyxXAKd_11equivalence:
   35|  1.25k|    pub fn new() -> Self {
   36|  1.25k|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|  1.25k|    }
_RINvMs2_NtCs6K1YSUf17yh_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECskivaWyxXAKd_11equivalence:
  186|  4.90k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  4.90k|    where
  188|  4.90k|        K: Borrow<Q>,
  189|  4.90k|        Q: Hash + Eq,
  190|  4.90k|    {
  191|  4.90k|        self.0.remove(k)
  192|  4.90k|    }
_RNvXs3_NtCs6K1YSUf17yh_5ahash8hash_mapINtB5_8AHashMapyyENtNtNtCsinBTLzipKNW_4core3ops5deref5Deref5derefCskivaWyxXAKd_11equivalence:
  197|    627|    fn deref(&self) -> &Self::Target {
  198|    627|        &self.0
  199|    627|    }
_RINvMs2_NtCs6K1YSUf17yh_5ahash8hash_mapINtB6_8AHashMapyyE3getyECskivaWyxXAKd_11equivalence:
   79|  5.93k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  5.93k|    where
   81|  5.93k|        K: Borrow<Q>,
   82|  5.93k|        Q: Hash + Eq,
   83|  5.93k|    {
   84|  5.93k|        self.0.get(k)
   85|  5.93k|    }

_RNvNtCs6K1YSUf17yh_5ahash10operations15folded_multiply:
   11|   113k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|   113k|    let result = (s as u128).wrapping_mul(by as u128);
   13|   113k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|   113k|}

_RNvXs2_NtCs6K1YSUf17yh_5ahash12random_stateNtB5_11RandomStateNtNtCsinBTLzipKNW_4core7default7Default7defaultCskivaWyxXAKd_11equivalence:
  256|  1.25k|    fn default() -> Self {
  257|  1.25k|        Self::new()
  258|  1.25k|    }
_RNvMs1_NtCs6K1YSUf17yh_5ahash12random_stateNtB5_11RandomState3newCskivaWyxXAKd_11equivalence:
  196|  1.25k|    pub fn new() -> RandomState {
  197|  1.25k|        let src = Self::get_src();
  198|  1.25k|        let fixed = src.get_fixed_seeds();
  199|  1.25k|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  200|  1.25k|    }
_RNvMs1_NtCs6K1YSUf17yh_5ahash12random_stateNtB5_11RandomState7get_srcCskivaWyxXAKd_11equivalence:
  183|  1.25k|    fn get_src() -> &'static dyn RandomSource {
  184|  1.25k|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  185|  1.25k|    }
_RNvXs3_NtCs6K1YSUf17yh_5ahash12random_stateNtB5_11RandomStateNtNtCsinBTLzipKNW_4core4hash11BuildHasher12build_hasherCskivaWyxXAKd_11equivalence:
  293|  50.9k|    fn build_hasher(&self) -> AHasher {
  294|  50.9k|        AHasher::from_random_state(self)
  295|  50.9k|    }
_RNCNvMs1_NtCs6K1YSUf17yh_5ahash12random_stateNtB7_11RandomState7get_src0CskivaWyxXAKd_11equivalence:
  184|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvXs_NtCs6K1YSUf17yh_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
   96|  1.25k|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
   97|  1.25k|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
   98|  1.25k|
   99|  1.25k|        SEEDS.get_or_init(|| {
  100|       |            let mut result: [u8; 64] = [0; 64];
  101|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|       |            Box::new(result.convert())
  103|  1.25k|        })
  104|  1.25k|    }
_RNCNvMs1_NtCs6K1YSUf17yh_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  215|  5.01k|        let mix = |k: u64| {
  216|  5.01k|            let mut h = hasher.clone();
  217|  5.01k|            h.write_u64(k);
  218|  5.01k|            h.finish()
  219|  5.01k|        };
_RNvMNtCs6K1YSUf17yh_5ahash12random_stateNtB2_19DefaultRandomSource3new:
   80|      1|    fn new() -> DefaultRandomSource {
   81|      1|        DefaultRandomSource {
   82|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   83|      1|        }
   84|      1|    }
_RNvXs_NtCs6K1YSUf17yh_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  130|  1.25k|    fn gen_hasher_seed(&self) -> usize {
  131|  1.25k|        let stack = self as *const _ as usize;
  132|  1.25k|        self.counter.fetch_add(stack, Ordering::Relaxed)
  133|  1.25k|    }
_RNCNvXs_NtCs6K1YSUf17yh_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
   99|      1|        SEEDS.get_or_init(|| {
  100|      1|            let mut result: [u8; 64] = [0; 64];
  101|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|      1|            Box::new(result.convert())
  103|      1|        })
_RNvMs1_NtCs6K1YSUf17yh_5ahash12random_stateNtB5_11RandomState9from_keys:
  211|  1.25k|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  212|  1.25k|        let &[k0, k1, k2, k3] = a;
  213|  1.25k|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  214|  1.25k|        hasher.write_usize(c);
  215|  1.25k|        let mix = |k: u64| {
  216|       |            let mut h = hasher.clone();
  217|       |            h.write_u64(k);
  218|       |            h.finish()
  219|       |        };
  220|  1.25k|        RandomState {
  221|  1.25k|            k0: mix(b[0]),
  222|  1.25k|            k1: mix(b[1]),
  223|  1.25k|            k2: mix(b[2]),
  224|  1.25k|            k3: mix(b[3]),
  225|  1.25k|        }
  226|  1.25k|    }

_RNvXsa_CsiHKaOZvXM66_9arbitraryINtNtCs3wTdrvaeLle_5alloc3vec3VecNtCskivaWyxXAKd_11equivalence9OperationENtB5_9Arbitrary9size_hintB12_:
  687|    627|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    627|        (0, None)
  689|    627|    }
_RNvXsI_CsiHKaOZvXM66_9arbitraryyNtB5_9Arbitrary9size_hintCskivaWyxXAKd_11equivalence:
  320|    627|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    627|                    let n = mem::size_of::<$ty>();
  322|    627|                    (n, Some(n))
  323|    627|                }
_RNvXsH_CsiHKaOZvXM66_9arbitrarymNtB5_9Arbitrary9size_hintCskivaWyxXAKd_11equivalence:
  320|    627|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    627|                    let n = mem::size_of::<$ty>();
  322|    627|                    (n, Some(n))
  323|    627|                }
_RNvXsa_CsiHKaOZvXM66_9arbitraryINtNtCs3wTdrvaeLle_5alloc3vec3VecNtCskivaWyxXAKd_11equivalence9OperationENtB5_9Arbitrary19arbitrary_take_restB12_:
  683|    627|        u.arbitrary_take_rest_iter()?.collect()
  684|    627|    }
_RNvYhNtCsiHKaOZvXM66_9arbitrary9Arbitrary19arbitrary_take_restCskivaWyxXAKd_11equivalence:
  189|    625|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    625|        Self::arbitrary(&mut u)
  191|    625|    }
_RNvXsF_CsiHKaOZvXM66_9arbitraryhNtB5_9Arbitrary9size_hintCskivaWyxXAKd_11equivalence:
  320|    627|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    627|                    let n = mem::size_of::<$ty>();
  322|    627|                    (n, Some(n))
  323|    627|                }
_RNvXsG_CsiHKaOZvXM66_9arbitrarytNtB5_9Arbitrary9size_hintCskivaWyxXAKd_11equivalence:
  320|    627|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    627|                    let n = mem::size_of::<$ty>();
  322|    627|                    (n, Some(n))
  323|    627|                }
_RNvXsG_CsiHKaOZvXM66_9arbitrarytNtB5_9Arbitrary9arbitrary:
  309|  23.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  23.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  23.4k|                    u.fill_buffer(&mut buf)?;
  312|  23.4k|                    let mut x: $unsigned = 0;
  313|  46.9k|                    for i in 0..mem::size_of::<$ty>() {
  314|  46.9k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  46.9k|                    }
  316|  23.4k|                    Ok(x as $ty)
  317|  23.4k|                }
_RNvXsF_CsiHKaOZvXM66_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  23.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  23.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  23.4k|                    u.fill_buffer(&mut buf)?;
  312|  23.4k|                    let mut x: $unsigned = 0;
  313|  23.4k|                    for i in 0..mem::size_of::<$ty>() {
  314|  23.4k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  23.4k|                    }
  316|  23.4k|                    Ok(x as $ty)
  317|  23.4k|                }
_RNvXsI_CsiHKaOZvXM66_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  12.6k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  12.6k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  12.6k|                    u.fill_buffer(&mut buf)?;
  312|  12.6k|                    let mut x: $unsigned = 0;
  313|   101k|                    for i in 0..mem::size_of::<$ty>() {
  314|   101k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   101k|                    }
  316|  12.6k|                    Ok(x as $ty)
  317|  12.6k|                }
_RNvXsH_CsiHKaOZvXM66_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  23.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  23.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  23.4k|                    u.fill_buffer(&mut buf)?;
  312|  23.4k|                    let mut x: $unsigned = 0;
  313|  93.8k|                    for i in 0..mem::size_of::<$ty>() {
  314|  93.8k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  93.8k|                    }
  316|  23.4k|                    Ok(x as $ty)
  317|  23.4k|                }

_RNvNtCsiHKaOZvXM66_9arbitrary9size_hint3andCskivaWyxXAKd_11equivalence:
   26|  3.13k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.13k|    let lower = lhs.0 + rhs.0;
   28|  3.13k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.13k|    (lower, upper)
   30|  3.13k|}
_RNCNvNtCsiHKaOZvXM66_9arbitrary9size_hint3and0CskivaWyxXAKd_11equivalence:
   28|  3.13k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsiHKaOZvXM66_9arbitrary9size_hint2orCskivaWyxXAKd_11equivalence:
   44|  1.25k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.25k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.25k|    let upper = lhs
   47|  1.25k|        .1
   48|  1.25k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.25k|    (lower, upper)
   50|  1.25k|}
_RNCNCNvNtCsiHKaOZvXM66_9arbitrary9size_hint3and00CskivaWyxXAKd_11equivalence:
   28|  3.13k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsiHKaOZvXM66_9arbitrary9size_hint6or_allCskivaWyxXAKd_11equivalence:
   58|    627|    if let Some(head) = hints.first().copied() {
   59|    627|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    627|}
_RNvNtCsiHKaOZvXM66_9arbitrary9size_hint7and_allCskivaWyxXAKd_11equivalence:
   37|  2.50k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  2.50k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  2.50k|}
_RNCNCNvNtCsiHKaOZvXM66_9arbitrary9size_hint2or00CskivaWyxXAKd_11equivalence:
   48|  1.25k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCsiHKaOZvXM66_9arbitrary9size_hint2or0CskivaWyxXAKd_11equivalence:
   48|  1.25k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RINvNtCsiHKaOZvXM66_9arbitrary9size_hint15recursion_guardNCNvXNvCskivaWyxXAKd_11equivalence1__NtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   12|    627|pub fn recursion_guard(
   13|    627|    depth: usize,
   14|    627|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    627|) -> (usize, Option<usize>) {
   16|    627|    const MAX_DEPTH: usize = 20;
   17|    627|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    627|        f(depth + 1)
   21|       |    }
   22|    627|}
_RINvNtCsiHKaOZvXM66_9arbitrary9size_hint15recursion_guardNCNvXNvCskivaWyxXAKd_11equivalences_1__NtB10_6MethodNtB4_9Arbitrary9size_hint0EB10_:
   12|    627|pub fn recursion_guard(
   13|    627|    depth: usize,
   14|    627|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    627|) -> (usize, Option<usize>) {
   16|    627|    const MAX_DEPTH: usize = 20;
   17|    627|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    627|        f(depth + 1)
   21|       |    }
   22|    627|}

_RNvMNtCsiHKaOZvXM66_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCskivaWyxXAKd_11equivalence:
  132|  46.9k|    pub fn is_empty(&self) -> bool {
  133|  46.9k|        self.len() == 0
  134|  46.9k|    }
_RNvMNtCsiHKaOZvXM66_9arbitrary12unstructuredNtB2_12Unstructured3lenCskivaWyxXAKd_11equivalence:
  108|  47.5k|    pub fn len(&self) -> usize {
  109|  47.5k|        self.data.len()
  110|  47.5k|    }
_RINvMNtCsiHKaOZvXM66_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCskivaWyxXAKd_11equivalence9OperationEB1s_:
  620|    627|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|    627|        self,
  622|    627|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|    627|        let (lower, upper) = ElementType::size_hint(0);
  624|    627|
  625|    627|        let elem_size = upper.unwrap_or(lower * 2);
  626|    627|        let elem_size = std::cmp::max(1, elem_size);
  627|    627|        let size = self.len() / elem_size;
  628|    627|        Ok(ArbitraryTakeRestIter {
  629|    627|            size,
  630|    627|            u: Some(self),
  631|    627|            _marker: PhantomData,
  632|    627|        })
  633|    627|    }
_RNvXs0_NtCsiHKaOZvXM66_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCskivaWyxXAKd_11equivalence9OperationENtNtNtNtCsinBTLzipKNW_4core4iter6traits8iterator8Iterator4nextB1e_:
  746|  24.0k|        if let Some(mut u) = self.u.take() {
  747|  23.4k|            if self.size == 1 {
  748|    625|                Some(Arbitrary::arbitrary_take_rest(u))
  749|  22.8k|            } else if self.size == 0 {
  750|      2|                None
  751|       |            } else {
  752|  22.8k|                self.size -= 1;
  753|  22.8k|                let ret = Arbitrary::arbitrary(&mut u);
  754|  22.8k|                self.u = Some(u);
  755|  22.8k|                Some(ret)
  756|       |            }
  757|       |        } else {
  758|    625|            None
  759|       |        }
  760|  24.0k|    }
_RNvMNtCsiHKaOZvXM66_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    627|    pub fn new(data: &'a [u8]) -> Self {
   86|    627|        Unstructured { data }
   87|    627|    }
_RNvMNtCsiHKaOZvXM66_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  82.9k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  82.9k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  82.9k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  82.9k|        for byte in buffer[n..].iter_mut() {
  525|      0|            *byte = 0;
  526|      0|        }
  527|  82.9k|        self.data = &self.data[n..];
  528|  82.9k|        Ok(())
  529|  82.9k|    }

_RINvNvNtCshOGOUrxjlRP_12blake2b_simd8portable14compress_block9as_arrayshEB6_:
  143|  79.1k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  79.1k|                let mut p = a.as_ptr();
  145|  79.1k|                ( $( {
  146|  79.1k|                    let aref = &*(p as *const [T; $len]);
  147|  79.1k|                    p = p.offset($len as isize);
  148|  79.1k|                    aref
  149|  79.1k|                }, )* )
  150|  79.1k|            }
_RINvNvMCshOGOUrxjlRP_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|  68.8k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  68.8k|                let mut p = a.as_ptr();
  145|  68.8k|                ( $( {
  146|  68.8k|                    let aref = &*(p as *const [T; $len]);
  147|  68.8k|                    p = p.offset($len as isize);
  148|  68.8k|                    aref
  149|  68.8k|                }, )* )
  150|  68.8k|            }
_RINvNvCshOGOUrxjlRP_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|  68.8k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|  68.8k|                let mut p = a.as_mut_ptr();
  242|  68.8k|                ( $( {
  243|  68.8k|                    let aref = &mut *(p as *mut [T; $len]);
  244|  68.8k|                    p = p.add($len);
  245|  68.8k|                    aref
  246|  68.8k|                }, )* )
  247|  68.8k|            }
_RINvNvNtCshOGOUrxjlRP_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  8.04k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  8.04k|                &*(slice.as_ptr() as *const [_; $len])
   63|  8.04k|            }
_RINvNvMCshOGOUrxjlRP_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|  68.8k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  68.8k|                let mut p = a.as_ptr();
  145|  68.8k|                ( $( {
  146|  68.8k|                    let aref = &*(p as *const [T; $len]);
  147|  68.8k|                    p = p.offset($len as isize);
  148|  68.8k|                    aref
  149|  68.8k|                }, )* )
  150|  68.8k|            }
_RINvNvNtCshOGOUrxjlRP_12blake2b_simd8portable14compress1_loop8as_arrayhEB6_:
   61|  2.28k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  2.28k|                &*(slice.as_ptr() as *const [_; $len])
   63|  2.28k|            }

_RNvNtCshOGOUrxjlRP_12blake2b_simd4guts10count_high:
  208|  79.1k|pub(crate) fn count_high(count: Count) -> Word {
  209|  79.1k|    (count >> 8 * size_of::<Word>()) as Word
  210|  79.1k|}
_RNvMNtCshOGOUrxjlRP_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supported:
   70|  68.8k|    pub fn avx2_if_supported() -> Option<Self> {
   71|  68.8k|        // Check whether AVX2 support is assumed by the build.
   72|  68.8k|        #[cfg(target_feature = "avx2")]
   73|  68.8k|        {
   74|  68.8k|            return Some(Implementation(Platform::AVX2));
   75|  68.8k|        }
   76|  68.8k|        // Otherwise dynamically check for support if we can.
   77|  68.8k|        #[cfg(feature = "std")]
   78|  68.8k|        {
   79|  68.8k|            if is_x86_feature_detected!("avx2") {
   80|  68.8k|                return Some(Implementation(Platform::AVX2));
   81|  68.8k|            }
   82|  68.8k|        }
   83|  68.8k|        None
   84|  68.8k|    }
_RNvNtCshOGOUrxjlRP_12blake2b_simd4guts11final_block:
  232|  76.8k|pub fn final_block<'a>(
  233|  76.8k|    input: &'a [u8],
  234|  76.8k|    offset: usize,
  235|  76.8k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|  76.8k|    stride: Stride,
  237|  76.8k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|  76.8k|    let capped_offset = cmp::min(offset, input.len());
  239|  76.8k|    let offset_slice = &input[capped_offset..];
  240|  76.8k|    if offset_slice.len() >= BLOCKBYTES {
  241|  8.04k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  8.04k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  8.04k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|  68.8k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|  68.8k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|  76.8k|}
_RNvMs1_NtCshOGOUrxjlRP_12blake2b_simd4gutsNtB5_8LastNode3yes:
  181|  68.8k|    pub fn yes(&self) -> bool {
  182|  68.8k|        match self {
  183|      0|            LastNode::Yes => true,
  184|  68.8k|            LastNode::No => false,
  185|       |        }
  186|  68.8k|    }
_RNvMNtCshOGOUrxjlRP_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|  76.8k|    pub fn compress1_loop(
   97|  76.8k|        &self,
   98|  76.8k|        input: &[u8],
   99|  76.8k|        words: &mut [Word; 8],
  100|  76.8k|        count: Count,
  101|  76.8k|        last_node: LastNode,
  102|  76.8k|        finalize: Finalize,
  103|  76.8k|        stride: Stride,
  104|  76.8k|    ) {
  105|  76.8k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|      0|            Platform::AVX2 => unsafe {
  108|      0|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|      0|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|  76.8k|            _ => {
  113|  76.8k|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|  76.8k|            }
  115|       |        }
  116|  76.8k|    }
_RNvMs0_NtCshOGOUrxjlRP_12blake2b_simd4gutsNtB5_8Finalize3yes:
  165|   230k|    pub fn yes(&self) -> bool {
  166|   230k|        match self {
  167|   206k|            Finalize::Yes => true,
  168|  24.1k|            Finalize::No => false,
  169|       |        }
  170|   230k|    }
_RNvMNtCshOGOUrxjlRP_12blake2b_simd4gutsNtB2_14Implementation8portable:
   46|  68.8k|    pub fn portable() -> Self {
   47|  68.8k|        Implementation(Platform::Portable)
   48|  68.8k|    }
_RNvNtCshOGOUrxjlRP_12blake2b_simd4guts9flag_word:
  217|   158k|pub(crate) fn flag_word(flag: bool) -> Word {
  218|   158k|    if flag {
  219|  68.8k|        !0
  220|       |    } else {
  221|  89.4k|        0
  222|       |    }
  223|   158k|}
_RNvNtCshOGOUrxjlRP_12blake2b_simd4guts9count_low:
  204|  79.1k|pub(crate) fn count_low(count: Count) -> Word {
  205|  79.1k|    count as Word
  206|  79.1k|}
_RNvMNtCshOGOUrxjlRP_12blake2b_simd4gutsNtB2_14Implementation6detect:
   33|  68.8k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|      0|                return avx2_impl;
   35|  68.8k|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|  68.8k|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|  68.8k|            }
   42|  68.8k|        }
   43|  68.8k|        Self::portable()
   44|  68.8k|    }
_RNvMs2_NtCshOGOUrxjlRP_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytes:
  196|  87.1k|    pub fn padded_blockbytes(&self) -> usize {
  197|  87.1k|        match self {
  198|  87.1k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|  87.1k|    }
_RNvMNtCshOGOUrxjlRP_12blake2b_simd4gutsNtB2_14Implementation18sse41_if_supported:
   52|  68.8k|    pub fn sse41_if_supported() -> Option<Self> {
   53|  68.8k|        // Check whether SSE4.1 support is assumed by the build.
   54|  68.8k|        #[cfg(target_feature = "sse4.1")]
   55|  68.8k|        {
   56|  68.8k|            return Some(Implementation(Platform::SSE41));
   57|  68.8k|        }
   58|  68.8k|        // Otherwise dynamically check for support if we can.
   59|  68.8k|        #[cfg(feature = "std")]
   60|  68.8k|        {
   61|  68.8k|            if is_x86_feature_detected!("sse4.1") {
   62|  68.8k|                return Some(Implementation(Platform::SSE41));
   63|  68.8k|            }
   64|  68.8k|        }
   65|  68.8k|        None
   66|  68.8k|    }
_RNvNtCshOGOUrxjlRP_12blake2b_simd4guts19input_debug_asserts:
  252|  76.8k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|  76.8k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|  76.8k|    // even multiple of the block size.
  255|  76.8k|    if !finalize.yes() {
  256|  8.04k|        debug_assert!(!input.is_empty());
  257|  8.04k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|  68.8k|    }
  259|  76.8k|}

_RNvMCshOGOUrxjlRP_12blake2b_simdNtB2_6Params3newCsK3ER69FsVl_9multihash:
  165|  68.8k|    pub fn new() -> Self {
  166|  68.8k|        Self {
  167|  68.8k|            hash_length: OUTBYTES as u8,
  168|  68.8k|            key_length: 0,
  169|  68.8k|            key_block: [0; BLOCKBYTES],
  170|  68.8k|            salt: [0; SALTBYTES],
  171|  68.8k|            personal: [0; PERSONALBYTES],
  172|  68.8k|            // NOTE: fanout and max_depth don't default to zero!
  173|  68.8k|            fanout: 1,
  174|  68.8k|            max_depth: 1,
  175|  68.8k|            max_leaf_length: 0,
  176|  68.8k|            node_offset: 0,
  177|  68.8k|            node_depth: 0,
  178|  68.8k|            inner_hash_length: 0,
  179|  68.8k|            last_node: guts::LastNode::No,
  180|  68.8k|            implementation: guts::Implementation::detect(),
  181|  68.8k|        }
  182|  68.8k|    }
_RNvMCshOGOUrxjlRP_12blake2b_simdNtB2_6Params11hash_lengthCsK3ER69FsVl_9multihash:
  238|  68.8k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|  68.8k|        assert!(
  240|  68.8k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|  68.8k|        self.hash_length = length as u8;
  245|  68.8k|        self
  246|  68.8k|    }
_RNvMs1_CshOGOUrxjlRP_12blake2b_simdNtB5_5State11with_params:
  406|  68.8k|    fn with_params(params: &Params) -> Self {
  407|  68.8k|        let mut state = Self {
  408|  68.8k|            words: params.to_words(),
  409|  68.8k|            count: 0,
  410|  68.8k|            buf: [0; BLOCKBYTES],
  411|  68.8k|            buflen: 0,
  412|  68.8k|            last_node: params.last_node,
  413|  68.8k|            hash_length: params.hash_length,
  414|  68.8k|            implementation: params.implementation,
  415|  68.8k|            is_keyed: params.key_length > 0,
  416|  68.8k|        };
  417|  68.8k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|  68.8k|        }
  421|  68.8k|        state
  422|  68.8k|    }
_RNvMCshOGOUrxjlRP_12blake2b_simdNtB2_6Params8to_state:
  230|  68.8k|    pub fn to_state(&self) -> State {
  231|  68.8k|        State::with_params(self)
  232|  68.8k|    }
_RNvMs1_CshOGOUrxjlRP_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|  68.8k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|  68.8k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|  68.8k|        }
  450|  68.8k|    }
_RNvMs1_CshOGOUrxjlRP_12blake2b_simdNtB5_5State8fill_buf:
  424|  68.8k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|  68.8k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|  68.8k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|  68.8k|        self.buflen += take as u8;
  428|  68.8k|        *input = &input[take..];
  429|  68.8k|    }
_RNvCshOGOUrxjlRP_12blake2b_simd20state_words_to_bytes:
  529|  68.8k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|  68.8k|    let mut bytes = [0; OUTBYTES];
  531|  68.8k|    {
  532|  68.8k|        const W: usize = size_of::<Word>();
  533|  68.8k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|  68.8k|        *refs.0 = state_words[0].to_le_bytes();
  535|  68.8k|        *refs.1 = state_words[1].to_le_bytes();
  536|  68.8k|        *refs.2 = state_words[2].to_le_bytes();
  537|  68.8k|        *refs.3 = state_words[3].to_le_bytes();
  538|  68.8k|        *refs.4 = state_words[4].to_le_bytes();
  539|  68.8k|        *refs.5 = state_words[5].to_le_bytes();
  540|  68.8k|        *refs.6 = state_words[6].to_le_bytes();
  541|  68.8k|        *refs.7 = state_words[7].to_le_bytes();
  542|  68.8k|    }
  543|  68.8k|    bytes
  544|  68.8k|}
_RNvMs4_CshOGOUrxjlRP_12blake2b_simdNtB5_4Hash8as_bytes:
  589|  68.8k|    pub fn as_bytes(&self) -> &[u8] {
  590|  68.8k|        &self.bytes[..self.len as usize]
  591|  68.8k|    }
_RNvMs1_CshOGOUrxjlRP_12blake2b_simdNtB5_5State6update:
  453|  68.8k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|  68.8k|        // If we have a partial buffer, try to complete it.
  455|  68.8k|        self.compress_buffer_if_possible(&mut input);
  456|  68.8k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|  68.8k|        // above), compress blocks directly without copying.
  458|  68.8k|        let mut end = input.len().saturating_sub(1);
  459|  68.8k|        end -= end % BLOCKBYTES;
  460|  68.8k|        if end > 0 {
  461|  8.04k|            self.implementation.compress1_loop(
  462|  8.04k|                &input[..end],
  463|  8.04k|                &mut self.words,
  464|  8.04k|                self.count,
  465|  8.04k|                self.last_node,
  466|  8.04k|                guts::Finalize::No,
  467|  8.04k|                guts::Stride::Serial,
  468|  8.04k|            );
  469|  8.04k|            self.count = self.count.wrapping_add(end as Count);
  470|  8.04k|            input = &input[end..];
  471|  60.7k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|  68.8k|        self.fill_buf(&mut input);
  477|  68.8k|        self
  478|  68.8k|    }
_RNvMs1_CshOGOUrxjlRP_12blake2b_simdNtB5_5State8finalize:
  482|  68.8k|    pub fn finalize(&self) -> Hash {
  483|  68.8k|        let mut words_copy = self.words;
  484|  68.8k|        self.implementation.compress1_loop(
  485|  68.8k|            &self.buf[..self.buflen as usize],
  486|  68.8k|            &mut words_copy,
  487|  68.8k|            self.count,
  488|  68.8k|            self.last_node,
  489|  68.8k|            guts::Finalize::Yes,
  490|  68.8k|            guts::Stride::Serial,
  491|  68.8k|        );
  492|  68.8k|        Hash {
  493|  68.8k|            bytes: state_words_to_bytes(&words_copy),
  494|  68.8k|            len: self.hash_length,
  495|  68.8k|        }
  496|  68.8k|    }
_RNvMCshOGOUrxjlRP_12blake2b_simdNtB2_6Params8to_words:
  185|  68.8k|    fn to_words(&self) -> [Word; 8] {
  186|  68.8k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|  68.8k|        let (personal_left, personal_right) =
  188|  68.8k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|  68.8k|        [
  190|  68.8k|            IV[0]
  191|  68.8k|                ^ self.hash_length as u64
  192|  68.8k|                ^ (self.key_length as u64) << 8
  193|  68.8k|                ^ (self.fanout as u64) << 16
  194|  68.8k|                ^ (self.max_depth as u64) << 24
  195|  68.8k|                ^ (self.max_leaf_length as u64) << 32,
  196|  68.8k|            IV[1] ^ self.node_offset,
  197|  68.8k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|  68.8k|            IV[3],
  199|  68.8k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|  68.8k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|  68.8k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|  68.8k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|  68.8k|        ]
  204|  68.8k|    }

_RNvNtCshOGOUrxjlRP_12blake2b_simd8portable14compress1_loop:
  119|  76.8k|pub fn compress1_loop(
  120|  76.8k|    input: &[u8],
  121|  76.8k|    words: &mut [Word; 8],
  122|  76.8k|    mut count: Count,
  123|  76.8k|    last_node: LastNode,
  124|  76.8k|    finalize: Finalize,
  125|  76.8k|    stride: Stride,
  126|  76.8k|) {
  127|  76.8k|    input_debug_asserts(input, finalize);
  128|  76.8k|
  129|  76.8k|    let mut local_words = *words;
  130|  76.8k|
  131|  76.8k|    let mut fin_offset = input.len().saturating_sub(1);
  132|  76.8k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  133|  76.8k|    let mut buf = [0; BLOCKBYTES];
  134|  76.8k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  135|  76.8k|    let fin_last_block = flag_word(finalize.yes());
  136|  76.8k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  137|       |
  138|  76.8k|    let mut offset = 0;
  139|       |    loop {
  140|       |        let block;
  141|       |        let count_delta;
  142|       |        let last_block;
  143|       |        let last_node;
  144|  79.1k|        if offset == fin_offset {
  145|  76.8k|            block = fin_block;
  146|  76.8k|            count_delta = fin_len;
  147|  76.8k|            last_block = fin_last_block;
  148|  76.8k|            last_node = fin_last_node;
  149|  76.8k|        } else {
  150|  2.28k|            block = array_ref!(input, offset, BLOCKBYTES);
  151|  2.28k|            count_delta = BLOCKBYTES;
  152|  2.28k|            last_block = flag_word(false);
  153|  2.28k|            last_node = flag_word(false);
  154|  2.28k|        };
  155|       |
  156|  79.1k|        count = count.wrapping_add(count_delta as Count);
  157|  79.1k|        compress_block(block, &mut local_words, count, last_block, last_node);
  158|  79.1k|
  159|  79.1k|        // Check for termination before bumping the offset, to avoid overflow.
  160|  79.1k|        if offset == fin_offset {
  161|  76.8k|            break;
  162|  2.28k|        }
  163|  2.28k|
  164|  2.28k|        offset += stride.padded_blockbytes();
  165|       |    }
  166|       |
  167|  76.8k|    *words = local_words;
  168|  76.8k|}
_RNvNtCshOGOUrxjlRP_12blake2b_simd8portable5round:
   29|   949k|fn round(r: usize, m: &[Word; 16], v: &mut [Word; 16]) {
   30|   949k|    // Select the message schedule based on the round.
   31|   949k|    let s = SIGMA[r];
   32|   949k|
   33|   949k|    // Mix the columns.
   34|   949k|    g(v, 0, 4, 8, 12, m[s[0] as usize], m[s[1] as usize]);
   35|   949k|    g(v, 1, 5, 9, 13, m[s[2] as usize], m[s[3] as usize]);
   36|   949k|    g(v, 2, 6, 10, 14, m[s[4] as usize], m[s[5] as usize]);
   37|   949k|    g(v, 3, 7, 11, 15, m[s[6] as usize], m[s[7] as usize]);
   38|   949k|
   39|   949k|    // Mix the rows.
   40|   949k|    g(v, 0, 5, 10, 15, m[s[8] as usize], m[s[9] as usize]);
   41|   949k|    g(v, 1, 6, 11, 12, m[s[10] as usize], m[s[11] as usize]);
   42|   949k|    g(v, 2, 7, 8, 13, m[s[12] as usize], m[s[13] as usize]);
   43|   949k|    g(v, 3, 4, 9, 14, m[s[14] as usize], m[s[15] as usize]);
   44|   949k|}
_RNvNtCshOGOUrxjlRP_12blake2b_simd8portable14compress_block:
   47|  79.1k|fn compress_block(
   48|  79.1k|    block: &[u8; BLOCKBYTES],
   49|  79.1k|    words: &mut [Word; 8],
   50|  79.1k|    count: Count,
   51|  79.1k|    last_block: Word,
   52|  79.1k|    last_node: Word,
   53|  79.1k|) {
   54|  79.1k|    // Initialize the compression state.
   55|  79.1k|    let mut v = [
   56|  79.1k|        words[0],
   57|  79.1k|        words[1],
   58|  79.1k|        words[2],
   59|  79.1k|        words[3],
   60|  79.1k|        words[4],
   61|  79.1k|        words[5],
   62|  79.1k|        words[6],
   63|  79.1k|        words[7],
   64|  79.1k|        IV[0],
   65|  79.1k|        IV[1],
   66|  79.1k|        IV[2],
   67|  79.1k|        IV[3],
   68|  79.1k|        IV[4] ^ count_low(count),
   69|  79.1k|        IV[5] ^ count_high(count),
   70|  79.1k|        IV[6] ^ last_block,
   71|  79.1k|        IV[7] ^ last_node,
   72|  79.1k|    ];
   73|  79.1k|
   74|  79.1k|    // Parse the message bytes as ints in little endian order.
   75|  79.1k|    const W: usize = size_of::<Word>();
   76|  79.1k|    let msg_refs = array_refs!(block, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W);
   77|  79.1k|    let m = [
   78|  79.1k|        Word::from_le_bytes(*msg_refs.0),
   79|  79.1k|        Word::from_le_bytes(*msg_refs.1),
   80|  79.1k|        Word::from_le_bytes(*msg_refs.2),
   81|  79.1k|        Word::from_le_bytes(*msg_refs.3),
   82|  79.1k|        Word::from_le_bytes(*msg_refs.4),
   83|  79.1k|        Word::from_le_bytes(*msg_refs.5),
   84|  79.1k|        Word::from_le_bytes(*msg_refs.6),
   85|  79.1k|        Word::from_le_bytes(*msg_refs.7),
   86|  79.1k|        Word::from_le_bytes(*msg_refs.8),
   87|  79.1k|        Word::from_le_bytes(*msg_refs.9),
   88|  79.1k|        Word::from_le_bytes(*msg_refs.10),
   89|  79.1k|        Word::from_le_bytes(*msg_refs.11),
   90|  79.1k|        Word::from_le_bytes(*msg_refs.12),
   91|  79.1k|        Word::from_le_bytes(*msg_refs.13),
   92|  79.1k|        Word::from_le_bytes(*msg_refs.14),
   93|  79.1k|        Word::from_le_bytes(*msg_refs.15),
   94|  79.1k|    ];
   95|  79.1k|
   96|  79.1k|    round(0, &m, &mut v);
   97|  79.1k|    round(1, &m, &mut v);
   98|  79.1k|    round(2, &m, &mut v);
   99|  79.1k|    round(3, &m, &mut v);
  100|  79.1k|    round(4, &m, &mut v);
  101|  79.1k|    round(5, &m, &mut v);
  102|  79.1k|    round(6, &m, &mut v);
  103|  79.1k|    round(7, &m, &mut v);
  104|  79.1k|    round(8, &m, &mut v);
  105|  79.1k|    round(9, &m, &mut v);
  106|  79.1k|    round(10, &m, &mut v);
  107|  79.1k|    round(11, &m, &mut v);
  108|  79.1k|
  109|  79.1k|    words[0] ^= v[0] ^ v[8];
  110|  79.1k|    words[1] ^= v[1] ^ v[9];
  111|  79.1k|    words[2] ^= v[2] ^ v[10];
  112|  79.1k|    words[3] ^= v[3] ^ v[11];
  113|  79.1k|    words[4] ^= v[4] ^ v[12];
  114|  79.1k|    words[5] ^= v[5] ^ v[13];
  115|  79.1k|    words[6] ^= v[6] ^ v[14];
  116|  79.1k|    words[7] ^= v[7] ^ v[15];
  117|  79.1k|}
_RNvNtCshOGOUrxjlRP_12blake2b_simd8portable1g:
   15|  7.59M|fn g(v: &mut [Word; 16], a: usize, b: usize, c: usize, d: usize, x: Word, y: Word) {
   16|  7.59M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(x);
   17|  7.59M|    v[d] = (v[d] ^ v[a]).rotate_right(32);
   18|  7.59M|    v[c] = v[c].wrapping_add(v[d]);
   19|  7.59M|    v[b] = (v[b] ^ v[c]).rotate_right(24);
   20|  7.59M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(y);
   21|  7.59M|    v[d] = (v[d] ^ v[a]).rotate_right(16);
   22|  7.59M|    v[c] = v[c].wrapping_add(v[d]);
   23|  7.59M|    v[b] = (v[b] ^ v[c]).rotate_right(63);
   24|  7.59M|}

_RNvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decNtB5_7TypeNum3newCskivaWyxXAKd_11equivalence:
  179|   321k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|   321k|        TypeNum { major_limit, byte }
  181|   321k|    }
_RINvYyNtNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
   73|  15.6k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  15.6k|        let byte = pull_one(reader)?;
   75|  15.6k|        Self::decode_with(byte, reader)
   76|  15.6k|    }
_RINvXsr_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decmNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  256|  13.3k|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|  13.3k|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|  13.3k|                }
_RINvXsc_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  615|   121k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|   121k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|   121k|    }
_RINvXss_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  256|  15.6k|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|  15.6k|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|  15.6k|                }
_RINvYINtNtNtCsaqkjQXFWKrG_7cbor4ii4core5types5BytesINtNtCs3wTdrvaeLle_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
   73|   104k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|   104k|        let byte = pull_one(reader)?;
   75|   104k|        Self::decode_with(byte, reader)
   76|   104k|    }
_RINvXsg_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  707|  66.2k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|  66.2k|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|  66.2k|    }
_RINvNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  431|   104k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|   104k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|   104k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|   104k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|   104k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|   104k|            if buf.len() >= len {
  440|   104k|                reader.advance(len);
  441|   104k|                return Ok(Some(&buf[..len]));
  442|      0|            }
  443|      0|        }
  444|       |
  445|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|      0|        while len != 0 {
  448|      0|            let readbuf = reader.fill(len)?;
  449|      0|            let readbuf = readbuf.as_ref();
  450|      0|
  451|      0|            if readbuf.is_empty() {
  452|      0|                return Err(Error::Eof);
  453|      0|            }
  454|      0|
  455|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      0|
  457|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      0|            reader.advance(readlen);
  459|      0|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|      0|            let byte = pull_one(reader)?;
  467|       |
  468|      0|            if byte == marker::BREAK {
  469|      0|                break
  470|      0|            }
  471|      0|
  472|      0|            if !reader.step_in() {
  473|      0|                return Err(Error::DepthLimit);
  474|      0|            }
  475|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|      0|            let reader = &mut *reader;
  477|       |
  478|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|      0|                buf.extend_from_slice(longbuf);
  480|      0|            }
  481|       |        }
  482|       |
  483|      0|        Ok(None)
  484|       |    }
  485|   104k|}
_RINvNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  136|  8.24k|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  16.4k|    while !buf.is_empty() {
  138|  8.24k|        let readbuf = reader.fill(buf.len())?;
  139|  8.24k|        let readbuf = readbuf.as_ref();
  140|  8.24k|
  141|  8.24k|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|  8.24k|        }
  144|  8.24k|
  145|  8.24k|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|  8.24k|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|  8.24k|        reader.advance(len);
  148|  8.24k|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|  8.24k|    Ok(())
  152|  8.24k|}
_RINvNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  599|   226k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|   226k|    -> Result<Option<usize>, Error<R::Error>>
  601|   226k|{
  602|   226k|    if byte != (marker::START | (major << 5)) {
  603|   226k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|   226k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|   226k|        Ok(Some(len))
  606|       |    } else {
  607|      0|        Ok(None)
  608|       |    }
  609|   226k|}
_RNvNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec8if_majorCskivaWyxXAKd_11equivalence:
  894|  66.2k|pub fn if_major(byte: u8) -> u8 {
  895|  66.2k|    byte >> 5
  896|  66.2k|}
_RINvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  227|   307k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|   307k|        match self.byte & self.major_limit {
  229|   307k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|   134k|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|    629|                let mut buf = [0; 2];
  233|    629|                pull_exact(reader, &mut buf)?;
  234|    629|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|  1.00k|                let mut buf = [0; 4];
  238|  1.00k|                pull_exact(reader, &mut buf)?;
  239|  1.00k|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|  6.60k|                let mut buf = [0; 8];
  243|  6.60k|                pull_exact(reader, &mut buf)?;
  244|  6.60k|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|   307k|    }
_RINvYNtNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
   73|  66.2k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  66.2k|        let byte = pull_one(reader)?;
   75|  66.2k|        Self::decode_with(byte, reader)
   76|  66.2k|    }
_RINvNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  125|   455k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|   455k|    let b = reader.fill(1)?
  127|   455k|        .as_ref()
  128|   455k|        .get(0)
  129|   455k|        .copied()
  130|   455k|        .ok_or(Error::Eof)?;
  131|   455k|    reader.advance(1);
  132|   455k|    Ok(b)
  133|   455k|}
_RINvYNtNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
   73|   121k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|   121k|        let byte = pull_one(reader)?;
   75|   121k|        Self::decode_with(byte, reader)
   76|   121k|    }
_RNvMNtNtCsaqkjQXFWKrG_7cbor4ii4core3decNtB2_9Reference6as_refCskivaWyxXAKd_11equivalence:
   81|   463k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|   463k|        match self {
   83|   463k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|   463k|    }
_RINvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decNtB6_7TypeNum10decode_u32NtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  208|  13.3k|    fn decode_u32<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u32, Error<R::Error>> {
  209|  13.3k|        match self.byte & self.major_limit {
  210|  13.3k|            x @ 0 ..= 0x17 => Ok(x.into()),
  211|      0|            0x18 => pull_one(reader).map(Into::into),
  212|       |            0x19 => {
  213|      0|                let mut buf = [0; 2];
  214|      0|                pull_exact(reader, &mut buf)?;
  215|      0|                Ok(u16::from_be_bytes(buf).into())
  216|       |            },
  217|       |            0x1a => {
  218|      0|                let mut buf = [0; 4];
  219|      0|                pull_exact(reader, &mut buf)?;
  220|      0|                Ok(u32::from_be_bytes(buf))
  221|       |            }
  222|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  223|       |        }
  224|  13.3k|    }
_RINvXs5_NtNtCsaqkjQXFWKrG_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs3wTdrvaeLle_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
  510|   104k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|   104k|        use crate::alloc::borrow::Cow;
  512|   104k|
  513|   104k|        let mut buf = Vec::new();
  514|   104k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|   104k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|      0|            Cow::Owned(buf)
  518|       |        }))
  519|   104k|    }
_RINvYmNtNtNtCsaqkjQXFWKrG_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECskivaWyxXAKd_11equivalence:
   73|  13.3k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  13.3k|        let byte = pull_one(reader)?;
   75|  13.3k|        Self::decode_with(byte, reader)
   76|  13.3k|    }

_RINvXsi_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
  317|  88.9k|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|  88.9k|        self.1.encode(writer)
  319|  88.9k|    }
_RINvXs7_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
  209|   157k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|   157k|        writer.push(self.0)?;
  211|   157k|        Ok(())
  212|   157k|    }
_RINvXsu_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
  159|  26.0k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|  26.0k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|  26.0k|                }
_RNvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB5_7TypeNummE3newCskivaWyxXAKd_11equivalence:
   52|   473k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   473k|        TypeNum { type_, value }
   54|   473k|    }
_RINvXs3_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
   84|   473k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|   473k|        match u16::try_from(self.value) {
   86|   472k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|  1.53k|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|  1.53k|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|   473k|        Ok(())
   93|   473k|    }
_RINvXst_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encmNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
  159|  8.63k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|  8.63k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|  8.63k|                }
_RNvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB5_7TypeNumtE3newCskivaWyxXAKd_11equivalence:
   52|   472k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   472k|        TypeNum { type_, value }
   54|   472k|    }
_RINvXs4_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
   98|   483k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|   483k|        match u32::try_from(self.value) {
  100|   465k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|  18.3k|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|  18.3k|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|   483k|        Ok(())
  107|   483k|    }
_RINvXsd_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
  270|   210k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|   210k|        Ok(())
  272|   210k|    }
_RINvXs1_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
   59|   471k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|   471k|        match self.value {
   61|   471k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|   179k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|   471k|        Ok(())
   65|   471k|    }
_RINvXs2_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskivaWyxXAKd_11equivalence:
   70|   472k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|   472k|        match u8::try_from(self.value) {
   72|   471k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    710|                let [x0, x1] = self.value.to_be_bytes();
   75|    710|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|   472k|        Ok(())
   79|   472k|    }
_RNvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB5_7TypeNumhE3newCskivaWyxXAKd_11equivalence:
   52|   471k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   471k|        TypeNum { type_, value }
   54|   471k|    }
_RNvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core3encINtB5_7TypeNumyE3newCskivaWyxXAKd_11equivalence:
   52|   483k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   483k|        TypeNum { type_, value }
   54|   483k|    }

_RNvXs1_NtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCskivaWyxXAKd_11equivalence:
   62|   672k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|   672k|        let len = core::cmp::min(self.buf.len(), want);
   64|   672k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|   672k|    }
_RNvXs_NtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCskivaWyxXAKd_11equivalence:
   40|   649k|        self.0.try_reserve(input.len())?;
   41|   649k|        self.0.extend_from_slice(input);
   42|   649k|        Ok(())
   43|   649k|    }
_RNvXs1_NtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCskivaWyxXAKd_11equivalence:
   68|   568k|    fn advance(&mut self, n: usize) {
   69|   568k|        let len = core::cmp::min(self.buf.len(), n);
   70|   568k|        self.buf = &self.buf[len..];
   71|   568k|    }
_RNvXs1_NtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCskivaWyxXAKd_11equivalence:
   84|   121k|    fn step_out(&mut self) {
   85|   121k|        self.limit += 1;
   86|   121k|    }
_RNvXs1_NtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCskivaWyxXAKd_11equivalence:
   75|   121k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|   121k|            self.limit = limit;
   77|   121k|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|   121k|    }
_RNvMNtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|  68.8k|    pub fn into_inner(self) -> Vec<u8> {
   25|  68.8k|        self.0
   26|  68.8k|    }
_RNvMNtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|  68.8k|    pub fn new(buf: Vec<u8>) -> Self {
   15|  68.8k|       BufWriter(buf)
   16|  68.8k|    }
_RNvMs0_NtNtCsaqkjQXFWKrG_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|  38.2k|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|  38.2k|        SliceReader { buf, limit: 256 }
   55|  38.2k|    }

_RNvXse_NtCs6aF0MnpqdVL_3cid3cidINtB5_3CidKj40_ENtNtCsinBTLzipKNW_4core3cmp9PartialEq2eqCskivaWyxXAKd_11equivalence:
   64|    627|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RNvMNtCs6aF0MnpqdVL_3cid3cidINtB2_3CidKj40_E6new_v1CskivaWyxXAKd_11equivalence:
   90|   135k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|   135k|        Self {
   92|   135k|            version: Version::V1,
   93|   135k|            codec,
   94|   135k|            hash,
   95|   135k|        }
   96|   135k|    }
_RNvMNtCs6aF0MnpqdVL_3cid3cidINtB2_3CidKj40_E5codecCskivaWyxXAKd_11equivalence:
  130|  38.2k|    pub const fn codec(&self) -> u64 {
  131|  38.2k|        self.codec
  132|  38.2k|    }
_RINvMNtCs6aF0MnpqdVL_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs3wTdrvaeLle_5alloc3vec3VechEECskivaWyxXAKd_11equivalence:
  179|  88.9k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|  88.9k|        let written = match self.version {
  181|      0|            Version::V0 => self.hash.write(w)?,
  182|  88.9k|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|  88.9k|        Ok(written)
  185|  88.9k|    }
_RINvMNtCs6aF0MnpqdVL_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs3wTdrvaeLle_5alloc3vec3VechEECskivaWyxXAKd_11equivalence:
  162|  88.9k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|  88.9k|        let mut version_buf = varint_encode::u64_buffer();
  164|  88.9k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|  88.9k|
  166|  88.9k|        let mut codec_buf = varint_encode::u64_buffer();
  167|  88.9k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|  88.9k|
  169|  88.9k|        let mut written = version.len() + codec.len();
  170|  88.9k|
  171|  88.9k|        w.write_all(version)?;
  172|  88.9k|        w.write_all(codec)?;
  173|  88.9k|        written += self.hash.write(&mut w)?;
  174|       |
  175|  88.9k|        Ok(written)
  176|  88.9k|    }
_RNvMNtCs6aF0MnpqdVL_3cid3cidINtB2_3CidKj40_E3newCskivaWyxXAKd_11equivalence:
   99|  66.2k|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|  66.2k|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|  66.2k|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|  66.2k|    }
_RNvMNtCs6aF0MnpqdVL_3cid3cidINtB2_3CidKj40_E8to_bytesCskivaWyxXAKd_11equivalence:
  205|  88.9k|    pub fn to_bytes(&self) -> Vec<u8> {
  206|  88.9k|        let mut bytes = Vec::new();
  207|  88.9k|        let written = self.write_bytes(&mut bytes).unwrap();
  208|  88.9k|        debug_assert_eq!(written, bytes.len());
  209|  88.9k|        bytes
  210|  88.9k|    }
_RNvXs6_NtCs6aF0MnpqdVL_3cid3cidINtB5_3CidKj40_EINtNtCsinBTLzipKNW_4core7convert7TryFromRShE8try_fromCskivaWyxXAKd_11equivalence:
  353|  66.2k|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|  66.2k|        Self::read_bytes(&mut bytes)
  355|  66.2k|    }
_RINvMNtCs6aF0MnpqdVL_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECskivaWyxXAKd_11equivalence:
  140|  66.2k|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|  66.2k|        let version = varint_read_u64(&mut r)?;
  142|  66.2k|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|  66.2k|        if [version, codec] == [0x12, 0x20] {
  146|      0|            let mut digest = [0u8; 32];
  147|      0|            r.read_exact(&mut digest)?;
  148|      0|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|      0|            return Self::new_v0(mh);
  150|  66.2k|        }
  151|       |
  152|  66.2k|        let version = Version::try_from(version)?;
  153|  66.2k|        match version {
  154|      0|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|  66.2k|                let mh = Multihash::read(r)?;
  157|  66.2k|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|  66.2k|    }
_RINvXsk_NtCs6aF0MnpqdVL_3cid3cidINtB6_3CidKj40_ENtNtCsinBTLzipKNW_4core4hash4Hash4hashNtNtNtNtCs1P3rTpcQIlL_3std11collections4hash3map13DefaultHasherECs8aROixYY1Zm_19fvm_ipld_blockstore:
   64|   193k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RNvXse_NtCs6aF0MnpqdVL_3cid3cidINtB5_3CidKj40_ENtNtCsinBTLzipKNW_4core3cmp9PartialEq2eqCs8aROixYY1Zm_19fvm_ipld_blockstore:
   64|  48.5k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXNvXs0_NtCs6aF0MnpqdVL_3cid5serdeINtNtBb_3cid3CidKpENtNtCs38SYVtDJ7gI_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
   97|  66.2k|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|  66.2k|            where
   99|  66.2k|                D: de::Deserializer<'de>,
  100|  66.2k|            {
  101|  66.2k|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|  66.2k|            }
_RINvXNtCs6aF0MnpqdVL_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs38SYVtDJ7gI_5serde3ser9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
   29|  88.9k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|  88.9k|    where
   31|  88.9k|        S: ser::Serializer,
   32|  88.9k|    {
   33|  88.9k|        let value = ByteBuf::from(self.to_bytes());
   34|  88.9k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|  88.9k|    }
_RINvXs0_NtCs6aF0MnpqdVL_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs38SYVtDJ7gI_5serde2de11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
   79|  66.2k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|  66.2k|    where
   81|  66.2k|        D: de::Deserializer<'de>,
   82|  66.2k|    {
   83|  66.2k|        /// Main visitor to deserialize a CID.
   84|  66.2k|        ///
   85|  66.2k|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|  66.2k|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|  66.2k|        /// to bytes.
   88|  66.2k|        struct MainEntryVisitor<const SIZE: usize>;
   89|  66.2k|
   90|  66.2k|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|  66.2k|            type Value = CidGeneric<SIZE>;
   92|  66.2k|
   93|  66.2k|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|  66.2k|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|  66.2k|            }
   96|  66.2k|
   97|  66.2k|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|  66.2k|            where
   99|  66.2k|                D: de::Deserializer<'de>,
  100|  66.2k|            {
  101|  66.2k|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|  66.2k|            }
  103|  66.2k|        }
  104|  66.2k|
  105|  66.2k|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|  66.2k|    }
_RINvXs_NtCs6aF0MnpqdVL_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs38SYVtDJ7gI_5serde2de7Visitor11visit_bytesINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsinBTLzipKNW_4core7convert10InfallibleEECskivaWyxXAKd_11equivalence:
   48|  66.2k|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|  66.2k|    where
   50|  66.2k|        E: de::Error,
   51|  66.2k|    {
   52|  66.2k|        CidGeneric::<SIZE>::try_from(value)
   53|  66.2k|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|  66.2k|    }

_RNvXs2_NtCs6aF0MnpqdVL_3cid7versionNtB5_7VersionNtNtCsinBTLzipKNW_4core3cmp9PartialEq2eqCskivaWyxXAKd_11equivalence:
    6|    627|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs2_NtCs6aF0MnpqdVL_3cid7versionNtB5_7VersionNtNtCsinBTLzipKNW_4core3cmp9PartialEq2eqCs8aROixYY1Zm_19fvm_ipld_blockstore:
    6|  48.5k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RINvXsa_NtCs6aF0MnpqdVL_3cid7versionNtB6_7VersionNtNtCsinBTLzipKNW_4core4hash4Hash4hashNtNtNtNtCs1P3rTpcQIlL_3std11collections4hash3map13DefaultHasherECs8aROixYY1Zm_19fvm_ipld_blockstore:
    6|   193k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs0_NtCs6aF0MnpqdVL_3cid7versionyINtNtCsinBTLzipKNW_4core7convert4FromNtB5_7VersionE4from:
   44|  88.9k|    fn from(ver: Version) -> u64 {
   45|  88.9k|        match ver {
   46|      0|            Version::V0 => 0,
   47|  88.9k|            Version::V1 => 1,
   48|       |        }
   49|  88.9k|    }
_RNvXs_NtCs6aF0MnpqdVL_3cid7versionNtB4_7VersionINtNtCsinBTLzipKNW_4core7convert7TryFromyE8try_from:
   34|  66.2k|    fn try_from(raw: u64) -> Result<Self> {
   35|  66.2k|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|  66.2k|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|  66.2k|    }

_RNvCs5Y692EQcN9A_9getrandom16getrandom_uninitCs6K1YSUf17yh_5ahash:
  339|      1|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  340|      1|    if !dest.is_empty() {
  341|      1|        imp::getrandom_inner(dest)?;
  342|      0|    }
  343|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  344|       |    // since it returned `Ok`.
  345|      1|    Ok(unsafe { slice_assume_init_mut(dest) })
  346|      1|}
_RNvCs5Y692EQcN9A_9getrandom9getrandomCs6K1YSUf17yh_5ahash:
  313|      1|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  314|      1|    Ok(())
  315|      1|}

_RNvNtCs5Y692EQcN9A_9getrandom3imp9getrandom:
   42|      2|unsafe fn getrandom(
   43|      2|    buf: *mut libc::c_void,
   44|      2|    buflen: libc::size_t,
   45|      2|    flags: libc::c_uint,
   46|      2|) -> libc::ssize_t {
   47|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|      2|}
_RNCNvNtCs5Y692EQcN9A_9getrandom3imp15getrandom_inner0B5_:
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
_RNvNtCs5Y692EQcN9A_9getrandom3imp15getrandom_inner:
   17|      1|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|      1|    // getrandom(2) was introduced in Linux 3.17
   19|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|      1|}
_RNvNtCs5Y692EQcN9A_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}

_RINvNtCs5Y692EQcN9A_9getrandom4util21slice_assume_init_muthECs6K1YSUf17yh_5ahash:
   74|      1|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|      1|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|      1|}
_RINvNtCs5Y692EQcN9A_9getrandom4util19slice_as_uninit_muthECs6K1YSUf17yh_5ahash:
   98|      1|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|      1|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|      1|}
_RNCINvMs_NtCs5Y692EQcN9A_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCs5Y692EQcN9A_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|      1|        let mut val = self.0.load(Relaxed);
   49|      1|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|      1|        }
   53|      1|        val
   54|      1|    }
_RINvMs_NtCs5Y692EQcN9A_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
   67|      1|    }

_RINvNtCs5Y692EQcN9A_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|      1|pub fn sys_fill_exact(
   68|      1|    mut buf: &mut [MaybeUninit<u8>],
   69|      1|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|      1|) -> Result<(), Error> {
   71|      2|    while !buf.is_empty() {
   72|      1|        let res = sys_fill(buf);
   73|      1|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|      1|        } else {
   80|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   81|      1|            // should be an infinite stream of random bytes.
   82|      1|            let len = min(res as usize, buf.len());
   83|      1|            buf = &mut buf[len..];
   84|      1|        }
   85|       |    }
   86|      1|    Ok(())
   87|      1|}

_RINvYINtNtNtNtCs1P3rTpcQIlL_3std11collections4hash3map4IteryyENtCsjXKzuwiAUQC_9itertools9Itertools13sorted_by_keyRyNCNvNvCskivaWyxXAKd_11equivalences0_1__19___libfuzzer_sys_run0EB1V_:
 2661|    627|    fn sorted_by_key<K, F>(self, f: F) -> VecIntoIter<Self::Item>
 2662|    627|        where Self: Sized,
 2663|    627|              K: Ord,
 2664|    627|              F: FnMut(&Self::Item) -> K,
 2665|    627|    {
 2666|    627|        let mut v = Vec::from_iter(self);
 2667|    627|        v.sort_by_key(f);
 2668|    627|        v.into_iter()
 2669|    627|    }

rust_fuzzer_test_input:
  259|    627|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    627|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    627|
  262|    627|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    627|                // implementation. This helps the fuzzer avoid exploring all the
  264|    627|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    627|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    627|                // get to longer inputs that actually lead to interesting executions
  267|    627|                // quicker.
  268|    627|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|    627|                }
  271|    627|
  272|    627|                let mut u = Unstructured::new(bytes);
  273|    627|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    627|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    627|                }
  291|       |
  292|    627|                let data = match data {
  293|    627|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    627|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    627|                result.to_libfuzzer_code()
  299|    627|            }
_RNvNvCskivaWyxXAKd_11equivalences0_1__19___libfuzzer_sys_run:
  303|    627|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
_RNvXCscm2RbwRH95I_13libfuzzer_sysNtB2_6CorpusINtNtCsinBTLzipKNW_4core7convert4FromuE4from:
   30|    627|    fn from(_: ()) -> Self {
   31|    627|        Self::Keep
   32|    627|    }
LLVMFuzzerTestOneInput:
   58|    627|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    627|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    627|    });
   63|    627|
   64|    627|    match test_input {
   65|    627|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    627|}
_RNvMs_Cscm2RbwRH95I_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|    627|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    627|        match self {
   42|    627|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    627|    }
_RNCNvCscm2RbwRH95I_13libfuzzer_sys15test_input_wrap0B3_:
   59|    627|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    627|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    627|        rust_fuzzer_test_input(data_slice)
   62|    627|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXNtNtCsK3ER69FsVl_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCsinBTLzipKNW_4core7default7Default7defaultB6_:
   35|  68.8k|            fn default() -> Self {
   36|  68.8k|                let mut params = $module::Params::new();
   37|  68.8k|                params.hash_length(S);
   38|  68.8k|                Self {
   39|  68.8k|                    state: params.to_state(),
   40|  68.8k|                    digest: [0; S],
   41|  68.8k|                }
   42|  68.8k|            }
_RNvXs_NtNtCsK3ER69FsVl_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|  68.8k|            fn update(&mut self, input: &[u8]) {
   47|  68.8k|                self.state.update(input);
   48|  68.8k|            }
_RNvXs_NtNtCsK3ER69FsVl_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|  68.8k|            fn finalize(&mut self) -> &[u8] {
   51|  68.8k|                let digest = self.state.finalize();
   52|  68.8k|                let digest_bytes = digest.as_bytes();
   53|  68.8k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|  68.8k|                digest_out.copy_from_slice(digest_bytes);
   55|  68.8k|                digest_out
   56|  68.8k|            }

_RNvXs2_NtCsK3ER69FsVl_9multihash9multihashINtB5_9MultihashKj40_ENtNtCsinBTLzipKNW_4core3cmp9PartialEq2eqCskivaWyxXAKd_11equivalence:
  267|    627|    fn eq(&self, other: &Multihash<B>) -> bool {
  268|    627|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  269|    627|        self.code == other.code && self.digest() == other.digest()
  270|    627|    }
_RINvNtCsK3ER69FsVl_9multihash9multihash14read_multihashQRShKj40_ECskivaWyxXAKd_11equivalence:
  335|  66.2k|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|  66.2k|where
  337|  66.2k|    R: io::Read,
  338|  66.2k|{
  339|  66.2k|    let code = read_u64(&mut r)?;
  340|  66.2k|    let size = read_u64(&mut r)?;
  341|       |
  342|  66.2k|    if size > S as u64 || size > u8::MAX as u64 {
  343|      0|        return Err(Error::InvalidSize(size));
  344|  66.2k|    }
  345|  66.2k|
  346|  66.2k|    let mut digest = [0; S];
  347|  66.2k|    r.read_exact(&mut digest[..size as usize])?;
  348|  66.2k|    Ok((code, size as u8, digest))
  349|  66.2k|}
_RNvMs_NtCsK3ER69FsVl_9multihash9multihashINtB4_9MultihashKj40_E4sizeCskivaWyxXAKd_11equivalence:
  125|  88.9k|    pub const fn size(&self) -> u8 {
  126|  88.9k|        self.size
  127|  88.9k|    }
_RNvMs_NtCsK3ER69FsVl_9multihash9multihashINtB4_9MultihashKj40_E4codeCskivaWyxXAKd_11equivalence:
  120|  88.9k|    pub const fn code(&self) -> u64 {
  121|  88.9k|        self.code
  122|  88.9k|    }
_RINvMs_NtCsK3ER69FsVl_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECskivaWyxXAKd_11equivalence:
  135|  66.2k|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|  66.2k|    where
  137|  66.2k|        Self: Sized,
  138|  66.2k|    {
  139|  66.2k|        let (code, size, digest) = read_multihash(r)?;
  140|  66.2k|        Ok(Self { code, size, digest })
  141|  66.2k|    }
_RINvMs_NtCsK3ER69FsVl_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs3wTdrvaeLle_5alloc3vec3VechEECskivaWyxXAKd_11equivalence:
  163|  88.9k|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|  88.9k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|  88.9k|    }
_RNvMs_NtCsK3ER69FsVl_9multihash9multihashINtB4_9MultihashKj40_E6digestCskivaWyxXAKd_11equivalence:
  130|  90.1k|    pub fn digest(&self) -> &[u8] {
  131|  90.1k|        &self.digest[..self.size as usize]
  132|  90.1k|    }
_RINvNtCsK3ER69FsVl_9multihash9multihash15write_multihashQQINtNtCs3wTdrvaeLle_5alloc3vec3VechEECskivaWyxXAKd_11equivalence:
  310|  88.9k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|  88.9k|where
  312|  88.9k|    W: io::Write,
  313|  88.9k|{
  314|  88.9k|    let mut code_buf = varint_encode::u64_buffer();
  315|  88.9k|    let code = varint_encode::u64(code, &mut code_buf);
  316|  88.9k|
  317|  88.9k|    let mut size_buf = varint_encode::u8_buffer();
  318|  88.9k|    let size = varint_encode::u8(size, &mut size_buf);
  319|  88.9k|
  320|  88.9k|    let written = code.len() + size.len() + digest.len();
  321|  88.9k|
  322|  88.9k|    w.write_all(code)?;
  323|  88.9k|    w.write_all(size)?;
  324|  88.9k|    w.write_all(digest)?;
  325|       |
  326|  88.9k|    Ok(written)
  327|  88.9k|}
_RINvXs0_NtCsK3ER69FsVl_9multihash9multihashINtB6_9MultihashKj40_ENtNtCsinBTLzipKNW_4core4hash4Hash4hashNtNtNtNtCs1P3rTpcQIlL_3std11collections4hash3map13DefaultHasherECs8aROixYY1Zm_19fvm_ipld_blockstore:
  253|   193k|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  254|   193k|        self.code.hash(state);
  255|   193k|        self.digest().hash(state);
  256|   193k|    }
_RNvXs2_NtCsK3ER69FsVl_9multihash9multihashINtB5_9MultihashKj40_ENtNtCsinBTLzipKNW_4core3cmp9PartialEq2eqCs8aROixYY1Zm_19fvm_ipld_blockstore:
  267|  48.5k|    fn eq(&self, other: &Multihash<B>) -> bool {
  268|  48.5k|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  269|  48.5k|        self.code == other.code && self.digest() == other.digest()
  270|  48.5k|    }
_RNvMs_NtCsK3ER69FsVl_9multihash9multihashINtB4_9MultihashKj40_E6digestCs8aROixYY1Zm_19fvm_ipld_blockstore:
  130|   290k|    pub fn digest(&self) -> &[u8] {
  131|   290k|        &self.digest[..self.size as usize]
  132|   290k|    }
_RNvMs_NtCsK3ER69FsVl_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|  68.8k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|  68.8k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|  68.8k|        }
  105|  68.8k|        let size = input_digest.len();
  106|  68.8k|        let mut digest = [0; S];
  107|  68.8k|        let mut i = 0;
  108|  2.27M|        while i < size {
  109|  2.20M|            digest[i] = input_digest[i];
  110|  2.20M|            i += 1;
  111|  2.20M|        }
  112|  68.8k|        Ok(Self {
  113|  68.8k|            code,
  114|  68.8k|            size: size as u8,
  115|  68.8k|            digest,
  116|  68.8k|        })
  117|  68.8k|    }

_RNvXs3_NtCsK3ER69FsVl_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|  68.8k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvMs2_NtCs3Ml2glGDuP7_9once_cell3impINtB5_8OnceCellNtNtCs3wTdrvaeLle_5alloc6string6StringE14is_initializedCskivaWyxXAKd_11equivalence:
   49|    627|    pub(crate) fn is_initialized(&self) -> bool {
   50|    627|        // An `Acquire` load is enough because that makes all the initialization
   51|    627|        // operations visible to us, and, this being a fast path, weaker
   52|    627|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    627|        // `SeqCst` operations on the slow path.
   54|    627|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    627|    }

_RINvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB6_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE15get_or_try_initNCINvMs4_B1u_B1r_3getRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0NtNtB1w_5error5ErrorECskivaWyxXAKd_11equivalence:
  624|  14.9k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  14.9k|        where
  626|  14.9k|            F: FnOnce() -> Result<T, E>,
  627|  14.9k|        {
  628|  14.9k|            if let Some(val) = self.get() {
  629|    673|                return Ok(val);
  630|  14.2k|            }
  631|  14.2k|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|  14.2k|            assert!(self.set(val).is_ok(), "reentrant init");
  637|  14.2k|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  14.9k|        }
_RNvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE10try_insertCskivaWyxXAKd_11equivalence:
  554|  17.8k|            if let Some(old) = self.get() {
  555|      0|                return Err((old, value));
  556|  17.8k|            }
  557|  17.8k|
  558|  17.8k|            let slot = unsafe { &mut *self.inner.get() };
  559|  17.8k|            // This is the only place where we set the slot, no races
  560|  17.8k|            // due to reentrancy/concurrency are possible, and we've
  561|  17.8k|            // checked that slot is currently `None`, so this write
  562|  17.8k|            // maintains the `inner`'s invariant.
  563|  17.8k|            *slot = Some(value);
  564|  17.8k|            Ok(unsafe { slot.as_ref().unwrap_unchecked() })
  565|  17.8k|        }
_RNvXs0_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEENtNtCsinBTLzipKNW_4core7default7Default7defaultCskivaWyxXAKd_11equivalence:
  426|  81.6k|        fn default() -> Self {
  427|  81.6k|            Self::new()
  428|  81.6k|        }
_RINvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB6_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE15get_or_try_initNCINvMs4_B1u_B1r_6deleteRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECskivaWyxXAKd_11equivalence:
  624|  5.34k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  5.34k|        where
  626|  5.34k|            F: FnOnce() -> Result<T, E>,
  627|  5.34k|        {
  628|  5.34k|            if let Some(val) = self.get() {
  629|  1.70k|                return Ok(val);
  630|  3.63k|            }
  631|  3.63k|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|  3.63k|            assert!(self.set(val).is_ok(), "reentrant init");
  637|  3.63k|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  5.34k|        }
_RNvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE3setCskivaWyxXAKd_11equivalence:
  532|  17.8k|        pub fn set(&self, value: T) -> Result<(), T> {
  533|  17.8k|            match self.try_insert(value) {
  534|  17.8k|                Ok(_) => Ok(()),
  535|      0|                Err((_, value)) => Err(value),
  536|       |            }
  537|  17.8k|        }
_RNvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE3getCskivaWyxXAKd_11equivalence:
  485|  56.0k|        pub fn get(&self) -> Option<&T> {
  486|  56.0k|            // Safe due to `inner`'s invariant of being written to at most once.
  487|  56.0k|            // Had multiple writes to `inner` been allowed, a reference to the
  488|  56.0k|            // value we return now would become dangling by a write of a
  489|  56.0k|            // different value later.
  490|  56.0k|            unsafe { &*self.inner.get() }.as_ref()
  491|  56.0k|        }
_RNvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE7get_mutCskivaWyxXAKd_11equivalence:
  510|  5.34k|        pub fn get_mut(&mut self) -> Option<&mut T> {
  511|  5.34k|            // Safe because we have unique access
  512|  5.34k|            unsafe { &mut *self.inner.get() }.as_mut()
  513|  5.34k|        }
_RNvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE10with_valueCskivaWyxXAKd_11equivalence:
  477|  64.4k|        pub const fn with_value(value: T) -> OnceCell<T> {
  478|  64.4k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  479|  64.4k|        }
_RNvXs5_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEEINtNtCsinBTLzipKNW_4core7convert4FromBR_E4fromCskivaWyxXAKd_11equivalence:
  465|  64.4k|        fn from(value: T) -> Self {
  466|  64.4k|            OnceCell::with_value(value)
  467|  64.4k|        }
_RNvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE10into_innerCskivaWyxXAKd_11equivalence:
  689|  15.4k|        pub fn into_inner(self) -> Option<T> {
  690|  15.4k|            // Because `into_inner` takes `self` by value, the compiler statically verifies
  691|  15.4k|            // that it is not currently borrowed. So it is safe to move out `Option<T>`.
  692|  15.4k|            self.inner.into_inner()
  693|  15.4k|        }
_RNvMs6_NtCs3Ml2glGDuP7_9once_cell6unsyncINtB5_8OnceCellINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEE3newCskivaWyxXAKd_11equivalence:
  472|  81.6k|        pub const fn new() -> OnceCell<T> {
  473|  81.6k|            OnceCell { inner: UnsafeCell::new(None) }
  474|  81.6k|        }
_RNvMs4_NtCs3Ml2glGDuP7_9once_cell4syncINtB5_8OnceCellNtNtCs3wTdrvaeLle_5alloc6string6StringE3getCskivaWyxXAKd_11equivalence:
  965|    627|        pub fn get(&self) -> Option<&T> {
  966|    627|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    627|                None
  971|       |            }
  972|    627|        }

_RNCINvMs1_NtNtCs3Ml2glGDuP7_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCs3wTdrvaeLle_5alloc5boxed3BoxDNtNtCs6K1YSUf17yh_5ahash12random_state12RandomSourceNtNtCsinBTLzipKNW_4core6marker4SendNtB2u_4SyncEL_EE11get_or_initNCNvMs1_B1E_NtB1E_11RandomState7get_src0E0CskivaWyxXAKd_11equivalence:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCs3Ml2glGDuP7_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCs3wTdrvaeLle_5alloc5boxed3BoxDNtNtCs6K1YSUf17yh_5ahash12random_state12RandomSourceNtNtCsinBTLzipKNW_4core6marker4SendNtB2s_4SyncEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECskivaWyxXAKd_11equivalence:
  385|  1.25k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|  1.25k|        where
  387|  1.25k|            F: FnOnce() -> Result<Box<T>, E>,
  388|  1.25k|        {
  389|  1.25k|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|  1.25k|
  391|  1.25k|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|  1.25k|            };
  405|  1.25k|            Ok(unsafe { &*ptr })
  406|  1.25k|        }
_RINvMs1_NtNtCs3Ml2glGDuP7_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCs3wTdrvaeLle_5alloc5boxed3BoxDNtNtCs6K1YSUf17yh_5ahash12random_state12RandomSourceNtNtCsinBTLzipKNW_4core6marker4SendNtB2s_4SyncEL_EE11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0ECskivaWyxXAKd_11equivalence:
  367|  1.25k|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|  1.25k|        where
  369|  1.25k|            F: FnOnce() -> Box<T>,
  370|  1.25k|        {
  371|  1.25k|            enum Void {}
  372|  1.25k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|  1.25k|                Ok(val) => val,
  374|  1.25k|                Err(void) => match void {},
  375|  1.25k|            }
  376|  1.25k|        }
_RINvMs1_NtNtCs3Ml2glGDuP7_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs6K1YSUf17yh_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  367|  1.25k|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|  1.25k|        where
  369|  1.25k|            F: FnOnce() -> Box<T>,
  370|  1.25k|        {
  371|  1.25k|            enum Void {}
  372|  1.25k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|  1.25k|                Ok(val) => val,
  374|  1.25k|                Err(void) => match void {},
  375|  1.25k|            }
  376|  1.25k|        }
_RNCINvMs1_NtNtCs3Ml2glGDuP7_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs6K1YSUf17yh_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCs3Ml2glGDuP7_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCs6K1YSUf17yh_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  385|  1.25k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|  1.25k|        where
  387|  1.25k|            F: FnOnce() -> Result<Box<T>, E>,
  388|  1.25k|        {
  389|  1.25k|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|  1.25k|
  391|  1.25k|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|  1.25k|            };
  405|  1.25k|            Ok(unsafe { &*ptr })
  406|  1.25k|        }

_RNvMs1_Cs36DBkCpHX2y_10scopeguardINtB5_10ScopeGuardQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCskivaWyxXAKd_11equivalence:
  326|   121k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|   121k|        ScopeGuard {
  328|   121k|            value: ManuallyDrop::new(v),
  329|   121k|            dropfn: ManuallyDrop::new(dropfn),
  330|   121k|            strategy: PhantomData,
  331|   121k|        }
  332|   121k|    }
_RNvXCs36DBkCpHX2y_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|   121k|    fn should_run() -> bool {
  232|   121k|        true
  233|   121k|    }
_RINvCs36DBkCpHX2y_10scopeguard5guardQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEFBy_EuECskivaWyxXAKd_11equivalence:
  375|   121k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|   121k|where
  377|   121k|    F: FnOnce(T),
  378|   121k|{
  379|   121k|    ScopeGuard::with_strategy(v, dropfn)
  380|   121k|}
_RNvXs4_Cs36DBkCpHX2y_10scopeguardINtB5_10ScopeGuardQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsinBTLzipKNW_4core3ops5deref8DerefMut9deref_mutCskivaWyxXAKd_11equivalence:
  460|   121k|    fn deref_mut(&mut self) -> &mut T {
  461|   121k|        &mut *self.value
  462|   121k|    }
_RNvXs5_Cs36DBkCpHX2y_10scopeguardINtB5_10ScopeGuardQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsinBTLzipKNW_4core3ops4drop4Drop4dropCskivaWyxXAKd_11equivalence:
  470|   121k|    fn drop(&mut self) {
  471|   121k|        // This is OK because the fields are `ManuallyDrop`s
  472|   121k|        // which will not be dropped by the compiler.
  473|   121k|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|   121k|        if S::should_run() {
  475|   121k|            dropfn(value);
  476|   121k|        }
  477|   121k|    }

_RINvXsX_NtNtCs38SYVtDJ7gI_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  111|  15.6k|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  112|  15.6k|            where
  113|  15.6k|                D: Deserializer<'de>,
  114|  15.6k|            {
  115|  15.6k|                struct PrimitiveVisitor;
  116|  15.6k|
  117|  15.6k|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  118|  15.6k|                    type Value = $primitive;
  119|  15.6k|
  120|  15.6k|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  121|  15.6k|                        formatter.write_str(stringify!($primitive))
  122|  15.6k|                    }
  123|  15.6k|
  124|  15.6k|                    $($($method!($val : $visit);)*)*
  125|  15.6k|                }
  126|  15.6k|
  127|  15.6k|                deserializer.$deserialize(PrimitiveVisitor)
  128|  15.6k|            }
_RINvXsh_NtNtCs38SYVtDJ7gI_5serde2de5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecyENtB8_11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
 1009|  38.2k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1010|  38.2k|    where
 1011|  38.2k|        D: Deserializer<'de>,
 1012|  38.2k|    {
 1013|  38.2k|        struct VecVisitor<T> {
 1014|  38.2k|            marker: PhantomData<T>,
 1015|  38.2k|        }
 1016|  38.2k|
 1017|  38.2k|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1018|  38.2k|        where
 1019|  38.2k|            T: Deserialize<'de>,
 1020|  38.2k|        {
 1021|  38.2k|            type Value = Vec<T>;
 1022|  38.2k|
 1023|  38.2k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1024|  38.2k|                formatter.write_str("a sequence")
 1025|  38.2k|            }
 1026|  38.2k|
 1027|  38.2k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|  38.2k|            where
 1029|  38.2k|                A: SeqAccess<'de>,
 1030|  38.2k|            {
 1031|  38.2k|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|  38.2k|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|  38.2k|
 1034|  38.2k|                while let Some(value) = tri!(seq.next_element()) {
 1035|  38.2k|                    values.push(value);
 1036|  38.2k|                }
 1037|  38.2k|
 1038|  38.2k|                Ok(values)
 1039|  38.2k|            }
 1040|  38.2k|        }
 1041|  38.2k|
 1042|  38.2k|        let visitor = VecVisitor {
 1043|  38.2k|            marker: PhantomData,
 1044|  38.2k|        };
 1045|  38.2k|        deserializer.deserialize_seq(visitor)
 1046|  38.2k|    }
_RINvXNvXsh_NtNtCs38SYVtDJ7gI_5serde2de5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EENtBb_7Visitor9visit_seqINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
 1027|  38.2k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|  38.2k|            where
 1029|  38.2k|                A: SeqAccess<'de>,
 1030|  38.2k|            {
 1031|  38.2k|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|  38.2k|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|       |
 1034|   104k|                while let Some(value) = tri!(seq.next_element()) {
 1035|  66.2k|                    values.push(value);
 1036|  66.2k|                }
 1037|       |
 1038|  38.2k|                Ok(values)
 1039|  38.2k|            }
_RINvXsh_NtNtCs38SYVtDJ7gI_5serde2de5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EENtB8_11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
 1009|  38.2k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1010|  38.2k|    where
 1011|  38.2k|        D: Deserializer<'de>,
 1012|  38.2k|    {
 1013|  38.2k|        struct VecVisitor<T> {
 1014|  38.2k|            marker: PhantomData<T>,
 1015|  38.2k|        }
 1016|  38.2k|
 1017|  38.2k|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1018|  38.2k|        where
 1019|  38.2k|            T: Deserialize<'de>,
 1020|  38.2k|        {
 1021|  38.2k|            type Value = Vec<T>;
 1022|  38.2k|
 1023|  38.2k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1024|  38.2k|                formatter.write_str("a sequence")
 1025|  38.2k|            }
 1026|  38.2k|
 1027|  38.2k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|  38.2k|            where
 1029|  38.2k|                A: SeqAccess<'de>,
 1030|  38.2k|            {
 1031|  38.2k|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|  38.2k|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|  38.2k|
 1034|  38.2k|                while let Some(value) = tri!(seq.next_element()) {
 1035|  38.2k|                    values.push(value);
 1036|  38.2k|                }
 1037|  38.2k|
 1038|  38.2k|                Ok(values)
 1039|  38.2k|            }
 1040|  38.2k|        }
 1041|  38.2k|
 1042|  38.2k|        let visitor = VecVisitor {
 1043|  38.2k|            marker: PhantomData,
 1044|  38.2k|        };
 1045|  38.2k|        deserializer.deserialize_seq(visitor)
 1046|  38.2k|    }
_RINvXNvXs2O_NtNtCs38SYVtDJ7gI_5serde2de5implsTppppENtBc_11Deserialize11deserializeINtB3_12TupleVisitormmyINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEENtBc_7Visitor9visit_seqINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
 1274|  6.69k|                        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1275|  6.69k|                        where
 1276|  6.69k|                            A: SeqAccess<'de>,
 1277|  6.69k|                        {
 1278|       |                            $(
 1279|  6.69k|                                let $name = match tri!(seq.next_element()) {
 1280|  6.69k|                                    Some(value) => value,
 1281|      0|                                    None => return Err(Error::invalid_length($n, &self)),
 1282|       |                                };
 1283|       |                            )+
 1284|       |
 1285|  6.69k|                            Ok(($($name,)+))
 1286|  6.69k|                        }
_RINvXNvXsV_NtNtCs38SYVtDJ7gI_5serde2de5implsmNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u32INtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsinBTLzipKNW_4core7convert10InfallibleEECskivaWyxXAKd_11equivalence:
  136|  13.3k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  137|  13.3k|        where
  138|  13.3k|            E: Error,
  139|  13.3k|        {
  140|  13.3k|            Ok(v)
  141|  13.3k|        }
_RINvXs2O_NtNtCs38SYVtDJ7gI_5serde2de5implsTmmyINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEENtB9_11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
 1257|  6.69k|                fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1258|  6.69k|                where
 1259|  6.69k|                    D: Deserializer<'de>,
 1260|  6.69k|                {
 1261|  6.69k|                    struct TupleVisitor<$($name,)+> {
 1262|  6.69k|                        marker: PhantomData<($($name,)+)>,
 1263|  6.69k|                    }
 1264|  6.69k|
 1265|  6.69k|                    impl<'de, $($name: Deserialize<'de>),+> Visitor<'de> for TupleVisitor<$($name,)+> {
 1266|  6.69k|                        type Value = ($($name,)+);
 1267|  6.69k|
 1268|  6.69k|                        fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1269|  6.69k|                            formatter.write_str(concat!("a tuple of size ", $len))
 1270|  6.69k|                        }
 1271|  6.69k|
 1272|  6.69k|                        #[inline]
 1273|  6.69k|                        #[allow(non_snake_case)]
 1274|  6.69k|                        fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1275|  6.69k|                        where
 1276|  6.69k|                            A: SeqAccess<'de>,
 1277|  6.69k|                        {
 1278|  6.69k|                            $(
 1279|  6.69k|                                let $name = match tri!(seq.next_element()) {
 1280|  6.69k|                                    Some(value) => value,
 1281|  6.69k|                                    None => return Err(Error::invalid_length($n, &self)),
 1282|  6.69k|                                };
 1283|  6.69k|                            )+
 1284|  6.69k|
 1285|  6.69k|                            Ok(($($name,)+))
 1286|  6.69k|                        }
 1287|  6.69k|                    }
 1288|  6.69k|
 1289|  6.69k|                    deserializer.deserialize_tuple($len, TupleVisitor { marker: PhantomData })
 1290|  6.69k|                }
_RINvXsV_NtNtCs38SYVtDJ7gI_5serde2de5implsmNtB8_11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  111|  13.3k|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  112|  13.3k|            where
  113|  13.3k|                D: Deserializer<'de>,
  114|  13.3k|            {
  115|  13.3k|                struct PrimitiveVisitor;
  116|  13.3k|
  117|  13.3k|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  118|  13.3k|                    type Value = $primitive;
  119|  13.3k|
  120|  13.3k|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  121|  13.3k|                        formatter.write_str(stringify!($primitive))
  122|  13.3k|                    }
  123|  13.3k|
  124|  13.3k|                    $($($method!($val : $visit);)*)*
  125|  13.3k|                }
  126|  13.3k|
  127|  13.3k|                deserializer.$deserialize(PrimitiveVisitor)
  128|  13.3k|            }
_RINvXNvXsh_NtNtCs38SYVtDJ7gI_5serde2de5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitoryENtBb_7Visitor9visit_seqINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
 1027|  38.2k|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|  38.2k|            where
 1029|  38.2k|                A: SeqAccess<'de>,
 1030|  38.2k|            {
 1031|  38.2k|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|  38.2k|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|       |
 1034|  47.2k|                while let Some(value) = tri!(seq.next_element()) {
 1035|  8.95k|                    values.push(value);
 1036|  8.95k|                }
 1037|       |
 1038|  38.2k|                Ok(values)
 1039|  38.2k|            }
_RINvXNvXsX_NtNtCs38SYVtDJ7gI_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsinBTLzipKNW_4core7convert10InfallibleEECskivaWyxXAKd_11equivalence:
  136|  15.6k|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  137|  15.6k|        where
  138|  15.6k|            E: Error,
  139|  15.6k|        {
  140|  15.6k|            Ok(v)
  141|  15.6k|        }

_RINvYINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess12next_elementINtNtCs3wTdrvaeLle_5alloc3vec3VecyEECskivaWyxXAKd_11equivalence:
 1722|  38.2k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  38.2k|    where
 1724|  38.2k|        T: Deserialize<'de>,
 1725|  38.2k|    {
 1726|  38.2k|        self.next_element_seed(PhantomData)
 1727|  38.2k|    }
_RINvXs3_NtCs38SYVtDJ7gI_5serde2deINtNtCsinBTLzipKNW_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  790|  15.6k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  15.6k|    where
  792|  15.6k|        D: Deserializer<'de>,
  793|  15.6k|    {
  794|  15.6k|        T::deserialize(deserializer)
  795|  15.6k|    }
_RINvXs3_NtCs38SYVtDJ7gI_5serde2deINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  790|  66.2k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  66.2k|    where
  792|  66.2k|        D: Deserializer<'de>,
  793|  66.2k|    {
  794|  66.2k|        T::deserialize(deserializer)
  795|  66.2k|    }
_RINvXs3_NtCs38SYVtDJ7gI_5serde2deINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEENtB6_15DeserializeSeed11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  790|  6.69k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  6.69k|    where
  792|  6.69k|        D: Deserializer<'de>,
  793|  6.69k|    {
  794|  6.69k|        T::deserialize(deserializer)
  795|  6.69k|    }
_RINvYNtNtCs6aF0MnpqdVL_3cid5serde17BytesToCidVisitorNtNtCs38SYVtDJ7gI_5serde2de7Visitor20visit_borrowed_bytesINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsinBTLzipKNW_4core7convert10InfallibleEECskivaWyxXAKd_11equivalence:
 1562|  66.2k|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|  66.2k|    where
 1564|  66.2k|        E: Error,
 1565|  66.2k|    {
 1566|  66.2k|        self.visit_bytes(v)
 1567|  66.2k|    }
_RINvXs3_NtCs38SYVtDJ7gI_5serde2deINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCs3wTdrvaeLle_5alloc3vec3VecyEENtB6_15DeserializeSeed11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  790|  38.2k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  38.2k|    where
  792|  38.2k|        D: Deserializer<'de>,
  793|  38.2k|    {
  794|  38.2k|        T::deserialize(deserializer)
  795|  38.2k|    }
_RINvYINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess12next_elementmECskivaWyxXAKd_11equivalence:
 1722|  13.3k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  13.3k|    where
 1724|  13.3k|        T: Deserialize<'de>,
 1725|  13.3k|    {
 1726|  13.3k|        self.next_element_seed(PhantomData)
 1727|  13.3k|    }
_RINvYINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess12next_elementINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEECskivaWyxXAKd_11equivalence:
 1722|  6.69k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  6.69k|    where
 1724|  6.69k|        T: Deserialize<'de>,
 1725|  6.69k|    {
 1726|  6.69k|        self.next_element_seed(PhantomData)
 1727|  6.69k|    }
_RINvXs3_NtCs38SYVtDJ7gI_5serde2deINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNvXNvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtB1o_13CollapsedNodepENtB6_11Deserialize11deserializeINtB1j_9___VisitorpENtB6_7Visitor9visit_seq17___DeserializeWithyEENtB6_15DeserializeSeed11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  790|  38.2k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  38.2k|    where
  792|  38.2k|        D: Deserializer<'de>,
  793|  38.2k|    {
  794|  38.2k|        T::deserialize(deserializer)
  795|  38.2k|    }
_RINvXs3_NtCs38SYVtDJ7gI_5serde2deINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCs3wTdrvaeLle_5alloc3vec3VecINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEENtB6_15DeserializeSeed11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  790|  38.2k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  38.2k|    where
  792|  38.2k|        D: Deserializer<'de>,
  793|  38.2k|    {
  794|  38.2k|        T::deserialize(deserializer)
  795|  38.2k|    }
_RINvYINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess12next_elementyECskivaWyxXAKd_11equivalence:
 1722|  53.9k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  53.9k|    where
 1724|  53.9k|        T: Deserialize<'de>,
 1725|  53.9k|    {
 1726|  53.9k|        self.next_element_seed(PhantomData)
 1727|  53.9k|    }
_RINvYNtNvXs_NtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3wTdrvaeLle_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCs38SYVtDJ7gI_5serde2de7Visitor20visit_borrowed_bytesINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsinBTLzipKNW_4core7convert10InfallibleEECskivaWyxXAKd_11equivalence:
 1562|  38.2k|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|  38.2k|    where
 1564|  38.2k|        E: Error,
 1565|  38.2k|    {
 1566|  38.2k|        self.visit_bytes(v)
 1567|  38.2k|    }
_RINvYINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess12next_elementINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EECskivaWyxXAKd_11equivalence:
 1722|   104k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|   104k|    where
 1724|   104k|        T: Deserialize<'de>,
 1725|   104k|    {
 1726|   104k|        self.next_element_seed(PhantomData)
 1727|   104k|    }
_RINvXs3_NtCs38SYVtDJ7gI_5serde2deINtNtCsinBTLzipKNW_4core6marker11PhantomDatamENtB6_15DeserializeSeed11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  790|  13.3k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  13.3k|    where
  792|  13.3k|        D: Deserializer<'de>,
  793|  13.3k|    {
  794|  13.3k|        T::deserialize(deserializer)
  795|  13.3k|    }
_RINvYINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess12next_elementINtNtCs3wTdrvaeLle_5alloc3vec3VecINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEECskivaWyxXAKd_11equivalence:
 1722|  38.2k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  38.2k|    where
 1724|  38.2k|        T: Deserialize<'de>,
 1725|  38.2k|    {
 1726|  38.2k|        self.next_element_seed(PhantomData)
 1727|  38.2k|    }
_RINvYINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess12next_elementINtNvXNvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtB2J_13CollapsedNodepENtB1L_11Deserialize11deserializeINtB2E_9___VisitorpENtB1L_7Visitor9visit_seq17___DeserializeWithyEECskivaWyxXAKd_11equivalence:
 1722|  38.2k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  38.2k|    where
 1724|  38.2k|        T: Deserialize<'de>,
 1725|  38.2k|    {
 1726|  38.2k|        self.next_element_seed(PhantomData)
 1727|  38.2k|    }

_RINvNtNtCs38SYVtDJ7gI_5serde2de9size_hint8cautiousyECskivaWyxXAKd_11equivalence:
   11|  38.2k|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|  38.2k|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|  38.2k|
   14|  38.2k|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|  38.2k|        cmp::min(
   18|  38.2k|            hint.unwrap_or(0),
   19|  38.2k|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|  38.2k|        )
   21|       |    }
   22|  38.2k|}
_RINvNtNtCs38SYVtDJ7gI_5serde2de9size_hint8cautiousINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EECskivaWyxXAKd_11equivalence:
   11|  38.2k|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|  38.2k|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|  38.2k|
   14|  38.2k|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|  38.2k|        cmp::min(
   18|  38.2k|            hint.unwrap_or(0),
   19|  38.2k|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|  38.2k|        )
   21|       |    }
   22|  38.2k|}

_RINvXs1r_NtNtCs38SYVtDJ7gI_5serde3ser5implsTRmBG_RyRINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  361|  4.31k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  362|  4.31k|                where
  363|  4.31k|                    S: Serializer,
  364|  4.31k|                {
  365|  4.31k|                    let mut tuple = tri!(serializer.serialize_tuple($len));
  366|       |                    $(
  367|  4.31k|                        tri!(tuple.serialize_element(&self.$n));
  368|       |                    )+
  369|  4.31k|                    tuple.end()
  370|  4.31k|                }
_RINvXs1G_NtNtCs38SYVtDJ7gI_5serde3ser5implsRmNtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  452|  8.63k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  8.63k|            where
  454|  8.63k|                S: Serializer,
  455|  8.63k|            {
  456|  8.63k|                (**self).serialize(serializer)
  457|  8.63k|            }
_RINvXsG_NtNtCs38SYVtDJ7gI_5serde3ser5implsmNtB8_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
   11|  8.63k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  8.63k|            where
   13|  8.63k|                S: Serializer,
   14|  8.63k|            {
   15|  8.63k|                serializer.$method(*self $($cast)*)
   16|  8.63k|            }
_RINvXs1m_NtNtCs38SYVtDJ7gI_5serde3ser5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  190|  68.8k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|  68.8k|            where
  192|  68.8k|                S: Serializer,
  193|  68.8k|            {
  194|  68.8k|                serializer.collect_seq(self)
  195|  68.8k|            }
_RINvXs1G_NtNtCs38SYVtDJ7gI_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  452|  26.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  26.0k|            where
  454|  26.0k|                S: Serializer,
  455|  26.0k|            {
  456|  26.0k|                (**self).serialize(serializer)
  457|  26.0k|            }
_RINvXs1G_NtNtCs38SYVtDJ7gI_5serde3ser5implsRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  452|  88.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  88.9k|            where
  454|  88.9k|                S: Serializer,
  455|  88.9k|            {
  456|  88.9k|                (**self).serialize(serializer)
  457|  88.9k|            }
_RINvXs1q_NtNtCs38SYVtDJ7gI_5serde3ser5implsTNtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes8BytesSerINtNtCs3wTdrvaeLle_5alloc3vec3VecRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEIB1x_RyEENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  361|  68.8k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  362|  68.8k|                where
  363|  68.8k|                    S: Serializer,
  364|  68.8k|                {
  365|  68.8k|                    let mut tuple = tri!(serializer.serialize_tuple($len));
  366|       |                    $(
  367|  68.8k|                        tri!(tuple.serialize_element(&self.$n));
  368|       |                    )+
  369|  68.8k|                    tuple.end()
  370|  68.8k|                }
_RINvXs1G_NtNtCs38SYVtDJ7gI_5serde3ser5implsRRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  452|  88.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  88.9k|            where
  454|  88.9k|                S: Serializer,
  455|  88.9k|            {
  456|  88.9k|                (**self).serialize(serializer)
  457|  88.9k|            }
_RINvXsH_NtNtCs38SYVtDJ7gI_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
   11|  26.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  26.0k|            where
   13|  26.0k|                S: Serializer,
   14|  26.0k|            {
   15|  26.0k|                serializer.$method(*self $($cast)*)
   16|  26.0k|            }
_RINvXs1I_NtNtCs38SYVtDJ7gI_5serde3ser5implsINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  452|  64.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  64.4k|            where
  454|  64.4k|                S: Serializer,
  455|  64.4k|            {
  456|  64.4k|                (**self).serialize(serializer)
  457|  64.4k|            }
_RINvXs1G_NtNtCs38SYVtDJ7gI_5serde3ser5implsRINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  452|  4.31k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  4.31k|            where
  454|  4.31k|                S: Serializer,
  455|  4.31k|            {
  456|  4.31k|                (**self).serialize(serializer)
  457|  4.31k|            }
_RINvXs1G_NtNtCs38SYVtDJ7gI_5serde3ser5implsRRyNtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  452|  21.6k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  21.6k|            where
  454|  21.6k|                S: Serializer,
  455|  21.6k|            {
  456|  21.6k|                (**self).serialize(serializer)
  457|  21.6k|            }
_RINvXs1m_NtNtCs38SYVtDJ7gI_5serde3ser5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecRyENtB9_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  190|  68.8k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|  68.8k|            where
  192|  68.8k|                S: Serializer,
  193|  68.8k|            {
  194|  68.8k|                serializer.collect_seq(self)
  195|  68.8k|            }

_RINvYQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer11collect_seqRINtNtCs3wTdrvaeLle_5alloc3vec3VecRyEECskivaWyxXAKd_11equivalence:
 1271|  68.8k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  68.8k|    where
 1273|  68.8k|        I: IntoIterator,
 1274|  68.8k|        <I as IntoIterator>::Item: Serialize,
 1275|  68.8k|    {
 1276|  68.8k|        let mut iter = iter.into_iter();
 1277|  68.8k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  68.8k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  68.8k|        serializer.end()
 1280|  68.8k|    }
_RINvNtCs38SYVtDJ7gI_5serde3ser17iterator_len_hintINtNtNtCsinBTLzipKNW_4core5slice4iter4IterRyEECskivaWyxXAKd_11equivalence:
 1948|  68.8k|    match iter.size_hint() {
 1949|  68.8k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  68.8k|}
_RNCINvYQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer11collect_seqRINtNtCs3wTdrvaeLle_5alloc3vec3VecRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEE0CskivaWyxXAKd_11equivalence:
 1278|  88.9k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCs38SYVtDJ7gI_5serde3ser17iterator_len_hintINtNtNtCsinBTLzipKNW_4core5slice4iter4IterRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEECskivaWyxXAKd_11equivalence:
 1948|  68.8k|    match iter.size_hint() {
 1949|  68.8k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  68.8k|}
_RNCINvYQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer11collect_seqRINtNtCs3wTdrvaeLle_5alloc3vec3VecRyEE0CskivaWyxXAKd_11equivalence:
 1278|  21.6k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer11collect_seqRINtNtCs3wTdrvaeLle_5alloc3vec3VecRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEECskivaWyxXAKd_11equivalence:
 1271|  68.8k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  68.8k|    where
 1273|  68.8k|        I: IntoIterator,
 1274|  68.8k|        <I as IntoIterator>::Item: Serialize,
 1275|  68.8k|    {
 1276|  68.8k|        let mut iter = iter.into_iter();
 1277|  68.8k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  68.8k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  68.8k|        serializer.end()
 1280|  68.8k|    }

_RINvMNtCs8GnksrDmyCU_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs3wTdrvaeLle_5alloc3vec3VechEECskivaWyxXAKd_11equivalence:
   60|  88.9k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|  88.9k|        ByteBuf {
   62|  88.9k|            bytes: bytes.into(),
   63|  88.9k|        }
   64|  88.9k|    }
_RINvXsc_NtCs8GnksrDmyCU_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs38SYVtDJ7gI_5serde3ser9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  186|  88.9k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|  88.9k|    where
  188|  88.9k|        S: Serializer,
  189|  88.9k|    {
  190|  88.9k|        serializer.serialize_bytes(&self.bytes)
  191|  88.9k|    }

_RINvNtCsh3DaB0ai8ai_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderECskivaWyxXAKd_11equivalence:
   26|   104k|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|   104k|    let buf = match reader.fill(1)? {
   28|   104k|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|   104k|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|  66.2k|    Ok(byte)
   33|   104k|}

_RNvMNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE11from_readerCskivaWyxXAKd_11equivalence:
   93|  38.2k|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|  38.2k|        Deserializer { reader }
   95|  38.2k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEECskivaWyxXAKd_11equivalence:
  333|  38.2k|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|  38.2k|    where
  335|  38.2k|        V: Visitor<'de>,
  336|  38.2k|    {
  337|  38.2k|        let mut de = self.try_step()?;
  338|  38.2k|        let seq = Accessor::array(&mut de)?;
  339|  38.2k|        visitor.visit_seq(seq)
  340|  38.2k|    }
_RINvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess17next_element_seedINtNtCsinBTLzipKNW_4core6marker11PhantomDatamEECskivaWyxXAKd_11equivalence:
  476|  13.3k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  13.3k|    where
  478|  13.3k|        T: de::DeserializeSeed<'de>,
  479|  13.3k|    {
  480|  13.3k|        if self.len > 0 {
  481|  13.3k|            self.len -= 1;
  482|  13.3k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|  13.3k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer17deserialize_tupleINtNvXs2O_NtB1X_5implsTppppENtB1X_11Deserialize11deserialize12TupleVisitormmyINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEEECskivaWyxXAKd_11equivalence:
  343|  6.69k|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|  6.69k|    where
  345|  6.69k|        V: Visitor<'de>,
  346|  6.69k|    {
  347|  6.69k|        let mut de = self.try_step()?;
  348|  6.69k|        let seq = Accessor::tuple(&mut de, len)?;
  349|  6.69k|        visitor.visit_seq(seq)
  350|  6.69k|    }
_RINvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess17next_element_seedINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCs3wTdrvaeLle_5alloc3vec3VecINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEEECskivaWyxXAKd_11equivalence:
  476|  38.2k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  38.2k|    where
  478|  38.2k|        T: de::DeserializeSeed<'de>,
  479|  38.2k|    {
  480|  38.2k|        if self.len > 0 {
  481|  38.2k|            self.len -= 1;
  482|  38.2k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|  38.2k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECskivaWyxXAKd_11equivalence:
  142|  15.6k|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|  15.6k|        where V: Visitor<'de>
  144|  15.6k|        {
  145|  15.6k|            let value = <$t>::decode(&mut self.reader)?;
  146|  15.6k|            visitor.$visit(value)
  147|  15.6k|        }
_RNvMs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE8try_stepCskivaWyxXAKd_11equivalence:
  101|   121k|    fn try_step<'a>(
  102|   121k|        &'a mut self,
  103|   121k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|   121k|    {
  105|   121k|        if self.reader.step_in() {
  106|   121k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|   121k|    }
_RNvMs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE5arrayCskivaWyxXAKd_11equivalence:
  433|  76.5k|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  434|  76.5k|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  435|  76.5k|        array_start.0.map_or_else(
  436|  76.5k|            || Err(DecodeError::IndefiniteSize),
  437|  76.5k|            move |len| Ok(Accessor { de, len }),
  438|  76.5k|        )
  439|  76.5k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3wTdrvaeLle_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECskivaWyxXAKd_11equivalence:
  239|  38.2k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  38.2k|    where
  241|  38.2k|        V: Visitor<'de>,
  242|  38.2k|    {
  243|  38.2k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|  38.2k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  38.2k|    }
_RNvMs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE5tupleCskivaWyxXAKd_11equivalence:
  442|  44.9k|    pub fn tuple(
  443|  44.9k|        de: &'a mut Deserializer<R>,
  444|  44.9k|        len: usize,
  445|  44.9k|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  446|  44.9k|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  447|       |
  448|  44.9k|        if array_start.0 == Some(len) {
  449|  44.9k|            Ok(Accessor { de, len })
  450|       |        } else {
  451|      0|            Err(DecodeError::RequireLength {
  452|      0|                name: "tuple",
  453|      0|                expect: len,
  454|      0|                value: array_start.0.unwrap_or(0),
  455|      0|            })
  456|       |        }
  457|  44.9k|    }
_RNvMs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE3endCskivaWyxXAKd_11equivalence:
  131|  38.2k|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|  38.2k|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|  38.2k|    }
_RINvNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de10from_sliceINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEECskivaWyxXAKd_11equivalence:
   40|  31.5k|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|  31.5k|where
   42|  31.5k|    T: de::Deserialize<'a>,
   43|  31.5k|{
   44|  31.5k|    let reader = SliceReader::new(buf);
   45|  31.5k|    let mut deserializer = Deserializer::from_reader(reader);
   46|  31.5k|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|  31.5k|    deserializer.end()?;
   48|  31.5k|    Ok(value)
   49|  31.5k|}
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCs3wTdrvaeLle_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitoryEECskivaWyxXAKd_11equivalence:
  333|  38.2k|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|  38.2k|    where
  335|  38.2k|        V: Visitor<'de>,
  336|  38.2k|    {
  337|  38.2k|        let mut de = self.try_step()?;
  338|  38.2k|        let seq = Accessor::array(&mut de)?;
  339|  38.2k|        visitor.visit_seq(seq)
  340|  38.2k|    }
_RINvXs7_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer17deserialize_bytesNtNtCs6aF0MnpqdVL_3cid5serde17BytesToCidVisitorECskivaWyxXAKd_11equivalence:
  628|  66.2k|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  629|  66.2k|        let byte = peek_one(&mut self.0.reader)?;
  630|  66.2k|        match dec::if_major(byte) {
  631|       |            major::BYTES => {
  632|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  633|  66.2k|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  634|  66.2k|                    Cow::Borrowed(buf) => {
  635|  66.2k|                        if buf.len() <= 1 || buf[0] != 0 {
  636|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  637|       |                        } else {
  638|  66.2k|                            visitor.visit_borrowed_bytes(&buf[1..])
  639|       |                        }
  640|       |                    }
  641|      0|                    Cow::Owned(mut buf) => {
  642|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  643|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  644|       |                        } else {
  645|      0|                            buf.remove(0);
  646|      0|                            visitor.visit_byte_buf(buf)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |            }
  651|      0|            _ => Err(DecodeError::Unsupported { byte }),
  652|       |        }
  653|  66.2k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3wTdrvaeLle_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECskivaWyxXAKd_11equivalence:
  250|  38.2k|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  251|  38.2k|    where
  252|  38.2k|        V: Visitor<'de>,
  253|  38.2k|    {
  254|  38.2k|        self.deserialize_bytes(visitor)
  255|  38.2k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer15deserialize_u32NtNvXsV_NtB1X_5implsmNtB1X_11Deserialize11deserialize16PrimitiveVisitorECskivaWyxXAKd_11equivalence:
  142|  13.3k|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|  13.3k|        where V: Visitor<'de>
  144|  13.3k|        {
  145|  13.3k|            let value = <$t>::decode(&mut self.reader)?;
  146|  13.3k|            visitor.$visit(value)
  147|  13.3k|        }
_RINvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess17next_element_seedINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEEECskivaWyxXAKd_11equivalence:
  476|  6.69k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  6.69k|    where
  478|  6.69k|        T: de::DeserializeSeed<'de>,
  479|  6.69k|    {
  480|  6.69k|        if self.len > 0 {
  481|  6.69k|            self.len -= 1;
  482|  6.69k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|  6.69k|    }
_RINvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess17next_element_seedINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCs3wTdrvaeLle_5alloc3vec3VecyEEECskivaWyxXAKd_11equivalence:
  476|  38.2k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  38.2k|    where
  478|  38.2k|        T: de::DeserializeSeed<'de>,
  479|  38.2k|    {
  480|  38.2k|        if self.len > 0 {
  481|  38.2k|            self.len -= 1;
  482|  38.2k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|  38.2k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer24deserialize_tuple_structINtNvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtB38_13CollapsedNodepENtB1X_11Deserialize11deserialize9___VisitoryEECskivaWyxXAKd_11equivalence:
  353|  38.2k|    fn deserialize_tuple_struct<V>(
  354|  38.2k|        self,
  355|  38.2k|        _name: &'static str,
  356|  38.2k|        len: usize,
  357|  38.2k|        visitor: V,
  358|  38.2k|    ) -> Result<V::Value, Self::Error>
  359|  38.2k|    where
  360|  38.2k|        V: Visitor<'de>,
  361|  38.2k|    {
  362|  38.2k|        self.deserialize_tuple(len, visitor)
  363|  38.2k|    }
_RINvMs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs6aF0MnpqdVL_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs38SYVtDJ7gI_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECskivaWyxXAKd_11equivalence:
  113|  66.2k|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|  66.2k|    where
  115|  66.2k|        V: Visitor<'de>,
  116|  66.2k|    {
  117|  66.2k|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|  66.2k|        match tag.0 {
  120|  66.2k|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|  66.2k|    }
_RINvNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de10from_sliceINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4root8RootImplyNtNtBU_7version2V3EECskivaWyxXAKd_11equivalence:
   40|  6.69k|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|  6.69k|where
   42|  6.69k|    T: de::Deserialize<'a>,
   43|  6.69k|{
   44|  6.69k|    let reader = SliceReader::new(buf);
   45|  6.69k|    let mut deserializer = Deserializer::from_reader(reader);
   46|  6.69k|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|  6.69k|    deserializer.end()?;
   48|  6.69k|    Ok(value)
   49|  6.69k|}
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs6aF0MnpqdVL_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECskivaWyxXAKd_11equivalence:
  317|  66.2k|    fn deserialize_newtype_struct<V>(
  318|  66.2k|        self,
  319|  66.2k|        name: &'static str,
  320|  66.2k|        visitor: V,
  321|  66.2k|    ) -> Result<V::Value, Self::Error>
  322|  66.2k|    where
  323|  66.2k|        V: Visitor<'de>,
  324|  66.2k|    {
  325|  66.2k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  326|  66.2k|            self.deserialize_cid(visitor)
  327|       |        } else {
  328|      0|            visitor.visit_newtype_struct(self)
  329|       |        }
  330|  66.2k|    }
_RNCNvMs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE5arrays_0CskivaWyxXAKd_11equivalence:
  437|  76.5k|            move |len| Ok(Accessor { de, len }),
_RNvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess9size_hintCskivaWyxXAKd_11equivalence:
  489|  76.5k|    fn size_hint(&self) -> Option<usize> {
  490|  76.5k|        Some(self.len)
  491|  76.5k|    }
_RINvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess17next_element_seedINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNvXNvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtB3C_13CollapsedNodepENtB1R_11Deserialize11deserializeINtB3x_9___VisitorpENtB1R_7Visitor9visit_seq17___DeserializeWithyEEECskivaWyxXAKd_11equivalence:
  476|  38.2k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  38.2k|    where
  478|  38.2k|        T: de::DeserializeSeed<'de>,
  479|  38.2k|    {
  480|  38.2k|        if self.len > 0 {
  481|  38.2k|            self.len -= 1;
  482|  38.2k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|  38.2k|    }
_RINvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess17next_element_seedINtNtCsinBTLzipKNW_4core6marker11PhantomDataINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEECskivaWyxXAKd_11equivalence:
  476|   104k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|   104k|    where
  478|   104k|        T: de::DeserializeSeed<'de>,
  479|   104k|    {
  480|   104k|        if self.len > 0 {
  481|  66.2k|            self.len -= 1;
  482|  66.2k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|  38.2k|            Ok(None)
  485|       |        }
  486|   104k|    }
_RINvXs2_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de9SeqAccess17next_element_seedINtNtCsinBTLzipKNW_4core6marker11PhantomDatayEECskivaWyxXAKd_11equivalence:
  476|  53.9k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  53.9k|    where
  478|  53.9k|        T: de::DeserializeSeed<'de>,
  479|  53.9k|    {
  480|  53.9k|        if self.len > 0 {
  481|  15.6k|            self.len -= 1;
  482|  15.6k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|  38.2k|            Ok(None)
  485|       |        }
  486|  53.9k|    }
_RNCNvMs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderE8try_step0CskivaWyxXAKd_11equivalence:
  106|   121k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderENtNtCs38SYVtDJ7gI_5serde2de12Deserializer17deserialize_tupleINtNvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtB31_13CollapsedNodepENtB1X_11Deserialize11deserialize9___VisitoryEECskivaWyxXAKd_11equivalence:
  343|  38.2k|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|  38.2k|    where
  345|  38.2k|        V: Visitor<'de>,
  346|  38.2k|    {
  347|  38.2k|        let mut de = self.try_step()?;
  348|  38.2k|        let seq = Accessor::tuple(&mut de, len)?;
  349|  38.2k|        visitor.visit_seq(seq)
  350|  38.2k|    }

_RINvXs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser14SerializeTuple17serialize_elementRmECskivaWyxXAKd_11equivalence:
  399|  8.63k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  8.63k|        value.serialize(&mut *self.ser)
  401|  8.63k|    }
_RNvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser12SerializeSeq3endCskivaWyxXAKd_11equivalence:
  385|   137k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|   137k|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|   137k|        }
  389|       |
  390|   137k|        Ok(())
  391|   137k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser12SerializeSeq17serialize_elementRRyECskivaWyxXAKd_11equivalence:
  380|  21.6k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  21.6k|        value.serialize(&mut *self.ser)
  382|  21.6k|    }
_RNvXs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer13serialize_u64CskivaWyxXAKd_11equivalence:
  123|  26.0k|        v.encode(&mut self.writer)?;
  124|  26.0k|        Ok(())
  125|  26.0k|    }
_RINvXs0_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser12SerializeSeq17serialize_elementRRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EECskivaWyxXAKd_11equivalence:
  380|  88.9k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  88.9k|        value.serialize(&mut *self.ser)
  382|  88.9k|    }
_RNvXs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer15serialize_bytesCskivaWyxXAKd_11equivalence:
  160|  68.8k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  68.8k|        Ok(())
  162|  68.8k|    }
_RINvXs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer24serialize_newtype_structNtNtCs8GnksrDmyCU_11serde_bytes7bytebuf7ByteBufECskivaWyxXAKd_11equivalence:
  199|  88.9k|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|  88.9k|        self,
  201|  88.9k|        name: &'static str,
  202|  88.9k|        value: &T,
  203|  88.9k|    ) -> Result<Self::Ok, Self::Error> {
  204|  88.9k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|  88.9k|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|  88.9k|    }
_RINvNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser6to_vecINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4root8RootImplyNtNtBQ_7version2V3EECskivaWyxXAKd_11equivalence:
   23|  4.31k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  4.31k|where
   25|  4.31k|    T: Serialize + ?Sized,
   26|  4.31k|{
   27|  4.31k|    let writer = BufWriter::new(Vec::new());
   28|  4.31k|    let mut serializer = Serializer::new(writer);
   29|  4.31k|    value.serialize(&mut serializer)?;
   30|  4.31k|    Ok(serializer.into_inner().into_inner())
   31|  4.31k|}
_RNvXs7_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer15serialize_bytesCskivaWyxXAKd_11equivalence:
  561|  88.9k|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|  88.9k|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|  88.9k|        let prefixed = [&[0x00], value].concat();
  564|  88.9k|        // CIDs are serialized with CBOR tag 42.
  565|  88.9k|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|  88.9k|        Ok(())
  567|  88.9k|    }
_RNvXs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer13serialize_seqCskivaWyxXAKd_11equivalence:
  226|   137k|        if let Some(len) = len {
  227|   137k|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|   137k|        Ok(Collect {
  232|   137k|            bounded: len.is_some(),
  233|   137k|            ser: self,
  234|   137k|        })
  235|   137k|    }
_RNvMNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterE3newCskivaWyxXAKd_11equivalence:
   51|  68.8k|    pub fn new(writer: W) -> Serializer<W> {
   52|  68.8k|        Serializer { writer }
   53|  68.8k|    }
_RNvMNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterE10into_innerCskivaWyxXAKd_11equivalence:
   56|  68.8k|    pub fn into_inner(self) -> W {
   57|  68.8k|        self.writer
   58|  68.8k|    }
_RNvXs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser14SerializeTuple3endCskivaWyxXAKd_11equivalence:
  404|  73.1k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  405|  73.1k|        Ok(())
  406|  73.1k|    }
_RINvNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser6to_vecINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEECskivaWyxXAKd_11equivalence:
   23|  64.4k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  64.4k|where
   25|  64.4k|    T: Serialize + ?Sized,
   26|  64.4k|{
   27|  64.4k|    let writer = BufWriter::new(Vec::new());
   28|  64.4k|    let mut serializer = Serializer::new(writer);
   29|  64.4k|    value.serialize(&mut serializer)?;
   30|  64.4k|    Ok(serializer.into_inner().into_inner())
   31|  64.4k|}
_RINvXs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser14SerializeTuple17serialize_elementINtNtCs3wTdrvaeLle_5alloc3vec3VecRyEECskivaWyxXAKd_11equivalence:
  399|  68.8k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  68.8k|        value.serialize(&mut *self.ser)
  401|  68.8k|    }
_RNvXs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer13serialize_u32CskivaWyxXAKd_11equivalence:
  117|  8.63k|        v.encode(&mut self.writer)?;
  118|  8.63k|        Ok(())
  119|  8.63k|    }
_RINvXs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser14SerializeTuple17serialize_elementINtNtCs3wTdrvaeLle_5alloc3vec3VecRINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EEECskivaWyxXAKd_11equivalence:
  399|  68.8k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  68.8k|        value.serialize(&mut *self.ser)
  401|  68.8k|    }
_RINvXs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser14SerializeTuple17serialize_elementRINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEECskivaWyxXAKd_11equivalence:
  399|  4.31k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  4.31k|        value.serialize(&mut *self.ser)
  401|  4.31k|    }
_RINvXs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser14SerializeTuple17serialize_elementNtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes8BytesSerECskivaWyxXAKd_11equivalence:
  399|  68.8k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  68.8k|        value.serialize(&mut *self.ser)
  401|  68.8k|    }
_RINvXs1_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser14SerializeTuple17serialize_elementRyECskivaWyxXAKd_11equivalence:
  399|  4.31k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  4.31k|        value.serialize(&mut *self.ser)
  401|  4.31k|    }
_RNvXs_NtCsh3DaB0ai8ai_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterENtNtCs38SYVtDJ7gI_5serde3ser10Serializer15serialize_tupleCskivaWyxXAKd_11equivalence:
  239|  73.1k|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|  73.1k|        Ok(BoundedCollect { ser: self })
  241|  73.1k|    }

_RNvNtCsbotkmmrJali_15unsigned_varint6decode3u64CskivaWyxXAKd_11equivalence:
  122|   264k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|   264k|    decode!(buf, 9, u64)
  124|   264k|}
_RNvNtCsbotkmmrJali_15unsigned_varint6decode7is_lastCskivaWyxXAKd_11equivalence:
   90|   794k|pub fn is_last(b: u8) -> bool {
   91|   794k|    b & 0x80 == 0
   92|   794k|}

_RNvNtCsbotkmmrJali_15unsigned_varint6encode3u64CskivaWyxXAKd_11equivalence:
   69|   266k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|   266k|    encode!(number, buf)
   71|   266k|}
_RNvNtCsbotkmmrJali_15unsigned_varint6encode10u64_bufferCskivaWyxXAKd_11equivalence:
  119|   531k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|   531k|    [0; U64_LEN]
  121|   531k|}
_RNvNtCsbotkmmrJali_15unsigned_varint6encode9u8_bufferCskivaWyxXAKd_11equivalence:
  101|  88.9k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|  88.9k|    [0; U8_LEN]
  103|  88.9k|}
_RNvNtCsbotkmmrJali_15unsigned_varint6encode2u8CskivaWyxXAKd_11equivalence:
   45|  88.9k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|  88.9k|    encode!(number, buf)
   47|  88.9k|}

_RINvNtCsbotkmmrJali_15unsigned_varint2io8read_u64QQRShECskivaWyxXAKd_11equivalence:
   31|   264k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|   264k|                let mut b = encode::$b();
   33|   397k|                for i in 0 .. b.len() {
   34|   397k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|   397k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|   397k|                    }
   38|   397k|                    if decode::is_last(b[i]) {
   39|   264k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|   132k|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|   264k|            }

_RNCNvXNvCskivaWyxXAKd_11equivalence1__NtB6_9OperationNtCsiHKaOZvXM66_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
   12|    625|#[derive(Debug, Arbitrary)]
_RNCNvXNvCskivaWyxXAKd_11equivalence1__NtB6_9OperationNtCsiHKaOZvXM66_9arbitrary9Arbitrary9arbitrarys_0B6_:
   12|  22.8k|#[derive(Debug, Arbitrary)]
_RNvCskivaWyxXAKd_11equivalence7execute:
   25|  1.25k|fn execute(ops: Vec<Operation>) -> (Cid, ahash::AHashMap<u64, u64>) {
   26|  1.25k|    let db = fvm_ipld_blockstore::MemoryBlockstore::default();
   27|  1.25k|    let mut amt = Amt::new(&db);
   28|  1.25k|    let mut elements = ahash::AHashMap::new();
   29|       |
   30|  31.5k|    for (i, Operation { idx, method, flush }) in ops.into_iter().enumerate() {
   31|  31.5k|        let idx = idx as u64;
   32|  31.5k|        if flush > 255 - 13 {
   33|  6.69k|            // Periodic flushing and reloading of Amt to fuzz blockstore usage also
   34|  6.69k|            let cid = amt.flush().unwrap();
   35|  6.69k|            amt = Amt::load(&cid, &db).unwrap();
   36|  24.8k|        }
   37|       |
   38|  31.5k|        match method {
   39|  20.7k|            Method::Insert(v) => {
   40|  20.7k|                elements.insert(idx, v);
   41|  20.7k|                amt.set(idx, v).unwrap();
   42|  20.7k|            }
   43|       |            Method::Remove => {
   44|  4.90k|                let el = elements.remove(&idx);
   45|  4.90k|                let amt_deleted = amt.delete(idx).unwrap();
   46|  4.90k|                assert_eq!(amt_deleted, el, "step {}", i);
   47|       |            }
   48|       |            Method::Get => {
   49|  5.93k|                let ev = elements.get(&idx);
   50|  5.93k|                let av = amt.get(idx).unwrap();
   51|  5.93k|                assert_eq!(av, ev, "step {}", i);
   52|       |            }
   53|       |        }
   54|       |    }
   55|  1.25k|    (amt.flush().unwrap(), elements)
   56|  1.25k|}
_RNCNvXNvCskivaWyxXAKd_11equivalences_1__NtB6_6MethodNtCsiHKaOZvXM66_9arbitrary9Arbitrary9size_hint0B6_:
   19|    627|#[derive(Debug, Arbitrary)]
_RNCNvXNvCskivaWyxXAKd_11equivalence1__NtB6_9OperationNtCsiHKaOZvXM66_9arbitrary9Arbitrary9size_hint0B6_:
   12|    627|#[derive(Debug, Arbitrary)]
_RNvXNvCskivaWyxXAKd_11equivalences_1__NtB4_6MethodNtCsiHKaOZvXM66_9arbitrary9Arbitrary9arbitrary:
   19|  70.3k|#[derive(Debug, Arbitrary)]
_RNCNvNvCskivaWyxXAKd_11equivalences0_1__19___libfuzzer_sys_runs_0B5_:
   68|  8.10k|        .map(|(k, v)| Operation {
   69|  8.10k|            idx: *k as u16,
   70|  8.10k|            method: Method::Insert(*v),
   71|  8.10k|            flush: 0,
   72|  8.10k|        })
_RNvXNvCskivaWyxXAKd_11equivalence1__NtB4_9OperationNtCsiHKaOZvXM66_9arbitrary9Arbitrary9arbitrary:
   12|  68.4k|#[derive(Debug, Arbitrary)]
_RNvXNvCskivaWyxXAKd_11equivalence1__NtB4_9OperationNtCsiHKaOZvXM66_9arbitrary9Arbitrary19arbitrary_take_rest:
   12|  1.87k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCskivaWyxXAKd_11equivalences_1__NtB6_6MethodNtCsiHKaOZvXM66_9arbitrary9Arbitrary9arbitrarys_0B6_:
   19|  23.4k|#[derive(Debug, Arbitrary)]
_RNCNvNvCskivaWyxXAKd_11equivalences0_1__19___libfuzzer_sys_run0B5_:
   67|  79.0k|        .sorted_by_key(|(_, v)| *v)

_RNvMs1_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB5_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB7_4root7version2V3E6deleteCskivaWyxXAKd_11equivalence:
  236|  4.90k|    pub fn delete(&mut self, i: u64) -> Result<Option<V>, Error> {
  237|  4.90k|        if i > MAX_INDEX {
  238|      0|            return Err(Error::OutOfRange(i));
  239|  4.90k|        }
  240|  4.90k|
  241|  4.90k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  242|       |            // Index was out of range of current AMT
  243|    888|            return Ok(None);
  244|  4.01k|        }
  245|       |
  246|       |        // Delete node from AMT
  247|  4.01k|        let deleted =
  248|  4.01k|            self.root
  249|  4.01k|                .node
  250|  4.01k|                .delete(&self.block_store, self.height(), self.bit_width(), i)?;
  251|       |
  252|  4.01k|        if deleted.is_none() {
  253|  2.25k|            return Ok(None);
  254|  1.75k|        }
  255|  1.75k|
  256|  1.75k|        self.flushed_cid = None;
  257|  1.75k|        self.root.count -= 1;
  258|  1.75k|
  259|  1.75k|        if self.root.node.is_empty() {
  260|    208|            // Last link was removed, replace root with a leaf node and reset height.
  261|    208|            self.root.node = Node::Leaf {
  262|    208|                vals: init_sized_vec(self.root.bit_width),
  263|    208|            };
  264|    208|            self.root.height = 0;
  265|    208|        } else {
  266|       |            // Handle collapsing node when the root is a link node with only one link,
  267|       |            // sub node can be moved up into the root.
  268|  3.50k|            while self.root.node.can_collapse() && self.height() > 0 {
  269|  1.95k|                let sub_node: Node<V> = match &mut self.root.node {
  270|  1.95k|                    Node::Link { links, .. } => match &mut links[0] {
  271|    871|                        Some(Link::Dirty(node)) => {
  272|    871|                            *std::mem::replace(node, Box::new(Node::empty()))
  273|       |                        }
  274|  1.08k|                        Some(Link::Cid { cid, cache }) => {
  275|  1.08k|                            let cache_node = std::mem::take(cache);
  276|  1.08k|                            if let Some(sn) = cache_node.into_inner() {
  277|     85|                                *sn
  278|       |                            } else {
  279|       |                                // Only retrieve sub node if not found in cache
  280|  1.00k|                                self.block_store
  281|  1.00k|                                    .get_cbor::<CollapsedNode<V>>(cid)?
  282|  1.00k|                                    .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  283|  1.00k|                                    .expand(self.root.bit_width)?
  284|       |                            }
  285|       |                        }
  286|      0|                        _ => unreachable!("First index checked to be Some in `can_collapse`"),
  287|       |                    },
  288|      0|                    Node::Leaf { .. } => unreachable!("Non zero height cannot be a leaf node"),
  289|       |                };
  290|       |
  291|  1.95k|                self.root.node = sub_node;
  292|  1.95k|                self.root.height -= 1;
  293|       |            }
  294|       |        }
  295|       |
  296|  1.75k|        Ok(deleted)
  297|  4.90k|    }
_RNvMs1_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB5_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB7_4root7version2V3E4loadCskivaWyxXAKd_11equivalence:
  148|  6.69k|    pub fn load(cid: &Cid, block_store: BS) -> Result<Self, Error> {
  149|       |        // Load root bytes from database
  150|  6.69k|        let root: RootImpl<V, Ver> = block_store
  151|  6.69k|            .get_cbor(cid)?
  152|  6.69k|            .ok_or_else(|| Error::CidNotFound(cid.to_string()))?;
  153|       |
  154|       |        // Sanity check, this should never be possible.
  155|  6.69k|        if root.height > MAX_HEIGHT {
  156|      0|            return Err(Error::MaxHeight(root.height, MAX_HEIGHT));
  157|  6.69k|        }
  158|  6.69k|
  159|  6.69k|        Ok(Self {
  160|  6.69k|            root,
  161|  6.69k|            block_store,
  162|  6.69k|            flushed_cid: Some(*cid),
  163|  6.69k|        })
  164|  6.69k|    }
_RNvMs_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB4_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB6_4root7version2V3E6heightCskivaWyxXAKd_11equivalence:
   86|  70.0k|    pub fn height(&self) -> u32 {
   87|  70.0k|        self.root.height
   88|  70.0k|    }
_RNvMs1_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB5_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB7_4root7version2V3E5flushCskivaWyxXAKd_11equivalence:
  325|  7.94k|        if let Some(cid) = self.flushed_cid {
  326|  3.63k|            return Ok(cid);
  327|  4.31k|        }
  328|  4.31k|        self.root.node.flush(&self.block_store)?;
  329|  4.31k|        let cid = self.block_store.put_cbor(&self.root, Code::Blake2b256)?;
  330|  4.31k|        self.flushed_cid = Some(cid);
  331|  4.31k|        Ok(cid)
  332|  7.94k|    }
_RNvMs_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB4_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB6_4root7version2V3E18new_with_bit_widthCskivaWyxXAKd_11equivalence:
   73|  1.25k|    pub fn new_with_bit_width(block_store: BS, bit_width: u32) -> Self {
   74|  1.25k|        Self {
   75|  1.25k|            root: RootImpl::new_with_bit_width(bit_width),
   76|  1.25k|            block_store,
   77|  1.25k|            flushed_cid: None,
   78|  1.25k|        }
   79|  1.25k|    }
_RNvMs1_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB5_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB7_4root7version2V3E3getCskivaWyxXAKd_11equivalence:
  167|  5.93k|    pub fn get(&self, i: u64) -> Result<Option<&V>, Error> {
  168|  5.93k|        if i > MAX_INDEX {
  169|      0|            return Err(Error::OutOfRange(i));
  170|  5.93k|        }
  171|  5.93k|
  172|  5.93k|        if i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  173|  1.37k|            return Ok(None);
  174|  4.56k|        }
  175|  4.56k|
  176|  4.56k|        self.root
  177|  4.56k|            .node
  178|  4.56k|            .get(&self.block_store, self.height(), self.bit_width(), i)
  179|  5.93k|    }
_RNvMs_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB4_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB6_4root7version2V3E9bit_widthCskivaWyxXAKd_11equivalence:
   81|  71.6k|    pub(super) fn bit_width(&self) -> u32 {
   82|  71.6k|        self.root.bit_width
   83|  71.6k|    }
_RNvMs_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB4_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB6_4root7version2V3E3newCskivaWyxXAKd_11equivalence:
   68|  1.25k|    pub fn new(block_store: BS) -> Self {
   69|  1.25k|        Self::new_with_bit_width(block_store, DEFAULT_BIT_WIDTH)
   70|  1.25k|    }
_RNvMs1_NtCsgzY1FyUIwf5_12fvm_ipld_amt3amtINtB5_7AmtImplyRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtNtB7_4root7version2V3E3setCskivaWyxXAKd_11equivalence:
  182|  20.7k|    pub fn set(&mut self, i: u64, val: V) -> Result<(), Error> {
  183|  20.7k|        if i > MAX_INDEX {
  184|      0|            return Err(Error::OutOfRange(i));
  185|  20.7k|        }
  186|       |
  187|  27.9k|        while i >= nodes_for_height(self.bit_width(), self.height() + 1) {
  188|       |            // node at index exists
  189|  7.21k|            if !self.root.node.is_empty() {
  190|  3.64k|                // Parent node for expansion
  191|  3.64k|                let mut new_links: Vec<Option<Link<V>>> = init_sized_vec(self.root.bit_width);
  192|  3.64k|
  193|  3.64k|                // Take root node to be moved down
  194|  3.64k|                let node = std::mem::replace(&mut self.root.node, Node::empty());
  195|  3.64k|
  196|  3.64k|                // Set link to child node being expanded
  197|  3.64k|                new_links[0] = Some(Link::Dirty(Box::new(node)));
  198|  3.64k|
  199|  3.64k|                self.root.node = Node::Link { links: new_links };
  200|  3.64k|            } else {
  201|  3.57k|                // If first expansion is before a value inserted, convert base node to Link
  202|  3.57k|                self.root.node = Node::Link {
  203|  3.57k|                    links: init_sized_vec(self.bit_width()),
  204|  3.57k|                };
  205|  3.57k|            }
  206|       |            // Incrememnt height after each iteration
  207|  7.21k|            self.root.height += 1;
  208|       |        }
  209|       |
  210|  20.7k|        if self
  211|  20.7k|            .root
  212|  20.7k|            .node
  213|  20.7k|            .set(&self.block_store, self.height(), self.bit_width(), i, val)?
  214|  20.7k|            .is_none()
  215|  17.9k|        {
  216|  17.9k|            self.root.count += 1;
  217|  17.9k|        }
  218|       |
  219|       |        // There's no equality constraint on `V` so we could check if the content changed.
  220|  20.7k|        self.flushed_cid = None;
  221|  20.7k|
  222|  20.7k|        Ok(())
  223|  20.7k|    }

_RINvCsgzY1FyUIwf5_12fvm_ipld_amt14init_sized_vecyECskivaWyxXAKd_11equivalence:
   38|  23.6k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   39|  23.6k|    std::iter::repeat_with(|| None)
   40|  23.6k|        .take(1 << bit_width)
   41|  23.6k|        .collect()
   42|  23.6k|}
_RNCINvCsgzY1FyUIwf5_12fvm_ipld_amt14init_sized_vecINtNtB4_4node4LinkyEE0CskivaWyxXAKd_11equivalence:
   39|   573k|    std::iter::repeat_with(|| None)
_RNCINvCsgzY1FyUIwf5_12fvm_ipld_amt14init_sized_vecyE0CskivaWyxXAKd_11equivalence:
   39|   189k|    std::iter::repeat_with(|| None)
_RINvCsgzY1FyUIwf5_12fvm_ipld_amt14init_sized_vecINtNtB2_4node4LinkyEECskivaWyxXAKd_11equivalence:
   38|  71.6k|fn init_sized_vec<V>(bit_width: u32) -> Vec<Option<V>> {
   39|  71.6k|    std::iter::repeat_with(|| None)
   40|  71.6k|        .take(1 << bit_width)
   41|  71.6k|        .collect()
   42|  71.6k|}
_RNvCsgzY1FyUIwf5_12fvm_ipld_amt16nodes_for_height:
   30|   198k|fn nodes_for_height(bit_width: u32, height: u32) -> u64 {
   31|   198k|    let height_log_two = bit_width as u64 * height as u64;
   32|   198k|    if height_log_two >= 64 {
   33|      0|        return std::u64::MAX;
   34|   198k|    }
   35|   198k|    1 << height_log_two
   36|   198k|}
_RNvCsgzY1FyUIwf5_12fvm_ipld_amt10bmap_bytes:
   44|  38.2k|fn bmap_bytes(bit_width: u32) -> usize {
   45|  38.2k|    if bit_width <= 3 {
   46|  38.2k|        1
   47|       |    } else {
   48|      0|        1 << (bit_width - 3)
   49|       |    }
   50|  38.2k|}

_RNCNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapse0CskivaWyxXAKd_11equivalence:
  214|  3.01k|                links.get(0).and_then(|l| l.as_ref()).is_some()
_RNCNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_empty0CskivaWyxXAKd_11equivalence:
  227|  58.4k|            Node::Link { links } => links.iter().all(|l| l.is_none()),
_RNCNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB7_4NodeyE12can_collapses_0CskivaWyxXAKd_11equivalence:
  217|  2.83k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RNCINvXNvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtBa_13CollapsedNodepENtNtCs38SYVtDJ7gI_5serde2de11Deserialize11deserializeINtB5_9___VisitoryENtB1d_7Visitor9visit_seqINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEE0CskivaWyxXAKd_11equivalence:
  120|  38.2k|#[derive(Serialize, Deserialize)]
_RINvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtB5_13CollapsedNodeyENtNtCs38SYVtDJ7gI_5serde2de11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  120|  38.2k|#[derive(Serialize, Deserialize)]
_RINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB6_4NodeyE5flushRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreECskivaWyxXAKd_11equivalence:
  185|  68.8k|        if let Node::Link { links } = self {
  186|  88.9k|            for link in links.iter_mut().flatten() {
  187|       |                // links should only be flushed if the bitmap is set.
  188|  88.9k|                if let Link::Dirty(n) = link {
  189|       |                    // flush sub node to clear caches
  190|  64.4k|                    n.flush(bs)?;
  191|       |
  192|       |                    // Puts node in blockstore and and retrieves it's CID
  193|  64.4k|                    let cid = bs.put_cbor(n, Code::Blake2b256)?;
  194|       |
  195|       |                    // Replace the data with some arbitrary node to move without requiring clone
  196|  64.4k|                    let existing = std::mem::replace(n, Box::new(Node::empty()));
  197|  64.4k|
  198|  64.4k|                    // Can keep the flushed node in link cache
  199|  64.4k|                    let cache = OnceCell::from(existing);
  200|  64.4k|                    *link = Link::Cid { cid, cache };
  201|  24.4k|                }
  202|       |            }
  203|  18.5k|        }
  204|       |
  205|  68.8k|        Ok(())
  206|  68.8k|    }
_RNCNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB7_4NodeyE8is_emptys_0CskivaWyxXAKd_11equivalence:
  228|  20.9k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
_RNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB5_4NodeyE8set_leafCskivaWyxXAKd_11equivalence:
  334|  20.7k|    fn set_leaf(&mut self, i: u64, val: V) -> Option<V> {
  335|  20.7k|        match self {
  336|  20.7k|            Node::Leaf { vals } => {
  337|  20.7k|                let prev = std::mem::replace(
  338|  20.7k|                    vals.get_mut(usize::try_from(i).unwrap()).unwrap(),
  339|  20.7k|                    Some(val),
  340|  20.7k|                );
  341|  20.7k|                prev
  342|       |            }
  343|      0|            Node::Link { .. } => panic!("set_leaf should never be called on a shard of links"),
  344|       |        }
  345|  20.7k|    }
_RNCINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB8_4NodeyE6deleteRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0CskivaWyxXAKd_11equivalence:
  385|  3.63k|                        cache.get_or_try_init(|| {
  386|  3.63k|                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  387|  3.63k|                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  388|  3.63k|                                .expand(bit_width)
  389|  3.63k|                                .map(Box::new)
  390|  3.63k|                        })?;
_RINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB6_4NodeyE3setRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreECskivaWyxXAKd_11equivalence:
  275|   116k|    pub(super) fn set<DB: Blockstore>(
  276|   116k|        &mut self,
  277|   116k|        bs: &DB,
  278|   116k|        height: u32,
  279|   116k|        bit_width: u32,
  280|   116k|        i: u64,
  281|   116k|        val: V,
  282|   116k|    ) -> Result<Option<V>, Error> {
  283|   116k|        if height == 0 {
  284|  20.7k|            return Ok(self.set_leaf(i, val));
  285|  95.7k|        }
  286|  95.7k|
  287|  95.7k|        let nfh = nodes_for_height(bit_width, height);
  288|  95.7k|
  289|  95.7k|        // If dividing by nodes for height should give an index for link in node
  290|  95.7k|        let idx: usize = (i / nfh).try_into().expect("index overflow");
  291|       |
  292|  95.7k|        if let Node::Link { links } = self {
  293|  95.7k|            links[idx] = match &mut links[idx] {
  294|  14.3k|                Some(Link::Cid { cid, cache }) => {
  295|  14.3k|                    let cache_node = std::mem::take(cache);
  296|  14.3k|                    let sub_node = if let Some(sn) = cache_node.into_inner() {
  297|  1.67k|                        sn
  298|       |                    } else {
  299|       |                        // Only retrieve sub node if not found in cache
  300|  12.6k|                        bs.get_cbor::<CollapsedNode<V>>(cid)?
  301|  12.6k|                            .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  302|  12.6k|                            .expand(bit_width)
  303|  12.6k|                            .map(Box::new)?
  304|       |                    };
  305|       |
  306|  14.3k|                    Some(Link::Dirty(sub_node))
  307|       |                }
  308|       |                None => {
  309|  48.3k|                    let node = match height {
  310|  15.9k|                        1 => Node::Leaf {
  311|  15.9k|                            vals: init_sized_vec(bit_width),
  312|  15.9k|                        },
  313|  32.4k|                        _ => Node::Link {
  314|  32.4k|                            links: init_sized_vec(bit_width),
  315|  32.4k|                        },
  316|       |                    };
  317|  48.3k|                    Some(Link::Dirty(Box::new(node)))
  318|       |                }
  319|  33.0k|                Some(Link::Dirty(node)) => {
  320|  33.0k|                    return node.set(bs, height - 1, bit_width, i % nfh, val)
  321|       |                }
  322|       |            };
  323|       |
  324|  62.7k|            if let Some(Link::Dirty(n)) = &mut links[idx] {
  325|  62.7k|                n.set(bs, height - 1, bit_width, i % nfh, val)
  326|       |            } else {
  327|      0|                unreachable!("Value is set as cached")
  328|       |            }
  329|       |        } else {
  330|      0|            unreachable!("should not be handled");
  331|       |        }
  332|   116k|    }
_RNCINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0CskivaWyxXAKd_11equivalence:
  248|  14.2k|                        let cached_node = cache.get_or_try_init(|| {
  249|  14.2k|                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  250|  14.2k|                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  251|  14.2k|                                .expand(bit_width)
  252|  14.2k|                                .map(Box::new)
  253|  14.2k|                        })?;
_RNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB5_4NodeyE8is_emptyCskivaWyxXAKd_11equivalence:
  225|  16.3k|    pub(super) fn is_empty(&self) -> bool {
  226|  16.3k|        match self {
  227|  13.0k|            Node::Link { links } => links.iter().all(|l| l.is_none()),
  228|  3.29k|            Node::Leaf { vals } => vals.iter().all(|l| l.is_none()),
  229|       |        }
  230|  16.3k|    }
_RNCINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0CskivaWyxXAKd_11equivalence:
  246|  19.3k|                match links.get(sub_i).and_then(|v| v.as_ref()) {
_RINvXs2_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB6_4NodeyENtNtCs38SYVtDJ7gI_5serde3ser9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
   85|  68.8k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   86|  68.8k|    where
   87|  68.8k|        S: ser::Serializer,
   88|  68.8k|    {
   89|  68.8k|        match &self {
   90|  18.5k|            Node::Leaf { vals } => {
   91|  18.5k|                let mut values = Vec::<&V>::with_capacity(vals.len());
   92|  18.5k|                let mut bmap = vec![0u8; ((vals.len().saturating_sub(1)) / 8) + 1];
   93|   148k|                for (i, v) in vals.iter().enumerate() {
   94|   148k|                    if let Some(val) = v {
   95|  21.6k|                        values.push(val);
   96|  21.6k|                        bmap[i / 8] |= 1 << (i % 8);
   97|   126k|                    }
   98|       |                }
   99|  18.5k|                (BytesSer(&bmap), Vec::<&Cid>::new(), values).serialize(s)
  100|       |            }
  101|  50.2k|            Node::Link { links } => {
  102|  50.2k|                let mut collapsed = Vec::<&Cid>::with_capacity(links.len());
  103|  50.2k|                let mut bmap = vec![0u8; ((links.len().saturating_sub(1)) / 8) + 1];
  104|   402k|                for (i, v) in links.iter().enumerate() {
  105|   402k|                    if let Some(val) = v {
  106|  88.9k|                        if let Link::Cid { cid, .. } = val {
  107|  88.9k|                            collapsed.push(cid);
  108|  88.9k|                            bmap[i / 8] |= 1 << (i % 8);
  109|  88.9k|                        } else {
  110|      0|                            return Err(ser::Error::custom(Error::Cached));
  111|       |                        }
  112|   313k|                    }
  113|       |                }
  114|  50.2k|                (BytesSer(&bmap), collapsed, Vec::<&V>::new()).serialize(s)
  115|       |            }
  116|       |        }
  117|  68.8k|    }
_RNCNCNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB9_4NodeyE12can_collapses_00CskivaWyxXAKd_11equivalence:
  217|  15.2k|                        .map(|l| l.iter().all(|l| l.is_none()))
_RINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB6_4NodeyE6deleteRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreECskivaWyxXAKd_11equivalence:
  348|  16.3k|    pub(super) fn delete<DB: Blockstore>(
  349|  16.3k|        &mut self,
  350|  16.3k|        bs: &DB,
  351|  16.3k|        height: u32,
  352|  16.3k|        bit_width: u32,
  353|  16.3k|        i: u64,
  354|  16.3k|    ) -> Result<Option<V>, Error> {
  355|  16.3k|        match self {
  356|  2.21k|            Self::Leaf { vals } => Ok(vals
  357|  2.21k|                .get_mut(usize::try_from(i).unwrap())
  358|  2.21k|                .and_then(std::mem::take)),
  359|  14.1k|            Self::Link { links } => {
  360|  14.1k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  361|  14.1k|                    .try_into()
  362|  14.1k|                    .unwrap();
  363|  14.1k|                let (deleted, replace) = match &mut links[sub_i] {
  364|  7.04k|                    Some(Link::Dirty(n)) => {
  365|  7.04k|                        let deleted = n.delete(
  366|  7.04k|                            bs,
  367|  7.04k|                            height - 1,
  368|  7.04k|                            bit_width,
  369|  7.04k|                            i % nodes_for_height(bit_width, height),
  370|  7.04k|                        )?;
  371|  7.04k|                        if deleted.is_none() {
  372|       |                            // Index to be deleted was not found
  373|  2.81k|                            return Ok(None);
  374|  4.22k|                        }
  375|  4.22k|                        if !n.is_empty() {
  376|       |                            // Link node is not empty yet, just return deleted
  377|  2.10k|                            return Ok(deleted);
  378|  2.12k|                        }
  379|  2.12k|
  380|  2.12k|                        // Remove needs to be done outside of the `if let` for memory safety.
  381|  2.12k|                        (deleted, None)
  382|       |                    }
  383|  5.34k|                    Some(Link::Cid { cid, cache }) => {
  384|  5.34k|                        // Take cache, will be replaced if no nodes deleted
  385|  5.34k|                        cache.get_or_try_init(|| {
  386|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  387|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  388|       |                                .expand(bit_width)
  389|       |                                .map(Box::new)
  390|  5.34k|                        })?;
  391|  5.34k|                        let sub_node = cache.get_mut().expect("filled line above");
  392|  5.34k|                        let deleted = sub_node.delete(
  393|  5.34k|                            bs,
  394|  5.34k|                            height - 1,
  395|  5.34k|                            bit_width,
  396|  5.34k|                            i % nodes_for_height(bit_width, height),
  397|  5.34k|                        )?;
  398|  5.34k|                        if deleted.is_none() {
  399|       |                            // Index to be deleted was not found
  400|  2.19k|                            return Ok(None);
  401|  3.14k|                        };
  402|  3.14k|                        let sub_node = std::mem::replace(sub_node, Box::new(Node::empty()));
  403|  3.14k|
  404|  3.14k|                        if sub_node.is_empty() {
  405|       |                            // Sub node is empty, clear link.
  406|  2.05k|                            (deleted, None)
  407|       |                        } else {
  408|       |                            // Link was modified and is now marked dirty.
  409|  1.08k|                            (deleted, Some(Link::Dirty(sub_node)))
  410|       |                        }
  411|       |                    }
  412|       |                    // Link index is empty.
  413|  1.80k|                    None => return Ok(None),
  414|       |                };
  415|       |
  416|  5.26k|                links[sub_i] = replace;
  417|  5.26k|
  418|  5.26k|                Ok(deleted)
  419|       |            }
  420|       |        }
  421|  16.3k|    }
_RNvMs3_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB5_13CollapsedNodeyE6expandCskivaWyxXAKd_11equivalence:
  124|  38.2k|    pub(crate) fn expand(self, bit_width: u32) -> Result<Node<V>, Error> {
  125|  38.2k|        let CollapsedNode(bmap, links, values) = self;
  126|  38.2k|        if !links.is_empty() && !values.is_empty() {
  127|      0|            return Err(Error::LinksAndValues);
  128|  38.2k|        }
  129|  38.2k|
  130|  38.2k|        if bmap_bytes(bit_width) != bmap.len() {
  131|      0|            return Err(anyhow!(
  132|      0|                "expected bitfield of length {}, found bitfield with length {}",
  133|      0|                bmap_bytes(bit_width),
  134|      0|                bmap.len()
  135|      0|            )
  136|      0|            .into());
  137|  38.2k|        }
  138|  38.2k|
  139|  38.2k|        if !links.is_empty() {
  140|  32.0k|            let mut links_iter = links.into_iter();
  141|  32.0k|            let mut links = init_sized_vec::<Link<V>>(bit_width);
  142|   256k|            for (i, v) in links.iter_mut().enumerate() {
  143|   256k|                if bmap[i / 8] & (1 << (i % 8)) != 0 {
  144|  66.2k|                    *v = Some(Link::from(links_iter.next().ok_or_else(|| {
  145|       |                        anyhow!("Bitmap contained more set bits than links provided",)
  146|  66.2k|                    })?))
  147|   189k|                }
  148|       |            }
  149|  32.0k|            if links_iter.next().is_some() {
  150|      0|                return Err(anyhow!("Bitmap contained less set bits than links provided",).into());
  151|  32.0k|            }
  152|  32.0k|            Ok(Node::Link { links })
  153|       |        } else {
  154|  6.27k|            let mut val_iter = values.into_iter();
  155|  6.27k|            let mut vals = init_sized_vec::<V>(bit_width);
  156|  50.2k|            for (i, v) in vals.iter_mut().enumerate() {
  157|  50.2k|                if bmap[i / 8] & (1 << (i % 8)) != 0 {
  158|  8.95k|                    *v = Some(val_iter.next().ok_or_else(|| {
  159|       |                        anyhow!("Bitmap contained more set bits than values provided")
  160|  8.95k|                    })?)
  161|  41.2k|                }
  162|       |            }
  163|  6.27k|            if val_iter.next().is_some() {
  164|      0|                return Err(anyhow!("Bitmap contained less set bits than values provided").into());
  165|  6.27k|            }
  166|  6.27k|            Ok(Node::Leaf { vals })
  167|       |        }
  168|  38.2k|    }
_RINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB6_4NodeyE3getRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreECskivaWyxXAKd_11equivalence:
  233|  22.1k|    pub(super) fn get<DB: Blockstore>(
  234|  22.1k|        &self,
  235|  22.1k|        bs: &DB,
  236|  22.1k|        height: u32,
  237|  22.1k|        bit_width: u32,
  238|  22.1k|        i: u64,
  239|  22.1k|    ) -> Result<Option<&V>, Error> {
  240|  22.1k|        match self {
  241|  2.73k|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
  242|  19.3k|            Node::Link { links, .. } => {
  243|  19.3k|                let sub_i: usize = (i / nodes_for_height(bit_width, height))
  244|  19.3k|                    .try_into()
  245|  19.3k|                    .unwrap();
  246|  19.3k|                match links.get(sub_i).and_then(|v| v.as_ref()) {
  247|  14.9k|                    Some(Link::Cid { cid, cache }) => {
  248|  14.9k|                        let cached_node = cache.get_or_try_init(|| {
  249|       |                            bs.get_cbor::<CollapsedNode<V>>(cid)?
  250|       |                                .ok_or_else(|| Error::CidNotFound(cid.to_string()))?
  251|       |                                .expand(bit_width)
  252|       |                                .map(Box::new)
  253|  14.9k|                        })?;
  254|       |
  255|  14.9k|                        cached_node.get(
  256|  14.9k|                            bs,
  257|  14.9k|                            height - 1,
  258|  14.9k|                            bit_width,
  259|  14.9k|                            i % nodes_for_height(bit_width, height),
  260|  14.9k|                        )
  261|       |                    }
  262|  2.61k|                    Some(Link::Dirty(n)) => n.get(
  263|  2.61k|                        bs,
  264|  2.61k|                        height - 1,
  265|  2.61k|                        bit_width,
  266|  2.61k|                        i % nodes_for_height(bit_width, height),
  267|  2.61k|                    ),
  268|  1.82k|                    None => Ok(None),
  269|       |                }
  270|       |            }
  271|       |        }
  272|  22.1k|    }
_RNCINvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB8_4NodeyE3getRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0CskivaWyxXAKd_11equivalence:
  241|  2.73k|            Node::Leaf { vals, .. } => Ok(vals.get(i as usize).and_then(|v| v.as_ref())),
_RNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB5_4NodeyE5emptyCskivaWyxXAKd_11equivalence:
  177|  72.1k|    pub(super) fn empty() -> Self {
  178|  72.1k|        Node::Leaf {
  179|  72.1k|            vals: Default::default(),
  180|  72.1k|        }
  181|  72.1k|    }
_RNvMs4_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB5_4NodeyE12can_collapseCskivaWyxXAKd_11equivalence:
  210|  3.50k|    pub(super) fn can_collapse(&self) -> bool {
  211|  3.50k|        match self {
  212|  3.01k|            Node::Link { links } => {
  213|  3.01k|                // Check if first index is a link and all other values are empty.
  214|  3.01k|                links.get(0).and_then(|l| l.as_ref()).is_some()
  215|  2.83k|                    && links
  216|  2.83k|                        .get(1..)
  217|  2.83k|                        .map(|l| l.iter().all(|l| l.is_none()))
  218|  2.83k|                        .unwrap_or(true)
  219|       |            }
  220|    490|            Node::Leaf { .. } => false,
  221|       |        }
  222|  3.50k|    }
_RINvXNvXNvXNvNtCsgzY1FyUIwf5_12fvm_ipld_amt4nodes_1__INtBb_13CollapsedNodepENtNtCs38SYVtDJ7gI_5serde2de11Deserialize11deserializeINtB6_9___VisitorpENtB1e_7Visitor9visit_seqINtB3_17___DeserializeWithyEB1c_11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  120|  38.2k|#[derive(Serialize, Deserialize)]
_RNvXs1_NtCsgzY1FyUIwf5_12fvm_ipld_amt4nodeINtB5_4LinkyEINtNtCsinBTLzipKNW_4core7convert4FromINtNtCs6aF0MnpqdVL_3cid3cid3CidKj40_EE4fromCskivaWyxXAKd_11equivalence:
   63|  66.2k|    fn from(cid: Cid) -> Link<V> {
   64|  66.2k|        Link::Cid {
   65|  66.2k|            cid,
   66|  66.2k|            cache: Default::default(),
   67|  66.2k|        }
   68|  66.2k|    }

_RNvMNtCsgzY1FyUIwf5_12fvm_ipld_amt4rootINtB2_8RootImplyNtNtB2_7version2V3E18new_with_bit_widthCskivaWyxXAKd_11equivalence:
   42|  1.25k|    pub(crate) fn new_with_bit_width(bit_width: u32) -> Self {
   43|  1.25k|        Self {
   44|  1.25k|            bit_width,
   45|  1.25k|            count: 0,
   46|  1.25k|            height: 0,
   47|  1.25k|            node: Node::Leaf {
   48|  1.25k|                vals: init_sized_vec(bit_width),
   49|  1.25k|            },
   50|  1.25k|            ver: PhantomData,
   51|  1.25k|        }
   52|  1.25k|    }
_RINvXs_NtCsgzY1FyUIwf5_12fvm_ipld_amt4rootINtB5_8RootImplyNtNtB5_7version2V3ENtNtCs38SYVtDJ7gI_5serde3ser9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
   60|  4.31k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
   61|  4.31k|    where
   62|  4.31k|        S: ser::Serializer,
   63|  4.31k|    {
   64|  4.31k|        match Ver::NUMBER {
   65|       |            // legacy amt v0 doesn't serialize bit_width as DEFAULT_BIT_WIDTH is used.
   66|      0|            0 => (&self.height, &self.count, &self.node).serialize(s),
   67|  4.31k|            3 => (&self.bit_width, &self.height, &self.count, &self.node).serialize(s),
   68|      0|            _ => unreachable!(),
   69|       |        }
   70|  4.31k|    }
_RINvXs0_NtCsgzY1FyUIwf5_12fvm_ipld_amt4rootINtB6_8RootImplyNtNtB6_7version2V3ENtNtCs38SYVtDJ7gI_5serde2de11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
   78|  6.69k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   79|  6.69k|    where
   80|  6.69k|        D: de::Deserializer<'de>,
   81|  6.69k|    {
   82|  6.69k|        match Ver::NUMBER {
   83|       |            3 => {
   84|  6.69k|                let (bit_width, height, count, node): (_, _, _, CollapsedNode<V>) =
   85|  6.69k|                    Deserialize::deserialize(deserializer)?;
   86|       |                Ok(Self {
   87|  6.69k|                    bit_width,
   88|  6.69k|                    height,
   89|  6.69k|                    count,
   90|  6.69k|                    node: node.expand(bit_width).map_err(de::Error::custom)?,
   91|  6.69k|                    ver: PhantomData,
   92|       |                })
   93|       |            }
   94|       |            // legacy amt v0
   95|       |            0 => {
   96|      0|                let (height, count, node): (_, _, CollapsedNode<V>) =
   97|      0|                    Deserialize::deserialize(deserializer)?;
   98|       |                Ok(Self {
   99|       |                    bit_width: DEFAULT_BIT_WIDTH,
  100|      0|                    height,
  101|      0|                    count,
  102|      0|                    node: node.expand(DEFAULT_BIT_WIDTH).map_err(de::Error::custom)?,
  103|      0|                    ver: PhantomData,
  104|       |                })
  105|       |            }
  106|      0|            _ => unreachable!(),
  107|       |        }
  108|  6.69k|    }

_RNvXs_NtCs8aROixYY1Zm_19fvm_ipld_blockstore5blockINtB4_5BlockRINtNtCs3wTdrvaeLle_5alloc3vec3VechEEINtNtCsinBTLzipKNW_4core7convert5AsRefShE6as_refCskivaWyxXAKd_11equivalence:
   42|  68.8k|    fn as_ref(&self) -> &[u8] {
   43|  68.8k|        self.data.as_ref()
   44|  68.8k|    }
_RNvMNtCs8aROixYY1Zm_19fvm_ipld_blockstore5blockINtB2_5BlockRINtNtCs3wTdrvaeLle_5alloc3vec3VechEE3cidCskivaWyxXAKd_11equivalence:
   28|  68.8k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   29|  68.8k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   30|  68.8k|    }

_RINvXs0_Cs8aROixYY1Zm_19fvm_ipld_blockstoreRNtNtB6_6memory16MemoryBlockstoreNtB6_10Blockstore3putRINtNtCs3wTdrvaeLle_5alloc3vec3VechEECskivaWyxXAKd_11equivalence:
  108|  68.8k|                fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  109|  68.8k|                where
  110|  68.8k|                    Self: Sized,
  111|  68.8k|                    D: AsRef<[u8]>,
  112|  68.8k|                {
  113|  68.8k|                    (**self).put(mh_code, block)
  114|  68.8k|                }
_RINvYNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCs3wTdrvaeLle_5alloc3vec3VechEECskivaWyxXAKd_11equivalence:
   40|  68.8k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   41|  68.8k|    where
   42|  68.8k|        Self: Sized,
   43|  68.8k|        D: AsRef<[u8]>,
   44|  68.8k|    {
   45|  68.8k|        let k = block.cid(mh_code);
   46|  68.8k|        self.put_keyed(&k, block.as_ref())?;
   47|  68.8k|        Ok(k)
   48|  68.8k|    }
_RNvXs0_Cs8aROixYY1Zm_19fvm_ipld_blockstoreRNtNtB5_6memory16MemoryBlockstoreNtB5_10Blockstore3getCskivaWyxXAKd_11equivalence:
   96|  38.2k|                fn get(&self, k: &Cid) -> Result<Option<Vec<u8>>> {
   97|  38.2k|                    (**self).get(k)
   98|  38.2k|                }

_RNvXs1_NtCs8aROixYY1Zm_19fvm_ipld_blockstore6memoryNtB5_16MemoryBlockstoreNtNtCsinBTLzipKNW_4core7default7Default7defaultCskivaWyxXAKd_11equivalence:
   11|  1.25k|#[derive(Debug, Default, Clone)]
_RNvXs_NtCs8aROixYY1Zm_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore3get:
   32|  38.2k|    fn get(&self, k: &Cid) -> Result<Option<Vec<u8>>> {
   33|  38.2k|        Ok(self.blocks.borrow().get(k).cloned())
   34|  38.2k|    }
_RNvXs_NtCs8aROixYY1Zm_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   36|  68.8k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   37|  68.8k|        self.blocks.borrow_mut().insert(*k, block.into());
   38|  68.8k|        Ok(())
   39|  68.8k|    }

_RINvXNtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
   35|  68.8k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  68.8k|        where
   37|  68.8k|            S: Serializer,
   38|  68.8k|        {
   39|  68.8k|            serializer.serialize_bytes(self.as_ref())
   40|  68.8k|        }
_RINvXNvNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes1__NtB5_8BytesSerNtNtCs38SYVtDJ7gI_5serde3ser9Serialize9serializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  174|  68.8k|#[derive(serde::Serialize)]
_RINvNtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs3wTdrvaeLle_5alloc3vec3VechEQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
  162|  38.2k|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|  38.2k|    where
  164|  38.2k|        T: Deserialize<'de>,
  165|  38.2k|        D: Deserializer<'de>,
  166|  38.2k|    {
  167|  38.2k|        Deserialize::deserialize(deserializer)
  168|  38.2k|    }
_RINvXNvXs_NtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3wTdrvaeLle_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs38SYVtDJ7gI_5serde2de7Visitor11visit_bytesINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsinBTLzipKNW_4core7convert10InfallibleEECskivaWyxXAKd_11equivalence:
   57|  38.2k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|  38.2k|                where
   59|  38.2k|                    E: Error,
   60|  38.2k|                {
   61|  38.2k|                    Ok(v.into())
   62|  38.2k|                }
_RINvNtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytes9serializeRShQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils9BufWriterEECskivaWyxXAKd_11equivalence:
  154|  68.8k|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|  68.8k|    where
  156|  68.8k|        T: ?Sized + AsRef<[u8]>,
  157|  68.8k|        S: Serializer,
  158|  68.8k|    {
  159|  68.8k|        Serialize::serialize(bytes.as_ref(), serializer)
  160|  68.8k|    }
_RINvXs_NtNtCshKdMHuPzstl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3wTdrvaeLle_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsh3DaB0ai8ai_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaqkjQXFWKrG_7cbor4ii4core5utils11SliceReaderEECskivaWyxXAKd_11equivalence:
   44|  38.2k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|  38.2k|        where
   46|  38.2k|            D: Deserializer<'de>,
   47|  38.2k|        {
   48|  38.2k|            struct VecVisitor;
   49|  38.2k|
   50|  38.2k|            impl<'de> Visitor<'de> for VecVisitor {
   51|  38.2k|                type Value = Vec<u8>;
   52|  38.2k|
   53|  38.2k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|  38.2k|                    formatter.write_str("byte array")
   55|  38.2k|                }
   56|  38.2k|
   57|  38.2k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|  38.2k|                where
   59|  38.2k|                    E: Error,
   60|  38.2k|                {
   61|  38.2k|                    Ok(v.into())
   62|  38.2k|                }
   63|  38.2k|
   64|  38.2k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|  38.2k|                where
   66|  38.2k|                    E: Error,
   67|  38.2k|                {
   68|  38.2k|                    Ok(v)
   69|  38.2k|                }
   70|  38.2k|            }
   71|  38.2k|            deserializer.deserialize_byte_buf(VecVisitor)
   72|  38.2k|        }

_RINvYRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCshKdMHuPzstl_17fvm_ipld_encoding10cbor_store9CborStore8get_cborINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEECskivaWyxXAKd_11equivalence:
   13|  31.5k|    fn get_cbor<T>(&self, cid: &Cid) -> anyhow::Result<Option<T>>
   14|  31.5k|    where
   15|  31.5k|        T: de::DeserializeOwned,
   16|  31.5k|    {
   17|  31.5k|        if !matches!(cid.codec(), CBOR | DAG_CBOR) {
   18|      0|            return Err(anyhow!("{} is not CBOR or DagCBOR", cid.codec()));
   19|  31.5k|        }
   20|  31.5k|        match self.get(cid)? {
   21|  31.5k|            Some(bz) => {
   22|  31.5k|                let res = crate::from_slice(&bz)?;
   23|  31.5k|                Ok(Some(res))
   24|       |            }
   25|      0|            None => Ok(None),
   26|       |        }
   27|  31.5k|    }
_RINvYRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCshKdMHuPzstl_17fvm_ipld_encoding10cbor_store9CborStore8get_cborINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4root8RootImplyNtNtB2f_7version2V3EECskivaWyxXAKd_11equivalence:
   13|  6.69k|    fn get_cbor<T>(&self, cid: &Cid) -> anyhow::Result<Option<T>>
   14|  6.69k|    where
   15|  6.69k|        T: de::DeserializeOwned,
   16|  6.69k|    {
   17|  6.69k|        if !matches!(cid.codec(), CBOR | DAG_CBOR) {
   18|      0|            return Err(anyhow!("{} is not CBOR or DagCBOR", cid.codec()));
   19|  6.69k|        }
   20|  6.69k|        match self.get(cid)? {
   21|  6.69k|            Some(bz) => {
   22|  6.69k|                let res = crate::from_slice(&bz)?;
   23|  6.69k|                Ok(Some(res))
   24|       |            }
   25|      0|            None => Ok(None),
   26|       |        }
   27|  6.69k|    }
_RINvYRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCshKdMHuPzstl_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEECskivaWyxXAKd_11equivalence:
   30|  64.4k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  64.4k|    where
   32|  64.4k|        S: ser::Serialize,
   33|  64.4k|    {
   34|  64.4k|        let bytes = crate::to_vec(obj)?;
   35|  64.4k|        self.put(
   36|  64.4k|            code,
   37|  64.4k|            &Block {
   38|  64.4k|                codec: DAG_CBOR,
   39|  64.4k|                data: &bytes,
   40|  64.4k|            },
   41|  64.4k|        )
   42|  64.4k|    }
_RINvYRNtNtCs8aROixYY1Zm_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCshKdMHuPzstl_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4root8RootImplyNtNtB2f_7version2V3EECskivaWyxXAKd_11equivalence:
   30|  4.31k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  4.31k|    where
   32|  4.31k|        S: ser::Serialize,
   33|  4.31k|    {
   34|  4.31k|        let bytes = crate::to_vec(obj)?;
   35|  4.31k|        self.put(
   36|  4.31k|            code,
   37|  4.31k|            &Block {
   38|  4.31k|                codec: DAG_CBOR,
   39|  4.31k|                data: &bytes,
   40|  4.31k|            },
   41|  4.31k|        )
   42|  4.31k|    }

_RINvCshKdMHuPzstl_17fvm_ipld_encoding10from_sliceINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4root8RootImplyNtNtBO_7version2V3EECskivaWyxXAKd_11equivalence:
   61|  6.69k|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|  6.69k|where
   63|  6.69k|    T: de::Deserialize<'a>,
   64|  6.69k|{
   65|  6.69k|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|  6.69k|}
_RINvCshKdMHuPzstl_17fvm_ipld_encoding6to_vecINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4root8RootImplyNtNtBJ_7version2V3EECskivaWyxXAKd_11equivalence:
   44|  4.31k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  4.31k|where
   46|  4.31k|    T: ser::Serialize + ?Sized,
   47|  4.31k|{
   48|  4.31k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  4.31k|}
_RINvCshKdMHuPzstl_17fvm_ipld_encoding10from_sliceINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node13CollapsedNodeyEECskivaWyxXAKd_11equivalence:
   61|  31.5k|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|  31.5k|where
   63|  31.5k|    T: de::Deserialize<'a>,
   64|  31.5k|{
   65|  31.5k|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|  31.5k|}
_RINvCshKdMHuPzstl_17fvm_ipld_encoding6to_vecINtNtCs3wTdrvaeLle_5alloc5boxed3BoxINtNtCsgzY1FyUIwf5_12fvm_ipld_amt4node4NodeyEEECskivaWyxXAKd_11equivalence:
   44|  64.4k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  64.4k|where
   46|  64.4k|    T: ser::Serialize + ?Sized,
   47|  64.4k|{
   48|  64.4k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  64.4k|}

