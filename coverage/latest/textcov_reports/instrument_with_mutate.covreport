_RNvXsI_Csd9kOJgdVVW8_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|     14|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|     14|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|     14|                    u.fill_buffer(&mut buf)?;
  312|     14|                    let mut x: $unsigned = 0;
  313|    112|                    for i in 0..mem::size_of::<$ty>() {
  314|    112|                        x |= buf[i] as $unsigned << (i * 8);
  315|    112|                    }
  316|     14|                    Ok(x as $ty)
  317|     14|                }

_RINvMNtCsd9kOJgdVVW8_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryyECs2kBtuMlVFYP_22instrument_with_mutate:
  167|     14|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|     14|    where
  169|     14|        A: Arbitrary<'a>,
  170|     14|    {
  171|     14|        <A as Arbitrary<'a>>::arbitrary(self)
  172|     14|    }
_RNvMNtCsd9kOJgdVVW8_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|     14|    pub fn new(data: &'a [u8]) -> Self {
   86|     14|        Unstructured { data }
   87|     14|    }
_RNvMNtCsd9kOJgdVVW8_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|     14|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|     14|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|     14|        }
  454|     14|        let idx = self.int_in_range(0..=len - 1)?;
  455|     14|        Ok(idx)
  456|     14|    }
_RNvXs6_NtCsd9kOJgdVVW8_9arbitrary12unstructuredjNtB5_3Int10from_usize:
  840|     28|                fn from_usize(u: usize) -> Self {
  841|     28|                    u as Self
  842|     28|                }
_RNvMNtCsd9kOJgdVVW8_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|     14|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|     14|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|     14|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|     14|        for byte in buffer[n..].iter_mut() {
  525|      0|            *byte = 0;
  526|      0|        }
  527|     14|        self.data = &self.data[n..];
  528|     14|        Ok(())
  529|     14|    }
_RNvXs6_NtCsd9kOJgdVVW8_9arbitrary12unstructuredjNtB5_3Int13from_unsigned:
  860|     14|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|     14|                    unsigned as Self
  862|     14|                }
_RINvMNtCsd9kOJgdVVW8_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs5WR7bNNc6DX_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|     14|    fn int_in_range_impl<T>(
  303|     14|        range: ops::RangeInclusive<T>,
  304|     14|        mut bytes: impl Iterator<Item = u8>,
  305|     14|    ) -> Result<(T, usize)>
  306|     14|    where
  307|     14|        T: Int,
  308|     14|    {
  309|     14|        let start = *range.start();
  310|     14|        let end = *range.end();
  311|     14|        assert!(
  312|     14|            start <= end,
  313|     14|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|     14|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|     14|        if start == end {
  319|      0|            return Ok((start, 0));
  320|     14|        }
  321|     14|
  322|     14|        // From here on out we work with the unsigned representation. All of the
  323|     14|        // operations performed below work out just as well whether or not `T`
  324|     14|        // is a signed or unsigned integer.
  325|     14|        let start = start.to_unsigned();
  326|     14|        let end = end.to_unsigned();
  327|     14|
  328|     14|        let delta = end.wrapping_sub(start);
  329|     14|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|     14|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|     14|        let mut bytes_consumed: usize = 0;
  337|       |
  338|     28|        while (bytes_consumed < mem::size_of::<T>())
  339|     28|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|     14|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|     14|                Some(b) => b,
  344|     14|            };
  345|     14|            bytes_consumed += 1;
  346|     14|
  347|     14|            // Combine this byte into our arbitrary integer, but avoid
  348|     14|            // overflowing the shift for `u8` and `i8`.
  349|     14|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|     14|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|     14|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|     14|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|     14|        let result = start.wrapping_add(offset);
  365|     14|
  366|     14|        // And convert back to our maybe-signed representation.
  367|     14|        let result = T::from_unsigned(result);
  368|     14|        debug_assert!(*range.start() <= result);
  369|     14|        debug_assert!(result <= *range.end());
  370|       |
  371|     14|        Ok((result, bytes_consumed))
  372|     14|    }
_RINvMNtCsd9kOJgdVVW8_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|     14|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|     14|    where
  295|     14|        T: Int,
  296|     14|    {
  297|     14|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|     14|        self.data = &self.data[bytes_consumed..];
  299|     14|        Ok(result)
  300|     14|    }
_RNvXs6_NtCsd9kOJgdVVW8_9arbitrary12unstructuredjNtB5_3Int11to_unsigned:
  856|     28|                fn to_unsigned(self) -> Self::Unsigned {
  857|     28|                    self as $unsigned_ty
  858|     28|                }
_RNvXs6_NtCsd9kOJgdVVW8_9arbitrary12unstructuredjNtB5_3Int7from_u8:
  836|     14|                fn from_u8(b: u8) -> Self {
  837|     14|                    b as Self
  838|     14|                }
_RNvXs6_NtCsd9kOJgdVVW8_9arbitrary12unstructuredjNtB5_3Int12wrapping_sub:
  852|     14|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|     14|                    <$ty>::wrapping_sub(self, rhs)
  854|     14|                }
_RNvXs6_NtCsd9kOJgdVVW8_9arbitrary12unstructuredjNtB5_3Int12wrapping_add:
  848|     14|                fn wrapping_add(self, rhs: Self) -> Self {
  849|     14|                    <$ty>::wrapping_add(self, rhs)
  850|     14|                }
_RNvXs6_NtCsd9kOJgdVVW8_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  844|     14|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|     14|                    <$ty>::checked_add(self, rhs)
  846|     14|                }

_RNvCs6qahYSY9jA_4atty2is:
   40|     14|pub fn is(stream: Stream) -> bool {
   41|       |    extern crate libc;
   42|       |
   43|     14|    let fd = match stream {
   44|      0|        Stream::Stdout => libc::STDOUT_FILENO,
   45|     14|        Stream::Stderr => libc::STDERR_FILENO,
   46|      0|        Stream::Stdin => libc::STDIN_FILENO,
   47|       |    };
   48|     14|    unsafe { libc::isatty(fd) != 0 }
   49|     14|}

_RNCNCNvMs_NtCscLpLRMpPKB6_10env_logger6filterNtB8_7Builder5builds_00Ba_:
  249|     73|                let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);
_RNCNvNtCscLpLRMpPKB6_10env_logger6filter10parse_spec0B5_:
  307|     56|        for s in m.split(',').map(|ss| ss.trim()) {
_RNCNCNvMs_NtCscLpLRMpPKB6_10env_logger6filterNtB8_7Builder5builds_0s_0Ba_:
  250|     73|                let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);
_RNvMNtCscLpLRMpPKB6_10env_logger6filterNtB2_6Filter7enabled:
  163|    111|    pub fn enabled(&self, metadata: &Metadata) -> bool {
  164|    111|        let level = metadata.level();
  165|    111|        let target = metadata.target();
  166|    111|
  167|    111|        enabled(&self.directives, level, target)
  168|    111|    }
_RNvMNtCscLpLRMpPKB6_10env_logger6filterNtB2_6Filter7matches:
  148|    111|    pub fn matches(&self, record: &Record) -> bool {
  149|    111|        if !self.enabled(record.metadata()) {
  150|     13|            return false;
  151|     98|        }
  152|       |
  153|     98|        if let Some(filter) = self.filter.as_ref() {
  154|      0|            if !filter.is_match(&record.args().to_string()) {
  155|      0|                return false;
  156|      0|            }
  157|     98|        }
  158|       |
  159|     98|        true
  160|    111|    }
_RNCNvMNtCscLpLRMpPKB6_10env_logger6filterNtB4_6Filter6filter0B6_:
  142|     56|            .map(|d| d.level)
_RNCNvMs_NtCscLpLRMpPKB6_10env_logger6filterNtB6_7Builder5build0B8_:
  244|     56|                .map(|(name, level)| Directive { name, level })
_RNvMs_NtCscLpLRMpPKB6_10env_logger6filterNtB4_7Builder5parse:
  216|     14|    pub fn parse(&mut self, filters: &str) -> &mut Self {
  217|     14|        let (directives, filter) = parse_spec(filters);
  218|     14|
  219|     14|        self.filter = filter;
  220|       |
  221|     70|        for directive in directives {
  222|     56|            self.directives.insert(directive.name, directive.level);
  223|     56|        }
  224|     14|        self
  225|     14|    }
_RNCNvMs_NtCscLpLRMpPKB6_10env_logger6filterNtB6_7Builder5builds_0B8_:
  248|     73|            directives.sort_by(|a, b| {
  249|     73|                let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);
  250|     73|                let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);
  251|     73|                alen.cmp(&blen)
  252|     73|            });
_RNvMNtCscLpLRMpPKB6_10env_logger6filterNtB2_6Filter6filter:
  139|     14|    pub fn filter(&self) -> LevelFilter {
  140|     14|        self.directives
  141|     14|            .iter()
  142|     14|            .map(|d| d.level)
  143|     14|            .max()
  144|     14|            .unwrap_or(LevelFilter::Off)
  145|     14|    }
_RNvMs_NtCscLpLRMpPKB6_10env_logger6filterNtB4_7Builder5build:
  228|     14|    pub fn build(&mut self) -> Filter {
  229|     14|        assert!(!self.built, "attempt to re-use consumed builder");
  230|     14|        self.built = true;
  231|     14|
  232|     14|        let mut directives = Vec::new();
  233|     14|        if self.directives.is_empty() {
  234|      0|            // Adds the default filter if none exist
  235|      0|            directives.push(Directive {
  236|      0|                name: None,
  237|      0|                level: LevelFilter::Error,
  238|      0|            });
  239|     14|        } else {
  240|     14|            // Consume map of directives.
  241|     14|            let directives_map = mem::take(&mut self.directives);
  242|     14|            directives = directives_map
  243|     14|                .into_iter()
  244|     14|                .map(|(name, level)| Directive { name, level })
  245|     14|                .collect();
  246|     14|            // Sort the directives by length of their name, this allows a
  247|     14|            // little more efficient lookup at runtime.
  248|     14|            directives.sort_by(|a, b| {
  249|       |                let alen = a.name.as_ref().map(|a| a.len()).unwrap_or(0);
  250|       |                let blen = b.name.as_ref().map(|b| b.len()).unwrap_or(0);
  251|       |                alen.cmp(&blen)
  252|     14|            });
  253|     14|        }
  254|       |
  255|     14|        Filter {
  256|     14|            directives: mem::take(&mut directives),
  257|     14|            filter: mem::replace(&mut self.filter, None),
  258|     14|        }
  259|     14|    }
_RNCNvNtCscLpLRMpPKB6_10env_logger6filter10parse_specs0_0B5_:
  344|     56|                name: name.map(|s| s.to_string()),
_RNCNvNtCscLpLRMpPKB6_10env_logger6filter10parse_specs_0B5_:
  313|     28|                match (parts.next(), parts.next().map(|s| s.trim()), parts.next()) {
_RNvNtCscLpLRMpPKB6_10env_logger6filter10parse_spec:
  292|     14|fn parse_spec(spec: &str) -> (Vec<Directive>, Option<inner::Filter>) {
  293|     14|    let mut dirs = Vec::new();
  294|     14|
  295|     14|    let mut parts = spec.split('/');
  296|     14|    let mods = parts.next();
  297|     14|    let filter = parts.next();
  298|     14|    if parts.next().is_some() {
  299|      0|        eprintln!(
  300|      0|            "warning: invalid logging spec '{}', \
  301|      0|             ignoring it (too many '/'s)",
  302|      0|            spec
  303|      0|        );
  304|      0|        return (dirs, None);
  305|     14|    }
  306|     14|    if let Some(m) = mods {
  307|     56|        for s in m.split(',').map(|ss| ss.trim()) {
  308|     56|            if s.is_empty() {
  309|      0|                continue;
  310|     56|            }
  311|     56|            let mut parts = s.split('=');
  312|     56|            let (log_level, name) =
  313|     56|                match (parts.next(), parts.next().map(|s| s.trim()), parts.next()) {
  314|     28|                    (Some(part0), None, None) => {
  315|     28|                        // if the single argument is a log-level string or number,
  316|     28|                        // treat that as a global fallback
  317|     28|                        match part0.parse() {
  318|      0|                            Ok(num) => (num, None),
  319|     28|                            Err(_) => (LevelFilter::max(), Some(part0)),
  320|       |                        }
  321|       |                    }
  322|     28|                    (Some(part0), Some(""), None) => (LevelFilter::max(), Some(part0)),
  323|     28|                    (Some(part0), Some(part1), None) => match part1.parse() {
  324|     28|                        Ok(num) => (num, Some(part0)),
  325|       |                        _ => {
  326|      0|                            eprintln!(
  327|      0|                                "warning: invalid logging spec '{}', \
  328|      0|                                 ignoring it",
  329|      0|                                part1
  330|      0|                            );
  331|      0|                            continue;
  332|       |                        }
  333|       |                    },
  334|       |                    _ => {
  335|      0|                        eprintln!(
  336|      0|                            "warning: invalid logging spec '{}', \
  337|      0|                             ignoring it",
  338|      0|                            s
  339|      0|                        );
  340|      0|                        continue;
  341|       |                    }
  342|       |                };
  343|     56|            dirs.push(Directive {
  344|     56|                name: name.map(|s| s.to_string()),
  345|     56|                level: log_level,
  346|     56|            });
  347|       |        }
  348|      0|    }
  349|       |
  350|     14|    let filter = filter.and_then(|filter| match inner::Filter::new(filter) {
  351|       |        Ok(re) => Some(re),
  352|       |        Err(e) => {
  353|       |            eprintln!("warning: invalid regex filter - {}", e);
  354|       |            None
  355|       |        }
  356|     14|    });
  357|     14|
  358|     14|    (dirs, filter)
  359|     14|}
_RNvXs0_NtCscLpLRMpPKB6_10env_logger6filterNtB5_7BuilderNtNtCs5WR7bNNc6DX_4core7default7Default7default:
  263|     14|    fn default() -> Self {
  264|     14|        Builder::new()
  265|     14|    }
_RNvMs_NtCscLpLRMpPKB6_10env_logger6filterNtB4_7Builder3new:
  173|     14|    pub fn new() -> Builder {
  174|     14|        Builder {
  175|     14|            directives: HashMap::new(),
  176|     14|            filter: None,
  177|     14|            built: false,
  178|     14|        }
  179|     14|    }
_RNvNtCscLpLRMpPKB6_10env_logger6filter7enabled:
  362|    111|fn enabled(directives: &[Directive], level: Level, target: &str) -> bool {
  363|       |    // Search for the longest match, the vector is assumed to be pre-sorted.
  364|    248|    for directive in directives.iter().rev() {
  365|    248|        match directive.name {
  366|    248|            Some(ref name) if !target.starts_with(&**name) => {}
  367|     98|            Some(..) | None => return level <= directive.level,
  368|       |        }
  369|       |    }
  370|     13|    false
  371|    111|}

_RNvMNtNtNtCscLpLRMpPKB6_10env_logger3fmt9humantime3impNtB6_9Formatter17timestamp_seconds:
   43|     98|    pub fn timestamp_seconds(&self) -> Timestamp {
   44|     98|        Timestamp {
   45|     98|            time: SystemTime::now(),
   46|     98|            precision: TimestampPrecision::Seconds,
   47|     98|        }
   48|     98|    }
_RNvXs0_NtNtNtCscLpLRMpPKB6_10env_logger3fmt9humantime3impNtB5_9TimestampNtNtCs5WR7bNNc6DX_4core3fmt7Display3fmt:
  108|     98|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  109|     98|        let formatter = match self.precision {
  110|     98|            TimestampPrecision::Seconds => format_rfc3339_seconds,
  111|      0|            TimestampPrecision::Millis => format_rfc3339_millis,
  112|      0|            TimestampPrecision::Micros => format_rfc3339_micros,
  113|      0|            TimestampPrecision::Nanos => format_rfc3339_nanos,
  114|       |        };
  115|       |
  116|     98|        formatter(self.time).fmt(f)
  117|     98|    }

_RINvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB6_13DefaultFormat18write_header_valueReEB8_:
  251|     98|    fn write_header_value<T>(&mut self, value: T) -> io::Result<()>
  252|     98|    where
  253|     98|        T: Display,
  254|     98|    {
  255|     98|        if !self.written_header_value {
  256|      0|            self.written_header_value = true;
  257|      0|
  258|      0|            let open_brace = self.subtle_style("[");
  259|      0|            write!(self.buf, "{}{}", open_brace, value)
  260|       |        } else {
  261|     98|            write!(self.buf, " {}", value)
  262|       |        }
  263|     98|    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat12subtle_style:
  235|    196|    fn subtle_style(&self, text: &'static str) -> SubtleStyle {
  236|    196|        #[cfg(feature = "termcolor")]
  237|    196|        {
  238|    196|            self.buf
  239|    196|                .style()
  240|    196|                .set_color(Color::Black)
  241|    196|                .set_intense(true)
  242|    196|                .clone()
  243|    196|                .into_value(text)
  244|    196|        }
  245|    196|        #[cfg(not(feature = "termcolor"))]
  246|    196|        {
  247|    196|            text
  248|    196|        }
  249|    196|    }
_RNvMs_NtCscLpLRMpPKB6_10env_logger3fmtNtB4_9Formatter11write_style:
  110|     97|    pub(crate) fn write_style(&self) -> WriteStyle {
  111|     97|        self.write_style
  112|     97|    }
_RNvXs0_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_9FormatterNtNtCsjpHxcvnKPj0_3std2io5Write5write:
  124|  1.89k|    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  125|  1.89k|        self.buf.borrow_mut().write(buf)
  126|  1.89k|    }
_RINvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB6_13DefaultFormat18write_header_valueNtNtCs5WR7bNNc6DX_4core3fmt9ArgumentsEB8_:
  251|     98|    fn write_header_value<T>(&mut self, value: T) -> io::Result<()>
  252|     98|    where
  253|     98|        T: Display,
  254|     98|    {
  255|     98|        if !self.written_header_value {
  256|      0|            self.written_header_value = true;
  257|      0|
  258|      0|            let open_brace = self.subtle_style("[");
  259|      0|            write!(self.buf, "{}{}", open_brace, value)
  260|       |        } else {
  261|     98|            write!(self.buf, " {}", value)
  262|       |        }
  263|     98|    }
_RNvMs_NtCscLpLRMpPKB6_10env_logger3fmtNtB4_9Formatter5clear:
  118|     98|    pub(crate) fn clear(&mut self) {
  119|     98|        self.buf.borrow_mut().clear()
  120|     98|    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat10write_args:
  339|     98|    fn write_args(&mut self, record: &Record) -> io::Result<()> {
  340|     98|        match self.indent {
  341|       |            // Fast path for no indentation
  342|      0|            None => write!(self.buf, "{}{}", record.args(), self.suffix),
  343|       |
  344|     98|            Some(indent_count) => {
  345|     98|                // Create a wrapper around the buffer only if we have to actually indent the message
  346|     98|
  347|     98|                struct IndentWrapper<'a, 'b: 'a> {
  348|     98|                    fmt: &'a mut DefaultFormat<'b>,
  349|     98|                    indent_count: usize,
  350|     98|                }
  351|     98|
  352|     98|                impl<'a, 'b> Write for IndentWrapper<'a, 'b> {
  353|     98|                    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  354|     98|                        let mut first = true;
  355|     98|                        for chunk in buf.split(|&x| x == b'\n') {
  356|     98|                            if !first {
  357|     98|                                write!(
  358|     98|                                    self.fmt.buf,
  359|     98|                                    "{}{:width$}",
  360|     98|                                    self.fmt.suffix,
  361|     98|                                    "",
  362|     98|                                    width = self.indent_count
  363|     98|                                )?;
  364|     98|                            }
  365|     98|                            self.fmt.buf.write_all(chunk)?;
  366|     98|                            first = false;
  367|     98|                        }
  368|     98|
  369|     98|                        Ok(buf.len())
  370|     98|                    }
  371|     98|
  372|     98|                    fn flush(&mut self) -> io::Result<()> {
  373|     98|                        self.fmt.buf.flush()
  374|     98|                    }
  375|     98|                }
  376|     98|
  377|     98|                // The explicit scope here is just to make older versions of Rust happy
  378|     98|                {
  379|     98|                    let mut wrapper = IndentWrapper {
  380|     98|                        fmt: self,
  381|     98|                        indent_count,
  382|     98|                    };
  383|     98|                    write!(wrapper, "{}", record.args())?;
  384|       |                }
  385|       |
  386|     98|                write!(self.buf, "{}", self.suffix)?;
  387|       |
  388|     98|                Ok(())
  389|       |            }
  390|       |        }
  391|     98|    }
_RNvXNtCscLpLRMpPKB6_10env_logger3fmtNtB2_18TimestampPrecisionNtNtCs5WR7bNNc6DX_4core7default7Default7default:
   71|     28|    fn default() -> Self {
   72|     28|        TimestampPrecision::Seconds
   73|     28|    }
_RNCNvMs3_NtCscLpLRMpPKB6_10env_logger3fmtNtB7_7Builder5build0B9_:
  187|     98|            Box::new(move |buf, record| {
  188|     98|                let fmt = DefaultFormat {
  189|     98|                    timestamp: built.format_timestamp,
  190|     98|                    module_path: built.format_module_path,
  191|     98|                    target: built.format_target,
  192|     98|                    level: built.format_level,
  193|     98|                    written_header_value: false,
  194|     98|                    indent: built.format_indent,
  195|     98|                    suffix: built.format_suffix,
  196|     98|                    buf,
  197|     98|                };
  198|     98|
  199|     98|                fmt.write(record)
  200|     98|            })
_RNvMs_NtCscLpLRMpPKB6_10env_logger3fmtNtB4_9Formatter3new:
  103|      1|    pub(crate) fn new(writer: &Writer) -> Self {
  104|      1|        Formatter {
  105|      1|            buf: Rc::new(RefCell::new(writer.buffer())),
  106|      1|            write_style: writer.write_style(),
  107|      1|        }
  108|      1|    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat5write:
  226|     98|        self.write_timestamp()?;
  227|     98|        self.write_level(record)?;
  228|     98|        self.write_module_path(record)?;
  229|     98|        self.write_target(record)?;
  230|     98|        self.finish_header()?;
  231|       |
  232|     98|        self.write_args(record)
  233|     98|    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat12write_target:
  319|     98|    fn write_target(&mut self, record: &Record) -> io::Result<()> {
  320|     98|        if !self.target {
  321|      0|            return Ok(());
  322|     98|        }
  323|     98|
  324|     98|        match record.target() {
  325|     98|            "" => Ok(()),
  326|     98|            target => self.write_header_value(target),
  327|       |        }
  328|     98|    }
_RINvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB6_13DefaultFormat18write_header_valueNtNtNtB6_9humantime3imp9TimestampEB8_:
  251|     98|    fn write_header_value<T>(&mut self, value: T) -> io::Result<()>
  252|     98|    where
  253|     98|        T: Display,
  254|     98|    {
  255|     98|        if !self.written_header_value {
  256|     98|            self.written_header_value = true;
  257|     98|
  258|     98|            let open_brace = self.subtle_style("[");
  259|     98|            write!(self.buf, "{}{}", open_brace, value)
  260|       |        } else {
  261|      0|            write!(self.buf, " {}", value)
  262|       |        }
  263|     98|    }
_RNvMs3_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_7Builder5build:
  173|     14|    pub fn build(&mut self) -> FormatFn {
  174|     14|        assert!(!self.built, "attempt to re-use consumed builder");
  175|       |
  176|     14|        let built = mem::replace(
  177|     14|            self,
  178|     14|            Builder {
  179|     14|                built: true,
  180|     14|                ..Default::default()
  181|     14|            },
  182|     14|        );
  183|       |
  184|     14|        if let Some(fmt) = built.custom_format {
  185|      0|            fmt
  186|       |        } else {
  187|     14|            Box::new(move |buf, record| {
  188|       |                let fmt = DefaultFormat {
  189|       |                    timestamp: built.format_timestamp,
  190|       |                    module_path: built.format_module_path,
  191|       |                    target: built.format_target,
  192|       |                    level: built.format_level,
  193|       |                    written_header_value: false,
  194|       |                    indent: built.format_indent,
  195|       |                    suffix: built.format_suffix,
  196|       |                    buf,
  197|       |                };
  198|       |
  199|       |                fmt.write(record)
  200|     14|            })
  201|       |        }
  202|     14|    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat15write_timestamp:
  284|     98|    fn write_timestamp(&mut self) -> io::Result<()> {
  285|       |        #[cfg(feature = "humantime")]
  286|       |        {
  287|       |            use self::TimestampPrecision::*;
  288|     98|            let ts = match self.timestamp {
  289|      0|                None => return Ok(()),
  290|     98|                Some(Seconds) => self.buf.timestamp_seconds(),
  291|      0|                Some(Millis) => self.buf.timestamp_millis(),
  292|      0|                Some(Micros) => self.buf.timestamp_micros(),
  293|      0|                Some(Nanos) => self.buf.timestamp_nanos(),
  294|       |            };
  295|       |
  296|     98|            self.write_header_value(ts)
  297|       |        }
  298|       |        #[cfg(not(feature = "humantime"))]
  299|       |        {
  300|       |            // Trick the compiler to think we have used self.timestamp
  301|       |            // Workaround for "field is never used: `timestamp`" compiler nag.
  302|       |            let _ = self.timestamp;
  303|       |            Ok(())
  304|       |        }
  305|     98|    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat13finish_header:
  330|     98|    fn finish_header(&mut self) -> io::Result<()> {
  331|     98|        if self.written_header_value {
  332|     98|            let close_brace = self.subtle_style("]");
  333|     98|            write!(self.buf, "{} ", close_brace)
  334|       |        } else {
  335|      0|            Ok(())
  336|       |        }
  337|     98|    }
_RNCNvXNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtBa_13DefaultFormat10write_argsNtB4_13IndentWrapperNtNtCsjpHxcvnKPj0_3std2io5Write5write0Bc_:
  355|  7.36k|                        for chunk in buf.split(|&x| x == b'\n') {
_RNvXs2_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_7BuilderNtNtCs5WR7bNNc6DX_4core7default7Default7default:
  153|     28|    fn default() -> Self {
  154|     28|        Builder {
  155|     28|            format_timestamp: Some(Default::default()),
  156|     28|            format_module_path: false,
  157|     28|            format_target: true,
  158|     28|            format_level: true,
  159|     28|            format_indent: Some(4),
  160|     28|            custom_format: None,
  161|     28|            format_suffix: "\n",
  162|     28|            built: false,
  163|     28|        }
  164|     28|    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat17write_module_path:
  307|     98|    fn write_module_path(&mut self, record: &Record) -> io::Result<()> {
  308|     98|        if !self.module_path {
  309|     98|            return Ok(());
  310|      0|        }
  311|       |
  312|      0|        if let Some(module_path) = record.module_path() {
  313|      0|            self.write_header_value(module_path)
  314|       |        } else {
  315|      0|            Ok(())
  316|       |        }
  317|     98|    }
_RNvMs_NtCscLpLRMpPKB6_10env_logger3fmtNtB4_9Formatter5print:
  114|     98|    pub(crate) fn print(&self, writer: &Writer) -> io::Result<()> {
  115|     98|        writer.print(&self.buf.borrow())
  116|     98|    }
_RNvXNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB8_13DefaultFormat10write_argsNtB2_13IndentWrapperNtNtCsjpHxcvnKPj0_3std2io5Write5write:
  353|  1.01k|                    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  354|  1.01k|                        let mut first = true;
  355|  1.01k|                        for chunk in buf.split(|&x| x == b'\n') {
  356|  1.01k|                            if !first {
  357|      0|                                write!(
  358|      0|                                    self.fmt.buf,
  359|      0|                                    "{}{:width$}",
  360|      0|                                    self.fmt.suffix,
  361|      0|                                    "",
  362|      0|                                    width = self.indent_count
  363|      0|                                )?;
  364|  1.01k|                            }
  365|  1.01k|                            self.fmt.buf.write_all(chunk)?;
  366|  1.01k|                            first = false;
  367|       |                        }
  368|       |
  369|  1.01k|                        Ok(buf.len())
  370|  1.01k|                    }
_RNvMs4_NtCscLpLRMpPKB6_10env_logger3fmtNtB5_13DefaultFormat11write_level:
  265|     98|    fn write_level(&mut self, record: &Record) -> io::Result<()> {
  266|     98|        if !self.level {
  267|      0|            return Ok(());
  268|     98|        }
  269|     98|
  270|     98|        let level = {
  271|     98|            #[cfg(feature = "termcolor")]
  272|     98|            {
  273|     98|                self.buf.default_styled_level(record.level())
  274|     98|            }
  275|     98|            #[cfg(not(feature = "termcolor"))]
  276|     98|            {
  277|     98|                record.level()
  278|     98|            }
  279|     98|        };
  280|     98|
  281|     98|        self.write_header_value(format_args!("{:<5}", level))
  282|     98|    }

_RNvNtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer4atty3imp9is_stderr:
   16|     14|    pub(in crate::fmt) fn is_stderr() -> bool {
   17|     14|        atty::is(atty::Stream::Stderr)
   18|     14|    }

_RNvMs5_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_7Builder3new:
  137|     14|    pub(crate) fn new() -> Self {
  138|     14|        Builder {
  139|     14|            target: Default::default(),
  140|     14|            write_style: Default::default(),
  141|     14|            is_test: false,
  142|     14|            built: false,
  143|     14|        }
  144|     14|    }
_RNvXs1_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_14WritableTargetNtNtCs5WR7bNNc6DX_4core7default7Default7default:
   69|     28|    fn default() -> Self {
   70|     28|        Self::from(Target::default())
   71|     28|    }
_RNvXNtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB2_6TargetNtNtCs5WR7bNNc6DX_4core7default7Default7default:
   27|     28|    fn default() -> Self {
   28|     28|        Target::Stderr
   29|     28|    }
_RNvMs4_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_6Writer6buffer:
  115|      1|    pub(super) fn buffer(&self) -> Buffer {
  116|      1|        self.inner.buffer()
  117|      1|    }
_RNvMs4_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_6Writer11write_style:
  111|     98|    pub fn write_style(&self) -> WriteStyle {
  112|     98|        self.write_style
  113|     98|    }
_RNvXs3_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_10WriteStyleNtNtCs5WR7bNNc6DX_4core7default7Default7default:
   99|     14|    fn default() -> Self {
  100|     14|        WriteStyle::Auto
  101|     14|    }
_RNvMs4_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_6Writer5print:
  119|     98|    pub(super) fn print(&self, buf: &Buffer) -> io::Result<()> {
  120|     98|        self.inner.print(buf)
  121|     98|    }
_RNvXsf_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_10WriteStyleNtNtCs5WR7bNNc6DX_4core3cmp9PartialEq2eq:
   88|     97|#[derive(Clone, Copy, Debug, Eq, Hash, PartialEq)]
_RNvXs6_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_7BuilderNtNtCs5WR7bNNc6DX_4core7default7Default7default:
  207|     14|    fn default() -> Self {
  208|     14|        Builder::new()
  209|     14|    }
_RNvMs5_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_7Builder5build:
  174|     14|    pub(crate) fn build(&mut self) -> Writer {
  175|     14|        assert!(!self.built, "attempt to re-use consumed builder");
  176|     14|        self.built = true;
  177|       |
  178|     14|        let color_choice = match self.write_style {
  179|       |            WriteStyle::Auto => {
  180|     14|                if match &self.target {
  181|     14|                    WritableTarget::Stderr => is_stderr(),
  182|      0|                    WritableTarget::Stdout => is_stdout(),
  183|      0|                    WritableTarget::Pipe(_) => false,
  184|       |                } {
  185|      0|                    WriteStyle::Auto
  186|       |                } else {
  187|     14|                    WriteStyle::Never
  188|       |                }
  189|       |            }
  190|      0|            color_choice => color_choice,
  191|       |        };
  192|       |
  193|     14|        let writer = match mem::take(&mut self.target) {
  194|     14|            WritableTarget::Stderr => BufferWriter::stderr(self.is_test, color_choice),
  195|      0|            WritableTarget::Stdout => BufferWriter::stdout(self.is_test, color_choice),
  196|      0|            WritableTarget::Pipe(pipe) => BufferWriter::pipe(color_choice, pipe),
  197|       |        };
  198|       |
  199|     14|        Writer {
  200|     14|            inner: writer,
  201|     14|            write_style: self.write_style,
  202|     14|        }
  203|     14|    }
_RNvXs0_NtNtCscLpLRMpPKB6_10env_logger3fmt6writerNtB5_14WritableTargetINtNtCs5WR7bNNc6DX_4core7convert4FromNtB5_6TargetE4from:
   59|     28|    fn from(target: Target) -> Self {
   60|     28|        match target {
   61|      0|            Target::Stdout => Self::Stdout,
   62|     28|            Target::Stderr => Self::Stderr,
   63|      0|            Target::Pipe(pipe) => Self::Pipe(Box::new(Mutex::new(pipe))),
   64|       |        }
   65|     28|    }

_RNvMs_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB4_12BufferWriter6buffer:
  116|      1|    pub(in crate::fmt::writer) fn buffer(&self) -> Buffer {
  117|      1|        Buffer {
  118|      1|            inner: self.inner.buffer(),
  119|      1|            has_uncolored_target: self.uncolored_target.is_some(),
  120|      1|        }
  121|      1|    }
_RNvMs0_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_6Buffer5reset:
  169|    294|    fn reset(&mut self) -> io::Result<()> {
  170|    294|        // Ignore styles for test captured logs because they can't be printed
  171|    294|        if !self.has_uncolored_target {
  172|    294|            self.inner.reset()
  173|       |        } else {
  174|      0|            Ok(())
  175|       |        }
  176|    294|    }
_RNvMNtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB8_9Formatter19default_level_style:
   52|     98|    pub fn default_level_style(&self, level: Level) -> Style {
   53|     98|        let mut level_style = self.style();
   54|     98|        match level {
   55|      0|            Level::Trace => level_style.set_color(Color::Cyan),
   56|     98|            Level::Debug => level_style.set_color(Color::Blue),
   57|      0|            Level::Info => level_style.set_color(Color::Green),
   58|      0|            Level::Warn => level_style.set_color(Color::Yellow),
   59|      0|            Level::Error => level_style.set_color(Color::Red).set_bold(true),
   60|       |        };
   61|     98|        level_style
   62|     98|    }
_RNvMs0_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_6Buffer5write:
  148|  1.89k|    pub(in crate::fmt) fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
  149|  1.89k|        self.inner.write(buf)
  150|  1.89k|    }
_RNvMNtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB8_9Formatter5style:
   42|    294|    pub fn style(&self) -> Style {
   43|    294|        Style {
   44|    294|            buf: self.buf.clone(),
   45|    294|            spec: ColorSpec::new(),
   46|    294|        }
   47|    294|    }
_RNCNvXs8_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impINtB7_11StyledValueNtCs9Qb01qicD55_3log5LevelENtNtCs5WR7bNNc6DX_4core3fmt7Display3fmt0Bf_:
  466|     98|impl_styled_value_fmt!(
  467|     98|    fmt::Debug,
  468|     98|    fmt::Display,
  469|     98|    fmt::Pointer,
  470|     98|    fmt::Octal,
  471|     98|    fmt::Binary,
  472|     98|    fmt::UpperHex,
  473|     98|    fmt::LowerHex,
  474|     98|    fmt::UpperExp,
  475|     98|    fmt::LowerExp
  476|     98|);
_RNvMs1_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB9_10WriteStyle17into_color_choice:
  180|     14|    fn into_color_choice(self) -> ColorChoice {
  181|     14|        match self {
  182|      0|            WriteStyle::Always => ColorChoice::Always,
  183|      0|            WriteStyle::Auto => ColorChoice::Auto,
  184|     14|            WriteStyle::Never => ColorChoice::Never,
  185|       |        }
  186|     14|    }
_RNvMs5_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_5Color14into_termcolor:
  518|    294|    fn into_termcolor(self) -> termcolor::Color {
  519|    294|        match self {
  520|    196|            Color::Black => termcolor::Color::Black,
  521|     98|            Color::Blue => termcolor::Color::Blue,
  522|      0|            Color::Green => termcolor::Color::Green,
  523|      0|            Color::Red => termcolor::Color::Red,
  524|      0|            Color::Cyan => termcolor::Color::Cyan,
  525|      0|            Color::Magenta => termcolor::Color::Magenta,
  526|      0|            Color::Yellow => termcolor::Color::Yellow,
  527|      0|            Color::White => termcolor::Color::White,
  528|      0|            Color::Ansi256(value) => termcolor::Color::Ansi256(value),
  529|      0|            Color::Rgb(r, g, b) => termcolor::Color::Rgb(r, g, b),
  530|       |        }
  531|    294|    }
_RNvMNtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB8_9Formatter20default_styled_level:
   67|     98|    pub fn default_styled_level(&self, level: Level) -> StyledValue<'static, Level> {
   68|     98|        self.default_level_style(level).into_value(level)
   69|     98|    }
_RINvMs2_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB6_5Style10into_valueNtCs9Qb01qicD55_3log5LevelEBe_:
  421|     98|    pub(crate) fn into_value<T>(self, value: T) -> StyledValue<'static, T> {
  422|     98|        StyledValue {
  423|     98|            style: Cow::Owned(self),
  424|     98|            value,
  425|     98|        }
  426|     98|    }
_RINvMs3_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impINtB6_11StyledValueNtCs9Qb01qicD55_3log5LevelE9write_fmtNCNvXs8_B6_B13_NtNtCs5WR7bNNc6DX_4core3fmt7Display3fmt0EBe_:
  434|     98|        self.style
  435|     98|            .buf
  436|     98|            .borrow_mut()
  437|     98|            .set_color(&self.style.spec)
  438|     98|            .map_err(|_| fmt::Error)?;
  439|       |
  440|       |        // Always try to reset the terminal style, even if writing failed
  441|     98|        let write = f();
  442|     98|        let reset = self.style.buf.borrow_mut().reset().map_err(|_| fmt::Error);
  443|     98|
  444|     98|        write.and(reset)
  445|     98|    }
_RNvMs2_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_5Style11set_intense:
  332|    196|    pub fn set_intense(&mut self, yes: bool) -> &mut Style {
  333|    196|        self.spec.set_intense(yes);
  334|    196|        self
  335|    196|    }
_RINvMs2_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB6_5Style10into_valueReEBe_:
  421|    196|    pub(crate) fn into_value<T>(self, value: T) -> StyledValue<'static, T> {
  422|    196|        StyledValue {
  423|    196|            style: Cow::Owned(self),
  424|    196|            value,
  425|    196|        }
  426|    196|    }
_RNvXs8_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impINtB5_11StyledValueNtCs9Qb01qicD55_3log5LevelENtNtCs5WR7bNNc6DX_4core3fmt7Display3fmtBd_:
  458|     98|                fn fmt(&self, f: &mut fmt::Formatter)->fmt::Result {
  459|     98|                    self.write_fmt(|| T::fmt(&self.value, f))
  460|     98|                }
_RNvXs6_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_5StyleNtNtCs5WR7bNNc6DX_4core5clone5Clone5clone:
  241|    196|#[derive(Clone)]
_RNCNvXs8_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impINtB7_11StyledValueReENtNtCs5WR7bNNc6DX_4core3fmt7Display3fmt0Bf_:
  466|    196|impl_styled_value_fmt!(
  467|    196|    fmt::Debug,
  468|    196|    fmt::Display,
  469|    196|    fmt::Pointer,
  470|    196|    fmt::Octal,
  471|    196|    fmt::Binary,
  472|    196|    fmt::UpperHex,
  473|    196|    fmt::LowerHex,
  474|    196|    fmt::UpperExp,
  475|    196|    fmt::LowerExp
  476|    196|);
_RNvMs2_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_5Style9set_color:
  278|    294|    pub fn set_color(&mut self, color: Color) -> &mut Style {
  279|    294|        self.spec.set_fg(Some(color.into_termcolor()));
  280|    294|        self
  281|    294|    }
_RNvMs_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB4_12BufferWriter6stderr:
   83|     14|    pub(in crate::fmt::writer) fn stderr(is_test: bool, write_style: WriteStyle) -> Self {
   84|     14|        BufferWriter {
   85|     14|            inner: termcolor::BufferWriter::stderr(write_style.into_color_choice()),
   86|     14|            uncolored_target: if is_test {
   87|      0|                Some(WritableTarget::Stderr)
   88|       |            } else {
   89|     14|                None
   90|       |            },
   91|       |        }
   92|     14|    }
_RNvMs0_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_6Buffer5clear:
  144|     98|    pub(in crate::fmt) fn clear(&mut self) {
  145|     98|        self.inner.clear()
  146|     98|    }
_RNvMs0_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB5_6Buffer9set_color:
  160|    294|    fn set_color(&mut self, spec: &ColorSpec) -> io::Result<()> {
  161|    294|        // Ignore styles for test captured logs because they can't be printed
  162|    294|        if !self.has_uncolored_target {
  163|    294|            self.inner.set_color(spec)
  164|       |        } else {
  165|      0|            Ok(())
  166|       |        }
  167|    294|    }
_RNvXs8_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impINtB5_11StyledValueReENtNtCs5WR7bNNc6DX_4core3fmt7Display3fmtBd_:
  458|    196|                fn fmt(&self, f: &mut fmt::Formatter)->fmt::Result {
  459|    196|                    self.write_fmt(|| T::fmt(&self.value, f))
  460|    196|                }
_RINvMs3_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impINtB6_11StyledValueReE9write_fmtNCNvXs8_B6_B13_NtNtCs5WR7bNNc6DX_4core3fmt7Display3fmt0EBe_:
  434|    196|        self.style
  435|    196|            .buf
  436|    196|            .borrow_mut()
  437|    196|            .set_color(&self.style.spec)
  438|    196|            .map_err(|_| fmt::Error)?;
  439|       |
  440|       |        // Always try to reset the terminal style, even if writing failed
  441|    196|        let write = f();
  442|    196|        let reset = self.style.buf.borrow_mut().reset().map_err(|_| fmt::Error);
  443|    196|
  444|    196|        write.and(reset)
  445|    196|    }
_RNvMs_NtNtNtNtCscLpLRMpPKB6_10env_logger3fmt6writer9termcolor3impNtB4_12BufferWriter5print:
  124|     98|        if let Some(target) = &self.uncolored_target {
  125|       |            // This impl uses the `eprint` and `print` macros
  126|       |            // instead of `termcolor`'s buffer.
  127|       |            // This is so their output can be captured by `cargo test`
  128|      0|            let log = String::from_utf8_lossy(buf.bytes());
  129|      0|
  130|      0|            match target {
  131|      0|                WritableTarget::Stderr => eprint!("{}", log),
  132|      0|                WritableTarget::Stdout => print!("{}", log),
  133|      0|                WritableTarget::Pipe(pipe) => write!(pipe.lock().unwrap(), "{}", log)?,
  134|       |            }
  135|       |
  136|      0|            Ok(())
  137|       |        } else {
  138|     98|            self.inner.print(&buf.inner)
  139|       |        }
  140|     98|    }

_RNCNCNvXs0_CscLpLRMpPKB6_10env_loggerNtB9_6LoggerNtCs9Qb01qicD55_3log3Log3log00B9_:
  924|     98|                    (self.format)(formatter, record).and_then(|_| formatter.print(&self.writer));
_RNCNvXs0_CscLpLRMpPKB6_10env_loggerNtB7_6LoggerNtCs9Qb01qicD55_3log3Log3logs_0B7_:
  931|     98|                .try_with(|tl_buf| {
  932|     98|                    match tl_buf.try_borrow_mut() {
  933|       |                        // There are no active borrows of the buffer
  934|     98|                        Ok(mut tl_buf) => match *tl_buf {
  935|       |                            // We have a previously set formatter
  936|     97|                            Some(ref mut formatter) => {
  937|     97|                                // Check the buffer style. If it's different from the logger's
  938|     97|                                // style then drop the buffer and recreate it.
  939|     97|                                if formatter.write_style() != self.writer.write_style() {
  940|      0|                                    *formatter = Formatter::new(&self.writer);
  941|     97|                                }
  942|       |
  943|     97|                                print(formatter, record);
  944|       |                            }
  945|       |                            // We don't have a previously set formatter
  946|      1|                            None => {
  947|      1|                                let mut formatter = Formatter::new(&self.writer);
  948|      1|                                print(&mut formatter, record);
  949|      1|
  950|      1|                                *tl_buf = Some(formatter);
  951|      1|                            }
  952|       |                        },
  953|       |                        // There's already an active borrow of the buffer (due to re-entrancy)
  954|      0|                        Err(_) => {
  955|      0|                            print(&mut Formatter::new(&self.writer), record);
  956|      0|                        }
  957|       |                    }
  958|     98|                })
_RNvXs7_CscLpLRMpPKB6_10env_loggerNtB5_7BuilderNtNtCs5WR7bNNc6DX_4core7default7Default7default:
  376|     14|#[derive(Default)]
_RINvMCscLpLRMpPKB6_10env_loggerNtB3_7Builder9parse_envNtB3_3EnvEB3_:
  488|     14|    pub fn parse_env<'a, E>(&mut self, env: E) -> &mut Self
  489|     14|    where
  490|     14|        E: Into<Env<'a>>,
  491|     14|    {
  492|     14|        let env = env.into();
  493|       |
  494|     14|        if let Some(s) = env.get_filter() {
  495|     14|            self.parse_filters(&s);
  496|     14|        }
  497|       |
  498|     14|        if let Some(s) = env.get_write_style() {
  499|      0|            self.parse_write_style(&s);
  500|     14|        }
  501|       |
  502|     14|        self
  503|     14|    }
_RNvMCscLpLRMpPKB6_10env_loggerNtB2_7Builder13parse_filters:
  716|     14|    pub fn parse_filters(&mut self, filters: &str) -> &mut Self {
  717|     14|        self.filter.parse(filters);
  718|     14|        self
  719|     14|    }
_RNvMCscLpLRMpPKB6_10env_loggerNtB2_7Builder5build:
  823|     14|    pub fn build(&mut self) -> Logger {
  824|     14|        assert!(!self.built, "attempt to re-use consumed builder");
  825|     14|        self.built = true;
  826|     14|
  827|     14|        Logger {
  828|     14|            writer: self.writer.build(),
  829|     14|            filter: self.filter.build(),
  830|     14|            format: self.format.build(),
  831|     14|        }
  832|     14|    }
_RNCNvXs0_CscLpLRMpPKB6_10env_loggerNtB7_6LoggerNtCs9Qb01qicD55_3log3Log3log0B7_:
  922|     98|            let print = |formatter: &mut Formatter, record: &Record| {
  923|     98|                let _ =
  924|     98|                    (self.format)(formatter, record).and_then(|_| formatter.print(&self.writer));
  925|     98|
  926|     98|                // Always clear the buffer afterwards
  927|     98|                formatter.clear();
  928|     98|            };
_RINvMCscLpLRMpPKB6_10env_loggerNtB3_7Builder8from_envNtB3_3EnvEB3_:
  443|     14|    pub fn from_env<'a, E>(env: E) -> Self
  444|     14|    where
  445|     14|        E: Into<Env<'a>>,
  446|     14|    {
  447|     14|        let mut builder = Builder::new();
  448|     14|        builder.parse_env(env);
  449|     14|        builder
  450|     14|    }
_RNvMs2_CscLpLRMpPKB6_10env_loggerNtB5_3Var3get:
 1080|     28|    fn get(&self) -> Option<String> {
 1081|     28|        env::var(&*self.name)
 1082|     28|            .ok()
 1083|     28|            .or_else(|| self.default.to_owned().map(|v| v.into_owned()))
 1084|     28|    }
_RNCNvNvNvXs0_CscLpLRMpPKB6_10env_loggerNtBb_6LoggerNtCs9Qb01qicD55_3log3Log3log9FORMATTER7___getit0Bb_:
  918|      1|            thread_local! {
  919|      1|                static FORMATTER: RefCell<Option<Formatter>> = RefCell::new(None);
  920|      1|            }
_RNvMs_CscLpLRMpPKB6_10env_loggerNtB4_6Logger7matches:
  897|    111|    pub fn matches(&self, record: &Record) -> bool {
  898|    111|        self.filter.matches(record)
  899|    111|    }
_RNvCscLpLRMpPKB6_10env_logger8try_init:
 1140|     14|pub fn try_init() -> Result<(), SetLoggerError> {
 1141|     14|    try_init_from_env(Env::default())
 1142|     14|}
_RNvXs4_CscLpLRMpPKB6_10env_loggerNtB5_3EnvNtNtCs5WR7bNNc6DX_4core7default7Default7default:
 1097|     14|    fn default() -> Self {
 1098|     14|        Env {
 1099|     14|            filter: Var::new(DEFAULT_FILTER_ENV),
 1100|     14|            write_style: Var::new(DEFAULT_WRITE_STYLE_ENV),
 1101|     14|        }
 1102|     14|    }
_RNvMs1_CscLpLRMpPKB6_10env_loggerNtB5_3Env10get_filter:
 1014|     14|    fn get_filter(&self) -> Option<String> {
 1015|     14|        self.filter.get()
 1016|     14|    }
_RNCNvMs2_CscLpLRMpPKB6_10env_loggerNtB7_3Var3get0B7_:
 1083|     14|            .or_else(|| self.default.to_owned().map(|v| v.into_owned()))
_RINvMs2_CscLpLRMpPKB6_10env_loggerNtB6_3Var3newReEB6_:
 1059|     28|    fn new<E>(name: E) -> Self
 1060|     28|    where
 1061|     28|        E: Into<Cow<'a, str>>,
 1062|     28|    {
 1063|     28|        Var {
 1064|     28|            name: name.into(),
 1065|     28|            default: None,
 1066|     28|        }
 1067|     28|    }
_RNvXs0_CscLpLRMpPKB6_10env_loggerNtB5_6LoggerNtCs9Qb01qicD55_3log3Log3log:
  907|    111|    fn log(&self, record: &Record) {
  908|    111|        if self.matches(record) {
  909|       |            // Log records are written to a thread-local buffer before being printed
  910|       |            // to the terminal. We clear these buffers afterwards, but they aren't shrinked
  911|       |            // so will always at least have capacity for the largest log record formatted
  912|       |            // on that thread.
  913|       |            //
  914|       |            // If multiple `Logger`s are used by the same threads then the thread-local
  915|       |            // formatter might have different color support. If this is the case the
  916|       |            // formatter and its buffer are discarded and recreated.
  917|       |
  918|       |            thread_local! {
  919|       |                static FORMATTER: RefCell<Option<Formatter>> = RefCell::new(None);
  920|       |            }
  921|       |
  922|     98|            let print = |formatter: &mut Formatter, record: &Record| {
  923|       |                let _ =
  924|       |                    (self.format)(formatter, record).and_then(|_| formatter.print(&self.writer));
  925|       |
  926|       |                // Always clear the buffer afterwards
  927|       |                formatter.clear();
  928|       |            };
  929|       |
  930|     98|            let printed = FORMATTER
  931|     98|                .try_with(|tl_buf| {
  932|       |                    match tl_buf.try_borrow_mut() {
  933|       |                        // There are no active borrows of the buffer
  934|       |                        Ok(mut tl_buf) => match *tl_buf {
  935|       |                            // We have a previously set formatter
  936|       |                            Some(ref mut formatter) => {
  937|       |                                // Check the buffer style. If it's different from the logger's
  938|       |                                // style then drop the buffer and recreate it.
  939|       |                                if formatter.write_style() != self.writer.write_style() {
  940|       |                                    *formatter = Formatter::new(&self.writer);
  941|       |                                }
  942|       |
  943|       |                                print(formatter, record);
  944|       |                            }
  945|       |                            // We don't have a previously set formatter
  946|       |                            None => {
  947|       |                                let mut formatter = Formatter::new(&self.writer);
  948|       |                                print(&mut formatter, record);
  949|       |
  950|       |                                *tl_buf = Some(formatter);
  951|       |                            }
  952|       |                        },
  953|       |                        // There's already an active borrow of the buffer (due to re-entrancy)
  954|       |                        Err(_) => {
  955|       |                            print(&mut Formatter::new(&self.writer), record);
  956|       |                        }
  957|       |                    }
  958|     98|                })
  959|     98|                .is_ok();
  960|     98|
  961|     98|            if !printed {
  962|      0|                // The thread-local storage was not available (because its
  963|      0|                // destructor has already run). Create a new single-use
  964|      0|                // Formatter on the stack for this call.
  965|      0|                print(&mut Formatter::new(&self.writer), record);
  966|     98|            }
  967|     13|        }
  968|    111|    }
_RNvMs_CscLpLRMpPKB6_10env_loggerNtB4_6Logger6filter:
  892|     14|    pub fn filter(&self) -> LevelFilter {
  893|     14|        self.filter.filter()
  894|     14|    }
_RNvMs1_CscLpLRMpPKB6_10env_loggerNtB5_3Env15get_write_style:
 1053|     14|    fn get_write_style(&self) -> Option<String> {
 1054|     14|        self.write_style.get()
 1055|     14|    }
_RNvMCscLpLRMpPKB6_10env_loggerNtB2_7Builder3new:
  411|     14|    pub fn new() -> Builder {
  412|     14|        Default::default()
  413|     14|    }
_RINvCscLpLRMpPKB6_10env_logger17try_init_from_envNtB2_3EnvEB2_:
 1185|     14|pub fn try_init_from_env<'a, E>(env: E) -> Result<(), SetLoggerError>
 1186|     14|where
 1187|     14|    E: Into<Env<'a>>,
 1188|     14|{
 1189|     14|    let mut builder = Builder::from_env(env);
 1190|     14|
 1191|     14|    builder.try_init()
 1192|     14|}
_RNvMCscLpLRMpPKB6_10env_loggerNtB2_7Builder8try_init:
  792|     14|    pub fn try_init(&mut self) -> Result<(), SetLoggerError> {
  793|     14|        let logger = self.build();
  794|     14|
  795|     14|        let max_level = logger.filter();
  796|     14|        let r = log::set_boxed_logger(Box::new(logger));
  797|     14|
  798|     14|        if r.is_ok() {
  799|      1|            log::set_max_level(max_level);
  800|     13|        }
  801|       |
  802|     14|        r
  803|     14|    }

_RNvXsa_NtCsempqdLqBTRB_9humantime4dateNtB5_9PrecisionNtNtCs5WR7bNNc6DX_4core3cmp9PartialEq2eq:
   58|     98|#[derive(Debug, Clone, PartialEq, Eq)]
_RNvNtCsempqdLqBTRB_9humantime4date22format_rfc3339_seconds:
  212|     98|pub fn format_rfc3339_seconds(system_time: SystemTime) -> Rfc3339Timestamp {
  213|     98|    Rfc3339Timestamp(system_time, Precision::Seconds)
  214|     98|}
_RNvXs1_NtCsempqdLqBTRB_9humantime4dateNtB5_16Rfc3339TimestampNtNtCs5WR7bNNc6DX_4core3fmt7Display3fmt:
  251|     98|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  252|     98|        use self::Precision::*;
  253|     98|
  254|     98|        let dur = self.0.duration_since(UNIX_EPOCH)
  255|     98|            .expect("all times should be after the epoch");
  256|     98|        let secs_since_epoch = dur.as_secs();
  257|     98|        let nanos = dur.subsec_nanos();
  258|     98|
  259|     98|        if secs_since_epoch >= 253_402_300_800 { // year 9999
  260|      0|            return Err(fmt::Error);
  261|     98|        }
  262|     98|
  263|     98|        /* 2000-03-01 (mod 400 year, immediately after feb29 */
  264|     98|        const LEAPOCH: i64 = 11017;
  265|     98|        const DAYS_PER_400Y: i64 = 365*400 + 97;
  266|     98|        const DAYS_PER_100Y: i64 = 365*100 + 24;
  267|     98|        const DAYS_PER_4Y: i64 = 365*4 + 1;
  268|     98|
  269|     98|        let days = (secs_since_epoch / 86400) as i64 - LEAPOCH;
  270|     98|        let secs_of_day = secs_since_epoch % 86400;
  271|     98|
  272|     98|        let mut qc_cycles = days / DAYS_PER_400Y;
  273|     98|        let mut remdays = days % DAYS_PER_400Y;
  274|     98|
  275|     98|        if remdays < 0 {
  276|      0|            remdays += DAYS_PER_400Y;
  277|      0|            qc_cycles -= 1;
  278|     98|        }
  279|       |
  280|     98|        let mut c_cycles = remdays / DAYS_PER_100Y;
  281|     98|        if c_cycles == 4 { c_cycles -= 1; }
  282|     98|        remdays -= c_cycles * DAYS_PER_100Y;
  283|     98|
  284|     98|        let mut q_cycles = remdays / DAYS_PER_4Y;
  285|     98|        if q_cycles == 25 { q_cycles -= 1; }
  286|     98|        remdays -= q_cycles * DAYS_PER_4Y;
  287|     98|
  288|     98|        let mut remyears = remdays / 365;
  289|     98|        if remyears == 4 { remyears -= 1; }
  290|     98|        remdays -= remyears * 365;
  291|     98|
  292|     98|        let mut year = 2000 +
  293|     98|            remyears + 4*q_cycles + 100*c_cycles + 400*qc_cycles;
  294|     98|
  295|     98|        let months = [31,30,31,30,31,31,30,31,30,31,31,29];
  296|     98|        let mut mon = 0;
  297|    980|        for mon_len in months.iter() {
  298|    980|            mon += 1;
  299|    980|            if remdays < *mon_len {
  300|     98|                break;
  301|    882|            }
  302|    882|            remdays -= *mon_len;
  303|       |        }
  304|     98|        let mday = remdays+1;
  305|     98|        let mon = if mon + 2 > 12 {
  306|      0|            year += 1;
  307|      0|            mon - 10
  308|       |        } else {
  309|     98|            mon + 2
  310|       |        };
  311|       |
  312|     98|        let mut buf: [u8; 30] = [
  313|     98|            // Too long to write as: b"0000-00-00T00:00:00.000000000Z"
  314|     98|            b'0', b'0', b'0', b'0', b'-', b'0', b'0', b'-', b'0', b'0', b'T',
  315|     98|            b'0', b'0', b':', b'0', b'0', b':', b'0', b'0',
  316|     98|            b'.', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'0', b'Z',
  317|     98|        ];
  318|     98|        buf[0] = b'0' + (year / 1000) as u8;
  319|     98|        buf[1] = b'0' + (year / 100 % 10) as u8;
  320|     98|        buf[2] = b'0' + (year / 10 % 10) as u8;
  321|     98|        buf[3] = b'0' + (year % 10) as u8;
  322|     98|        buf[5] = b'0' + (mon / 10) as u8;
  323|     98|        buf[6] = b'0' + (mon % 10) as u8;
  324|     98|        buf[8] = b'0' + (mday / 10) as u8;
  325|     98|        buf[9] = b'0' + (mday % 10) as u8;
  326|     98|        buf[11] = b'0' + (secs_of_day / 3600 / 10) as u8;
  327|     98|        buf[12] = b'0' + (secs_of_day / 3600 % 10) as u8;
  328|     98|        buf[14] = b'0' + (secs_of_day / 60 / 10 % 6) as u8;
  329|     98|        buf[15] = b'0' + (secs_of_day / 60 % 10) as u8;
  330|     98|        buf[17] = b'0' + (secs_of_day / 10 % 6) as u8;
  331|     98|        buf[18] = b'0' + (secs_of_day % 10) as u8;
  332|       |
  333|     98|        let offset = if self.1 == Seconds || nanos == 0 && self.1 == Smart {
  334|     98|            buf[19] = b'Z';
  335|     98|            19
  336|      0|        } else if self.1 == Millis {
  337|      0|            buf[20] = b'0' + (nanos / 100_000_000) as u8;
  338|      0|            buf[21] = b'0' + (nanos / 10_000_000 % 10) as u8;
  339|      0|            buf[22] = b'0' + (nanos / 1_000_000 % 10) as u8;
  340|      0|            buf[23] = b'Z';
  341|      0|            23
  342|      0|        } else if self.1 == Micros {
  343|      0|            buf[20] = b'0' + (nanos / 100_000_000) as u8;
  344|      0|            buf[21] = b'0' + (nanos / 10_000_000 % 10) as u8;
  345|      0|            buf[22] = b'0' + (nanos / 1_000_000 % 10) as u8;
  346|      0|            buf[23] = b'0' + (nanos / 100_000 % 10) as u8;
  347|      0|            buf[24] = b'0' + (nanos / 10_000 % 10) as u8;
  348|      0|            buf[25] = b'0' + (nanos / 1_000 % 10) as u8;
  349|      0|            buf[26] = b'Z';
  350|      0|            26
  351|       |        } else {
  352|      0|            buf[20] = b'0' + (nanos / 100_000_000) as u8;
  353|      0|            buf[21] = b'0' + (nanos / 10_000_000 % 10) as u8;
  354|      0|            buf[22] = b'0' + (nanos / 1_000_000 % 10) as u8;
  355|      0|            buf[23] = b'0' + (nanos / 100_000 % 10) as u8;
  356|      0|            buf[24] = b'0' + (nanos / 10_000 % 10) as u8;
  357|      0|            buf[25] = b'0' + (nanos / 1_000 % 10) as u8;
  358|      0|            buf[26] = b'0' + (nanos / 100 % 10) as u8;
  359|      0|            buf[27] = b'0' + (nanos / 10 % 10) as u8;
  360|      0|            buf[28] = b'0' + (nanos / 1 % 10) as u8;
  361|      0|            // 29th is 'Z'
  362|      0|            29
  363|       |        };
  364|       |
  365|       |        // we know our chars are all ascii
  366|     98|        f.write_str(str::from_utf8(&buf[..=offset]).expect("Conversion to utf8 failed"))
  367|     98|    }

_RNvNvCs2kBtuMlVFYP_22instrument_with_mutate1__3run:
  241|     27|            fn run($bytes: &[u8]) {
rust_fuzzer_test_input:
  215|     14|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|     14|                }
  223|     14|
  224|     14|                run(bytes);
  225|     14|                0
  226|     14|            }
LLVMFuzzerTestOneInput:
   58|     14|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|     14|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|     14|    });
   63|     14|
   64|     14|    match test_input {
   65|     14|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|     14|}
_RNCNvCs5oAMb9lbZT7_13libfuzzer_sys15test_input_wrap0B3_:
   59|     14|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|     14|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|     14|        rust_fuzzer_test_input(data_slice)
   62|     14|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs2_Cs9Qb01qicD55_3logNtB5_5LevelINtNtCs5WR7bNNc6DX_4core3cmp10PartialOrdNtB5_11LevelFilterE2le:
  511|    322|    fn le(&self, other: &LevelFilter) -> bool {
  512|    322|        *self as usize <= *other as usize
  513|    322|    }
_RNvCs9Qb01qicD55_3log9max_level:
 1383|    112|pub fn max_level() -> LevelFilter {
 1384|    112|    // Since `LevelFilter` is `repr(usize)`,
 1385|    112|    // this transmute is sound if and only if `MAX_LOG_LEVEL_FILTER`
 1386|    112|    // is set to a usize that is a valid discriminant for `LevelFilter`.
 1387|    112|    // Since `MAX_LOG_LEVEL_FILTER` is private, the only time it's set
 1388|    112|    // is by `set_max_level` above, i.e. by casting a `LevelFilter` to `usize`.
 1389|    112|    // So any usize stored in `MAX_LOG_LEVEL_FILTER` is a valid discriminant.
 1390|    112|    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
 1391|    112|}
_RNvMsh_Cs9Qb01qicD55_3logNtB5_6Record4args:
  910|     98|    pub fn args(&self) -> &fmt::Arguments<'a> {
  911|     98|        &self.args
  912|     98|    }
_RNvXsc_Cs9Qb01qicD55_3logNtB5_11LevelFilterNtNtCs5WR7bNNc6DX_4core3cmp3Ord3cmp:
  735|     42|    fn cmp(&self, other: &LevelFilter) -> cmp::Ordering {
  736|     42|        (*self as usize).cmp(&(*other as usize))
  737|     42|    }
_RNvMsf_Cs9Qb01qicD55_3logNtB5_11LevelFilter3max:
  774|     28|    pub fn max() -> LevelFilter {
  775|     28|        LevelFilter::Trace
  776|     28|    }
_RNvMsj_Cs9Qb01qicD55_3logNtB5_8Metadata6target:
 1204|    209|    pub fn target(&self) -> &'a str {
 1205|    209|        self.target
 1206|    209|    }
_RNvCs9Qb01qicD55_3log13set_max_level:
 1365|      1|pub fn set_max_level(level: LevelFilter) {
 1366|      1|    MAX_LOG_LEVEL_FILTER.store(level as usize, Ordering::Relaxed)
 1367|      1|}
_RNvMsh_Cs9Qb01qicD55_3logNtB5_6Record6target:
  928|     98|    pub fn target(&self) -> &'a str {
  929|     98|        self.metadata.target()
  930|     98|    }
_RNvMsj_Cs9Qb01qicD55_3logNtB5_8Metadata5level:
 1198|    209|    pub fn level(&self) -> Level {
 1199|    209|        self.level
 1200|    209|    }
_RNvMsh_Cs9Qb01qicD55_3logNtB5_6Record5level:
  922|     98|    pub fn level(&self) -> Level {
  923|     98|        self.metadata.level()
  924|     98|    }
_RNvMsh_Cs9Qb01qicD55_3logNtB5_6Record8metadata:
  916|    111|    pub fn metadata(&self) -> &Metadata<'a> {
  917|    111|        &self.metadata
  918|    111|    }
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder5level:
 1083|    111|    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
 1084|    111|        self.record.metadata.level = level;
 1085|    111|        self
 1086|    111|    }
_RNvMs6_Cs9Qb01qicD55_3logNtB5_5Level6as_str:
  608|     98|    pub fn as_str(&self) -> &'static str {
  609|     98|        LOG_LEVEL_NAMES[*self as usize]
  610|     98|    }
_RNvMsk_Cs9Qb01qicD55_3logNtB5_15MetadataBuilder5build:
 1263|    111|    pub fn build(&self) -> Metadata<'a> {
 1264|    111|        self.metadata.clone()
 1265|    111|    }
_RNvMsh_Cs9Qb01qicD55_3logNtB5_6Record7builder:
  904|    111|    pub fn builder() -> RecordBuilder<'a> {
  905|    111|        RecordBuilder::new()
  906|    111|    }
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder11file_static:
 1118|    111|    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
 1119|    111|        self.record.file = file.map(MaybeStaticStr::Static);
 1120|    111|        self
 1121|    111|    }
_RNvMsf_Cs9Qb01qicD55_3logNtB5_11LevelFilter10from_usize:
  760|     28|    fn from_usize(u: usize) -> Option<LevelFilter> {
  761|     28|        match u {
  762|      0|            0 => Some(LevelFilter::Off),
  763|      0|            1 => Some(LevelFilter::Error),
  764|      0|            2 => Some(LevelFilter::Warn),
  765|      0|            3 => Some(LevelFilter::Info),
  766|     14|            4 => Some(LevelFilter::Debug),
  767|     14|            5 => Some(LevelFilter::Trace),
  768|      0|            _ => None,
  769|       |        }
  770|     28|    }
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder5build:
 1140|    111|    pub fn build(&self) -> Record<'a> {
 1141|    111|        self.record.clone()
 1142|    111|    }
_RNvXsE_Cs9Qb01qicD55_3logNtB5_14MaybeStaticStrNtNtCs5WR7bNNc6DX_4core5clone5Clone5clone:
  812|    222|#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
_RNvXs5_Cs9Qb01qicD55_3logNtB5_5LevelNtNtCs5WR7bNNc6DX_4core3fmt7Display3fmt:
  576|     98|    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
  577|     98|        fmt.pad(self.as_str())
  578|     98|    }
_RINvCs9Qb01qicD55_3log5ok_orNtB2_11LevelFilterNtB2_15ParseLevelErrorEB2_:
  533|     56|fn ok_or<T, E>(t: Option<T>, e: E) -> Result<T, E> {
  534|     56|    match t {
  535|     28|        Some(t) => Ok(t),
  536|     28|        None => Err(e),
  537|       |    }
  538|     56|}
_RNCNvCs9Qb01qicD55_3log20eq_ignore_ascii_case0B3_:
  553|    182|            .all(|(a, b)| to_ascii_uppercase(a) == to_ascii_uppercase(b))
_RNvXsN_Cs9Qb01qicD55_3logNtB5_6RecordNtNtCs5WR7bNNc6DX_4core5clone5Clone5clone:
  873|    111|#[derive(Clone, Debug)]
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder3new:
 1053|    111|    pub fn new() -> RecordBuilder<'a> {
 1054|    111|        RecordBuilder {
 1055|    111|            record: Record {
 1056|    111|                args: format_args!(""),
 1057|    111|                metadata: Metadata::builder().build(),
 1058|    111|                module_path: None,
 1059|    111|                file: None,
 1060|    111|                line: None,
 1061|    111|                #[cfg(feature = "kv_unstable")]
 1062|    111|                key_values: KeyValues(&Option::None::<(kv::Key, kv::Value)>),
 1063|    111|            },
 1064|    111|        }
 1065|    111|    }
_RNCNvXsd_Cs9Qb01qicD55_3logNtB7_11LevelFilterNtNtNtCs5WR7bNNc6DX_4core3str6traits7FromStr8from_str0B7_:
  746|    322|                .position(|&name| eq_ignore_ascii_case(name, level))
_RNvCs9Qb01qicD55_3log20eq_ignore_ascii_case:
  541|    322|fn eq_ignore_ascii_case(a: &str, b: &str) -> bool {
  542|    322|    fn to_ascii_uppercase(c: u8) -> u8 {
  543|    322|        if c >= b'a' && c <= b'z' {
  544|    322|            c - b'a' + b'A'
  545|    322|        } else {
  546|    322|            c
  547|    322|        }
  548|    322|    }
  549|    322|
  550|    322|    if a.len() == b.len() {
  551|     70|        a.bytes()
  552|     70|            .zip(b.bytes())
  553|     70|            .all(|(a, b)| to_ascii_uppercase(a) == to_ascii_uppercase(b))
  554|       |    } else {
  555|    252|        false
  556|       |    }
  557|    322|}
_RINvCs9Qb01qicD55_3log16set_logger_innerNCNvB2_16set_boxed_logger0EB2_:
 1470|     14|fn set_logger_inner<F>(make_logger: F) -> Result<(), SetLoggerError>
 1471|     14|where
 1472|     14|    F: FnOnce() -> &'static dyn Log,
 1473|     14|{
 1474|     14|    let old_state = match STATE.compare_exchange(
 1475|     14|        UNINITIALIZED,
 1476|     14|        INITIALIZING,
 1477|     14|        Ordering::SeqCst,
 1478|     14|        Ordering::SeqCst,
 1479|     14|    ) {
 1480|     14|        Ok(s) | Err(s) => s,
 1481|     14|    };
 1482|     14|    match old_state {
 1483|       |        UNINITIALIZED => {
 1484|      1|            unsafe {
 1485|      1|                LOGGER = make_logger();
 1486|      1|            }
 1487|      1|            STATE.store(INITIALIZED, Ordering::SeqCst);
 1488|      1|            Ok(())
 1489|       |        }
 1490|       |        INITIALIZING => {
 1491|      0|            while STATE.load(Ordering::SeqCst) == INITIALIZING {
 1492|      0|                // TODO: replace with `hint::spin_loop` once MSRV is 1.49.0.
 1493|      0|                #[allow(deprecated)]
 1494|      0|                std::sync::atomic::spin_loop_hint();
 1495|      0|            }
 1496|      0|            Err(SetLoggerError(()))
 1497|       |        }
 1498|     13|        _ => Err(SetLoggerError(())),
 1499|       |    }
 1500|     14|}
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder6target:
 1090|    111|    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
 1091|    111|        self.record.metadata.target = target;
 1092|    111|        self
 1093|    111|    }
_RNCNvCs9Qb01qicD55_3log16set_boxed_logger0B3_:
 1408|      1|    set_logger_inner(|| Box::leak(logger))
_RNCNvXsd_Cs9Qb01qicD55_3logNtB7_11LevelFilterNtNtNtCs5WR7bNNc6DX_4core3str6traits7FromStr8from_strs_0B7_:
  747|     28|                .map(|p| LevelFilter::from_usize(p).unwrap()),
_RNvXCs9Qb01qicD55_3logNtB2_5LevelNtNtCs5WR7bNNc6DX_4core5clone5Clone5clone:
  453|    222|    fn clone(&self) -> Level {
  454|    222|        *self
  455|    222|    }
_RNvCs9Qb01qicD55_3log17___private_api_log:
 1591|    111|    if kvs.is_some() {
 1592|      0|        panic!(
 1593|      0|            "key-value support is experimental and must be enabled using the `kv_unstable` feature"
 1594|      0|        )
 1595|    111|    }
 1596|    111|
 1597|    111|    logger().log(
 1598|    111|        &Record::builder()
 1599|    111|            .args(args)
 1600|    111|            .level(level)
 1601|    111|            .target(target)
 1602|    111|            .module_path_static(Some(module_path))
 1603|    111|            .file_static(Some(file))
 1604|    111|            .line(Some(line))
 1605|    111|            .build(),
 1606|    111|    );
 1607|    111|}
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder18module_path_static:
 1104|    111|    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
 1105|    111|        self.record.module_path = path.map(MaybeStaticStr::Static);
 1106|    111|        self
 1107|    111|    }
_RNvNvCs9Qb01qicD55_3log20eq_ignore_ascii_case18to_ascii_uppercase:
  542|    364|    fn to_ascii_uppercase(c: u8) -> u8 {
  543|    364|        if c >= b'a' && c <= b'z' {
  544|    182|            c - b'a' + b'A'
  545|       |        } else {
  546|    182|            c
  547|       |        }
  548|    364|    }
_RNvXsd_Cs9Qb01qicD55_3logNtB5_11LevelFilterNtNtNtCs5WR7bNNc6DX_4core3str6traits7FromStr8from_str:
  742|     56|    fn from_str(level: &str) -> Result<LevelFilter, Self::Err> {
  743|     56|        ok_or(
  744|     56|            LOG_LEVEL_NAMES
  745|     56|                .iter()
  746|     56|                .position(|&name| eq_ignore_ascii_case(name, level))
  747|     56|                .map(|p| LevelFilter::from_usize(p).unwrap()),
  748|     56|            ParseLevelError(()),
  749|     56|        )
  750|     56|    }
_RNvMsj_Cs9Qb01qicD55_3logNtB5_8Metadata7builder:
 1192|    111|    pub fn builder() -> MetadataBuilder<'a> {
 1193|    111|        MetadataBuilder::new()
 1194|    111|    }
_RNvMsk_Cs9Qb01qicD55_3logNtB5_15MetadataBuilder3new:
 1238|    111|    pub fn new() -> MetadataBuilder<'a> {
 1239|    111|        MetadataBuilder {
 1240|    111|            metadata: Metadata {
 1241|    111|                level: Level::Info,
 1242|    111|                target: "",
 1243|    111|            },
 1244|    111|        }
 1245|    111|    }
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder4line:
 1125|    111|    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
 1126|    111|        self.record.line = line;
 1127|    111|        self
 1128|    111|    }
_RNvXsQ_Cs9Qb01qicD55_3logNtB5_8MetadataNtNtCs5WR7bNNc6DX_4core5clone5Clone5clone:
 1183|    222|#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
_RNvCs9Qb01qicD55_3log6logger:
 1573|    111|pub fn logger() -> &'static dyn Log {
 1574|    111|    if STATE.load(Ordering::SeqCst) != INITIALIZED {
 1575|       |        static NOP: NopLogger = NopLogger;
 1576|      0|        &NOP
 1577|       |    } else {
 1578|    111|        unsafe { LOGGER }
 1579|       |    }
 1580|    111|}
_RNvMsi_Cs9Qb01qicD55_3logNtB5_13RecordBuilder4args:
 1069|    111|    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
 1070|    111|        self.record.args = args;
 1071|    111|        self
 1072|    111|    }
_RNvCs9Qb01qicD55_3log16set_boxed_logger:
 1407|     14|pub fn set_boxed_logger(logger: Box<dyn Log>) -> Result<(), SetLoggerError> {
 1408|     14|    set_logger_inner(|| Box::leak(logger))
 1409|     14|}

_RNvMs2_NtCsjdHdjxVNS4U_9once_cell3impINtB5_8OnceCellNtNtCsbPjUxICiiFN_5alloc6string6StringE14is_initializedCs2kBtuMlVFYP_22instrument_with_mutate:
   59|     14|    pub(crate) fn is_initialized(&self) -> bool {
   60|     14|        // An `Acquire` load is enough because that makes all the initialization
   61|     14|        // operations visible to us, and, this being a fast path, weaker
   62|     14|        // ordering helps with performance. This `Acquire` synchronizes with
   63|     14|        // `SeqCst` operations on the slow path.
   64|     14|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   65|     14|    }

_RNvMs4_NtCsjdHdjxVNS4U_9once_cell4syncINtB5_8OnceCellNtNtCsbPjUxICiiFN_5alloc6string6StringE3getCs2kBtuMlVFYP_22instrument_with_mutate:
  922|     14|        pub fn get(&self) -> Option<&T> {
  923|     14|            if self.0.is_initialized() {
  924|       |                // Safe b/c value is initialized.
  925|      0|                Some(unsafe { self.get_unchecked() })
  926|       |            } else {
  927|     14|                None
  928|       |            }
  929|     14|        }

_RINvXs0_NtNtCsh0Yam63raeZ_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionmE6sampleNtNtNtBa_4rngs5small8SmallRngECs2kBtuMlVFYP_22instrument_with_mutate:
   37|     33|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u32 {
   38|     33|        rng.next_u32()
   39|     33|    }
_RINvXs1_NtNtCsh0Yam63raeZ_4rand13distributions7integerNtB8_8StandardINtNtB8_12distribution12DistributionyE6sampleNtNtNtBa_4rngs5small8SmallRngECs2kBtuMlVFYP_22instrument_with_mutate:
   44|     28|    fn sample<R: Rng + ?Sized>(&self, rng: &mut R) -> u64 {
   45|     28|        rng.next_u64()
   46|     28|    }

_RINvXs4_NtNtCsh0Yam63raeZ_4rand13distributions7uniformINtNtNtCs5WR7bNNc6DX_4core3ops5range5RangemEINtB6_11SampleRangemE13sample_singleNtNtNtBa_4rngs5small8SmallRngECs2kBtuMlVFYP_22instrument_with_mutate:
  359|     14|    fn sample_single<R: RngCore + ?Sized>(self, rng: &mut R) -> T {
  360|     14|        T::Sampler::sample_single(self.start, self.end, rng)
  361|     14|    }
_RNvXs4_NtNtCsh0Yam63raeZ_4rand13distributions7uniformINtNtNtCs5WR7bNNc6DX_4core3ops5range5RangemEINtB5_11SampleRangemE8is_emptyCs2kBtuMlVFYP_22instrument_with_mutate:
  364|     14|    fn is_empty(&self) -> bool {
  365|     14|        !(self.start < self.end)
  366|     14|    }
_RINvXsB_NtNtCsh0Yam63raeZ_4rand13distributions7uniformINtB6_10UniformIntmENtB6_14UniformSampler23sample_single_inclusiveNtNtNtBa_4rngs5small8SmallRngmmECs2kBtuMlVFYP_22instrument_with_mutate:
  519|     14|            fn sample_single_inclusive<R: Rng + ?Sized, B1, B2>(low_b: B1, high_b: B2, rng: &mut R) -> Self::X
  520|     14|            where
  521|     14|                B1: SampleBorrow<Self::X> + Sized,
  522|     14|                B2: SampleBorrow<Self::X> + Sized,
  523|     14|            {
  524|     14|                let low = *low_b.borrow();
  525|     14|                let high = *high_b.borrow();
  526|     14|                assert!(low <= high, "UniformSampler::sample_single_inclusive: low > high");
  527|     14|                let range = high.wrapping_sub(low).wrapping_add(1) as $unsigned as $u_large;
  528|     14|                // If the above resulted in wrap-around to 0, the range is $ty::MIN..=$ty::MAX,
  529|     14|                // and any integer will do.
  530|     14|                if range == 0 {
  531|      0|                    return rng.gen();
  532|     14|                }
  533|       |
  534|     14|                let zone = if ::core::$unsigned::MAX <= ::core::u16::MAX as $unsigned {
  535|       |                    // Using a modulus is faster than the approximation for
  536|       |                    // i8 and i16. I suppose we trade the cost of one
  537|       |                    // modulus for near-perfect branch prediction.
  538|      0|                    let unsigned_max: $u_large = ::core::$u_large::MAX;
  539|      0|                    let ints_to_reject = (unsigned_max - range + 1) % range;
  540|      0|                    unsigned_max - ints_to_reject
  541|       |                } else {
  542|       |                    // conservative but fast approximation. `- 1` is necessary to allow the
  543|       |                    // same comparison without bias.
  544|     14|                    (range << range.leading_zeros()).wrapping_sub(1)
  545|       |                };
  546|       |
  547|     33|                loop {
  548|     33|                    let v: $u_large = rng.gen();
  549|     33|                    let (hi, lo) = v.wmul(range);
  550|     33|                    if lo <= zone {
  551|     14|                        return low.wrapping_add(hi as $ty);
  552|     19|                    }
  553|       |                }
  554|     14|            }
_RNvXs2_NtNtCsh0Yam63raeZ_4rand13distributions7uniformmINtB5_12SampleBorrowmE6borrowCs2kBtuMlVFYP_22instrument_with_mutate:
  332|     56|    fn borrow(&self) -> &Borrowed {
  333|     56|        self
  334|     56|    }
_RINvXsB_NtNtCsh0Yam63raeZ_4rand13distributions7uniformINtB6_10UniformIntmENtB6_14UniformSampler13sample_singleNtNtNtBa_4rngs5small8SmallRngmmECs2kBtuMlVFYP_22instrument_with_mutate:
  507|     14|            fn sample_single<R: Rng + ?Sized, B1, B2>(low_b: B1, high_b: B2, rng: &mut R) -> Self::X
  508|     14|            where
  509|     14|                B1: SampleBorrow<Self::X> + Sized,
  510|     14|                B2: SampleBorrow<Self::X> + Sized,
  511|     14|            {
  512|     14|                let low = *low_b.borrow();
  513|     14|                let high = *high_b.borrow();
  514|     14|                assert!(low < high, "UniformSampler::sample_single: low >= high");
  515|     14|                Self::sample_single_inclusive(low, high - 1, rng)
  516|     14|            }

_RNvXs1_NtNtCsh0Yam63raeZ_4rand13distributions5utilsmNtB5_16WideningMultiply4wmul:
   26|     33|            fn wmul(self, x: $ty) -> Self::Output {
   27|     33|                let tmp = (self as $wide) * (x as $wide);
   28|     33|                ((tmp >> $shift) as $ty, tmp as $ty)
   29|     33|            }

_RINvYNtNtNtCsh0Yam63raeZ_4rand4rngs5small8SmallRngNtNtB9_3rng3Rng3genyECs2kBtuMlVFYP_22instrument_with_mutate:
   93|     28|    fn gen<T>(&mut self) -> T
   94|     28|    where Standard: Distribution<T> {
   95|     28|        Standard.sample(self)
   96|     28|    }
_RINvYNtNtNtCsh0Yam63raeZ_4rand4rngs5small8SmallRngNtNtB9_3rng3Rng3genmECs2kBtuMlVFYP_22instrument_with_mutate:
   93|     33|    fn gen<T>(&mut self) -> T
   94|     33|    where Standard: Distribution<T> {
   95|     33|        Standard.sample(self)
   96|     33|    }
_RINvYNtNtNtCsh0Yam63raeZ_4rand4rngs5small8SmallRngNtNtB9_3rng3Rng9gen_rangemINtNtNtCs5WR7bNNc6DX_4core3ops5range5RangemEECs2kBtuMlVFYP_22instrument_with_mutate:
  129|     14|    fn gen_range<T, R>(&mut self, range: R) -> T
  130|     14|    where
  131|     14|        T: SampleUniform,
  132|     14|        R: SampleRange<T>
  133|     14|    {
  134|     14|        assert!(!range.is_empty(), "cannot sample empty range");
  135|     14|        range.sample_single(self)
  136|     14|    }

_RNvXs_NtNtCsh0Yam63raeZ_4rand4rngs5smallNtB4_8SmallRngNtCsiqpdlgjB9gs_9rand_core11SeedableRng9from_seed:
  109|     14|    fn from_seed(seed: Self::Seed) -> Self {
  110|     14|        SmallRng(Rng::from_seed(seed))
  111|     14|    }
_RNvXNtNtCsh0Yam63raeZ_4rand4rngs5smallNtB2_8SmallRngNtCsiqpdlgjB9gs_9rand_core7RngCore8next_u64:
   90|     28|    fn next_u64(&mut self) -> u64 {
   91|     28|        self.0.next_u64()
   92|     28|    }
_RNvXNtNtCsh0Yam63raeZ_4rand4rngs5smallNtB2_8SmallRngNtCsiqpdlgjB9gs_9rand_core7RngCore8next_u32:
   85|     33|    fn next_u32(&mut self) -> u32 {
   86|     33|        self.0.next_u32()
   87|     33|    }

_RNvXs_NtNtCsh0Yam63raeZ_4rand4rngs18xoshiro256plusplusNtB4_18Xoshiro256PlusPlusNtCsiqpdlgjB9gs_9rand_core7RngCore8next_u64:
   70|     61|    fn next_u64(&mut self) -> u64 {
   71|     61|        let result_plusplus = self.s[0]
   72|     61|            .wrapping_add(self.s[3])
   73|     61|            .rotate_left(23)
   74|     61|            .wrapping_add(self.s[0]);
   75|     61|
   76|     61|        let t = self.s[1] << 17;
   77|     61|
   78|     61|        self.s[2] ^= self.s[0];
   79|     61|        self.s[3] ^= self.s[1];
   80|     61|        self.s[1] ^= self.s[2];
   81|     61|        self.s[0] ^= self.s[3];
   82|     61|
   83|     61|        self.s[2] ^= t;
   84|     61|
   85|     61|        self.s[3] = self.s[3].rotate_left(45);
   86|     61|
   87|     61|        result_plusplus
   88|     61|    }
_RNvXNtNtCsh0Yam63raeZ_4rand4rngs18xoshiro256plusplusNtB2_18Xoshiro256PlusPlusNtCsiqpdlgjB9gs_9rand_core11SeedableRng9from_seed:
   34|     14|    fn from_seed(seed: [u8; 32]) -> Xoshiro256PlusPlus {
   35|     14|        if seed.iter().all(|&x| x == 0) {
   36|      0|            return Self::seed_from_u64(0);
   37|     14|        }
   38|     14|        let mut state = [0; 4];
   39|     14|        read_u64_into(&seed, &mut state);
   40|     14|        Xoshiro256PlusPlus { s: state }
   41|     14|    }
_RNCNvXNtNtCsh0Yam63raeZ_4rand4rngs18xoshiro256plusplusNtB4_18Xoshiro256PlusPlusNtCsiqpdlgjB9gs_9rand_core11SeedableRng9from_seed0Cs2kBtuMlVFYP_22instrument_with_mutate:
   35|     14|        if seed.iter().all(|&x| x == 0) {
_RNvXs_NtNtCsh0Yam63raeZ_4rand4rngs18xoshiro256plusplusNtB4_18Xoshiro256PlusPlusNtCsiqpdlgjB9gs_9rand_core7RngCore8next_u32:
   63|     33|    fn next_u32(&mut self) -> u32 {
   64|     33|        // The lowest bits have some linear dependencies, so we use the
   65|     33|        // upper bits instead.
   66|     33|        (self.next_u64() >> 32) as u32
   67|     33|    }

_RNvNtCsiqpdlgjB9gs_9rand_core2le13read_u64_into:
   27|     14|pub fn read_u64_into(src: &[u8], dst: &mut [u64]) {
   28|     14|    assert!(src.len() >= 8 * dst.len());
   29|     56|    for (out, chunk) in dst.iter_mut().zip(src.chunks_exact(8)) {
   30|     56|        *out = u64::from_le_bytes(chunk.try_into().unwrap());
   31|     56|    }
   32|     14|}

_RNvYNtNtNtCsh0Yam63raeZ_4rand4rngs5small8SmallRngNtCsiqpdlgjB9gs_9rand_core11SeedableRng13seed_from_u64Cs2kBtuMlVFYP_22instrument_with_mutate:
  335|     14|    fn seed_from_u64(mut state: u64) -> Self {
  336|     14|        // We use PCG32 to generate a u32 sequence, and copy to the seed
  337|     14|        fn pcg32(state: &mut u64) -> [u8; 4] {
  338|     14|            const MUL: u64 = 6364136223846793005;
  339|     14|            const INC: u64 = 11634580027462260723;
  340|     14|
  341|     14|            // We advance the state first (to get away from the input value,
  342|     14|            // in case it has low Hamming Weight).
  343|     14|            *state = state.wrapping_mul(MUL).wrapping_add(INC);
  344|     14|            let state = *state;
  345|     14|
  346|     14|            // Use PCG output function with to_le to generate x:
  347|     14|            let xorshifted = (((state >> 18) ^ state) >> 27) as u32;
  348|     14|            let rot = (state >> 59) as u32;
  349|     14|            let x = xorshifted.rotate_right(rot);
  350|     14|            x.to_le_bytes()
  351|     14|        }
  352|     14|
  353|     14|        let mut seed = Self::Seed::default();
  354|     14|        let mut iter = seed.as_mut().chunks_exact_mut(4);
  355|    126|        for chunk in &mut iter {
  356|    112|            chunk.copy_from_slice(&pcg32(&mut state));
  357|    112|        }
  358|     14|        let rem = iter.into_remainder();
  359|     14|        if !rem.is_empty() {
  360|      0|            rem.copy_from_slice(&pcg32(&mut state)[..rem.len()]);
  361|     14|        }
  362|       |
  363|     14|        Self::from_seed(seed)
  364|     14|    }
_RNvNvNtCsiqpdlgjB9gs_9rand_core11SeedableRng13seed_from_u645pcg32:
  337|    112|        fn pcg32(state: &mut u64) -> [u8; 4] {
  338|    112|            const MUL: u64 = 6364136223846793005;
  339|    112|            const INC: u64 = 11634580027462260723;
  340|    112|
  341|    112|            // We advance the state first (to get away from the input value,
  342|    112|            // in case it has low Hamming Weight).
  343|    112|            *state = state.wrapping_mul(MUL).wrapping_add(INC);
  344|    112|            let state = *state;
  345|    112|
  346|    112|            // Use PCG output function with to_le to generate x:
  347|    112|            let xorshifted = (((state >> 18) ^ state) >> 27) as u32;
  348|    112|            let rot = (state >> 59) as u32;
  349|    112|            let x = xorshifted.rotate_right(rot);
  350|    112|            x.to_le_bytes()
  351|    112|        }

_RNvXso_CseBj2I0mzkGE_9termcolorINtB5_7NoColorINtNtCsbPjUxICiiFN_5alloc3vec3VechEENtB5_10WriteColor5resetCscLpLRMpPKB6_10env_logger:
 1247|    294|    fn reset(&mut self) -> io::Result<()> {
 1248|    294|        Ok(())
 1249|    294|    }
_RNvXso_CseBj2I0mzkGE_9termcolorINtB5_7NoColorINtNtCsbPjUxICiiFN_5alloc3vec3VechEENtB5_10WriteColor9set_colorCscLpLRMpPKB6_10env_logger:
 1242|    294|    fn set_color(&mut self, _: &ColorSpec) -> io::Result<()> {
 1243|    294|        Ok(())
 1244|    294|    }
_RNvXsR_CseBj2I0mzkGE_9termcolorNtB5_5ColorNtNtCs5WR7bNNc6DX_4core5clone5Clone5clone:
 1805|    196|#[derive(Clone, Copy, Debug, Eq, PartialEq)]
_RNvXsl_CseBj2I0mzkGE_9termcolorNtB5_6BufferNtB5_10WriteColor9set_color:
 1172|    294|    fn set_color(&mut self, spec: &ColorSpec) -> io::Result<()> {
 1173|    294|        match self.0 {
 1174|    294|            BufferInner::NoColor(ref mut w) => w.set_color(spec),
 1175|      0|            BufferInner::Ansi(ref mut w) => w.set_color(spec),
 1176|       |            #[cfg(windows)]
 1177|       |            BufferInner::Windows(ref mut w) => w.set_color(spec),
 1178|       |        }
 1179|    294|    }
_RNvXsl_CseBj2I0mzkGE_9termcolorNtB5_6BufferNtB5_10WriteColor5reset:
 1182|    294|    fn reset(&mut self) -> io::Result<()> {
 1183|    294|        match self.0 {
 1184|    294|            BufferInner::NoColor(ref mut w) => w.reset(),
 1185|      0|            BufferInner::Ansi(ref mut w) => w.reset(),
 1186|       |            #[cfg(windows)]
 1187|       |            BufferInner::Windows(ref mut w) => w.reset(),
 1188|       |        }
 1189|    294|    }
_RNvXsn_CseBj2I0mzkGE_9termcolorINtB5_7NoColorINtNtCsbPjUxICiiFN_5alloc3vec3VechEENtNtCsjpHxcvnKPj0_3std2io5Write5writeCscLpLRMpPKB6_10env_logger:
 1225|  1.89k|    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
 1226|  1.89k|        self.0.write(buf)
 1227|  1.89k|    }
_RNvXsL_CseBj2I0mzkGE_9termcolorNtB5_9ColorSpecNtNtCs5WR7bNNc6DX_4core5clone5Clone5clone:
 1579|    196|#[derive(Clone, Debug, Eq, PartialEq)]
_RNvXsk_CseBj2I0mzkGE_9termcolorNtB5_6BufferNtNtCsjpHxcvnKPj0_3std2io5Write5write:
 1140|  1.89k|    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
 1141|  1.89k|        match self.0 {
 1142|  1.89k|            BufferInner::NoColor(ref mut w) => w.write(buf),
 1143|      0|            BufferInner::Ansi(ref mut w) => w.write(buf),
 1144|       |            #[cfg(windows)]
 1145|       |            BufferInner::Windows(ref mut w) => w.write(buf),
 1146|       |        }
 1147|  1.89k|    }
_RNvMsB_CseBj2I0mzkGE_9termcolorINtB5_19LossyStandardStreamNtB5_16IoStandardStreamE3newB5_:
 2010|     14|    fn new(wtr: W) -> LossyStandardStream<W> {
 2011|     14|        LossyStandardStream { wtr: wtr }
 2012|     14|    }
_RNvMsv_CseBj2I0mzkGE_9termcolorNtB5_9ColorSpec6set_fg:
 1618|    294|    pub fn set_fg(&mut self, color: Option<Color>) -> &mut ColorSpec {
 1619|    294|        self.fg_color = color;
 1620|    294|        self
 1621|    294|    }
_RNvMs0_CseBj2I0mzkGE_9termcolorNtB5_11ColorChoice20should_attempt_color:
  224|      1|    fn should_attempt_color(&self) -> bool {
  225|      1|        match *self {
  226|      0|            ColorChoice::Always => true,
  227|      0|            ColorChoice::AlwaysAnsi => true,
  228|      1|            ColorChoice::Never => false,
  229|      0|            ColorChoice::Auto => self.env_allows_color(),
  230|       |        }
  231|      1|    }
_RNvMsB_CseBj2I0mzkGE_9termcolorINtB5_19LossyStandardStreamNtB5_16IoStandardStreamE7get_refB5_:
 2031|     98|    fn get_ref(&self) -> &W {
 2032|     98|        &self.wtr
 2033|     98|    }
_RNvMsj_CseBj2I0mzkGE_9termcolorNtB5_6Buffer3new:
 1035|      1|    fn new(choice: ColorChoice) -> Buffer {
 1036|      1|        if choice.should_attempt_color() {
 1037|      0|            Buffer::ansi()
 1038|       |        } else {
 1039|      1|            Buffer::no_color()
 1040|       |        }
 1041|      1|    }
_RNvMsv_CseBj2I0mzkGE_9termcolorNtB5_9ColorSpec3new:
 1608|    294|    pub fn new() -> ColorSpec {
 1609|    294|        ColorSpec::default()
 1610|    294|    }
_RNvMsi_CseBj2I0mzkGE_9termcolorNtB5_12BufferWriter6create:
  874|     14|    fn create(sty: StandardStreamType, choice: ColorChoice) -> BufferWriter {
  875|     14|        BufferWriter {
  876|     14|            stream: LossyStandardStream::new(IoStandardStream::new(sty)),
  877|     14|            printed: AtomicBool::new(false),
  878|     14|            separator: None,
  879|     14|            color_choice: choice,
  880|     14|        }
  881|     14|    }
_RNvMs1_CseBj2I0mzkGE_9termcolorNtB5_16IoStandardStream4lock:
  332|     98|    fn lock(&self) -> IoStandardStreamLock<'_> {
  333|     98|        match *self {
  334|      0|            IoStandardStream::Stdout(ref s) => {
  335|      0|                IoStandardStreamLock::StdoutLock(s.lock())
  336|       |            }
  337|     98|            IoStandardStream::Stderr(ref s) => {
  338|     98|                IoStandardStreamLock::StderrLock(s.lock())
  339|       |            }
  340|       |            IoStandardStream::StdoutBuffered(_)
  341|       |            | IoStandardStream::StderrBuffered(_) => {
  342|       |                // We don't permit this case to ever occur in the public API,
  343|       |                // so it's OK to panic.
  344|      0|                panic!("cannot lock a buffered standard stream")
  345|       |            }
  346|       |        }
  347|     98|    }
_RNvMsj_CseBj2I0mzkGE_9termcolorNtB5_6Buffer8is_empty:
 1080|     98|    pub fn is_empty(&self) -> bool {
 1081|     98|        self.len() == 0
 1082|     98|    }
_RNvXsu_CseBj2I0mzkGE_9termcolorNtB5_9ColorSpecNtNtCs5WR7bNNc6DX_4core7default7Default7default:
 1592|    294|    fn default() -> ColorSpec {
 1593|    294|        ColorSpec {
 1594|    294|            fg_color: None,
 1595|    294|            bg_color: None,
 1596|    294|            bold: false,
 1597|    294|            intense: false,
 1598|    294|            underline: false,
 1599|    294|            dimmed: false,
 1600|    294|            italic: false,
 1601|    294|            reset: true,
 1602|    294|        }
 1603|    294|    }
_RNvMs1_CseBj2I0mzkGE_9termcolorNtB5_16IoStandardStream3new:
  313|     14|    fn new(sty: StandardStreamType) -> IoStandardStream {
  314|     14|        match sty {
  315|       |            StandardStreamType::Stdout => {
  316|      0|                IoStandardStream::Stdout(io::stdout())
  317|       |            }
  318|       |            StandardStreamType::Stderr => {
  319|     14|                IoStandardStream::Stderr(io::stderr())
  320|       |            }
  321|       |            StandardStreamType::StdoutBuffered => {
  322|      0|                let wtr = io::BufWriter::new(io::stdout());
  323|      0|                IoStandardStream::StdoutBuffered(wtr)
  324|       |            }
  325|       |            StandardStreamType::StderrBuffered => {
  326|      0|                let wtr = io::BufWriter::new(io::stderr());
  327|      0|                IoStandardStream::StderrBuffered(wtr)
  328|       |            }
  329|       |        }
  330|     14|    }
_RNvMsi_CseBj2I0mzkGE_9termcolorNtB5_12BufferWriter6stderr:
  939|     14|    pub fn stderr(choice: ColorChoice) -> BufferWriter {
  940|     14|        BufferWriter::create(StandardStreamType::Stderr, choice)
  941|     14|    }
_RNvXs3_CseBj2I0mzkGE_9termcolorNtB5_20IoStandardStreamLockNtNtCsjpHxcvnKPj0_3std2io5Write5write:
  381|     98|    fn write(&mut self, b: &[u8]) -> io::Result<usize> {
  382|     98|        match *self {
  383|      0|            IoStandardStreamLock::StdoutLock(ref mut s) => s.write(b),
  384|     98|            IoStandardStreamLock::StderrLock(ref mut s) => s.write(b),
  385|       |        }
  386|     98|    }
_RNvMsB_CseBj2I0mzkGE_9termcolorINtB5_19LossyStandardStreamNtB5_20IoStandardStreamLockE3newB5_:
 2010|     98|    fn new(wtr: W) -> LossyStandardStream<W> {
 2011|     98|        LossyStandardStream { wtr: wtr }
 2012|     98|    }
_RNvMsj_CseBj2I0mzkGE_9termcolorNtB5_6Buffer8no_color:
 1064|      1|    pub fn no_color() -> Buffer {
 1065|      1|        Buffer(BufferInner::NoColor(NoColor(vec![])))
 1066|      1|    }
_RNvXsD_CseBj2I0mzkGE_9termcolorINtB5_19LossyStandardStreamNtB5_20IoStandardStreamLockENtNtCsjpHxcvnKPj0_3std2io5Write5writeB5_:
 2053|     98|    fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
 2054|     98|        self.wtr.write(buf)
 2055|     98|    }
_RNvMsj_CseBj2I0mzkGE_9termcolorNtB5_6Buffer5clear:
 1095|     98|    pub fn clear(&mut self) {
 1096|     98|        match self.0 {
 1097|     98|            BufferInner::NoColor(ref mut b) => b.0.clear(),
 1098|      0|            BufferInner::Ansi(ref mut b) => b.0.clear(),
 1099|       |            #[cfg(windows)]
 1100|       |            BufferInner::Windows(ref mut b) => b.clear(),
 1101|       |        }
 1102|     98|    }
_RNvMsv_CseBj2I0mzkGE_9termcolorNtB5_9ColorSpec11set_intense:
 1741|    196|    pub fn set_intense(&mut self, yes: bool) -> &mut ColorSpec {
 1742|    196|        self.intense = yes;
 1743|    196|        self
 1744|    196|    }
_RNvMsi_CseBj2I0mzkGE_9termcolorNtB5_12BufferWriter5print:
  974|     98|    pub fn print(&self, buf: &Buffer) -> io::Result<()> {
  975|     98|        if buf.is_empty() {
  976|      0|            return Ok(());
  977|     98|        }
  978|     98|        let mut stream = self.stream.wrap(self.stream.get_ref().lock());
  979|     98|        if let Some(ref sep) = self.separator {
  980|      0|            if self.printed.load(Ordering::SeqCst) {
  981|      0|                stream.write_all(sep)?;
  982|      0|                stream.write_all(b"\n")?;
  983|      0|            }
  984|     98|        }
  985|     98|        match buf.0 {
  986|     98|            BufferInner::NoColor(ref b) => stream.write_all(&b.0)?,
  987|      0|            BufferInner::Ansi(ref b) => stream.write_all(&b.0)?,
  988|       |            #[cfg(windows)]
  989|       |            BufferInner::Windows(ref b) => {
  990|       |                // We guarantee by construction that we have a console here.
  991|       |                // Namely, a BufferWriter is the only way to produce a Buffer.
  992|       |                let console_mutex = self
  993|       |                    .console
  994|       |                    .as_ref()
  995|       |                    .expect("got Windows buffer but have no Console");
  996|       |                let mut console = console_mutex.lock().unwrap();
  997|       |                b.print(&mut *console, &mut stream)?;
  998|       |            }
  999|       |        }
 1000|     98|        self.printed.store(true, Ordering::SeqCst);
 1001|     98|        Ok(())
 1002|     98|    }
_RINvMsB_CseBj2I0mzkGE_9termcolorINtB6_19LossyStandardStreamNtB6_16IoStandardStreamE4wrapNtB6_20IoStandardStreamLockEB6_:
 2022|     98|    fn wrap<Q: io::Write>(&self, wtr: Q) -> LossyStandardStream<Q> {
 2023|     98|        LossyStandardStream::new(wtr)
 2024|     98|    }
_RNvMsj_CseBj2I0mzkGE_9termcolorNtB5_6Buffer3len:
 1085|     98|    pub fn len(&self) -> usize {
 1086|     98|        match self.0 {
 1087|     98|            BufferInner::NoColor(ref b) => b.0.len(),
 1088|      0|            BufferInner::Ansi(ref b) => b.0.len(),
 1089|       |            #[cfg(windows)]
 1090|       |            BufferInner::Windows(ref b) => b.buf.len(),
 1091|       |        }
 1092|     98|    }
_RNvMsi_CseBj2I0mzkGE_9termcolorNtB5_12BufferWriter6buffer:
  956|      1|    pub fn buffer(&self) -> Buffer {
  957|      1|        Buffer::new(self.color_choice)
  958|      1|    }

_RNvNvNvXs0_CscLpLRMpPKB6_10env_loggerNtB9_6LoggerNtCs9Qb01qicD55_3log3Log3log9FORMATTER7___getit:
  319|     98|            unsafe fn __getit(
  320|     98|                init: $crate::option::Option<&mut $crate::option::Option<$t>>,
  321|     98|            ) -> $crate::option::Option<&'static $t> {
  322|     98|                #[cfg(all(target_family = "wasm", not(target_feature = "atomics")))]
  323|     98|                static __KEY: $crate::thread::__StaticLocalKeyInner<$t> =
  324|     98|                    $crate::thread::__StaticLocalKeyInner::new();
  325|     98|
  326|     98|                #[thread_local]
  327|     98|                #[cfg(all(
  328|     98|                    target_thread_local,
  329|     98|                    not(all(target_family = "wasm", not(target_feature = "atomics"))),
  330|     98|                ))]
  331|     98|                static __KEY: $crate::thread::__FastLocalKeyInner<$t> =
  332|     98|                    $crate::thread::__FastLocalKeyInner::new();
  333|     98|
  334|     98|                #[cfg(all(
  335|     98|                    not(target_thread_local),
  336|     98|                    not(all(target_family = "wasm", not(target_feature = "atomics"))),
  337|     98|                ))]
  338|     98|                static __KEY: $crate::thread::__OsLocalKeyInner<$t> =
  339|     98|                    $crate::thread::__OsLocalKeyInner::new();
  340|     98|
  341|     98|                // FIXME: remove the #[allow(...)] marker when macros don't
  342|     98|                // raise warning for missing/extraneous unsafe blocks anymore.
  343|     98|                // See https://github.com/rust-lang/rust/issues/74838.
  344|     98|                #[allow(unused_unsafe)]
  345|     98|                unsafe {
  346|     98|                    __KEY.get(move || {
  347|       |                        if let $crate::option::Option::Some(init) = init {
  348|       |                            if let $crate::option::Option::Some(value) = init.take() {
  349|       |                                return value;
  350|       |                            } else if $crate::cfg!(debug_assertions) {
  351|       |                                $crate::unreachable!("missing default value");
  352|       |                            }
  353|       |                        }
  354|       |                        __init()
  355|     98|                    })
  356|     98|                }
  357|     98|            }
_RNvNvNvXs0_CscLpLRMpPKB6_10env_loggerNtB9_6LoggerNtCs9Qb01qicD55_3log3Log3log9FORMATTER6___init:
  294|      1|            fn __init() -> $t { $init }

_RINvCseGO0MrGEt2t_8fvm_fuzz15stack_mutationsNCNvNvCs2kBtuMlVFYP_22instrument_with_mutate1__3run0EBM_:
   99|     14|pub fn stack_mutations<'a>(
  100|     14|    bin: Vec<u8>,
  101|     14|    raw: &mut Unstructured<'a>,
  102|     14|    mut action: impl FnMut(Vec<u8>, u64, u32, u32),
  103|     14|    max_stacked_mutations: u32,
  104|     14|    max_siblings_exploration: u32,
  105|     14|) -> Vec<u8> {
  106|     14|    let preseed: u64 = raw.arbitrary().unwrap();
  107|     14|    let mut rng = SmallRng::seed_from_u64(preseed);
  108|     14|    let mut cp = bin;
  109|     14|
  110|     14|    log::debug!("Preseed {:?}", preseed);
  111|     14|    let stacked_mutations: u32 = rng.gen_range(1..max_stacked_mutations);
  112|     14|    log::debug!("stacked_mutations: {}", stacked_mutations);
  113|       |
  114|     28|    for i in 0..=stacked_mutations {
  115|     28|        let seed = rng.gen();
  116|     28|        let mut wasm_mutate = Box::<wasm_mutate::WasmMutate<'_>>::default();
  117|     28|        wasm_mutate.seed(seed);
  118|     28|        log::debug!("Seed: {}", seed);
  119|     28|        wasm_mutate.preserve_semantics(true);
  120|     28|
  121|     28|        // TODO, set fuel as a parameter of the fuzzer, lets the fuzzer to determine if more fuel is needed
  122|     28|        wasm_mutate.fuel(500);
  123|     28|        let tomutate = cp.clone();
  124|     28|        let mut_iterator = wasm_mutate.run(&tomutate);
  125|     28|
  126|     28|        match mut_iterator {
  127|      0|            Ok(mut it) => {
  128|      0|                // lateral traversing
  129|      0|                let check_siblings: u32 = rng.gen_range(1..max_siblings_exploration);
  130|      0|                log::debug!("check_siblings: {}", check_siblings);
  131|      0|                for j in 0..=check_siblings {
  132|      0|                    let mutated_bin = it.next();
  133|       |
  134|      0|                    if let Some(mutated_bin) = mutated_bin {
  135|      0|                        match mutated_bin {
  136|      0|                            Ok(mutated_bin) => {
  137|      0|                                action(mutated_bin.clone(), seed, i, j);
  138|      0|                                swap(&mut cp, mutated_bin);
  139|      0|                            }
  140|      0|                            Err(e) => {
  141|      0|                                // Do nothing
  142|      0|                                log::debug!("Error: {:?}", e);
  143|       |                            }
  144|       |                        }
  145|      0|                    }
  146|       |                }
  147|       |            }
  148|     28|            Err(e) => {
  149|     28|                // do nothing continue
  150|     28|                log::debug!("Error: {:?}", e);
  151|       |            }
  152|       |        }
  153|       |    }
  154|     14|    cp
  155|     14|}
_RNCNvCseGO0MrGEt2t_8fvm_fuzz18get_random_fixture0B3_:
  177|  3.16k|        .map(|r| r.unwrap())
_RNvCseGO0MrGEt2t_8fvm_fuzz12get_wasm_dir:
  157|     14|fn get_wasm_dir() -> PathBuf {
  158|     14|    match env::var("OUT") {
  159|     14|        Ok(out) => {
  160|     14|            let path: PathBuf = out.into();
  161|     14|            path
  162|       |        }
  163|      0|        Err(e) => {
  164|      0|            log::debug!("Error {:?}", e);
  165|       |            // gracefully exit
  166|      0|            std::process::exit(0)
  167|       |        }
  168|       |    }
  169|     14|}
_RNvCseGO0MrGEt2t_8fvm_fuzz18get_random_fixture:
  172|     14|pub fn get_random_fixture<'a>(raw: &mut Unstructured<'a>) -> AResult<(Vec<u8>, PathBuf)> {
  173|     14|    let files = get_wasm_dir()
  174|     14|        .read_dir()
  175|     14|        .unwrap()
  176|     14|        .into_iter()
  177|     14|        .map(|r| r.unwrap())
  178|     14|        .collect::<Vec<_>>();
  179|       |
  180|     14|    let idx = raw.choose_index(files.len())?;
  181|     14|    let random_file = files[idx].path();
  182|     14|    log::debug!("Random fixture: {:?}", random_file);
  183|       |
  184|     14|    let bytes = std::fs::read(&random_file)?;
  185|       |
  186|     14|    Ok((bytes, random_file))
  187|     14|}

_RNvXs_NtCshxyxzSm1PEZ_11wasm_mutate5errorNtB4_5ErrorINtNtCs5WR7bNNc6DX_4core7convert4FromNtB4_9ErrorKindE4from:
   46|     28|    fn from(kind: ErrorKind) -> Self {
   47|     28|        Error {
   48|     28|            kind: Box::new(kind),
   49|     28|        }
   50|     28|    }
_RNvXs3_NtCshxyxzSm1PEZ_11wasm_mutate5errorNtB5_5ErrorNtNtCs5WR7bNNc6DX_4core3fmt5Debug3fmt:
    2|     28|#[derive(thiserror::Error, Debug)]
_RNvXs0_NtCshxyxzSm1PEZ_11wasm_mutate5errorNtB5_5ErrorINtNtCs5WR7bNNc6DX_4core7convert4FromNtNtCsiwKY2RDfijv_10wasmparser13binary_reader17BinaryReaderErrorE4from:
   54|     28|    fn from(e: wasmparser::BinaryReaderError) -> Self {
   55|     28|        ErrorKind::Parse(e).into()
   56|     28|    }
_RNvXs7_NtCshxyxzSm1PEZ_11wasm_mutate5errorNtB5_9ErrorKindNtNtCs5WR7bNNc6DX_4core3fmt5Debug3fmt:
   60|     28|#[derive(thiserror::Error, Debug)]

_RNvXs_NtCshxyxzSm1PEZ_11wasm_mutate4infoNtB4_10ModuleInfoNtNtCs5WR7bNNc6DX_4core7default7Default7default:
   13|     28|#[derive(Default, Clone, Debug)]
_RNvMNtCshxyxzSm1PEZ_11wasm_mutate4infoNtB2_10ModuleInfo3new:
   63|     28|    pub fn new(input_wasm: &[u8]) -> Result<ModuleInfo> {
   64|     28|        let mut parser = Parser::new(0);
   65|     28|        let mut info = ModuleInfo::default();
   66|     28|        let mut wasm = input_wasm;
   67|     28|        info.input_wasm = wasm;
   68|       |
   69|       |        loop {
   70|     28|            let (payload, consumed) = match parser.parse(wasm, true)? {
   71|      0|                Chunk::NeedMoreData(hint) => {
   72|      0|                    panic!("Invalid Wasm module {:?}", hint);
   73|       |                }
   74|      0|                Chunk::Parsed { consumed, payload } => (payload, consumed),
   75|      0|            };
   76|      0|            match payload {
   77|       |                Payload::CodeSectionStart {
   78|       |                    count: _,
   79|      0|                    range,
   80|      0|                    size: _,
   81|      0|                } => {
   82|      0|                    info.code = Some(info.raw_sections.len());
   83|      0|                    info.section(SectionId::Code.into(), range.clone(), input_wasm);
   84|      0|                    parser.skip_section();
   85|      0|                    // update slice, bypass the section
   86|      0|                    wasm = &input_wasm[range.end..];
   87|      0|
   88|      0|                    continue;
   89|       |                }
   90|      0|                Payload::TypeSection(mut reader) => {
   91|      0|                    info.types = Some(info.raw_sections.len());
   92|      0|                    info.section(SectionId::Type.into(), reader.range(), input_wasm);
   93|      0|
   94|      0|                    // Save function types
   95|      0|                    for _ in 0..reader.get_count() {
   96|      0|                        reader.read().map(|ty| {
   97|       |                            let typeinfo = TypeInfo::try_from(ty).unwrap();
   98|       |                            info.types_map.push(typeinfo);
   99|      0|                        })?;
  100|       |                    }
  101|       |                }
  102|      0|                Payload::ImportSection(mut reader) => {
  103|      0|                    info.imports = Some(info.raw_sections.len());
  104|      0|                    info.section(SectionId::Import.into(), reader.range(), input_wasm);
  105|      0|
  106|      0|                    for _ in 0..reader.get_count() {
  107|      0|                        let ty = reader.read()?;
  108|      0|                        match ty.ty {
  109|      0|                            wasmparser::TypeRef::Func(ty) => {
  110|      0|                                // Save imported functions
  111|      0|                                info.function_map.push(ty);
  112|      0|                                info.imported_functions_count += 1;
  113|      0|                            }
  114|      0|                            wasmparser::TypeRef::Global(ty) => {
  115|      0|                                let ty = PrimitiveTypeInfo::try_from(ty.content_type).unwrap();
  116|      0|                                info.global_types.push(ty);
  117|      0|                                info.imported_globals_count += 1;
  118|      0|                            }
  119|      0|                            wasmparser::TypeRef::Memory(ty) => {
  120|      0|                                info.memory_count += 1;
  121|      0|                                info.imported_memories_count += 1;
  122|      0|                                info.memory_types.push(ty);
  123|      0|                            }
  124|      0|                            wasmparser::TypeRef::Table(ty) => {
  125|      0|                                info.table_count += 1;
  126|      0|                                info.imported_tables_count += 1;
  127|      0|                                info.table_elem_types.push(ty.element_type.into());
  128|      0|                            }
  129|      0|                            wasmparser::TypeRef::Tag(_ty) => {
  130|      0|                                info.tag_count += 1;
  131|      0|                                info.imported_tags_count += 1;
  132|      0|                            }
  133|       |                        }
  134|       |                    }
  135|       |                }
  136|      0|                Payload::FunctionSection(mut reader) => {
  137|      0|                    info.functions = Some(info.raw_sections.len());
  138|      0|                    info.section(SectionId::Function.into(), reader.range(), input_wasm);
  139|      0|
  140|      0|                    for _ in 0..reader.get_count() {
  141|      0|                        reader.read().map(|ty| {
  142|       |                            info.function_map.push(ty);
  143|      0|                        })?;
  144|       |                    }
  145|       |                }
  146|      0|                Payload::TableSection(mut reader) => {
  147|      0|                    info.tables = Some(info.raw_sections.len());
  148|      0|                    info.table_count += reader.get_count();
  149|      0|                    info.section(SectionId::Table.into(), reader.range(), input_wasm);
  150|      0|
  151|      0|                    for _ in 0..reader.get_count() {
  152|      0|                        let ty = reader.read()?;
  153|      0|                        let ty = PrimitiveTypeInfo::try_from(ty.element_type).unwrap();
  154|      0|                        info.table_elem_types.push(ty);
  155|       |                    }
  156|       |                }
  157|      0|                Payload::MemorySection(mut reader) => {
  158|      0|                    info.memories = Some(info.raw_sections.len());
  159|      0|                    info.memory_count += reader.get_count();
  160|      0|                    info.section(SectionId::Memory.into(), reader.range(), input_wasm);
  161|      0|
  162|      0|                    for _ in 0..reader.get_count() {
  163|      0|                        let ty = reader.read()?;
  164|      0|                        info.memory_types.push(ty);
  165|       |                    }
  166|       |                }
  167|      0|                Payload::GlobalSection(mut reader) => {
  168|      0|                    info.globals = Some(info.raw_sections.len());
  169|      0|                    info.section(SectionId::Global.into(), reader.range(), input_wasm);
  170|      0|
  171|      0|                    for _ in 0..reader.get_count() {
  172|      0|                        let ty = reader.read()?;
  173|       |                        // We only need the type of the global, not necessarily if is mutable or not
  174|      0|                        let ty = PrimitiveTypeInfo::try_from(ty.ty.content_type).unwrap();
  175|      0|                        info.global_types.push(ty);
  176|       |                    }
  177|       |                }
  178|      0|                Payload::ExportSection(mut reader) => {
  179|      0|                    info.exports = Some(info.raw_sections.len());
  180|      0|                    info.exports_count = reader.get_count();
  181|      0|
  182|      0|                    for _ in 0..reader.get_count() {
  183|      0|                        let entry = reader.read()?;
  184|      0|                        info.export_names.insert(entry.name.into());
  185|       |                    }
  186|       |
  187|      0|                    info.section(SectionId::Export.into(), reader.range(), input_wasm);
  188|       |                }
  189|      0|                Payload::StartSection { func, range } => {
  190|      0|                    info.start = Some(info.raw_sections.len());
  191|      0|                    info.start_function = Some(func);
  192|      0|                    info.section(SectionId::Start.into(), range, input_wasm);
  193|      0|                }
  194|      0|                Payload::ElementSection(reader) => {
  195|      0|                    info.elements = Some(info.raw_sections.len());
  196|      0|                    info.elements_count = reader.get_count();
  197|      0|                    info.section(SectionId::Element.into(), reader.range(), input_wasm);
  198|      0|                }
  199|      0|                Payload::DataSection(reader) => {
  200|      0|                    info.data = Some(info.raw_sections.len());
  201|      0|                    info.data_segments_count = reader.get_count();
  202|      0|                    info.section(SectionId::Data.into(), reader.range(), input_wasm);
  203|      0|                }
  204|      0|                Payload::CustomSection(c) => {
  205|      0|                    info.section(SectionId::Custom.into(), c.range(), input_wasm);
  206|      0|                }
  207|       |                Payload::UnknownSection {
  208|      0|                    id,
  209|      0|                    contents: _,
  210|      0|                    range,
  211|      0|                } => {
  212|      0|                    info.section(id, range, input_wasm);
  213|      0|                }
  214|      0|                Payload::DataCountSection { count: _, range } => {
  215|      0|                    info.data_count = Some(info.raw_sections.len());
  216|      0|                    info.section(SectionId::DataCount.into(), range, input_wasm);
  217|      0|                }
  218|      0|                Payload::Version { .. } => {}
  219|       |                Payload::End(_) => {
  220|      0|                    break;
  221|       |                }
  222|      0|                _ => todo!("{:?} not implemented", payload),
  223|       |            }
  224|      0|            wasm = &wasm[consumed..];
  225|       |        }
  226|       |
  227|      0|        Ok(info)
  228|     28|    }

_RNvXCshxyxzSm1PEZ_11wasm_mutateNtB2_10WasmMutateNtNtCs5WR7bNNc6DX_4core7default7Default7default:
  199|     28|    fn default() -> Self {
  200|     28|        let seed = 3;
  201|     28|        WasmMutate {
  202|     28|            seed,
  203|     28|            preserve_semantics: false,
  204|     28|            reduce: false,
  205|     28|            raw_mutate_func: None,
  206|     28|            fuel: u64::MAX,
  207|     28|            rng: None,
  208|     28|            info: None,
  209|     28|        }
  210|     28|    }
_RNvMs_CshxyxzSm1PEZ_11wasm_mutateNtB4_10WasmMutate3run:
  280|     28|        self.setup(input_wasm)?;
  281|       |
  282|       |        // This macro just expands the logic to return an iterator form the
  283|       |        // mutators
  284|       |        // It simulates a circular checking of the mutators starting by a random
  285|       |        // one, returning the first one that can provides a mutation.
  286|       |        // All possible start indexes are calculated at compilation time, if N
  287|       |        // is the number of mutataros, N possible starting indexes are injected
  288|       |        // and compiled to the final code
  289|      0|        define_mutators!(
  290|       |            self,
  291|       |            (
  292|      0|                PeepholeMutator::new(2),
  293|      0|                RemoveExportMutator,
  294|      0|                RenameExportMutator { max_name_size: 100 },
  295|      0|                SnipMutator,
  296|      0|                CodemotionMutator,
  297|      0|                FunctionBodyUnreachable,
  298|      0|                AddTypeMutator {
  299|      0|                    max_params: 20,
  300|      0|                    max_results: 20,
  301|      0|                },
  302|      0|                AddFunctionMutator,
  303|      0|                RemoveSection::Custom,
  304|      0|                RemoveSection::Empty,
  305|      0|                ConstExpressionMutator::Global,
  306|      0|                ConstExpressionMutator::ElementOffset,
  307|      0|                ConstExpressionMutator::ElementFunc,
  308|      0|                RemoveItemMutator(Item::Function),
  309|      0|                RemoveItemMutator(Item::Global),
  310|      0|                RemoveItemMutator(Item::Memory),
  311|      0|                RemoveItemMutator(Item::Table),
  312|      0|                RemoveItemMutator(Item::Type),
  313|      0|                RemoveItemMutator(Item::Data),
  314|      0|                RemoveItemMutator(Item::Element),
  315|      0|                RemoveItemMutator(Item::Tag),
  316|       |                ModifyDataMutator {
  317|      0|                    max_data_size: 10 << 20, // 10MB
  318|       |                },
  319|       |            )
  320|       |        );
  321|       |
  322|      0|        Err(Error::no_mutations_applicable())
  323|     28|    }
_RNvMs_CshxyxzSm1PEZ_11wasm_mutateNtB4_10WasmMutate4fuel:
  231|     28|    pub fn fuel(&mut self, fuel: u64) -> &mut Self {
  232|     28|        self.fuel = fuel;
  233|     28|        self
  234|     28|    }
_RNvMs_CshxyxzSm1PEZ_11wasm_mutateNtB4_10WasmMutate4seed:
  218|     28|    pub fn seed(&mut self, seed: u64) -> &mut Self {
  219|     28|        self.seed = seed;
  220|     28|        self
  221|     28|    }
_RNvMs_CshxyxzSm1PEZ_11wasm_mutateNtB4_10WasmMutate5setup:
  325|     28|    fn setup(&mut self, input_wasm: &'wasm [u8]) -> Result<()> {
  326|     28|        self.info = Some(ModuleInfo::new(input_wasm)?);
  327|      0|        self.rng = Some(SmallRng::seed_from_u64(self.seed));
  328|      0|        Ok(())
  329|     28|    }
_RNvMs_CshxyxzSm1PEZ_11wasm_mutateNtB4_10WasmMutate18preserve_semantics:
  225|     28|    pub fn preserve_semantics(&mut self, preserve_semantics: bool) -> &mut Self {
  226|     28|        self.preserve_semantics = preserve_semantics;
  227|     28|        self
  228|     28|    }

_RNvMs0_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_17BinaryReaderError3eof:
   83|      2|    pub(crate) fn eof(offset: usize, needed_hint: usize) -> Self {
   84|      2|        BinaryReaderError {
   85|      2|            inner: Box::new(BinaryReaderErrorInner {
   86|      2|                message: "unexpected end-of-file".to_string(),
   87|      2|                offset,
   88|      2|                needed_hint: Some(needed_hint),
   89|      2|            }),
   90|      2|        }
   91|      2|    }
_RNvXs7_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_17BinaryReaderErrorNtNtCs5WR7bNNc6DX_4core3fmt5Debug3fmt:
   34|     28|#[derive(Debug, Clone)]
_RNvMs1_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_12BinaryReader17original_position:
  146|     56|    pub fn original_position(&self) -> usize {
  147|     56|        self.original_offset + self.position
  148|     56|    }
_RNvMs1_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_12BinaryReader15new_with_offset:
  135|     28|    pub fn new_with_offset(data: &[u8], original_offset: usize) -> BinaryReader {
  136|     28|        BinaryReader {
  137|     28|            buffer: data,
  138|     28|            position: 0,
  139|     28|            original_offset,
  140|     28|            allow_memarg64: false,
  141|     28|        }
  142|     28|    }
_RNvMs1_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_12BinaryReader19read_header_version:
 2139|     28|    pub(crate) fn read_header_version(&mut self) -> Result<u32> {
 2140|     28|        let magic_number = self.read_bytes(4)?;
 2141|     26|        if magic_number != WASM_MAGIC_NUMBER {
 2142|     26|            return Err(BinaryReaderError::new(
 2143|     26|                "magic header not detected: bad magic number",
 2144|     26|                self.original_position() - 4,
 2145|     26|            ));
 2146|      0|        }
 2147|      0|        self.read_u32()
 2148|     28|    }
_RINvMs0_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB6_17BinaryReaderError3newReEB8_:
   66|     26|    pub(crate) fn new(message: impl Into<String>, offset: usize) -> Self {
   67|     26|        let message = message.into();
   68|     26|        BinaryReaderError {
   69|     26|            inner: Box::new(BinaryReaderErrorInner {
   70|     26|                message,
   71|     26|                offset,
   72|     26|                needed_hint: None,
   73|     26|            }),
   74|     26|        }
   75|     26|    }
_RNvMs1_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_12BinaryReader10read_bytes:
  972|     28|        self.ensure_has_bytes(size)?;
  973|     26|        let start = self.position;
  974|     26|        self.position += size;
  975|     26|        Ok(&self.buffer[start..self.position])
  976|     28|    }
_RNvMs1_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_12BinaryReader16ensure_has_bytes:
  175|     28|    pub(crate) fn ensure_has_bytes(&self, len: usize) -> Result<()> {
  176|     28|        if self.position + len <= self.buffer.len() {
  177|     26|            Ok(())
  178|       |        } else {
  179|      2|            let hint = self.position + len - self.buffer.len();
  180|      2|            Err(BinaryReaderError::eof(self.original_position(), hint))
  181|       |        }
  182|     28|    }
_RNvXs9_NtCsiwKY2RDfijv_10wasmparser13binary_readerNtB5_22BinaryReaderErrorInnerNtNtCs5WR7bNNc6DX_4core3fmt5Debug3fmt:
   42|     28|#[derive(Debug, Clone)]

_RNvMNtCsiwKY2RDfijv_10wasmparser6parserNtB2_6Parser5parse:
  467|     28|    pub fn parse<'a>(&mut self, data: &'a [u8], eof: bool) -> Result<Chunk<'a>> {
  468|     28|        let (data, eof) = if usize_to_u64(data.len()) > self.max_size {
  469|      0|            (&data[..(self.max_size as usize)], true)
  470|       |        } else {
  471|     28|            (data, eof)
  472|       |        };
  473|       |        // TODO: thread through `offset: u64` to `BinaryReader`, remove
  474|       |        // the cast here.
  475|     28|        let mut reader = BinaryReader::new_with_offset(data, self.offset as usize);
  476|     28|        match self.parse_reader(&mut reader, eof) {
  477|      0|            Ok(payload) => {
  478|      0|                // Be sure to update our offset with how far we got in the
  479|      0|                // reader
  480|      0|                self.offset += usize_to_u64(reader.position);
  481|      0|                self.max_size -= usize_to_u64(reader.position);
  482|      0|                Ok(Chunk::Parsed {
  483|      0|                    consumed: reader.position,
  484|      0|                    payload,
  485|      0|                })
  486|       |            }
  487|     28|            Err(e) => {
  488|     28|                // If we're at EOF then there's no way we can recover from any
  489|     28|                // error, so continue to propagate it.
  490|     28|                if eof {
  491|     28|                    return Err(e);
  492|      0|                }
  493|      0|
  494|      0|                // If our error doesn't look like it can be resolved with more
  495|      0|                // data being pulled down, then propagate it, otherwise switch
  496|      0|                // the error to "feed me please"
  497|      0|                match e.inner.needed_hint {
  498|      0|                    Some(hint) => Ok(Chunk::NeedMoreData(usize_to_u64(hint))),
  499|      0|                    None => Err(e),
  500|       |                }
  501|       |            }
  502|       |        }
  503|     28|    }
_RNvMNtCsiwKY2RDfijv_10wasmparser6parserNtB2_6Parser3new:
  316|     28|    pub fn new(offset: u64) -> Parser {
  317|     28|        Parser {
  318|     28|            state: State::Header,
  319|     28|            offset,
  320|     28|            max_size: u64::MAX,
  321|     28|            // Assume the encoding is a module until we know otherwise
  322|     28|            encoding: Encoding::Module,
  323|     28|        }
  324|     28|    }
_RNvMNtCsiwKY2RDfijv_10wasmparser6parserNtB2_6Parser12parse_reader:
  505|     28|    fn parse_reader<'a>(
  506|     28|        &mut self,
  507|     28|        reader: &mut BinaryReader<'a>,
  508|     28|        eof: bool,
  509|     28|    ) -> Result<Payload<'a>> {
  510|     28|        use Payload::*;
  511|     28|
  512|     28|        match self.state {
  513|       |            State::Header => {
  514|     28|                let start = reader.original_position();
  515|     28|                let num = reader.read_header_version()?;
  516|      0|                self.encoding = match num {
  517|      0|                    WASM_EXPERIMENTAL_VERSION | WASM_MODULE_VERSION => Encoding::Module,
  518|      0|                    WASM_COMPONENT_VERSION => Encoding::Component,
  519|       |                    _ => {
  520|      0|                        return Err(BinaryReaderError::new(
  521|      0|                            "unknown binary version",
  522|      0|                            reader.original_position() - 4,
  523|      0|                        ))
  524|       |                    }
  525|       |                };
  526|      0|                self.state = State::SectionStart;
  527|      0|                Ok(Version {
  528|      0|                    num,
  529|      0|                    encoding: self.encoding,
  530|      0|                    range: start..reader.original_position(),
  531|      0|                })
  532|       |            }
  533|       |            State::SectionStart => {
  534|       |                // If we're at eof and there are no bytes in our buffer, then
  535|       |                // that means we reached the end of the data since it's
  536|       |                // just a bunch of sections concatenated after the header.
  537|      0|                if eof && reader.bytes_remaining() == 0 {
  538|      0|                    return Ok(Payload::End(reader.original_position()));
  539|      0|                }
  540|      0|
  541|      0|                let id_pos = reader.position;
  542|      0|                let id = reader.read_u8()?;
  543|      0|                if id & 0x80 != 0 {
  544|      0|                    return Err(BinaryReaderError::new("malformed section id", id_pos));
  545|      0|                }
  546|      0|                let len_pos = reader.position;
  547|      0|                let mut len = reader.read_var_u32()?;
  548|       |
  549|       |                // Test to make sure that this section actually fits within
  550|       |                // `Parser::max_size`. This doesn't matter for top-level modules
  551|       |                // but it is required for nested modules/components to correctly ensure
  552|       |                // that all sections live entirely within their section of the
  553|       |                // file.
  554|      0|                let section_overflow = self
  555|      0|                    .max_size
  556|      0|                    .checked_sub(usize_to_u64(reader.position))
  557|      0|                    .and_then(|s| s.checked_sub(len.into()))
  558|      0|                    .is_none();
  559|      0|                if section_overflow {
  560|      0|                    return Err(BinaryReaderError::new("section too large", len_pos));
  561|      0|                }
  562|      0|
  563|      0|                // Check for custom sections (supported by all encodings)
  564|      0|                if id == 0 {}
  565|       |
  566|      0|                match (self.encoding, id) {
  567|       |                    // Sections for both modules and components.
  568|      0|                    (_, 0) => section(reader, len, CustomSectionReader::new, CustomSection),
  569|       |
  570|       |                    // Module sections
  571|       |                    (Encoding::Module, TYPE_SECTION) => {
  572|      0|                        section(reader, len, TypeSectionReader::new, TypeSection)
  573|       |                    }
  574|       |                    (Encoding::Module, IMPORT_SECTION) => {
  575|      0|                        section(reader, len, ImportSectionReader::new, ImportSection)
  576|       |                    }
  577|       |                    (Encoding::Module, FUNCTION_SECTION) => {
  578|      0|                        section(reader, len, FunctionSectionReader::new, FunctionSection)
  579|       |                    }
  580|       |                    (Encoding::Module, TABLE_SECTION) => {
  581|      0|                        section(reader, len, TableSectionReader::new, TableSection)
  582|       |                    }
  583|       |                    (Encoding::Module, MEMORY_SECTION) => {
  584|      0|                        section(reader, len, MemorySectionReader::new, MemorySection)
  585|       |                    }
  586|       |                    (Encoding::Module, GLOBAL_SECTION) => {
  587|      0|                        section(reader, len, GlobalSectionReader::new, GlobalSection)
  588|       |                    }
  589|       |                    (Encoding::Module, EXPORT_SECTION) => {
  590|      0|                        section(reader, len, ExportSectionReader::new, ExportSection)
  591|       |                    }
  592|       |                    (Encoding::Module, START_SECTION) => {
  593|      0|                        let (func, range) = single_u32(reader, len, "start")?;
  594|      0|                        Ok(StartSection { func, range })
  595|       |                    }
  596|       |                    (Encoding::Module, ELEMENT_SECTION) => {
  597|      0|                        section(reader, len, ElementSectionReader::new, ElementSection)
  598|       |                    }
  599|       |                    (Encoding::Module, CODE_SECTION) => {
  600|      0|                        let start = reader.original_position();
  601|      0|                        let count = delimited(reader, &mut len, |r| r.read_var_u32())?;
  602|      0|                        let range = start..reader.original_position() + len as usize;
  603|      0|                        self.state = State::FunctionBody {
  604|      0|                            remaining: count,
  605|      0|                            len,
  606|      0|                        };
  607|      0|                        Ok(CodeSectionStart {
  608|      0|                            count,
  609|      0|                            range,
  610|      0|                            size: len,
  611|      0|                        })
  612|       |                    }
  613|       |                    (Encoding::Module, DATA_SECTION) => {
  614|      0|                        section(reader, len, DataSectionReader::new, DataSection)
  615|       |                    }
  616|       |                    (Encoding::Module, DATA_COUNT_SECTION) => {
  617|      0|                        let (count, range) = single_u32(reader, len, "data count")?;
  618|      0|                        Ok(DataCountSection { count, range })
  619|       |                    }
  620|       |                    (Encoding::Module, TAG_SECTION) => {
  621|      0|                        section(reader, len, TagSectionReader::new, TagSection)
  622|       |                    }
  623|       |
  624|       |                    // Component sections
  625|       |                    (Encoding::Component, COMPONENT_MODULE_SECTION)
  626|       |                    | (Encoding::Component, COMPONENT_SECTION) => {
  627|      0|                        if len as usize > MAX_WASM_MODULE_SIZE {
  628|      0|                            bail!(
  629|      0|                                len_pos,
  630|      0|                                "{} section is too large",
  631|      0|                                if id == 1 { "module" } else { "component " }
  632|       |                            );
  633|      0|                        }
  634|      0|
  635|      0|                        let range =
  636|      0|                            reader.original_position()..reader.original_position() + len as usize;
  637|      0|                        self.max_size -= u64::from(len);
  638|      0|                        self.offset += u64::from(len);
  639|      0|                        let mut parser = Parser::new(usize_to_u64(reader.original_position()));
  640|      0|                        parser.max_size = len.into();
  641|      0|
  642|      0|                        Ok(match id {
  643|      0|                            1 => ModuleSection { parser, range },
  644|      0|                            4 => ComponentSection { parser, range },
  645|      0|                            _ => unreachable!(),
  646|       |                        })
  647|       |                    }
  648|       |                    (Encoding::Component, COMPONENT_CORE_INSTANCE_SECTION) => {
  649|      0|                        section(reader, len, InstanceSectionReader::new, InstanceSection)
  650|       |                    }
  651|       |                    (Encoding::Component, COMPONENT_CORE_TYPE_SECTION) => {
  652|      0|                        section(reader, len, CoreTypeSectionReader::new, CoreTypeSection)
  653|       |                    }
  654|      0|                    (Encoding::Component, COMPONENT_INSTANCE_SECTION) => section(
  655|      0|                        reader,
  656|      0|                        len,
  657|      0|                        ComponentInstanceSectionReader::new,
  658|      0|                        ComponentInstanceSection,
  659|      0|                    ),
  660|      0|                    (Encoding::Component, COMPONENT_ALIAS_SECTION) => section(
  661|      0|                        reader,
  662|      0|                        len,
  663|      0|                        ComponentAliasSectionReader::new,
  664|      0|                        ComponentAliasSection,
  665|      0|                    ),
  666|      0|                    (Encoding::Component, COMPONENT_TYPE_SECTION) => section(
  667|      0|                        reader,
  668|      0|                        len,
  669|      0|                        ComponentTypeSectionReader::new,
  670|      0|                        ComponentTypeSection,
  671|      0|                    ),
  672|      0|                    (Encoding::Component, COMPONENT_CANONICAL_SECTION) => section(
  673|      0|                        reader,
  674|      0|                        len,
  675|      0|                        ComponentCanonicalSectionReader::new,
  676|      0|                        ComponentCanonicalSection,
  677|      0|                    ),
  678|      0|                    (Encoding::Component, COMPONENT_START_SECTION) => section(
  679|      0|                        reader,
  680|      0|                        len,
  681|      0|                        ComponentStartSectionReader::new,
  682|      0|                        ComponentStartSection,
  683|      0|                    ),
  684|      0|                    (Encoding::Component, COMPONENT_IMPORT_SECTION) => section(
  685|      0|                        reader,
  686|      0|                        len,
  687|      0|                        ComponentImportSectionReader::new,
  688|      0|                        ComponentImportSection,
  689|      0|                    ),
  690|      0|                    (Encoding::Component, COMPONENT_EXPORT_SECTION) => section(
  691|      0|                        reader,
  692|      0|                        len,
  693|      0|                        ComponentExportSectionReader::new,
  694|      0|                        ComponentExportSection,
  695|      0|                    ),
  696|      0|                    (_, id) => {
  697|      0|                        let offset = reader.original_position();
  698|      0|                        let contents = reader.read_bytes(len as usize)?;
  699|      0|                        let range = offset..offset + len as usize;
  700|      0|                        Ok(UnknownSection {
  701|      0|                            id,
  702|      0|                            contents,
  703|      0|                            range,
  704|      0|                        })
  705|       |                    }
  706|       |                }
  707|       |            }
  708|       |
  709|       |            // Once we hit 0 remaining incrementally parsed items, with 0
  710|       |            // remaining bytes in each section, we're done and can switch back
  711|       |            // to parsing sections.
  712|       |            State::FunctionBody {
  713|       |                remaining: 0,
  714|       |                len: 0,
  715|       |            } => {
  716|      0|                self.state = State::SectionStart;
  717|      0|                self.parse_reader(reader, eof)
  718|       |            }
  719|       |
  720|       |            // ... otherwise trailing bytes with no remaining entries in these
  721|       |            // sections indicates an error.
  722|      0|            State::FunctionBody { remaining: 0, len } => {
  723|      0|                debug_assert!(len > 0);
  724|      0|                let offset = reader.original_position();
  725|      0|                Err(BinaryReaderError::new(
  726|      0|                    "trailing bytes at end of section",
  727|      0|                    offset,
  728|      0|                ))
  729|       |            }
  730|       |
  731|       |            // Functions are relatively easy to parse when we know there's at
  732|       |            // least one remaining and at least one byte available to read
  733|       |            // things.
  734|       |            //
  735|       |            // We use the remaining length try to read a u32 size of the
  736|       |            // function, and using that size we require the entire function be
  737|       |            // resident in memory. This means that we're reading whole chunks of
  738|       |            // functions at a time.
  739|       |            //
  740|       |            // Limiting via `Parser::max_size` (nested parsing) happens above in
  741|       |            // `fn parse`, and limiting by our section size happens via
  742|       |            // `delimited`. Actual parsing of the function body is delegated to
  743|       |            // the caller to iterate over the `FunctionBody` structure.
  744|      0|            State::FunctionBody { remaining, mut len } => {
  745|      0|                let body = delimited(reader, &mut len, |r| {
  746|       |                    let size = r.read_var_u32()?;
  747|       |                    let offset = r.original_position();
  748|       |                    Ok(FunctionBody::new(offset, r.read_bytes(size as usize)?))
  749|      0|                })?;
  750|      0|                self.state = State::FunctionBody {
  751|      0|                    remaining: remaining - 1,
  752|      0|                    len,
  753|      0|                };
  754|      0|                Ok(CodeSectionEntry(body))
  755|       |            }
  756|       |        }
  757|     28|    }
_RNvNtCsiwKY2RDfijv_10wasmparser6parser12usize_to_u64:
  875|     28|fn usize_to_u64(a: usize) -> u64 {
  876|     28|    a.try_into().unwrap()
  877|     28|}

