_RNvXs14_NtCsd3JZix2Dmtq_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvXs_NtCsd3JZix2Dmtq_5ahash13fallback_hashNtB4_7AHasherNtNtCslwuTnKBYoK4_4core4hash6Hasher6finishCs9yIG8QDEGGn_6simple:
  212|  38.6k|    fn finish(&self) -> u64 {
  213|  38.6k|        let rot = (self.buffer & 63) as u32;
  214|  38.6k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  38.6k|    }
_RNvMNtCsd3JZix2Dmtq_5ahash13fallback_hashNtB2_7AHasher6update:
   97|  41.3k|    fn update(&mut self, new_data: u64) {
   98|  41.3k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|  41.3k|    }
_RNvXs_NtCsd3JZix2Dmtq_5ahash13fallback_hashNtB4_7AHasherNtNtCslwuTnKBYoK4_4core4hash6Hasher9write_u64Cs9yIG8QDEGGn_6simple:
  163|  38.6k|    fn write_u64(&mut self, i: u64) {
  164|  38.6k|        self.update(i as u64);
  165|  38.6k|    }
_RNvMNtCsd3JZix2Dmtq_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCs9yIG8QDEGGn_6simple:
   58|  38.6k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  38.6k|        AHasher {
   60|  38.6k|            buffer: rand_state.k0,
   61|  38.6k|            pad: rand_state.k1,
   62|  38.6k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  38.6k|        }
   64|  38.6k|    }
_RNvXs_NtCsd3JZix2Dmtq_5ahash13fallback_hashNtB4_7AHasherNtNtCslwuTnKBYoK4_4core4hash6Hasher9write_u64B6_:
  163|  2.67k|    fn write_u64(&mut self, i: u64) {
  164|  2.67k|        self.update(i as u64);
  165|  2.67k|    }
_RNvXs_NtCsd3JZix2Dmtq_5ahash13fallback_hashNtB4_7AHasherNtNtCslwuTnKBYoK4_4core4hash6Hasher6finishB6_:
  212|  2.13k|    fn finish(&self) -> u64 {
  213|  2.13k|        let rot = (self.buffer & 63) as u32;
  214|  2.13k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  2.13k|    }
_RNvMNtCsd3JZix2Dmtq_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|    534|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|    534|        AHasher {
   60|    534|            buffer: rand_state.k0,
   61|    534|            pad: rand_state.k1,
   62|    534|            extra_keys: [rand_state.k2, rand_state.k3],
   63|    534|        }
   64|    534|    }
_RNvXs4_NtCsd3JZix2Dmtq_5ahash13fallback_hashNtB5_7AHasherNtNtCslwuTnKBYoK4_4core5clone5Clone5cloneB7_:
   23|  2.13k|#[derive(Debug, Clone)]
_RNvXs_NtCsd3JZix2Dmtq_5ahash13fallback_hashNtB4_7AHasherNtNtCslwuTnKBYoK4_4core4hash6Hasher11write_usizeB6_:
  174|    534|    fn write_usize(&mut self, i: usize) {
  175|    534|        self.write_u64(i as u64);
  176|    534|    }

_RINvMs2_NtCsd3JZix2Dmtq_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECs9yIG8QDEGGn_6simple:
  186|  5.94k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  5.94k|    where
  188|  5.94k|        K: Borrow<Q>,
  189|  5.94k|        Q: Hash + Eq,
  190|  5.94k|    {
  191|  5.94k|        self.0.remove(k)
  192|  5.94k|    }
_RNvMs2_NtCsd3JZix2Dmtq_5ahash8hash_mapINtB5_8AHashMapyyE6insertCs9yIG8QDEGGn_6simple:
  164|  15.8k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  15.8k|        self.0.insert(k, v)
  166|  15.8k|    }
_RINvMs2_NtCsd3JZix2Dmtq_5ahash8hash_mapINtB6_8AHashMapyyE3getyECs9yIG8QDEGGn_6simple:
   79|  3.01k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  3.01k|    where
   81|  3.01k|        K: Borrow<Q>,
   82|  3.01k|        Q: Hash + Eq,
   83|  3.01k|    {
   84|  3.01k|        self.0.get(k)
   85|  3.01k|    }
_RNvMs0_NtCsd3JZix2Dmtq_5ahash8hash_mapINtB5_8AHashMapyyE3newCs9yIG8QDEGGn_6simple:
   35|    534|    pub fn new() -> Self {
   36|    534|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|    534|    }

_RNvNtCsd3JZix2Dmtq_5ahash10operations15folded_multiply:
   11|  82.0k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|  82.0k|    let result = (s as u128).wrapping_mul(by as u128);
   13|  82.0k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|  82.0k|}

_RNvXs2_NtCsd3JZix2Dmtq_5ahash12random_stateNtB5_11RandomStateNtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
  256|    534|    fn default() -> Self {
  257|    534|        Self::new()
  258|    534|    }
_RNCNvMs1_NtCsd3JZix2Dmtq_5ahash12random_stateNtB7_11RandomState7get_src0Cs9yIG8QDEGGn_6simple:
  184|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvXs3_NtCsd3JZix2Dmtq_5ahash12random_stateNtB5_11RandomStateNtNtCslwuTnKBYoK4_4core4hash11BuildHasher12build_hasherCs9yIG8QDEGGn_6simple:
  293|  38.6k|    fn build_hasher(&self) -> AHasher {
  294|  38.6k|        AHasher::from_random_state(self)
  295|  38.6k|    }
_RNvMs1_NtCsd3JZix2Dmtq_5ahash12random_stateNtB5_11RandomState3newCs9yIG8QDEGGn_6simple:
  196|    534|    pub fn new() -> RandomState {
  197|    534|        let src = Self::get_src();
  198|    534|        let fixed = src.get_fixed_seeds();
  199|    534|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  200|    534|    }
_RNvMs1_NtCsd3JZix2Dmtq_5ahash12random_stateNtB5_11RandomState7get_srcCs9yIG8QDEGGn_6simple:
  183|    534|    fn get_src() -> &'static dyn RandomSource {
  184|    534|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  185|    534|    }
_RNvXs_NtCsd3JZix2Dmtq_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
   96|    534|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
   97|    534|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
   98|    534|
   99|    534|        SEEDS.get_or_init(|| {
  100|       |            let mut result: [u8; 64] = [0; 64];
  101|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|       |            Box::new(result.convert())
  103|    534|        })
  104|    534|    }
_RNvMs1_NtCsd3JZix2Dmtq_5ahash12random_stateNtB5_11RandomState9from_keys:
  211|    534|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  212|    534|        let &[k0, k1, k2, k3] = a;
  213|    534|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  214|    534|        hasher.write_usize(c);
  215|    534|        let mix = |k: u64| {
  216|       |            let mut h = hasher.clone();
  217|       |            h.write_u64(k);
  218|       |            h.finish()
  219|       |        };
  220|    534|        RandomState {
  221|    534|            k0: mix(b[0]),
  222|    534|            k1: mix(b[1]),
  223|    534|            k2: mix(b[2]),
  224|    534|            k3: mix(b[3]),
  225|    534|        }
  226|    534|    }
_RNCNvMs1_NtCsd3JZix2Dmtq_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  215|  2.13k|        let mix = |k: u64| {
  216|  2.13k|            let mut h = hasher.clone();
  217|  2.13k|            h.write_u64(k);
  218|  2.13k|            h.finish()
  219|  2.13k|        };
_RNCNvXs_NtCsd3JZix2Dmtq_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
   99|      1|        SEEDS.get_or_init(|| {
  100|      1|            let mut result: [u8; 64] = [0; 64];
  101|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|      1|            Box::new(result.convert())
  103|      1|        })
_RNvMNtCsd3JZix2Dmtq_5ahash12random_stateNtB2_19DefaultRandomSource3new:
   80|      1|    fn new() -> DefaultRandomSource {
   81|      1|        DefaultRandomSource {
   82|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   83|      1|        }
   84|      1|    }
_RNvXs_NtCsd3JZix2Dmtq_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  130|    534|    fn gen_hasher_seed(&self) -> usize {
  131|    534|        let stack = self as *const _ as usize;
  132|    534|        self.counter.fetch_add(stack, Ordering::Relaxed)
  133|    534|    }

_RNvXs1m_Cs2T27F4iv48_9arbitraryThINtNtCsjwy42jpqMfb_5alloc3vec3VecNtNtCs9yIG8QDEGGn_6simple6common9OperationEENtB6_9Arbitrary19arbitrary_take_restB16_:
  579|    534|            fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  580|    534|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  581|    534|                let $last = $last::arbitrary_take_rest(u)?;
  582|    534|                Ok(($($xs,)* $last,))
  583|    534|            }
_RNvYyNtCs2T27F4iv48_9arbitrary9Arbitrary19arbitrary_take_restCs9yIG8QDEGGn_6simple:
  189|    263|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    263|        Self::arbitrary(&mut u)
  191|    263|    }
_RNvXsa_Cs2T27F4iv48_9arbitraryINtNtCsjwy42jpqMfb_5alloc3vec3VecNtNtCs9yIG8QDEGGn_6simple6common9OperationENtB5_9Arbitrary19arbitrary_take_restB13_:
  683|    534|        u.arbitrary_take_rest_iter()?.collect()
  684|    534|    }
_RNvXs1m_Cs2T27F4iv48_9arbitraryThINtNtCsjwy42jpqMfb_5alloc3vec3VecNtNtCs9yIG8QDEGGn_6simple6common9OperationEENtB6_9Arbitrary9size_hintB16_:
  586|    534|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  587|    534|                crate::size_hint::and_all(&[
  588|    534|                    <$last as Arbitrary>::size_hint(depth),
  589|    534|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  590|    534|                ])
  591|    534|            }
_RNvXsH_Cs2T27F4iv48_9arbitrarymNtB5_9Arbitrary9size_hintCs9yIG8QDEGGn_6simple:
  320|    534|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    534|                    let n = mem::size_of::<$ty>();
  322|    534|                    (n, Some(n))
  323|    534|                }
_RNvXsI_Cs2T27F4iv48_9arbitraryyNtB5_9Arbitrary9size_hintCs9yIG8QDEGGn_6simple:
  320|  1.06k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  1.06k|                    let n = mem::size_of::<$ty>();
  322|  1.06k|                    (n, Some(n))
  323|  1.06k|                }
_RNvXsa_Cs2T27F4iv48_9arbitraryINtNtCsjwy42jpqMfb_5alloc3vec3VecNtNtCs9yIG8QDEGGn_6simple6common9OperationENtB5_9Arbitrary9size_hintB13_:
  687|    534|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    534|        (0, None)
  689|    534|    }
_RNvXsF_Cs2T27F4iv48_9arbitraryhNtB5_9Arbitrary9size_hintCs9yIG8QDEGGn_6simple:
  320|    534|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    534|                    let n = mem::size_of::<$ty>();
  322|    534|                    (n, Some(n))
  323|    534|                }
_RNvXsH_Cs2T27F4iv48_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  24.8k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  24.8k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  24.8k|                    u.fill_buffer(&mut buf)?;
  312|  24.8k|                    let mut x: $unsigned = 0;
  313|  99.2k|                    for i in 0..mem::size_of::<$ty>() {
  314|  99.2k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  99.2k|                    }
  316|  24.8k|                    Ok(x as $ty)
  317|  24.8k|                }
_RNvXsF_Cs2T27F4iv48_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|    534|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|    534|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|    534|                    u.fill_buffer(&mut buf)?;
  312|    534|                    let mut x: $unsigned = 0;
  313|    534|                    for i in 0..mem::size_of::<$ty>() {
  314|    534|                        x |= buf[i] as $unsigned << (i * 8);
  315|    534|                    }
  316|    534|                    Ok(x as $ty)
  317|    534|                }
_RNvXsI_Cs2T27F4iv48_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  40.6k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  40.6k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  40.6k|                    u.fill_buffer(&mut buf)?;
  312|  40.6k|                    let mut x: $unsigned = 0;
  313|   325k|                    for i in 0..mem::size_of::<$ty>() {
  314|   325k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   325k|                    }
  316|  40.6k|                    Ok(x as $ty)
  317|  40.6k|                }

_RNvNtCs2T27F4iv48_9arbitrary9size_hint2orCs9yIG8QDEGGn_6simple:
   44|  1.06k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.06k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.06k|    let upper = lhs
   47|  1.06k|        .1
   48|  1.06k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.06k|    (lower, upper)
   50|  1.06k|}
_RNvNtCs2T27F4iv48_9arbitrary9size_hint6or_allCs9yIG8QDEGGn_6simple:
   58|    534|    if let Some(head) = hints.first().copied() {
   59|    534|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    534|}
_RINvNtCs2T27F4iv48_9arbitrary9size_hint15recursion_guardNCNvXNvNtCs9yIG8QDEGGn_6simple6common1__NtBZ_9OperationNtB4_9Arbitrary9size_hint0EB11_:
   12|    534|pub fn recursion_guard(
   13|    534|    depth: usize,
   14|    534|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    534|) -> (usize, Option<usize>) {
   16|    534|    const MAX_DEPTH: usize = 20;
   17|    534|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    534|        f(depth + 1)
   21|       |    }
   22|    534|}
_RNCNvNtCs2T27F4iv48_9arbitrary9size_hint2or0Cs9yIG8QDEGGn_6simple:
   48|  1.06k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCs2T27F4iv48_9arbitrary9size_hint3and00Cs9yIG8QDEGGn_6simple:
   28|  2.13k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs2T27F4iv48_9arbitrary9size_hint3andCs9yIG8QDEGGn_6simple:
   26|  3.20k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.20k|    let lower = lhs.0 + rhs.0;
   28|  3.20k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.20k|    (lower, upper)
   30|  3.20k|}
_RNvNtCs2T27F4iv48_9arbitrary9size_hint7and_allCs9yIG8QDEGGn_6simple:
   37|  2.67k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  2.67k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  2.67k|}
_RNCNvNtCs2T27F4iv48_9arbitrary9size_hint3and0Cs9yIG8QDEGGn_6simple:
   28|  2.67k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs2T27F4iv48_9arbitrary9size_hint15recursion_guardNCNvXNvNtCs9yIG8QDEGGn_6simple6commons_1__NtBZ_6MethodNtB4_9Arbitrary9size_hint0EB11_:
   12|    534|pub fn recursion_guard(
   13|    534|    depth: usize,
   14|    534|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    534|) -> (usize, Option<usize>) {
   16|    534|    const MAX_DEPTH: usize = 20;
   17|    534|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    534|        f(depth + 1)
   21|       |    }
   22|    534|}
_RNCNCNvNtCs2T27F4iv48_9arbitrary9size_hint2or00Cs9yIG8QDEGGn_6simple:
   48|  1.06k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));

_RINvMNtCs2T27F4iv48_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtNtCs9yIG8QDEGGn_6simple6common9OperationEB1t_:
  620|    534|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|    534|        self,
  622|    534|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|    534|        let (lower, upper) = ElementType::size_hint(0);
  624|    534|
  625|    534|        let elem_size = upper.unwrap_or(lower * 2);
  626|    534|        let elem_size = std::cmp::max(1, elem_size);
  627|    534|        let size = self.len() / elem_size;
  628|    534|        Ok(ArbitraryTakeRestIter {
  629|    534|            size,
  630|    534|            u: Some(self),
  631|    534|            _marker: PhantomData,
  632|    534|        })
  633|    534|    }
_RNvXs0_NtCs2T27F4iv48_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtNtCs9yIG8QDEGGn_6simple6common9OperationENtNtNtNtCslwuTnKBYoK4_4core4iter6traits8iterator8Iterator4nextB1f_:
  746|  25.3k|        if let Some(mut u) = self.u.take() {
  747|  24.8k|            if self.size == 1 {
  748|    532|                Some(Arbitrary::arbitrary_take_rest(u))
  749|  24.2k|            } else if self.size == 0 {
  750|      2|                None
  751|       |            } else {
  752|  24.2k|                self.size -= 1;
  753|  24.2k|                let ret = Arbitrary::arbitrary(&mut u);
  754|  24.2k|                self.u = Some(u);
  755|  24.2k|                Some(ret)
  756|       |            }
  757|       |        } else {
  758|    532|            None
  759|       |        }
  760|  25.3k|    }
_RNvMNtCs2T27F4iv48_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs9yIG8QDEGGn_6simple:
  132|  49.6k|    pub fn is_empty(&self) -> bool {
  133|  49.6k|        self.len() == 0
  134|  49.6k|    }
_RNvMNtCs2T27F4iv48_9arbitrary12unstructuredNtB2_12Unstructured3lenCs9yIG8QDEGGn_6simple:
  108|  50.1k|    pub fn len(&self) -> usize {
  109|  50.1k|        self.data.len()
  110|  50.1k|    }
_RNvMNtCs2T27F4iv48_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  66.0k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  66.0k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  66.0k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  66.0k|        for byte in buffer[n..].iter_mut() {
  525|      0|            *byte = 0;
  526|      0|        }
  527|  66.0k|        self.data = &self.data[n..];
  528|  66.0k|        Ok(())
  529|  66.0k|    }
_RNvMNtCs2T27F4iv48_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    534|    pub fn new(data: &'a [u8]) -> Self {
   86|    534|        Unstructured { data }
   87|    534|    }

_RINvNvNtCsciGbQI3tXYV_12blake2b_simd8portable14compress1_loop8as_arrayhEB6_:
   61|  6.94k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  6.94k|                &*(slice.as_ptr() as *const [_; $len])
   63|  6.94k|            }
_RINvNvNtCsciGbQI3tXYV_12blake2b_simd8portable14compress_block9as_arrayshEB6_:
  143|  16.2k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  16.2k|                let mut p = a.as_ptr();
  145|  16.2k|                ( $( {
  146|  16.2k|                    let aref = &*(p as *const [T; $len]);
  147|  16.2k|                    p = p.offset($len as isize);
  148|  16.2k|                    aref
  149|  16.2k|                }, )* )
  150|  16.2k|            }
_RINvNvMCsciGbQI3tXYV_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|  6.41k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  6.41k|                let mut p = a.as_ptr();
  145|  6.41k|                ( $( {
  146|  6.41k|                    let aref = &*(p as *const [T; $len]);
  147|  6.41k|                    p = p.offset($len as isize);
  148|  6.41k|                    aref
  149|  6.41k|                }, )* )
  150|  6.41k|            }
_RINvNvCsciGbQI3tXYV_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|  6.41k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|  6.41k|                let mut p = a.as_mut_ptr();
  242|  6.41k|                ( $( {
  243|  6.41k|                    let aref = &mut *(p as *mut [T; $len]);
  244|  6.41k|                    p = p.add($len);
  245|  6.41k|                    aref
  246|  6.41k|                }, )* )
  247|  6.41k|            }
_RINvNvNtCsciGbQI3tXYV_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  2.89k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  2.89k|                &*(slice.as_ptr() as *const [_; $len])
   63|  2.89k|            }
_RINvNvMCsciGbQI3tXYV_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|  6.41k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  6.41k|                let mut p = a.as_ptr();
  145|  6.41k|                ( $( {
  146|  6.41k|                    let aref = &*(p as *const [T; $len]);
  147|  6.41k|                    p = p.offset($len as isize);
  148|  6.41k|                    aref
  149|  6.41k|                }, )* )
  150|  6.41k|            }

_RNvNtCsciGbQI3tXYV_12blake2b_simd4guts9flag_word:
  217|  32.4k|pub(crate) fn flag_word(flag: bool) -> Word {
  218|  32.4k|    if flag {
  219|  6.41k|        !0
  220|       |    } else {
  221|  26.0k|        0
  222|       |    }
  223|  32.4k|}
_RNvMNtCsciGbQI3tXYV_12blake2b_simd4gutsNtB2_14Implementation18sse41_if_supported:
   52|  6.41k|    pub fn sse41_if_supported() -> Option<Self> {
   53|  6.41k|        // Check whether SSE4.1 support is assumed by the build.
   54|  6.41k|        #[cfg(target_feature = "sse4.1")]
   55|  6.41k|        {
   56|  6.41k|            return Some(Implementation(Platform::SSE41));
   57|  6.41k|        }
   58|  6.41k|        // Otherwise dynamically check for support if we can.
   59|  6.41k|        #[cfg(feature = "std")]
   60|  6.41k|        {
   61|  6.41k|            if is_x86_feature_detected!("sse4.1") {
   62|  6.41k|                return Some(Implementation(Platform::SSE41));
   63|  6.41k|            }
   64|  6.41k|        }
   65|  6.41k|        None
   66|  6.41k|    }
_RNvMNtCsciGbQI3tXYV_12blake2b_simd4gutsNtB2_14Implementation6detect:
   33|  6.41k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|      0|                return avx2_impl;
   35|  6.41k|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|  6.41k|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|  6.41k|            }
   42|  6.41k|        }
   43|  6.41k|        Self::portable()
   44|  6.41k|    }
_RNvNtCsciGbQI3tXYV_12blake2b_simd4guts19input_debug_asserts:
  252|  9.28k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|  9.28k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|  9.28k|    // even multiple of the block size.
  255|  9.28k|    if !finalize.yes() {
  256|  2.87k|        debug_assert!(!input.is_empty());
  257|  2.87k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|  6.41k|    }
  259|  9.28k|}
_RNvNtCsciGbQI3tXYV_12blake2b_simd4guts10count_high:
  208|  16.2k|pub(crate) fn count_high(count: Count) -> Word {
  209|  16.2k|    (count >> 8 * size_of::<Word>()) as Word
  210|  16.2k|}
_RNvMs2_NtCsciGbQI3tXYV_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytes:
  196|  19.1k|    pub fn padded_blockbytes(&self) -> usize {
  197|  19.1k|        match self {
  198|  19.1k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|  19.1k|    }
_RNvNtCsciGbQI3tXYV_12blake2b_simd4guts11final_block:
  232|  9.28k|pub fn final_block<'a>(
  233|  9.28k|    input: &'a [u8],
  234|  9.28k|    offset: usize,
  235|  9.28k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|  9.28k|    stride: Stride,
  237|  9.28k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|  9.28k|    let capped_offset = cmp::min(offset, input.len());
  239|  9.28k|    let offset_slice = &input[capped_offset..];
  240|  9.28k|    if offset_slice.len() >= BLOCKBYTES {
  241|  2.89k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  2.89k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  2.89k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|  6.39k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|  6.39k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|  9.28k|}
_RNvMs1_NtCsciGbQI3tXYV_12blake2b_simd4gutsNtB5_8LastNode3yes:
  181|  6.41k|    pub fn yes(&self) -> bool {
  182|  6.41k|        match self {
  183|      0|            LastNode::Yes => true,
  184|  6.41k|            LastNode::No => false,
  185|       |        }
  186|  6.41k|    }
_RNvMNtCsciGbQI3tXYV_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|  9.28k|    pub fn compress1_loop(
   97|  9.28k|        &self,
   98|  9.28k|        input: &[u8],
   99|  9.28k|        words: &mut [Word; 8],
  100|  9.28k|        count: Count,
  101|  9.28k|        last_node: LastNode,
  102|  9.28k|        finalize: Finalize,
  103|  9.28k|        stride: Stride,
  104|  9.28k|    ) {
  105|  9.28k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|      0|            Platform::AVX2 => unsafe {
  108|      0|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|      0|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|  9.28k|            _ => {
  113|  9.28k|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|  9.28k|            }
  115|       |        }
  116|  9.28k|    }
_RNvMNtCsciGbQI3tXYV_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supported:
   70|  6.41k|    pub fn avx2_if_supported() -> Option<Self> {
   71|  6.41k|        // Check whether AVX2 support is assumed by the build.
   72|  6.41k|        #[cfg(target_feature = "avx2")]
   73|  6.41k|        {
   74|  6.41k|            return Some(Implementation(Platform::AVX2));
   75|  6.41k|        }
   76|  6.41k|        // Otherwise dynamically check for support if we can.
   77|  6.41k|        #[cfg(feature = "std")]
   78|  6.41k|        {
   79|  6.41k|            if is_x86_feature_detected!("avx2") {
   80|  6.41k|                return Some(Implementation(Platform::AVX2));
   81|  6.41k|            }
   82|  6.41k|        }
   83|  6.41k|        None
   84|  6.41k|    }
_RNvMNtCsciGbQI3tXYV_12blake2b_simd4gutsNtB2_14Implementation8portable:
   46|  6.41k|    pub fn portable() -> Self {
   47|  6.41k|        Implementation(Platform::Portable)
   48|  6.41k|    }
_RNvMs0_NtCsciGbQI3tXYV_12blake2b_simd4gutsNtB5_8Finalize3yes:
  165|  27.8k|    pub fn yes(&self) -> bool {
  166|  27.8k|        match self {
  167|  19.2k|            Finalize::Yes => true,
  168|  8.61k|            Finalize::No => false,
  169|       |        }
  170|  27.8k|    }
_RNvNtCsciGbQI3tXYV_12blake2b_simd4guts9count_low:
  204|  16.2k|pub(crate) fn count_low(count: Count) -> Word {
  205|  16.2k|    count as Word
  206|  16.2k|}

_RNvMCsciGbQI3tXYV_12blake2b_simdNtB2_6Params11hash_lengthCs1tCIuAgDJJ6_9multihash:
  238|  6.41k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|  6.41k|        assert!(
  240|  6.41k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|  6.41k|        self.hash_length = length as u8;
  245|  6.41k|        self
  246|  6.41k|    }
_RNvMCsciGbQI3tXYV_12blake2b_simdNtB2_6Params3newCs1tCIuAgDJJ6_9multihash:
  165|  6.41k|    pub fn new() -> Self {
  166|  6.41k|        Self {
  167|  6.41k|            hash_length: OUTBYTES as u8,
  168|  6.41k|            key_length: 0,
  169|  6.41k|            key_block: [0; BLOCKBYTES],
  170|  6.41k|            salt: [0; SALTBYTES],
  171|  6.41k|            personal: [0; PERSONALBYTES],
  172|  6.41k|            // NOTE: fanout and max_depth don't default to zero!
  173|  6.41k|            fanout: 1,
  174|  6.41k|            max_depth: 1,
  175|  6.41k|            max_leaf_length: 0,
  176|  6.41k|            node_offset: 0,
  177|  6.41k|            node_depth: 0,
  178|  6.41k|            inner_hash_length: 0,
  179|  6.41k|            last_node: guts::LastNode::No,
  180|  6.41k|            implementation: guts::Implementation::detect(),
  181|  6.41k|        }
  182|  6.41k|    }
_RNvMs1_CsciGbQI3tXYV_12blake2b_simdNtB5_5State8finalize:
  482|  6.41k|    pub fn finalize(&self) -> Hash {
  483|  6.41k|        let mut words_copy = self.words;
  484|  6.41k|        self.implementation.compress1_loop(
  485|  6.41k|            &self.buf[..self.buflen as usize],
  486|  6.41k|            &mut words_copy,
  487|  6.41k|            self.count,
  488|  6.41k|            self.last_node,
  489|  6.41k|            guts::Finalize::Yes,
  490|  6.41k|            guts::Stride::Serial,
  491|  6.41k|        );
  492|  6.41k|        Hash {
  493|  6.41k|            bytes: state_words_to_bytes(&words_copy),
  494|  6.41k|            len: self.hash_length,
  495|  6.41k|        }
  496|  6.41k|    }
_RNvCsciGbQI3tXYV_12blake2b_simd20state_words_to_bytes:
  529|  6.41k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|  6.41k|    let mut bytes = [0; OUTBYTES];
  531|  6.41k|    {
  532|  6.41k|        const W: usize = size_of::<Word>();
  533|  6.41k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|  6.41k|        *refs.0 = state_words[0].to_le_bytes();
  535|  6.41k|        *refs.1 = state_words[1].to_le_bytes();
  536|  6.41k|        *refs.2 = state_words[2].to_le_bytes();
  537|  6.41k|        *refs.3 = state_words[3].to_le_bytes();
  538|  6.41k|        *refs.4 = state_words[4].to_le_bytes();
  539|  6.41k|        *refs.5 = state_words[5].to_le_bytes();
  540|  6.41k|        *refs.6 = state_words[6].to_le_bytes();
  541|  6.41k|        *refs.7 = state_words[7].to_le_bytes();
  542|  6.41k|    }
  543|  6.41k|    bytes
  544|  6.41k|}
_RNvMs4_CsciGbQI3tXYV_12blake2b_simdNtB5_4Hash8as_bytes:
  589|  6.41k|    pub fn as_bytes(&self) -> &[u8] {
  590|  6.41k|        &self.bytes[..self.len as usize]
  591|  6.41k|    }
_RNvMs1_CsciGbQI3tXYV_12blake2b_simdNtB5_5State6update:
  453|  6.41k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|  6.41k|        // If we have a partial buffer, try to complete it.
  455|  6.41k|        self.compress_buffer_if_possible(&mut input);
  456|  6.41k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|  6.41k|        // above), compress blocks directly without copying.
  458|  6.41k|        let mut end = input.len().saturating_sub(1);
  459|  6.41k|        end -= end % BLOCKBYTES;
  460|  6.41k|        if end > 0 {
  461|  2.87k|            self.implementation.compress1_loop(
  462|  2.87k|                &input[..end],
  463|  2.87k|                &mut self.words,
  464|  2.87k|                self.count,
  465|  2.87k|                self.last_node,
  466|  2.87k|                guts::Finalize::No,
  467|  2.87k|                guts::Stride::Serial,
  468|  2.87k|            );
  469|  2.87k|            self.count = self.count.wrapping_add(end as Count);
  470|  2.87k|            input = &input[end..];
  471|  3.53k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|  6.41k|        self.fill_buf(&mut input);
  477|  6.41k|        self
  478|  6.41k|    }
_RNvMCsciGbQI3tXYV_12blake2b_simdNtB2_6Params8to_words:
  185|  6.41k|    fn to_words(&self) -> [Word; 8] {
  186|  6.41k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|  6.41k|        let (personal_left, personal_right) =
  188|  6.41k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|  6.41k|        [
  190|  6.41k|            IV[0]
  191|  6.41k|                ^ self.hash_length as u64
  192|  6.41k|                ^ (self.key_length as u64) << 8
  193|  6.41k|                ^ (self.fanout as u64) << 16
  194|  6.41k|                ^ (self.max_depth as u64) << 24
  195|  6.41k|                ^ (self.max_leaf_length as u64) << 32,
  196|  6.41k|            IV[1] ^ self.node_offset,
  197|  6.41k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|  6.41k|            IV[3],
  199|  6.41k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|  6.41k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|  6.41k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|  6.41k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|  6.41k|        ]
  204|  6.41k|    }
_RNvMs1_CsciGbQI3tXYV_12blake2b_simdNtB5_5State8fill_buf:
  424|  6.41k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|  6.41k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|  6.41k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|  6.41k|        self.buflen += take as u8;
  428|  6.41k|        *input = &input[take..];
  429|  6.41k|    }
_RNvMs1_CsciGbQI3tXYV_12blake2b_simdNtB5_5State11with_params:
  406|  6.41k|    fn with_params(params: &Params) -> Self {
  407|  6.41k|        let mut state = Self {
  408|  6.41k|            words: params.to_words(),
  409|  6.41k|            count: 0,
  410|  6.41k|            buf: [0; BLOCKBYTES],
  411|  6.41k|            buflen: 0,
  412|  6.41k|            last_node: params.last_node,
  413|  6.41k|            hash_length: params.hash_length,
  414|  6.41k|            implementation: params.implementation,
  415|  6.41k|            is_keyed: params.key_length > 0,
  416|  6.41k|        };
  417|  6.41k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|  6.41k|        }
  421|  6.41k|        state
  422|  6.41k|    }
_RNvMCsciGbQI3tXYV_12blake2b_simdNtB2_6Params8to_state:
  230|  6.41k|    pub fn to_state(&self) -> State {
  231|  6.41k|        State::with_params(self)
  232|  6.41k|    }
_RNvMs1_CsciGbQI3tXYV_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|  6.41k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|  6.41k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|  6.41k|        }
  450|  6.41k|    }

_RNvNtCsciGbQI3tXYV_12blake2b_simd8portable1g:
   15|  1.55M|fn g(v: &mut [Word; 16], a: usize, b: usize, c: usize, d: usize, x: Word, y: Word) {
   16|  1.55M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(x);
   17|  1.55M|    v[d] = (v[d] ^ v[a]).rotate_right(32);
   18|  1.55M|    v[c] = v[c].wrapping_add(v[d]);
   19|  1.55M|    v[b] = (v[b] ^ v[c]).rotate_right(24);
   20|  1.55M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(y);
   21|  1.55M|    v[d] = (v[d] ^ v[a]).rotate_right(16);
   22|  1.55M|    v[c] = v[c].wrapping_add(v[d]);
   23|  1.55M|    v[b] = (v[b] ^ v[c]).rotate_right(63);
   24|  1.55M|}
_RNvNtCsciGbQI3tXYV_12blake2b_simd8portable14compress_block:
   47|  16.2k|fn compress_block(
   48|  16.2k|    block: &[u8; BLOCKBYTES],
   49|  16.2k|    words: &mut [Word; 8],
   50|  16.2k|    count: Count,
   51|  16.2k|    last_block: Word,
   52|  16.2k|    last_node: Word,
   53|  16.2k|) {
   54|  16.2k|    // Initialize the compression state.
   55|  16.2k|    let mut v = [
   56|  16.2k|        words[0],
   57|  16.2k|        words[1],
   58|  16.2k|        words[2],
   59|  16.2k|        words[3],
   60|  16.2k|        words[4],
   61|  16.2k|        words[5],
   62|  16.2k|        words[6],
   63|  16.2k|        words[7],
   64|  16.2k|        IV[0],
   65|  16.2k|        IV[1],
   66|  16.2k|        IV[2],
   67|  16.2k|        IV[3],
   68|  16.2k|        IV[4] ^ count_low(count),
   69|  16.2k|        IV[5] ^ count_high(count),
   70|  16.2k|        IV[6] ^ last_block,
   71|  16.2k|        IV[7] ^ last_node,
   72|  16.2k|    ];
   73|  16.2k|
   74|  16.2k|    // Parse the message bytes as ints in little endian order.
   75|  16.2k|    const W: usize = size_of::<Word>();
   76|  16.2k|    let msg_refs = array_refs!(block, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W);
   77|  16.2k|    let m = [
   78|  16.2k|        Word::from_le_bytes(*msg_refs.0),
   79|  16.2k|        Word::from_le_bytes(*msg_refs.1),
   80|  16.2k|        Word::from_le_bytes(*msg_refs.2),
   81|  16.2k|        Word::from_le_bytes(*msg_refs.3),
   82|  16.2k|        Word::from_le_bytes(*msg_refs.4),
   83|  16.2k|        Word::from_le_bytes(*msg_refs.5),
   84|  16.2k|        Word::from_le_bytes(*msg_refs.6),
   85|  16.2k|        Word::from_le_bytes(*msg_refs.7),
   86|  16.2k|        Word::from_le_bytes(*msg_refs.8),
   87|  16.2k|        Word::from_le_bytes(*msg_refs.9),
   88|  16.2k|        Word::from_le_bytes(*msg_refs.10),
   89|  16.2k|        Word::from_le_bytes(*msg_refs.11),
   90|  16.2k|        Word::from_le_bytes(*msg_refs.12),
   91|  16.2k|        Word::from_le_bytes(*msg_refs.13),
   92|  16.2k|        Word::from_le_bytes(*msg_refs.14),
   93|  16.2k|        Word::from_le_bytes(*msg_refs.15),
   94|  16.2k|    ];
   95|  16.2k|
   96|  16.2k|    round(0, &m, &mut v);
   97|  16.2k|    round(1, &m, &mut v);
   98|  16.2k|    round(2, &m, &mut v);
   99|  16.2k|    round(3, &m, &mut v);
  100|  16.2k|    round(4, &m, &mut v);
  101|  16.2k|    round(5, &m, &mut v);
  102|  16.2k|    round(6, &m, &mut v);
  103|  16.2k|    round(7, &m, &mut v);
  104|  16.2k|    round(8, &m, &mut v);
  105|  16.2k|    round(9, &m, &mut v);
  106|  16.2k|    round(10, &m, &mut v);
  107|  16.2k|    round(11, &m, &mut v);
  108|  16.2k|
  109|  16.2k|    words[0] ^= v[0] ^ v[8];
  110|  16.2k|    words[1] ^= v[1] ^ v[9];
  111|  16.2k|    words[2] ^= v[2] ^ v[10];
  112|  16.2k|    words[3] ^= v[3] ^ v[11];
  113|  16.2k|    words[4] ^= v[4] ^ v[12];
  114|  16.2k|    words[5] ^= v[5] ^ v[13];
  115|  16.2k|    words[6] ^= v[6] ^ v[14];
  116|  16.2k|    words[7] ^= v[7] ^ v[15];
  117|  16.2k|}
_RNvNtCsciGbQI3tXYV_12blake2b_simd8portable14compress1_loop:
  119|  9.28k|pub fn compress1_loop(
  120|  9.28k|    input: &[u8],
  121|  9.28k|    words: &mut [Word; 8],
  122|  9.28k|    mut count: Count,
  123|  9.28k|    last_node: LastNode,
  124|  9.28k|    finalize: Finalize,
  125|  9.28k|    stride: Stride,
  126|  9.28k|) {
  127|  9.28k|    input_debug_asserts(input, finalize);
  128|  9.28k|
  129|  9.28k|    let mut local_words = *words;
  130|  9.28k|
  131|  9.28k|    let mut fin_offset = input.len().saturating_sub(1);
  132|  9.28k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  133|  9.28k|    let mut buf = [0; BLOCKBYTES];
  134|  9.28k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  135|  9.28k|    let fin_last_block = flag_word(finalize.yes());
  136|  9.28k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  137|       |
  138|  9.28k|    let mut offset = 0;
  139|       |    loop {
  140|       |        let block;
  141|       |        let count_delta;
  142|       |        let last_block;
  143|       |        let last_node;
  144|  16.2k|        if offset == fin_offset {
  145|  9.28k|            block = fin_block;
  146|  9.28k|            count_delta = fin_len;
  147|  9.28k|            last_block = fin_last_block;
  148|  9.28k|            last_node = fin_last_node;
  149|  9.28k|        } else {
  150|  6.94k|            block = array_ref!(input, offset, BLOCKBYTES);
  151|  6.94k|            count_delta = BLOCKBYTES;
  152|  6.94k|            last_block = flag_word(false);
  153|  6.94k|            last_node = flag_word(false);
  154|  6.94k|        };
  155|       |
  156|  16.2k|        count = count.wrapping_add(count_delta as Count);
  157|  16.2k|        compress_block(block, &mut local_words, count, last_block, last_node);
  158|  16.2k|
  159|  16.2k|        // Check for termination before bumping the offset, to avoid overflow.
  160|  16.2k|        if offset == fin_offset {
  161|  9.28k|            break;
  162|  6.94k|        }
  163|  6.94k|
  164|  6.94k|        offset += stride.padded_blockbytes();
  165|       |    }
  166|       |
  167|  9.28k|    *words = local_words;
  168|  9.28k|}
_RNvNtCsciGbQI3tXYV_12blake2b_simd8portable5round:
   29|   194k|fn round(r: usize, m: &[Word; 16], v: &mut [Word; 16]) {
   30|   194k|    // Select the message schedule based on the round.
   31|   194k|    let s = SIGMA[r];
   32|   194k|
   33|   194k|    // Mix the columns.
   34|   194k|    g(v, 0, 4, 8, 12, m[s[0] as usize], m[s[1] as usize]);
   35|   194k|    g(v, 1, 5, 9, 13, m[s[2] as usize], m[s[3] as usize]);
   36|   194k|    g(v, 2, 6, 10, 14, m[s[4] as usize], m[s[5] as usize]);
   37|   194k|    g(v, 3, 7, 11, 15, m[s[6] as usize], m[s[7] as usize]);
   38|   194k|
   39|   194k|    // Mix the rows.
   40|   194k|    g(v, 0, 5, 10, 15, m[s[8] as usize], m[s[9] as usize]);
   41|   194k|    g(v, 1, 6, 11, 12, m[s[10] as usize], m[s[11] as usize]);
   42|   194k|    g(v, 2, 7, 8, 13, m[s[12] as usize], m[s[13] as usize]);
   43|   194k|    g(v, 3, 4, 9, 14, m[s[14] as usize], m[s[15] as usize]);
   44|   194k|}

_RNvXs1_Cs7NEH8izsvPN_12block_bufferINtB5_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerENtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
   72|  31.8k|    fn default() -> Self {
   73|  31.8k|        if BlockSize::USIZE == 0 {
   74|      0|            panic!("Block size can not be equal to zero");
   75|  31.8k|        }
   76|  31.8k|        Self {
   77|  31.8k|            buffer: Default::default(),
   78|  31.8k|            pos: 0,
   79|  31.8k|            _pd: PhantomData,
   80|  31.8k|        }
   81|  31.8k|    }
_RNvMs3_Cs7NEH8izsvPN_12block_bufferINtB5_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE17set_pos_uncheckedCs9yIG8QDEGGn_6simple:
  237|  31.8k|    fn set_pos_unchecked(&mut self, pos: usize) {
  238|  31.8k|        debug_assert!(Kind::invariant(pos, BlockSize::USIZE));
  239|  31.8k|        self.pos = pos as u8;
  240|  31.8k|    }
_RNvMs3_Cs7NEH8izsvPN_12block_bufferINtB5_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE4sizeCs9yIG8QDEGGn_6simple:
  226|  63.7k|    pub fn size(&self) -> usize {
  227|  63.7k|        BlockSize::USIZE
  228|  63.7k|    }
_RNvMs3_Cs7NEH8izsvPN_12block_bufferINtB5_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE7get_posCs9yIG8QDEGGn_6simple:
  195|  63.7k|    pub fn get_pos(&self) -> usize {
  196|  63.7k|        let pos = self.pos as usize;
  197|  63.7k|        if !Kind::invariant(pos, BlockSize::USIZE) {
  198|      0|            debug_assert!(false);
  199|       |            // SAFETY: `pos` never breaks the invariant
  200|       |            unsafe {
  201|      0|                core::hint::unreachable_unchecked();
  202|       |            }
  203|  63.7k|        }
  204|  63.7k|        pos
  205|  63.7k|    }
_RINvMs4_Cs7NEH8izsvPN_12block_bufferINtB6_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE16len64_padding_beNCNvXs3_NtCs6ps10MZLWon_4sha28core_apiNtB3r_13Sha256VarCoreNtNtCsgijOsep5vl9_6digest8core_api18VariableOutputCore22finalize_variable_core0ECs9yIG8QDEGGn_6simple:
  321|  31.8k|    pub fn len64_padding_be(&mut self, data_len: u64, compress: impl FnMut(&Block<BlockSize>)) {
  322|  31.8k|        self.digest_pad(0x80, &data_len.to_be_bytes(), compress);
  323|  31.8k|    }
_RINvMs4_Cs7NEH8izsvPN_12block_bufferINtB6_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE10digest_padNCNvXs3_NtCs6ps10MZLWon_4sha28core_apiNtB3l_13Sha256VarCoreNtNtCsgijOsep5vl9_6digest8core_api18VariableOutputCore22finalize_variable_core0ECs9yIG8QDEGGn_6simple:
  290|  31.8k|    pub fn digest_pad(
  291|  31.8k|        &mut self,
  292|  31.8k|        delim: u8,
  293|  31.8k|        suffix: &[u8],
  294|  31.8k|        mut compress: impl FnMut(&Block<BlockSize>),
  295|  31.8k|    ) {
  296|  31.8k|        if suffix.len() > BlockSize::USIZE {
  297|      0|            panic!("suffix is too long");
  298|  31.8k|        }
  299|  31.8k|        let pos = self.get_pos();
  300|  31.8k|        self.buffer[pos] = delim;
  301|  1.75M|        for b in &mut self.buffer[pos + 1..] {
  302|  1.75M|            *b = 0;
  303|  1.75M|        }
  304|       |
  305|  31.8k|        let n = self.size() - suffix.len();
  306|  31.8k|        if self.size() - pos - 1 < suffix.len() {
  307|      0|            compress(&self.buffer);
  308|      0|            let mut block = Block::<BlockSize>::default();
  309|      0|            block[n..].copy_from_slice(suffix);
  310|      0|            compress(&block);
  311|  31.8k|        } else {
  312|  31.8k|            self.buffer[n..].copy_from_slice(suffix);
  313|  31.8k|            compress(&self.buffer);
  314|  31.8k|        }
  315|  31.8k|        self.set_pos_unchecked(0)
  316|  31.8k|    }
_RINvMs3_Cs7NEH8izsvPN_12block_bufferINtB6_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE13digest_blocksNCNvXs5_NtNtCsgijOsep5vl9_6digest8core_api7wrapperINtB3o_11CoreWrapperINtNtB3q_11ct_variable21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreB1s_NtB5b_9OidSha256EENtB3s_6Update6update0ECsaIyn0od6QZl_13fvm_ipld_hamt:
  138|  31.8k|    pub fn digest_blocks(
  139|  31.8k|        &mut self,
  140|  31.8k|        mut input: &[u8],
  141|  31.8k|        mut compress: impl FnMut(&[Block<BlockSize>]),
  142|  31.8k|    ) {
  143|  31.8k|        let pos = self.get_pos();
  144|  31.8k|        // using `self.remaining()` for some reason
  145|  31.8k|        // prevents panic elimination
  146|  31.8k|        let rem = self.size() - pos;
  147|  31.8k|        let n = input.len();
  148|  31.8k|        // Note that checking condition `pos + n < BlockSize` is
  149|  31.8k|        // equivalent to checking `n < rem`, where `rem` is equal
  150|  31.8k|        // to `BlockSize - pos`. Using the latter allows us to work
  151|  31.8k|        // around compiler accounting for possible overflow of
  152|  31.8k|        // `pos + n` which results in it inserting unreachable
  153|  31.8k|        // panic branches. Using `unreachable_unchecked` in `get_pos`
  154|  31.8k|        // we convince compiler that `BlockSize - pos` never underflows.
  155|  31.8k|        if Kind::invariant(n, rem) {
  156|       |            // double slicing allows to remove panic branches
  157|  31.8k|            self.buffer[pos..][..n].copy_from_slice(input);
  158|  31.8k|            self.set_pos_unchecked(pos + n);
  159|  31.8k|            return;
  160|      0|        }
  161|      0|        if pos != 0 {
  162|      0|            let (left, right) = input.split_at(rem);
  163|      0|            input = right;
  164|      0|            self.buffer[pos..].copy_from_slice(left);
  165|      0|            compress(slice::from_ref(&self.buffer));
  166|      0|        }
  167|       |
  168|      0|        let (blocks, leftover) = Kind::split_blocks(input);
  169|      0|        if !blocks.is_empty() {
  170|      0|            compress(blocks);
  171|      0|        }
  172|       |
  173|      0|        let n = leftover.len();
  174|      0|        self.buffer[..n].copy_from_slice(leftover);
  175|      0|        self.set_pos_unchecked(n);
  176|  31.8k|    }
_RNvMs3_Cs7NEH8izsvPN_12block_bufferINtB5_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE17set_pos_uncheckedCsaIyn0od6QZl_13fvm_ipld_hamt:
  237|  31.8k|    fn set_pos_unchecked(&mut self, pos: usize) {
  238|  31.8k|        debug_assert!(Kind::invariant(pos, BlockSize::USIZE));
  239|  31.8k|        self.pos = pos as u8;
  240|  31.8k|    }
_RNvMs3_Cs7NEH8izsvPN_12block_bufferINtB5_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE7get_posCsaIyn0od6QZl_13fvm_ipld_hamt:
  195|  31.8k|    pub fn get_pos(&self) -> usize {
  196|  31.8k|        let pos = self.pos as usize;
  197|  31.8k|        if !Kind::invariant(pos, BlockSize::USIZE) {
  198|      0|            debug_assert!(false);
  199|       |            // SAFETY: `pos` never breaks the invariant
  200|       |            unsafe {
  201|      0|                core::hint::unreachable_unchecked();
  202|       |            }
  203|  31.8k|        }
  204|  31.8k|        pos
  205|  31.8k|    }
_RNvMs3_Cs7NEH8izsvPN_12block_bufferINtB5_11BlockBufferINtNtCsksfhioz3bGG_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE4sizeCsaIyn0od6QZl_13fvm_ipld_hamt:
  226|  31.8k|    pub fn size(&self) -> usize {
  227|  31.8k|        BlockSize::USIZE
  228|  31.8k|    }

_RNvXNtCs7NEH8izsvPN_12block_buffer6sealedNtB4_5EagerNtB2_6Sealed9invariant:
   16|   191k|    fn invariant(pos: usize, block_size: usize) -> bool {
   17|   191k|        pos < block_size
   18|   191k|    }

_RNvXs0_Cs4U27YvwjY9E_9byteorderNtB5_9BigEndianNtB5_9ByteOrder9write_u64Cs9yIG8QDEGGn_6simple:
 2032|  25.6k|    fn write_u64(buf: &mut [u8], n: u64) {
 2033|  25.6k|        unsafe_write_num_bytes!(u64, 8, n, buf, to_be);
 2034|  25.6k|    }

_RINvXsi_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
  317|  9.66k|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|  9.66k|        self.1.encode(writer)
  319|  9.66k|    }
_RNvMs0_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB5_7TypeNummE3newCs9yIG8QDEGGn_6simple:
   52|   172k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   172k|        TypeNum { type_, value }
   54|   172k|    }
_RINvXs1_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
   59|   164k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|   164k|        match self.value {
   61|   164k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  22.9k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|   164k|        Ok(())
   65|   164k|    }
_RINvXs2_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
   70|   166k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|   166k|        match u8::try_from(self.value) {
   72|   164k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|  2.09k|                let [x0, x1] = self.value.to_be_bytes();
   75|  2.09k|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|   166k|        Ok(())
   79|   166k|    }
_RINvXsu_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
  159|   135k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|   135k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|   135k|                }
_RINvXsd_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
  270|   129k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|   129k|        Ok(())
  272|   129k|    }
_RINvXs3_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
   84|   172k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|   172k|        match u16::try_from(self.value) {
   86|   166k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|  5.60k|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|  5.60k|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|   172k|        Ok(())
   93|   172k|    }
_RINvXs4_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
   98|   290k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|   290k|        match u32::try_from(self.value) {
  100|   172k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|   118k|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|   118k|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|   290k|        Ok(())
  107|   290k|    }
_RNvMs0_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB5_7TypeNumyE3newCs9yIG8QDEGGn_6simple:
   52|   290k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   290k|        TypeNum { type_, value }
   54|   290k|    }
_RNvMs0_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB5_7TypeNumtE3newCs9yIG8QDEGGn_6simple:
   52|   166k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   166k|        TypeNum { type_, value }
   54|   166k|    }
_RNvMs0_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtB5_7TypeNumhE3newCs9yIG8QDEGGn_6simple:
   52|   164k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   164k|        TypeNum { type_, value }
   54|   164k|    }
_RINvXs7_NtNtCs60Uy8i2jZrM_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs9yIG8QDEGGn_6simple:
  209|  16.0k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  16.0k|        writer.push(self.0)?;
  211|  16.0k|        Ok(())
  212|  16.0k|    }

_RNvXs_NtNtCs60Uy8i2jZrM_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCs9yIG8QDEGGn_6simple:
   40|   306k|        self.0.try_reserve(input.len())?;
   41|   306k|        self.0.extend_from_slice(input);
   42|   306k|        Ok(())
   43|   306k|    }
_RNvMNtNtCs60Uy8i2jZrM_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|  6.41k|    pub fn new(buf: Vec<u8>) -> Self {
   15|  6.41k|       BufWriter(buf)
   16|  6.41k|    }
_RNvMNtNtCs60Uy8i2jZrM_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|  6.41k|    pub fn into_inner(self) -> Vec<u8> {
   25|  6.41k|        self.0
   26|  6.41k|    }

_RINvMNtCs5xa1Uvnx8KY_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsjwy42jpqMfb_5alloc3vec3VechEECs9yIG8QDEGGn_6simple:
  179|  9.66k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|  9.66k|        let written = match self.version {
  181|      0|            Version::V0 => self.hash.write(w)?,
  182|  9.66k|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|  9.66k|        Ok(written)
  185|  9.66k|    }
_RINvMNtCs5xa1Uvnx8KY_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsjwy42jpqMfb_5alloc3vec3VechEECs9yIG8QDEGGn_6simple:
  162|  9.66k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|  9.66k|        let mut version_buf = varint_encode::u64_buffer();
  164|  9.66k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|  9.66k|
  166|  9.66k|        let mut codec_buf = varint_encode::u64_buffer();
  167|  9.66k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|  9.66k|
  169|  9.66k|        let mut written = version.len() + codec.len();
  170|  9.66k|
  171|  9.66k|        w.write_all(version)?;
  172|  9.66k|        w.write_all(codec)?;
  173|  9.66k|        written += self.hash.write(&mut w)?;
  174|       |
  175|  9.66k|        Ok(written)
  176|  9.66k|    }
_RNvMNtCs5xa1Uvnx8KY_3cid3cidINtB2_3CidKj40_E6new_v1Cs9yIG8QDEGGn_6simple:
   90|  6.41k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|  6.41k|        Self {
   92|  6.41k|            version: Version::V1,
   93|  6.41k|            codec,
   94|  6.41k|            hash,
   95|  6.41k|        }
   96|  6.41k|    }
_RNvMNtCs5xa1Uvnx8KY_3cid3cidINtB2_3CidKj40_E8to_bytesCs9yIG8QDEGGn_6simple:
  205|  9.66k|    pub fn to_bytes(&self) -> Vec<u8> {
  206|  9.66k|        let mut bytes = Vec::new();
  207|  9.66k|        let written = self.write_bytes(&mut bytes).unwrap();
  208|  9.66k|        debug_assert_eq!(written, bytes.len());
  209|  9.66k|        bytes
  210|  9.66k|    }
_RNvXse_NtCs5xa1Uvnx8KY_3cid3cidINtB5_3CidKj40_ENtNtCslwuTnKBYoK4_4core3cmp9PartialEq2eqCsfZY3aqbKclt_19fvm_ipld_blockstore:
   64|    755|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RINvXsk_NtCs5xa1Uvnx8KY_3cid3cidINtB6_3CidKj40_ENtNtCslwuTnKBYoK4_4core4hash4Hash4hashNtNtNtNtCslvHhjJBawO3_3std11collections4hash3map13DefaultHasherECsfZY3aqbKclt_19fvm_ipld_blockstore:
   64|  13.9k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXNtCs5xa1Uvnx8KY_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs7ck0nh2wxEq_5serde3ser9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
   29|  9.66k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|  9.66k|    where
   31|  9.66k|        S: ser::Serializer,
   32|  9.66k|    {
   33|  9.66k|        let value = ByteBuf::from(self.to_bytes());
   34|  9.66k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|  9.66k|    }

_RNvXs2_NtCs5xa1Uvnx8KY_3cid7versionNtB5_7VersionNtNtCslwuTnKBYoK4_4core3cmp9PartialEq2eqCsfZY3aqbKclt_19fvm_ipld_blockstore:
    6|    755|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RINvXsa_NtCs5xa1Uvnx8KY_3cid7versionNtB6_7VersionNtNtCslwuTnKBYoK4_4core4hash4Hash4hashNtNtNtNtCslvHhjJBawO3_3std11collections4hash3map13DefaultHasherECsfZY3aqbKclt_19fvm_ipld_blockstore:
    6|  13.9k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs0_NtCs5xa1Uvnx8KY_3cid7versionyINtNtCslwuTnKBYoK4_4core7convert4FromNtB5_7VersionE4from:
   44|  9.66k|    fn from(ver: Version) -> u64 {
   45|  9.66k|        match ver {
   46|      0|            Version::V0 => 0,
   47|  9.66k|            Version::V1 => 1,
   48|       |        }
   49|  9.66k|    }

_RNvNtNtNtCs6ps10MZLWon_4sha26sha2563x8611shani_cpuid8init_getB7_:
  149|  31.8k|            pub fn init_get() -> (InitToken, bool) {
  150|  31.8k|                let res = $crate::__unless_target_features! {
  151|       |                    $($tf),+ => {
  152|       |                        // Relaxed ordering is fine, as we only have a single atomic variable.
  153|  31.8k|                        let val = STORAGE.load(Relaxed);
  154|  31.8k|
  155|  31.8k|                        if val == UNINIT {
  156|      1|                            let res = $crate::__detect_target_features!($($tf),+);
  157|      1|                            STORAGE.store(res as u8, Relaxed);
  158|      1|                            res
  159|       |                        } else {
  160|  31.8k|                            val == 1
  161|       |                        }
  162|       |                    }
  163|       |                };
  164|       |
  165|  31.8k|                (InitToken(()), res)
  166|  31.8k|            }
_RNvNtNtNtCs6ps10MZLWon_4sha26sha2563x8611shani_cpuid3getB7_:
  178|  31.8k|            pub fn get() -> bool {
  179|  31.8k|                init_get().1
  180|  31.8k|            }

_RNvNvNtNtNtCs6ps10MZLWon_4sha26sha2563x8611shani_cpuid8init_get5cpuid:
   47|      1|        unsafe fn cpuid(leaf: u32) -> CpuidResult {
   48|      1|            __cpuid(leaf)
   49|      1|        }
_RNvNvNtNtNtCs6ps10MZLWon_4sha26sha2563x8611shani_cpuid8init_get11cpuid_count:
   52|      1|        unsafe fn cpuid_count(leaf: u32, sub_leaf: u32) -> CpuidResult {
   53|      1|            __cpuid_count(leaf, sub_leaf)
   54|      1|        }

_RNvXs3_NtNtCsgijOsep5vl9_6digest8core_api11ct_variableINtB5_21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB25_IB25_IB25_IB25_IB25_NtB27_5UTermNtNtB29_3bit2B1ENtB3i_2B0EB3w_EB3w_EB3w_EB3w_ENtB1n_9OidSha256ENtB7_15FixedOutputCore19finalize_fixed_coreCs9yIG8QDEGGn_6simple:
  114|  31.8k|    fn finalize_fixed_core(
  115|  31.8k|        &mut self,
  116|  31.8k|        buffer: &mut Buffer<Self>,
  117|  31.8k|        out: &mut GenericArray<u8, Self::OutputSize>,
  118|  31.8k|    ) {
  119|  31.8k|        let mut full_res = Default::default();
  120|  31.8k|        self.inner.finalize_variable_core(buffer, &mut full_res);
  121|  31.8k|        let n = out.len();
  122|  31.8k|        let m = full_res.len() - n;
  123|  31.8k|        match T::TRUNC_SIDE {
  124|  31.8k|            TruncSide::Left => out.copy_from_slice(&full_res[..n]),
  125|      0|            TruncSide::Right => out.copy_from_slice(&full_res[m..]),
  126|       |        }
  127|  31.8k|    }
_RNvXs4_NtNtCsgijOsep5vl9_6digest8core_api11ct_variableINtB5_21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB25_IB25_IB25_IB25_IB25_NtB27_5UTermNtNtB29_3bit2B1ENtB3i_2B0EB3w_EB3w_EB3w_EB3w_ENtB1n_9OidSha256ENtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
  139|  31.8k|    fn default() -> Self {
  140|  31.8k|        Self {
  141|  31.8k|            inner: T::new(OutSize::USIZE).unwrap(),
  142|  31.8k|            _out: PhantomData,
  143|  31.8k|        }
  144|  31.8k|    }

_RNvXs7_NtNtCsgijOsep5vl9_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB2y_IB2y_IB2y_IB2y_IB2y_NtB2A_5UTermNtNtB2C_3bit2B1ENtB3L_2B0EB3Z_EB3Z_EB3Z_EB3Z_ENtB1Q_9OidSha256EENtB9_11FixedOutput13finalize_intoCs9yIG8QDEGGn_6simple:
  170|  31.8k|    fn finalize_into(mut self, out: &mut Output<Self>) {
  171|  31.8k|        let Self { core, buffer } = &mut self;
  172|  31.8k|        core.finalize_fixed_core(buffer, out);
  173|  31.8k|    }
_RNvXsf_NtNtCsgijOsep5vl9_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB2y_IB2y_IB2y_IB2y_IB2y_NtB2A_5UTermNtNtB2C_3bit2B1ENtB3L_2B0EB3Z_EB3Z_EB3Z_EB3Z_ENtB1Q_9OidSha256EENtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
   23|  31.8k|#[derive(Clone, Default)]
_RNvXs5_NtNtCsgijOsep5vl9_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB2y_IB2y_IB2y_IB2y_IB2y_NtB2A_5UTermNtNtB2C_3bit2B1ENtB3L_2B0EB3Z_EB3Z_EB3Z_EB3Z_ENtB1Q_9OidSha256EENtB9_6Update6updateCsaIyn0od6QZl_13fvm_ipld_hamt:
  148|  31.8k|    fn update(&mut self, input: &[u8]) {
  149|  31.8k|        let Self { core, buffer } = self;
  150|  31.8k|        buffer.digest_blocks(input, |blocks| core.update_blocks(blocks));
  151|  31.8k|    }

_RNvXNtCsgijOsep5vl9_6digest6digestINtNtNtB4_8core_api7wrapper11CoreWrapperINtNtBB_11ct_variable21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB2E_IB2E_IB2E_IB2E_IB2E_NtB2G_5UTermNtNtB2I_3bit2B1ENtB3R_2B0EB45_EB45_EB45_EB45_ENtB1W_9OidSha256EENtB2_6Digest8finalizeCs9yIG8QDEGGn_6simple:
   85|  31.8k|    fn finalize(self) -> Output<Self> {
   86|  31.8k|        FixedOutput::finalize_fixed(self)
   87|  31.8k|    }
_RINvXNtCsgijOsep5vl9_6digest6digestINtNtNtB5_8core_api7wrapper11CoreWrapperINtNtBC_11ct_variable21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB2F_IB2F_IB2F_IB2F_IB2F_NtB2H_5UTermNtNtB2J_3bit2B1ENtB3S_2B0EB46_EB46_EB46_EB46_ENtB1X_9OidSha256EENtB3_6Digest6updateRShECsaIyn0od6QZl_13fvm_ipld_hamt:
   74|  31.8k|    fn update(&mut self, data: impl AsRef<[u8]>) {
   75|  31.8k|        Update::update(self, data.as_ref());
   76|  31.8k|    }

_RNvYINtNtNtCsgijOsep5vl9_6digest8core_api7wrapper11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs6ps10MZLWon_4sha28core_api13Sha256VarCoreINtNtCsksfhioz3bGG_7typenum4uint4UIntIB2s_IB2s_IB2s_IB2s_IB2s_NtB2u_5UTermNtNtB2w_3bit2B1ENtB3F_2B0EB3T_EB3T_EB3T_EB3T_ENtB1K_9OidSha256EENtB9_11FixedOutput14finalize_fixedCs9yIG8QDEGGn_6simple:
   99|  31.8k|    fn finalize_fixed(self) -> Output<Self> {
  100|  31.8k|        let mut out = Default::default();
  101|  31.8k|        self.finalize_into(&mut out);
  102|  31.8k|        out
  103|  31.8k|    }

_RINvXsb_Csd2JjQbcDtqr_17forest_hash_utilsyNtB6_4Hash4hashNtNtCsaIyn0od6QZl_13fvm_ipld_hamt14hash_algorithm17Sha2HasherWrapperECs9yIG8QDEGGn_6simple:
   27|  31.8k|            fn hash<H: Hasher>(&self, state: &mut H) {
   28|  31.8k|                state.$meth(*self)
   29|  31.8k|            }

_RNvXNtCscgdTe6UQc8_13generic_array5implsINtB4_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBY_IBY_IBY_IBY_IBY_IBY_NtB10_5UTermNtNtB12_3bit2B1ENtB2a_2B0EB2o_EB2o_EB2o_EB2o_EB2o_EENtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
   16|  31.8k|    fn default() -> Self {
   17|  31.8k|        Self::generate(|_| T::default())
   18|  31.8k|    }
_RNCNvXNtCscgdTe6UQc8_13generic_array5implsINtB6_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIB10_IB10_IB10_IB10_IB10_NtB12_5UTermNtNtB14_3bit2B1ENtB2d_2B0EB2r_EB2r_EB2r_EB2r_EENtNtCslwuTnKBYoK4_4core7default7Default7default0Cs9yIG8QDEGGn_6simple:
   17|  2.03M|        Self::generate(|_| T::default())
_RNCNvXNtCscgdTe6UQc8_13generic_array5implsINtB6_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIB10_IB10_IB10_IB10_IB10_IB10_NtB12_5UTermNtNtB14_3bit2B1ENtB2i_2B0EB2w_EB2w_EB2w_EB2w_EB2w_EENtNtCslwuTnKBYoK4_4core7default7Default7default0Cs9yIG8QDEGGn_6simple:
   17|  2.03M|        Self::generate(|_| T::default())
_RNvXNtCscgdTe6UQc8_13generic_array5implsINtB4_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBY_IBY_IBY_IBY_IBY_NtB10_5UTermNtNtB12_3bit2B1ENtB26_2B0EB2k_EB2k_EB2k_EB2k_EENtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
   16|  63.7k|    fn default() -> Self {
   17|  63.7k|        Self::generate(|_| T::default())
   18|  63.7k|    }
_RNvXs3c_NtCscgdTe6UQc8_13generic_array5implsAhj20_INtNtCslwuTnKBYoK4_4core7convert4FromINtB8_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIB1J_IB1J_IB1J_IB1J_IB1J_NtB1L_5UTermNtNtB1N_3bit2B1ENtB2W_2B0EB3a_EB3a_EB3a_EB3a_EEE4fromCs9yIG8QDEGGn_6simple:
  139|  31.8k|                fn from(sel: GenericArray<T, $ty>) -> [T; $n] {
  140|  31.8k|                    unsafe { $crate::transmute(sel) }
  141|  31.8k|                }

_RNvXs7_CscgdTe6UQc8_13generic_arrayINtB5_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB20_2B0EB2d_EB2d_EB2d_EB2d_EENtNtNtCslwuTnKBYoK4_4core3ops5deref5Deref5derefCs9yIG8QDEGGn_6simple:
  193|  95.5k|    fn deref(&self) -> &[T] {
  194|  95.5k|        unsafe { slice::from_raw_parts(self as *const Self as *const T, N::USIZE) }
  195|  95.5k|    }
_RNvMs9_CscgdTe6UQc8_13generic_arrayINtB5_12ArrayBuilderhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB20_2B0EB2d_EB2d_EB2d_EB2d_EE13iter_positionCs9yIG8QDEGGn_6simple:
  235|  63.7k|    pub unsafe fn iter_position(&mut self) -> (slice::IterMut<T>, &mut usize) {
  236|  63.7k|        ((&mut *self.array.as_mut_ptr()).iter_mut(), &mut self.position)
  237|  63.7k|    }
_RNvMs9_CscgdTe6UQc8_13generic_arrayINtB5_12ArrayBuilderhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB20_2B0EB2d_EB2d_EB2d_EB2d_EE10into_innerCs9yIG8QDEGGn_6simple:
  243|  63.7k|    pub unsafe fn into_inner(self) -> GenericArray<T, N> {
  244|  63.7k|        let array = ptr::read(&self.array);
  245|  63.7k|
  246|  63.7k|        mem::forget(self);
  247|  63.7k|
  248|  63.7k|        array.assume_init()
  249|  63.7k|    }
_RNCINvXsg_CscgdTe6UQc8_13generic_arrayINtB8_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBW_IBW_IBW_IBW_IBW_NtBY_5UTermNtNtB10_3bit2B1ENtB23_2B0EB2h_EB2h_EB2h_EB2h_EEINtNtB8_8sequence15GenericSequencehE8generateNCNvXNtB8_5implsBA_NtNtCslwuTnKBYoK4_4core7default7Default7default0E0Cs9yIG8QDEGGn_6simple:
  390|  2.03M|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|  2.03M|                    ptr::write(dst, f(i));
  392|  2.03M|
  393|  2.03M|                    *position += 1;
  394|  2.03M|                });
_RINvXsg_CscgdTe6UQc8_13generic_arrayINtB6_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EEINtNtB6_8sequence15GenericSequencehE8generateNCNvXNtB6_5implsBy_NtNtCslwuTnKBYoK4_4core7default7Default7default0ECs9yIG8QDEGGn_6simple:
  380|  63.7k|    fn generate<F>(mut f: F) -> GenericArray<T, N>
  381|  63.7k|    where
  382|  63.7k|        F: FnMut(usize) -> T,
  383|  63.7k|    {
  384|  63.7k|        unsafe {
  385|  63.7k|            let mut destination = ArrayBuilder::new();
  386|  63.7k|
  387|  63.7k|            {
  388|  63.7k|                let (destination_iter, position) = destination.iter_position();
  389|  63.7k|
  390|  63.7k|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|       |                    ptr::write(dst, f(i));
  392|       |
  393|       |                    *position += 1;
  394|  63.7k|                });
  395|  63.7k|            }
  396|  63.7k|
  397|  63.7k|            destination.into_inner()
  398|  63.7k|        }
  399|  63.7k|    }
_RNvMs9_CscgdTe6UQc8_13generic_arrayINtB5_12ArrayBuilderhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB24_2B0EB2h_EB2h_EB2h_EB2h_EB2h_EE3newCs9yIG8QDEGGn_6simple:
  222|  31.8k|    pub unsafe fn new() -> ArrayBuilder<T, N> {
  223|  31.8k|        ArrayBuilder {
  224|  31.8k|            array: MaybeUninit::uninit(),
  225|  31.8k|            position: 0,
  226|  31.8k|        }
  227|  31.8k|    }
_RNvXs8_CscgdTe6UQc8_13generic_arrayINtB5_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB20_2B0EB2d_EB2d_EB2d_EB2d_EENtNtNtCslwuTnKBYoK4_4core3ops5deref8DerefMut9deref_mutCs9yIG8QDEGGn_6simple:
  203|   127k|    fn deref_mut(&mut self) -> &mut [T] {
  204|   127k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  205|   127k|    }
_RNvMs9_CscgdTe6UQc8_13generic_arrayINtB5_12ArrayBuilderhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB24_2B0EB2h_EB2h_EB2h_EB2h_EB2h_EE10into_innerCs9yIG8QDEGGn_6simple:
  243|  31.8k|    pub unsafe fn into_inner(self) -> GenericArray<T, N> {
  244|  31.8k|        let array = ptr::read(&self.array);
  245|  31.8k|
  246|  31.8k|        mem::forget(self);
  247|  31.8k|
  248|  31.8k|        array.assume_init()
  249|  31.8k|    }
_RINvXsg_CscgdTe6UQc8_13generic_arrayINtB6_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EEINtNtB6_8sequence15GenericSequencehE8generateNCNvXNtB6_5implsBy_NtNtCslwuTnKBYoK4_4core7default7Default7default0ECs9yIG8QDEGGn_6simple:
  380|  31.8k|    fn generate<F>(mut f: F) -> GenericArray<T, N>
  381|  31.8k|    where
  382|  31.8k|        F: FnMut(usize) -> T,
  383|  31.8k|    {
  384|  31.8k|        unsafe {
  385|  31.8k|            let mut destination = ArrayBuilder::new();
  386|  31.8k|
  387|  31.8k|            {
  388|  31.8k|                let (destination_iter, position) = destination.iter_position();
  389|  31.8k|
  390|  31.8k|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|       |                    ptr::write(dst, f(i));
  392|       |
  393|       |                    *position += 1;
  394|  31.8k|                });
  395|  31.8k|            }
  396|  31.8k|
  397|  31.8k|            destination.into_inner()
  398|  31.8k|        }
  399|  31.8k|    }
_RNvMs9_CscgdTe6UQc8_13generic_arrayINtB5_12ArrayBuilderhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB20_2B0EB2d_EB2d_EB2d_EB2d_EE3newCs9yIG8QDEGGn_6simple:
  222|  63.7k|    pub unsafe fn new() -> ArrayBuilder<T, N> {
  223|  63.7k|        ArrayBuilder {
  224|  63.7k|            array: MaybeUninit::uninit(),
  225|  63.7k|            position: 0,
  226|  63.7k|        }
  227|  63.7k|    }
_RNvXs8_CscgdTe6UQc8_13generic_arrayINtB5_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB24_2B0EB2h_EB2h_EB2h_EB2h_EB2h_EENtNtNtCslwuTnKBYoK4_4core3ops5deref8DerefMut9deref_mutCs9yIG8QDEGGn_6simple:
  203|   127k|    fn deref_mut(&mut self) -> &mut [T] {
  204|   127k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  205|   127k|    }
_RINvCscgdTe6UQc8_13generic_array9transmuteINtB2_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIB10_IB10_IB10_IB10_IB10_NtB12_5UTermNtNtB14_3bit2B1ENtB2d_2B0EB2r_EB2r_EB2r_EB2r_EEAhj20_ECs9yIG8QDEGGn_6simple:
  653|  31.8k|pub unsafe fn transmute<A, B>(a: A) -> B {
  654|  31.8k|    let a = ManuallyDrop::new(a);
  655|  31.8k|    ::core::ptr::read(&*a as *const A as *const B)
  656|  31.8k|}
_RNvMs9_CscgdTe6UQc8_13generic_arrayINtB5_12ArrayBuilderhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB24_2B0EB2h_EB2h_EB2h_EB2h_EB2h_EE13iter_positionCs9yIG8QDEGGn_6simple:
  235|  31.8k|    pub unsafe fn iter_position(&mut self) -> (slice::IterMut<T>, &mut usize) {
  236|  31.8k|        ((&mut *self.array.as_mut_ptr()).iter_mut(), &mut self.position)
  237|  31.8k|    }
_RNCINvXsg_CscgdTe6UQc8_13generic_arrayINtB8_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBW_IBW_IBW_IBW_IBW_IBW_NtBY_5UTermNtNtB10_3bit2B1ENtB27_2B0EB2l_EB2l_EB2l_EB2l_EB2l_EEINtNtB8_8sequence15GenericSequencehE8generateNCNvXNtB8_5implsBA_NtNtCslwuTnKBYoK4_4core7default7Default7default0E0Cs9yIG8QDEGGn_6simple:
  390|  2.03M|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|  2.03M|                    ptr::write(dst, f(i));
  392|  2.03M|
  393|  2.03M|                    *position += 1;
  394|  2.03M|                });
_RNvXs8_CscgdTe6UQc8_13generic_arrayINtB5_12GenericArrayhINtNtCsksfhioz3bGG_7typenum4uint4UIntIBT_IBT_IBT_IBT_IBT_IBT_NtBV_5UTermNtNtBX_3bit2B1ENtB24_2B0EB2h_EB2h_EB2h_EB2h_EB2h_EENtNtNtCslwuTnKBYoK4_4core3ops5deref8DerefMut9deref_mutCsaIyn0od6QZl_13fvm_ipld_hamt:
  203|  31.8k|    fn deref_mut(&mut self) -> &mut [T] {
  204|  31.8k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  205|  31.8k|    }

_RNvCsj8ZOBEJgiM1_9getrandom16getrandom_uninitCsd3JZix2Dmtq_5ahash:
  339|      1|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  340|      1|    if !dest.is_empty() {
  341|      1|        imp::getrandom_inner(dest)?;
  342|      0|    }
  343|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  344|       |    // since it returned `Ok`.
  345|      1|    Ok(unsafe { slice_assume_init_mut(dest) })
  346|      1|}
_RNvCsj8ZOBEJgiM1_9getrandom9getrandomCsd3JZix2Dmtq_5ahash:
  313|      1|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  314|      1|    Ok(())
  315|      1|}

_RNvNtCsj8ZOBEJgiM1_9getrandom3imp15getrandom_inner:
   17|      1|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|      1|    // getrandom(2) was introduced in Linux 3.17
   19|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|      1|}
_RNCNvNtCsj8ZOBEJgiM1_9getrandom3imp15getrandom_inner0B5_:
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
_RNvNtCsj8ZOBEJgiM1_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCsj8ZOBEJgiM1_9getrandom3imp9getrandom:
   42|      2|unsafe fn getrandom(
   43|      2|    buf: *mut libc::c_void,
   44|      2|    buflen: libc::size_t,
   45|      2|    flags: libc::c_uint,
   46|      2|) -> libc::ssize_t {
   47|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|      2|}

_RINvNtCsj8ZOBEJgiM1_9getrandom4util19slice_as_uninit_muthECsd3JZix2Dmtq_5ahash:
   98|      1|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|      1|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|      1|}
_RINvNtCsj8ZOBEJgiM1_9getrandom4util21slice_assume_init_muthECsd3JZix2Dmtq_5ahash:
   74|      1|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|      1|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|      1|}
_RINvMNtCsj8ZOBEJgiM1_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|      1|        let mut val = self.0.load(Relaxed);
   49|      1|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|      1|        }
   53|      1|        val
   54|      1|    }
_RINvMs_NtCsj8ZOBEJgiM1_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
   67|      1|    }
_RNCINvMs_NtCsj8ZOBEJgiM1_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCsj8ZOBEJgiM1_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|      1|pub fn sys_fill_exact(
   68|      1|    mut buf: &mut [MaybeUninit<u8>],
   69|      1|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|      1|) -> Result<(), Error> {
   71|      2|    while !buf.is_empty() {
   72|      1|        let res = sys_fill(buf);
   73|      1|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|      1|        } else {
   80|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   81|      1|            // should be an infinite stream of random bytes.
   82|      1|            let len = min(res as usize, buf.len());
   83|      1|            buf = &mut buf[len..];
   84|      1|        }
   85|       |    }
   86|      1|    Ok(())
   87|      1|}

_RNvNvCs9yIG8QDEGGn_6simple1__19___libfuzzer_sys_run:
  303|    534|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    534|                $body
  305|    534|            }
rust_fuzzer_test_input:
  259|    534|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    534|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    534|
  262|    534|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    534|                // implementation. This helps the fuzzer avoid exploring all the
  264|    534|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    534|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    534|                // get to longer inputs that actually lead to interesting executions
  267|    534|                // quicker.
  268|    534|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|    534|                }
  271|    534|
  272|    534|                let mut u = Unstructured::new(bytes);
  273|    534|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    534|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    534|                }
  291|       |
  292|    534|                let data = match data {
  293|    534|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    534|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    534|                result.to_libfuzzer_code()
  299|    534|            }
_RNvXCs9aQQiUbXjiI_13libfuzzer_sysNtB2_6CorpusINtNtCslwuTnKBYoK4_4core7convert4FromuE4from:
   30|    534|    fn from(_: ()) -> Self {
   31|    534|        Self::Keep
   32|    534|    }
_RNvMs_Cs9aQQiUbXjiI_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|    534|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    534|        match self {
   42|    534|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    534|    }
LLVMFuzzerTestOneInput:
   58|    534|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    534|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    534|    });
   63|    534|
   64|    534|    match test_input {
   65|    534|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    534|}
_RNCNvCs9aQQiUbXjiI_13libfuzzer_sys15test_input_wrap0B3_:
   59|    534|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    534|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    534|        rust_fuzzer_test_input(data_slice)
   62|    534|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtNtCs1tCIuAgDJJ6_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|  6.41k|            fn finalize(&mut self) -> &[u8] {
   51|  6.41k|                let digest = self.state.finalize();
   52|  6.41k|                let digest_bytes = digest.as_bytes();
   53|  6.41k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|  6.41k|                digest_out.copy_from_slice(digest_bytes);
   55|  6.41k|                digest_out
   56|  6.41k|            }
_RNvXs_NtNtCs1tCIuAgDJJ6_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|  6.41k|            fn update(&mut self, input: &[u8]) {
   47|  6.41k|                self.state.update(input);
   48|  6.41k|            }
_RNvXNtNtCs1tCIuAgDJJ6_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCslwuTnKBYoK4_4core7default7Default7defaultB6_:
   35|  6.41k|            fn default() -> Self {
   36|  6.41k|                let mut params = $module::Params::new();
   37|  6.41k|                params.hash_length(S);
   38|  6.41k|                Self {
   39|  6.41k|                    state: params.to_state(),
   40|  6.41k|                    digest: [0; S],
   41|  6.41k|                }
   42|  6.41k|            }

_RNvMs_NtCs1tCIuAgDJJ6_9multihash9multihashINtB4_9MultihashKj40_E4sizeCs9yIG8QDEGGn_6simple:
  125|  9.66k|    pub const fn size(&self) -> u8 {
  126|  9.66k|        self.size
  127|  9.66k|    }
_RINvMs_NtCs1tCIuAgDJJ6_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsjwy42jpqMfb_5alloc3vec3VechEECs9yIG8QDEGGn_6simple:
  163|  9.66k|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|  9.66k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|  9.66k|    }
_RINvNtCs1tCIuAgDJJ6_9multihash9multihash15write_multihashQQINtNtCsjwy42jpqMfb_5alloc3vec3VechEECs9yIG8QDEGGn_6simple:
  310|  9.66k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|  9.66k|where
  312|  9.66k|    W: io::Write,
  313|  9.66k|{
  314|  9.66k|    let mut code_buf = varint_encode::u64_buffer();
  315|  9.66k|    let code = varint_encode::u64(code, &mut code_buf);
  316|  9.66k|
  317|  9.66k|    let mut size_buf = varint_encode::u8_buffer();
  318|  9.66k|    let size = varint_encode::u8(size, &mut size_buf);
  319|  9.66k|
  320|  9.66k|    let written = code.len() + size.len() + digest.len();
  321|  9.66k|
  322|  9.66k|    w.write_all(code)?;
  323|  9.66k|    w.write_all(size)?;
  324|  9.66k|    w.write_all(digest)?;
  325|       |
  326|  9.66k|    Ok(written)
  327|  9.66k|}
_RNvMs_NtCs1tCIuAgDJJ6_9multihash9multihashINtB4_9MultihashKj40_E4codeCs9yIG8QDEGGn_6simple:
  120|  9.66k|    pub const fn code(&self) -> u64 {
  121|  9.66k|        self.code
  122|  9.66k|    }
_RNvMs_NtCs1tCIuAgDJJ6_9multihash9multihashINtB4_9MultihashKj40_E6digestCs9yIG8QDEGGn_6simple:
  130|  9.66k|    pub fn digest(&self) -> &[u8] {
  131|  9.66k|        &self.digest[..self.size as usize]
  132|  9.66k|    }
_RINvXs0_NtCs1tCIuAgDJJ6_9multihash9multihashINtB6_9MultihashKj40_ENtNtCslwuTnKBYoK4_4core4hash4Hash4hashNtNtNtNtCslvHhjJBawO3_3std11collections4hash3map13DefaultHasherECsfZY3aqbKclt_19fvm_ipld_blockstore:
  253|  13.9k|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  254|  13.9k|        self.code.hash(state);
  255|  13.9k|        self.digest().hash(state);
  256|  13.9k|    }
_RNvMs_NtCs1tCIuAgDJJ6_9multihash9multihashINtB4_9MultihashKj40_E6digestCsfZY3aqbKclt_19fvm_ipld_blockstore:
  130|  15.4k|    pub fn digest(&self) -> &[u8] {
  131|  15.4k|        &self.digest[..self.size as usize]
  132|  15.4k|    }
_RNvXs2_NtCs1tCIuAgDJJ6_9multihash9multihashINtB5_9MultihashKj40_ENtNtCslwuTnKBYoK4_4core3cmp9PartialEq2eqCsfZY3aqbKclt_19fvm_ipld_blockstore:
  267|    755|    fn eq(&self, other: &Multihash<B>) -> bool {
  268|    755|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  269|    755|        self.code == other.code && self.digest() == other.digest()
  270|    755|    }
_RNvMs_NtCs1tCIuAgDJJ6_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|  6.41k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|  6.41k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|  6.41k|        }
  105|  6.41k|        let size = input_digest.len();
  106|  6.41k|        let mut digest = [0; S];
  107|  6.41k|        let mut i = 0;
  108|   211k|        while i < size {
  109|   205k|            digest[i] = input_digest[i];
  110|   205k|            i += 1;
  111|   205k|        }
  112|  6.41k|        Ok(Self {
  113|  6.41k|            code,
  114|  6.41k|            size: size as u8,
  115|  6.41k|            digest,
  116|  6.41k|        })
  117|  6.41k|    }

_RNvXs3_NtCs1tCIuAgDJJ6_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|  6.41k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvMs2_NtCslU6ZGDCaODm_9once_cell3impINtB5_8OnceCellNtNtCsjwy42jpqMfb_5alloc6string6StringE14is_initializedCs9yIG8QDEGGn_6simple:
   49|    534|    pub(crate) fn is_initialized(&self) -> bool {
   50|    534|        // An `Acquire` load is enough because that makes all the initialization
   51|    534|        // operations visible to us, and, this being a fast path, weaker
   52|    534|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    534|        // `SeqCst` operations on the slow path.
   54|    534|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    534|    }

_RNvMs6_NtCslU6ZGDCaODm_9once_cell6unsyncINtB5_8OnceCellINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE7get_mutCs9yIG8QDEGGn_6simple:
  510|  2.89k|        pub fn get_mut(&mut self) -> Option<&mut T> {
  511|  2.89k|            // Safe because we have unique access
  512|  2.89k|            unsafe { &mut *self.inner.get() }.as_mut()
  513|  2.89k|        }
_RNvMs4_NtCslU6ZGDCaODm_9once_cell4syncINtB5_8OnceCellNtNtCsjwy42jpqMfb_5alloc6string6StringE3getCs9yIG8QDEGGn_6simple:
  965|    534|        pub fn get(&self) -> Option<&T> {
  966|    534|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    534|                None
  971|       |            }
  972|    534|        }
_RINvMs6_NtCslU6ZGDCaODm_9once_cell6unsyncINtB6_8OnceCellINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_12modify_valueRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs9yIG8QDEGGn_6simple:
  624|  2.28k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  2.28k|        where
  626|  2.28k|            F: FnOnce() -> Result<T, E>,
  627|  2.28k|        {
  628|  2.28k|            if let Some(val) = self.get() {
  629|  2.28k|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  2.28k|        }
_RINvMs6_NtCslU6ZGDCaODm_9once_cell6unsyncINtB6_8OnceCellINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_8rm_valueyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs9yIG8QDEGGn_6simple:
  624|    613|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|    613|        where
  626|    613|            F: FnOnce() -> Result<T, E>,
  627|    613|        {
  628|    613|            if let Some(val) = self.get() {
  629|    613|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|    613|        }
_RNvXs5_NtCslU6ZGDCaODm_9once_cell6unsyncINtB5_8OnceCellINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEEINtNtCslwuTnKBYoK4_4core7convert4FromBR_E4fromCs9yIG8QDEGGn_6simple:
  465|  3.04k|        fn from(value: T) -> Self {
  466|  3.04k|            OnceCell::with_value(value)
  467|  3.04k|        }
_RNvMs6_NtCslU6ZGDCaODm_9once_cell6unsyncINtB5_8OnceCellINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE10with_valueCs9yIG8QDEGGn_6simple:
  477|  3.04k|        pub const fn with_value(value: T) -> OnceCell<T> {
  478|  3.04k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  479|  3.04k|        }
_RINvMs6_NtCslU6ZGDCaODm_9once_cell6unsyncINtB6_8OnceCellINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_9get_valueyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs9yIG8QDEGGn_6simple:
  624|    468|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|    468|        where
  626|    468|            F: FnOnce() -> Result<T, E>,
  627|    468|        {
  628|    468|            if let Some(val) = self.get() {
  629|    468|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|    468|        }
_RNvMs6_NtCslU6ZGDCaODm_9once_cell6unsyncINtB5_8OnceCellINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE3getCs9yIG8QDEGGn_6simple:
  485|  3.36k|        pub fn get(&self) -> Option<&T> {
  486|  3.36k|            // Safe due to `inner`'s invariant of being written to at most once.
  487|  3.36k|            // Had multiple writes to `inner` been allowed, a reference to the
  488|  3.36k|            // value we return now would become dangling by a write of a
  489|  3.36k|            // different value later.
  490|  3.36k|            unsafe { &*self.inner.get() }.as_ref()
  491|  3.36k|        }

_RINvMs1_NtNtCslU6ZGDCaODm_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsjwy42jpqMfb_5alloc5boxed3BoxDNtNtCsd3JZix2Dmtq_5ahash12random_state12RandomSourceNtNtCslwuTnKBYoK4_4core6marker4SyncNtB2s_4SendEL_EE11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0ECs9yIG8QDEGGn_6simple:
  367|    534|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|    534|        where
  369|    534|            F: FnOnce() -> Box<T>,
  370|    534|        {
  371|    534|            enum Void {}
  372|    534|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|    534|                Ok(val) => val,
  374|    534|                Err(void) => match void {},
  375|    534|            }
  376|    534|        }
_RNCINvMs1_NtNtCslU6ZGDCaODm_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCsjwy42jpqMfb_5alloc5boxed3BoxDNtNtCsd3JZix2Dmtq_5ahash12random_state12RandomSourceNtNtCslwuTnKBYoK4_4core6marker4SyncNtB2u_4SendEL_EE11get_or_initNCNvMs1_B1E_NtB1E_11RandomState7get_src0E0Cs9yIG8QDEGGn_6simple:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCslU6ZGDCaODm_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsjwy42jpqMfb_5alloc5boxed3BoxDNtNtCsd3JZix2Dmtq_5ahash12random_state12RandomSourceNtNtCslwuTnKBYoK4_4core6marker4SyncNtB2s_4SendEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECs9yIG8QDEGGn_6simple:
  385|    534|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|    534|        where
  387|    534|            F: FnOnce() -> Result<Box<T>, E>,
  388|    534|        {
  389|    534|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|    534|
  391|    534|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|    533|            };
  405|    534|            Ok(unsafe { &*ptr })
  406|    534|        }
_RNCINvMs1_NtNtCslU6ZGDCaODm_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCsd3JZix2Dmtq_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCslU6ZGDCaODm_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCsd3JZix2Dmtq_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  367|    534|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|    534|        where
  369|    534|            F: FnOnce() -> Box<T>,
  370|    534|        {
  371|    534|            enum Void {}
  372|    534|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|    534|                Ok(val) => val,
  374|    534|                Err(void) => match void {},
  375|    534|            }
  376|    534|        }
_RINvMs1_NtNtCslU6ZGDCaODm_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCsd3JZix2Dmtq_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  385|    534|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|    534|        where
  387|    534|            F: FnOnce() -> Result<Box<T>, E>,
  388|    534|        {
  389|    534|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|    534|
  391|    534|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|    533|            };
  405|    534|            Ok(unsafe { &*ptr })
  406|    534|        }

_RINvXs1p_NtNtCs7ck0nh2wxEq_5serde3ser5implsTRNtNtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfield8BitfieldRINtNtCsjwy42jpqMfb_5alloc3vec3VecINtNtBL_7pointer7PointeryyNtNtBL_14hash_algorithm6Sha256EEENtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  361|  6.41k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  362|  6.41k|                where
  363|  6.41k|                    S: Serializer,
  364|  6.41k|                {
  365|  6.41k|                    let mut tuple = tri!(serializer.serialize_tuple($len));
  366|       |                    $(
  367|  6.41k|                        tri!(tuple.serialize_element(&self.$n));
  368|       |                    )+
  369|  6.41k|                    tuple.end()
  370|  6.41k|                }
_RINvXs1G_NtNtCs7ck0nh2wxEq_5serde3ser5implsRNtNtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfield8BitfieldNtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  452|  6.41k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  6.41k|            where
  454|  6.41k|                S: Serializer,
  455|  6.41k|            {
  456|  6.41k|                (**self).serialize(serializer)
  457|  6.41k|            }
_RINvXs1m_NtNtCs7ck0nh2wxEq_5serde3ser5implsINtNtCsjwy42jpqMfb_5alloc3vec3VecINtCsaIyn0od6QZl_13fvm_ipld_hamt12KeyValuePairyyEENtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  190|  48.6k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|  48.6k|            where
  192|  48.6k|                S: Serializer,
  193|  48.6k|            {
  194|  48.6k|                serializer.collect_seq(self)
  195|  48.6k|            }
_RINvXs1I_NtNtCs7ck0nh2wxEq_5serde3ser5implsINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1j_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  452|  3.04k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  3.04k|            where
  454|  3.04k|                S: Serializer,
  455|  3.04k|            {
  456|  3.04k|                (**self).serialize(serializer)
  457|  3.04k|            }
_RINvXs1G_NtNtCs7ck0nh2wxEq_5serde3ser5implsRINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtBL_14hash_algorithm6Sha256ENtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  452|  58.3k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  58.3k|            where
  454|  58.3k|                S: Serializer,
  455|  58.3k|            {
  456|  58.3k|                (**self).serialize(serializer)
  457|  58.3k|            }
_RINvXs1m_NtNtCs7ck0nh2wxEq_5serde3ser5implsINtNtCsjwy42jpqMfb_5alloc3vec3VecINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtB1h_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  190|  6.41k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|  6.41k|            where
  192|  6.41k|                S: Serializer,
  193|  6.41k|            {
  194|  6.41k|                serializer.collect_seq(self)
  195|  6.41k|            }
_RINvXsH_NtNtCs7ck0nh2wxEq_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
   11|   135k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|   135k|            where
   13|   135k|                S: Serializer,
   14|   135k|            {
   15|   135k|                serializer.$method(*self $($cast)*)
   16|   135k|            }
_RINvXs1G_NtNtCs7ck0nh2wxEq_5serde3ser5implsRINtNtCsjwy42jpqMfb_5alloc3vec3VecINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtB1i_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  452|  6.41k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  6.41k|            where
  454|  6.41k|                S: Serializer,
  455|  6.41k|            {
  456|  6.41k|                (**self).serialize(serializer)
  457|  6.41k|            }
_RINvXs1G_NtNtCs7ck0nh2wxEq_5serde3ser5implsRINtCsaIyn0od6QZl_13fvm_ipld_hamt12KeyValuePairyyENtB9_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  452|  67.7k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  67.7k|            where
  454|  67.7k|                S: Serializer,
  455|  67.7k|            {
  456|  67.7k|                (**self).serialize(serializer)
  457|  67.7k|            }

_RINvYQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer11collect_seqRINtNtCsjwy42jpqMfb_5alloc3vec3VecINtCsaIyn0od6QZl_13fvm_ipld_hamt12KeyValuePairyyEEECs9yIG8QDEGGn_6simple:
 1271|  48.6k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  48.6k|    where
 1273|  48.6k|        I: IntoIterator,
 1274|  48.6k|        <I as IntoIterator>::Item: Serialize,
 1275|  48.6k|    {
 1276|  48.6k|        let mut iter = iter.into_iter();
 1277|  48.6k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  48.6k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  48.6k|        serializer.end()
 1280|  48.6k|    }
_RINvNtCs7ck0nh2wxEq_5serde3ser17iterator_len_hintINtNtNtCslwuTnKBYoK4_4core5slice4iter4IterINtCsaIyn0od6QZl_13fvm_ipld_hamt12KeyValuePairyyEEECs9yIG8QDEGGn_6simple:
 1948|  48.6k|    match iter.size_hint() {
 1949|  48.6k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  48.6k|}
_RINvYQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer11collect_seqRINtNtCsjwy42jpqMfb_5alloc3vec3VecINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtB3f_14hash_algorithm6Sha256EEECs9yIG8QDEGGn_6simple:
 1271|  6.41k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  6.41k|    where
 1273|  6.41k|        I: IntoIterator,
 1274|  6.41k|        <I as IntoIterator>::Item: Serialize,
 1275|  6.41k|    {
 1276|  6.41k|        let mut iter = iter.into_iter();
 1277|  6.41k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  6.41k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  6.41k|        serializer.end()
 1280|  6.41k|    }
_RINvNtCs7ck0nh2wxEq_5serde3ser17iterator_len_hintINtNtNtCslwuTnKBYoK4_4core5slice4iter4IterINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtB1w_14hash_algorithm6Sha256EEECs9yIG8QDEGGn_6simple:
 1948|  6.41k|    match iter.size_hint() {
 1949|  6.41k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  6.41k|}
_RNCINvYQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer11collect_seqRINtNtCsjwy42jpqMfb_5alloc3vec3VecINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtB3h_14hash_algorithm6Sha256EEE0Cs9yIG8QDEGGn_6simple:
 1278|  58.3k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RNCINvYQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer11collect_seqRINtNtCsjwy42jpqMfb_5alloc3vec3VecINtCsaIyn0od6QZl_13fvm_ipld_hamt12KeyValuePairyyEEE0Cs9yIG8QDEGGn_6simple:
 1278|  67.7k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXsc_NtCs2HxfaFcqxfr_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs7ck0nh2wxEq_5serde3ser9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  186|  9.66k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|  9.66k|    where
  188|  9.66k|        S: Serializer,
  189|  9.66k|    {
  190|  9.66k|        serializer.serialize_bytes(&self.bytes)
  191|  9.66k|    }
_RINvMNtCs2HxfaFcqxfr_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsjwy42jpqMfb_5alloc3vec3VechEECs9yIG8QDEGGn_6simple:
   60|  9.66k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|  9.66k|        ByteBuf {
   62|  9.66k|            bytes: bytes.into(),
   63|  9.66k|        }
   64|  9.66k|    }

_RINvNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser6to_vecINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1r_14hash_algorithm6Sha256EEECs9yIG8QDEGGn_6simple:
   23|  3.04k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  3.04k|where
   25|  3.04k|    T: Serialize + ?Sized,
   26|  3.04k|{
   27|  3.04k|    let writer = BufWriter::new(Vec::new());
   28|  3.04k|    let mut serializer = Serializer::new(writer);
   29|  3.04k|    value.serialize(&mut serializer)?;
   30|  3.04k|    Ok(serializer.into_inner().into_inner())
   31|  3.04k|}
_RNvXs_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer15serialize_tupleCs9yIG8QDEGGn_6simple:
  239|  74.1k|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|  74.1k|        Ok(BoundedCollect { ser: self })
  241|  74.1k|    }
_RINvXs2_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser20SerializeTupleStruct15serialize_fieldyECs9yIG8QDEGGn_6simple:
  414|   135k|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|   135k|        value.serialize(&mut *self.ser)
  416|   135k|    }
_RNvMNtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterE10into_innerCs9yIG8QDEGGn_6simple:
   56|  6.41k|    pub fn into_inner(self) -> W {
   57|  6.41k|        self.writer
   58|  6.41k|    }
_RNvXs0_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser12SerializeSeq3endCs9yIG8QDEGGn_6simple:
  385|  55.0k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|  55.0k|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|  55.0k|        }
  389|       |
  390|  55.0k|        Ok(())
  391|  55.0k|    }
_RINvNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser6to_vecINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtBS_14hash_algorithm6Sha256EECs9yIG8QDEGGn_6simple:
   23|  3.36k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  3.36k|where
   25|  3.36k|    T: Serialize + ?Sized,
   26|  3.36k|{
   27|  3.36k|    let writer = BufWriter::new(Vec::new());
   28|  3.36k|    let mut serializer = Serializer::new(writer);
   29|  3.36k|    value.serialize(&mut serializer)?;
   30|  3.36k|    Ok(serializer.into_inner().into_inner())
   31|  3.36k|}
_RNvXs1_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser14SerializeTuple3endCs9yIG8QDEGGn_6simple:
  404|  6.41k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  405|  6.41k|        Ok(())
  406|  6.41k|    }
_RNvXs_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer13serialize_u64Cs9yIG8QDEGGn_6simple:
  123|   135k|        v.encode(&mut self.writer)?;
  124|   135k|        Ok(())
  125|   135k|    }
_RNvXs_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer15serialize_bytesCs9yIG8QDEGGn_6simple:
  160|  6.41k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  6.41k|        Ok(())
  162|  6.41k|    }
_RNvMNtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterE3newCs9yIG8QDEGGn_6simple:
   51|  6.41k|    pub fn new(writer: W) -> Serializer<W> {
   52|  6.41k|        Serializer { writer }
   53|  6.41k|    }
_RINvXs_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer24serialize_newtype_structNtNtCs2HxfaFcqxfr_11serde_bytes7bytebuf7ByteBufECs9yIG8QDEGGn_6simple:
  199|  9.66k|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|  9.66k|        self,
  201|  9.66k|        name: &'static str,
  202|  9.66k|        value: &T,
  203|  9.66k|    ) -> Result<Self::Ok, Self::Error> {
  204|  9.66k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|  9.66k|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|  9.66k|    }
_RNvXs_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer22serialize_tuple_structCs9yIG8QDEGGn_6simple:
  244|  67.7k|    fn serialize_tuple_struct(
  245|  67.7k|        self,
  246|  67.7k|        _name: &'static str,
  247|  67.7k|        len: usize,
  248|  67.7k|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|  67.7k|        self.serialize_tuple(len)
  250|  67.7k|    }
_RNvXs2_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser20SerializeTupleStruct3endCs9yIG8QDEGGn_6simple:
  419|  67.7k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|  67.7k|        Ok(())
  421|  67.7k|    }
_RINvXs1_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser14SerializeTuple17serialize_elementRINtNtCsjwy42jpqMfb_5alloc3vec3VecINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtB3y_14hash_algorithm6Sha256EEECs9yIG8QDEGGn_6simple:
  399|  6.41k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  6.41k|        value.serialize(&mut *self.ser)
  401|  6.41k|    }
_RNvXs_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer13serialize_seqCs9yIG8QDEGGn_6simple:
  226|  55.0k|        if let Some(len) = len {
  227|  55.0k|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|  55.0k|        Ok(Collect {
  232|  55.0k|            bounded: len.is_some(),
  233|  55.0k|            ser: self,
  234|  55.0k|        })
  235|  55.0k|    }
_RINvXs0_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser12SerializeSeq17serialize_elementRINtNtCsaIyn0od6QZl_13fvm_ipld_hamt7pointer7PointeryyNtNtB2R_14hash_algorithm6Sha256EECs9yIG8QDEGGn_6simple:
  380|  58.3k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  58.3k|        value.serialize(&mut *self.ser)
  382|  58.3k|    }
_RINvXs1_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser14SerializeTuple17serialize_elementRNtNtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfield8BitfieldECs9yIG8QDEGGn_6simple:
  399|  6.41k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  6.41k|        value.serialize(&mut *self.ser)
  401|  6.41k|    }
_RNvXs7_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser10Serializer15serialize_bytesCs9yIG8QDEGGn_6simple:
  561|  9.66k|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|  9.66k|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|  9.66k|        let prefixed = [&[0x00], value].concat();
  564|  9.66k|        // CIDs are serialized with CBOR tag 42.
  565|  9.66k|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|  9.66k|        Ok(())
  567|  9.66k|    }
_RINvXs0_NtCsdRvoM81ATYH_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterENtNtCs7ck0nh2wxEq_5serde3ser12SerializeSeq17serialize_elementRINtCsaIyn0od6QZl_13fvm_ipld_hamt12KeyValuePairyyEECs9yIG8QDEGGn_6simple:
  380|  67.7k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  67.7k|        value.serialize(&mut *self.ser)
  382|  67.7k|    }

_RNvXs3_NtCs6ps10MZLWon_4sha28core_apiNtB5_13Sha256VarCoreNtNtCsgijOsep5vl9_6digest8core_api18VariableOutputCore22finalize_variable_coreCs9yIG8QDEGGn_6simple:
   60|  31.8k|    fn finalize_variable_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {
   61|  31.8k|        let bs = Self::BlockSize::U64;
   62|  31.8k|        let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);
   63|  31.8k|        buffer.len64_padding_be(bit_len, |b| compress256(&mut self.state, from_ref(b)));
   64|       |
   65|   254k|        for (chunk, v) in out.chunks_exact_mut(4).zip(self.state.iter()) {
   66|   254k|            chunk.copy_from_slice(&v.to_be_bytes());
   67|   254k|        }
   68|  31.8k|    }
_RNCNvXs3_NtCs6ps10MZLWon_4sha28core_apiNtB7_13Sha256VarCoreNtNtCsgijOsep5vl9_6digest8core_api18VariableOutputCore22finalize_variable_core0Cs9yIG8QDEGGn_6simple:
   63|  31.8k|        buffer.len64_padding_be(bit_len, |b| compress256(&mut self.state, from_ref(b)));
_RNvXs3_NtCs6ps10MZLWon_4sha28core_apiNtB5_13Sha256VarCoreNtNtCsgijOsep5vl9_6digest8core_api18VariableOutputCore3newCs9yIG8QDEGGn_6simple:
   49|  31.8k|    fn new(output_size: usize) -> Result<Self, InvalidOutputSize> {
   50|  31.8k|        let state = match output_size {
   51|      0|            28 => consts::H256_224,
   52|  31.8k|            32 => consts::H256_256,
   53|      0|            _ => return Err(InvalidOutputSize),
   54|       |        };
   55|  31.8k|        let block_len = 0;
   56|  31.8k|        Ok(Self { state, block_len })
   57|  31.8k|    }

_RNvNtCs6ps10MZLWon_4sha26sha25611compress256:
   34|  31.8k|pub fn compress256(state: &mut [u32; 8], blocks: &[GenericArray<u8, U64>]) {
   35|  31.8k|    // SAFETY: GenericArray<u8, U64> and [u8; 64] have
   36|  31.8k|    // exactly the same memory layout
   37|  31.8k|    let p = blocks.as_ptr() as *const [u8; 64];
   38|  31.8k|    let blocks = unsafe { core::slice::from_raw_parts(p, blocks.len()) };
   39|  31.8k|    compress(state, blocks)
   40|  31.8k|}

_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft10sha256load:
   35|   764k|fn sha256load(v2: [u32; 4], v3: [u32; 4]) -> [u32; 4] {
   36|   764k|    [v3[3], v2[0], v2[1], v2[2]]
   37|   764k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft3xor:
   21|   764k|fn xor(a: [u32; 4], b: [u32; 4]) -> [u32; 4] {
   22|   764k|    [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]]
   23|   764k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft3shr:
   11|   764k|fn shr(v: [u32; 4], o: u32) -> [u32; 4] {
   12|   764k|    [v[0] << o, v[1] << o, v[2] << o, v[3] << o]
   13|   764k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft23sha256_digest_block_u32:
  165|  31.8k|fn sha256_digest_block_u32(state: &mut [u32; 8], block: &[u32; 16]) {
  166|  31.8k|    let mut abef = [state[0], state[1], state[4], state[5]];
  167|  31.8k|    let mut cdgh = [state[2], state[3], state[6], state[7]];
  168|  31.8k|
  169|  31.8k|    // Rounds 0..64
  170|  31.8k|    let mut w0 = [block[3], block[2], block[1], block[0]];
  171|  31.8k|    let mut w1 = [block[7], block[6], block[5], block[4]];
  172|  31.8k|    let mut w2 = [block[11], block[10], block[9], block[8]];
  173|  31.8k|    let mut w3 = [block[15], block[14], block[13], block[12]];
  174|  31.8k|    let mut w4;
  175|  31.8k|
  176|  31.8k|    rounds4!(abef, cdgh, w0, 0);
  177|  31.8k|    rounds4!(abef, cdgh, w1, 1);
  178|  31.8k|    rounds4!(abef, cdgh, w2, 2);
  179|  31.8k|    rounds4!(abef, cdgh, w3, 3);
  180|  31.8k|    schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 4);
  181|  31.8k|    schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 5);
  182|  31.8k|    schedule_rounds4!(abef, cdgh, w2, w3, w4, w0, w1, 6);
  183|  31.8k|    schedule_rounds4!(abef, cdgh, w3, w4, w0, w1, w2, 7);
  184|  31.8k|    schedule_rounds4!(abef, cdgh, w4, w0, w1, w2, w3, 8);
  185|  31.8k|    schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 9);
  186|  31.8k|    schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 10);
  187|  31.8k|    schedule_rounds4!(abef, cdgh, w2, w3, w4, w0, w1, 11);
  188|  31.8k|    schedule_rounds4!(abef, cdgh, w3, w4, w0, w1, w2, 12);
  189|  31.8k|    schedule_rounds4!(abef, cdgh, w4, w0, w1, w2, w3, 13);
  190|  31.8k|    schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 14);
  191|  31.8k|    schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 15);
  192|  31.8k|
  193|  31.8k|    let [a, b, e, f] = abef;
  194|  31.8k|    let [c, d, g, h] = cdgh;
  195|  31.8k|
  196|  31.8k|    state[0] = state[0].wrapping_add(a);
  197|  31.8k|    state[1] = state[1].wrapping_add(b);
  198|  31.8k|    state[2] = state[2].wrapping_add(c);
  199|  31.8k|    state[3] = state[3].wrapping_add(d);
  200|  31.8k|    state[4] = state[4].wrapping_add(e);
  201|  31.8k|    state[5] = state[5].wrapping_add(f);
  202|  31.8k|    state[6] = state[6].wrapping_add(g);
  203|  31.8k|    state[7] = state[7].wrapping_add(h);
  204|  31.8k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft3add:
   26|  1.27M|fn add(a: [u32; 4], b: [u32; 4]) -> [u32; 4] {
   27|  1.27M|    [
   28|  1.27M|        a[0].wrapping_add(b[0]),
   29|  1.27M|        a[1].wrapping_add(b[1]),
   30|  1.27M|        a[2].wrapping_add(b[2]),
   31|  1.27M|        a[3].wrapping_add(b[3]),
   32|  1.27M|    ]
   33|  1.27M|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft8compress:
  206|  31.8k|pub fn compress(state: &mut [u32; 8], blocks: &[[u8; 64]]) {
  207|  31.8k|    let mut block_u32 = [0u32; BLOCK_LEN];
  208|  31.8k|    // since LLVM can't properly use aliasing yet it will make
  209|  31.8k|    // unnecessary state stores without this copy
  210|  31.8k|    let mut state_cpy = *state;
  211|  63.7k|    for block in blocks {
  212|   509k|        for (o, chunk) in block_u32.iter_mut().zip(block.chunks_exact(4)) {
  213|   509k|            *o = u32::from_be_bytes(chunk.try_into().unwrap());
  214|   509k|        }
  215|  31.8k|        sha256_digest_block_u32(&mut state_cpy, &block_u32);
  216|       |    }
  217|  31.8k|    *state = state_cpy;
  218|  31.8k|}
_RNvNvNtNtCs6ps10MZLWon_4sha26sha2564soft10sha256msg18sigma0x4B7_:
   46|   382k|    fn sigma0x4(x: [u32; 4]) -> [u32; 4] {
   47|   382k|        let t1 = or(shl(x, 7), shr(x, 25));
   48|   382k|        let t2 = or(shl(x, 18), shr(x, 14));
   49|   382k|        let t3 = shl(x, 3);
   50|   382k|        xor(xor(t1, t2), t3)
   51|   382k|    }
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft10sha256swap:
   39|   509k|fn sha256swap(v0: [u32; 4]) -> [u32; 4] {
   40|   509k|    [v0[2], v0[3], v0[0], v0[1]]
   41|   509k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft8schedule:
  137|   382k|fn schedule(v0: [u32; 4], v1: [u32; 4], v2: [u32; 4], v3: [u32; 4]) -> [u32; 4] {
  138|   382k|    let t1 = sha256msg1(v0, v1);
  139|   382k|    let t2 = sha256load(v2, v3);
  140|   382k|    let t3 = add(t1, t2);
  141|   382k|    sha256msg2(t3, v3)
  142|   382k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft10sha256msg2:
   56|   382k|fn sha256msg2(v4: [u32; 4], v3: [u32; 4]) -> [u32; 4] {
   57|   382k|    macro_rules! sigma1 {
   58|   382k|        ($a:expr) => {
   59|   382k|            $a.rotate_right(17) ^ $a.rotate_right(19) ^ ($a >> 10)
   60|   382k|        };
   61|   382k|    }
   62|   382k|
   63|   382k|    let [x3, x2, x1, x0] = v4;
   64|   382k|    let [w15, w14, _, _] = v3;
   65|   382k|
   66|   382k|    let w16 = x0.wrapping_add(sigma1!(w14));
   67|   382k|    let w17 = x1.wrapping_add(sigma1!(w15));
   68|   382k|    let w18 = x2.wrapping_add(sigma1!(w16));
   69|   382k|    let w19 = x3.wrapping_add(sigma1!(w17));
   70|   382k|
   71|   382k|    [w19, w18, w17, w16]
   72|   382k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft10sha256msg1:
   43|   382k|fn sha256msg1(v0: [u32; 4], v1: [u32; 4]) -> [u32; 4] {
   44|   382k|    // sigma 0 on vectors
   45|   382k|    #[inline]
   46|   382k|    fn sigma0x4(x: [u32; 4]) -> [u32; 4] {
   47|   382k|        let t1 = or(shl(x, 7), shr(x, 25));
   48|   382k|        let t2 = or(shl(x, 18), shr(x, 14));
   49|   382k|        let t3 = shl(x, 3);
   50|   382k|        xor(xor(t1, t2), t3)
   51|   382k|    }
   52|   382k|
   53|   382k|    add(v0, sigma0x4(sha256load(v0, v1)))
   54|   382k|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft22sha256_digest_round_x2:
   74|  1.01M|fn sha256_digest_round_x2(cdgh: [u32; 4], abef: [u32; 4], wk: [u32; 4]) -> [u32; 4] {
   75|  1.01M|    macro_rules! big_sigma0 {
   76|  1.01M|        ($a:expr) => {
   77|  1.01M|            ($a.rotate_right(2) ^ $a.rotate_right(13) ^ $a.rotate_right(22))
   78|  1.01M|        };
   79|  1.01M|    }
   80|  1.01M|    macro_rules! big_sigma1 {
   81|  1.01M|        ($a:expr) => {
   82|  1.01M|            ($a.rotate_right(6) ^ $a.rotate_right(11) ^ $a.rotate_right(25))
   83|  1.01M|        };
   84|  1.01M|    }
   85|  1.01M|    macro_rules! bool3ary_202 {
   86|  1.01M|        ($a:expr, $b:expr, $c:expr) => {
   87|  1.01M|            $c ^ ($a & ($b ^ $c))
   88|  1.01M|        };
   89|  1.01M|    } // Choose, MD5F, SHA1C
   90|  1.01M|    macro_rules! bool3ary_232 {
   91|  1.01M|        ($a:expr, $b:expr, $c:expr) => {
   92|  1.01M|            ($a & $b) ^ ($a & $c) ^ ($b & $c)
   93|  1.01M|        };
   94|  1.01M|    } // Majority, SHA1M
   95|  1.01M|
   96|  1.01M|    let [_, _, wk1, wk0] = wk;
   97|  1.01M|    let [a0, b0, e0, f0] = abef;
   98|  1.01M|    let [c0, d0, g0, h0] = cdgh;
   99|  1.01M|
  100|  1.01M|    // a round
  101|  1.01M|    let x0 = big_sigma1!(e0)
  102|  1.01M|        .wrapping_add(bool3ary_202!(e0, f0, g0))
  103|  1.01M|        .wrapping_add(wk0)
  104|  1.01M|        .wrapping_add(h0);
  105|  1.01M|    let y0 = big_sigma0!(a0).wrapping_add(bool3ary_232!(a0, b0, c0));
  106|  1.01M|    let (a1, b1, c1, d1, e1, f1, g1, h1) = (
  107|  1.01M|        x0.wrapping_add(y0),
  108|  1.01M|        a0,
  109|  1.01M|        b0,
  110|  1.01M|        c0,
  111|  1.01M|        x0.wrapping_add(d0),
  112|  1.01M|        e0,
  113|  1.01M|        f0,
  114|  1.01M|        g0,
  115|  1.01M|    );
  116|  1.01M|
  117|  1.01M|    // a round
  118|  1.01M|    let x1 = big_sigma1!(e1)
  119|  1.01M|        .wrapping_add(bool3ary_202!(e1, f1, g1))
  120|  1.01M|        .wrapping_add(wk1)
  121|  1.01M|        .wrapping_add(h1);
  122|  1.01M|    let y1 = big_sigma0!(a1).wrapping_add(bool3ary_232!(a1, b1, c1));
  123|  1.01M|    let (a2, b2, _, _, e2, f2, _, _) = (
  124|  1.01M|        x1.wrapping_add(y1),
  125|  1.01M|        a1,
  126|  1.01M|        b1,
  127|  1.01M|        c1,
  128|  1.01M|        x1.wrapping_add(d1),
  129|  1.01M|        e1,
  130|  1.01M|        f1,
  131|  1.01M|        g1,
  132|  1.01M|    );
  133|  1.01M|
  134|  1.01M|    [a2, b2, e2, f2]
  135|  1.01M|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft3shl:
    6|  1.14M|fn shl(v: [u32; 4], o: u32) -> [u32; 4] {
    7|  1.14M|    [v[0] >> o, v[1] >> o, v[2] >> o, v[3] >> o]
    8|  1.14M|}
_RNvNtNtCs6ps10MZLWon_4sha26sha2564soft2or:
   16|   764k|fn or(a: [u32; 4], b: [u32; 4]) -> [u32; 4] {
   17|   764k|    [a[0] | b[0], a[1] | b[1], a[2] | b[2], a[3] | b[3]]
   18|   764k|}

_RNvNtNtCs6ps10MZLWon_4sha26sha2563x868compress:
  102|  31.8k|pub fn compress(state: &mut [u32; 8], blocks: &[[u8; 64]]) {
  103|  31.8k|    // TODO: Replace with https://github.com/rust-lang/rfcs/pull/2725
  104|  31.8k|    // after stabilization
  105|  31.8k|    if shani_cpuid::get() {
  106|      0|        unsafe {
  107|      0|            digest_blocks(state, blocks);
  108|      0|        }
  109|  31.8k|    } else {
  110|  31.8k|        super::soft::compress(state, blocks);
  111|  31.8k|    }
  112|  31.8k|}

_RNvNtCsfCjQYx8m5Nz_15unsigned_varint6encode2u8Cs9yIG8QDEGGn_6simple:
   45|  9.66k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|  9.66k|    encode!(number, buf)
   47|  9.66k|}
_RNvNtCsfCjQYx8m5Nz_15unsigned_varint6encode9u8_bufferCs9yIG8QDEGGn_6simple:
  101|  9.66k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|  9.66k|    [0; U8_LEN]
  103|  9.66k|}
_RNvNtCsfCjQYx8m5Nz_15unsigned_varint6encode10u64_bufferCs9yIG8QDEGGn_6simple:
  119|  28.9k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  28.9k|    [0; U64_LEN]
  121|  28.9k|}
_RNvNtCsfCjQYx8m5Nz_15unsigned_varint6encode3u64Cs9yIG8QDEGGn_6simple:
   69|  28.9k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  28.9k|    encode!(number, buf)
   71|  28.9k|}

_RNvMNtCsfZY3aqbKclt_19fvm_ipld_blockstore5blockINtB2_5BlockRINtNtCsjwy42jpqMfb_5alloc3vec3VechEE3cidCs9yIG8QDEGGn_6simple:
   28|  6.41k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   29|  6.41k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   30|  6.41k|    }
_RNvXs_NtCsfZY3aqbKclt_19fvm_ipld_blockstore5blockINtB4_5BlockRINtNtCsjwy42jpqMfb_5alloc3vec3VechEEINtNtCslwuTnKBYoK4_4core7convert5AsRefShE6as_refCs9yIG8QDEGGn_6simple:
   42|  6.41k|    fn as_ref(&self) -> &[u8] {
   43|  6.41k|        self.data.as_ref()
   44|  6.41k|    }

_RINvYNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCsjwy42jpqMfb_5alloc3vec3VechEECs9yIG8QDEGGn_6simple:
   40|  6.41k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   41|  6.41k|    where
   42|  6.41k|        Self: Sized,
   43|  6.41k|        D: AsRef<[u8]>,
   44|  6.41k|    {
   45|  6.41k|        let k = block.cid(mh_code);
   46|  6.41k|        self.put_keyed(&k, block.as_ref())?;
   47|  6.41k|        Ok(k)
   48|  6.41k|    }
_RINvXs0_CsfZY3aqbKclt_19fvm_ipld_blockstoreRNtNtB6_6memory16MemoryBlockstoreNtB6_10Blockstore3putRINtNtCsjwy42jpqMfb_5alloc3vec3VechEECs9yIG8QDEGGn_6simple:
  108|  6.41k|                fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  109|  6.41k|                where
  110|  6.41k|                    Self: Sized,
  111|  6.41k|                    D: AsRef<[u8]>,
  112|  6.41k|                {
  113|  6.41k|                    (**self).put(mh_code, block)
  114|  6.41k|                }

_RNvXs1_NtCsfZY3aqbKclt_19fvm_ipld_blockstore6memoryNtB5_16MemoryBlockstoreNtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
   11|    534|#[derive(Debug, Default, Clone)]
_RNvXs_NtCsfZY3aqbKclt_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   36|  6.41k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   37|  6.41k|        self.blocks.borrow_mut().insert(*k, block.into());
   38|  6.41k|        Ok(())
   39|  6.41k|    }

_RINvXNtNtCs8hdis3eG7CZ_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
   35|  6.41k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  6.41k|        where
   37|  6.41k|            S: Serializer,
   38|  6.41k|        {
   39|  6.41k|            serializer.serialize_bytes(self.as_ref())
   40|  6.41k|        }

_RINvYRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs8hdis3eG7CZ_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB2h_14hash_algorithm6Sha256EECs9yIG8QDEGGn_6simple:
   30|  3.36k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  3.36k|    where
   32|  3.36k|        S: ser::Serialize,
   33|  3.36k|    {
   34|  3.36k|        let bytes = crate::to_vec(obj)?;
   35|  3.36k|        self.put(
   36|  3.36k|            code,
   37|  3.36k|            &Block {
   38|  3.36k|                codec: DAG_CBOR,
   39|  3.36k|                data: &bytes,
   40|  3.36k|            },
   41|  3.36k|        )
   42|  3.36k|    }
_RINvYRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs8hdis3eG7CZ_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB2Q_14hash_algorithm6Sha256EEECs9yIG8QDEGGn_6simple:
   30|  3.04k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  3.04k|    where
   32|  3.04k|        S: ser::Serialize,
   33|  3.04k|    {
   34|  3.04k|        let bytes = crate::to_vec(obj)?;
   35|  3.04k|        self.put(
   36|  3.04k|            code,
   37|  3.04k|            &Block {
   38|  3.04k|                codec: DAG_CBOR,
   39|  3.04k|                data: &bytes,
   40|  3.04k|            },
   41|  3.04k|        )
   42|  3.04k|    }

_RINvCs8hdis3eG7CZ_17fvm_ipld_encoding6to_vecINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtBL_14hash_algorithm6Sha256EECs9yIG8QDEGGn_6simple:
   44|  3.36k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  3.36k|where
   46|  3.36k|    T: ser::Serialize + ?Sized,
   47|  3.36k|{
   48|  3.36k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  3.36k|}
_RINvCs8hdis3eG7CZ_17fvm_ipld_encoding6to_vecINtNtCsjwy42jpqMfb_5alloc5boxed3BoxINtNtCsaIyn0od6QZl_13fvm_ipld_hamt4node4NodeyyNtNtB1k_14hash_algorithm6Sha256EEECs9yIG8QDEGGn_6simple:
   44|  3.04k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  3.04k|where
   46|  3.04k|    T: ser::Serialize + ?Sized,
   47|  3.04k|{
   48|  3.04k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  3.04k|}

_RNCNvXNvNtCs9yIG8QDEGGn_6simple6common1__NtB6_9OperationNtCs2T27F4iv48_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
    8|    532|#[derive(Debug, Arbitrary)]
_RNvXNvNtCs9yIG8QDEGGn_6simple6commons_1__NtB4_6MethodNtCs2T27F4iv48_9arbitrary9Arbitrary9arbitrary:
   14|  72.8k|#[derive(Debug, Arbitrary)]
_RNvXNvNtCs9yIG8QDEGGn_6simple6commons_1__NtB4_6MethodNtCs2T27F4iv48_9arbitrary9Arbitrary19arbitrary_take_rest:
   14|  1.59k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs9yIG8QDEGGn_6simple6common1__NtB6_9OperationNtCs2T27F4iv48_9arbitrary9Arbitrary9size_hint0B8_:
    8|    534|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs9yIG8QDEGGn_6simple6commons_1__NtB6_6MethodNtCs2T27F4iv48_9arbitrary9Arbitrary9arbitrarys_0B8_:
   14|  24.2k|#[derive(Debug, Arbitrary)]
_RNvXNvNtCs9yIG8QDEGGn_6simple6common1__NtB4_9OperationNtCs2T27F4iv48_9arbitrary9Arbitrary19arbitrary_take_rest:
    8|  1.59k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs9yIG8QDEGGn_6simple6common1__NtB6_9OperationNtCs2T27F4iv48_9arbitrary9Arbitrary9arbitrarys_0B8_:
    8|  24.2k|#[derive(Debug, Arbitrary)]
_RNCNvNtCs9yIG8QDEGGn_6simple6common3run0B5_:
   40|  2.17k|                let hamt_deleted = hamt.delete(&key).unwrap().map(|(_, v)| v);
_RNCNvXNvNtCs9yIG8QDEGGn_6simple6commons_1__NtB6_6MethodNtCs2T27F4iv48_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
   14|    532|#[derive(Debug, Arbitrary)]
_RNvNtCs9yIG8QDEGGn_6simple6common3run:
   21|    534|pub fn run(flush_rate: u8, operations: Vec<Operation>, conf: Config) {
   22|    534|    let db = fvm_ipld_blockstore::MemoryBlockstore::default();
   23|    534|    let mut hamt = Hamt::<_, _, _>::new_with_config(&db, conf);
   24|    534|    let mut elements = ahash::AHashMap::new();
   25|    534|
   26|    534|    let flush_rate = (flush_rate as usize).saturating_add(5);
   27|  24.8k|    for (i, Operation { key, method }) in operations.into_iter().enumerate() {
   28|  24.8k|        if i % flush_rate == 0 {
   29|  3.84k|            // Periodic flushing of Hamt to fuzz blockstore usage also
   30|  3.84k|            hamt.flush().unwrap();
   31|  20.9k|        }
   32|       |
   33|  24.8k|        match method {
   34|  15.8k|            Method::Insert(v) => {
   35|  15.8k|                elements.insert(key, v);
   36|  15.8k|                hamt.set(key, v).unwrap();
   37|  15.8k|            }
   38|       |            Method::Remove => {
   39|  5.94k|                let el = elements.remove(&key);
   40|  5.94k|                let hamt_deleted = hamt.delete(&key).unwrap().map(|(_, v)| v);
   41|  5.94k|                assert_eq!(hamt_deleted, el);
   42|       |            }
   43|       |            Method::Get => {
   44|  3.01k|                let ev = elements.get(&key);
   45|  3.01k|                let av = hamt.get(&key).unwrap();
   46|  3.01k|                assert_eq!(av, ev);
   47|       |            }
   48|       |        }
   49|       |    }
   50|    534|}
_RNCNvXNvNtCs9yIG8QDEGGn_6simple6commons_1__NtB6_6MethodNtCs2T27F4iv48_9arbitrary9Arbitrary9size_hint0B8_:
   14|    534|#[derive(Debug, Arbitrary)]
_RNvXNvNtCs9yIG8QDEGGn_6simple6common1__NtB4_9OperationNtCs2T27F4iv48_9arbitrary9Arbitrary9arbitrary:
    8|  72.8k|#[derive(Debug, Arbitrary)]

_RINvXNtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB3_8BitfieldNtNtCs7ck0nh2wxEq_5serde3ser9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
   19|  6.41k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   20|  6.41k|    where
   21|  6.41k|        S: Serializer,
   22|  6.41k|    {
   23|  6.41k|        let mut v = [0u8; MAX_LEN];
   24|  6.41k|        // Big endian ordering, to match go
   25|  6.41k|        BigEndian::write_u64(&mut v[..8], self.0[3]);
   26|  6.41k|        BigEndian::write_u64(&mut v[8..16], self.0[2]);
   27|  6.41k|        BigEndian::write_u64(&mut v[16..24], self.0[1]);
   28|  6.41k|        BigEndian::write_u64(&mut v[24..], self.0[0]);
   29|       |
   30|   188k|        for i in 0..v.len() {
   31|   188k|            if v[i] != 0 {
   32|  5.84k|                return strict_bytes::Serialize::serialize(&v[i..], serializer);
   33|   182k|            }
   34|       |        }
   35|       |
   36|    570|        <[u8] as strict_bytes::Serialize>::serialize(&[], serializer)
   37|  6.41k|    }
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield3and:
   96|  36.7k|    pub fn and(self, other: &Self) -> Self {
   97|  36.7k|        Bitfield([
   98|  36.7k|            self.0[0] & other.0[0],
   99|  36.7k|            self.0[1] & other.0[1],
  100|  36.7k|            self.0[2] & other.0[2],
  101|  36.7k|            self.0[3] & other.0[3],
  102|  36.7k|        ])
  103|  36.7k|    }
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield12set_bits_leq:
  116|  35.6k|    pub fn set_bits_leq(mut self, bit: u8) -> Self {
  117|  35.6k|        if bit < 64 {
  118|  35.6k|            self.0[0] = set_bits_leq(self.0[0], bit);
  119|  35.6k|        } else if bit < 128 {
  120|      0|            self.0[0] = std::u64::MAX;
  121|      0|            self.0[1] = set_bits_leq(self.0[1], bit - 64);
  122|      0|        } else if bit < 192 {
  123|      0|            self.0[0] = std::u64::MAX;
  124|      0|            self.0[1] = std::u64::MAX;
  125|      0|            self.0[2] = set_bits_leq(self.0[2], bit - 128);
  126|      0|        } else {
  127|      0|            self.0[0] = std::u64::MAX;
  128|      0|            self.0[1] = std::u64::MAX;
  129|      0|            self.0[2] = std::u64::MAX;
  130|      0|            self.0[3] = set_bits_leq(self.0[3], bit - 192);
  131|      0|        }
  132|       |
  133|  35.6k|        self
  134|  35.6k|    }
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield8test_bit:
   78|  40.8k|    pub fn test_bit(&self, idx: u8) -> bool {
   79|  40.8k|        let ai = idx / 64;
   80|  40.8k|        let bi = idx % 64;
   81|  40.8k|
   82|  40.8k|        self.0[ai as usize] & (1 << bi) != 0
   83|  40.8k|    }
_RNCNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB7_8Bitfield10count_ones0B9_:
   93|   294k|        self.0.iter().map(|a| a.count_ones() as usize).sum()
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield4zero:
  105|  44.9k|    pub fn zero() -> Self {
  106|  44.9k|        Bitfield([0, 0, 0, 0])
  107|  44.9k|    }
_RNvNtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfield12set_bits_leqB3_:
  138|  35.6k|fn set_bits_leq(v: u64, bit: u8) -> u64 {
  139|  35.6k|    (v as u128 | ((1u128 << (1 + bit)) - 1)) as u64
  140|  35.6k|}
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield7set_bit:
   85|  14.9k|    pub fn set_bit(&mut self, idx: u8) {
   86|  14.9k|        let ai = idx / 64;
   87|  14.9k|        let bi = idx % 64;
   88|  14.9k|
   89|  14.9k|        self.0[ai as usize] |= 1 << bi;
   90|  14.9k|    }
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield11set_bits_le:
  109|  36.7k|    pub fn set_bits_le(self, bit: u8) -> Self {
  110|  36.7k|        if bit == 0 {
  111|  1.12k|            return self;
  112|  35.6k|        }
  113|  35.6k|        self.set_bits_leq(bit - 1)
  114|  36.7k|    }
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield9clear_bit:
   72|  1.84k|    pub fn clear_bit(&mut self, idx: u8) {
   73|  1.84k|        let ai = idx / 64;
   74|  1.84k|        let bi = idx % 64;
   75|  1.84k|        self.0[ai as usize] &= u64::MAX - (1 << bi);
   76|  1.84k|    }
_RNvMs1_NtCsaIyn0od6QZl_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield10count_ones:
   92|  73.5k|    pub fn count_ones(&self) -> usize {
   93|  73.5k|        self.0.iter().map(|a| a.count_ones() as usize).sum()
   94|  73.5k|    }

_RNvMs0_NtCsaIyn0od6QZl_13fvm_ipld_hamt4hamtINtB5_8HamtImplRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE5flushCs9yIG8QDEGGn_6simple:
  325|  3.84k|        if let Some(cid) = self.flushed_cid {
  326|    488|            return Ok(cid);
  327|  3.36k|        }
  328|  3.36k|        self.root.flush(self.store.borrow())?;
  329|  3.36k|        let cid = self.store.put_cbor(&self.root, Code::Blake2b256)?;
  330|  3.36k|        self.flushed_cid = Some(cid);
  331|  3.36k|        Ok(cid)
  332|  3.84k|    }
_RINvMs0_NtCsaIyn0od6QZl_13fvm_ipld_hamt4hamtINtB6_8HamtImplRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE3getyECs9yIG8QDEGGn_6simple:
  255|  3.01k|        match self.root.get(k, self.store.borrow(), &self.conf)? {
  256|    557|            Some(v) => Ok(Some(v)),
  257|  2.45k|            None => Ok(None),
  258|       |        }
  259|  3.01k|    }
_RNvMs0_NtCsaIyn0od6QZl_13fvm_ipld_hamt4hamtINtB5_8HamtImplRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE15new_with_configCs9yIG8QDEGGn_6simple:
   88|    534|    pub fn new_with_config(store: BS, conf: Config) -> Self {
   89|    534|        Self {
   90|    534|            root: Node::default(),
   91|    534|            store,
   92|    534|            conf,
   93|    534|            hash: Default::default(),
   94|    534|            flushed_cid: None,
   95|    534|        }
   96|    534|    }
_RNvMs0_NtCsaIyn0od6QZl_13fvm_ipld_hamt4hamtINtB5_8HamtImplRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE3setCs9yIG8QDEGGn_6simple:
  172|  15.8k|    pub fn set(&mut self, key: K, value: V) -> Result<Option<V>, Error>
  173|  15.8k|    where
  174|  15.8k|        V: PartialEq,
  175|  15.8k|    {
  176|  15.8k|        let (old, modified) = self
  177|  15.8k|            .root
  178|  15.8k|            .set(key, value, self.store.borrow(), &self.conf, true)?;
  179|       |
  180|  15.8k|        if modified {
  181|  14.4k|            self.flushed_cid = None;
  182|  14.4k|        }
  183|       |
  184|  15.8k|        Ok(old)
  185|  15.8k|    }
_RINvMs0_NtCsaIyn0od6QZl_13fvm_ipld_hamt4hamtINtB6_8HamtImplRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE6deleteyECs9yIG8QDEGGn_6simple:
  309|  5.94k|    pub fn delete<Q: ?Sized>(&mut self, k: &Q) -> Result<Option<(K, V)>, Error>
  310|  5.94k|    where
  311|  5.94k|        K: Borrow<Q>,
  312|  5.94k|        Q: Hash + Eq,
  313|  5.94k|    {
  314|  5.94k|        let deleted = self.root.remove_entry(k, self.store.borrow(), &self.conf)?;
  315|       |
  316|  5.94k|        if deleted.is_some() {
  317|  2.17k|            self.flushed_cid = None;
  318|  3.77k|        }
  319|       |
  320|  5.94k|        Ok(deleted)
  321|  5.94k|    }

_RNvXs0_NtCsaIyn0od6QZl_13fvm_ipld_hamt14hash_algorithmNtB5_17Sha2HasherWrapperNtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
   19|  31.8k|#[derive(Default)]
_RINvXs_NtCsaIyn0od6QZl_13fvm_ipld_hamt14hash_algorithmNtB5_6Sha256NtB5_13HashAlgorithm4hashyECs9yIG8QDEGGn_6simple:
   38|  31.8k|    fn hash<X: ?Sized>(key: &X) -> HashedKey
   39|  31.8k|    where
   40|  31.8k|        X: Hash,
   41|  31.8k|    {
   42|  31.8k|        let mut hasher = Sha2HasherWrapper::default();
   43|  31.8k|        key.hash(&mut hasher);
   44|  31.8k|        hasher.0.finalize().into()
   45|  31.8k|    }
_RNvXNtCsaIyn0od6QZl_13fvm_ipld_hamt14hash_algorithmNtB2_17Sha2HasherWrapperNtNtCslwuTnKBYoK4_4core4hash6Hasher5write:
   28|  31.8k|    fn write(&mut self, bytes: &[u8]) {
   29|  31.8k|        self.0.update(bytes);
   30|  31.8k|    }

_RNvMNtCsaIyn0od6QZl_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits12new_at_index:
   31|  31.8k|    pub fn new_at_index(hash_buffer: &'a HashedKey, consumed: u32) -> HashBits<'a> {
   32|  31.8k|        Self {
   33|  31.8k|            b: hash_buffer,
   34|  31.8k|            consumed,
   35|  31.8k|        }
   36|  31.8k|    }
_RNvMNtCsaIyn0od6QZl_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits9next_bits:
   54|  56.5k|    fn next_bits(&mut self, i: u32) -> u8 {
   55|  56.5k|        let curbi = self.consumed / 8;
   56|  56.5k|        let leftb = 8 - (self.consumed % 8);
   57|  56.5k|
   58|  56.5k|        let curb = self.b[curbi as usize];
   59|  56.5k|        match i.cmp(&leftb) {
   60|       |            Ordering::Equal => {
   61|       |                // bits to consume is equal to the bits remaining in the currently indexed byte
   62|      0|                let out = mkmask(i) & curb;
   63|      0|                self.consumed += i;
   64|      0|                out
   65|       |            }
   66|       |            Ordering::Less => {
   67|       |                // Consuming less than the remaining bits in the current byte
   68|  40.8k|                let a = curb & mkmask(leftb);
   69|  40.8k|                let b = a & !mkmask(leftb - i);
   70|  40.8k|                let c = b >> (leftb - i);
   71|  40.8k|                self.consumed += i;
   72|  40.8k|                c
   73|       |            }
   74|       |            Ordering::Greater => {
   75|       |                // Consumes remaining bits and remaining bits from a recursive call
   76|  15.7k|                let mut out = mkmask(leftb) & curb;
   77|  15.7k|                out <<= i - leftb;
   78|  15.7k|                self.consumed += leftb;
   79|  15.7k|                out += self.next_bits(i - leftb);
   80|  15.7k|                out
   81|       |            }
   82|       |        }
   83|  56.5k|    }
_RNvMNtCsaIyn0od6QZl_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits3new:
   26|  24.8k|    pub fn new(hash_buffer: &'a HashedKey) -> HashBits<'a> {
   27|  24.8k|        Self::new_at_index(hash_buffer, 0)
   28|  24.8k|    }
_RNvNtCsaIyn0od6QZl_13fvm_ipld_hamt9hash_bits6mkmaskB3_:
   21|  97.4k|pub(crate) fn mkmask(n: u32) -> u8 {
   22|  97.4k|    ((1u16 << n) - 1) as u8
   23|  97.4k|}
_RNvMNtCsaIyn0od6QZl_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits4next:
   40|  40.8k|    pub fn next(&mut self, i: u32) -> Result<u8, Error> {
   41|  40.8k|        if i > 8 || i == 0 {
   42|      0|            return Err(Error::InvalidHashBitLen);
   43|  40.8k|        }
   44|  40.8k|        let maxi = (self.b.len() as u32) * 8 - self.consumed;
   45|  40.8k|        if maxi == 0 {
   46|      0|            return Err(Error::MaxDepth);
   47|  40.8k|        }
   48|  40.8k|        // Only take what's left. If we consume 5 bits at a time from a 256 bit key,
   49|  40.8k|        // there will be 1 bit left at the bottom.
   50|  40.8k|        Ok(self.next_bits(std::cmp::min(i, maxi)))
   51|  40.8k|    }

_RNvMs_CsaIyn0od6QZl_13fvm_ipld_hamtINtB4_12KeyValuePairyyE3keyCs9yIG8QDEGGn_6simple:
   83|  35.5k|    pub fn key(&self) -> &K {
   84|  35.5k|        &self.0
   85|  35.5k|    }
_RNvMs0_CsaIyn0od6QZl_13fvm_ipld_hamtINtB5_12KeyValuePairyyE3newCs9yIG8QDEGGn_6simple:
   92|  20.1k|    pub fn new(key: K, value: V) -> Self {
   93|  20.1k|        KeyValuePair(key, value)
   94|  20.1k|    }
_RNvMs_CsaIyn0od6QZl_13fvm_ipld_hamtINtB4_12KeyValuePairyyE5valueCs9yIG8QDEGGn_6simple:
   86|  3.35k|    pub fn value(&self) -> &V {
   87|  3.35k|        &self.1
   88|  3.35k|    }
_RINvXNvCsaIyn0od6QZl_13fvm_ipld_hamt1__INtB5_12KeyValuePairyyENtNtCs7ck0nh2wxEq_5serde3ser9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
   79|  67.7k|#[derive(Debug, Serialize, Deserialize, PartialEq)]
_RNvXCsaIyn0od6QZl_13fvm_ipld_hamtNtB2_6ConfigNtNtCslwuTnKBYoK4_4core7default7Default7default:
   67|    534|    fn default() -> Self {
   68|    534|        Self {
   69|    534|            #[allow(deprecated)]
   70|    534|            bit_width: DEFAULT_BIT_WIDTH,
   71|    534|            min_data_depth: 0,
   72|    534|            max_array_width: 3,
   73|    534|        }
   74|    534|    }

_RNvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E8rm_childCs9yIG8QDEGGn_6simple:
  481|  1.84k|    fn rm_child(&mut self, i: usize, idx: u8) -> Pointer<K, V, H, Ver> {
  482|  1.84k|        self.bitfield.clear_bit(idx);
  483|  1.84k|        self.pointers.remove(i)
  484|  1.84k|    }
_RNvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E13get_child_mutCs9yIG8QDEGGn_6simple:
  498|  19.6k|    fn get_child_mut(&mut self, i: usize) -> &mut Pointer<K, V, H, Ver> {
  499|  19.6k|        &mut self.pointers[i]
  500|  19.6k|    }
_RNvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E5cleanCs9yIG8QDEGGn_6simple:
  511|  1.75k|        match child.clean(conf, depth) {
  512|  1.75k|            Ok(()) => Ok(false),
  513|      0|            Err(Error::ZeroPointers) if depth < conf.min_data_depth => Ok(true),
  514|      0|            Err(err) => Err(err),
  515|       |        }
  516|  1.75k|    }
_RNvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E12insert_childCs9yIG8QDEGGn_6simple:
  486|  14.9k|    fn insert_child(&mut self, idx: u8, key: K, value: V) {
  487|  14.9k|        let i = self.index_for_bit_pos(idx);
  488|  14.9k|        self.bitfield.set_bit(idx);
  489|  14.9k|        self.pointers.insert(i, Pointer::from_key_value(key, value))
  490|  14.9k|    }
_RNvMs3_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E17index_for_bit_posCs9yIG8QDEGGn_6simple:
  520|  36.7k|    pub(crate) fn index_for_bit_pos(&self, bp: u8) -> usize {
  521|  36.7k|        let mask = Bitfield::zero().set_bits_le(bp);
  522|  36.7k|        debug_assert_eq!(mask.count_ones(), bp as usize);
  523|  36.7k|        mask.and(&self.bitfield).count_ones()
  524|  36.7k|    }
_RNCINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E9get_valueyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0Cs9yIG8QDEGGn_6simple:
  254|  1.95k|                return Ok(vals.iter().find(|kv| key.eq(kv.key().borrow())));
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E8rm_valueyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  391|  8.38k|    fn rm_value<Q: ?Sized, S: Blockstore>(
  392|  8.38k|        &mut self,
  393|  8.38k|        hashed_key: &mut HashBits,
  394|  8.38k|        conf: &Config,
  395|  8.38k|        depth: u32,
  396|  8.38k|        key: &Q,
  397|  8.38k|        store: &S,
  398|  8.38k|    ) -> Result<Option<(K, V)>, Error>
  399|  8.38k|    where
  400|  8.38k|        K: Borrow<Q>,
  401|  8.38k|        Q: Hash + Eq,
  402|  8.38k|    {
  403|  8.38k|        let idx = hashed_key.next(conf.bit_width)?;
  404|       |
  405|       |        // No existing values at this point.
  406|  8.38k|        if !self.bitfield.test_bit(idx) {
  407|  2.42k|            return Ok(None);
  408|  5.96k|        }
  409|  5.96k|
  410|  5.96k|        let cindex = self.index_for_bit_pos(idx);
  411|  5.96k|        let child = self.get_child_mut(cindex);
  412|  5.96k|
  413|  5.96k|        match child {
  414|    613|            Pointer::Link { cid, cache } => {
  415|    613|                cache.get_or_try_init(|| Node::load(conf, store, cid, depth + 1).map(Box::new))?;
  416|    613|                let child_node = cache.get_mut().expect("filled line above");
  417|       |
  418|    613|                let deleted = child_node.rm_value(hashed_key, conf, depth + 1, key, store)?;
  419|       |
  420|    613|                if deleted.is_some() {
  421|    305|                    *child = Pointer::Dirty(std::mem::take(child_node));
  422|    305|                    if Self::clean(child, conf, depth)? {
  423|      0|                        self.rm_child(cindex, idx);
  424|    305|                    }
  425|    308|                }
  426|       |
  427|    613|                Ok(deleted)
  428|       |            }
  429|  1.82k|            Pointer::Dirty(node) => {
  430|       |                // Delete value and return deleted value
  431|  1.82k|                let deleted = node.rm_value(hashed_key, conf, depth + 1, key, store)?;
  432|       |
  433|  1.82k|                if deleted.is_some() && Self::clean(child, conf, depth)? {
  434|      0|                    self.rm_child(cindex, idx);
  435|  1.82k|                }
  436|       |
  437|  1.82k|                Ok(deleted)
  438|       |            }
  439|  3.52k|            Pointer::Values(vals) => {
  440|       |                // Delete value
  441|  4.42k|                for (i, p) in vals.iter().enumerate() {
  442|  4.42k|                    if key.eq(p.key().borrow()) {
  443|  2.17k|                        let old = if vals.len() == 1 {
  444|  1.84k|                            if let Pointer::Values(new_v) = self.rm_child(cindex, idx) {
  445|  1.84k|                                new_v.into_iter().next().unwrap()
  446|       |                            } else {
  447|      0|                                unreachable!()
  448|       |                            }
  449|       |                        } else {
  450|    327|                            vals.remove(i)
  451|       |                        };
  452|  2.17k|                        return Ok(Some((old.0, old.1)));
  453|  2.25k|                    }
  454|       |                }
  455|       |
  456|  1.35k|                Ok(None)
  457|       |            }
  458|       |        }
  459|  8.38k|    }
_RNCINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E3getyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0Cs9yIG8QDEGGn_6simple:
  189|    557|        Ok(self.search(k, store, conf)?.map(|kv| kv.value()))
_RNCINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs1_0Cs9yIG8QDEGGn_6simple:
  380|  6.41k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E12modify_valueRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  267|  28.6k|    fn modify_value<S: Blockstore>(
  268|  28.6k|        &mut self,
  269|  28.6k|        hashed_key: &mut HashBits,
  270|  28.6k|        conf: &Config,
  271|  28.6k|        depth: u32,
  272|  28.6k|        key: K,
  273|  28.6k|        value: V,
  274|  28.6k|        store: &S,
  275|  28.6k|        overwrite: bool,
  276|  28.6k|    ) -> Result<(Option<V>, bool), Error>
  277|  28.6k|    where
  278|  28.6k|        V: PartialEq,
  279|  28.6k|    {
  280|  28.6k|        let idx = hashed_key.next(conf.bit_width)?;
  281|       |
  282|       |        // No existing values at this point.
  283|  28.6k|        if !self.bitfield.test_bit(idx) {
  284|  14.9k|            if depth >= conf.min_data_depth {
  285|  14.9k|                self.insert_child(idx, key, value);
  286|  14.9k|            } else {
  287|       |                // Need to insert some empty nodes reserved for links.
  288|      0|                let mut sub = Node::<K, V, H, Ver>::default();
  289|      0|                sub.modify_value(hashed_key, conf, depth + 1, key, value, store, overwrite)?;
  290|      0|                self.insert_child_dirty(idx, Box::new(sub));
  291|       |            }
  292|  14.9k|            return Ok((None, true));
  293|  13.7k|        }
  294|  13.7k|
  295|  13.7k|        let cindex = self.index_for_bit_pos(idx);
  296|  13.7k|        let child = self.get_child_mut(cindex);
  297|  13.7k|
  298|  13.7k|        match child {
  299|  2.28k|            Pointer::Link { cid, cache } => {
  300|  2.28k|                cache.get_or_try_init(|| Node::load(conf, store, cid, depth + 1).map(Box::new))?;
  301|  2.28k|                let child_node = cache.get_mut().expect("filled line above");
  302|       |
  303|  2.28k|                let (old, modified) = child_node.modify_value(
  304|  2.28k|                    hashed_key,
  305|  2.28k|                    conf,
  306|  2.28k|                    depth + 1,
  307|  2.28k|                    key,
  308|  2.28k|                    value,
  309|  2.28k|                    store,
  310|  2.28k|                    overwrite,
  311|  2.28k|                )?;
  312|  2.28k|                if modified {
  313|  1.92k|                    *child = Pointer::Dirty(std::mem::take(child_node));
  314|  1.92k|                }
  315|  2.28k|                Ok((old, modified))
  316|       |            }
  317|  1.16k|            Pointer::Dirty(node) => {
  318|  1.16k|                node.modify_value(hashed_key, conf, depth + 1, key, value, store, overwrite)
  319|       |            }
  320|  10.2k|            Pointer::Values(vals) => {
  321|       |                // Update, if the key already exists.
  322|  10.2k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
  323|  2.80k|                    if overwrite {
  324|       |                        // If value changed, the parent nodes need to be marked as dirty.
  325|       |                        // ! The assumption here is that `PartialEq` is implemented correctly,
  326|       |                        // ! and that if that is true, the serialized bytes are equal.
  327|       |                        // ! To be absolutely sure, can serialize each value and compare or
  328|       |                        // ! refactor the Hamt to not be type safe and serialize on entry and
  329|       |                        // ! exit. These both come at costs, and this isn't a concern.
  330|  2.80k|                        let value_changed = vals[i].value() != &value;
  331|  2.80k|                        return Ok((
  332|  2.80k|                            Some(std::mem::replace(&mut vals[i].1, value)),
  333|  2.80k|                            value_changed,
  334|  2.80k|                        ));
  335|       |                    } else {
  336|       |                        // Can't overwrite, return None and false that the Node was not modified.
  337|      0|                        return Ok((None, false));
  338|       |                    }
  339|  7.46k|                }
  340|  7.46k|
  341|  7.46k|                // If the array is full, create a subshard and insert everything
  342|  7.46k|                if vals.len() >= conf.max_array_width {
  343|  2.34k|                    let kvs = std::mem::take(vals);
  344|  2.34k|                    let hashed_kvs = kvs.into_iter().map(|KeyValuePair(k, v)| {
  345|       |                        let hash = H::hash(&k);
  346|       |                        (k, v, hash)
  347|  2.34k|                    });
  348|  2.34k|
  349|  2.34k|                    let consumed = hashed_key.consumed;
  350|  2.34k|                    let mut sub = Node::<K, V, H, Ver>::default();
  351|  2.34k|                    let modified = sub.modify_value(
  352|  2.34k|                        hashed_key,
  353|  2.34k|                        conf,
  354|  2.34k|                        depth + 1,
  355|  2.34k|                        key,
  356|  2.34k|                        value,
  357|  2.34k|                        store,
  358|  2.34k|                        overwrite,
  359|  2.34k|                    )?;
  360|       |
  361|  9.39k|                    for (k, v, hash) in hashed_kvs {
  362|  7.04k|                        sub.modify_value(
  363|  7.04k|                            &mut HashBits::new_at_index(&hash, consumed),
  364|  7.04k|                            conf,
  365|  7.04k|                            depth + 1,
  366|  7.04k|                            k,
  367|  7.04k|                            v,
  368|  7.04k|                            store,
  369|  7.04k|                            overwrite,
  370|  7.04k|                        )?;
  371|       |                    }
  372|       |
  373|  2.34k|                    *child = Pointer::Dirty(Box::new(sub));
  374|  2.34k|
  375|  2.34k|                    return Ok(modified);
  376|  5.11k|                }
  377|  5.11k|
  378|  5.11k|                // Otherwise insert the element into the array in order.
  379|  5.11k|                let max = vals.len();
  380|  5.11k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
  381|  5.11k|
  382|  5.11k|                let np = KeyValuePair::new(key, value);
  383|  5.11k|                vals.insert(idx, np);
  384|  5.11k|
  385|  5.11k|                Ok((None, true))
  386|       |            }
  387|       |        }
  388|  28.6k|    }
_RNvXs0_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256ENtNtCslwuTnKBYoK4_4core7default7Default7defaultCs9yIG8QDEGGn_6simple:
   53|  8.16k|    fn default() -> Self {
   54|  8.16k|        Node {
   55|  8.16k|            bitfield: Bitfield::zero(),
   56|  8.16k|            pointers: Vec::new(),
   57|  8.16k|            hash: Default::default(),
   58|  8.16k|        }
   59|  8.16k|    }
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E5flushRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  461|  6.41k|    pub fn flush<S: Blockstore>(&mut self, store: &S) -> Result<(), Error> {
  462|  64.7k|        for pointer in &mut self.pointers {
  463|  58.3k|            if let Pointer::Dirty(node) = pointer {
  464|       |                // Flush cached sub node to clear it's cache
  465|  3.04k|                node.flush(store)?;
  466|       |
  467|       |                // Put node in blockstore and retrieve Cid
  468|  3.04k|                let cid = store.put_cbor(node, Code::Blake2b256)?;
  469|       |
  470|       |                // Can keep the flushed node in link cache
  471|  3.04k|                let cache = OnceCell::from(std::mem::take(node));
  472|  3.04k|
  473|  3.04k|                // Replace cached node with Cid link
  474|  3.04k|                *pointer = Pointer::Link { cid, cache };
  475|  55.2k|            }
  476|       |        }
  477|       |
  478|  6.41k|        Ok(())
  479|  6.41k|    }
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E3getyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  179|  3.01k|    pub fn get<Q: ?Sized, S: Blockstore>(
  180|  3.01k|        &self,
  181|  3.01k|        k: &Q,
  182|  3.01k|        store: &S,
  183|  3.01k|        conf: &Config,
  184|  3.01k|    ) -> Result<Option<&V>, Error>
  185|  3.01k|    where
  186|  3.01k|        K: Borrow<Q>,
  187|  3.01k|        Q: Eq + Hash,
  188|  3.01k|    {
  189|  3.01k|        Ok(self.search(k, store, conf)?.map(|kv| kv.value()))
  190|  3.01k|    }
_RNCINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0Cs9yIG8QDEGGn_6simple:
  322|  17.1k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E12remove_entryyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  193|  5.94k|    pub fn remove_entry<Q: ?Sized, S>(
  194|  5.94k|        &mut self,
  195|  5.94k|        k: &Q,
  196|  5.94k|        store: &S,
  197|  5.94k|        conf: &Config,
  198|  5.94k|    ) -> Result<Option<(K, V)>, Error>
  199|  5.94k|    where
  200|  5.94k|        K: Borrow<Q>,
  201|  5.94k|        Q: Eq + Hash,
  202|  5.94k|        S: Blockstore,
  203|  5.94k|    {
  204|  5.94k|        let hash = H::hash(k);
  205|  5.94k|        self.rm_value(&mut HashBits::new(&hash), conf, 0, k, store)
  206|  5.94k|    }
_RINvXs_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256ENtNtCs7ck0nh2wxEq_5serde3ser9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
   44|  6.41k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   45|  6.41k|    where
   46|  6.41k|        S: Serializer,
   47|  6.41k|    {
   48|  6.41k|        (&self.bitfield, &self.pointers).serialize(serializer)
   49|  6.41k|    }
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E6searchyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  213|  3.01k|    fn search<Q: ?Sized, S: Blockstore>(
  214|  3.01k|        &self,
  215|  3.01k|        q: &Q,
  216|  3.01k|        store: &S,
  217|  3.01k|        conf: &Config,
  218|  3.01k|    ) -> Result<Option<&KeyValuePair<K, V>>, Error>
  219|  3.01k|    where
  220|  3.01k|        K: Borrow<Q>,
  221|  3.01k|        Q: Eq + Hash,
  222|  3.01k|    {
  223|  3.01k|        let hash = H::hash(q);
  224|  3.01k|        self.get_value(&mut HashBits::new(&hash), conf, 0, q, store)
  225|  3.01k|    }
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E9get_valueyRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  227|  3.74k|    fn get_value<Q: ?Sized, S: Blockstore>(
  228|  3.74k|        &self,
  229|  3.74k|        hashed_key: &mut HashBits,
  230|  3.74k|        conf: &Config,
  231|  3.74k|        depth: u32,
  232|  3.74k|        key: &Q,
  233|  3.74k|        store: &S,
  234|  3.74k|    ) -> Result<Option<&KeyValuePair<K, V>>, Error>
  235|  3.74k|    where
  236|  3.74k|        K: Borrow<Q>,
  237|  3.74k|        Q: Eq + Hash,
  238|  3.74k|    {
  239|  3.74k|        let idx = hashed_key.next(conf.bit_width)?;
  240|       |
  241|  3.74k|        if !self.bitfield.test_bit(idx) {
  242|  1.64k|            return Ok(None);
  243|  2.10k|        }
  244|  2.10k|
  245|  2.10k|        let cindex = self.index_for_bit_pos(idx);
  246|  2.10k|        let child = self.get_child(cindex);
  247|       |
  248|  2.10k|        let node = match child {
  249|    468|            Pointer::Link { cid, cache } => {
  250|    468|                cache.get_or_try_init(|| Node::load(conf, store, cid, depth + 1).map(Box::new))?
  251|       |            }
  252|    270|            Pointer::Dirty(node) => node,
  253|  1.36k|            Pointer::Values(vals) => {
  254|  1.36k|                return Ok(vals.iter().find(|kv| key.eq(kv.key().borrow())));
  255|       |            }
  256|       |        };
  257|       |
  258|    738|        node.get_value(hashed_key, conf, depth + 1, key, store)
  259|  3.74k|    }
_RINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E3setRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs9yIG8QDEGGn_6simple:
  155|  15.8k|    pub fn set<S: Blockstore>(
  156|  15.8k|        &mut self,
  157|  15.8k|        key: K,
  158|  15.8k|        value: V,
  159|  15.8k|        store: &S,
  160|  15.8k|        conf: &Config,
  161|  15.8k|        overwrite: bool,
  162|  15.8k|    ) -> Result<(Option<V>, bool), Error>
  163|  15.8k|    where
  164|  15.8k|        V: PartialEq,
  165|  15.8k|    {
  166|  15.8k|        let hash = H::hash(&key);
  167|  15.8k|        self.modify_value(
  168|  15.8k|            &mut HashBits::new(&hash),
  169|  15.8k|            conf,
  170|  15.8k|            0,
  171|  15.8k|            key,
  172|  15.8k|            value,
  173|  15.8k|            store,
  174|  15.8k|            overwrite,
  175|  15.8k|        )
  176|  15.8k|    }
_RNCINvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCsfZY3aqbKclt_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0Cs9yIG8QDEGGn_6simple:
  344|  7.04k|                    let hashed_kvs = kvs.into_iter().map(|KeyValuePair(k, v)| {
  345|  7.04k|                        let hash = H::hash(&k);
  346|  7.04k|                        (k, v, hash)
  347|  7.04k|                    });
_RNvMs2_NtCsaIyn0od6QZl_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E9get_childCs9yIG8QDEGGn_6simple:
  502|  2.10k|    fn get_child(&self, i: usize) -> &Pointer<K, V, H, Ver> {
  503|  2.10k|        &self.pointers[i]
  504|  2.10k|    }

_RNvMs3_NtCsaIyn0od6QZl_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256E5cleanCs9yIG8QDEGGn_6simple:
  199|  1.75k|    pub(crate) fn clean(&mut self, conf: &Config, depth: u32) -> Result<(), Error> {
  200|  1.75k|        match self {
  201|  1.75k|            Pointer::Dirty(n) => match n.pointers.len() {
  202|      0|                0 => Err(Error::ZeroPointers),
  203|  1.75k|                _ if depth < conf.min_data_depth => {
  204|      0|                    // We are in the shallows where we don't want key-value pairs, just links,
  205|      0|                    // so as long as they are pointing at non-empty nodes we can keep them.
  206|      0|                    // The rest of the rules would move key-value pairs up.
  207|      0|                    Ok(())
  208|       |                }
  209|       |                1 => {
  210|       |                    // Node has only one pointer, swap with parent node
  211|    204|                    if let Pointer::Values(vals) = &mut n.pointers[0] {
  212|       |                        // Take child values, to ensure canonical ordering
  213|    137|                        let values = std::mem::take(vals);
  214|    137|
  215|    137|                        // move parent node up
  216|    137|                        *self = Pointer::Values(values)
  217|     67|                    }
  218|    204|                    Ok(())
  219|       |                }
  220|  1.54k|                i if 2 <= i && i <= conf.max_array_width => {
  221|  1.22k|                    // If more child values than max width, nothing to change.
  222|  1.22k|                    let mut children_len = 0;
  223|  3.42k|                    for c in n.pointers.iter() {
  224|  3.42k|                        if let Pointer::Values(vals) = c {
  225|  3.35k|                            children_len += vals.len();
  226|  3.35k|                        } else {
  227|     67|                            return Ok(());
  228|       |                        }
  229|       |                    }
  230|  1.15k|                    if children_len > conf.max_array_width {
  231|     87|                        return Ok(());
  232|  1.07k|                    }
  233|  1.07k|
  234|  1.07k|                    // Collect values from child nodes to collapse.
  235|  1.07k|                    let mut child_vals: Vec<KeyValuePair<K, V>> = n
  236|  1.07k|                        .pointers
  237|  1.07k|                        .iter_mut()
  238|  1.07k|                        .filter_map(|p| {
  239|       |                            if let Pointer::Values(kvs) = p {
  240|       |                                Some(std::mem::take(kvs))
  241|       |                            } else {
  242|       |                                None
  243|       |                            }
  244|  1.07k|                        })
  245|  1.07k|                        .flatten()
  246|  1.07k|                        .collect();
  247|  1.07k|
  248|  1.07k|                    // Sorting by key, values are inserted based on the ordering of the key itself,
  249|  1.07k|                    // so when collapsed, it needs to be ensured that this order is equal.
  250|  1.07k|                    child_vals.sort_unstable_by(|a, b| {
  251|       |                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  252|  1.07k|                    });
  253|  1.07k|
  254|  1.07k|                    // Replace link node with child values
  255|  1.07k|                    *self = Pointer::Values(child_vals);
  256|  1.07k|                    Ok(())
  257|       |                }
  258|    324|                _ => Ok(()),
  259|       |            },
  260|      0|            _ => unreachable!("clean is only called on dirty pointer"),
  261|       |        }
  262|  1.75k|    }
_RINvXs_NtCsaIyn0od6QZl_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256ENtNtCs7ck0nh2wxEq_5serde3ser9Serialize9serializeQINtNtCsdRvoM81ATYH_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs60Uy8i2jZrM_7cbor4ii4core5utils9BufWriterEECs9yIG8QDEGGn_6simple:
  116|  58.3k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  117|  58.3k|    where
  118|  58.3k|        S: Serializer,
  119|  58.3k|    {
  120|  58.3k|        match Ver::NUMBER {
  121|      0|            0 => pointer_v0::PointerSer::try_from(self)
  122|      0|                .map_err(ser::Error::custom)?
  123|      0|                .serialize(serializer),
  124|  58.3k|            _ => match self {
  125|  48.6k|                Pointer::Values(vals) => vals.serialize(serializer),
  126|  9.66k|                Pointer::Link { cid, .. } => cid.serialize(serializer),
  127|      0|                Pointer::Dirty(_) => Err(ser::Error::custom("Cannot serialize cached values")),
  128|       |            },
  129|       |        }
  130|  58.3k|    }
_RNCNvMs3_NtCsaIyn0od6QZl_13fvm_ipld_hamt7pointerINtB7_7PointeryyNtNtB9_14hash_algorithm6Sha256E5cleans_0Cs9yIG8QDEGGn_6simple:
  250|  2.84k|                    child_vals.sort_unstable_by(|a, b| {
  251|  2.84k|                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  252|  2.84k|                    });
_RNvMs3_NtCsaIyn0od6QZl_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256E14from_key_valueCs9yIG8QDEGGn_6simple:
  193|  14.9k|    pub(crate) fn from_key_value(key: K, value: V) -> Self {
  194|  14.9k|        Pointer::Values(vec![KeyValuePair::new(key, value)])
  195|  14.9k|    }
_RNCNvMs3_NtCsaIyn0od6QZl_13fvm_ipld_hamt7pointerINtB7_7PointeryyNtNtB9_14hash_algorithm6Sha256E5clean0Cs9yIG8QDEGGn_6simple:
  239|  3.01k|                            if let Pointer::Values(kvs) = p {
  240|  3.01k|                                Some(std::mem::take(kvs))
  241|       |                            } else {
  242|      0|                                None
  243|       |                            }
  244|  3.01k|                        })

