_RNvXs14_NtCsab0iDiSsW0X_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvMNtCsab0iDiSsW0X_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCs8FEd8Z4yMqw_6simple:
   58|  41.6k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  41.6k|        AHasher {
   60|  41.6k|            buffer: rand_state.k0,
   61|  41.6k|            pad: rand_state.k1,
   62|  41.6k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  41.6k|        }
   64|  41.6k|    }
_RNvMNtCsab0iDiSsW0X_5ahash13fallback_hashNtB2_7AHasher6update:
   97|  44.3k|    fn update(&mut self, new_data: u64) {
   98|  44.3k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|  44.3k|    }
_RNvXs_NtCsab0iDiSsW0X_5ahash13fallback_hashNtB4_7AHasherNtNtCshaMFDoCIZLT_4core4hash6Hasher9write_u64Cs8FEd8Z4yMqw_6simple:
  163|  41.6k|    fn write_u64(&mut self, i: u64) {
  164|  41.6k|        self.update(i as u64);
  165|  41.6k|    }
_RNvXs_NtCsab0iDiSsW0X_5ahash13fallback_hashNtB4_7AHasherNtNtCshaMFDoCIZLT_4core4hash6Hasher6finishCs8FEd8Z4yMqw_6simple:
  212|  41.6k|    fn finish(&self) -> u64 {
  213|  41.6k|        let rot = (self.buffer & 63) as u32;
  214|  41.6k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  41.6k|    }
_RNvMNtCsab0iDiSsW0X_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|    544|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|    544|        AHasher {
   60|    544|            buffer: rand_state.k0,
   61|    544|            pad: rand_state.k1,
   62|    544|            extra_keys: [rand_state.k2, rand_state.k3],
   63|    544|        }
   64|    544|    }
_RNvXs4_NtCsab0iDiSsW0X_5ahash13fallback_hashNtB5_7AHasherNtNtCshaMFDoCIZLT_4core5clone5Clone5cloneB7_:
   23|  2.17k|#[derive(Debug, Clone)]
_RNvXs_NtCsab0iDiSsW0X_5ahash13fallback_hashNtB4_7AHasherNtNtCshaMFDoCIZLT_4core4hash6Hasher6finishB6_:
  212|  2.17k|    fn finish(&self) -> u64 {
  213|  2.17k|        let rot = (self.buffer & 63) as u32;
  214|  2.17k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  2.17k|    }
_RNvXs_NtCsab0iDiSsW0X_5ahash13fallback_hashNtB4_7AHasherNtNtCshaMFDoCIZLT_4core4hash6Hasher9write_u64B6_:
  163|  2.72k|    fn write_u64(&mut self, i: u64) {
  164|  2.72k|        self.update(i as u64);
  165|  2.72k|    }
_RNvXs_NtCsab0iDiSsW0X_5ahash13fallback_hashNtB4_7AHasherNtNtCshaMFDoCIZLT_4core4hash6Hasher11write_usizeB6_:
  174|    544|    fn write_usize(&mut self, i: usize) {
  175|    544|        self.write_u64(i as u64);
  176|    544|    }

_RNvMs2_NtCsab0iDiSsW0X_5ahash8hash_mapINtB5_8AHashMapyyE6insertCs8FEd8Z4yMqw_6simple:
  164|  16.1k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  16.1k|        self.0.insert(k, v)
  166|  16.1k|    }
_RINvMs2_NtCsab0iDiSsW0X_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECs8FEd8Z4yMqw_6simple:
  186|  6.27k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  6.27k|    where
  188|  6.27k|        K: Borrow<Q>,
  189|  6.27k|        Q: Hash + Eq,
  190|  6.27k|    {
  191|  6.27k|        self.0.remove(k)
  192|  6.27k|    }
_RINvMs2_NtCsab0iDiSsW0X_5ahash8hash_mapINtB6_8AHashMapyyE3getyECs8FEd8Z4yMqw_6simple:
   79|  4.44k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  4.44k|    where
   81|  4.44k|        K: Borrow<Q>,
   82|  4.44k|        Q: Hash + Eq,
   83|  4.44k|    {
   84|  4.44k|        self.0.get(k)
   85|  4.44k|    }
_RNvMs0_NtCsab0iDiSsW0X_5ahash8hash_mapINtB5_8AHashMapyyE3newCs8FEd8Z4yMqw_6simple:
   35|    544|    pub fn new() -> Self {
   36|    544|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|    544|    }

_RNvNtCsab0iDiSsW0X_5ahash10operations15folded_multiply:
   11|  88.1k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|  88.1k|    let result = (s as u128).wrapping_mul(by as u128);
   13|  88.1k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|  88.1k|}

_RNvXs3_NtCsab0iDiSsW0X_5ahash12random_stateNtB5_11RandomStateNtNtCshaMFDoCIZLT_4core4hash11BuildHasher12build_hasherCs8FEd8Z4yMqw_6simple:
  293|  41.6k|    fn build_hasher(&self) -> AHasher {
  294|  41.6k|        AHasher::from_random_state(self)
  295|  41.6k|    }
_RNvMs1_NtCsab0iDiSsW0X_5ahash12random_stateNtB5_11RandomState3newCs8FEd8Z4yMqw_6simple:
  196|    544|    pub fn new() -> RandomState {
  197|    544|        let src = Self::get_src();
  198|    544|        let fixed = src.get_fixed_seeds();
  199|    544|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  200|    544|    }
_RNvXs2_NtCsab0iDiSsW0X_5ahash12random_stateNtB5_11RandomStateNtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
  256|    544|    fn default() -> Self {
  257|    544|        Self::new()
  258|    544|    }
_RNvMs1_NtCsab0iDiSsW0X_5ahash12random_stateNtB5_11RandomState7get_srcCs8FEd8Z4yMqw_6simple:
  183|    544|    fn get_src() -> &'static dyn RandomSource {
  184|    544|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  185|    544|    }
_RNCNvMs1_NtCsab0iDiSsW0X_5ahash12random_stateNtB7_11RandomState7get_src0Cs8FEd8Z4yMqw_6simple:
  184|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvXs_NtCsab0iDiSsW0X_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  130|    544|    fn gen_hasher_seed(&self) -> usize {
  131|    544|        let stack = self as *const _ as usize;
  132|    544|        self.counter.fetch_add(stack, Ordering::Relaxed)
  133|    544|    }
_RNvMs1_NtCsab0iDiSsW0X_5ahash12random_stateNtB5_11RandomState9from_keys:
  211|    544|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  212|    544|        let &[k0, k1, k2, k3] = a;
  213|    544|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  214|    544|        hasher.write_usize(c);
  215|    544|        let mix = |k: u64| {
  216|       |            let mut h = hasher.clone();
  217|       |            h.write_u64(k);
  218|       |            h.finish()
  219|       |        };
  220|    544|        RandomState {
  221|    544|            k0: mix(b[0]),
  222|    544|            k1: mix(b[1]),
  223|    544|            k2: mix(b[2]),
  224|    544|            k3: mix(b[3]),
  225|    544|        }
  226|    544|    }
_RNvXs_NtCsab0iDiSsW0X_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
   96|    544|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
   97|    544|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
   98|    544|
   99|    544|        SEEDS.get_or_init(|| {
  100|       |            let mut result: [u8; 64] = [0; 64];
  101|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|       |            Box::new(result.convert())
  103|    544|        })
  104|    544|    }
_RNCNvXs_NtCsab0iDiSsW0X_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
   99|      1|        SEEDS.get_or_init(|| {
  100|      1|            let mut result: [u8; 64] = [0; 64];
  101|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|      1|            Box::new(result.convert())
  103|      1|        })
_RNCNvMs1_NtCsab0iDiSsW0X_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  215|  2.17k|        let mix = |k: u64| {
  216|  2.17k|            let mut h = hasher.clone();
  217|  2.17k|            h.write_u64(k);
  218|  2.17k|            h.finish()
  219|  2.17k|        };
_RNvMNtCsab0iDiSsW0X_5ahash12random_stateNtB2_19DefaultRandomSource3new:
   80|      1|    fn new() -> DefaultRandomSource {
   81|      1|        DefaultRandomSource {
   82|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   83|      1|        }
   84|      1|    }

_RNvXs1j_Csjm13LW3GmYF_9arbitraryThINtNtCs9ySuRiB3rXh_5alloc3vec3VecNtCs8FEd8Z4yMqw_6simple9OperationEENtB6_9Arbitrary9size_hintB15_:
  568|    545|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|    545|                crate::size_hint::and_all(&[
  570|    545|                    <$last as Arbitrary>::size_hint(depth),
  571|    545|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|    545|                ])
  573|    545|            }
_RNvXs1j_Csjm13LW3GmYF_9arbitraryThINtNtCs9ySuRiB3rXh_5alloc3vec3VecNtCs8FEd8Z4yMqw_6simple9OperationEENtB6_9Arbitrary19arbitrary_take_restB15_:
  561|    544|            fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  562|    544|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  563|    544|                let $last = $last::arbitrary_take_rest(u)?;
  564|    544|                Ok(($($xs,)* $last,))
  565|    544|            }
_RNvXsa_Csjm13LW3GmYF_9arbitraryINtNtCs9ySuRiB3rXh_5alloc3vec3VecNtCs8FEd8Z4yMqw_6simple9OperationENtB5_9Arbitrary9size_hintB12_:
  690|    545|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    545|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    545|    }
_RNvXsH_Csjm13LW3GmYF_9arbitraryjNtB5_9Arbitrary9size_hintCs8FEd8Z4yMqw_6simple:
  302|    545|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    545|                    let n = mem::size_of::<$ty>();
  304|    545|                    (n, Some(n))
  305|    545|                }
_RNvXsa_Csjm13LW3GmYF_9arbitraryINtNtCs9ySuRiB3rXh_5alloc3vec3VecNtCs8FEd8Z4yMqw_6simple9OperationENtB5_9Arbitrary19arbitrary_take_restB12_:
  686|    544|        u.arbitrary_take_rest_iter()?.collect()
  687|    544|    }
_RNvXsE_Csjm13LW3GmYF_9arbitrarymNtB5_9Arbitrary9size_hintCs8FEd8Z4yMqw_6simple:
  302|    544|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    544|                    let n = mem::size_of::<$ty>();
  304|    544|                    (n, Some(n))
  305|    544|                }
_RNvYyNtCsjm13LW3GmYF_9arbitrary9Arbitrary19arbitrary_take_restCs8FEd8Z4yMqw_6simple:
  182|    254|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    254|        Self::arbitrary(&mut u)
  184|    254|    }
_RNvXsC_Csjm13LW3GmYF_9arbitraryhNtB5_9Arbitrary9size_hintCs8FEd8Z4yMqw_6simple:
  302|    545|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    545|                    let n = mem::size_of::<$ty>();
  304|    545|                    (n, Some(n))
  305|    545|                }
_RNvXsF_Csjm13LW3GmYF_9arbitraryyNtB5_9Arbitrary9size_hintCs8FEd8Z4yMqw_6simple:
  302|  1.08k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.08k|                    let n = mem::size_of::<$ty>();
  304|  1.08k|                    (n, Some(n))
  305|  1.08k|                }
_RNvXsE_Csjm13LW3GmYF_9arbitrarymNtB5_9Arbitrary9arbitrary:
  291|  26.9k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  26.9k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  26.9k|                    u.fill_buffer(&mut buf)?;
  294|  26.9k|                    let mut x: $unsigned = 0;
  295|   107k|                    for i in 0..mem::size_of::<$ty>() {
  296|   107k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   107k|                    }
  298|  26.9k|                    Ok(x as $ty)
  299|  26.9k|                }
_RNvXsC_Csjm13LW3GmYF_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|    544|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|    544|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|    544|                    u.fill_buffer(&mut buf)?;
  294|    544|                    let mut x: $unsigned = 0;
  295|    544|                    for i in 0..mem::size_of::<$ty>() {
  296|    544|                        x |= buf[i] as $unsigned << (i * 8);
  297|    544|                    }
  298|    544|                    Ok(x as $ty)
  299|    544|                }
_RNvXsF_Csjm13LW3GmYF_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  43.1k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  43.1k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  43.1k|                    u.fill_buffer(&mut buf)?;
  294|  43.1k|                    let mut x: $unsigned = 0;
  295|   344k|                    for i in 0..mem::size_of::<$ty>() {
  296|   344k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   344k|                    }
  298|  43.1k|                    Ok(x as $ty)
  299|  43.1k|                }

_RNvNtCsjm13LW3GmYF_9arbitrary9size_hint6or_allCs8FEd8Z4yMqw_6simple:
   58|    544|    if let Some(head) = hints.first().copied() {
   59|    544|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    544|}
_RINvNtCsjm13LW3GmYF_9arbitrary9size_hint15recursion_guardNCNvXs1_Cs8FEd8Z4yMqw_6simpleNtB11_6MethodNtB4_9Arbitrary9size_hint0EB11_:
   12|    544|pub fn recursion_guard(
   13|    544|    depth: usize,
   14|    544|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    544|) -> (usize, Option<usize>) {
   16|    544|    const MAX_DEPTH: usize = 20;
   17|    544|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    544|        f(depth + 1)
   21|       |    }
   22|    544|}
_RNCNCNvNtCsjm13LW3GmYF_9arbitrary9size_hint2or00Cs8FEd8Z4yMqw_6simple:
   48|  1.08k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCsjm13LW3GmYF_9arbitrary9size_hint3andCs8FEd8Z4yMqw_6simple:
   26|  3.81k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.81k|    let lower = lhs.0 + rhs.0;
   28|  3.81k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.81k|    (lower, upper)
   30|  3.81k|}
_RNvNtCsjm13LW3GmYF_9arbitrary9size_hint7and_allCs8FEd8Z4yMqw_6simple:
   37|  2.72k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  2.72k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  2.72k|}
_RNvNtCsjm13LW3GmYF_9arbitrary9size_hint2orCs8FEd8Z4yMqw_6simple:
   44|  1.08k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.08k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.08k|    let upper = lhs
   47|  1.08k|        .1
   48|  1.08k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.08k|    (lower, upper)
   50|  1.08k|}
_RNCNvNtCsjm13LW3GmYF_9arbitrary9size_hint2or0Cs8FEd8Z4yMqw_6simple:
   48|  1.08k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCsjm13LW3GmYF_9arbitrary9size_hint3and00Cs8FEd8Z4yMqw_6simple:
   28|  2.17k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCsjm13LW3GmYF_9arbitrary9size_hint3and0Cs8FEd8Z4yMqw_6simple:
   28|  3.26k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCsjm13LW3GmYF_9arbitrary9size_hint15recursion_guardNCNvXs_Cs8FEd8Z4yMqw_6simpleNtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   12|    544|pub fn recursion_guard(
   13|    544|    depth: usize,
   14|    544|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    544|) -> (usize, Option<usize>) {
   16|    544|    const MAX_DEPTH: usize = 20;
   17|    544|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    544|        f(depth + 1)
   21|       |    }
   22|    544|}

_RNvXs0_NtCsjm13LW3GmYF_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCs8FEd8Z4yMqw_6simple9OperationENtNtNtNtCshaMFDoCIZLT_4core4iter6traits8iterator8Iterator4nextB1e_:
  686|  27.4k|        if let Some(mut u) = self.u.take() {
  687|  26.9k|            if self.size == 1 {
  688|    542|                Some(Arbitrary::arbitrary_take_rest(u))
  689|  26.3k|            } else if self.size == 0 {
  690|      2|                None
  691|       |            } else {
  692|  26.3k|                self.size -= 1;
  693|  26.3k|                let ret = Arbitrary::arbitrary(&mut u);
  694|  26.3k|                self.u = Some(u);
  695|  26.3k|                Some(ret)
  696|       |            }
  697|       |        } else {
  698|    542|            None
  699|       |        }
  700|  27.4k|    }
_RNvMNtCsjm13LW3GmYF_9arbitrary12unstructuredNtB2_12Unstructured3lenCs8FEd8Z4yMqw_6simple:
  108|    544|    pub fn len(&self) -> usize {
  109|    544|        self.data.len()
  110|    544|    }
_RINvMNtCsjm13LW3GmYF_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCs8FEd8Z4yMqw_6simple9OperationEB1s_:
  548|    544|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  549|    544|        self,
  550|    544|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  551|    544|        let (lower, upper) = ElementType::size_hint(0);
  552|    544|
  553|    544|        let elem_size = upper.unwrap_or(lower * 2);
  554|    544|        let elem_size = std::cmp::max(1, elem_size);
  555|    544|        let size = self.len() / elem_size;
  556|    544|        Ok(ArbitraryTakeRestIter {
  557|    544|            size,
  558|    544|            u: Some(self),
  559|    544|            _marker: PhantomData,
  560|    544|        })
  561|    544|    }
_RNvMNtCsjm13LW3GmYF_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  70.5k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  70.5k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  70.5k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  70.5k|        for byte in buffer[n..].iter_mut() {
  453|      0|            *byte = 0;
  454|      0|        }
  455|  70.5k|        self.data = &self.data[n..];
  456|  70.5k|        Ok(())
  457|  70.5k|    }
_RNvMNtCsjm13LW3GmYF_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    544|    pub fn new(data: &'a [u8]) -> Self {
   86|    544|        Unstructured { data }
   87|    544|    }

_RINvNvNtCs6dg3aiSrwgF_12blake2b_simd4avx214compress_blocks0_9as_arrayshEB6_:
  143|  18.7k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  18.7k|                let mut p = a.as_ptr();
  145|  18.7k|                ( $( {
  146|  18.7k|                    let aref = &*(p as *const [T; $len]);
  147|  18.7k|                    p = p.offset($len as isize);
  148|  18.7k|                    aref
  149|  18.7k|                } ),* )
  150|  18.7k|            }
_RINvNvNtCs6dg3aiSrwgF_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  3.20k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  3.20k|                &*(slice.as_ptr() as *const [_; $len])
   63|  3.20k|            }
_RINvNvMCs6dg3aiSrwgF_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|  7.55k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  7.55k|                let mut p = a.as_ptr();
  145|  7.55k|                ( $( {
  146|  7.55k|                    let aref = &*(p as *const [T; $len]);
  147|  7.55k|                    p = p.offset($len as isize);
  148|  7.55k|                    aref
  149|  7.55k|                } ),* )
  150|  7.55k|            }
_RINvNvNtCs6dg3aiSrwgF_12blake2b_simd4avx214compress_block9as_arraysyEB6_:
  240|  18.7k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|  18.7k|                let mut p = a.as_mut_ptr();
  242|  18.7k|                ( $( {
  243|  18.7k|                    let aref = &mut *(p as *mut [T; $len]);
  244|  18.7k|                    p = p.offset($len as isize);
  245|  18.7k|                    aref
  246|  18.7k|                } ),* )
  247|  18.7k|            }
_RINvNvMCs6dg3aiSrwgF_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|  7.55k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  7.55k|                let mut p = a.as_ptr();
  145|  7.55k|                ( $( {
  146|  7.55k|                    let aref = &*(p as *const [T; $len]);
  147|  7.55k|                    p = p.offset($len as isize);
  148|  7.55k|                    aref
  149|  7.55k|                } ),* )
  150|  7.55k|            }
_RINvNvNtCs6dg3aiSrwgF_12blake2b_simd4avx214compress_blocks_9as_arraysyEB6_:
  143|  18.7k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  18.7k|                let mut p = a.as_ptr();
  145|  18.7k|                ( $( {
  146|  18.7k|                    let aref = &*(p as *const [T; $len]);
  147|  18.7k|                    p = p.offset($len as isize);
  148|  18.7k|                    aref
  149|  18.7k|                } ),* )
  150|  18.7k|            }
_RINvNvCs6dg3aiSrwgF_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|  7.55k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|  7.55k|                let mut p = a.as_mut_ptr();
  242|  7.55k|                ( $( {
  243|  7.55k|                    let aref = &mut *(p as *mut [T; $len]);
  244|  7.55k|                    p = p.offset($len as isize);
  245|  7.55k|                    aref
  246|  7.55k|                } ),* )
  247|  7.55k|            }

_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx23add:
   35|  2.69M|unsafe fn add(a: __m256i, b: __m256i) -> __m256i {
   36|  2.69M|    _mm256_add_epi64(a, b)
   37|  2.69M|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx213undiagonalize:
  139|   224k|unsafe fn undiagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  140|   224k|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(0, 3, 2, 1));
  141|   224k|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  142|   224k|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(2, 1, 0, 3));
  143|   224k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx25rot24:
   92|   449k|unsafe fn rot24(x: __m256i) -> __m256i {
   93|   449k|    _mm256_or_si256(_mm256_srli_epi64(x, 24), _mm256_slli_epi64(x, 64 - 24))
   94|   449k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx22g2:
  118|   449k|unsafe fn g2(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  119|   449k|    *a = add(*a, *m);
  120|   449k|    *a = add(*a, *b);
  121|   449k|    *d = xor(*d, *a);
  122|   449k|    *d = rot16(*d);
  123|   449k|    *c = add(*c, *d);
  124|   449k|    *b = xor(*b, *c);
  125|   449k|    *b = rot63(*b);
  126|   449k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx214compress_block:
  146|  18.7k|unsafe fn compress_block(
  147|  18.7k|    block: &[u8; BLOCKBYTES],
  148|  18.7k|    words: &mut [Word; 8],
  149|  18.7k|    count: Count,
  150|  18.7k|    last_block: Word,
  151|  18.7k|    last_node: Word,
  152|  18.7k|) {
  153|  18.7k|    let (words_low, words_high) = mut_array_refs!(words, DEGREE, DEGREE);
  154|  18.7k|    let (iv_low, iv_high) = array_refs!(&IV, DEGREE, DEGREE);
  155|  18.7k|    let mut a = loadu(words_low);
  156|  18.7k|    let mut b = loadu(words_high);
  157|  18.7k|    let mut c = loadu(iv_low);
  158|  18.7k|    let flags = set4(count_low(count), count_high(count), last_block, last_node);
  159|  18.7k|    let mut d = xor(loadu(iv_high), flags);
  160|  18.7k|
  161|  18.7k|    let msg_chunks = array_refs!(block, 16, 16, 16, 16, 16, 16, 16, 16);
  162|  18.7k|    let m0 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.0));
  163|  18.7k|    let m1 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.1));
  164|  18.7k|    let m2 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.2));
  165|  18.7k|    let m3 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.3));
  166|  18.7k|    let m4 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.4));
  167|  18.7k|    let m5 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.5));
  168|  18.7k|    let m6 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.6));
  169|  18.7k|    let m7 = _mm256_broadcastsi128_si256(loadu_128(msg_chunks.7));
  170|  18.7k|
  171|  18.7k|    let iv0 = a;
  172|  18.7k|    let iv1 = b;
  173|  18.7k|    let mut t0;
  174|  18.7k|    let mut t1;
  175|  18.7k|    let mut b0;
  176|  18.7k|
  177|  18.7k|    // round 1
  178|  18.7k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  179|  18.7k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  180|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  181|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  182|  18.7k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  183|  18.7k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  184|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  185|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  186|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  187|  18.7k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  188|  18.7k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  189|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  190|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  191|  18.7k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  192|  18.7k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  193|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  194|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  195|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  196|  18.7k|
  197|  18.7k|    // round 2
  198|  18.7k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  199|  18.7k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  200|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  201|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  202|  18.7k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  203|  18.7k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  204|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  205|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  206|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  207|  18.7k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  208|  18.7k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  209|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  210|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  211|  18.7k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  212|  18.7k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  213|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  214|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  215|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  216|  18.7k|
  217|  18.7k|    // round 3
  218|  18.7k|    t0 = _mm256_alignr_epi8(m6, m5, 8);
  219|  18.7k|    t1 = _mm256_unpackhi_epi64(m2, m7);
  220|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  221|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  222|  18.7k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  223|  18.7k|    t1 = _mm256_blend_epi32(m6, m1, 0x33);
  224|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  225|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  226|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  227|  18.7k|    t0 = _mm256_alignr_epi8(m5, m4, 8);
  228|  18.7k|    t1 = _mm256_unpackhi_epi64(m1, m3);
  229|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  230|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  231|  18.7k|    t0 = _mm256_unpacklo_epi64(m2, m7);
  232|  18.7k|    t1 = _mm256_blend_epi32(m0, m3, 0x33);
  233|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  234|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  235|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  236|  18.7k|
  237|  18.7k|    // round 4
  238|  18.7k|    t0 = _mm256_unpackhi_epi64(m3, m1);
  239|  18.7k|    t1 = _mm256_unpackhi_epi64(m6, m5);
  240|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  241|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  242|  18.7k|    t0 = _mm256_unpackhi_epi64(m4, m0);
  243|  18.7k|    t1 = _mm256_unpacklo_epi64(m6, m7);
  244|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  245|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  246|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  247|  18.7k|    t0 = _mm256_alignr_epi8(m1, m7, 8);
  248|  18.7k|    t1 = _mm256_shuffle_epi32(m2, _MM_SHUFFLE!(1, 0, 3, 2));
  249|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  250|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  251|  18.7k|    t0 = _mm256_unpacklo_epi64(m4, m3);
  252|  18.7k|    t1 = _mm256_unpacklo_epi64(m5, m0);
  253|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  254|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  255|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  256|  18.7k|
  257|  18.7k|    // round 5
  258|  18.7k|    t0 = _mm256_unpackhi_epi64(m4, m2);
  259|  18.7k|    t1 = _mm256_unpacklo_epi64(m1, m5);
  260|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  261|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  262|  18.7k|    t0 = _mm256_blend_epi32(m3, m0, 0x33);
  263|  18.7k|    t1 = _mm256_blend_epi32(m7, m2, 0x33);
  264|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  265|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  266|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  267|  18.7k|    t0 = _mm256_alignr_epi8(m7, m1, 8);
  268|  18.7k|    t1 = _mm256_alignr_epi8(m3, m5, 8);
  269|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  270|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  271|  18.7k|    t0 = _mm256_unpackhi_epi64(m6, m0);
  272|  18.7k|    t1 = _mm256_unpacklo_epi64(m6, m4);
  273|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  274|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  275|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  276|  18.7k|
  277|  18.7k|    // round 6
  278|  18.7k|    t0 = _mm256_unpacklo_epi64(m1, m3);
  279|  18.7k|    t1 = _mm256_unpacklo_epi64(m0, m4);
  280|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  281|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  282|  18.7k|    t0 = _mm256_unpacklo_epi64(m6, m5);
  283|  18.7k|    t1 = _mm256_unpackhi_epi64(m5, m1);
  284|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  285|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  286|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  287|  18.7k|    t0 = _mm256_alignr_epi8(m2, m0, 8);
  288|  18.7k|    t1 = _mm256_unpackhi_epi64(m3, m7);
  289|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  290|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  291|  18.7k|    t0 = _mm256_unpackhi_epi64(m4, m6);
  292|  18.7k|    t1 = _mm256_alignr_epi8(m7, m2, 8);
  293|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  294|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  295|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  296|  18.7k|
  297|  18.7k|    // round 7
  298|  18.7k|    t0 = _mm256_blend_epi32(m0, m6, 0x33);
  299|  18.7k|    t1 = _mm256_unpacklo_epi64(m7, m2);
  300|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  301|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  302|  18.7k|    t0 = _mm256_unpackhi_epi64(m2, m7);
  303|  18.7k|    t1 = _mm256_alignr_epi8(m5, m6, 8);
  304|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  305|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  306|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  307|  18.7k|    t0 = _mm256_unpacklo_epi64(m4, m0);
  308|  18.7k|    t1 = _mm256_blend_epi32(m4, m3, 0x33);
  309|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  310|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  311|  18.7k|    t0 = _mm256_unpackhi_epi64(m5, m3);
  312|  18.7k|    t1 = _mm256_shuffle_epi32(m1, _MM_SHUFFLE!(1, 0, 3, 2));
  313|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  314|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  315|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  316|  18.7k|
  317|  18.7k|    // round 8
  318|  18.7k|    t0 = _mm256_unpackhi_epi64(m6, m3);
  319|  18.7k|    t1 = _mm256_blend_epi32(m1, m6, 0x33);
  320|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  321|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  322|  18.7k|    t0 = _mm256_alignr_epi8(m7, m5, 8);
  323|  18.7k|    t1 = _mm256_unpackhi_epi64(m0, m4);
  324|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  325|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  326|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  327|  18.7k|    t0 = _mm256_blend_epi32(m2, m1, 0x33);
  328|  18.7k|    t1 = _mm256_alignr_epi8(m4, m7, 8);
  329|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  330|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  331|  18.7k|    t0 = _mm256_unpacklo_epi64(m5, m0);
  332|  18.7k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  333|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  334|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  335|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  336|  18.7k|
  337|  18.7k|    // round 9
  338|  18.7k|    t0 = _mm256_unpacklo_epi64(m3, m7);
  339|  18.7k|    t1 = _mm256_alignr_epi8(m0, m5, 8);
  340|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  341|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  342|  18.7k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  343|  18.7k|    t1 = _mm256_alignr_epi8(m4, m1, 8);
  344|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  345|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  346|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  347|  18.7k|    t0 = _mm256_unpacklo_epi64(m5, m6);
  348|  18.7k|    t1 = _mm256_unpackhi_epi64(m6, m0);
  349|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  350|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  351|  18.7k|    t0 = _mm256_alignr_epi8(m1, m2, 8);
  352|  18.7k|    t1 = _mm256_alignr_epi8(m2, m3, 8);
  353|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  354|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  355|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  356|  18.7k|
  357|  18.7k|    // round 10
  358|  18.7k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  359|  18.7k|    t1 = _mm256_unpackhi_epi64(m3, m0);
  360|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  361|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  362|  18.7k|    t0 = _mm256_unpacklo_epi64(m1, m2);
  363|  18.7k|    t1 = _mm256_blend_epi32(m2, m3, 0x33);
  364|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  365|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  366|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  367|  18.7k|    t0 = _mm256_unpackhi_epi64(m6, m7);
  368|  18.7k|    t1 = _mm256_unpackhi_epi64(m4, m1);
  369|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  370|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  371|  18.7k|    t0 = _mm256_blend_epi32(m5, m0, 0x33);
  372|  18.7k|    t1 = _mm256_unpacklo_epi64(m7, m6);
  373|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  374|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  375|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  376|  18.7k|
  377|  18.7k|    // round 11
  378|  18.7k|    t0 = _mm256_unpacklo_epi64(m0, m1);
  379|  18.7k|    t1 = _mm256_unpacklo_epi64(m2, m3);
  380|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  381|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  382|  18.7k|    t0 = _mm256_unpackhi_epi64(m0, m1);
  383|  18.7k|    t1 = _mm256_unpackhi_epi64(m2, m3);
  384|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  385|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  386|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  387|  18.7k|    t0 = _mm256_unpacklo_epi64(m7, m4);
  388|  18.7k|    t1 = _mm256_unpacklo_epi64(m5, m6);
  389|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  390|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  391|  18.7k|    t0 = _mm256_unpackhi_epi64(m7, m4);
  392|  18.7k|    t1 = _mm256_unpackhi_epi64(m5, m6);
  393|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  394|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  395|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  396|  18.7k|
  397|  18.7k|    // round 12
  398|  18.7k|    t0 = _mm256_unpacklo_epi64(m7, m2);
  399|  18.7k|    t1 = _mm256_unpackhi_epi64(m4, m6);
  400|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  401|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  402|  18.7k|    t0 = _mm256_unpacklo_epi64(m5, m4);
  403|  18.7k|    t1 = _mm256_alignr_epi8(m3, m7, 8);
  404|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  405|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  406|  18.7k|    diagonalize(&mut a, &mut b, &mut c, &mut d);
  407|  18.7k|    t0 = _mm256_unpackhi_epi64(m2, m0);
  408|  18.7k|    t1 = _mm256_blend_epi32(m5, m0, 0x33);
  409|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  410|  18.7k|    g1(&mut a, &mut b, &mut c, &mut d, &mut b0);
  411|  18.7k|    t0 = _mm256_alignr_epi8(m6, m1, 8);
  412|  18.7k|    t1 = _mm256_blend_epi32(m3, m1, 0x33);
  413|  18.7k|    b0 = _mm256_blend_epi32(t0, t1, 0xF0);
  414|  18.7k|    g2(&mut a, &mut b, &mut c, &mut d, &mut b0);
  415|  18.7k|    undiagonalize(&mut a, &mut b, &mut c, &mut d);
  416|  18.7k|
  417|  18.7k|    a = xor(a, c);
  418|  18.7k|    b = xor(b, d);
  419|  18.7k|    a = xor(a, iv0);
  420|  18.7k|    b = xor(b, iv1);
  421|  18.7k|
  422|  18.7k|    storeu(a, words_low);
  423|  18.7k|    storeu(b, words_high);
  424|  18.7k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx23xor:
   56|  1.89M|unsafe fn xor(a: __m256i, b: __m256i) -> __m256i {
   57|  1.89M|    _mm256_xor_si256(a, b)
   58|  1.89M|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx25loadu:
   18|  74.9k|unsafe fn loadu(src: *const [Word; DEGREE]) -> __m256i {
   19|  74.9k|    // This is an unaligned load, so the pointer cast is allowed.
   20|  74.9k|    _mm256_loadu_si256(src as *const __m256i)
   21|  74.9k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx211diagonalize:
  132|   224k|unsafe fn diagonalize(a: &mut __m256i, _b: &mut __m256i, c: &mut __m256i, d: &mut __m256i) {
  133|   224k|    *a = _mm256_permute4x64_epi64(*a, _MM_SHUFFLE!(2, 1, 0, 3));
  134|   224k|    *d = _mm256_permute4x64_epi64(*d, _MM_SHUFFLE!(1, 0, 3, 2));
  135|   224k|    *c = _mm256_permute4x64_epi64(*c, _MM_SHUFFLE!(0, 3, 2, 1));
  136|   224k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx24set4:
   66|  18.7k|unsafe fn set4(a: u64, b: u64, c: u64, d: u64) -> __m256i {
   67|  18.7k|    _mm256_setr_epi64x(a as i64, b as i64, c as i64, d as i64)
   68|  18.7k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx26storeu:
   24|  37.4k|unsafe fn storeu(src: __m256i, dest: *mut [Word; DEGREE]) {
   25|  37.4k|    // This is an unaligned store, so the pointer cast is allowed.
   26|  37.4k|    _mm256_storeu_si256(dest as *mut __m256i, src)
   27|  37.4k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx25rot16:
   97|   449k|unsafe fn rot16(x: __m256i) -> __m256i {
   98|   449k|    _mm256_or_si256(_mm256_srli_epi64(x, 16), _mm256_slli_epi64(x, 64 - 16))
   99|   449k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx22g1:
  107|   449k|unsafe fn g1(a: &mut __m256i, b: &mut __m256i, c: &mut __m256i, d: &mut __m256i, m: &mut __m256i) {
  108|   449k|    *a = add(*a, *m);
  109|   449k|    *a = add(*a, *b);
  110|   449k|    *d = xor(*d, *a);
  111|   449k|    *d = rot32(*d);
  112|   449k|    *c = add(*c, *d);
  113|   449k|    *b = xor(*b, *c);
  114|   449k|    *b = rot24(*b);
  115|   449k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx25rot32:
   87|   449k|unsafe fn rot32(x: __m256i) -> __m256i {
   88|   449k|    _mm256_or_si256(_mm256_srli_epi64(x, 32), _mm256_slli_epi64(x, 64 - 32))
   89|   449k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx25rot63:
  102|   449k|unsafe fn rot63(x: __m256i) -> __m256i {
  103|   449k|    _mm256_or_si256(_mm256_srli_epi64(x, 63), _mm256_slli_epi64(x, 64 - 63))
  104|   449k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx214compress1_loop:
  427|  10.7k|pub unsafe fn compress1_loop(
  428|  10.7k|    input: &[u8],
  429|  10.7k|    words: &mut [Word; 8],
  430|  10.7k|    mut count: Count,
  431|  10.7k|    last_node: LastNode,
  432|  10.7k|    finalize: Finalize,
  433|  10.7k|    stride: Stride,
  434|  10.7k|) {
  435|  10.7k|    input_debug_asserts(input, finalize);
  436|  10.7k|
  437|  10.7k|    let mut local_words = *words;
  438|  10.7k|
  439|  10.7k|    let mut fin_offset = input.len().saturating_sub(1);
  440|  10.7k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  441|  10.7k|    let mut buf = [0; BLOCKBYTES];
  442|  10.7k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  443|  10.7k|    let fin_last_block = flag_word(finalize.yes());
  444|  10.7k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  445|       |
  446|  10.7k|    let mut offset = 0;
  447|       |    loop {
  448|       |        let block;
  449|       |        let count_delta;
  450|       |        let last_block;
  451|       |        let last_node;
  452|  18.7k|        if offset == fin_offset {
  453|  10.7k|            block = fin_block;
  454|  10.7k|            count_delta = fin_len;
  455|  10.7k|            last_block = fin_last_block;
  456|  10.7k|            last_node = fin_last_node;
  457|  10.7k|        } else {
  458|  7.97k|            // This unsafe cast avoids bounds checks. There's guaranteed to be
  459|  7.97k|            // enough input because `offset < fin_offset`.
  460|  7.97k|            block = &*(input.as_ptr().add(offset) as *const [u8; BLOCKBYTES]);
  461|  7.97k|            count_delta = BLOCKBYTES;
  462|  7.97k|            last_block = flag_word(false);
  463|  7.97k|            last_node = flag_word(false);
  464|  7.97k|        };
  465|       |
  466|  18.7k|        count = count.wrapping_add(count_delta as Count);
  467|  18.7k|        compress_block(block, &mut local_words, count, last_block, last_node);
  468|  18.7k|
  469|  18.7k|        // Check for termination before bumping the offset, to avoid overflow.
  470|  18.7k|        if offset == fin_offset {
  471|  10.7k|            break;
  472|  7.97k|        }
  473|  7.97k|
  474|  7.97k|        offset += stride.padded_blockbytes();
  475|       |    }
  476|       |
  477|  10.7k|    *words = local_words;
  478|  10.7k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4avx29loadu_128:
   30|   149k|unsafe fn loadu_128(mem_addr: &[u8; 16]) -> __m128i {
   31|   149k|    _mm_loadu_si128(mem_addr.as_ptr() as *const __m128i)
   32|   149k|}

_RNvMNtCs6dg3aiSrwgF_12blake2b_simd4gutsNtB2_14Implementation6detect:
   33|  7.55k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|  7.55k|                return avx2_impl;
   35|      0|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|      0|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|      0|            }
   42|      0|        }
   43|      0|        Self::portable()
   44|  7.55k|    }
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4guts9flag_word:
  217|  37.4k|pub(crate) fn flag_word(flag: bool) -> Word {
  218|  37.4k|    if flag {
  219|  7.55k|        !0
  220|       |    } else {
  221|  29.9k|        0
  222|       |    }
  223|  37.4k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4guts19input_debug_asserts:
  252|  10.7k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|  10.7k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|  10.7k|    // even multiple of the block size.
  255|  10.7k|    if !finalize.yes() {
  256|  3.19k|        debug_assert!(!input.is_empty());
  257|  3.19k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|  7.55k|    }
  259|  10.7k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4guts11final_block:
  232|  10.7k|pub fn final_block<'a>(
  233|  10.7k|    input: &'a [u8],
  234|  10.7k|    offset: usize,
  235|  10.7k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|  10.7k|    stride: Stride,
  237|  10.7k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|  10.7k|    let capped_offset = cmp::min(offset, input.len());
  239|  10.7k|    let offset_slice = &input[capped_offset..];
  240|  10.7k|    if offset_slice.len() >= BLOCKBYTES {
  241|  3.20k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  3.20k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  3.20k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|  7.54k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|  7.54k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|  10.7k|}
_RNvMs1_NtCs6dg3aiSrwgF_12blake2b_simd4gutsNtB5_8LastNode3yes:
  181|  7.55k|    pub fn yes(&self) -> bool {
  182|  7.55k|        match self {
  183|      0|            LastNode::Yes => true,
  184|  7.55k|            LastNode::No => false,
  185|       |        }
  186|  7.55k|    }
_RNvMNtCs6dg3aiSrwgF_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|  10.7k|    pub fn compress1_loop(
   97|  10.7k|        &self,
   98|  10.7k|        input: &[u8],
   99|  10.7k|        words: &mut [Word; 8],
  100|  10.7k|        count: Count,
  101|  10.7k|        last_node: LastNode,
  102|  10.7k|        finalize: Finalize,
  103|  10.7k|        stride: Stride,
  104|  10.7k|    ) {
  105|  10.7k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|  10.7k|            Platform::AVX2 => unsafe {
  108|  10.7k|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|  10.7k|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|      0|            _ => {
  113|      0|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|      0|            }
  115|       |        }
  116|  10.7k|    }
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4guts9count_low:
  204|  18.7k|pub(crate) fn count_low(count: Count) -> Word {
  205|  18.7k|    count as Word
  206|  18.7k|}
_RNvNtCs6dg3aiSrwgF_12blake2b_simd4guts10count_high:
  208|  18.7k|pub(crate) fn count_high(count: Count) -> Word {
  209|  18.7k|    (count >> 8 * size_of::<Word>()) as Word
  210|  18.7k|}
_RNvMs0_NtCs6dg3aiSrwgF_12blake2b_simd4gutsNtB5_8Finalize3yes:
  165|  32.2k|    pub fn yes(&self) -> bool {
  166|  32.2k|        match self {
  167|  22.6k|            Finalize::Yes => true,
  168|  9.58k|            Finalize::No => false,
  169|       |        }
  170|  32.2k|    }
_RNvMNtCs6dg3aiSrwgF_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supported:
   70|  7.55k|    pub fn avx2_if_supported() -> Option<Self> {
   71|       |        // Check whether AVX2 support is assumed by the build.
   72|       |        #[cfg(target_feature = "avx2")]
   73|       |        {
   74|       |            return Some(Implementation(Platform::AVX2));
   75|       |        }
   76|       |        // Otherwise dynamically check for support if we can.
   77|       |        #[cfg(feature = "std")]
   78|       |        {
   79|      0|            if is_x86_feature_detected!("avx2") {
   80|  7.55k|                return Some(Implementation(Platform::AVX2));
   81|      0|            }
   82|      0|        }
   83|      0|        None
   84|  7.55k|    }
_RNvMs2_NtCs6dg3aiSrwgF_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytes:
  196|  21.9k|    pub fn padded_blockbytes(&self) -> usize {
  197|  21.9k|        match self {
  198|  21.9k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|  21.9k|    }

_RNvMCs6dg3aiSrwgF_12blake2b_simdNtB2_6Params3newCslzXMUmcO2iF_9multihash:
  165|  7.55k|    pub fn new() -> Self {
  166|  7.55k|        Self {
  167|  7.55k|            hash_length: OUTBYTES as u8,
  168|  7.55k|            key_length: 0,
  169|  7.55k|            key_block: [0; BLOCKBYTES],
  170|  7.55k|            salt: [0; SALTBYTES],
  171|  7.55k|            personal: [0; PERSONALBYTES],
  172|  7.55k|            // NOTE: fanout and max_depth don't default to zero!
  173|  7.55k|            fanout: 1,
  174|  7.55k|            max_depth: 1,
  175|  7.55k|            max_leaf_length: 0,
  176|  7.55k|            node_offset: 0,
  177|  7.55k|            node_depth: 0,
  178|  7.55k|            inner_hash_length: 0,
  179|  7.55k|            last_node: guts::LastNode::No,
  180|  7.55k|            implementation: guts::Implementation::detect(),
  181|  7.55k|        }
  182|  7.55k|    }
_RNvMCs6dg3aiSrwgF_12blake2b_simdNtB2_6Params11hash_lengthCslzXMUmcO2iF_9multihash:
  238|  7.55k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|  7.55k|        assert!(
  240|  7.55k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|  7.55k|        self.hash_length = length as u8;
  245|  7.55k|        self
  246|  7.55k|    }
_RNvMs1_Cs6dg3aiSrwgF_12blake2b_simdNtB5_5State11with_params:
  406|  7.55k|    fn with_params(params: &Params) -> Self {
  407|  7.55k|        let mut state = Self {
  408|  7.55k|            words: params.to_words(),
  409|  7.55k|            count: 0,
  410|  7.55k|            buf: [0; BLOCKBYTES],
  411|  7.55k|            buflen: 0,
  412|  7.55k|            last_node: params.last_node,
  413|  7.55k|            hash_length: params.hash_length,
  414|  7.55k|            implementation: params.implementation,
  415|  7.55k|            is_keyed: params.key_length > 0,
  416|  7.55k|        };
  417|  7.55k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|  7.55k|        }
  421|  7.55k|        state
  422|  7.55k|    }
_RNvMs1_Cs6dg3aiSrwgF_12blake2b_simdNtB5_5State6update:
  453|  7.55k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|  7.55k|        // If we have a partial buffer, try to complete it.
  455|  7.55k|        self.compress_buffer_if_possible(&mut input);
  456|  7.55k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|  7.55k|        // above), compress blocks directly without copying.
  458|  7.55k|        let mut end = input.len().saturating_sub(1);
  459|  7.55k|        end -= end % BLOCKBYTES;
  460|  7.55k|        if end > 0 {
  461|  3.19k|            self.implementation.compress1_loop(
  462|  3.19k|                &input[..end],
  463|  3.19k|                &mut self.words,
  464|  3.19k|                self.count,
  465|  3.19k|                self.last_node,
  466|  3.19k|                guts::Finalize::No,
  467|  3.19k|                guts::Stride::Serial,
  468|  3.19k|            );
  469|  3.19k|            self.count = self.count.wrapping_add(end as Count);
  470|  3.19k|            input = &input[end..];
  471|  4.36k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|  7.55k|        self.fill_buf(&mut input);
  477|  7.55k|        self
  478|  7.55k|    }
_RNvMCs6dg3aiSrwgF_12blake2b_simdNtB2_6Params8to_words:
  185|  7.55k|    fn to_words(&self) -> [Word; 8] {
  186|  7.55k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|  7.55k|        let (personal_left, personal_right) =
  188|  7.55k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|  7.55k|        [
  190|  7.55k|            IV[0]
  191|  7.55k|                ^ self.hash_length as u64
  192|  7.55k|                ^ (self.key_length as u64) << 8
  193|  7.55k|                ^ (self.fanout as u64) << 16
  194|  7.55k|                ^ (self.max_depth as u64) << 24
  195|  7.55k|                ^ (self.max_leaf_length as u64) << 32,
  196|  7.55k|            IV[1] ^ self.node_offset,
  197|  7.55k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|  7.55k|            IV[3],
  199|  7.55k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|  7.55k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|  7.55k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|  7.55k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|  7.55k|        ]
  204|  7.55k|    }
_RNvMCs6dg3aiSrwgF_12blake2b_simdNtB2_6Params8to_state:
  230|  7.55k|    pub fn to_state(&self) -> State {
  231|  7.55k|        State::with_params(self)
  232|  7.55k|    }
_RNvCs6dg3aiSrwgF_12blake2b_simd20state_words_to_bytes:
  529|  7.55k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|  7.55k|    let mut bytes = [0; OUTBYTES];
  531|  7.55k|    {
  532|  7.55k|        const W: usize = size_of::<Word>();
  533|  7.55k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|  7.55k|        *refs.0 = state_words[0].to_le_bytes();
  535|  7.55k|        *refs.1 = state_words[1].to_le_bytes();
  536|  7.55k|        *refs.2 = state_words[2].to_le_bytes();
  537|  7.55k|        *refs.3 = state_words[3].to_le_bytes();
  538|  7.55k|        *refs.4 = state_words[4].to_le_bytes();
  539|  7.55k|        *refs.5 = state_words[5].to_le_bytes();
  540|  7.55k|        *refs.6 = state_words[6].to_le_bytes();
  541|  7.55k|        *refs.7 = state_words[7].to_le_bytes();
  542|  7.55k|    }
  543|  7.55k|    bytes
  544|  7.55k|}
_RNvMs5_Cs6dg3aiSrwgF_12blake2b_simdNtB5_4Hash8as_bytes:
  589|  7.55k|    pub fn as_bytes(&self) -> &[u8] {
  590|  7.55k|        &self.bytes[..self.len as usize]
  591|  7.55k|    }
_RNvMs1_Cs6dg3aiSrwgF_12blake2b_simdNtB5_5State8fill_buf:
  424|  7.55k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|  7.55k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|  7.55k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|  7.55k|        self.buflen += take as u8;
  428|  7.55k|        *input = &input[take..];
  429|  7.55k|    }
_RNvMs1_Cs6dg3aiSrwgF_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|  7.55k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|  7.55k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|  7.55k|        }
  450|  7.55k|    }
_RNvMs1_Cs6dg3aiSrwgF_12blake2b_simdNtB5_5State8finalize:
  482|  7.55k|    pub fn finalize(&self) -> Hash {
  483|  7.55k|        let mut words_copy = self.words;
  484|  7.55k|        self.implementation.compress1_loop(
  485|  7.55k|            &self.buf[..self.buflen as usize],
  486|  7.55k|            &mut words_copy,
  487|  7.55k|            self.count,
  488|  7.55k|            self.last_node,
  489|  7.55k|            guts::Finalize::Yes,
  490|  7.55k|            guts::Stride::Serial,
  491|  7.55k|        );
  492|  7.55k|        Hash {
  493|  7.55k|            bytes: state_words_to_bytes(&words_copy),
  494|  7.55k|            len: self.hash_length,
  495|  7.55k|        }
  496|  7.55k|    }

_RNvMs2_Cs2UCWMHvHVyk_12block_bufferINtB5_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE4sizeCs8FEd8Z4yMqw_6simple:
  201|  66.3k|    pub fn size(&self) -> usize {
  202|  66.3k|        BlockSize::USIZE
  203|  66.3k|    }
_RNvMs2_Cs2UCWMHvHVyk_12block_bufferINtB5_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE17set_pos_uncheckedCs8FEd8Z4yMqw_6simple:
  212|  33.1k|    fn set_pos_unchecked(&mut self, pos: usize) {
  213|  33.1k|        debug_assert!(Kind::invariant(pos, BlockSize::USIZE));
  214|  33.1k|        self.pos = pos as u8;
  215|  33.1k|    }
_RNvXs0_Cs2UCWMHvHVyk_12block_bufferINtB5_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerENtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
   63|  33.1k|    fn default() -> Self {
   64|  33.1k|        Self {
   65|  33.1k|            buffer: Default::default(),
   66|  33.1k|            pos: 0,
   67|  33.1k|            _pd: PhantomData,
   68|  33.1k|        }
   69|  33.1k|    }
_RINvMs3_Cs2UCWMHvHVyk_12block_bufferINtB6_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE16len64_padding_beNCNvXs3_NtCsOHkPlBsfSJ_4sha28core_apiNtB3r_13Sha256VarCoreNtNtCs6IZkg9Huvtt_6digest8core_api18VariableOutputCore22finalize_variable_core0ECs8FEd8Z4yMqw_6simple:
  296|  33.1k|    pub fn len64_padding_be(&mut self, data_len: u64, compress: impl FnMut(&Block<BlockSize>)) {
  297|  33.1k|        self.digest_pad(0x80, &data_len.to_be_bytes(), compress);
  298|  33.1k|    }
_RINvMs3_Cs2UCWMHvHVyk_12block_bufferINtB6_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE10digest_padNCNvXs3_NtCsOHkPlBsfSJ_4sha28core_apiNtB3l_13Sha256VarCoreNtNtCs6IZkg9Huvtt_6digest8core_api18VariableOutputCore22finalize_variable_core0ECs8FEd8Z4yMqw_6simple:
  265|  33.1k|    pub fn digest_pad(
  266|  33.1k|        &mut self,
  267|  33.1k|        delim: u8,
  268|  33.1k|        suffix: &[u8],
  269|  33.1k|        mut compress: impl FnMut(&Block<BlockSize>),
  270|  33.1k|    ) {
  271|  33.1k|        if suffix.len() > BlockSize::USIZE {
  272|      0|            panic!("suffix is too long");
  273|  33.1k|        }
  274|  33.1k|        let pos = self.get_pos();
  275|  33.1k|        self.buffer[pos] = delim;
  276|  1.82M|        for b in &mut self.buffer[pos + 1..] {
  277|  1.82M|            *b = 0;
  278|  1.82M|        }
  279|       |
  280|  33.1k|        let n = self.size() - suffix.len();
  281|  33.1k|        if self.size() - pos - 1 < suffix.len() {
  282|      0|            compress(&self.buffer);
  283|      0|            let mut block = Block::<BlockSize>::default();
  284|      0|            block[n..].copy_from_slice(suffix);
  285|      0|            compress(&block);
  286|  33.1k|        } else {
  287|  33.1k|            self.buffer[n..].copy_from_slice(suffix);
  288|  33.1k|            compress(&self.buffer);
  289|  33.1k|        }
  290|  33.1k|        self.set_pos_unchecked(0)
  291|  33.1k|    }
_RNvMs2_Cs2UCWMHvHVyk_12block_bufferINtB5_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE7get_posCs8FEd8Z4yMqw_6simple:
  170|  66.3k|    pub fn get_pos(&self) -> usize {
  171|  66.3k|        let pos = self.pos as usize;
  172|  66.3k|        if !Kind::invariant(pos, BlockSize::USIZE) {
  173|      0|            debug_assert!(false);
  174|       |            // SAFETY: `pos` never breaks the invariant
  175|       |            unsafe {
  176|      0|                core::hint::unreachable_unchecked();
  177|       |            }
  178|  66.3k|        }
  179|  66.3k|        pos
  180|  66.3k|    }
_RNvMs2_Cs2UCWMHvHVyk_12block_bufferINtB5_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE4sizeCscOd1zgOhOS7_13fvm_ipld_hamt:
  201|  33.1k|    pub fn size(&self) -> usize {
  202|  33.1k|        BlockSize::USIZE
  203|  33.1k|    }
_RINvMs2_Cs2UCWMHvHVyk_12block_bufferINtB6_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE13digest_blocksNCNvXs5_NtNtCs6IZkg9Huvtt_6digest8core_api7wrapperINtB3o_11CoreWrapperINtNtB3q_11ct_variable21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreB1s_EENtB3s_6Update6update0ECscOd1zgOhOS7_13fvm_ipld_hamt:
  113|  33.1k|    pub fn digest_blocks(
  114|  33.1k|        &mut self,
  115|  33.1k|        mut input: &[u8],
  116|  33.1k|        mut compress: impl FnMut(&[Block<BlockSize>]),
  117|  33.1k|    ) {
  118|  33.1k|        let pos = self.get_pos();
  119|  33.1k|        // using `self.remaining()` for some reason
  120|  33.1k|        // prevents panic elimination
  121|  33.1k|        let rem = self.size() - pos;
  122|  33.1k|        let n = input.len();
  123|  33.1k|        // Note that checking condition `pos + n < BlockSize` is
  124|  33.1k|        // equivalent to checking `n < rem`, where `rem` is equal
  125|  33.1k|        // to `BlockSize - pos`. Using the latter allows us to work
  126|  33.1k|        // around compiler accounting for possible overflow of
  127|  33.1k|        // `pos + n` which results in it inserting unreachable
  128|  33.1k|        // panic branches. Using `unreachable_unchecked` in `get_pos`
  129|  33.1k|        // we convince compiler that `BlockSize - pos` never underflows.
  130|  33.1k|        if Kind::invariant(n, rem) {
  131|       |            // double slicing allows to remove panic branches
  132|  33.1k|            self.buffer[pos..][..n].copy_from_slice(input);
  133|  33.1k|            self.set_pos_unchecked(pos + n);
  134|  33.1k|            return;
  135|      0|        }
  136|      0|        if pos != 0 {
  137|      0|            let (left, right) = input.split_at(rem);
  138|      0|            input = right;
  139|      0|            self.buffer[pos..].copy_from_slice(left);
  140|      0|            compress(slice::from_ref(&self.buffer));
  141|      0|        }
  142|       |
  143|      0|        let (blocks, leftover) = Kind::split_blocks(input);
  144|      0|        if !blocks.is_empty() {
  145|      0|            compress(blocks);
  146|      0|        }
  147|       |
  148|      0|        let n = leftover.len();
  149|      0|        self.buffer[..n].copy_from_slice(leftover);
  150|      0|        self.set_pos_unchecked(n);
  151|  33.1k|    }
_RNvMs2_Cs2UCWMHvHVyk_12block_bufferINtB5_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE7get_posCscOd1zgOhOS7_13fvm_ipld_hamt:
  170|  33.1k|    pub fn get_pos(&self) -> usize {
  171|  33.1k|        let pos = self.pos as usize;
  172|  33.1k|        if !Kind::invariant(pos, BlockSize::USIZE) {
  173|      0|            debug_assert!(false);
  174|       |            // SAFETY: `pos` never breaks the invariant
  175|       |            unsafe {
  176|      0|                core::hint::unreachable_unchecked();
  177|       |            }
  178|  33.1k|        }
  179|  33.1k|        pos
  180|  33.1k|    }
_RNvMs2_Cs2UCWMHvHVyk_12block_bufferINtB5_11BlockBufferINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE17set_pos_uncheckedCscOd1zgOhOS7_13fvm_ipld_hamt:
  212|  33.1k|    fn set_pos_unchecked(&mut self, pos: usize) {
  213|  33.1k|        debug_assert!(Kind::invariant(pos, BlockSize::USIZE));
  214|  33.1k|        self.pos = pos as u8;
  215|  33.1k|    }

_RNvXNtCs2UCWMHvHVyk_12block_buffer6sealedNtB4_5EagerNtB2_6Sealed9invariant:
   16|   198k|    fn invariant(pos: usize, block_size: usize) -> bool {
   17|   198k|        pos < block_size
   18|   198k|    }

_RNvXs0_Cs4PIRhqRgQie_9byteorderNtB5_9BigEndianNtB5_9ByteOrder9write_u64Cs8FEd8Z4yMqw_6simple:
 2032|  30.2k|    fn write_u64(buf: &mut [u8], n: u64) {
 2033|  30.2k|        unsafe_write_num_bytes!(u64, 8, n, buf, to_be);
 2034|  30.2k|    }

_RINvXsu_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
  159|   154k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|   154k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|   154k|                }
_RNvMs0_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB5_7TypeNumhE3newCs8FEd8Z4yMqw_6simple:
   52|   190k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   190k|        TypeNum { type_, value }
   54|   190k|    }
_RINvXs1_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
   59|   190k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|   190k|        match self.value {
   61|   190k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  27.4k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|   190k|        Ok(())
   65|   190k|    }
_RINvXsi_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
  317|  11.3k|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|  11.3k|        self.1.encode(writer)
  319|  11.3k|    }
_RINvXs7_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
  209|  18.8k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  18.8k|        writer.push(self.0)?;
  211|  18.8k|        Ok(())
  212|  18.8k|    }
_RINvXs3_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
   84|   199k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|   199k|        match u16::try_from(self.value) {
   86|   192k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|  6.47k|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|  6.47k|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|   199k|        Ok(())
   93|   199k|    }
_RINvXs2_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
   70|   192k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|   192k|        match u8::try_from(self.value) {
   72|   190k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|  2.30k|                let [x0, x1] = self.value.to_be_bytes();
   75|  2.30k|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|   192k|        Ok(())
   79|   192k|    }
_RNvMs0_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB5_7TypeNumtE3newCs8FEd8Z4yMqw_6simple:
   52|   192k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   192k|        TypeNum { type_, value }
   54|   192k|    }
_RINvXsd_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
  270|   148k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|   148k|        Ok(())
  272|   148k|    }
_RNvMs0_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB5_7TypeNummE3newCs8FEd8Z4yMqw_6simple:
   52|   199k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   199k|        TypeNum { type_, value }
   54|   199k|    }
_RINvXs4_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8FEd8Z4yMqw_6simple:
   98|   333k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|   333k|        match u32::try_from(self.value) {
  100|   199k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|   134k|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|   134k|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|   333k|        Ok(())
  107|   333k|    }
_RNvMs0_NtNtCs4Ke1HZhRw3X_7cbor4ii4core3encINtB5_7TypeNumyE3newCs8FEd8Z4yMqw_6simple:
   52|   333k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   333k|        TypeNum { type_, value }
   54|   333k|    }

_RNvXs_NtNtCs4Ke1HZhRw3X_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCs8FEd8Z4yMqw_6simple:
   40|   352k|        self.0.try_reserve(input.len())?;
   41|   352k|        self.0.extend_from_slice(input);
   42|   352k|        Ok(())
   43|   352k|    }
_RNvMNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|  7.55k|    pub fn new(buf: Vec<u8>) -> Self {
   15|  7.55k|       BufWriter(buf)
   16|  7.55k|    }
_RNvMNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|  7.55k|    pub fn into_inner(self) -> Vec<u8> {
   25|  7.55k|        self.0
   26|  7.55k|    }

_RINvMNtCs24Metss12zF_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs9ySuRiB3rXh_5alloc3vec3VechEECs8FEd8Z4yMqw_6simple:
  157|  11.3k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|  11.3k|        match self.version {
  159|      0|            Version::V0 => self.hash.write(w)?,
  160|  11.3k|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|  11.3k|        Ok(())
  163|  11.3k|    }
_RINvMNtCs24Metss12zF_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs9ySuRiB3rXh_5alloc3vec3VechEECs8FEd8Z4yMqw_6simple:
  143|  11.3k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|  11.3k|        let mut version_buf = varint_encode::u64_buffer();
  145|  11.3k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|  11.3k|
  147|  11.3k|        let mut codec_buf = varint_encode::u64_buffer();
  148|  11.3k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|  11.3k|
  150|  11.3k|        w.write_all(version)?;
  151|  11.3k|        w.write_all(codec)?;
  152|  11.3k|        self.hash.write(&mut w)?;
  153|  11.3k|        Ok(())
  154|  11.3k|    }
_RNvMNtCs24Metss12zF_3cid3cidINtB2_3CidKj40_E6new_v1Cs8FEd8Z4yMqw_6simple:
   90|  7.55k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|  7.55k|        Self {
   92|  7.55k|            version: Version::V1,
   93|  7.55k|            codec,
   94|  7.55k|            hash,
   95|  7.55k|        }
   96|  7.55k|    }
_RNvMNtCs24Metss12zF_3cid3cidINtB2_3CidKj40_E8to_bytesCs8FEd8Z4yMqw_6simple:
  167|  11.3k|    pub fn to_bytes(&self) -> Vec<u8> {
  168|  11.3k|        let mut bytes = Vec::new();
  169|  11.3k|        self.write_bytes(&mut bytes).unwrap();
  170|  11.3k|        bytes
  171|  11.3k|    }
_RNvXse_NtCs24Metss12zF_3cid3cidINtB5_3CidKj40_ENtNtCshaMFDoCIZLT_4core3cmp9PartialEq2eqCs99iymtFE1NC_19fvm_ipld_blockstore:
   64|  1.45k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RINvXsk_NtCs24Metss12zF_3cid3cidINtB6_3CidKj40_ENtNtCshaMFDoCIZLT_4core4hash4Hash4hashNtNtNtNtCskK7oM93IUMG_3std11collections4hash3map13DefaultHasherECs99iymtFE1NC_19fvm_ipld_blockstore:
   64|  15.6k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXNtCs24Metss12zF_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCseHGujNUpolX_5serde3ser9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
   29|  11.3k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|  11.3k|    where
   31|  11.3k|        S: ser::Serializer,
   32|  11.3k|    {
   33|  11.3k|        let value = ByteBuf::from(self.to_bytes());
   34|  11.3k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|  11.3k|    }

_RINvXsa_NtCs24Metss12zF_3cid7versionNtB6_7VersionNtNtCshaMFDoCIZLT_4core4hash4Hash4hashNtNtNtNtCskK7oM93IUMG_3std11collections4hash3map13DefaultHasherECs99iymtFE1NC_19fvm_ipld_blockstore:
    6|  15.6k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs2_NtCs24Metss12zF_3cid7versionNtB5_7VersionNtNtCshaMFDoCIZLT_4core3cmp9PartialEq2eqCs99iymtFE1NC_19fvm_ipld_blockstore:
    6|  1.45k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs0_NtCs24Metss12zF_3cid7versionyINtNtCshaMFDoCIZLT_4core7convert4FromNtB5_7VersionE4from:
   44|  11.3k|    fn from(ver: Version) -> u64 {
   45|  11.3k|        match ver {
   46|      0|            Version::V0 => 0,
   47|  11.3k|            Version::V1 => 1,
   48|       |        }
   49|  11.3k|    }

_RNvNtNtNtCsOHkPlBsfSJ_4sha26sha2563x8611shani_cpuid8init_getB7_:
  101|  33.1k|            pub fn init_get() -> (InitToken, bool) {
  102|  33.1k|                let res = $crate::__unless_target_features! {
  103|       |                    $($tf),+ => {
  104|       |                        // Relaxed ordering is fine, as we only have a single atomic variable.
  105|  33.1k|                        let val = STORAGE.load(Relaxed);
  106|  33.1k|
  107|  33.1k|                        if val == UNINIT {
  108|      1|                            let res = $crate::__detect_target_features!($($tf),+);
  109|      1|                            STORAGE.store(res as u8, Relaxed);
  110|      1|                            res
  111|       |                        } else {
  112|  33.1k|                            val == 1
  113|       |                        }
  114|       |                    }
  115|       |                };
  116|       |
  117|  33.1k|                (InitToken(()), res)
  118|  33.1k|            }
_RNvNtNtNtCsOHkPlBsfSJ_4sha26sha2563x8611shani_cpuid3getB7_:
  130|  33.1k|            pub fn get() -> bool {
  131|  33.1k|                init_get().1
  132|  33.1k|            }

_RINvXNtCsb9PajBLMw8A_14cs_serde_bytes3serShNtB3_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
   27|  7.55k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   28|  7.55k|    where
   29|  7.55k|        S: Serializer,
   30|  7.55k|    {
   31|  7.55k|        serializer.serialize_bytes(self)
   32|  7.55k|    }

_RNvXs3_NtNtCs6IZkg9Huvtt_6digest8core_api11ct_variableINtB5_21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB24_IB24_IB24_IB24_IB24_NtB26_5UTermNtNtB28_3bit2B1ENtB3h_2B0EB3v_EB3v_EB3v_EB3v_EENtB7_15FixedOutputCore19finalize_fixed_coreCs8FEd8Z4yMqw_6simple:
  107|  33.1k|    fn finalize_fixed_core(
  108|  33.1k|        &mut self,
  109|  33.1k|        buffer: &mut Buffer<Self>,
  110|  33.1k|        out: &mut GenericArray<u8, Self::OutputSize>,
  111|  33.1k|    ) {
  112|  33.1k|        let mut full_res = Default::default();
  113|  33.1k|        self.inner.finalize_variable_core(buffer, &mut full_res);
  114|  33.1k|        let n = out.len();
  115|  33.1k|        let m = full_res.len() - n;
  116|  33.1k|        match T::TRUNC_SIDE {
  117|  33.1k|            TruncSide::Left => out.copy_from_slice(&full_res[..n]),
  118|      0|            TruncSide::Right => out.copy_from_slice(&full_res[m..]),
  119|       |        }
  120|  33.1k|    }
_RNvXs4_NtNtCs6IZkg9Huvtt_6digest8core_api11ct_variableINtB5_21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB24_IB24_IB24_IB24_IB24_NtB26_5UTermNtNtB28_3bit2B1ENtB3h_2B0EB3v_EB3v_EB3v_EB3v_EENtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
  132|  33.1k|    fn default() -> Self {
  133|  33.1k|        Self {
  134|  33.1k|            inner: T::new(OutSize::USIZE).unwrap(),
  135|  33.1k|            _out: PhantomData,
  136|  33.1k|        }
  137|  33.1k|    }

_RNvXsf_NtNtCs6IZkg9Huvtt_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB2x_IB2x_IB2x_IB2x_IB2x_NtB2z_5UTermNtNtB2B_3bit2B1ENtB3K_2B0EB3Y_EB3Y_EB3Y_EB3Y_EEENtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
   21|  33.1k|#[derive(Clone, Default)]
_RNvXs7_NtNtCs6IZkg9Huvtt_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB2x_IB2x_IB2x_IB2x_IB2x_NtB2z_5UTermNtNtB2B_3bit2B1ENtB3K_2B0EB3Y_EB3Y_EB3Y_EB3Y_EEENtB9_11FixedOutput13finalize_intoCs8FEd8Z4yMqw_6simple:
  168|  33.1k|    fn finalize_into(mut self, out: &mut Output<Self>) {
  169|  33.1k|        let Self { core, buffer } = &mut self;
  170|  33.1k|        core.finalize_fixed_core(buffer, out);
  171|  33.1k|    }
_RNvXs5_NtNtCs6IZkg9Huvtt_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB2x_IB2x_IB2x_IB2x_IB2x_NtB2z_5UTermNtNtB2B_3bit2B1ENtB3K_2B0EB3Y_EB3Y_EB3Y_EB3Y_EEENtB9_6Update6updateCscOd1zgOhOS7_13fvm_ipld_hamt:
  146|  33.1k|    fn update(&mut self, input: &[u8]) {
  147|  33.1k|        let Self { core, buffer } = self;
  148|  33.1k|        buffer.digest_blocks(input, |blocks| core.update_blocks(blocks));
  149|  33.1k|    }

_RNvXNtCs6IZkg9Huvtt_6digest6digestINtNtNtB4_8core_api7wrapper11CoreWrapperINtNtBB_11ct_variable21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB2D_IB2D_IB2D_IB2D_IB2D_NtB2F_5UTermNtNtB2H_3bit2B1ENtB3Q_2B0EB44_EB44_EB44_EB44_EEENtB2_6Digest8finalizeCs8FEd8Z4yMqw_6simple:
   85|  33.1k|    fn finalize(self) -> Output<Self> {
   86|  33.1k|        FixedOutput::finalize_fixed(self)
   87|  33.1k|    }
_RINvXNtCs6IZkg9Huvtt_6digest6digestINtNtNtB5_8core_api7wrapper11CoreWrapperINtNtBC_11ct_variable21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB2E_IB2E_IB2E_IB2E_IB2E_NtB2G_5UTermNtNtB2I_3bit2B1ENtB3R_2B0EB45_EB45_EB45_EB45_EEENtB3_6Digest6updateRShECscOd1zgOhOS7_13fvm_ipld_hamt:
   74|  33.1k|    fn update(&mut self, data: impl AsRef<[u8]>) {
   75|  33.1k|        Update::update(self, data.as_ref());
   76|  33.1k|    }

_RNvYINtNtNtCs6IZkg9Huvtt_6digest8core_api7wrapper11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCsOHkPlBsfSJ_4sha28core_api13Sha256VarCoreINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB2r_IB2r_IB2r_IB2r_IB2r_NtB2t_5UTermNtNtB2v_3bit2B1ENtB3E_2B0EB3S_EB3S_EB3S_EB3S_EEENtB9_11FixedOutput14finalize_fixedCs8FEd8Z4yMqw_6simple:
   97|  33.1k|    fn finalize_fixed(self) -> Output<Self> {
   98|  33.1k|        let mut out = Default::default();
   99|  33.1k|        self.finalize_into(&mut out);
  100|  33.1k|        out
  101|  33.1k|    }

_RINvXsb_CsbaGOV7asVt1_17forest_hash_utilsyNtB6_4Hash4hashNtNtCscOd1zgOhOS7_13fvm_ipld_hamt14hash_algorithm17Sha2HasherWrapperECs8FEd8Z4yMqw_6simple:
   27|  33.1k|            fn hash<H: Hasher>(&self, state: &mut H) {
   28|  33.1k|                state.$meth(*self)
   29|  33.1k|            }

_RNvXs3c_NtCs4gBzPfpX7bm_13generic_array5implsAhj20_INtNtCshaMFDoCIZLT_4core7convert4FromINtB8_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB1K_IB1K_IB1K_IB1K_IB1K_NtB1M_5UTermNtNtB1O_3bit2B1ENtB2X_2B0EB3b_EB3b_EB3b_EB3b_EEE4fromCs8FEd8Z4yMqw_6simple:
  139|  33.1k|                fn from(sel: GenericArray<T, $ty>) -> [T; $n] {
  140|  33.1k|                    unsafe { $crate::transmute(sel) }
  141|  33.1k|                }
_RNvXNtCs4gBzPfpX7bm_13generic_array5implsINtB4_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBZ_IBZ_IBZ_IBZ_IBZ_IBZ_NtB11_5UTermNtNtB13_3bit2B1ENtB2b_2B0EB2p_EB2p_EB2p_EB2p_EB2p_EENtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
   16|  33.1k|    fn default() -> Self {
   17|  33.1k|        Self::generate(|_| T::default())
   18|  33.1k|    }
_RNCNvXNtCs4gBzPfpX7bm_13generic_array5implsINtB6_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB11_IB11_IB11_IB11_IB11_NtB13_5UTermNtNtB15_3bit2B1ENtB2e_2B0EB2s_EB2s_EB2s_EB2s_EENtNtCshaMFDoCIZLT_4core7default7Default7default0Cs8FEd8Z4yMqw_6simple:
   17|  2.12M|        Self::generate(|_| T::default())
_RNvXNtCs4gBzPfpX7bm_13generic_array5implsINtB4_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBZ_IBZ_IBZ_IBZ_IBZ_NtB11_5UTermNtNtB13_3bit2B1ENtB27_2B0EB2l_EB2l_EB2l_EB2l_EENtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
   16|  66.3k|    fn default() -> Self {
   17|  66.3k|        Self::generate(|_| T::default())
   18|  66.3k|    }
_RNCNvXNtCs4gBzPfpX7bm_13generic_array5implsINtB6_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB11_IB11_IB11_IB11_IB11_IB11_NtB13_5UTermNtNtB15_3bit2B1ENtB2j_2B0EB2x_EB2x_EB2x_EB2x_EB2x_EENtNtCshaMFDoCIZLT_4core7default7Default7default0Cs8FEd8Z4yMqw_6simple:
   17|  2.12M|        Self::generate(|_| T::default())

_RNvMs9_Cs4gBzPfpX7bm_13generic_arrayINtB5_12ArrayBuilderhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EE3newCs8FEd8Z4yMqw_6simple:
  215|  33.1k|    pub unsafe fn new() -> ArrayBuilder<T, N> {
  216|  33.1k|        ArrayBuilder {
  217|  33.1k|            array: MaybeUninit::uninit(),
  218|  33.1k|            position: 0,
  219|  33.1k|        }
  220|  33.1k|    }
_RNvMs9_Cs4gBzPfpX7bm_13generic_arrayINtB5_12ArrayBuilderhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EE13iter_positionCs8FEd8Z4yMqw_6simple:
  228|  66.3k|    pub unsafe fn iter_position(&mut self) -> (slice::IterMut<T>, &mut usize) {
  229|  66.3k|        ((&mut *self.array.as_mut_ptr()).iter_mut(), &mut self.position)
  230|  66.3k|    }
_RNvMs9_Cs4gBzPfpX7bm_13generic_arrayINtB5_12ArrayBuilderhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EE13iter_positionCs8FEd8Z4yMqw_6simple:
  228|  33.1k|    pub unsafe fn iter_position(&mut self) -> (slice::IterMut<T>, &mut usize) {
  229|  33.1k|        ((&mut *self.array.as_mut_ptr()).iter_mut(), &mut self.position)
  230|  33.1k|    }
_RNvXs8_Cs4gBzPfpX7bm_13generic_arrayINtB5_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EENtNtNtCshaMFDoCIZLT_4core3ops5deref8DerefMut9deref_mutCs8FEd8Z4yMqw_6simple:
  196|   132k|    fn deref_mut(&mut self) -> &mut [T] {
  197|   132k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  198|   132k|    }
_RINvCs4gBzPfpX7bm_13generic_array9transmuteINtB2_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIB11_IB11_IB11_IB11_IB11_NtB13_5UTermNtNtB15_3bit2B1ENtB2e_2B0EB2s_EB2s_EB2s_EB2s_EEAhj20_ECs8FEd8Z4yMqw_6simple:
  636|  33.1k|pub unsafe fn transmute<A, B>(a: A) -> B {
  637|  33.1k|    let a = ManuallyDrop::new(a);
  638|  33.1k|    ::core::ptr::read(&*a as *const A as *const B)
  639|  33.1k|}
_RNvXs7_Cs4gBzPfpX7bm_13generic_arrayINtB5_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EENtNtNtCshaMFDoCIZLT_4core3ops5deref5Deref5derefCs8FEd8Z4yMqw_6simple:
  186|  99.4k|    fn deref(&self) -> &[T] {
  187|  99.4k|        unsafe { slice::from_raw_parts(self as *const Self as *const T, N::USIZE) }
  188|  99.4k|    }
_RNvMs9_Cs4gBzPfpX7bm_13generic_arrayINtB5_12ArrayBuilderhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EE10into_innerCs8FEd8Z4yMqw_6simple:
  236|  33.1k|    pub unsafe fn into_inner(self) -> GenericArray<T, N> {
  237|  33.1k|        let array = ptr::read(&self.array);
  238|  33.1k|
  239|  33.1k|        mem::forget(self);
  240|  33.1k|
  241|  33.1k|        array.assume_init()
  242|  33.1k|    }
_RINvXsg_Cs4gBzPfpX7bm_13generic_arrayINtB6_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBV_IBV_IBV_IBV_IBV_IBV_NtBX_5UTermNtNtBZ_3bit2B1ENtB26_2B0EB2j_EB2j_EB2j_EB2j_EB2j_EEINtNtB6_8sequence15GenericSequencehE8generateNCNvXNtB6_5implsBz_NtNtCshaMFDoCIZLT_4core7default7Default7default0ECs8FEd8Z4yMqw_6simple:
  373|  33.1k|    fn generate<F>(mut f: F) -> GenericArray<T, N>
  374|  33.1k|    where
  375|  33.1k|        F: FnMut(usize) -> T,
  376|  33.1k|    {
  377|  33.1k|        unsafe {
  378|  33.1k|            let mut destination = ArrayBuilder::new();
  379|  33.1k|
  380|  33.1k|            {
  381|  33.1k|                let (destination_iter, position) = destination.iter_position();
  382|  33.1k|
  383|  33.1k|                destination_iter.enumerate().for_each(|(i, dst)| {
  384|       |                    ptr::write(dst, f(i));
  385|       |
  386|       |                    *position += 1;
  387|  33.1k|                });
  388|  33.1k|            }
  389|  33.1k|
  390|  33.1k|            destination.into_inner()
  391|  33.1k|        }
  392|  33.1k|    }
_RINvXsg_Cs4gBzPfpX7bm_13generic_arrayINtB6_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBV_IBV_IBV_IBV_IBV_NtBX_5UTermNtNtBZ_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EEINtNtB6_8sequence15GenericSequencehE8generateNCNvXNtB6_5implsBz_NtNtCshaMFDoCIZLT_4core7default7Default7default0ECs8FEd8Z4yMqw_6simple:
  373|  66.3k|    fn generate<F>(mut f: F) -> GenericArray<T, N>
  374|  66.3k|    where
  375|  66.3k|        F: FnMut(usize) -> T,
  376|  66.3k|    {
  377|  66.3k|        unsafe {
  378|  66.3k|            let mut destination = ArrayBuilder::new();
  379|  66.3k|
  380|  66.3k|            {
  381|  66.3k|                let (destination_iter, position) = destination.iter_position();
  382|  66.3k|
  383|  66.3k|                destination_iter.enumerate().for_each(|(i, dst)| {
  384|       |                    ptr::write(dst, f(i));
  385|       |
  386|       |                    *position += 1;
  387|  66.3k|                });
  388|  66.3k|            }
  389|  66.3k|
  390|  66.3k|            destination.into_inner()
  391|  66.3k|        }
  392|  66.3k|    }
_RNvXs8_Cs4gBzPfpX7bm_13generic_arrayINtB5_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EENtNtNtCshaMFDoCIZLT_4core3ops5deref8DerefMut9deref_mutCs8FEd8Z4yMqw_6simple:
  196|   132k|    fn deref_mut(&mut self) -> &mut [T] {
  197|   132k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  198|   132k|    }
_RNCINvXsg_Cs4gBzPfpX7bm_13generic_arrayINtB8_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBX_IBX_IBX_IBX_IBX_NtBZ_5UTermNtNtB11_3bit2B1ENtB24_2B0EB2i_EB2i_EB2i_EB2i_EEINtNtB8_8sequence15GenericSequencehE8generateNCNvXNtB8_5implsBB_NtNtCshaMFDoCIZLT_4core7default7Default7default0E0Cs8FEd8Z4yMqw_6simple:
  383|  2.12M|                destination_iter.enumerate().for_each(|(i, dst)| {
  384|  2.12M|                    ptr::write(dst, f(i));
  385|  2.12M|
  386|  2.12M|                    *position += 1;
  387|  2.12M|                });
_RNvMs9_Cs4gBzPfpX7bm_13generic_arrayINtB5_12ArrayBuilderhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EE3newCs8FEd8Z4yMqw_6simple:
  215|  66.3k|    pub unsafe fn new() -> ArrayBuilder<T, N> {
  216|  66.3k|        ArrayBuilder {
  217|  66.3k|            array: MaybeUninit::uninit(),
  218|  66.3k|            position: 0,
  219|  66.3k|        }
  220|  66.3k|    }
_RNvMs9_Cs4gBzPfpX7bm_13generic_arrayINtB5_12ArrayBuilderhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EE10into_innerCs8FEd8Z4yMqw_6simple:
  236|  66.3k|    pub unsafe fn into_inner(self) -> GenericArray<T, N> {
  237|  66.3k|        let array = ptr::read(&self.array);
  238|  66.3k|
  239|  66.3k|        mem::forget(self);
  240|  66.3k|
  241|  66.3k|        array.assume_init()
  242|  66.3k|    }
_RNCINvXsg_Cs4gBzPfpX7bm_13generic_arrayINtB8_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBX_IBX_IBX_IBX_IBX_IBX_NtBZ_5UTermNtNtB11_3bit2B1ENtB28_2B0EB2m_EB2m_EB2m_EB2m_EB2m_EEINtNtB8_8sequence15GenericSequencehE8generateNCNvXNtB8_5implsBB_NtNtCshaMFDoCIZLT_4core7default7Default7default0E0Cs8FEd8Z4yMqw_6simple:
  383|  2.12M|                destination_iter.enumerate().for_each(|(i, dst)| {
  384|  2.12M|                    ptr::write(dst, f(i));
  385|  2.12M|
  386|  2.12M|                    *position += 1;
  387|  2.12M|                });
_RNvXs8_Cs4gBzPfpX7bm_13generic_arrayINtB5_12GenericArrayhINtNtCsb2RmdzKnjPk_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EENtNtNtCshaMFDoCIZLT_4core3ops5deref8DerefMut9deref_mutCscOd1zgOhOS7_13fvm_ipld_hamt:
  196|  33.1k|    fn deref_mut(&mut self) -> &mut [T] {
  197|  33.1k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  198|  33.1k|    }

_RNvCslG5GGhcClMw_9getrandom9getrandom:
  258|      1|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  259|      1|    if dest.is_empty() {
  260|      0|        return Ok(());
  261|      1|    }
  262|      1|    imp::getrandom_inner(dest)
  263|      1|}

_RNvNtCslG5GGhcClMw_9getrandom3imp22is_getrandom_available:
   27|      1|fn is_getrandom_available() -> bool {
   28|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   29|      1|    if res < 0 {
   30|      0|        match last_os_error().raw_os_error() {
   31|      0|            Some(libc::ENOSYS) => false, // No kernel support
   32|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   33|      0|            _ => true,
   34|       |        }
   35|       |    } else {
   36|      1|        true
   37|       |    }
   38|      1|}
_RNCNvNtCslG5GGhcClMw_9getrandom3imp15getrandom_inner0B5_:
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
_RNvNtCslG5GGhcClMw_9getrandom3imp15getrandom_inner:
   16|      1|pub fn getrandom_inner(dest: &mut [u8]) -> Result<(), Error> {
   17|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   18|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   19|      1|        sys_fill_exact(dest, |buf| unsafe {
   20|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   21|      1|        })
   22|       |    } else {
   23|      0|        use_file::getrandom_inner(dest)
   24|       |    }
   25|      1|}
_RNvNtCslG5GGhcClMw_9getrandom3imp9getrandom:
   40|      2|unsafe fn getrandom(
   41|      2|    buf: *mut libc::c_void,
   42|      2|    buflen: libc::size_t,
   43|      2|    flags: libc::c_uint,
   44|      2|) -> libc::ssize_t {
   45|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   46|      2|}

_RINvMs_NtCslG5GGhcClMw_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   61|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   62|      1|        self.0.unsync_init(|| init() as usize) != 0
   63|      1|    }
_RNCINvMs_NtCslG5GGhcClMw_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   62|      1|        self.0.unsync_init(|| init() as usize) != 0
_RINvMNtCslG5GGhcClMw_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   42|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   43|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   44|      1|        let mut val = self.0.load(Relaxed);
   45|      1|        if val == Self::UNINIT {
   46|      1|            val = init();
   47|      1|            self.0.store(val, Relaxed);
   48|      1|        }
   49|      1|        val
   50|      1|    }

_RINvNtCslG5GGhcClMw_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   56|      1|pub fn sys_fill_exact(
   57|      1|    mut buf: &mut [u8],
   58|      1|    sys_fill: impl Fn(&mut [u8]) -> libc::ssize_t,
   59|      1|) -> Result<(), Error> {
   60|      2|    while !buf.is_empty() {
   61|      1|        let res = sys_fill(buf);
   62|      1|        if res < 0 {
   63|      0|            let err = last_os_error();
   64|      0|            // We should try again if the call was interrupted.
   65|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   66|      0|                return Err(err);
   67|      0|            }
   68|      1|        } else {
   69|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   70|      1|            // should be an infinite stream of random bytes.
   71|      1|            buf = &mut buf[(res as usize)..];
   72|      1|        }
   73|       |    }
   74|      1|    Ok(())
   75|      1|}

rust_fuzzer_test_input:
  167|  10.7k|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
LLVMFuzzerTestOneInput:
   27|    545|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    545|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    545|    });
   32|    545|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    545|    }
   37|    545|    0
   38|    545|}
_RNCNvCs802sGDYZluu_13libfuzzer_sys15test_input_wrap0B3_:
   28|    545|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    545|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    545|        rust_fuzzer_test_input(data_slice);
   31|    545|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs_NtNtCslzXMUmcO2iF_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|  7.55k|            fn update(&mut self, input: &[u8]) {
   47|  7.55k|                self.state.update(input);
   48|  7.55k|            }
_RNvXNtNtCslzXMUmcO2iF_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCshaMFDoCIZLT_4core7default7Default7defaultB6_:
   35|  7.55k|            fn default() -> Self {
   36|  7.55k|                let mut params = $module::Params::new();
   37|  7.55k|                params.hash_length(S);
   38|  7.55k|                Self {
   39|  7.55k|                    state: params.to_state(),
   40|  7.55k|                    digest: [0; S],
   41|  7.55k|                }
   42|  7.55k|            }
_RNvXs_NtNtCslzXMUmcO2iF_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|  7.55k|            fn finalize(&mut self) -> &[u8] {
   51|  7.55k|                let digest = self.state.finalize();
   52|  7.55k|                let digest_bytes = digest.as_bytes();
   53|  7.55k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|  7.55k|                digest_out.copy_from_slice(digest_bytes);
   55|  7.55k|                digest_out
   56|  7.55k|            }

_RNvMs_NtCslzXMUmcO2iF_9multihash9multihashINtB4_9MultihashKj40_E4sizeCs8FEd8Z4yMqw_6simple:
  125|  11.3k|    pub const fn size(&self) -> u8 {
  126|  11.3k|        self.size
  127|  11.3k|    }
_RINvNtCslzXMUmcO2iF_9multihash9multihash15write_multihashQQINtNtCs9ySuRiB3rXh_5alloc3vec3VechEECs8FEd8Z4yMqw_6simple:
  276|  11.3k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|  11.3k|where
  278|  11.3k|    W: io::Write,
  279|  11.3k|{
  280|  11.3k|    let mut code_buf = varint_encode::u64_buffer();
  281|  11.3k|    let code = varint_encode::u64(code, &mut code_buf);
  282|  11.3k|
  283|  11.3k|    let mut size_buf = varint_encode::u8_buffer();
  284|  11.3k|    let size = varint_encode::u8(size, &mut size_buf);
  285|  11.3k|
  286|  11.3k|    w.write_all(code)?;
  287|  11.3k|    w.write_all(size)?;
  288|  11.3k|    w.write_all(digest)?;
  289|  11.3k|    Ok(())
  290|  11.3k|}
_RNvMs_NtCslzXMUmcO2iF_9multihash9multihashINtB4_9MultihashKj40_E6digestCs8FEd8Z4yMqw_6simple:
  130|  11.3k|    pub fn digest(&self) -> &[u8] {
  131|  11.3k|        &self.digest[..self.size as usize]
  132|  11.3k|    }
_RINvMs_NtCslzXMUmcO2iF_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs9ySuRiB3rXh_5alloc3vec3VechEECs8FEd8Z4yMqw_6simple:
  163|  11.3k|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|  11.3k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|  11.3k|    }
_RNvMs_NtCslzXMUmcO2iF_9multihash9multihashINtB4_9MultihashKj40_E4codeCs8FEd8Z4yMqw_6simple:
  120|  11.3k|    pub const fn code(&self) -> u64 {
  121|  11.3k|        self.code
  122|  11.3k|    }
_RINvXs0_NtCslzXMUmcO2iF_9multihash9multihashINtB6_9MultihashKj40_ENtNtCshaMFDoCIZLT_4core4hash4Hash4hashNtNtNtNtCskK7oM93IUMG_3std11collections4hash3map13DefaultHasherECs99iymtFE1NC_19fvm_ipld_blockstore:
  219|  15.6k|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  220|  15.6k|        self.code.hash(state);
  221|  15.6k|        self.digest().hash(state);
  222|  15.6k|    }
_RNvXs2_NtCslzXMUmcO2iF_9multihash9multihashINtB5_9MultihashKj40_ENtNtCshaMFDoCIZLT_4core3cmp9PartialEq2eqCs99iymtFE1NC_19fvm_ipld_blockstore:
  233|  1.45k|    fn eq(&self, other: &Multihash<B>) -> bool {
  234|  1.45k|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  235|  1.45k|        self.code == other.code && self.digest() == other.digest()
  236|  1.45k|    }
_RNvMs_NtCslzXMUmcO2iF_9multihash9multihashINtB4_9MultihashKj40_E6digestCs99iymtFE1NC_19fvm_ipld_blockstore:
  130|  18.5k|    pub fn digest(&self) -> &[u8] {
  131|  18.5k|        &self.digest[..self.size as usize]
  132|  18.5k|    }
_RNvMs_NtCslzXMUmcO2iF_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|  7.55k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|  7.55k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|  7.55k|        }
  105|  7.55k|        let size = input_digest.len();
  106|  7.55k|        let mut digest = [0; S];
  107|  7.55k|        let mut i = 0;
  108|   249k|        while i < size {
  109|   241k|            digest[i] = input_digest[i];
  110|   241k|            i += 1;
  111|   241k|        }
  112|  7.55k|        Ok(Self {
  113|  7.55k|            code,
  114|  7.55k|            size: size as u8,
  115|  7.55k|            digest,
  116|  7.55k|        })
  117|  7.55k|    }

_RNvXs3_NtCslzXMUmcO2iF_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|  7.55k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvMs2_NtCsjoDsUsSjtYa_9once_cell3impINtB5_8OnceCellNtNtCs9ySuRiB3rXh_5alloc6string6StringE14is_initializedCs8FEd8Z4yMqw_6simple:
   62|    544|    pub(crate) fn is_initialized(&self) -> bool {
   63|    544|        // An `Acquire` load is enough because that makes all the initialization
   64|    544|        // operations visible to us, and, this being a fast path, weaker
   65|    544|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    544|        // `SeqCst` operations on the slow path.
   67|    544|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    544|    }

_RNvMs6_NtCsjoDsUsSjtYa_9once_cell6unsyncINtB5_8OnceCellINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE10with_valueCs8FEd8Z4yMqw_6simple:
  442|  3.25k|        pub const fn with_value(value: T) -> OnceCell<T> {
  443|  3.25k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  444|  3.25k|        }
_RINvMs6_NtCsjoDsUsSjtYa_9once_cell6unsyncINtB6_8OnceCellINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_8rm_valueyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs8FEd8Z4yMqw_6simple:
  585|    503|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  586|    503|        where
  587|    503|            F: FnOnce() -> Result<T, E>,
  588|    503|        {
  589|    503|            if let Some(val) = self.get() {
  590|    503|                return Ok(val);
  591|      0|            }
  592|      0|            let val = f()?;
  593|       |            // Note that *some* forms of reentrant initialization might lead to
  594|       |            // UB (see `reentrant_init` test). I believe that just removing this
  595|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  596|       |            // better to panic, rather than to silently use an old value.
  597|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  598|      0|            Ok(self.get().unwrap())
  599|    503|        }
_RINvMs6_NtCsjoDsUsSjtYa_9once_cell6unsyncINtB6_8OnceCellINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_12modify_valueRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs8FEd8Z4yMqw_6simple:
  585|  2.52k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  586|  2.52k|        where
  587|  2.52k|            F: FnOnce() -> Result<T, E>,
  588|  2.52k|        {
  589|  2.52k|            if let Some(val) = self.get() {
  590|  2.52k|                return Ok(val);
  591|      0|            }
  592|      0|            let val = f()?;
  593|       |            // Note that *some* forms of reentrant initialization might lead to
  594|       |            // UB (see `reentrant_init` test). I believe that just removing this
  595|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  596|       |            // better to panic, rather than to silently use an old value.
  597|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  598|      0|            Ok(self.get().unwrap())
  599|  2.52k|        }
_RNvXs5_NtCsjoDsUsSjtYa_9once_cell6unsyncINtB5_8OnceCellINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEEINtNtCshaMFDoCIZLT_4core7convert4FromBR_E4fromCs8FEd8Z4yMqw_6simple:
  430|  3.25k|        fn from(value: T) -> Self {
  431|  3.25k|            OnceCell::with_value(value)
  432|  3.25k|        }
_RNvMs4_NtCsjoDsUsSjtYa_9once_cell4syncINtB5_8OnceCellNtNtCs9ySuRiB3rXh_5alloc6string6StringE3getCs8FEd8Z4yMqw_6simple:
  869|    544|        pub fn get(&self) -> Option<&T> {
  870|    544|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    544|                None
  875|       |            }
  876|    544|        }
_RNvMs6_NtCsjoDsUsSjtYa_9once_cell6unsyncINtB5_8OnceCellINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE7get_mutCs8FEd8Z4yMqw_6simple:
  469|  3.02k|        pub fn get_mut(&mut self) -> Option<&mut T> {
  470|  3.02k|            // Safe because we have unique access
  471|  3.02k|            unsafe { &mut *self.inner.get() }.as_mut()
  472|  3.02k|        }
_RNvMs6_NtCsjoDsUsSjtYa_9once_cell6unsyncINtB5_8OnceCellINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE3getCs8FEd8Z4yMqw_6simple:
  449|  3.64k|        pub fn get(&self) -> Option<&T> {
  450|  3.64k|            // Safe due to `inner`'s invariant
  451|  3.64k|            unsafe { &*self.inner.get() }.as_ref()
  452|  3.64k|        }

_RINvMs1_NtNtCsjoDsUsSjtYa_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxDNtNtCsab0iDiSsW0X_5ahash12random_state12RandomSourceNtNtCshaMFDoCIZLT_4core6marker4SendNtB2s_4SyncEL_EE11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0ECs8FEd8Z4yMqw_6simple:
  251|    544|        pub fn get_or_init<F>(&self, f: F) -> &T
  252|    544|        where
  253|    544|            F: FnOnce() -> Box<T>,
  254|    544|        {
  255|    544|            enum Void {}
  256|    544|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  257|    544|                Ok(val) => val,
  258|    544|                Err(void) => match void {},
  259|    544|            }
  260|    544|        }
_RINvMs1_NtNtCsjoDsUsSjtYa_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxDNtNtCsab0iDiSsW0X_5ahash12random_state12RandomSourceNtNtCshaMFDoCIZLT_4core6marker4SendNtB2s_4SyncEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECs8FEd8Z4yMqw_6simple:
  269|    544|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  270|    544|        where
  271|    544|            F: FnOnce() -> Result<Box<T>, E>,
  272|    544|        {
  273|    544|            let mut ptr = self.inner.load(Ordering::Acquire);
  274|    544|
  275|    544|            if ptr.is_null() {
  276|      1|                let val = f()?;
  277|      1|                ptr = Box::into_raw(val);
  278|      1|                let exchange = self.inner.compare_exchange(
  279|      1|                    ptr::null_mut(),
  280|      1|                    ptr,
  281|      1|                    Ordering::AcqRel,
  282|      1|                    Ordering::Acquire,
  283|      1|                );
  284|      1|                if let Err(old) = exchange {
  285|      0|                    drop(unsafe { Box::from_raw(ptr) });
  286|      0|                    ptr = old;
  287|      1|                }
  288|    543|            };
  289|    544|            Ok(unsafe { &*ptr })
  290|    544|        }
_RNCINvMs1_NtNtCsjoDsUsSjtYa_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxDNtNtCsab0iDiSsW0X_5ahash12random_state12RandomSourceNtNtCshaMFDoCIZLT_4core6marker4SendNtB2u_4SyncEL_EE11get_or_initNCNvMs1_B1E_NtB1E_11RandomState7get_src0E0Cs8FEd8Z4yMqw_6simple:
  256|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCsjoDsUsSjtYa_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCsab0iDiSsW0X_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  269|    544|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  270|    544|        where
  271|    544|            F: FnOnce() -> Result<Box<T>, E>,
  272|    544|        {
  273|    544|            let mut ptr = self.inner.load(Ordering::Acquire);
  274|    544|
  275|    544|            if ptr.is_null() {
  276|      1|                let val = f()?;
  277|      1|                ptr = Box::into_raw(val);
  278|      1|                let exchange = self.inner.compare_exchange(
  279|      1|                    ptr::null_mut(),
  280|      1|                    ptr,
  281|      1|                    Ordering::AcqRel,
  282|      1|                    Ordering::Acquire,
  283|      1|                );
  284|      1|                if let Err(old) = exchange {
  285|      0|                    drop(unsafe { Box::from_raw(ptr) });
  286|      0|                    ptr = old;
  287|      1|                }
  288|    543|            };
  289|    544|            Ok(unsafe { &*ptr })
  290|    544|        }
_RINvMs1_NtNtCsjoDsUsSjtYa_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCsab0iDiSsW0X_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  251|    544|        pub fn get_or_init<F>(&self, f: F) -> &T
  252|    544|        where
  253|    544|            F: FnOnce() -> Box<T>,
  254|    544|        {
  255|    544|            enum Void {}
  256|    544|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  257|    544|                Ok(val) => val,
  258|    544|                Err(void) => match void {},
  259|    544|            }
  260|    544|        }
_RNCINvMs1_NtNtCsjoDsUsSjtYa_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCsab0iDiSsW0X_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  256|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {

_RINvXs1G_NtNtCseHGujNUpolX_5serde3ser5implsINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1j_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  386|  3.25k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  3.25k|            where
  388|  3.25k|                S: Serializer,
  389|  3.25k|            {
  390|  3.25k|                (**self).serialize(serializer)
  391|  3.25k|            }
_RINvXs1E_NtNtCseHGujNUpolX_5serde3ser5implsRNtNtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfield8BitfieldNtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  386|  7.55k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  7.55k|            where
  388|  7.55k|                S: Serializer,
  389|  7.55k|            {
  390|  7.55k|                (**self).serialize(serializer)
  391|  7.55k|            }
_RINvXs1E_NtNtCseHGujNUpolX_5serde3ser5implsRINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtBL_14hash_algorithm6Sha256ENtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  386|  67.1k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  67.1k|            where
  388|  67.1k|                S: Serializer,
  389|  67.1k|            {
  390|  67.1k|                (**self).serialize(serializer)
  391|  67.1k|            }
_RINvXs1n_NtNtCseHGujNUpolX_5serde3ser5implsTRNtNtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfield8BitfieldRINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtNtBL_7pointer7PointeryyNtNtBL_14hash_algorithm6Sha256EEENtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  314|  7.55k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  315|  7.55k|                where
  316|  7.55k|                    S: Serializer,
  317|  7.55k|                {
  318|  7.55k|                    let mut tuple = try!(serializer.serialize_tuple($len));
  319|       |                    $(
  320|  7.55k|                        try!(tuple.serialize_element(&self.$n));
  321|       |                    )+
  322|  7.55k|                    tuple.end()
  323|  7.55k|                }
_RINvXs1E_NtNtCseHGujNUpolX_5serde3ser5implsRINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtB1i_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  386|  7.55k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  7.55k|            where
  388|  7.55k|                S: Serializer,
  389|  7.55k|            {
  390|  7.55k|                (**self).serialize(serializer)
  391|  7.55k|            }
_RINvXs1E_NtNtCseHGujNUpolX_5serde3ser5implsRINtCscOd1zgOhOS7_13fvm_ipld_hamt12KeyValuePairyyENtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  386|  77.4k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  77.4k|            where
  388|  77.4k|                S: Serializer,
  389|  77.4k|            {
  390|  77.4k|                (**self).serialize(serializer)
  391|  77.4k|            }
_RINvXs1k_NtNtCseHGujNUpolX_5serde3ser5implsINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtB1h_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  194|  7.55k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|  7.55k|            where
  196|  7.55k|                S: Serializer,
  197|  7.55k|            {
  198|  7.55k|                serializer.collect_seq(self)
  199|  7.55k|            }
_RINvXsE_NtNtCseHGujNUpolX_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
   11|   154k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|   154k|            where
   13|   154k|                S: Serializer,
   14|   154k|            {
   15|   154k|                serializer.$method(*self $($cast)*)
   16|   154k|            }
_RINvXs1k_NtNtCseHGujNUpolX_5serde3ser5implsINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtCscOd1zgOhOS7_13fvm_ipld_hamt12KeyValuePairyyEENtB9_9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  194|  55.7k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|  55.7k|            where
  196|  55.7k|                S: Serializer,
  197|  55.7k|            {
  198|  55.7k|                serializer.collect_seq(self)
  199|  55.7k|            }

_RINvYQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer11collect_seqRINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtCscOd1zgOhOS7_13fvm_ipld_hamt12KeyValuePairyyEEECs8FEd8Z4yMqw_6simple:
 1275|  55.7k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|  55.7k|    where
 1277|  55.7k|        I: IntoIterator,
 1278|  55.7k|        <I as IntoIterator>::Item: Serialize,
 1279|  55.7k|    {
 1280|  55.7k|        let iter = iter.into_iter();
 1281|  55.7k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|  55.7k|            let mut iter = iter;
 1286|  55.7k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|  55.7k|        serializer.end()
 1297|  55.7k|    }
_RNCINvYQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer11collect_seqRINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtCscOd1zgOhOS7_13fvm_ipld_hamt12KeyValuePairyyEEE0Cs8FEd8Z4yMqw_6simple:
 1286|  77.4k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer11collect_seqRINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtB3f_14hash_algorithm6Sha256EEECs8FEd8Z4yMqw_6simple:
 1275|  7.55k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|  7.55k|    where
 1277|  7.55k|        I: IntoIterator,
 1278|  7.55k|        <I as IntoIterator>::Item: Serialize,
 1279|  7.55k|    {
 1280|  7.55k|        let iter = iter.into_iter();
 1281|  7.55k|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|  7.55k|            let mut iter = iter;
 1286|  7.55k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|  7.55k|        serializer.end()
 1297|  7.55k|    }
_RINvNtCseHGujNUpolX_5serde3ser17iterator_len_hintINtNtNtCshaMFDoCIZLT_4core5slice4iter4IterINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtB1w_14hash_algorithm6Sha256EEECs8FEd8Z4yMqw_6simple:
 1982|  7.55k|    match iter.size_hint() {
 1983|  7.55k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|  7.55k|}
_RNCINvYQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer11collect_seqRINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtB3h_14hash_algorithm6Sha256EEE0Cs8FEd8Z4yMqw_6simple:
 1286|  67.1k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCseHGujNUpolX_5serde3ser17iterator_len_hintINtNtNtCshaMFDoCIZLT_4core5slice4iter4IterINtCscOd1zgOhOS7_13fvm_ipld_hamt12KeyValuePairyyEEECs8FEd8Z4yMqw_6simple:
 1982|  55.7k|    match iter.size_hint() {
 1983|  55.7k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|  55.7k|}

_RINvMNtCs9xakKwFIfqm_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs9ySuRiB3rXh_5alloc3vec3VechEECs8FEd8Z4yMqw_6simple:
   60|  11.3k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|  11.3k|        ByteBuf {
   62|  11.3k|            bytes: bytes.into(),
   63|  11.3k|        }
   64|  11.3k|    }
_RINvXsc_NtCs9xakKwFIfqm_11serde_bytes7bytebufNtB6_7ByteBufNtNtCseHGujNUpolX_5serde3ser9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
  186|  11.3k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|  11.3k|    where
  188|  11.3k|        S: Serializer,
  189|  11.3k|    {
  190|  11.3k|        serializer.serialize_bytes(&self.bytes)
  191|  11.3k|    }

_RNvXs_NtCshgSPTdera9q_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer13serialize_u64Cs8FEd8Z4yMqw_6simple:
  123|   154k|        v.encode(&mut self.writer)?;
  124|   154k|        Ok(())
  125|   154k|    }
_RNvXs2_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser20SerializeTupleStruct3endCs8FEd8Z4yMqw_6simple:
  408|  77.4k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|  77.4k|        Ok(())
  410|  77.4k|    }
_RNvXs0_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser12SerializeSeq3endCs8FEd8Z4yMqw_6simple:
  374|  63.3k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|  63.3k|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|  63.3k|        }
  378|       |
  379|  63.3k|        Ok(())
  380|  63.3k|    }
_RINvXs1_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser14SerializeTuple17serialize_elementRNtNtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfield8BitfieldECs8FEd8Z4yMqw_6simple:
  388|  7.55k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|  7.55k|        value.serialize(&mut *self.ser)
  390|  7.55k|    }
_RNvXs_NtCshgSPTdera9q_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer22serialize_tuple_structCs8FEd8Z4yMqw_6simple:
  244|  77.4k|    fn serialize_tuple_struct(
  245|  77.4k|        self,
  246|  77.4k|        _name: &'static str,
  247|  77.4k|        len: usize,
  248|  77.4k|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|  77.4k|        self.serialize_tuple(len)
  250|  77.4k|    }
_RINvNtCshgSPTdera9q_18serde_ipld_dagcbor3ser6to_vecINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1r_14hash_algorithm6Sha256EEECs8FEd8Z4yMqw_6simple:
   23|  3.25k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  3.25k|where
   25|  3.25k|    T: Serialize + ?Sized,
   26|  3.25k|{
   27|  3.25k|    let writer = BufWriter::new(Vec::new());
   28|  3.25k|    let mut serializer = Serializer::new(writer);
   29|  3.25k|    value.serialize(&mut serializer)?;
   30|  3.25k|    Ok(serializer.into_inner().into_inner())
   31|  3.25k|}
_RINvXs2_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser20SerializeTupleStruct15serialize_fieldyECs8FEd8Z4yMqw_6simple:
  403|   154k|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|   154k|        value.serialize(&mut *self.ser)
  405|   154k|    }
_RINvXs0_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser12SerializeSeq17serialize_elementRINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtB2R_14hash_algorithm6Sha256EECs8FEd8Z4yMqw_6simple:
  369|  67.1k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  67.1k|        value.serialize(&mut *self.ser)
  371|  67.1k|    }
_RINvXs1_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser14SerializeTuple17serialize_elementRINtNtCs9ySuRiB3rXh_5alloc3vec3VecINtNtCscOd1zgOhOS7_13fvm_ipld_hamt7pointer7PointeryyNtNtB3y_14hash_algorithm6Sha256EEECs8FEd8Z4yMqw_6simple:
  388|  7.55k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  389|  7.55k|        value.serialize(&mut *self.ser)
  390|  7.55k|    }
_RNvXs_NtCshgSPTdera9q_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer13serialize_seqCs8FEd8Z4yMqw_6simple:
  226|  63.3k|        if let Some(len) = len {
  227|  63.3k|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|  63.3k|        Ok(Collect {
  232|  63.3k|            bounded: len.is_some(),
  233|  63.3k|            ser: self,
  234|  63.3k|        })
  235|  63.3k|    }
_RNvXs1_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser14SerializeTuple3endCs8FEd8Z4yMqw_6simple:
  393|  7.55k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  394|  7.55k|        Ok(())
  395|  7.55k|    }
_RNvMNtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterE10into_innerCs8FEd8Z4yMqw_6simple:
   56|  7.55k|    pub fn into_inner(self) -> W {
   57|  7.55k|        self.writer
   58|  7.55k|    }
_RINvNtCshgSPTdera9q_18serde_ipld_dagcbor3ser6to_vecINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtBS_14hash_algorithm6Sha256EECs8FEd8Z4yMqw_6simple:
   23|  4.30k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  4.30k|where
   25|  4.30k|    T: Serialize + ?Sized,
   26|  4.30k|{
   27|  4.30k|    let writer = BufWriter::new(Vec::new());
   28|  4.30k|    let mut serializer = Serializer::new(writer);
   29|  4.30k|    value.serialize(&mut serializer)?;
   30|  4.30k|    Ok(serializer.into_inner().into_inner())
   31|  4.30k|}
_RNvMNtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterE3newCs8FEd8Z4yMqw_6simple:
   51|  7.55k|    pub fn new(writer: W) -> Serializer<W> {
   52|  7.55k|        Serializer { writer }
   53|  7.55k|    }
_RNvXs7_NtCshgSPTdera9q_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer15serialize_bytesCs8FEd8Z4yMqw_6simple:
  550|  11.3k|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|  11.3k|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|  11.3k|        let prefixed = [&[0x00], value].concat();
  553|  11.3k|        // CIDs are serialized with CBOR tag 42.
  554|  11.3k|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|  11.3k|        Ok(())
  556|  11.3k|    }
_RNvXs_NtCshgSPTdera9q_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer15serialize_bytesCs8FEd8Z4yMqw_6simple:
  160|  7.55k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  7.55k|        Ok(())
  162|  7.55k|    }
_RNvXs_NtCshgSPTdera9q_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer15serialize_tupleCs8FEd8Z4yMqw_6simple:
  239|  84.9k|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|  84.9k|        Ok(BoundedCollect { ser: self })
  241|  84.9k|    }
_RINvXs0_NtCshgSPTdera9q_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser12SerializeSeq17serialize_elementRINtCscOd1zgOhOS7_13fvm_ipld_hamt12KeyValuePairyyEECs8FEd8Z4yMqw_6simple:
  369|  77.4k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  77.4k|        value.serialize(&mut *self.ser)
  371|  77.4k|    }
_RINvXs_NtCshgSPTdera9q_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterENtNtCseHGujNUpolX_5serde3ser10Serializer24serialize_newtype_structNtNtCs9xakKwFIfqm_11serde_bytes7bytebuf7ByteBufECs8FEd8Z4yMqw_6simple:
  199|  11.3k|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|  11.3k|        self,
  201|  11.3k|        name: &'static str,
  202|  11.3k|        value: &T,
  203|  11.3k|    ) -> Result<Self::Ok, Self::Error> {
  204|  11.3k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|  11.3k|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|  11.3k|    }

_RNCNvXs3_NtCsOHkPlBsfSJ_4sha28core_apiNtB7_13Sha256VarCoreNtNtCs6IZkg9Huvtt_6digest8core_api18VariableOutputCore22finalize_variable_core0Cs8FEd8Z4yMqw_6simple:
   63|  33.1k|        buffer.len64_padding_be(bit_len, |b| compress256(&mut self.state, from_ref(b)));
_RNvXs3_NtCsOHkPlBsfSJ_4sha28core_apiNtB5_13Sha256VarCoreNtNtCs6IZkg9Huvtt_6digest8core_api18VariableOutputCore3newCs8FEd8Z4yMqw_6simple:
   49|  33.1k|    fn new(output_size: usize) -> Result<Self, InvalidOutputSize> {
   50|  33.1k|        let state = match output_size {
   51|      0|            28 => consts::H256_224,
   52|  33.1k|            32 => consts::H256_256,
   53|      0|            _ => return Err(InvalidOutputSize),
   54|       |        };
   55|  33.1k|        let block_len = 0;
   56|  33.1k|        Ok(Self { state, block_len })
   57|  33.1k|    }
_RNvXs3_NtCsOHkPlBsfSJ_4sha28core_apiNtB5_13Sha256VarCoreNtNtCs6IZkg9Huvtt_6digest8core_api18VariableOutputCore22finalize_variable_coreCs8FEd8Z4yMqw_6simple:
   60|  33.1k|    fn finalize_variable_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {
   61|  33.1k|        let bs = Self::BlockSize::U64;
   62|  33.1k|        let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);
   63|  33.1k|        buffer.len64_padding_be(bit_len, |b| compress256(&mut self.state, from_ref(b)));
   64|       |
   65|   265k|        for (chunk, v) in out.chunks_exact_mut(4).zip(self.state.iter()) {
   66|   265k|            chunk.copy_from_slice(&v.to_be_bytes());
   67|   265k|        }
   68|  33.1k|    }

_RNvNtCsOHkPlBsfSJ_4sha26sha25611compress256:
   31|  33.1k|pub fn compress256(state: &mut [u32; 8], blocks: &[GenericArray<u8, U64>]) {
   32|  33.1k|    // SAFETY: GenericArray<u8, U64> and [u8; 64] have
   33|  33.1k|    // exactly the same memory layout
   34|  33.1k|    let p = blocks.as_ptr() as *const [u8; 64];
   35|  33.1k|    let blocks = unsafe { core::slice::from_raw_parts(p, blocks.len()) };
   36|  33.1k|    compress(state, blocks)
   37|  33.1k|}

_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft3shl:
    6|  1.19M|fn shl(v: [u32; 4], o: u32) -> [u32; 4] {
    7|  1.19M|    [v[0] >> o, v[1] >> o, v[2] >> o, v[3] >> o]
    8|  1.19M|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft10sha256msg2:
   56|   397k|fn sha256msg2(v4: [u32; 4], v3: [u32; 4]) -> [u32; 4] {
   57|   397k|    macro_rules! sigma1 {
   58|   397k|        ($a:expr) => {
   59|   397k|            $a.rotate_right(17) ^ $a.rotate_right(19) ^ ($a >> 10)
   60|   397k|        };
   61|   397k|    }
   62|   397k|
   63|   397k|    let [x3, x2, x1, x0] = v4;
   64|   397k|    let [w15, w14, _, _] = v3;
   65|   397k|
   66|   397k|    let w16 = x0.wrapping_add(sigma1!(w14));
   67|   397k|    let w17 = x1.wrapping_add(sigma1!(w15));
   68|   397k|    let w18 = x2.wrapping_add(sigma1!(w16));
   69|   397k|    let w19 = x3.wrapping_add(sigma1!(w17));
   70|   397k|
   71|   397k|    [w19, w18, w17, w16]
   72|   397k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft23sha256_digest_block_u32:
  165|  33.1k|fn sha256_digest_block_u32(state: &mut [u32; 8], block: &[u32; 16]) {
  166|  33.1k|    let mut abef = [state[0], state[1], state[4], state[5]];
  167|  33.1k|    let mut cdgh = [state[2], state[3], state[6], state[7]];
  168|  33.1k|
  169|  33.1k|    // Rounds 0..64
  170|  33.1k|    let mut w0 = [block[3], block[2], block[1], block[0]];
  171|  33.1k|    let mut w1 = [block[7], block[6], block[5], block[4]];
  172|  33.1k|    let mut w2 = [block[11], block[10], block[9], block[8]];
  173|  33.1k|    let mut w3 = [block[15], block[14], block[13], block[12]];
  174|  33.1k|    let mut w4;
  175|  33.1k|
  176|  33.1k|    rounds4!(abef, cdgh, w0, 0);
  177|  33.1k|    rounds4!(abef, cdgh, w1, 1);
  178|  33.1k|    rounds4!(abef, cdgh, w2, 2);
  179|  33.1k|    rounds4!(abef, cdgh, w3, 3);
  180|  33.1k|    schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 4);
  181|  33.1k|    schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 5);
  182|  33.1k|    schedule_rounds4!(abef, cdgh, w2, w3, w4, w0, w1, 6);
  183|  33.1k|    schedule_rounds4!(abef, cdgh, w3, w4, w0, w1, w2, 7);
  184|  33.1k|    schedule_rounds4!(abef, cdgh, w4, w0, w1, w2, w3, 8);
  185|  33.1k|    schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 9);
  186|  33.1k|    schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 10);
  187|  33.1k|    schedule_rounds4!(abef, cdgh, w2, w3, w4, w0, w1, 11);
  188|  33.1k|    schedule_rounds4!(abef, cdgh, w3, w4, w0, w1, w2, 12);
  189|  33.1k|    schedule_rounds4!(abef, cdgh, w4, w0, w1, w2, w3, 13);
  190|  33.1k|    schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 14);
  191|  33.1k|    schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 15);
  192|  33.1k|
  193|  33.1k|    let [a, b, e, f] = abef;
  194|  33.1k|    let [c, d, g, h] = cdgh;
  195|  33.1k|
  196|  33.1k|    state[0] = state[0].wrapping_add(a);
  197|  33.1k|    state[1] = state[1].wrapping_add(b);
  198|  33.1k|    state[2] = state[2].wrapping_add(c);
  199|  33.1k|    state[3] = state[3].wrapping_add(d);
  200|  33.1k|    state[4] = state[4].wrapping_add(e);
  201|  33.1k|    state[5] = state[5].wrapping_add(f);
  202|  33.1k|    state[6] = state[6].wrapping_add(g);
  203|  33.1k|    state[7] = state[7].wrapping_add(h);
  204|  33.1k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft2or:
   16|   795k|fn or(a: [u32; 4], b: [u32; 4]) -> [u32; 4] {
   17|   795k|    [a[0] | b[0], a[1] | b[1], a[2] | b[2], a[3] | b[3]]
   18|   795k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft10sha256load:
   35|   795k|fn sha256load(v2: [u32; 4], v3: [u32; 4]) -> [u32; 4] {
   36|   795k|    [v3[3], v2[0], v2[1], v2[2]]
   37|   795k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft10sha256swap:
   39|   530k|fn sha256swap(v0: [u32; 4]) -> [u32; 4] {
   40|   530k|    [v0[2], v0[3], v0[0], v0[1]]
   41|   530k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft3xor:
   21|   795k|fn xor(a: [u32; 4], b: [u32; 4]) -> [u32; 4] {
   22|   795k|    [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]]
   23|   795k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft3add:
   26|  1.32M|fn add(a: [u32; 4], b: [u32; 4]) -> [u32; 4] {
   27|  1.32M|    [
   28|  1.32M|        a[0].wrapping_add(b[0]),
   29|  1.32M|        a[1].wrapping_add(b[1]),
   30|  1.32M|        a[2].wrapping_add(b[2]),
   31|  1.32M|        a[3].wrapping_add(b[3]),
   32|  1.32M|    ]
   33|  1.32M|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft8schedule:
  137|   397k|fn schedule(v0: [u32; 4], v1: [u32; 4], v2: [u32; 4], v3: [u32; 4]) -> [u32; 4] {
  138|   397k|    let t1 = sha256msg1(v0, v1);
  139|   397k|    let t2 = sha256load(v2, v3);
  140|   397k|    let t3 = add(t1, t2);
  141|   397k|    sha256msg2(t3, v3)
  142|   397k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft8compress:
  206|  33.1k|pub fn compress(state: &mut [u32; 8], blocks: &[[u8; 64]]) {
  207|  33.1k|    let mut block_u32 = [0u32; BLOCK_LEN];
  208|  33.1k|    // since LLVM can't properly use aliasing yet it will make
  209|  33.1k|    // unnecessary state stores without this copy
  210|  33.1k|    let mut state_cpy = *state;
  211|  66.3k|    for block in blocks {
  212|   530k|        for (o, chunk) in block_u32.iter_mut().zip(block.chunks_exact(4)) {
  213|   530k|            *o = u32::from_be_bytes(chunk.try_into().unwrap());
  214|   530k|        }
  215|  33.1k|        sha256_digest_block_u32(&mut state_cpy, &block_u32);
  216|       |    }
  217|  33.1k|    *state = state_cpy;
  218|  33.1k|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft10sha256msg1:
   43|   397k|fn sha256msg1(v0: [u32; 4], v1: [u32; 4]) -> [u32; 4] {
   44|   397k|    // sigma 0 on vectors
   45|   397k|    #[inline]
   46|   397k|    fn sigma0x4(x: [u32; 4]) -> [u32; 4] {
   47|   397k|        let t1 = or(shl(x, 7), shr(x, 25));
   48|   397k|        let t2 = or(shl(x, 18), shr(x, 14));
   49|   397k|        let t3 = shl(x, 3);
   50|   397k|        xor(xor(t1, t2), t3)
   51|   397k|    }
   52|   397k|
   53|   397k|    add(v0, sigma0x4(sha256load(v0, v1)))
   54|   397k|}
_RNvNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft10sha256msg18sigma0x4B7_:
   46|   397k|    fn sigma0x4(x: [u32; 4]) -> [u32; 4] {
   47|   397k|        let t1 = or(shl(x, 7), shr(x, 25));
   48|   397k|        let t2 = or(shl(x, 18), shr(x, 14));
   49|   397k|        let t3 = shl(x, 3);
   50|   397k|        xor(xor(t1, t2), t3)
   51|   397k|    }
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft22sha256_digest_round_x2:
   74|  1.06M|fn sha256_digest_round_x2(cdgh: [u32; 4], abef: [u32; 4], wk: [u32; 4]) -> [u32; 4] {
   75|  1.06M|    macro_rules! big_sigma0 {
   76|  1.06M|        ($a:expr) => {
   77|  1.06M|            ($a.rotate_right(2) ^ $a.rotate_right(13) ^ $a.rotate_right(22))
   78|  1.06M|        };
   79|  1.06M|    }
   80|  1.06M|    macro_rules! big_sigma1 {
   81|  1.06M|        ($a:expr) => {
   82|  1.06M|            ($a.rotate_right(6) ^ $a.rotate_right(11) ^ $a.rotate_right(25))
   83|  1.06M|        };
   84|  1.06M|    }
   85|  1.06M|    macro_rules! bool3ary_202 {
   86|  1.06M|        ($a:expr, $b:expr, $c:expr) => {
   87|  1.06M|            $c ^ ($a & ($b ^ $c))
   88|  1.06M|        };
   89|  1.06M|    } // Choose, MD5F, SHA1C
   90|  1.06M|    macro_rules! bool3ary_232 {
   91|  1.06M|        ($a:expr, $b:expr, $c:expr) => {
   92|  1.06M|            ($a & $b) ^ ($a & $c) ^ ($b & $c)
   93|  1.06M|        };
   94|  1.06M|    } // Majority, SHA1M
   95|  1.06M|
   96|  1.06M|    let [_, _, wk1, wk0] = wk;
   97|  1.06M|    let [a0, b0, e0, f0] = abef;
   98|  1.06M|    let [c0, d0, g0, h0] = cdgh;
   99|  1.06M|
  100|  1.06M|    // a round
  101|  1.06M|    let x0 = big_sigma1!(e0)
  102|  1.06M|        .wrapping_add(bool3ary_202!(e0, f0, g0))
  103|  1.06M|        .wrapping_add(wk0)
  104|  1.06M|        .wrapping_add(h0);
  105|  1.06M|    let y0 = big_sigma0!(a0).wrapping_add(bool3ary_232!(a0, b0, c0));
  106|  1.06M|    let (a1, b1, c1, d1, e1, f1, g1, h1) = (
  107|  1.06M|        x0.wrapping_add(y0),
  108|  1.06M|        a0,
  109|  1.06M|        b0,
  110|  1.06M|        c0,
  111|  1.06M|        x0.wrapping_add(d0),
  112|  1.06M|        e0,
  113|  1.06M|        f0,
  114|  1.06M|        g0,
  115|  1.06M|    );
  116|  1.06M|
  117|  1.06M|    // a round
  118|  1.06M|    let x1 = big_sigma1!(e1)
  119|  1.06M|        .wrapping_add(bool3ary_202!(e1, f1, g1))
  120|  1.06M|        .wrapping_add(wk1)
  121|  1.06M|        .wrapping_add(h1);
  122|  1.06M|    let y1 = big_sigma0!(a1).wrapping_add(bool3ary_232!(a1, b1, c1));
  123|  1.06M|    let (a2, b2, _, _, e2, f2, _, _) = (
  124|  1.06M|        x1.wrapping_add(y1),
  125|  1.06M|        a1,
  126|  1.06M|        b1,
  127|  1.06M|        c1,
  128|  1.06M|        x1.wrapping_add(d1),
  129|  1.06M|        e1,
  130|  1.06M|        f1,
  131|  1.06M|        g1,
  132|  1.06M|    );
  133|  1.06M|
  134|  1.06M|    [a2, b2, e2, f2]
  135|  1.06M|}
_RNvNtNtCsOHkPlBsfSJ_4sha26sha2564soft3shr:
   11|   795k|fn shr(v: [u32; 4], o: u32) -> [u32; 4] {
   12|   795k|    [v[0] << o, v[1] << o, v[2] << o, v[3] << o]
   13|   795k|}

_RNvNtNtCsOHkPlBsfSJ_4sha26sha2563x868compress:
  102|  33.1k|pub fn compress(state: &mut [u32; 8], blocks: &[[u8; 64]]) {
  103|  33.1k|    // TODO: Replace with https://github.com/rust-lang/rfcs/pull/2725
  104|  33.1k|    // after stabilization
  105|  33.1k|    if shani_cpuid::get() {
  106|      0|        unsafe {
  107|      0|            digest_blocks(state, blocks);
  108|      0|        }
  109|  33.1k|    } else {
  110|  33.1k|        super::soft::compress(state, blocks);
  111|  33.1k|    }
  112|  33.1k|}

_RNvNtCsd04AnFOgldA_15unsigned_varint6encode3u64Cs8FEd8Z4yMqw_6simple:
   69|  33.9k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  33.9k|    encode!(number, buf)
   71|  33.9k|}
_RNvNtCsd04AnFOgldA_15unsigned_varint6encode9u8_bufferCs8FEd8Z4yMqw_6simple:
  101|  11.3k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|  11.3k|    [0; U8_LEN]
  103|  11.3k|}
_RNvNtCsd04AnFOgldA_15unsigned_varint6encode2u8Cs8FEd8Z4yMqw_6simple:
   45|  11.3k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|  11.3k|    encode!(number, buf)
   47|  11.3k|}
_RNvNtCsd04AnFOgldA_15unsigned_varint6encode10u64_bufferCs8FEd8Z4yMqw_6simple:
  119|  33.9k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  33.9k|    [0; U64_LEN]
  121|  33.9k|}

_RNvXs_NtCs99iymtFE1NC_19fvm_ipld_blockstore5blockINtB4_5BlockRINtNtCs9ySuRiB3rXh_5alloc3vec3VechEEINtNtCshaMFDoCIZLT_4core7convert5AsRefShE6as_refCs8FEd8Z4yMqw_6simple:
   40|  7.55k|    fn as_ref(&self) -> &[u8] {
   41|  7.55k|        self.data.as_ref()
   42|  7.55k|    }
_RNvMNtCs99iymtFE1NC_19fvm_ipld_blockstore5blockINtB2_5BlockRINtNtCs9ySuRiB3rXh_5alloc3vec3VechEE3cidCs8FEd8Z4yMqw_6simple:
   26|  7.55k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   27|  7.55k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   28|  7.55k|    }

_RINvXCs99iymtFE1NC_19fvm_ipld_blockstoreRNtNtB3_6memory16MemoryBlockstoreNtB3_10Blockstore3putRINtNtCs9ySuRiB3rXh_5alloc3vec3VechEECs8FEd8Z4yMqw_6simple:
  104|  7.55k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  105|  7.55k|    where
  106|  7.55k|        Self: Sized,
  107|  7.55k|        D: AsRef<[u8]>,
  108|  7.55k|    {
  109|  7.55k|        (*self).put(mh_code, block)
  110|  7.55k|    }
_RINvYNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCs9ySuRiB3rXh_5alloc3vec3VechEECs8FEd8Z4yMqw_6simple:
   37|  7.55k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   38|  7.55k|    where
   39|  7.55k|        Self: Sized,
   40|  7.55k|        D: AsRef<[u8]>,
   41|  7.55k|    {
   42|  7.55k|        let k = block.cid(mh_code);
   43|  7.55k|        self.put_keyed(&k, block.as_ref())?;
   44|  7.55k|        Ok(k)
   45|  7.55k|    }

_RNvXs1_NtCs99iymtFE1NC_19fvm_ipld_blockstore6memoryNtB5_16MemoryBlockstoreNtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
    9|    544|#[derive(Debug, Default, Clone)]
_RNvXs_NtCs99iymtFE1NC_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   29|  7.55k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   30|  7.55k|        self.blocks.borrow_mut().insert(*k, block.into());
   31|  7.55k|        Ok(())
   32|  7.55k|    }

_RINvYRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCskFlC05hxd5o_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB2h_14hash_algorithm6Sha256EECs8FEd8Z4yMqw_6simple:
   24|  4.30k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   25|  4.30k|    where
   26|  4.30k|        S: ser::Serialize,
   27|  4.30k|    {
   28|  4.30k|        let bytes = crate::to_vec(obj)?;
   29|  4.30k|        self.put(
   30|  4.30k|            code,
   31|  4.30k|            &Block {
   32|  4.30k|                codec: DAG_CBOR,
   33|  4.30k|                data: &bytes,
   34|  4.30k|            },
   35|  4.30k|        )
   36|  4.30k|    }
_RINvYRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCskFlC05hxd5o_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB2Q_14hash_algorithm6Sha256EEECs8FEd8Z4yMqw_6simple:
   24|  3.25k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   25|  3.25k|    where
   26|  3.25k|        S: ser::Serialize,
   27|  3.25k|    {
   28|  3.25k|        let bytes = crate::to_vec(obj)?;
   29|  3.25k|        self.put(
   30|  3.25k|            code,
   31|  3.25k|            &Block {
   32|  3.25k|                codec: DAG_CBOR,
   33|  3.25k|                data: &bytes,
   34|  3.25k|            },
   35|  3.25k|        )
   36|  3.25k|    }

_RINvCskFlC05hxd5o_17fvm_ipld_encoding6to_vecINtNtCs9ySuRiB3rXh_5alloc5boxed3BoxINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtB1k_14hash_algorithm6Sha256EEECs8FEd8Z4yMqw_6simple:
   33|  3.25k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|  3.25k|where
   35|  3.25k|    T: ser::Serialize + ?Sized,
   36|  3.25k|{
   37|  3.25k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|  3.25k|}
_RINvCskFlC05hxd5o_17fvm_ipld_encoding6to_vecINtNtCscOd1zgOhOS7_13fvm_ipld_hamt4node4NodeyyNtNtBL_14hash_algorithm6Sha256EECs8FEd8Z4yMqw_6simple:
   33|  4.30k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|  4.30k|where
   35|  4.30k|    T: ser::Serialize + ?Sized,
   36|  4.30k|{
   37|  4.30k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|  4.30k|}

_RNCNvXs1_Cs8FEd8Z4yMqw_6simpleNtB7_6MethodNtCsjm13LW3GmYF_9arbitrary9Arbitrary9size_hint0B7_:
   15|    544|#[derive(Debug, Arbitrary)]
_RNvXs_Cs8FEd8Z4yMqw_6simpleNtB4_9OperationNtCsjm13LW3GmYF_9arbitrary9Arbitrary9arbitrary:
    9|  26.3k|#[derive(Debug, Arbitrary)]
_RNCNvXs_Cs8FEd8Z4yMqw_6simpleNtB6_9OperationNtCsjm13LW3GmYF_9arbitrary9Arbitrary9size_hint0B6_:
    9|    544|#[derive(Debug, Arbitrary)]
_RNvXs_Cs8FEd8Z4yMqw_6simpleNtB4_9OperationNtCsjm13LW3GmYF_9arbitrary9Arbitrary9size_hintB4_:
    9|    544|#[derive(Debug, Arbitrary)]
_RNvXs_Cs8FEd8Z4yMqw_6simpleNtB4_9OperationNtCsjm13LW3GmYF_9arbitrary9Arbitrary19arbitrary_take_rest:
    9|    542|#[derive(Debug, Arbitrary)]
_RNvXs1_Cs8FEd8Z4yMqw_6simpleNtB5_6MethodNtCsjm13LW3GmYF_9arbitrary9Arbitrary9size_hintB5_:
   15|    544|#[derive(Debug, Arbitrary)]
_RNvXs1_Cs8FEd8Z4yMqw_6simpleNtB5_6MethodNtCsjm13LW3GmYF_9arbitrary9Arbitrary9arbitrary:
   15|  26.3k|#[derive(Debug, Arbitrary)]
_RNvXs1_Cs8FEd8Z4yMqw_6simpleNtB5_6MethodNtCsjm13LW3GmYF_9arbitrary9Arbitrary19arbitrary_take_rest:
   15|    542|#[derive(Debug, Arbitrary)]
_RNCNvCs8FEd8Z4yMqw_6simple22rust_fuzzer_test_input0B3_:
   42|  1.57k|                let hamt_deleted = hamt.delete(&key).unwrap().map(|(_, v)| v);

_RINvXNtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB3_8BitfieldNtNtCseHGujNUpolX_5serde3ser9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
   15|  7.55k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   16|  7.55k|    where
   17|  7.55k|        S: Serializer,
   18|  7.55k|    {
   19|  7.55k|        let mut v = [0u8; 4 * 8];
   20|  7.55k|        // Big endian ordering, to match go
   21|  7.55k|        BigEndian::write_u64(&mut v[..8], self.0[3]);
   22|  7.55k|        BigEndian::write_u64(&mut v[8..16], self.0[2]);
   23|  7.55k|        BigEndian::write_u64(&mut v[16..24], self.0[1]);
   24|  7.55k|        BigEndian::write_u64(&mut v[24..], self.0[0]);
   25|       |
   26|   222k|        for i in 0..v.len() {
   27|   222k|            if v[i] != 0 {
   28|  6.86k|                return serde_bytes::Serialize::serialize(&v[i..], serializer);
   29|   215k|            }
   30|       |        }
   31|       |
   32|    694|        <[u8] as serde_bytes::Serialize>::serialize(&[], serializer)
   33|  7.55k|    }
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield8test_bit:
   71|  41.8k|    pub fn test_bit(&self, idx: u32) -> bool {
   72|  41.8k|        let ai = idx / 64;
   73|  41.8k|        let bi = idx % 64;
   74|  41.8k|
   75|  41.8k|        self.0[ai as usize] & (1 << bi as u32) != 0
   76|  41.8k|    }
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield9clear_bit:
   65|  1.14k|    pub fn clear_bit(&mut self, idx: u32) {
   66|  1.14k|        let ai = idx / 64;
   67|  1.14k|        let bi = idx % 64;
   68|  1.14k|        self.0[ai as usize] &= u64::MAX - (1 << bi as u32);
   69|  1.14k|    }
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield10count_ones:
   85|  71.0k|    pub fn count_ones(&self) -> usize {
   86|  71.0k|        self.0.iter().map(|a| a.count_ones() as usize).sum()
   87|  71.0k|    }
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield4zero:
   98|  43.7k|    pub fn zero() -> Self {
   99|  43.7k|        Bitfield([0, 0, 0, 0])
  100|  43.7k|    }
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield11set_bits_le:
  102|  35.5k|    pub fn set_bits_le(self, bit: u32) -> Self {
  103|  35.5k|        if bit == 0 {
  104|  1.03k|            return self;
  105|  34.5k|        }
  106|  34.5k|        self.set_bits_leq(bit - 1)
  107|  35.5k|    }
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield3and:
   89|  35.5k|    pub fn and(self, other: &Self) -> Self {
   90|  35.5k|        Bitfield([
   91|  35.5k|            self.0[0] & other.0[0],
   92|  35.5k|            self.0[1] & other.0[1],
   93|  35.5k|            self.0[2] & other.0[2],
   94|  35.5k|            self.0[3] & other.0[3],
   95|  35.5k|        ])
   96|  35.5k|    }
_RNCNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB7_8Bitfield10count_ones0B9_:
   86|   284k|        self.0.iter().map(|a| a.count_ones() as usize).sum()
_RNvNtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfield12set_bits_leqB3_:
  131|  34.5k|fn set_bits_leq(v: u64, bit: u32) -> u64 {
  132|  34.5k|    (v as u128 | ((1u128 << (1 + bit)) - 1)) as u64
  133|  34.5k|}
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield12set_bits_leq:
  109|  34.5k|    pub fn set_bits_leq(mut self, bit: u32) -> Self {
  110|  34.5k|        if bit < 64 {
  111|  34.5k|            self.0[0] = set_bits_leq(self.0[0], bit);
  112|  34.5k|        } else if bit < 128 {
  113|      0|            self.0[0] = std::u64::MAX;
  114|      0|            self.0[1] = set_bits_leq(self.0[1], bit - 64);
  115|      0|        } else if bit < 192 {
  116|      0|            self.0[0] = std::u64::MAX;
  117|      0|            self.0[1] = std::u64::MAX;
  118|      0|            self.0[2] = set_bits_leq(self.0[2], bit - 128);
  119|      0|        } else {
  120|      0|            self.0[0] = std::u64::MAX;
  121|      0|            self.0[1] = std::u64::MAX;
  122|      0|            self.0[2] = std::u64::MAX;
  123|      0|            self.0[3] = set_bits_leq(self.0[3], bit - 192);
  124|      0|        }
  125|       |
  126|  34.5k|        self
  127|  34.5k|    }
_RNvMs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield7set_bit:
   78|  14.2k|    pub fn set_bit(&mut self, idx: u32) {
   79|  14.2k|        let ai = idx / 64;
   80|  14.2k|        let bi = idx % 64;
   81|  14.2k|
   82|  14.2k|        self.0[ai as usize] |= 1 << bi as u32;
   83|  14.2k|    }

_RNvMs0_NtCscOd1zgOhOS7_13fvm_ipld_hamt4hamtINtB5_4HamtRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE5flushCs8FEd8Z4yMqw_6simple:
  277|  4.30k|        self.root.flush(self.store.borrow())?;
  278|  4.30k|        Ok(self.store.put_cbor(&self.root, Code::Blake2b256)?)
  279|  4.30k|    }
_RNvMs0_NtCscOd1zgOhOS7_13fvm_ipld_hamt4hamtINtB5_4HamtRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE3setCs8FEd8Z4yMqw_6simple:
  139|  16.1k|    pub fn set(&mut self, key: K, value: V) -> Result<Option<V>, Error>
  140|  16.1k|    where
  141|  16.1k|        V: PartialEq,
  142|  16.1k|    {
  143|  16.1k|        self.root
  144|  16.1k|            .set(key, value, self.store.borrow(), self.bit_width, true)
  145|  16.1k|            .map(|(r, _)| r)
  146|  16.1k|    }
_RINvMs0_NtCscOd1zgOhOS7_13fvm_ipld_hamt4hamtINtB6_4HamtRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE6deleteyECs8FEd8Z4yMqw_6simple:
  266|  6.27k|    pub fn delete<Q: ?Sized>(&mut self, k: &Q) -> Result<Option<(K, V)>, Error>
  267|  6.27k|    where
  268|  6.27k|        K: Borrow<Q>,
  269|  6.27k|        Q: Hash + Eq,
  270|  6.27k|    {
  271|  6.27k|        self.root
  272|  6.27k|            .remove_entry(k, self.store.borrow(), self.bit_width)
  273|  6.27k|    }
_RNvMs0_NtCscOd1zgOhOS7_13fvm_ipld_hamt4hamtINtB5_4HamtRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE18new_with_bit_widthCs8FEd8Z4yMqw_6simple:
   75|    544|    pub fn new_with_bit_width(store: BS, bit_width: u32) -> Self {
   76|    544|        Self {
   77|    544|            root: Node::default(),
   78|    544|            store,
   79|    544|            bit_width,
   80|    544|            hash: Default::default(),
   81|    544|        }
   82|    544|    }
_RNCNvMs0_NtCscOd1zgOhOS7_13fvm_ipld_hamt4hamtINtB7_4HamtRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE3set0Cs8FEd8Z4yMqw_6simple:
  145|  16.1k|            .map(|(r, _)| r)
_RINvMs0_NtCscOd1zgOhOS7_13fvm_ipld_hamt4hamtINtB6_4HamtRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE3getyECs8FEd8Z4yMqw_6simple:
  209|  4.44k|        match self.root.get(k, self.store.borrow(), self.bit_width)? {
  210|    719|            Some(v) => Ok(Some(v)),
  211|  3.72k|            None => Ok(None),
  212|       |        }
  213|  4.44k|    }

_RINvXs_NtCscOd1zgOhOS7_13fvm_ipld_hamt14hash_algorithmNtB5_6Sha256NtB5_13HashAlgorithm4hashyECs8FEd8Z4yMqw_6simple:
   37|  33.1k|    fn hash<X: ?Sized>(key: &X) -> HashedKey
   38|  33.1k|    where
   39|  33.1k|        X: Hash,
   40|  33.1k|    {
   41|  33.1k|        let mut hasher = Sha2HasherWrapper::default();
   42|  33.1k|        key.hash(&mut hasher);
   43|  33.1k|        hasher.0.finalize().into()
   44|  33.1k|    }
_RNvXs0_NtCscOd1zgOhOS7_13fvm_ipld_hamt14hash_algorithmNtB5_17Sha2HasherWrapperNtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
   18|  33.1k|#[derive(Default)]
_RNvXNtCscOd1zgOhOS7_13fvm_ipld_hamt14hash_algorithmNtB2_17Sha2HasherWrapperNtNtCshaMFDoCIZLT_4core4hash6Hasher5write:
   27|  33.1k|    fn write(&mut self, bytes: &[u8]) {
   28|  33.1k|        self.0.update(bytes);
   29|  33.1k|    }

_RNvMNtCscOd1zgOhOS7_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits4next:
   35|  41.8k|    pub fn next(&mut self, i: u32) -> Result<u32, Error> {
   36|  41.8k|        if i > 8 {
   37|      0|            return Err(Error::InvalidHashBitLen);
   38|  41.8k|        }
   39|  41.8k|        if (self.consumed + i) as usize > self.b.len() * 8 {
   40|      0|            return Err(Error::MaxDepth);
   41|  41.8k|        }
   42|  41.8k|        Ok(self.next_bits(i))
   43|  41.8k|    }
_RNvMNtCscOd1zgOhOS7_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits12new_at_index:
   26|  33.1k|    pub fn new_at_index(hash_buffer: &'a HashedKey, consumed: u32) -> HashBits<'a> {
   27|  33.1k|        Self {
   28|  33.1k|            b: hash_buffer,
   29|  33.1k|            consumed,
   30|  33.1k|        }
   31|  33.1k|    }
_RNvNtCscOd1zgOhOS7_13fvm_ipld_hamt9hash_bits6mkmaskB3_:
   16|  98.3k|fn mkmask(n: u32) -> u32 {
   17|  98.3k|    ((1u64 << n) - 1) as u32
   18|  98.3k|}
_RNvMNtCscOd1zgOhOS7_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits3new:
   21|  26.9k|    pub fn new(hash_buffer: &'a HashedKey) -> HashBits<'a> {
   22|  26.9k|        Self::new_at_index(hash_buffer, 0)
   23|  26.9k|    }
_RNvMNtCscOd1zgOhOS7_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits9next_bits:
   45|  56.5k|    fn next_bits(&mut self, i: u32) -> u32 {
   46|  56.5k|        let curbi = self.consumed / 8;
   47|  56.5k|        let leftb = 8 - (self.consumed % 8);
   48|  56.5k|
   49|  56.5k|        let curb = self.b[curbi as usize] as u32;
   50|  56.5k|        match i.cmp(&leftb) {
   51|       |            Ordering::Equal => {
   52|       |                // bits to consume is equal to the bits remaining in the currently indexed byte
   53|      0|                let out = mkmask(i) & curb;
   54|      0|                self.consumed += i;
   55|      0|                out
   56|       |            }
   57|       |            Ordering::Less => {
   58|       |                // Consuming less than the remaining bits in the current byte
   59|  41.8k|                let a = curb & mkmask(leftb);
   60|  41.8k|                let b = a & !mkmask(leftb - i);
   61|  41.8k|                let c = b >> (leftb - i);
   62|  41.8k|                self.consumed += i;
   63|  41.8k|                c
   64|       |            }
   65|       |            Ordering::Greater => {
   66|       |                // Consumes remaining bits and remaining bits from a recursive call
   67|  14.7k|                let mut out = (mkmask(leftb) & curb) as u64;
   68|  14.7k|                out <<= i - leftb;
   69|  14.7k|                self.consumed += leftb;
   70|  14.7k|                out += self.next_bits(i - leftb) as u64;
   71|  14.7k|                out as u32
   72|       |            }
   73|       |        }
   74|  56.5k|    }

_RNvMs_CscOd1zgOhOS7_13fvm_ipld_hamtINtB4_12KeyValuePairyyE3newCs8FEd8Z4yMqw_6simple:
   49|  19.6k|    pub fn new(key: K, value: V) -> Self {
   50|  19.6k|        KeyValuePair(key, value)
   51|  19.6k|    }
_RINvXNvCscOd1zgOhOS7_13fvm_ipld_hamt1__INtB5_12KeyValuePairyyENtNtCseHGujNUpolX_5serde3ser9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
   36|  77.4k|#[derive(Debug, Serialize, Deserialize, PartialEq)]
_RNvMCscOd1zgOhOS7_13fvm_ipld_hamtINtB2_12KeyValuePairyyE5valueCs8FEd8Z4yMqw_6simple:
   43|  3.51k|    pub fn value(&self) -> &V {
   44|  3.51k|        &self.1
   45|  3.51k|    }
_RNvMCscOd1zgOhOS7_13fvm_ipld_hamtINtB2_12KeyValuePairyyE3keyCs8FEd8Z4yMqw_6simple:
   40|  40.2k|    pub fn key(&self) -> &K {
   41|  40.2k|        &self.0
   42|  40.2k|    }

_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E12modify_valueRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
  238|  27.8k|    fn modify_value<S: Blockstore>(
  239|  27.8k|        &mut self,
  240|  27.8k|        hashed_key: &mut HashBits,
  241|  27.8k|        bit_width: u32,
  242|  27.8k|        depth: u64,
  243|  27.8k|        key: K,
  244|  27.8k|        value: V,
  245|  27.8k|        store: &S,
  246|  27.8k|        overwrite: bool,
  247|  27.8k|    ) -> Result<(Option<V>, bool), Error>
  248|  27.8k|    where
  249|  27.8k|        V: PartialEq,
  250|  27.8k|    {
  251|  27.8k|        let idx = hashed_key.next(bit_width)?;
  252|       |
  253|       |        // No existing values at this point.
  254|  27.8k|        if !self.bitfield.test_bit(idx) {
  255|  14.2k|            self.insert_child(idx, key, value);
  256|  14.2k|            return Ok((None, true));
  257|  13.6k|        }
  258|  13.6k|
  259|  13.6k|        let cindex = self.index_for_bit_pos(idx);
  260|  13.6k|        let child = self.get_child_mut(cindex);
  261|  13.6k|
  262|  13.6k|        match child {
  263|  2.52k|            Pointer::Link { cid, cache } => {
  264|  2.52k|                cache.get_or_try_init(|| {
  265|       |                    store
  266|       |                        .get_cbor(cid)?
  267|       |                        .ok_or_else(|| Error::CidNotFound(cid.to_string()))
  268|  2.52k|                })?;
  269|  2.52k|                let child_node = cache.get_mut().expect("filled line above");
  270|       |
  271|  2.52k|                let (old, modified) = child_node.modify_value(
  272|  2.52k|                    hashed_key,
  273|  2.52k|                    bit_width,
  274|  2.52k|                    depth + 1,
  275|  2.52k|                    key,
  276|  2.52k|                    value,
  277|  2.52k|                    store,
  278|  2.52k|                    overwrite,
  279|  2.52k|                )?;
  280|  2.52k|                if modified {
  281|  2.17k|                    *child = Pointer::Dirty(std::mem::take(child_node));
  282|  2.17k|                }
  283|  2.52k|                Ok((old, modified))
  284|       |            }
  285|    799|            Pointer::Dirty(n) => Ok(n.modify_value(
  286|    799|                hashed_key,
  287|    799|                bit_width,
  288|    799|                depth + 1,
  289|    799|                key,
  290|    799|                value,
  291|    799|                store,
  292|    799|                overwrite,
  293|    799|            )?),
  294|  10.2k|            Pointer::Values(vals) => {
  295|       |                // Update, if the key already exists.
  296|  10.2k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
  297|  2.79k|                    if overwrite {
  298|       |                        // If value changed, the parent nodes need to be marked as dirty.
  299|       |                        // ! The assumption here is that `PartialEq` is implemented correctly,
  300|       |                        // ! and that if that is true, the serialized bytes are equal.
  301|       |                        // ! To be absolutely sure, can serialize each value and compare or
  302|       |                        // ! refactor the Hamt to not be type safe and serialize on entry and
  303|       |                        // ! exit. These both come at costs, and this isn't a concern.
  304|  2.79k|                        let value_changed = vals[i].value() != &value;
  305|  2.79k|                        return Ok((
  306|  2.79k|                            Some(std::mem::replace(&mut vals[i].1, value)),
  307|  2.79k|                            value_changed,
  308|  2.79k|                        ));
  309|       |                    } else {
  310|       |                        // Can't overwrite, return None and false that the Node was not modified.
  311|      0|                        return Ok((None, false));
  312|       |                    }
  313|  7.50k|                }
  314|  7.50k|
  315|  7.50k|                // If the array is full, create a subshard and insert everything
  316|  7.50k|                if vals.len() >= MAX_ARRAY_WIDTH {
  317|  2.08k|                    let mut sub = Node::<K, V, H>::default();
  318|  2.08k|                    let consumed = hashed_key.consumed;
  319|  2.08k|                    let modified = sub.modify_value(
  320|  2.08k|                        hashed_key,
  321|  2.08k|                        bit_width,
  322|  2.08k|                        depth + 1,
  323|  2.08k|                        key,
  324|  2.08k|                        value,
  325|  2.08k|                        store,
  326|  2.08k|                        overwrite,
  327|  2.08k|                    )?;
  328|  2.08k|                    let kvs = std::mem::take(vals);
  329|  6.25k|                    for p in kvs.into_iter() {
  330|  6.25k|                        let hash = H::hash(p.key());
  331|  6.25k|                        sub.modify_value(
  332|  6.25k|                            &mut HashBits::new_at_index(&hash, consumed),
  333|  6.25k|                            bit_width,
  334|  6.25k|                            depth + 1,
  335|  6.25k|                            p.0,
  336|  6.25k|                            p.1,
  337|  6.25k|                            store,
  338|  6.25k|                            overwrite,
  339|  6.25k|                        )?;
  340|       |                    }
  341|       |
  342|  2.08k|                    *child = Pointer::Dirty(Box::new(sub));
  343|  2.08k|
  344|  2.08k|                    return Ok(modified);
  345|  5.41k|                }
  346|  5.41k|
  347|  5.41k|                // Otherwise insert the element into the array in order.
  348|  5.41k|                let max = vals.len();
  349|  5.41k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
  350|  5.41k|
  351|  5.41k|                let np = KeyValuePair::new(key, value);
  352|  5.41k|                vals.insert(idx, np);
  353|  5.41k|
  354|  5.41k|                Ok((None, true))
  355|       |            }
  356|       |        }
  357|  27.8k|    }
_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E3setRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
   81|  16.1k|    pub fn set<S: Blockstore>(
   82|  16.1k|        &mut self,
   83|  16.1k|        key: K,
   84|  16.1k|        value: V,
   85|  16.1k|        store: &S,
   86|  16.1k|        bit_width: u32,
   87|  16.1k|        overwrite: bool,
   88|  16.1k|    ) -> Result<(Option<V>, bool), Error>
   89|  16.1k|    where
   90|  16.1k|        V: PartialEq,
   91|  16.1k|    {
   92|  16.1k|        let hash = H::hash(&key);
   93|  16.1k|        self.modify_value(
   94|  16.1k|            &mut HashBits::new(&hash),
   95|  16.1k|            bit_width,
   96|  16.1k|            0,
   97|  16.1k|            key,
   98|  16.1k|            value,
   99|  16.1k|            store,
  100|  16.1k|            overwrite,
  101|  16.1k|        )
  102|  16.1k|    }
_RNvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E9get_childCs8FEd8Z4yMqw_6simple:
  471|  2.57k|    fn get_child(&self, i: usize) -> &Pointer<K, V, H> {
  472|  2.57k|        &self.pointers[i]
  473|  2.57k|    }
_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E3getyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
  105|  4.44k|    pub fn get<Q: ?Sized, S: Blockstore>(
  106|  4.44k|        &self,
  107|  4.44k|        k: &Q,
  108|  4.44k|        store: &S,
  109|  4.44k|        bit_width: u32,
  110|  4.44k|    ) -> Result<Option<&V>, Error>
  111|  4.44k|    where
  112|  4.44k|        K: Borrow<Q>,
  113|  4.44k|        Q: Eq + Hash,
  114|  4.44k|    {
  115|  4.44k|        Ok(self.search(k, store, bit_width)?.map(|kv| kv.value()))
  116|  4.44k|    }
_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E8rm_valueyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
  360|  8.63k|    fn rm_value<Q: ?Sized, S: Blockstore>(
  361|  8.63k|        &mut self,
  362|  8.63k|        hashed_key: &mut HashBits,
  363|  8.63k|        bit_width: u32,
  364|  8.63k|        depth: u64,
  365|  8.63k|        key: &Q,
  366|  8.63k|        store: &S,
  367|  8.63k|    ) -> Result<Option<(K, V)>, Error>
  368|  8.63k|    where
  369|  8.63k|        K: Borrow<Q>,
  370|  8.63k|        Q: Hash + Eq,
  371|  8.63k|    {
  372|  8.63k|        let idx = hashed_key.next(bit_width)?;
  373|       |
  374|       |        // No existing values at this point.
  375|  8.63k|        if !self.bitfield.test_bit(idx) {
  376|  3.52k|            return Ok(None);
  377|  5.11k|        }
  378|  5.11k|
  379|  5.11k|        let cindex = self.index_for_bit_pos(idx);
  380|  5.11k|        let child = self.get_child_mut(cindex);
  381|  5.11k|
  382|  5.11k|        match child {
  383|    503|            Pointer::Link { cid, cache } => {
  384|    503|                cache.get_or_try_init(|| {
  385|       |                    store
  386|       |                        .get_cbor(cid)?
  387|       |                        .ok_or_else(|| Error::CidNotFound(cid.to_string()))
  388|    503|                })?;
  389|    503|                let child_node = cache.get_mut().expect("filled line above");
  390|       |
  391|    503|                let deleted = child_node.rm_value(hashed_key, bit_width, depth + 1, key, store)?;
  392|    503|                if deleted.is_some() {
  393|    170|                    *child = Pointer::Dirty(std::mem::take(child_node));
  394|    170|                    // Clean to retrieve canonical form
  395|    170|                    child.clean()?;
  396|    333|                }
  397|       |
  398|    503|                Ok(deleted)
  399|       |            }
  400|  1.85k|            Pointer::Dirty(n) => {
  401|       |                // Delete value and return deleted value
  402|  1.85k|                let deleted = n.rm_value(hashed_key, bit_width, depth + 1, key, store)?;
  403|       |
  404|       |                // Clean to ensure canonical form
  405|  1.85k|                child.clean()?;
  406|  1.85k|                Ok(deleted)
  407|       |            }
  408|  2.74k|            Pointer::Values(vals) => {
  409|       |                // Delete value
  410|  3.86k|                for (i, p) in vals.iter().enumerate() {
  411|  3.86k|                    if key.eq(p.key().borrow()) {
  412|  1.57k|                        let old = if vals.len() == 1 {
  413|  1.14k|                            if let Pointer::Values(new_v) = self.rm_child(cindex, idx) {
  414|  1.14k|                                new_v.into_iter().next().unwrap()
  415|       |                            } else {
  416|      0|                                unreachable!()
  417|       |                            }
  418|       |                        } else {
  419|    428|                            vals.remove(i)
  420|       |                        };
  421|  1.57k|                        return Ok(Some((old.0, old.1)));
  422|  2.29k|                    }
  423|       |                }
  424|       |
  425|  1.17k|                Ok(None)
  426|       |            }
  427|       |        }
  428|  8.63k|    }
_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E6searchyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
  176|  4.44k|    fn search<Q: ?Sized, S: Blockstore>(
  177|  4.44k|        &self,
  178|  4.44k|        q: &Q,
  179|  4.44k|        store: &S,
  180|  4.44k|        bit_width: u32,
  181|  4.44k|    ) -> Result<Option<&KeyValuePair<K, V>>, Error>
  182|  4.44k|    where
  183|  4.44k|        K: Borrow<Q>,
  184|  4.44k|        Q: Eq + Hash,
  185|  4.44k|    {
  186|  4.44k|        let hash = H::hash(q);
  187|  4.44k|        self.get_value(&mut HashBits::new(&hash), bit_width, 0, q, store)
  188|  4.44k|    }
_RNCINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E9get_valueyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0Cs8FEd8Z4yMqw_6simple:
  232|  2.17k|            Pointer::Values(vals) => Ok(vals.iter().find(|kv| key.eq(kv.key().borrow()))),
_RNCINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0Cs8FEd8Z4yMqw_6simple:
  296|  16.6k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
_RNCINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E3getyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0Cs8FEd8Z4yMqw_6simple:
  115|    719|        Ok(self.search(k, store, bit_width)?.map(|kv| kv.value()))
_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E5flushRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
  430|  7.55k|    pub fn flush<S: Blockstore>(&mut self, store: &S) -> Result<(), Error> {
  431|  74.6k|        for pointer in &mut self.pointers {
  432|  67.1k|            if let Pointer::Dirty(node) = pointer {
  433|       |                // Flush cached sub node to clear it's cache
  434|  3.25k|                node.flush(store)?;
  435|       |
  436|       |                // Put node in blockstore and retrieve Cid
  437|  3.25k|                let cid = store.put_cbor(node, Code::Blake2b256)?;
  438|       |
  439|       |                // Can keep the flushed node in link cache
  440|  3.25k|                let cache = OnceCell::from(std::mem::take(node));
  441|  3.25k|
  442|  3.25k|                // Replace cached node with Cid link
  443|  3.25k|                *pointer = Pointer::Link { cid, cache };
  444|  63.8k|            }
  445|       |        }
  446|       |
  447|  7.55k|        Ok(())
  448|  7.55k|    }
_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E12remove_entryyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
  119|  6.27k|    pub fn remove_entry<Q: ?Sized, S>(
  120|  6.27k|        &mut self,
  121|  6.27k|        k: &Q,
  122|  6.27k|        store: &S,
  123|  6.27k|        bit_width: u32,
  124|  6.27k|    ) -> Result<Option<(K, V)>, Error>
  125|  6.27k|    where
  126|  6.27k|        K: Borrow<Q>,
  127|  6.27k|        Q: Eq + Hash,
  128|  6.27k|        S: Blockstore,
  129|  6.27k|    {
  130|  6.27k|        let hash = H::hash(k);
  131|  6.27k|        self.rm_value(&mut HashBits::new(&hash), bit_width, 0, k, store)
  132|  6.27k|    }
_RNvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E17index_for_bit_posCs8FEd8Z4yMqw_6simple:
  461|  35.5k|    fn index_for_bit_pos(&self, bp: u32) -> usize {
  462|  35.5k|        let mask = Bitfield::zero().set_bits_le(bp);
  463|  35.5k|        assert_eq!(mask.count_ones(), bp as usize);
  464|  35.5k|        mask.and(&self.bitfield).count_ones()
  465|  35.5k|    }
_RINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E9get_valueyRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs8FEd8Z4yMqw_6simple:
  190|  5.33k|    fn get_value<Q: ?Sized, S: Blockstore>(
  191|  5.33k|        &self,
  192|  5.33k|        hashed_key: &mut HashBits,
  193|  5.33k|        bit_width: u32,
  194|  5.33k|        depth: u64,
  195|  5.33k|        key: &Q,
  196|  5.33k|        store: &S,
  197|  5.33k|    ) -> Result<Option<&KeyValuePair<K, V>>, Error>
  198|  5.33k|    where
  199|  5.33k|        K: Borrow<Q>,
  200|  5.33k|        Q: Eq + Hash,
  201|  5.33k|    {
  202|  5.33k|        let idx = hashed_key.next(bit_width)?;
  203|       |
  204|  5.33k|        if !self.bitfield.test_bit(idx) {
  205|  2.75k|            return Ok(None);
  206|  2.57k|        }
  207|  2.57k|
  208|  2.57k|        let cindex = self.index_for_bit_pos(idx);
  209|  2.57k|        let child = self.get_child(cindex);
  210|  2.57k|        match child {
  211|    613|            Pointer::Link { cid, cache } => {
  212|    613|                if let Some(cached_node) = cache.get() {
  213|       |                    // Link node is cached
  214|    613|                    cached_node.get_value(hashed_key, bit_width, depth + 1, key, store)
  215|       |                } else {
  216|      0|                    let node: Box<Node<K, V, H>> = if let Some(node) = store.get_cbor(cid)? {
  217|      0|                        node
  218|       |                    } else {
  219|       |                        #[cfg(not(feature = "ignore-dead-links"))]
  220|      0|                        return Err(Error::CidNotFound(cid.to_string()));
  221|       |
  222|       |                        #[cfg(feature = "ignore-dead-links")]
  223|       |                        return Ok(None);
  224|       |                    };
  225|       |
  226|       |                    // Intentionally ignoring error, cache will always be the same.
  227|      0|                    let cache_node = cache.get_or_init(|| node);
  228|      0|                    cache_node.get_value(hashed_key, bit_width, depth + 1, key, store)
  229|       |                }
  230|       |            }
  231|    275|            Pointer::Dirty(n) => n.get_value(hashed_key, bit_width, depth + 1, key, store),
  232|  1.69k|            Pointer::Values(vals) => Ok(vals.iter().find(|kv| key.eq(kv.key().borrow()))),
  233|       |        }
  234|  5.33k|    }
_RNCINvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCs99iymtFE1NC_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0Cs8FEd8Z4yMqw_6simple:
  349|  6.81k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
_RNvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E12insert_childCs8FEd8Z4yMqw_6simple:
  455|  14.2k|    fn insert_child(&mut self, idx: u32, key: K, value: V) {
  456|  14.2k|        let i = self.index_for_bit_pos(idx);
  457|  14.2k|        self.bitfield.set_bit(idx);
  458|  14.2k|        self.pointers.insert(i, Pointer::from_key_value(key, value))
  459|  14.2k|    }
_RINvXs_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256ENtNtCseHGujNUpolX_5serde3ser9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
   39|  7.55k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   40|  7.55k|    where
   41|  7.55k|        S: Serializer,
   42|  7.55k|    {
   43|  7.55k|        (&self.bitfield, &self.pointers).serialize(serializer)
   44|  7.55k|    }
_RNvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E13get_child_mutCs8FEd8Z4yMqw_6simple:
  467|  18.7k|    fn get_child_mut(&mut self, i: usize) -> &mut Pointer<K, V, H> {
  468|  18.7k|        &mut self.pointers[i]
  469|  18.7k|    }
_RNvMs2_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E8rm_childCs8FEd8Z4yMqw_6simple:
  450|  1.14k|    fn rm_child(&mut self, i: usize, idx: u32) -> Pointer<K, V, H> {
  451|  1.14k|        self.bitfield.clear_bit(idx);
  452|  1.14k|        self.pointers.remove(i)
  453|  1.14k|    }
_RNvXs1_NtCscOd1zgOhOS7_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256ENtNtCshaMFDoCIZLT_4core7default7Default7defaultCs8FEd8Z4yMqw_6simple:
   66|  8.22k|    fn default() -> Self {
   67|  8.22k|        Node {
   68|  8.22k|            bitfield: Bitfield::zero(),
   69|  8.22k|            pointers: Vec::new(),
   70|  8.22k|            hash: Default::default(),
   71|  8.22k|        }
   72|  8.22k|    }

_RNCNvMs3_NtCscOd1zgOhOS7_13fvm_ipld_hamt7pointerINtB7_7PointeryyNtNtB9_14hash_algorithm6Sha256E5clean0Cs8FEd8Z4yMqw_6simple:
  148|  2.30k|                            if let Pointer::Values(kvs) = p {
  149|  2.30k|                                Some(std::mem::take(kvs))
  150|       |                            } else {
  151|      0|                                None
  152|       |                            }
  153|  2.30k|                        })
_RNvMs3_NtCscOd1zgOhOS7_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256E5cleanCs8FEd8Z4yMqw_6simple:
  114|  2.02k|    pub(crate) fn clean(&mut self) -> Result<(), Error> {
  115|  2.02k|        match self {
  116|  2.02k|            Pointer::Dirty(n) => match n.pointers.len() {
  117|      0|                0 => Err(Error::ZeroPointers),
  118|       |                1 => {
  119|       |                    // Node has only one pointer, swap with parent node
  120|    260|                    if let Pointer::Values(vals) = &mut n.pointers[0] {
  121|       |                        // Take child values, to ensure canonical ordering
  122|     66|                        let values = std::mem::take(vals);
  123|     66|
  124|     66|                        // move parent node up
  125|     66|                        *self = Pointer::Values(values)
  126|    194|                    }
  127|    260|                    Ok(())
  128|       |                }
  129|  1.76k|                2..=MAX_ARRAY_WIDTH => {
  130|       |                    // If more child values than max width, nothing to change.
  131|  1.32k|                    let mut children_len = 0;
  132|  3.55k|                    for c in n.pointers.iter() {
  133|  3.55k|                        if let Pointer::Values(vals) = c {
  134|  3.36k|                            children_len += vals.len();
  135|  3.36k|                        } else {
  136|    194|                            return Ok(());
  137|       |                        }
  138|       |                    }
  139|  1.13k|                    if children_len > MAX_ARRAY_WIDTH {
  140|    288|                        return Ok(());
  141|    847|                    }
  142|    847|
  143|    847|                    // Collect values from child nodes to collapse.
  144|    847|                    let mut child_vals: Vec<KeyValuePair<K, V>> = n
  145|    847|                        .pointers
  146|    847|                        .iter_mut()
  147|    847|                        .filter_map(|p| {
  148|       |                            if let Pointer::Values(kvs) = p {
  149|       |                                Some(std::mem::take(kvs))
  150|       |                            } else {
  151|       |                                None
  152|       |                            }
  153|    847|                        })
  154|    847|                        .flatten()
  155|    847|                        .collect();
  156|    847|
  157|    847|                    // Sorting by key, values are inserted based on the ordering of the key itself,
  158|    847|                    // so when collapsed, it needs to be ensured that this order is equal.
  159|    847|                    child_vals.sort_unstable_by(|a, b| {
  160|       |                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  161|    847|                    });
  162|    847|
  163|    847|                    // Replace link node with child values
  164|    847|                    *self = Pointer::Values(child_vals);
  165|    847|                    Ok(())
  166|       |                }
  167|    440|                _ => Ok(()),
  168|       |            },
  169|      0|            _ => unreachable!("clean is only called on dirty pointer"),
  170|       |        }
  171|  2.02k|    }
_RNvMs3_NtCscOd1zgOhOS7_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256E14from_key_valueCs8FEd8Z4yMqw_6simple:
  108|  14.2k|    pub(crate) fn from_key_value(key: K, value: V) -> Self {
  109|  14.2k|        Pointer::Values(vec![KeyValuePair::new(key, value)])
  110|  14.2k|    }
_RNCNvMs3_NtCscOd1zgOhOS7_13fvm_ipld_hamt7pointerINtB7_7PointeryyNtNtB9_14hash_algorithm6Sha256E5cleans_0Cs8FEd8Z4yMqw_6simple:
  159|  2.19k|                    child_vals.sort_unstable_by(|a, b| {
  160|  2.19k|                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  161|  2.19k|                    });
_RINvXs_NtCscOd1zgOhOS7_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256ENtNtCseHGujNUpolX_5serde3ser9Serialize9serializeQINtNtCshgSPTdera9q_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4Ke1HZhRw3X_7cbor4ii4core5utils9BufWriterEECs8FEd8Z4yMqw_6simple:
   44|  67.1k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   45|  67.1k|    where
   46|  67.1k|        S: Serializer,
   47|  67.1k|    {
   48|  67.1k|        match self {
   49|  55.7k|            Pointer::Values(vals) => vals.serialize(serializer),
   50|  11.3k|            Pointer::Link { cid, .. } => cid.serialize(serializer),
   51|      0|            Pointer::Dirty(_) => Err(ser::Error::custom("Cannot serialize cached values")),
   52|       |        }
   53|  67.1k|    }

