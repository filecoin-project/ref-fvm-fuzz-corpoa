_RNvXs14_NtCs6zO3mNVOgix_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvMNtCs6zO3mNVOgix_5ahash13fallback_hashNtB2_7AHasher6update:
   97|   131k|    fn update(&mut self, new_data: u64) {
   98|   131k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|   131k|    }
_RNvXs_NtCs6zO3mNVOgix_5ahash13fallback_hashNtB4_7AHasherNtNtCscES2q764p84_4core4hash6Hasher6finishCs3sW5qwsMDgx_6simple:
  212|   124k|    fn finish(&self) -> u64 {
  213|   124k|        let rot = (self.buffer & 63) as u32;
  214|   124k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|   124k|    }
_RNvXs_NtCs6zO3mNVOgix_5ahash13fallback_hashNtB4_7AHasherNtNtCscES2q764p84_4core4hash6Hasher9write_u64Cs3sW5qwsMDgx_6simple:
  163|   124k|    fn write_u64(&mut self, i: u64) {
  164|   124k|        self.update(i as u64);
  165|   124k|    }
_RNvMNtCs6zO3mNVOgix_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCs3sW5qwsMDgx_6simple:
   58|   124k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|   124k|        AHasher {
   60|   124k|            buffer: rand_state.k0,
   61|   124k|            pad: rand_state.k1,
   62|   124k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|   124k|        }
   64|   124k|    }
_RNvXs_NtCs6zO3mNVOgix_5ahash13fallback_hashNtB4_7AHasherNtNtCscES2q764p84_4core4hash6Hasher9write_u64B6_:
  163|  6.82k|    fn write_u64(&mut self, i: u64) {
  164|  6.82k|        self.update(i as u64);
  165|  6.82k|    }
_RNvXs_NtCs6zO3mNVOgix_5ahash13fallback_hashNtB4_7AHasherNtNtCscES2q764p84_4core4hash6Hasher6finishB6_:
  212|  5.46k|    fn finish(&self) -> u64 {
  213|  5.46k|        let rot = (self.buffer & 63) as u32;
  214|  5.46k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  5.46k|    }
_RNvMNtCs6zO3mNVOgix_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|  1.36k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  1.36k|        AHasher {
   60|  1.36k|            buffer: rand_state.k0,
   61|  1.36k|            pad: rand_state.k1,
   62|  1.36k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  1.36k|        }
   64|  1.36k|    }
_RNvXs_NtCs6zO3mNVOgix_5ahash13fallback_hashNtB4_7AHasherNtNtCscES2q764p84_4core4hash6Hasher11write_usizeB6_:
  174|  1.36k|    fn write_usize(&mut self, i: usize) {
  175|  1.36k|        self.write_u64(i as u64);
  176|  1.36k|    }
_RNvXs4_NtCs6zO3mNVOgix_5ahash13fallback_hashNtB5_7AHasherNtNtCscES2q764p84_4core5clone5Clone5cloneB7_:
   23|  5.46k|#[derive(Debug, Clone)]

_RINvMs2_NtCs6zO3mNVOgix_5ahash8hash_mapINtB6_8AHashMapyyE3getyECs3sW5qwsMDgx_6simple:
   79|  20.2k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  20.2k|    where
   81|  20.2k|        K: Borrow<Q>,
   82|  20.2k|        Q: Hash + Eq,
   83|  20.2k|    {
   84|  20.2k|        self.0.get(k)
   85|  20.2k|    }
_RNvMs0_NtCs6zO3mNVOgix_5ahash8hash_mapINtB5_8AHashMapyyE3newCs3sW5qwsMDgx_6simple:
   35|  1.36k|    pub fn new() -> Self {
   36|  1.36k|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|  1.36k|    }
_RINvMs2_NtCs6zO3mNVOgix_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECs3sW5qwsMDgx_6simple:
  186|  39.0k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  39.0k|    where
  188|  39.0k|        K: Borrow<Q>,
  189|  39.0k|        Q: Hash + Eq,
  190|  39.0k|    {
  191|  39.0k|        self.0.remove(k)
  192|  39.0k|    }
_RNvMs2_NtCs6zO3mNVOgix_5ahash8hash_mapINtB5_8AHashMapyyE6insertCs3sW5qwsMDgx_6simple:
  164|  40.2k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  40.2k|        self.0.insert(k, v)
  166|  40.2k|    }

_RNvNtCs6zO3mNVOgix_5ahash10operations15folded_multiply:
   11|   262k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|   262k|    let result = (s as u128).wrapping_mul(by as u128);
   13|   262k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|   262k|}

_RNvMs1_NtCs6zO3mNVOgix_5ahash12random_stateNtB5_11RandomState3newCs3sW5qwsMDgx_6simple:
  201|  1.36k|    pub fn new() -> RandomState {
  202|  1.36k|        let src = Self::get_src();
  203|  1.36k|        let fixed = src.get_fixed_seeds();
  204|  1.36k|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  205|  1.36k|    }
_RNvXs3_NtCs6zO3mNVOgix_5ahash12random_stateNtB5_11RandomStateNtNtCscES2q764p84_4core4hash11BuildHasher12build_hasherCs3sW5qwsMDgx_6simple:
  298|   124k|    fn build_hasher(&self) -> AHasher {
  299|   124k|        AHasher::from_random_state(self)
  300|   124k|    }
_RNvMs1_NtCs6zO3mNVOgix_5ahash12random_stateNtB5_11RandomState7get_srcCs3sW5qwsMDgx_6simple:
  188|  1.36k|    fn get_src() -> &'static dyn RandomSource {
  189|  1.36k|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  190|  1.36k|    }
_RNvXs2_NtCs6zO3mNVOgix_5ahash12random_stateNtB5_11RandomStateNtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
  261|  1.36k|    fn default() -> Self {
  262|  1.36k|        Self::new()
  263|  1.36k|    }
_RNvMNtCs6zO3mNVOgix_5ahash12random_stateNtB2_19DefaultRandomSource3newCs3sW5qwsMDgx_6simple:
   85|      1|    fn new() -> DefaultRandomSource {
   86|      1|        DefaultRandomSource {
   87|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   88|      1|        }
   89|      1|    }
_RNCNvMs1_NtCs6zO3mNVOgix_5ahash12random_stateNtB7_11RandomState7get_src0Cs3sW5qwsMDgx_6simple:
  189|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvXs_NtCs6zO3mNVOgix_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  135|  1.36k|    fn gen_hasher_seed(&self) -> usize {
  136|  1.36k|        let stack = self as *const _ as usize;
  137|  1.36k|        self.counter.fetch_add(stack, Ordering::Relaxed)
  138|  1.36k|    }
_RNvXs_NtCs6zO3mNVOgix_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
  101|  1.36k|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
  102|  1.36k|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
  103|  1.36k|
  104|  1.36k|        SEEDS.get_or_init(|| {
  105|       |            let mut result: [u8; 64] = [0; 64];
  106|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  107|       |            Box::new(result.convert())
  108|  1.36k|        })
  109|  1.36k|    }
_RNvMs1_NtCs6zO3mNVOgix_5ahash12random_stateNtB5_11RandomState9from_keys:
  216|  1.36k|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  217|  1.36k|        let &[k0, k1, k2, k3] = a;
  218|  1.36k|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  219|  1.36k|        hasher.write_usize(c);
  220|  1.36k|        let mix = |k: u64| {
  221|       |            let mut h = hasher.clone();
  222|       |            h.write_u64(k);
  223|       |            h.finish()
  224|       |        };
  225|  1.36k|        RandomState {
  226|  1.36k|            k0: mix(b[0]),
  227|  1.36k|            k1: mix(b[1]),
  228|  1.36k|            k2: mix(b[2]),
  229|  1.36k|            k3: mix(b[3]),
  230|  1.36k|        }
  231|  1.36k|    }
_RNCNvXs_NtCs6zO3mNVOgix_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
  104|      1|        SEEDS.get_or_init(|| {
  105|      1|            let mut result: [u8; 64] = [0; 64];
  106|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  107|      1|            Box::new(result.convert())
  108|      1|        })
_RNCNvMs1_NtCs6zO3mNVOgix_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  220|  5.46k|        let mix = |k: u64| {
  221|  5.46k|            let mut h = hasher.clone();
  222|  5.46k|            h.write_u64(k);
  223|  5.46k|            h.finish()
  224|  5.46k|        };

_RNvXsI_Cs8ioa9SVYuyc_9arbitraryhNtB5_9Arbitrary9size_hintCs3sW5qwsMDgx_6simple:
  320|  1.36k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  1.36k|                    let n = mem::size_of::<$ty>();
  322|  1.36k|                    (n, Some(n))
  323|  1.36k|                }
_RNvXsa_Cs8ioa9SVYuyc_9arbitraryINtNtCsh5ATE4OSafo_5alloc3vec3VecNtNtCs3sW5qwsMDgx_6simple6common9OperationENtB5_9Arbitrary19arbitrary_take_restB14_:
  683|  1.36k|    fn arbitrary_take_rest(u: Unstructured<'a>) -> Result<Self> {
  684|  1.36k|        u.arbitrary_take_rest_iter()?.collect()
  685|  1.36k|    }
_RNvXs1p_Cs8ioa9SVYuyc_9arbitraryThINtNtCsh5ATE4OSafo_5alloc3vec3VecNtNtCs3sW5qwsMDgx_6simple6common9OperationEENtB6_9Arbitrary9size_hintB17_:
  587|  1.36k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  588|  1.36k|                crate::size_hint::and_all(&[
  589|  1.36k|                    <$last as Arbitrary>::size_hint(depth),
  590|  1.36k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  591|  1.36k|                ])
  592|  1.36k|            }
_RNvXs1p_Cs8ioa9SVYuyc_9arbitraryThINtNtCsh5ATE4OSafo_5alloc3vec3VecNtNtCs3sW5qwsMDgx_6simple6common9OperationEENtB6_9Arbitrary19arbitrary_take_restB17_:
  580|  1.36k|            fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  581|  1.36k|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  582|  1.36k|                let $last = $last::arbitrary_take_rest(u)?;
  583|  1.36k|                Ok(($($xs,)* $last,))
  584|  1.36k|            }
_RNvXsa_Cs8ioa9SVYuyc_9arbitraryINtNtCsh5ATE4OSafo_5alloc3vec3VecNtNtCs3sW5qwsMDgx_6simple6common9OperationENtB5_9Arbitrary9size_hintB14_:
  688|  1.36k|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|  1.36k|        (0, None)
  690|  1.36k|    }
_RNvXs_Cs8ioa9SVYuyc_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|   100k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|   100k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|   100k|    }
_RNvXsI_Cs8ioa9SVYuyc_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|   102k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   102k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   102k|                    u.fill_buffer(&mut buf)?;
  312|   102k|                    let mut x: $unsigned = 0;
  313|   102k|                    for i in 0..mem::size_of::<$ty>() {
  314|   102k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   102k|                    }
  316|   102k|                    Ok(x as $ty)
  317|   102k|                }
_RNvXsK_Cs8ioa9SVYuyc_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  99.5k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  99.5k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  99.5k|                    u.fill_buffer(&mut buf)?;
  312|  99.5k|                    let mut x: $unsigned = 0;
  313|   398k|                    for i in 0..mem::size_of::<$ty>() {
  314|   398k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   398k|                    }
  316|  99.5k|                    Ok(x as $ty)
  317|  99.5k|                }
_RNvXsL_Cs8ioa9SVYuyc_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|   139k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|   139k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|   139k|                    u.fill_buffer(&mut buf)?;
  312|   139k|                    let mut x: $unsigned = 0;
  313|  1.11M|                    for i in 0..mem::size_of::<$ty>() {
  314|  1.11M|                        x |= buf[i] as $unsigned << (i * 8);
  315|  1.11M|                    }
  316|   139k|                    Ok(x as $ty)
  317|   139k|                }

_RNvNtCs8ioa9SVYuyc_9arbitrary9size_hint3andCs3sW5qwsMDgx_6simple:
   26|  2.73k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.73k|    let lower = lhs.0 + rhs.0;
   28|  2.73k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.73k|    (lower, upper)
   30|  2.73k|}
_RNvNtCs8ioa9SVYuyc_9arbitrary9size_hint7and_allCs3sW5qwsMDgx_6simple:
   37|  1.36k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.36k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.36k|}
_RNCNvNtCs8ioa9SVYuyc_9arbitrary9size_hint3and0Cs3sW5qwsMDgx_6simple:
   28|  1.36k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvXs0_NtCs8ioa9SVYuyc_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtNtCs3sW5qwsMDgx_6simple6common9OperationENtNtNtNtCscES2q764p84_4core4iter6traits8iterator8Iterator4nextB1g_:
  738|   100k|    fn next(&mut self) -> Option<Result<ElementType>> {
  739|   100k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  740|   100k|        if keep_going {
  741|  99.5k|            Some(Arbitrary::arbitrary(&mut self.u))
  742|       |        } else {
  743|  1.36k|            None
  744|       |        }
  745|   100k|    }
_RNvMNtCs8ioa9SVYuyc_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs3sW5qwsMDgx_6simple:
  132|   199k|    pub fn is_empty(&self) -> bool {
  133|   199k|        self.len() == 0
  134|   199k|    }
_RNvMNtCs8ioa9SVYuyc_9arbitrary12unstructuredNtB2_12Unstructured3lenCs3sW5qwsMDgx_6simple:
  108|   199k|    pub fn len(&self) -> usize {
  109|   199k|        self.data.len()
  110|   199k|    }
_RINvMNtCs8ioa9SVYuyc_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtNtCs3sW5qwsMDgx_6simple6common9OperationEB1u_:
  620|  1.36k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|  1.36k|        self,
  622|  1.36k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|  1.36k|        Ok(ArbitraryTakeRestIter {
  624|  1.36k|            u: self,
  625|  1.36k|            _marker: PhantomData,
  626|  1.36k|        })
  627|  1.36k|    }
_RINvMNtCs8ioa9SVYuyc_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECs3sW5qwsMDgx_6simple:
  167|   100k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|   100k|    where
  169|   100k|        A: Arbitrary<'a>,
  170|   100k|    {
  171|   100k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|   100k|    }
_RNvMNtCs8ioa9SVYuyc_9arbitrary12unstructuredNtB2_12Unstructured3newCs3sW5qwsMDgx_6simple:
   85|  1.36k|    pub fn new(data: &'a [u8]) -> Self {
   86|  1.36k|        Unstructured { data }
   87|  1.36k|    }
_RNvMNtCs8ioa9SVYuyc_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|   341k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|   341k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|   341k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|   341k|        for byte in buffer[n..].iter_mut() {
  525|  15.0k|            *byte = 0;
  526|  15.0k|        }
  527|   341k|        self.data = &self.data[n..];
  528|   341k|        Ok(())
  529|   341k|    }

_RINvNvNtCs3GxLuyYB6nc_12blake2b_simd8portable14compress_block9as_arrayshEB6_:
  143|  48.5k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  48.5k|                let mut p = a.as_ptr();
  145|  48.5k|                ( $( {
  146|  48.5k|                    let aref = &*(p as *const [T; $len]);
  147|  48.5k|                    p = p.offset($len as isize);
  148|  48.5k|                    aref
  149|  48.5k|                }, )* )
  150|  48.5k|            }
_RINvNvMCs3GxLuyYB6nc_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|  23.2k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  23.2k|                let mut p = a.as_ptr();
  145|  23.2k|                ( $( {
  146|  23.2k|                    let aref = &*(p as *const [T; $len]);
  147|  23.2k|                    p = p.offset($len as isize);
  148|  23.2k|                    aref
  149|  23.2k|                }, )* )
  150|  23.2k|            }
_RINvNvCs3GxLuyYB6nc_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|  23.2k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|  23.2k|                let mut p = a.as_mut_ptr();
  242|  23.2k|                ( $( {
  243|  23.2k|                    let aref = &mut *(p as *mut [T; $len]);
  244|  23.2k|                    p = p.add($len);
  245|  23.2k|                    aref
  246|  23.2k|                }, )* )
  247|  23.2k|            }
_RINvNvNtCs3GxLuyYB6nc_12blake2b_simd8portable14compress1_loop8as_arrayhEB6_:
   61|  14.6k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  14.6k|                &*(slice.as_ptr() as *const [_; $len])
   63|  14.6k|            }
_RINvNvNtCs3GxLuyYB6nc_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  10.7k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  10.7k|                &*(slice.as_ptr() as *const [_; $len])
   63|  10.7k|            }
_RINvNvMCs3GxLuyYB6nc_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|  23.2k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  23.2k|                let mut p = a.as_ptr();
  145|  23.2k|                ( $( {
  146|  23.2k|                    let aref = &*(p as *const [T; $len]);
  147|  23.2k|                    p = p.offset($len as isize);
  148|  23.2k|                    aref
  149|  23.2k|                }, )* )
  150|  23.2k|            }

_RNvMNtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supportedCsjCUaRkTHsrM_9multihash:
   70|  23.2k|    pub fn avx2_if_supported() -> Option<Self> {
   71|  23.2k|        // Check whether AVX2 support is assumed by the build.
   72|  23.2k|        #[cfg(target_feature = "avx2")]
   73|  23.2k|        {
   74|  23.2k|            return Some(Implementation(Platform::AVX2));
   75|  23.2k|        }
   76|  23.2k|        // Otherwise dynamically check for support if we can.
   77|  23.2k|        #[cfg(feature = "std")]
   78|  23.2k|        {
   79|  23.2k|            if is_x86_feature_detected!("avx2") {
   80|  23.2k|                return Some(Implementation(Platform::AVX2));
   81|  23.2k|            }
   82|  23.2k|        }
   83|  23.2k|        None
   84|  23.2k|    }
_RNvMNtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB2_14Implementation8portableCsjCUaRkTHsrM_9multihash:
   46|  23.2k|    pub fn portable() -> Self {
   47|  23.2k|        Implementation(Platform::Portable)
   48|  23.2k|    }
_RNvMNtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB2_14Implementation18sse41_if_supportedCsjCUaRkTHsrM_9multihash:
   52|  23.2k|    pub fn sse41_if_supported() -> Option<Self> {
   53|  23.2k|        // Check whether SSE4.1 support is assumed by the build.
   54|  23.2k|        #[cfg(target_feature = "sse4.1")]
   55|  23.2k|        {
   56|  23.2k|            return Some(Implementation(Platform::SSE41));
   57|  23.2k|        }
   58|  23.2k|        // Otherwise dynamically check for support if we can.
   59|  23.2k|        #[cfg(feature = "std")]
   60|  23.2k|        {
   61|  23.2k|            if is_x86_feature_detected!("sse4.1") {
   62|  23.2k|                return Some(Implementation(Platform::SSE41));
   63|  23.2k|            }
   64|  23.2k|        }
   65|  23.2k|        None
   66|  23.2k|    }
_RNvMNtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB2_14Implementation6detectCsjCUaRkTHsrM_9multihash:
   28|  23.2k|    pub fn detect() -> Self {
   29|       |        // Try the different implementations in order of how fast/modern they
   30|       |        // are. Currently on non-x86, everything just uses portable.
   31|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   32|       |        {
   33|  23.2k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|      0|                return avx2_impl;
   35|  23.2k|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|  23.2k|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|  23.2k|            }
   42|  23.2k|        }
   43|  23.2k|        Self::portable()
   44|  23.2k|    }
_RNvNtCs3GxLuyYB6nc_12blake2b_simd4guts10count_highB3_:
  208|  48.5k|pub(crate) fn count_high(count: Count) -> Word {
  209|  48.5k|    (count >> 8 * size_of::<Word>()) as Word
  210|  48.5k|}
_RNvNtCs3GxLuyYB6nc_12blake2b_simd4guts11final_block:
  232|  33.9k|pub fn final_block<'a>(
  233|  33.9k|    input: &'a [u8],
  234|  33.9k|    offset: usize,
  235|  33.9k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|  33.9k|    stride: Stride,
  237|  33.9k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|  33.9k|    let capped_offset = cmp::min(offset, input.len());
  239|  33.9k|    let offset_slice = &input[capped_offset..];
  240|  33.9k|    if offset_slice.len() >= BLOCKBYTES {
  241|  10.7k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  10.7k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  10.7k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|  23.1k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|  23.1k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|  33.9k|}
_RNvMs1_NtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB5_8LastNode3yesB7_:
  181|  23.2k|    pub fn yes(&self) -> bool {
  182|  23.2k|        match self {
  183|      0|            LastNode::Yes => true,
  184|  23.2k|            LastNode::No => false,
  185|       |        }
  186|  23.2k|    }
_RNvMNtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|  33.9k|    pub fn compress1_loop(
   97|  33.9k|        &self,
   98|  33.9k|        input: &[u8],
   99|  33.9k|        words: &mut [Word; 8],
  100|  33.9k|        count: Count,
  101|  33.9k|        last_node: LastNode,
  102|  33.9k|        finalize: Finalize,
  103|  33.9k|        stride: Stride,
  104|  33.9k|    ) {
  105|  33.9k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|      0|            Platform::AVX2 => unsafe {
  108|      0|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|      0|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|  33.9k|            _ => {
  113|  33.9k|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|  33.9k|            }
  115|       |        }
  116|  33.9k|    }
_RNvMs0_NtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB5_8Finalize3yesB7_:
  165|   101k|    pub fn yes(&self) -> bool {
  166|   101k|        match self {
  167|  69.7k|            Finalize::Yes => true,
  168|  32.0k|            Finalize::No => false,
  169|       |        }
  170|   101k|    }
_RNvNtCs3GxLuyYB6nc_12blake2b_simd4guts9flag_wordB3_:
  217|  97.1k|pub(crate) fn flag_word(flag: bool) -> Word {
  218|  97.1k|    if flag {
  219|  23.2k|        !0
  220|       |    } else {
  221|  73.9k|        0
  222|       |    }
  223|  97.1k|}
_RNvNtCs3GxLuyYB6nc_12blake2b_simd4guts9count_lowB3_:
  204|  48.5k|pub(crate) fn count_low(count: Count) -> Word {
  205|  48.5k|    count as Word
  206|  48.5k|}
_RNvMs2_NtCs3GxLuyYB6nc_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytesB7_:
  196|  59.3k|    pub fn padded_blockbytes(&self) -> usize {
  197|  59.3k|        match self {
  198|  59.3k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|  59.3k|    }
_RNvNtCs3GxLuyYB6nc_12blake2b_simd4guts19input_debug_asserts:
  252|  33.9k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|  33.9k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|  33.9k|    // even multiple of the block size.
  255|  33.9k|    if !finalize.yes() {
  256|  10.6k|        debug_assert!(!input.is_empty());
  257|  10.6k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|  23.2k|    }
  259|  33.9k|}

_RNvMCs3GxLuyYB6nc_12blake2b_simdNtB2_6Params3newCsjCUaRkTHsrM_9multihash:
  165|  23.2k|    pub fn new() -> Self {
  166|  23.2k|        Self {
  167|  23.2k|            hash_length: OUTBYTES as u8,
  168|  23.2k|            key_length: 0,
  169|  23.2k|            key_block: [0; BLOCKBYTES],
  170|  23.2k|            salt: [0; SALTBYTES],
  171|  23.2k|            personal: [0; PERSONALBYTES],
  172|  23.2k|            // NOTE: fanout and max_depth don't default to zero!
  173|  23.2k|            fanout: 1,
  174|  23.2k|            max_depth: 1,
  175|  23.2k|            max_leaf_length: 0,
  176|  23.2k|            node_offset: 0,
  177|  23.2k|            node_depth: 0,
  178|  23.2k|            inner_hash_length: 0,
  179|  23.2k|            last_node: guts::LastNode::No,
  180|  23.2k|            implementation: guts::Implementation::detect(),
  181|  23.2k|        }
  182|  23.2k|    }
_RNvMCs3GxLuyYB6nc_12blake2b_simdNtB2_6Params11hash_lengthCsjCUaRkTHsrM_9multihash:
  238|  23.2k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|  23.2k|        assert!(
  240|  23.2k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|  23.2k|        self.hash_length = length as u8;
  245|  23.2k|        self
  246|  23.2k|    }
_RNvMs1_Cs3GxLuyYB6nc_12blake2b_simdNtB5_5State11with_params:
  406|  23.2k|    fn with_params(params: &Params) -> Self {
  407|  23.2k|        let mut state = Self {
  408|  23.2k|            words: params.to_words(),
  409|  23.2k|            count: 0,
  410|  23.2k|            buf: [0; BLOCKBYTES],
  411|  23.2k|            buflen: 0,
  412|  23.2k|            last_node: params.last_node,
  413|  23.2k|            hash_length: params.hash_length,
  414|  23.2k|            implementation: params.implementation,
  415|  23.2k|            is_keyed: params.key_length > 0,
  416|  23.2k|        };
  417|  23.2k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|  23.2k|        }
  421|  23.2k|        state
  422|  23.2k|    }
_RNvMCs3GxLuyYB6nc_12blake2b_simdNtB2_6Params8to_state:
  230|  23.2k|    pub fn to_state(&self) -> State {
  231|  23.2k|        State::with_params(self)
  232|  23.2k|    }
_RNvMs1_Cs3GxLuyYB6nc_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|  23.2k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|  23.2k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|  23.2k|        }
  450|  23.2k|    }
_RNvMs1_Cs3GxLuyYB6nc_12blake2b_simdNtB5_5State8fill_buf:
  424|  23.2k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|  23.2k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|  23.2k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|  23.2k|        self.buflen += take as u8;
  428|  23.2k|        *input = &input[take..];
  429|  23.2k|    }
_RNvCs3GxLuyYB6nc_12blake2b_simd20state_words_to_bytes:
  529|  23.2k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|  23.2k|    let mut bytes = [0; OUTBYTES];
  531|  23.2k|    {
  532|  23.2k|        const W: usize = size_of::<Word>();
  533|  23.2k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|  23.2k|        *refs.0 = state_words[0].to_le_bytes();
  535|  23.2k|        *refs.1 = state_words[1].to_le_bytes();
  536|  23.2k|        *refs.2 = state_words[2].to_le_bytes();
  537|  23.2k|        *refs.3 = state_words[3].to_le_bytes();
  538|  23.2k|        *refs.4 = state_words[4].to_le_bytes();
  539|  23.2k|        *refs.5 = state_words[5].to_le_bytes();
  540|  23.2k|        *refs.6 = state_words[6].to_le_bytes();
  541|  23.2k|        *refs.7 = state_words[7].to_le_bytes();
  542|  23.2k|    }
  543|  23.2k|    bytes
  544|  23.2k|}
_RNvMs4_Cs3GxLuyYB6nc_12blake2b_simdNtB5_4Hash8as_bytes:
  589|  23.2k|    pub fn as_bytes(&self) -> &[u8] {
  590|  23.2k|        &self.bytes[..self.len as usize]
  591|  23.2k|    }
_RNvMs1_Cs3GxLuyYB6nc_12blake2b_simdNtB5_5State6update:
  453|  23.2k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|  23.2k|        // If we have a partial buffer, try to complete it.
  455|  23.2k|        self.compress_buffer_if_possible(&mut input);
  456|  23.2k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|  23.2k|        // above), compress blocks directly without copying.
  458|  23.2k|        let mut end = input.len().saturating_sub(1);
  459|  23.2k|        end -= end % BLOCKBYTES;
  460|  23.2k|        if end > 0 {
  461|  10.6k|            self.implementation.compress1_loop(
  462|  10.6k|                &input[..end],
  463|  10.6k|                &mut self.words,
  464|  10.6k|                self.count,
  465|  10.6k|                self.last_node,
  466|  10.6k|                guts::Finalize::No,
  467|  10.6k|                guts::Stride::Serial,
  468|  10.6k|            );
  469|  10.6k|            self.count = self.count.wrapping_add(end as Count);
  470|  10.6k|            input = &input[end..];
  471|  12.5k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|  23.2k|        self.fill_buf(&mut input);
  477|  23.2k|        self
  478|  23.2k|    }
_RNvMs1_Cs3GxLuyYB6nc_12blake2b_simdNtB5_5State8finalize:
  482|  23.2k|    pub fn finalize(&self) -> Hash {
  483|  23.2k|        let mut words_copy = self.words;
  484|  23.2k|        self.implementation.compress1_loop(
  485|  23.2k|            &self.buf[..self.buflen as usize],
  486|  23.2k|            &mut words_copy,
  487|  23.2k|            self.count,
  488|  23.2k|            self.last_node,
  489|  23.2k|            guts::Finalize::Yes,
  490|  23.2k|            guts::Stride::Serial,
  491|  23.2k|        );
  492|  23.2k|        Hash {
  493|  23.2k|            bytes: state_words_to_bytes(&words_copy),
  494|  23.2k|            len: self.hash_length,
  495|  23.2k|        }
  496|  23.2k|    }
_RNvMCs3GxLuyYB6nc_12blake2b_simdNtB2_6Params8to_words:
  185|  23.2k|    fn to_words(&self) -> [Word; 8] {
  186|  23.2k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|  23.2k|        let (personal_left, personal_right) =
  188|  23.2k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|  23.2k|        [
  190|  23.2k|            IV[0]
  191|  23.2k|                ^ self.hash_length as u64
  192|  23.2k|                ^ (self.key_length as u64) << 8
  193|  23.2k|                ^ (self.fanout as u64) << 16
  194|  23.2k|                ^ (self.max_depth as u64) << 24
  195|  23.2k|                ^ (self.max_leaf_length as u64) << 32,
  196|  23.2k|            IV[1] ^ self.node_offset,
  197|  23.2k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|  23.2k|            IV[3],
  199|  23.2k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|  23.2k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|  23.2k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|  23.2k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|  23.2k|        ]
  204|  23.2k|    }

_RNvNtCs3GxLuyYB6nc_12blake2b_simd8portable14compress1_loop:
  119|  33.9k|pub fn compress1_loop(
  120|  33.9k|    input: &[u8],
  121|  33.9k|    words: &mut [Word; 8],
  122|  33.9k|    mut count: Count,
  123|  33.9k|    last_node: LastNode,
  124|  33.9k|    finalize: Finalize,
  125|  33.9k|    stride: Stride,
  126|  33.9k|) {
  127|  33.9k|    input_debug_asserts(input, finalize);
  128|  33.9k|
  129|  33.9k|    let mut local_words = *words;
  130|  33.9k|
  131|  33.9k|    let mut fin_offset = input.len().saturating_sub(1);
  132|  33.9k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  133|  33.9k|    let mut buf = [0; BLOCKBYTES];
  134|  33.9k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  135|  33.9k|    let fin_last_block = flag_word(finalize.yes());
  136|  33.9k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  137|       |
  138|  33.9k|    let mut offset = 0;
  139|       |    loop {
  140|       |        let block;
  141|       |        let count_delta;
  142|       |        let last_block;
  143|       |        let last_node;
  144|  48.5k|        if offset == fin_offset {
  145|  33.9k|            block = fin_block;
  146|  33.9k|            count_delta = fin_len;
  147|  33.9k|            last_block = fin_last_block;
  148|  33.9k|            last_node = fin_last_node;
  149|  33.9k|        } else {
  150|  14.6k|            block = array_ref!(input, offset, BLOCKBYTES);
  151|  14.6k|            count_delta = BLOCKBYTES;
  152|  14.6k|            last_block = flag_word(false);
  153|  14.6k|            last_node = flag_word(false);
  154|  14.6k|        };
  155|       |
  156|  48.5k|        count = count.wrapping_add(count_delta as Count);
  157|  48.5k|        compress_block(block, &mut local_words, count, last_block, last_node);
  158|  48.5k|
  159|  48.5k|        // Check for termination before bumping the offset, to avoid overflow.
  160|  48.5k|        if offset == fin_offset {
  161|  33.9k|            break;
  162|  14.6k|        }
  163|  14.6k|
  164|  14.6k|        offset += stride.padded_blockbytes();
  165|       |    }
  166|       |
  167|  33.9k|    *words = local_words;
  168|  33.9k|}
_RNvNtCs3GxLuyYB6nc_12blake2b_simd8portable5round:
   29|   583k|fn round(r: usize, m: &[Word; 16], v: &mut [Word; 16]) {
   30|   583k|    // Select the message schedule based on the round.
   31|   583k|    let s = SIGMA[r];
   32|   583k|
   33|   583k|    // Mix the columns.
   34|   583k|    g(v, 0, 4, 8, 12, m[s[0] as usize], m[s[1] as usize]);
   35|   583k|    g(v, 1, 5, 9, 13, m[s[2] as usize], m[s[3] as usize]);
   36|   583k|    g(v, 2, 6, 10, 14, m[s[4] as usize], m[s[5] as usize]);
   37|   583k|    g(v, 3, 7, 11, 15, m[s[6] as usize], m[s[7] as usize]);
   38|   583k|
   39|   583k|    // Mix the rows.
   40|   583k|    g(v, 0, 5, 10, 15, m[s[8] as usize], m[s[9] as usize]);
   41|   583k|    g(v, 1, 6, 11, 12, m[s[10] as usize], m[s[11] as usize]);
   42|   583k|    g(v, 2, 7, 8, 13, m[s[12] as usize], m[s[13] as usize]);
   43|   583k|    g(v, 3, 4, 9, 14, m[s[14] as usize], m[s[15] as usize]);
   44|   583k|}
_RNvNtCs3GxLuyYB6nc_12blake2b_simd8portable14compress_block:
   47|  48.5k|fn compress_block(
   48|  48.5k|    block: &[u8; BLOCKBYTES],
   49|  48.5k|    words: &mut [Word; 8],
   50|  48.5k|    count: Count,
   51|  48.5k|    last_block: Word,
   52|  48.5k|    last_node: Word,
   53|  48.5k|) {
   54|  48.5k|    // Initialize the compression state.
   55|  48.5k|    let mut v = [
   56|  48.5k|        words[0],
   57|  48.5k|        words[1],
   58|  48.5k|        words[2],
   59|  48.5k|        words[3],
   60|  48.5k|        words[4],
   61|  48.5k|        words[5],
   62|  48.5k|        words[6],
   63|  48.5k|        words[7],
   64|  48.5k|        IV[0],
   65|  48.5k|        IV[1],
   66|  48.5k|        IV[2],
   67|  48.5k|        IV[3],
   68|  48.5k|        IV[4] ^ count_low(count),
   69|  48.5k|        IV[5] ^ count_high(count),
   70|  48.5k|        IV[6] ^ last_block,
   71|  48.5k|        IV[7] ^ last_node,
   72|  48.5k|    ];
   73|  48.5k|
   74|  48.5k|    // Parse the message bytes as ints in little endian order.
   75|  48.5k|    const W: usize = size_of::<Word>();
   76|  48.5k|    let msg_refs = array_refs!(block, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W);
   77|  48.5k|    let m = [
   78|  48.5k|        Word::from_le_bytes(*msg_refs.0),
   79|  48.5k|        Word::from_le_bytes(*msg_refs.1),
   80|  48.5k|        Word::from_le_bytes(*msg_refs.2),
   81|  48.5k|        Word::from_le_bytes(*msg_refs.3),
   82|  48.5k|        Word::from_le_bytes(*msg_refs.4),
   83|  48.5k|        Word::from_le_bytes(*msg_refs.5),
   84|  48.5k|        Word::from_le_bytes(*msg_refs.6),
   85|  48.5k|        Word::from_le_bytes(*msg_refs.7),
   86|  48.5k|        Word::from_le_bytes(*msg_refs.8),
   87|  48.5k|        Word::from_le_bytes(*msg_refs.9),
   88|  48.5k|        Word::from_le_bytes(*msg_refs.10),
   89|  48.5k|        Word::from_le_bytes(*msg_refs.11),
   90|  48.5k|        Word::from_le_bytes(*msg_refs.12),
   91|  48.5k|        Word::from_le_bytes(*msg_refs.13),
   92|  48.5k|        Word::from_le_bytes(*msg_refs.14),
   93|  48.5k|        Word::from_le_bytes(*msg_refs.15),
   94|  48.5k|    ];
   95|  48.5k|
   96|  48.5k|    round(0, &m, &mut v);
   97|  48.5k|    round(1, &m, &mut v);
   98|  48.5k|    round(2, &m, &mut v);
   99|  48.5k|    round(3, &m, &mut v);
  100|  48.5k|    round(4, &m, &mut v);
  101|  48.5k|    round(5, &m, &mut v);
  102|  48.5k|    round(6, &m, &mut v);
  103|  48.5k|    round(7, &m, &mut v);
  104|  48.5k|    round(8, &m, &mut v);
  105|  48.5k|    round(9, &m, &mut v);
  106|  48.5k|    round(10, &m, &mut v);
  107|  48.5k|    round(11, &m, &mut v);
  108|  48.5k|
  109|  48.5k|    words[0] ^= v[0] ^ v[8];
  110|  48.5k|    words[1] ^= v[1] ^ v[9];
  111|  48.5k|    words[2] ^= v[2] ^ v[10];
  112|  48.5k|    words[3] ^= v[3] ^ v[11];
  113|  48.5k|    words[4] ^= v[4] ^ v[12];
  114|  48.5k|    words[5] ^= v[5] ^ v[13];
  115|  48.5k|    words[6] ^= v[6] ^ v[14];
  116|  48.5k|    words[7] ^= v[7] ^ v[15];
  117|  48.5k|}
_RNvNtCs3GxLuyYB6nc_12blake2b_simd8portable1g:
   15|  4.66M|fn g(v: &mut [Word; 16], a: usize, b: usize, c: usize, d: usize, x: Word, y: Word) {
   16|  4.66M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(x);
   17|  4.66M|    v[d] = (v[d] ^ v[a]).rotate_right(32);
   18|  4.66M|    v[c] = v[c].wrapping_add(v[d]);
   19|  4.66M|    v[b] = (v[b] ^ v[c]).rotate_right(24);
   20|  4.66M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(y);
   21|  4.66M|    v[d] = (v[d] ^ v[a]).rotate_right(16);
   22|  4.66M|    v[c] = v[c].wrapping_add(v[d]);
   23|  4.66M|    v[b] = (v[b] ^ v[c]).rotate_right(63);
   24|  4.66M|}

_RINvMs4_Cscj7uxzhoiUC_12block_bufferINtB6_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE10digest_padNCNvXs3_NtCs5MIEfznZToq_4sha28core_apiNtB3l_13Sha256VarCoreNtNtCse0ropInob7p_6digest8core_api18VariableOutputCore22finalize_variable_core0ECs3sW5qwsMDgx_6simple:
  290|   117k|    pub fn digest_pad(
  291|   117k|        &mut self,
  292|   117k|        delim: u8,
  293|   117k|        suffix: &[u8],
  294|   117k|        mut compress: impl FnMut(&Block<BlockSize>),
  295|   117k|    ) {
  296|   117k|        if suffix.len() > BlockSize::USIZE {
  297|      0|            panic!("suffix is too long");
  298|   117k|        }
  299|   117k|        let pos = self.get_pos();
  300|   117k|        self.buffer[pos] = delim;
  301|  6.44M|        for b in &mut self.buffer[pos + 1..] {
  302|  6.44M|            *b = 0;
  303|  6.44M|        }
  304|       |
  305|   117k|        let n = self.size() - suffix.len();
  306|   117k|        if self.size() - pos - 1 < suffix.len() {
  307|      0|            compress(&self.buffer);
  308|      0|            let mut block = Block::<BlockSize>::default();
  309|      0|            block[n..].copy_from_slice(suffix);
  310|      0|            compress(&block);
  311|   117k|        } else {
  312|   117k|            self.buffer[n..].copy_from_slice(suffix);
  313|   117k|            compress(&self.buffer);
  314|   117k|        }
  315|   117k|        self.set_pos_unchecked(0)
  316|   117k|    }
_RNvMs3_Cscj7uxzhoiUC_12block_bufferINtB5_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE17set_pos_uncheckedCs3sW5qwsMDgx_6simple:
  237|   117k|    fn set_pos_unchecked(&mut self, pos: usize) {
  238|   117k|        debug_assert!(Kind::invariant(pos, BlockSize::USIZE));
  239|   117k|        self.pos = pos as u8;
  240|   117k|    }
_RNvXs1_Cscj7uxzhoiUC_12block_bufferINtB5_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerENtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   72|   117k|    fn default() -> Self {
   73|   117k|        if BlockSize::USIZE == 0 {
   74|      0|            panic!("Block size can not be equal to zero");
   75|   117k|        }
   76|   117k|        Self {
   77|   117k|            buffer: Default::default(),
   78|   117k|            pos: 0,
   79|   117k|            _pd: PhantomData,
   80|   117k|        }
   81|   117k|    }
_RNvMs3_Cscj7uxzhoiUC_12block_bufferINtB5_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE7get_posCs3sW5qwsMDgx_6simple:
  195|   234k|    pub fn get_pos(&self) -> usize {
  196|   234k|        let pos = self.pos as usize;
  197|   234k|        if !Kind::invariant(pos, BlockSize::USIZE) {
  198|      0|            debug_assert!(false);
  199|       |            // SAFETY: `pos` never breaks the invariant
  200|       |            unsafe {
  201|      0|                core::hint::unreachable_unchecked();
  202|       |            }
  203|   234k|        }
  204|   234k|        pos
  205|   234k|    }
_RNvMs3_Cscj7uxzhoiUC_12block_bufferINtB5_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE4sizeCs3sW5qwsMDgx_6simple:
  226|   234k|    pub fn size(&self) -> usize {
  227|   234k|        BlockSize::USIZE
  228|   234k|    }
_RINvMs4_Cscj7uxzhoiUC_12block_bufferINtB6_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE16len64_padding_beNCNvXs3_NtCs5MIEfznZToq_4sha28core_apiNtB3r_13Sha256VarCoreNtNtCse0ropInob7p_6digest8core_api18VariableOutputCore22finalize_variable_core0ECs3sW5qwsMDgx_6simple:
  321|   117k|    pub fn len64_padding_be(&mut self, data_len: u64, compress: impl FnMut(&Block<BlockSize>)) {
  322|   117k|        self.digest_pad(0x80, &data_len.to_be_bytes(), compress);
  323|   117k|    }
_RNvMs3_Cscj7uxzhoiUC_12block_bufferINtB5_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE4sizeCsjFyKPEBWBwj_13fvm_ipld_hamt:
  226|   117k|    pub fn size(&self) -> usize {
  227|   117k|        BlockSize::USIZE
  228|   117k|    }
_RINvMs3_Cscj7uxzhoiUC_12block_bufferINtB6_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBS_IBS_IBS_IBS_IBS_IBS_NtBU_5UTermNtNtBW_3bit2B1ENtB23_2B0EB2g_EB2g_EB2g_EB2g_EB2g_ENtB6_5EagerE13digest_blocksNCNvXs5_NtNtCse0ropInob7p_6digest8core_api7wrapperINtB3o_11CoreWrapperINtNtB3q_11ct_variable21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreB1s_NtB5b_9OidSha256EENtB3s_6Update6update0ECsjFyKPEBWBwj_13fvm_ipld_hamt:
  138|   117k|    pub fn digest_blocks(
  139|   117k|        &mut self,
  140|   117k|        mut input: &[u8],
  141|   117k|        mut compress: impl FnMut(&[Block<BlockSize>]),
  142|   117k|    ) {
  143|   117k|        let pos = self.get_pos();
  144|   117k|        // using `self.remaining()` for some reason
  145|   117k|        // prevents panic elimination
  146|   117k|        let rem = self.size() - pos;
  147|   117k|        let n = input.len();
  148|   117k|        // Note that checking condition `pos + n < BlockSize` is
  149|   117k|        // equivalent to checking `n < rem`, where `rem` is equal
  150|   117k|        // to `BlockSize - pos`. Using the latter allows us to work
  151|   117k|        // around compiler accounting for possible overflow of
  152|   117k|        // `pos + n` which results in it inserting unreachable
  153|   117k|        // panic branches. Using `unreachable_unchecked` in `get_pos`
  154|   117k|        // we convince compiler that `BlockSize - pos` never underflows.
  155|   117k|        if Kind::invariant(n, rem) {
  156|       |            // double slicing allows to remove panic branches
  157|   117k|            self.buffer[pos..][..n].copy_from_slice(input);
  158|   117k|            self.set_pos_unchecked(pos + n);
  159|   117k|            return;
  160|      0|        }
  161|      0|        if pos != 0 {
  162|      0|            let (left, right) = input.split_at(rem);
  163|      0|            input = right;
  164|      0|            self.buffer[pos..].copy_from_slice(left);
  165|      0|            compress(slice::from_ref(&self.buffer));
  166|      0|        }
  167|       |
  168|      0|        let (blocks, leftover) = Kind::split_blocks(input);
  169|      0|        if !blocks.is_empty() {
  170|      0|            compress(blocks);
  171|      0|        }
  172|       |
  173|      0|        let n = leftover.len();
  174|      0|        self.buffer[..n].copy_from_slice(leftover);
  175|      0|        self.set_pos_unchecked(n);
  176|   117k|    }
_RNvMs3_Cscj7uxzhoiUC_12block_bufferINtB5_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE7get_posCsjFyKPEBWBwj_13fvm_ipld_hamt:
  195|   117k|    pub fn get_pos(&self) -> usize {
  196|   117k|        let pos = self.pos as usize;
  197|   117k|        if !Kind::invariant(pos, BlockSize::USIZE) {
  198|      0|            debug_assert!(false);
  199|       |            // SAFETY: `pos` never breaks the invariant
  200|       |            unsafe {
  201|      0|                core::hint::unreachable_unchecked();
  202|       |            }
  203|   117k|        }
  204|   117k|        pos
  205|   117k|    }
_RNvMs3_Cscj7uxzhoiUC_12block_bufferINtB5_11BlockBufferINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBR_IBR_IBR_IBR_IBR_IBR_NtBT_5UTermNtNtBV_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EB2f_ENtB5_5EagerE17set_pos_uncheckedCsjFyKPEBWBwj_13fvm_ipld_hamt:
  237|   117k|    fn set_pos_unchecked(&mut self, pos: usize) {
  238|   117k|        debug_assert!(Kind::invariant(pos, BlockSize::USIZE));
  239|   117k|        self.pos = pos as u8;
  240|   117k|    }

_RNvXNtCscj7uxzhoiUC_12block_buffer6sealedNtB4_5EagerNtB2_6Sealed9invariant:
   16|   703k|    fn invariant(pos: usize, block_size: usize) -> bool {
   17|   703k|        pos < block_size
   18|   703k|    }

_RNvXs0_Cs8lT1tNhmm5E_9byteorderNtB5_9BigEndianNtB5_9ByteOrder9write_u64Cs3sW5qwsMDgx_6simple:
 1988|  93.0k|    fn write_u64(buf: &mut [u8], n: u64) {
 1989|  93.0k|        buf[..8].copy_from_slice(&n.to_be_bytes());
 1990|  93.0k|    }

_RNvMs0_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB5_7TypeNummE3newCs3sW5qwsMDgx_6simple:
   52|   470k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   470k|        TypeNum { type_, value }
   54|   470k|    }
_RINvXs1_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
   59|   460k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|   460k|        match self.value {
   61|   460k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  35.7k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|   460k|        Ok(())
   65|   460k|    }
_RINvXsd_NtNtCscHtwMyHsHJz_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
  269|   402k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  270|   402k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|   402k|        Ok(())
  272|   402k|    }
_RINvXs4_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
   98|   859k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|   859k|        match u32::try_from(self.value) {
  100|   470k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|   388k|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|   388k|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|   859k|        Ok(())
  107|   859k|    }
_RINvXsu_NtNtCscHtwMyHsHJz_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
  159|   399k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|   399k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|   399k|                }
_RNvMs0_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB5_7TypeNumyE3newCs3sW5qwsMDgx_6simple:
   52|   859k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   859k|        TypeNum { type_, value }
   54|   859k|    }
_RNvMs0_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB5_7TypeNumtE3newCs3sW5qwsMDgx_6simple:
   52|   464k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   464k|        TypeNum { type_, value }
   54|   464k|    }
_RINvXs3_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
   84|   470k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|   470k|        match u16::try_from(self.value) {
   86|   464k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|  6.27k|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|  6.27k|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|   470k|        Ok(())
   93|   470k|    }
_RINvXsi_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
  316|  17.1k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  317|  17.1k|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|  17.1k|        self.1.encode(writer)
  319|  17.1k|    }
_RINvXs7_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
  208|  40.4k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  209|  40.4k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  40.4k|        writer.push(self.0)?;
  211|  40.4k|        Ok(())
  212|  40.4k|    }
_RNvMs0_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB5_7TypeNumhE3newCs3sW5qwsMDgx_6simple:
   52|   460k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   460k|        TypeNum { type_, value }
   54|   460k|    }
_RINvXs2_NtNtCscHtwMyHsHJz_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs3sW5qwsMDgx_6simple:
   70|   464k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|   464k|        match u8::try_from(self.value) {
   72|   460k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|  3.66k|                let [x0, x1] = self.value.to_be_bytes();
   75|  3.66k|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|   464k|        Ok(())
   79|   464k|    }

_RNvXs_NtNtCscHtwMyHsHJz_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCs3sW5qwsMDgx_6simple:
   39|   899k|    fn push(&mut self, input: &[u8]) -> Result<(), Self::Error> {
   40|   899k|        self.0.try_reserve(input.len())?;
   41|   899k|        self.0.extend_from_slice(input);
   42|   899k|        Ok(())
   43|   899k|    }
_RNvMNtNtCscHtwMyHsHJz_7cbor4ii4core5utilsNtB2_9BufWriter3newCs3sW5qwsMDgx_6simple:
   14|  23.2k|    pub fn new(buf: Vec<u8>) -> Self {
   15|  23.2k|       BufWriter(buf)
   16|  23.2k|    }
_RNvMNtNtCscHtwMyHsHJz_7cbor4ii4core5utilsNtB2_9BufWriter10into_innerCs3sW5qwsMDgx_6simple:
   24|  23.2k|    pub fn into_inner(self) -> Vec<u8> {
   25|  23.2k|        self.0
   26|  23.2k|    }

_RINvMNtCsdmSfIHNrfCJ_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsh5ATE4OSafo_5alloc3vec3VechEECs3sW5qwsMDgx_6simple:
  162|  17.1k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|  17.1k|        let mut version_buf = varint_encode::u64_buffer();
  164|  17.1k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|  17.1k|
  166|  17.1k|        let mut codec_buf = varint_encode::u64_buffer();
  167|  17.1k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|  17.1k|
  169|  17.1k|        let mut written = version.len() + codec.len();
  170|  17.1k|
  171|  17.1k|        w.write_all(version)?;
  172|  17.1k|        w.write_all(codec)?;
  173|  17.1k|        written += self.hash.write(&mut w)?;
  174|       |
  175|  17.1k|        Ok(written)
  176|  17.1k|    }
_RNvMNtCsdmSfIHNrfCJ_3cid3cidINtB2_3CidKj40_E8to_bytesCs3sW5qwsMDgx_6simple:
  205|  17.1k|    pub fn to_bytes(&self) -> Vec<u8> {
  206|  17.1k|        let mut bytes = Vec::new();
  207|  17.1k|        let written = self.write_bytes(&mut bytes).unwrap();
  208|  17.1k|        debug_assert_eq!(written, bytes.len());
  209|  17.1k|        bytes
  210|  17.1k|    }
_RNvMNtCsdmSfIHNrfCJ_3cid3cidINtB2_3CidKj40_E6new_v1Cs3sW5qwsMDgx_6simple:
   90|  23.2k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|  23.2k|        Self {
   92|  23.2k|            version: Version::V1,
   93|  23.2k|            codec,
   94|  23.2k|            hash,
   95|  23.2k|        }
   96|  23.2k|    }
_RINvMNtCsdmSfIHNrfCJ_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsh5ATE4OSafo_5alloc3vec3VechEECs3sW5qwsMDgx_6simple:
  179|  17.1k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|  17.1k|        let written = match self.version {
  181|      0|            Version::V0 => self.hash.write(w)?,
  182|  17.1k|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|  17.1k|        Ok(written)
  185|  17.1k|    }
_RNvXse_NtCsdmSfIHNrfCJ_3cid3cidINtB5_3CidKj40_ENtNtCscES2q764p84_4core3cmp9PartialEq2eqCs3PUiQ7m774R_19fvm_ipld_blockstore:
   64|  6.14k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RINvXsk_NtCsdmSfIHNrfCJ_3cid3cidINtB6_3CidKj40_ENtNtCscES2q764p84_4core4hash4Hash4hashNtNtNtCsdFILx7bQ1w5_3std4hash6random13DefaultHasherECs3PUiQ7m774R_19fvm_ipld_blockstore:
   64|  45.2k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXNtCsdmSfIHNrfCJ_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsziUsaXjycw_5serde3ser9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
   29|  17.1k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|  17.1k|    where
   31|  17.1k|        S: ser::Serializer,
   32|  17.1k|    {
   33|  17.1k|        let value = ByteBuf::from(self.to_bytes());
   34|  17.1k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|  17.1k|    }

_RNvXs0_NtCsdmSfIHNrfCJ_3cid7versionyINtNtCscES2q764p84_4core7convert4FromNtB5_7VersionE4fromCs3sW5qwsMDgx_6simple:
   44|  17.1k|    fn from(ver: Version) -> u64 {
   45|  17.1k|        match ver {
   46|      0|            Version::V0 => 0,
   47|  17.1k|            Version::V1 => 1,
   48|       |        }
   49|  17.1k|    }
_RINvXsa_NtCsdmSfIHNrfCJ_3cid7versionNtB6_7VersionNtNtCscES2q764p84_4core4hash4Hash4hashNtNtNtCsdFILx7bQ1w5_3std4hash6random13DefaultHasherECs3PUiQ7m774R_19fvm_ipld_blockstore:
    6|  45.2k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs2_NtCsdmSfIHNrfCJ_3cid7versionNtB5_7VersionNtNtCscES2q764p84_4core3cmp9PartialEq2eqCs3PUiQ7m774R_19fvm_ipld_blockstore:
    6|  6.14k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]

_RNvNtNtNtCs5MIEfznZToq_4sha26sha2563x8611shani_cpuid8init_getB7_:
  183|   117k|            pub fn init_get() -> (InitToken, bool) {
  184|   117k|                let res = $crate::__unless_target_features! {
  185|       |                    $($tf),+ => {
  186|       |                        // Relaxed ordering is fine, as we only have a single atomic variable.
  187|   117k|                        let val = STORAGE.load(Relaxed);
  188|   117k|
  189|   117k|                        if val == UNINIT {
  190|      1|                            let res = $crate::__detect_target_features!($($tf),+);
  191|      1|                            STORAGE.store(res as u8, Relaxed);
  192|      1|                            res
  193|       |                        } else {
  194|   117k|                            val == 1
  195|       |                        }
  196|       |                    }
  197|       |                };
  198|       |
  199|   117k|                (InitToken(()), res)
  200|   117k|            }
_RNvNtNtNtCs5MIEfznZToq_4sha26sha2563x8611shani_cpuid3getB7_:
  212|   117k|            pub fn get() -> bool {
  213|   117k|                init_get().1
  214|   117k|            }

_RNvNvNtNtNtCs5MIEfznZToq_4sha26sha2563x8611shani_cpuid8init_get11cpuid_count:
   52|      1|        unsafe fn cpuid_count(leaf: u32, sub_leaf: u32) -> CpuidResult {
   53|      1|            __cpuid_count(leaf, sub_leaf)
   54|      1|        }
_RNvNvNtNtNtCs5MIEfznZToq_4sha26sha2563x8611shani_cpuid8init_get5cpuid:
   47|      1|        unsafe fn cpuid(leaf: u32) -> CpuidResult {
   48|      1|            __cpuid(leaf)
   49|      1|        }

_RNvXs3_NtNtCse0ropInob7p_6digest8core_api11ct_variableINtB5_21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB25_IB25_IB25_IB25_IB25_NtB27_5UTermNtNtB29_3bit2B1ENtB3i_2B0EB3w_EB3w_EB3w_EB3w_ENtB1n_9OidSha256ENtB7_15FixedOutputCore19finalize_fixed_coreCs3sW5qwsMDgx_6simple:
  114|   117k|    fn finalize_fixed_core(
  115|   117k|        &mut self,
  116|   117k|        buffer: &mut Buffer<Self>,
  117|   117k|        out: &mut GenericArray<u8, Self::OutputSize>,
  118|   117k|    ) {
  119|   117k|        let mut full_res = Default::default();
  120|   117k|        self.inner.finalize_variable_core(buffer, &mut full_res);
  121|   117k|        let n = out.len();
  122|   117k|        let m = full_res.len() - n;
  123|   117k|        match T::TRUNC_SIDE {
  124|   117k|            TruncSide::Left => out.copy_from_slice(&full_res[..n]),
  125|      0|            TruncSide::Right => out.copy_from_slice(&full_res[m..]),
  126|       |        }
  127|   117k|    }
_RNvXs4_NtNtCse0ropInob7p_6digest8core_api11ct_variableINtB5_21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB25_IB25_IB25_IB25_IB25_NtB27_5UTermNtNtB29_3bit2B1ENtB3i_2B0EB3w_EB3w_EB3w_EB3w_ENtB1n_9OidSha256ENtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
  139|   117k|    fn default() -> Self {
  140|   117k|        Self {
  141|   117k|            inner: T::new(OutSize::USIZE).unwrap(),
  142|   117k|            _out: PhantomData,
  143|   117k|        }
  144|   117k|    }

_RNvXs7_NtNtCse0ropInob7p_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB2y_IB2y_IB2y_IB2y_IB2y_NtB2A_5UTermNtNtB2C_3bit2B1ENtB3L_2B0EB3Z_EB3Z_EB3Z_EB3Z_ENtB1Q_9OidSha256EENtB9_11FixedOutput13finalize_intoCs3sW5qwsMDgx_6simple:
  170|   117k|    fn finalize_into(mut self, out: &mut Output<Self>) {
  171|   117k|        let Self { core, buffer } = &mut self;
  172|   117k|        core.finalize_fixed_core(buffer, out);
  173|   117k|    }
_RNvXsf_NtNtCse0ropInob7p_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB2y_IB2y_IB2y_IB2y_IB2y_NtB2A_5UTermNtNtB2C_3bit2B1ENtB3L_2B0EB3Z_EB3Z_EB3Z_EB3Z_ENtB1Q_9OidSha256EENtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   23|   117k|#[derive(Clone, Default)]
_RNvXs5_NtNtCse0ropInob7p_6digest8core_api7wrapperINtB5_11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB2y_IB2y_IB2y_IB2y_IB2y_NtB2A_5UTermNtNtB2C_3bit2B1ENtB3L_2B0EB3Z_EB3Z_EB3Z_EB3Z_ENtB1Q_9OidSha256EENtB9_6Update6updateCsjFyKPEBWBwj_13fvm_ipld_hamt:
  148|   117k|    fn update(&mut self, input: &[u8]) {
  149|   117k|        let Self { core, buffer } = self;
  150|   117k|        buffer.digest_blocks(input, |blocks| core.update_blocks(blocks));
  151|   117k|    }

_RNvXNtCse0ropInob7p_6digest6digestINtNtNtB4_8core_api7wrapper11CoreWrapperINtNtBB_11ct_variable21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB2E_IB2E_IB2E_IB2E_IB2E_NtB2G_5UTermNtNtB2I_3bit2B1ENtB3R_2B0EB45_EB45_EB45_EB45_ENtB1W_9OidSha256EENtB2_6Digest8finalizeCs3sW5qwsMDgx_6simple:
   85|   117k|    fn finalize(self) -> Output<Self> {
   86|   117k|        FixedOutput::finalize_fixed(self)
   87|   117k|    }
_RINvXNtCse0ropInob7p_6digest6digestINtNtNtB5_8core_api7wrapper11CoreWrapperINtNtBC_11ct_variable21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB2F_IB2F_IB2F_IB2F_IB2F_NtB2H_5UTermNtNtB2J_3bit2B1ENtB3S_2B0EB46_EB46_EB46_EB46_ENtB1X_9OidSha256EENtB3_6Digest6updateRShECsjFyKPEBWBwj_13fvm_ipld_hamt:
   74|   117k|    fn update(&mut self, data: impl AsRef<[u8]>) {
   75|   117k|        Update::update(self, data.as_ref());
   76|   117k|    }

_RNvYINtNtNtCse0ropInob7p_6digest8core_api7wrapper11CoreWrapperINtNtB7_11ct_variable21CtVariableCoreWrapperNtNtCs5MIEfznZToq_4sha28core_api13Sha256VarCoreINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB2s_IB2s_IB2s_IB2s_IB2s_NtB2u_5UTermNtNtB2w_3bit2B1ENtB3F_2B0EB3T_EB3T_EB3T_EB3T_ENtB1K_9OidSha256EENtB9_11FixedOutput14finalize_fixedCs3sW5qwsMDgx_6simple:
   99|   117k|    fn finalize_fixed(self) -> Output<Self> {
  100|   117k|        let mut out = Default::default();
  101|   117k|        self.finalize_into(&mut out);
  102|   117k|        out
  103|   117k|    }

_RINvXsb_Cs9Y2B1bqJdqq_17forest_hash_utilsyNtB6_4Hash4hashNtNtCsjFyKPEBWBwj_13fvm_ipld_hamt14hash_algorithm17Sha2HasherWrapperECs3sW5qwsMDgx_6simple:
   27|   117k|            fn hash<H: Hasher>(&self, state: &mut H) {
   28|   117k|                state.$meth(*self)
   29|   117k|            }

_RNCNvXNtCscHYHNGJZLZ5_13generic_array5implsINtB6_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB11_IB11_IB11_IB11_IB11_NtB13_5UTermNtNtB15_3bit2B1ENtB2e_2B0EB2s_EB2s_EB2s_EB2s_EENtNtCscES2q764p84_4core7default7Default7default0Cs3sW5qwsMDgx_6simple:
   17|  7.50M|        Self::generate(|_| T::default())
_RNvXNtCscHYHNGJZLZ5_13generic_array5implsINtB4_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBZ_IBZ_IBZ_IBZ_IBZ_IBZ_NtB11_5UTermNtNtB13_3bit2B1ENtB2b_2B0EB2p_EB2p_EB2p_EB2p_EB2p_EENtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   16|   117k|    fn default() -> Self {
   17|   117k|        Self::generate(|_| T::default())
   18|   117k|    }
_RNvXNtCscHYHNGJZLZ5_13generic_array5implsINtB4_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBZ_IBZ_IBZ_IBZ_IBZ_NtB11_5UTermNtNtB13_3bit2B1ENtB27_2B0EB2l_EB2l_EB2l_EB2l_EENtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   16|   234k|    fn default() -> Self {
   17|   234k|        Self::generate(|_| T::default())
   18|   234k|    }
_RNvXs3c_NtCscHYHNGJZLZ5_13generic_array5implsAhj20_INtNtCscES2q764p84_4core7convert4FromINtB8_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB1K_IB1K_IB1K_IB1K_IB1K_NtB1M_5UTermNtNtB1O_3bit2B1ENtB2X_2B0EB3b_EB3b_EB3b_EB3b_EEE4fromCs3sW5qwsMDgx_6simple:
  139|   117k|                fn from(sel: GenericArray<T, $ty>) -> [T; $n] {
  140|   117k|                    unsafe { $crate::transmute(sel) }
  141|   117k|                }
_RNCNvXNtCscHYHNGJZLZ5_13generic_array5implsINtB6_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB11_IB11_IB11_IB11_IB11_IB11_NtB13_5UTermNtNtB15_3bit2B1ENtB2j_2B0EB2x_EB2x_EB2x_EB2x_EB2x_EENtNtCscES2q764p84_4core7default7Default7default0Cs3sW5qwsMDgx_6simple:
   17|  7.50M|        Self::generate(|_| T::default())

_RINvCscHYHNGJZLZ5_13generic_array9transmuteINtB2_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIB11_IB11_IB11_IB11_IB11_NtB13_5UTermNtNtB15_3bit2B1ENtB2e_2B0EB2s_EB2s_EB2s_EB2s_EEAhj20_ECs3sW5qwsMDgx_6simple:
  653|   117k|pub unsafe fn transmute<A, B>(a: A) -> B {
  654|   117k|    let a = ManuallyDrop::new(a);
  655|   117k|    ::core::ptr::read(&*a as *const A as *const B)
  656|   117k|}
_RINvXsg_CscHYHNGJZLZ5_13generic_arrayINtB6_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBV_IBV_IBV_IBV_IBV_NtBX_5UTermNtNtBZ_3bit2B1ENtB22_2B0EB2f_EB2f_EB2f_EB2f_EEINtNtB6_8sequence15GenericSequencehE8generateNCNvXNtB6_5implsBz_NtNtCscES2q764p84_4core7default7Default7default0ECs3sW5qwsMDgx_6simple:
  380|   234k|    fn generate<F>(mut f: F) -> GenericArray<T, N>
  381|   234k|    where
  382|   234k|        F: FnMut(usize) -> T,
  383|   234k|    {
  384|   234k|        unsafe {
  385|   234k|            let mut destination = ArrayBuilder::new();
  386|   234k|
  387|   234k|            {
  388|   234k|                let (destination_iter, position) = destination.iter_position();
  389|   234k|
  390|   234k|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|       |                    ptr::write(dst, f(i));
  392|       |
  393|       |                    *position += 1;
  394|   234k|                });
  395|   234k|            }
  396|   234k|
  397|   234k|            destination.into_inner()
  398|   234k|        }
  399|   234k|    }
_RNvMs9_CscHYHNGJZLZ5_13generic_arrayINtB5_12ArrayBuilderhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EE10into_innerCs3sW5qwsMDgx_6simple:
  243|   117k|    pub unsafe fn into_inner(self) -> GenericArray<T, N> {
  244|   117k|        let array = ptr::read(&self.array);
  245|   117k|
  246|   117k|        mem::forget(self);
  247|   117k|
  248|   117k|        array.assume_init()
  249|   117k|    }
_RNCINvXsg_CscHYHNGJZLZ5_13generic_arrayINtB8_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBX_IBX_IBX_IBX_IBX_NtBZ_5UTermNtNtB11_3bit2B1ENtB24_2B0EB2i_EB2i_EB2i_EB2i_EEINtNtB8_8sequence15GenericSequencehE8generateNCNvXNtB8_5implsBB_NtNtCscES2q764p84_4core7default7Default7default0E0Cs3sW5qwsMDgx_6simple:
  390|  7.50M|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|  7.50M|                    ptr::write(dst, f(i));
  392|  7.50M|
  393|  7.50M|                    *position += 1;
  394|  7.50M|                });
_RNvMs9_CscHYHNGJZLZ5_13generic_arrayINtB5_12ArrayBuilderhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EE3newCs3sW5qwsMDgx_6simple:
  222|   117k|    pub unsafe fn new() -> ArrayBuilder<T, N> {
  223|   117k|        ArrayBuilder {
  224|   117k|            array: MaybeUninit::uninit(),
  225|   117k|            position: 0,
  226|   117k|        }
  227|   117k|    }
_RNvMs9_CscHYHNGJZLZ5_13generic_arrayINtB5_12ArrayBuilderhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EE3newCs3sW5qwsMDgx_6simple:
  222|   234k|    pub unsafe fn new() -> ArrayBuilder<T, N> {
  223|   234k|        ArrayBuilder {
  224|   234k|            array: MaybeUninit::uninit(),
  225|   234k|            position: 0,
  226|   234k|        }
  227|   234k|    }
_RNvXs8_CscHYHNGJZLZ5_13generic_arrayINtB5_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EENtNtNtCscES2q764p84_4core3ops5deref8DerefMut9deref_mutCs3sW5qwsMDgx_6simple:
  203|   469k|    fn deref_mut(&mut self) -> &mut [T] {
  204|   469k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  205|   469k|    }
_RNCINvXsg_CscHYHNGJZLZ5_13generic_arrayINtB8_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBX_IBX_IBX_IBX_IBX_IBX_NtBZ_5UTermNtNtB11_3bit2B1ENtB28_2B0EB2m_EB2m_EB2m_EB2m_EB2m_EEINtNtB8_8sequence15GenericSequencehE8generateNCNvXNtB8_5implsBB_NtNtCscES2q764p84_4core7default7Default7default0E0Cs3sW5qwsMDgx_6simple:
  390|  7.50M|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|  7.50M|                    ptr::write(dst, f(i));
  392|  7.50M|
  393|  7.50M|                    *position += 1;
  394|  7.50M|                });
_RNvXs8_CscHYHNGJZLZ5_13generic_arrayINtB5_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EENtNtNtCscES2q764p84_4core3ops5deref8DerefMut9deref_mutCs3sW5qwsMDgx_6simple:
  203|   469k|    fn deref_mut(&mut self) -> &mut [T] {
  204|   469k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  205|   469k|    }
_RNvMs9_CscHYHNGJZLZ5_13generic_arrayINtB5_12ArrayBuilderhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EE13iter_positionCs3sW5qwsMDgx_6simple:
  235|   234k|    pub unsafe fn iter_position(&mut self) -> (slice::IterMut<T>, &mut usize) {
  236|   234k|        ((&mut *self.array.as_mut_ptr()).iter_mut(), &mut self.position)
  237|   234k|    }
_RNvMs9_CscHYHNGJZLZ5_13generic_arrayINtB5_12ArrayBuilderhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EE10into_innerCs3sW5qwsMDgx_6simple:
  243|   234k|    pub unsafe fn into_inner(self) -> GenericArray<T, N> {
  244|   234k|        let array = ptr::read(&self.array);
  245|   234k|
  246|   234k|        mem::forget(self);
  247|   234k|
  248|   234k|        array.assume_init()
  249|   234k|    }
_RINvXsg_CscHYHNGJZLZ5_13generic_arrayINtB6_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBV_IBV_IBV_IBV_IBV_IBV_NtBX_5UTermNtNtBZ_3bit2B1ENtB26_2B0EB2j_EB2j_EB2j_EB2j_EB2j_EEINtNtB6_8sequence15GenericSequencehE8generateNCNvXNtB6_5implsBz_NtNtCscES2q764p84_4core7default7Default7default0ECs3sW5qwsMDgx_6simple:
  380|   117k|    fn generate<F>(mut f: F) -> GenericArray<T, N>
  381|   117k|    where
  382|   117k|        F: FnMut(usize) -> T,
  383|   117k|    {
  384|   117k|        unsafe {
  385|   117k|            let mut destination = ArrayBuilder::new();
  386|   117k|
  387|   117k|            {
  388|   117k|                let (destination_iter, position) = destination.iter_position();
  389|   117k|
  390|   117k|                destination_iter.enumerate().for_each(|(i, dst)| {
  391|       |                    ptr::write(dst, f(i));
  392|       |
  393|       |                    *position += 1;
  394|   117k|                });
  395|   117k|            }
  396|   117k|
  397|   117k|            destination.into_inner()
  398|   117k|        }
  399|   117k|    }
_RNvMs9_CscHYHNGJZLZ5_13generic_arrayINtB5_12ArrayBuilderhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EE13iter_positionCs3sW5qwsMDgx_6simple:
  235|   117k|    pub unsafe fn iter_position(&mut self) -> (slice::IterMut<T>, &mut usize) {
  236|   117k|        ((&mut *self.array.as_mut_ptr()).iter_mut(), &mut self.position)
  237|   117k|    }
_RNvXs7_CscHYHNGJZLZ5_13generic_arrayINtB5_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB21_2B0EB2e_EB2e_EB2e_EB2e_EENtNtNtCscES2q764p84_4core3ops5deref5Deref5derefCs3sW5qwsMDgx_6simple:
  193|   351k|    fn deref(&self) -> &[T] {
  194|   351k|        unsafe { slice::from_raw_parts(self as *const Self as *const T, N::USIZE) }
  195|   351k|    }
_RNvXs8_CscHYHNGJZLZ5_13generic_arrayINtB5_12GenericArrayhINtNtCs3F0ShWkvLLU_7typenum4uint4UIntIBU_IBU_IBU_IBU_IBU_IBU_NtBW_5UTermNtNtBY_3bit2B1ENtB25_2B0EB2i_EB2i_EB2i_EB2i_EB2i_EENtNtNtCscES2q764p84_4core3ops5deref8DerefMut9deref_mutCsjFyKPEBWBwj_13fvm_ipld_hamt:
  203|   117k|    fn deref_mut(&mut self) -> &mut [T] {
  204|   117k|        unsafe { slice::from_raw_parts_mut(self as *mut Self as *mut T, N::USIZE) }
  205|   117k|    }

_RNvCsleS7ewEfywb_9getrandom16getrandom_uninitCs6zO3mNVOgix_5ahash:
  344|      1|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  345|      1|    if !dest.is_empty() {
  346|      1|        imp::getrandom_inner(dest)?;
  347|      0|    }
  348|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  349|       |    // since it returned `Ok`.
  350|      1|    Ok(unsafe { slice_assume_init_mut(dest) })
  351|      1|}
_RNvCsleS7ewEfywb_9getrandom9getrandomCs6zO3mNVOgix_5ahash:
  314|      1|pub fn getrandom(dest: &mut [u8]) -> Result<(), Error> {
  315|      1|    // SAFETY: The `&mut MaybeUninit<_>` reference doesn't escape, and
  316|      1|    // `getrandom_uninit` guarantees it will never de-initialize any part of
  317|      1|    // `dest`.
  318|      1|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  319|      1|    Ok(())
  320|      1|}

_RNvNtCsleS7ewEfywb_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNCNvNtCsleS7ewEfywb_9getrandom3imp15getrandom_inner0B5_:
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
_RNvNtCsleS7ewEfywb_9getrandom3imp9getrandom:
   42|      2|unsafe fn getrandom(
   43|      2|    buf: *mut libc::c_void,
   44|      2|    buflen: libc::size_t,
   45|      2|    flags: libc::c_uint,
   46|      2|) -> libc::ssize_t {
   47|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|      2|}
_RNvNtCsleS7ewEfywb_9getrandom3imp15getrandom_inner:
   17|      1|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|      1|    // getrandom(2) was introduced in Linux 3.17
   19|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|      1|}

_RINvNtCsleS7ewEfywb_9getrandom4util21slice_assume_init_muthECs6zO3mNVOgix_5ahash:
   74|      1|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|      1|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|      1|}
_RINvNtCsleS7ewEfywb_9getrandom4util19slice_as_uninit_muthECs6zO3mNVOgix_5ahash:
   98|      1|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|      1|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|      1|}
_RINvMNtCsleS7ewEfywb_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|      1|        let mut val = self.0.load(Relaxed);
   49|      1|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|      1|        }
   53|      1|        val
   54|      1|    }
_RINvMs_NtCsleS7ewEfywb_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
   67|      1|    }
_RNCINvMs_NtCsleS7ewEfywb_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCsleS7ewEfywb_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|      1|pub fn sys_fill_exact(
   68|      1|    mut buf: &mut [MaybeUninit<u8>],
   69|      1|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|      1|) -> Result<(), Error> {
   71|      2|    while !buf.is_empty() {
   72|      1|        let res = sys_fill(buf);
   73|      1|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|      1|        } else {
   80|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   81|      1|            // should be an infinite stream of random bytes.
   82|      1|            let len = min(res as usize, buf.len());
   83|      1|            buf = &mut buf[len..];
   84|      1|        }
   85|       |    }
   86|      1|    Ok(())
   87|      1|}

_RNvMs_Cs2AW2MF65Ca5_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs3sW5qwsMDgx_6simple:
   40|  1.36k|    pub fn to_libfuzzer_code(self) -> i32 {
   41|  1.36k|        match self {
   42|  1.36k|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|  1.36k|    }
rust_fuzzer_test_input:
  259|  1.36k|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|  1.36k|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|  1.36k|
  262|  1.36k|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|  1.36k|                // implementation. This helps the fuzzer avoid exploring all the
  264|  1.36k|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|  1.36k|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|  1.36k|                // get to longer inputs that actually lead to interesting executions
  267|  1.36k|                // quicker.
  268|  1.36k|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      0|                    return -1;
  270|  1.36k|                }
  271|  1.36k|
  272|  1.36k|                let mut u = Unstructured::new(bytes);
  273|  1.36k|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|  1.36k|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|  1.36k|                }
  291|       |
  292|  1.36k|                let data = match data {
  293|  1.36k|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|  1.36k|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|  1.36k|                result.to_libfuzzer_code()
  299|  1.36k|            }
_RNvXCs2AW2MF65Ca5_13libfuzzer_sysNtB2_6CorpusINtNtCscES2q764p84_4core7convert4FromuE4fromCs3sW5qwsMDgx_6simple:
   30|  1.36k|    fn from(_: ()) -> Self {
   31|  1.36k|        Self::Keep
   32|  1.36k|    }
_RNvNvCs3sW5qwsMDgx_6simple1__19___libfuzzer_sys_run:
  303|  1.36k|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|  1.36k|                $body
  305|  1.36k|            }
LLVMFuzzerTestOneInput:
   58|  1.36k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|  1.36k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|  1.36k|    });
   63|  1.36k|
   64|  1.36k|    match test_input {
   65|  1.36k|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|  1.36k|}
_RNCNvCs2AW2MF65Ca5_13libfuzzer_sys15test_input_wrap0B3_:
   59|  1.36k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|  1.36k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|  1.36k|        rust_fuzzer_test_input(data_slice)
   62|  1.36k|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXNtNtCsjCUaRkTHsrM_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCscES2q764p84_4core7default7Default7defaultB6_:
   35|  23.2k|            fn default() -> Self {
   36|  23.2k|                let mut params = $module::Params::new();
   37|  23.2k|                params.hash_length(S);
   38|  23.2k|                Self {
   39|  23.2k|                    state: params.to_state(),
   40|  23.2k|                    digest: [0; S],
   41|  23.2k|                }
   42|  23.2k|            }
_RNvXs_NtNtCsjCUaRkTHsrM_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|  23.2k|            fn update(&mut self, input: &[u8]) {
   47|  23.2k|                self.state.update(input);
   48|  23.2k|            }
_RNvXs_NtNtCsjCUaRkTHsrM_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|  23.2k|            fn finalize(&mut self) -> &[u8] {
   51|  23.2k|                let digest = self.state.finalize();
   52|  23.2k|                let digest_bytes = digest.as_bytes();
   53|  23.2k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|  23.2k|                digest_out.copy_from_slice(digest_bytes);
   55|  23.2k|                digest_out
   56|  23.2k|            }

_RNvMs_NtCsjCUaRkTHsrM_9multihash9multihashINtB4_9MultihashKj40_E4codeCs3sW5qwsMDgx_6simple:
  120|  17.1k|    pub const fn code(&self) -> u64 {
  121|  17.1k|        self.code
  122|  17.1k|    }
_RINvNtCsjCUaRkTHsrM_9multihash9multihash15write_multihashQQINtNtCsh5ATE4OSafo_5alloc3vec3VechEECs3sW5qwsMDgx_6simple:
  310|  17.1k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|  17.1k|where
  312|  17.1k|    W: io::Write,
  313|  17.1k|{
  314|  17.1k|    let mut code_buf = varint_encode::u64_buffer();
  315|  17.1k|    let code = varint_encode::u64(code, &mut code_buf);
  316|  17.1k|
  317|  17.1k|    let mut size_buf = varint_encode::u8_buffer();
  318|  17.1k|    let size = varint_encode::u8(size, &mut size_buf);
  319|  17.1k|
  320|  17.1k|    let written = code.len() + size.len() + digest.len();
  321|  17.1k|
  322|  17.1k|    w.write_all(code)?;
  323|  17.1k|    w.write_all(size)?;
  324|  17.1k|    w.write_all(digest)?;
  325|       |
  326|  17.1k|    Ok(written)
  327|  17.1k|}
_RNvMs_NtCsjCUaRkTHsrM_9multihash9multihashINtB4_9MultihashKj40_E6digestCs3sW5qwsMDgx_6simple:
  130|  17.1k|    pub fn digest(&self) -> &[u8] {
  131|  17.1k|        &self.digest[..self.size as usize]
  132|  17.1k|    }
_RINvMs_NtCsjCUaRkTHsrM_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsh5ATE4OSafo_5alloc3vec3VechEECs3sW5qwsMDgx_6simple:
  163|  17.1k|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|  17.1k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|  17.1k|    }
_RNvMs_NtCsjCUaRkTHsrM_9multihash9multihashINtB4_9MultihashKj40_E4sizeCs3sW5qwsMDgx_6simple:
  125|  17.1k|    pub const fn size(&self) -> u8 {
  126|  17.1k|        self.size
  127|  17.1k|    }
_RNvXs2_NtCsjCUaRkTHsrM_9multihash9multihashINtB5_9MultihashKj40_ENtNtCscES2q764p84_4core3cmp9PartialEq2eqCs3PUiQ7m774R_19fvm_ipld_blockstore:
  267|  6.14k|    fn eq(&self, other: &Multihash<B>) -> bool {
  268|  6.14k|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  269|  6.14k|        self.code == other.code && self.digest() == other.digest()
  270|  6.14k|    }
_RINvXs0_NtCsjCUaRkTHsrM_9multihash9multihashINtB6_9MultihashKj40_ENtNtCscES2q764p84_4core4hash4Hash4hashNtNtNtCsdFILx7bQ1w5_3std4hash6random13DefaultHasherECs3PUiQ7m774R_19fvm_ipld_blockstore:
  253|  45.2k|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  254|  45.2k|        self.code.hash(state);
  255|  45.2k|        self.digest().hash(state);
  256|  45.2k|    }
_RNvMs_NtCsjCUaRkTHsrM_9multihash9multihashINtB4_9MultihashKj40_E6digestCs3PUiQ7m774R_19fvm_ipld_blockstore:
  130|  57.5k|    pub fn digest(&self) -> &[u8] {
  131|  57.5k|        &self.digest[..self.size as usize]
  132|  57.5k|    }
_RNvMs_NtCsjCUaRkTHsrM_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|  23.2k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|  23.2k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|  23.2k|        }
  105|  23.2k|        let size = input_digest.len();
  106|  23.2k|        let mut digest = [0; S];
  107|  23.2k|        let mut i = 0;
  108|   767k|        while i < size {
  109|   744k|            digest[i] = input_digest[i];
  110|   744k|            i += 1;
  111|   744k|        }
  112|  23.2k|        Ok(Self {
  113|  23.2k|            code,
  114|  23.2k|            size: size as u8,
  115|  23.2k|            digest,
  116|  23.2k|        })
  117|  23.2k|    }

_RNvXs3_NtCsjCUaRkTHsrM_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|  23.2k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvMs2_NtCsiStPzEvNaHP_9once_cell3impINtB5_8OnceCellNtNtCsh5ATE4OSafo_5alloc6string6StringE14is_initializedCs3sW5qwsMDgx_6simple:
   49|  1.36k|    pub(crate) fn is_initialized(&self) -> bool {
   50|  1.36k|        // An `Acquire` load is enough because that makes all the initialization
   51|  1.36k|        // operations visible to us, and, this being a fast path, weaker
   52|  1.36k|        // ordering helps with performance. This `Acquire` synchronizes with
   53|  1.36k|        // `SeqCst` operations on the slow path.
   54|  1.36k|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|  1.36k|    }

_RNvXs5_NtCsiStPzEvNaHP_9once_cell6unsyncINtB5_8OnceCellINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEEINtNtCscES2q764p84_4core7convert4FromBR_E4fromCs3sW5qwsMDgx_6simple:
  465|  8.19k|        fn from(value: T) -> Self {
  466|  8.19k|            OnceCell::with_value(value)
  467|  8.19k|        }
_RNvMs6_NtCsiStPzEvNaHP_9once_cell6unsyncINtB5_8OnceCellINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE7get_mutCs3sW5qwsMDgx_6simple:
  510|  11.4k|        pub fn get_mut(&mut self) -> Option<&mut T> {
  511|  11.4k|            // Safe because we have unique access
  512|  11.4k|            unsafe { &mut *self.inner.get() }.as_mut()
  513|  11.4k|        }
_RINvMs6_NtCsiStPzEvNaHP_9once_cell6unsyncINtB6_8OnceCellINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_8rm_valueyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs3sW5qwsMDgx_6simple:
  624|  6.71k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  6.71k|        where
  626|  6.71k|            F: FnOnce() -> Result<T, E>,
  627|  6.71k|        {
  628|  6.71k|            if let Some(val) = self.get() {
  629|  6.71k|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  6.71k|        }
_RINvMs6_NtCsiStPzEvNaHP_9once_cell6unsyncINtB6_8OnceCellINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_9get_valueyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs3sW5qwsMDgx_6simple:
  624|  2.01k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  2.01k|        where
  626|  2.01k|            F: FnOnce() -> Result<T, E>,
  627|  2.01k|        {
  628|  2.01k|            if let Some(val) = self.get() {
  629|  2.01k|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  2.01k|        }
_RNvMs4_NtCsiStPzEvNaHP_9once_cell4syncINtB5_8OnceCellNtNtCsh5ATE4OSafo_5alloc6string6StringE3getCs3sW5qwsMDgx_6simple:
  965|  1.36k|        pub fn get(&self) -> Option<&T> {
  966|  1.36k|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|  1.36k|                None
  971|       |            }
  972|  1.36k|        }
_RNvMs6_NtCsiStPzEvNaHP_9once_cell6unsyncINtB5_8OnceCellINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE3getCs3sW5qwsMDgx_6simple:
  485|  13.4k|        pub fn get(&self) -> Option<&T> {
  486|  13.4k|            // Safe due to `inner`'s invariant of being written to at most once.
  487|  13.4k|            // Had multiple writes to `inner` been allowed, a reference to the
  488|  13.4k|            // value we return now would become dangling by a write of a
  489|  13.4k|            // different value later.
  490|  13.4k|            unsafe { &*self.inner.get() }.as_ref()
  491|  13.4k|        }
_RNvMs6_NtCsiStPzEvNaHP_9once_cell6unsyncINtB5_8OnceCellINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1v_14hash_algorithm6Sha256EEE10with_valueCs3sW5qwsMDgx_6simple:
  477|  8.19k|        pub const fn with_value(value: T) -> OnceCell<T> {
  478|  8.19k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  479|  8.19k|        }
_RINvMs6_NtCsiStPzEvNaHP_9once_cell6unsyncINtB6_8OnceCellINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1w_14hash_algorithm6Sha256EEE15get_or_try_initNCINvMs2_B1u_B1r_12modify_valueRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECs3sW5qwsMDgx_6simple:
  624|  4.76k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  4.76k|        where
  626|  4.76k|            F: FnOnce() -> Result<T, E>,
  627|  4.76k|        {
  628|  4.76k|            if let Some(val) = self.get() {
  629|  4.76k|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  4.76k|        }

_RINvMs1_NtNtCsiStPzEvNaHP_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsh5ATE4OSafo_5alloc5boxed3BoxDNtNtCs6zO3mNVOgix_5ahash12random_state12RandomSourceNtNtCscES2q764p84_4core6marker4SendNtB2s_4SyncEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECs3sW5qwsMDgx_6simple:
  385|  1.36k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|  1.36k|        where
  387|  1.36k|            F: FnOnce() -> Result<Box<T>, E>,
  388|  1.36k|        {
  389|  1.36k|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|  1.36k|
  391|  1.36k|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|  1.36k|            };
  405|  1.36k|            Ok(unsafe { &*ptr })
  406|  1.36k|        }
_RNCINvMs1_NtNtCsiStPzEvNaHP_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCsh5ATE4OSafo_5alloc5boxed3BoxDNtNtCs6zO3mNVOgix_5ahash12random_state12RandomSourceNtNtCscES2q764p84_4core6marker4SendNtB2u_4SyncEL_EE11get_or_initNCNvMs1_B1E_NtB1E_11RandomState7get_src0E0Cs3sW5qwsMDgx_6simple:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCsiStPzEvNaHP_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCsh5ATE4OSafo_5alloc5boxed3BoxDNtNtCs6zO3mNVOgix_5ahash12random_state12RandomSourceNtNtCscES2q764p84_4core6marker4SendNtB2s_4SyncEL_EE11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0ECs3sW5qwsMDgx_6simple:
  367|  1.36k|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|  1.36k|        where
  369|  1.36k|            F: FnOnce() -> Box<T>,
  370|  1.36k|        {
  371|  1.36k|            enum Void {}
  372|  1.36k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|  1.36k|                Ok(val) => val,
  374|  1.36k|                Err(void) => match void {},
  375|  1.36k|            }
  376|  1.36k|        }
_RINvMs1_NtNtCsiStPzEvNaHP_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs6zO3mNVOgix_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  367|  1.36k|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|  1.36k|        where
  369|  1.36k|            F: FnOnce() -> Box<T>,
  370|  1.36k|        {
  371|  1.36k|            enum Void {}
  372|  1.36k|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|  1.36k|                Ok(val) => val,
  374|  1.36k|                Err(void) => match void {},
  375|  1.36k|            }
  376|  1.36k|        }
_RINvMs1_NtNtCsiStPzEvNaHP_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCs6zO3mNVOgix_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  385|  1.36k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|  1.36k|        where
  387|  1.36k|            F: FnOnce() -> Result<Box<T>, E>,
  388|  1.36k|        {
  389|  1.36k|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|  1.36k|
  391|  1.36k|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|  1.36k|            };
  405|  1.36k|            Ok(unsafe { &*ptr })
  406|  1.36k|        }
_RNCINvMs1_NtNtCsiStPzEvNaHP_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCs6zO3mNVOgix_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {

_RINvXs1I_NtNtCsziUsaXjycw_5serde3ser5implsINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1i_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  496|  8.19k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|  8.19k|            where
  498|  8.19k|                S: Serializer,
  499|  8.19k|            {
  500|  8.19k|                (**self).serialize(serializer)
  501|  8.19k|            }
_RINvXs1p_NtNtCsziUsaXjycw_5serde3ser5implsTRNtNtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfield8BitfieldRINtNtCsh5ATE4OSafo_5alloc3vec3VecINtNtBK_7pointer7PointeryyNtNtBK_14hash_algorithm6Sha256EEENtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  391|  23.2k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  392|  23.2k|                where
  393|  23.2k|                    S: Serializer,
  394|  23.2k|                {
  395|  23.2k|                    let mut tuple = tri!(serializer.serialize_tuple($len));
  396|       |                    $(
  397|  23.2k|                        tri!(tuple.serialize_element(&self.$n));
  398|       |                    )+
  399|  23.2k|                    tuple.end()
  400|  23.2k|                }
_RINvXs1G_NtNtCsziUsaXjycw_5serde3ser5implsRNtNtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfield8BitfieldNtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  496|  23.2k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|  23.2k|            where
  498|  23.2k|                S: Serializer,
  499|  23.2k|            {
  500|  23.2k|                (**self).serialize(serializer)
  501|  23.2k|            }
_RINvXs1G_NtNtCsziUsaXjycw_5serde3ser5implsRINtNtCsh5ATE4OSafo_5alloc3vec3VecINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtB1h_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  496|  23.2k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|  23.2k|            where
  498|  23.2k|                S: Serializer,
  499|  23.2k|            {
  500|  23.2k|                (**self).serialize(serializer)
  501|  23.2k|            }
_RINvXs1m_NtNtCsziUsaXjycw_5serde3ser5implsINtNtCsh5ATE4OSafo_5alloc3vec3VecINtCsjFyKPEBWBwj_13fvm_ipld_hamt12KeyValuePairyyEENtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  197|   155k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  198|   155k|            where
  199|   155k|                S: Serializer,
  200|   155k|            {
  201|   155k|                serializer.collect_seq(self)
  202|   155k|            }
_RINvXsH_NtNtCsziUsaXjycw_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
   11|   399k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|   399k|            where
   13|   399k|                S: Serializer,
   14|   399k|            {
   15|   399k|                serializer.$method(*self $($cast)*)
   16|   399k|            }
_RINvXs1G_NtNtCsziUsaXjycw_5serde3ser5implsRINtCsjFyKPEBWBwj_13fvm_ipld_hamt12KeyValuePairyyENtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  496|   199k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|   199k|            where
  498|   199k|                S: Serializer,
  499|   199k|            {
  500|   199k|                (**self).serialize(serializer)
  501|   199k|            }
_RINvXs1G_NtNtCsziUsaXjycw_5serde3ser5implsRINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtBK_14hash_algorithm6Sha256ENtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  496|   172k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|   172k|            where
  498|   172k|                S: Serializer,
  499|   172k|            {
  500|   172k|                (**self).serialize(serializer)
  501|   172k|            }
_RINvXs1m_NtNtCsziUsaXjycw_5serde3ser5implsINtNtCsh5ATE4OSafo_5alloc3vec3VecINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtB1g_14hash_algorithm6Sha256EENtB9_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  197|  23.2k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  198|  23.2k|            where
  199|  23.2k|                S: Serializer,
  200|  23.2k|            {
  201|  23.2k|                serializer.collect_seq(self)
  202|  23.2k|            }

_RINvYQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer11collect_seqRINtNtCsh5ATE4OSafo_5alloc3vec3VecINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtB3e_14hash_algorithm6Sha256EEECs3sW5qwsMDgx_6simple:
 1271|  23.2k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  23.2k|    where
 1273|  23.2k|        I: IntoIterator,
 1274|  23.2k|        <I as IntoIterator>::Item: Serialize,
 1275|  23.2k|    {
 1276|  23.2k|        let mut iter = iter.into_iter();
 1277|  23.2k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  23.2k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  23.2k|        serializer.end()
 1280|  23.2k|    }
_RINvYQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer11collect_seqRINtNtCsh5ATE4OSafo_5alloc3vec3VecINtCsjFyKPEBWBwj_13fvm_ipld_hamt12KeyValuePairyyEEECs3sW5qwsMDgx_6simple:
 1271|   155k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|   155k|    where
 1273|   155k|        I: IntoIterator,
 1274|   155k|        <I as IntoIterator>::Item: Serialize,
 1275|   155k|    {
 1276|   155k|        let mut iter = iter.into_iter();
 1277|   155k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|   155k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|   155k|        serializer.end()
 1280|   155k|    }
_RINvNtCsziUsaXjycw_5serde3ser17iterator_len_hintINtNtNtCscES2q764p84_4core5slice4iter4IterINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtB1v_14hash_algorithm6Sha256EEECs3sW5qwsMDgx_6simple:
 1944|  23.2k|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|  23.2k|where
 1946|  23.2k|    I: Iterator,
 1947|  23.2k|{
 1948|  23.2k|    match iter.size_hint() {
 1949|  23.2k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  23.2k|}
_RNCINvYQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer11collect_seqRINtNtCsh5ATE4OSafo_5alloc3vec3VecINtCsjFyKPEBWBwj_13fvm_ipld_hamt12KeyValuePairyyEEE0Cs3sW5qwsMDgx_6simple:
 1278|   199k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCsziUsaXjycw_5serde3ser17iterator_len_hintINtNtNtCscES2q764p84_4core5slice4iter4IterINtCsjFyKPEBWBwj_13fvm_ipld_hamt12KeyValuePairyyEEECs3sW5qwsMDgx_6simple:
 1944|   155k|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|   155k|where
 1946|   155k|    I: Iterator,
 1947|   155k|{
 1948|   155k|    match iter.size_hint() {
 1949|   155k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|   155k|}
_RNCINvYQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer11collect_seqRINtNtCsh5ATE4OSafo_5alloc3vec3VecINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtB3g_14hash_algorithm6Sha256EEE0Cs3sW5qwsMDgx_6simple:
 1278|   172k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvMNtCs2W2Jjypy2gE_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsh5ATE4OSafo_5alloc3vec3VechEECs3sW5qwsMDgx_6simple:
   60|  17.1k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|  17.1k|        ByteBuf {
   62|  17.1k|            bytes: bytes.into(),
   63|  17.1k|        }
   64|  17.1k|    }
_RINvXsc_NtCs2W2Jjypy2gE_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsziUsaXjycw_5serde3ser9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  186|  17.1k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|  17.1k|    where
  188|  17.1k|        S: Serializer,
  189|  17.1k|    {
  190|  17.1k|        serializer.serialize_bytes(&self.bytes)
  191|  17.1k|    }

_RINvXs0_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser12SerializeSeq17serialize_elementRINtCsjFyKPEBWBwj_13fvm_ipld_hamt12KeyValuePairyyEECs3sW5qwsMDgx_6simple:
  380|   199k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|   199k|        value.serialize(&mut *self.ser)
  382|   199k|    }
_RNvXs1_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser14SerializeTuple3endCs3sW5qwsMDgx_6simple:
  404|  23.2k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  405|  23.2k|        Ok(())
  406|  23.2k|    }
_RINvXs0_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser12SerializeSeq17serialize_elementRINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtB2Q_14hash_algorithm6Sha256EECs3sW5qwsMDgx_6simple:
  380|   172k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|   172k|        value.serialize(&mut *self.ser)
  382|   172k|    }
_RINvXs2_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser20SerializeTupleStruct15serialize_fieldyECs3sW5qwsMDgx_6simple:
  414|   399k|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|   399k|        value.serialize(&mut *self.ser)
  416|   399k|    }
_RNvXs0_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser12SerializeSeq3endCs3sW5qwsMDgx_6simple:
  385|   178k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|   178k|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|   178k|        }
  389|       |
  390|   178k|        Ok(())
  391|   178k|    }
_RINvXs_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer24serialize_newtype_structNtNtCs2W2Jjypy2gE_11serde_bytes7bytebuf7ByteBufECs3sW5qwsMDgx_6simple:
  199|  17.1k|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|  17.1k|        self,
  201|  17.1k|        name: &'static str,
  202|  17.1k|        value: &T,
  203|  17.1k|    ) -> Result<Self::Ok, Self::Error> {
  204|  17.1k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|  17.1k|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|  17.1k|    }
_RNvXs2_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser20SerializeTupleStruct3endCs3sW5qwsMDgx_6simple:
  419|   199k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|   199k|        Ok(())
  421|   199k|    }
_RNvXs_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer13serialize_seqCs3sW5qwsMDgx_6simple:
  225|   178k|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
  226|   178k|        if let Some(len) = len {
  227|   178k|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|   178k|        Ok(Collect {
  232|   178k|            bounded: len.is_some(),
  233|   178k|            ser: self,
  234|   178k|        })
  235|   178k|    }
_RINvXs1_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser14SerializeTuple17serialize_elementRINtNtCsh5ATE4OSafo_5alloc3vec3VecINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointer7PointeryyNtNtB3x_14hash_algorithm6Sha256EEECs3sW5qwsMDgx_6simple:
  399|  23.2k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  23.2k|        value.serialize(&mut *self.ser)
  401|  23.2k|    }
_RINvNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser6to_vecINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1r_14hash_algorithm6Sha256EEECs3sW5qwsMDgx_6simple:
   23|  8.19k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  8.19k|where
   25|  8.19k|    T: Serialize + ?Sized,
   26|  8.19k|{
   27|  8.19k|    let writer = BufWriter::new(Vec::new());
   28|  8.19k|    let mut serializer = Serializer::new(writer);
   29|  8.19k|    value.serialize(&mut serializer)?;
   30|  8.19k|    Ok(serializer.into_inner().into_inner())
   31|  8.19k|}
_RINvXs1_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser14SerializeTuple17serialize_elementRNtNtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfield8BitfieldECs3sW5qwsMDgx_6simple:
  399|  23.2k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  23.2k|        value.serialize(&mut *self.ser)
  401|  23.2k|    }
_RNvXs7_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer15serialize_bytesCs3sW5qwsMDgx_6simple:
  561|  17.1k|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|  17.1k|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|  17.1k|        let prefixed = [&[0x00], value].concat();
  564|  17.1k|        // CIDs are serialized with CBOR tag 42.
  565|  17.1k|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|  17.1k|        Ok(())
  567|  17.1k|    }
_RNvMNtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterE10into_innerCs3sW5qwsMDgx_6simple:
   56|  23.2k|    pub fn into_inner(self) -> W {
   57|  23.2k|        self.writer
   58|  23.2k|    }
_RINvNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser6to_vecINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtBS_14hash_algorithm6Sha256EECs3sW5qwsMDgx_6simple:
   23|  15.0k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  15.0k|where
   25|  15.0k|    T: Serialize + ?Sized,
   26|  15.0k|{
   27|  15.0k|    let writer = BufWriter::new(Vec::new());
   28|  15.0k|    let mut serializer = Serializer::new(writer);
   29|  15.0k|    value.serialize(&mut serializer)?;
   30|  15.0k|    Ok(serializer.into_inner().into_inner())
   31|  15.0k|}
_RNvXs_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer13serialize_u64Cs3sW5qwsMDgx_6simple:
  122|   399k|    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
  123|   399k|        v.encode(&mut self.writer)?;
  124|   399k|        Ok(())
  125|   399k|    }
_RNvXs_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer15serialize_bytesCs3sW5qwsMDgx_6simple:
  159|  23.2k|    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
  160|  23.2k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  23.2k|        Ok(())
  162|  23.2k|    }
_RNvXs_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer15serialize_tupleCs3sW5qwsMDgx_6simple:
  238|   223k|    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
  239|   223k|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|   223k|        Ok(BoundedCollect { ser: self })
  241|   223k|    }
_RNvMNtCslzSQV8fq5MO_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterE3newCs3sW5qwsMDgx_6simple:
   51|  23.2k|    pub fn new(writer: W) -> Serializer<W> {
   52|  23.2k|        Serializer { writer }
   53|  23.2k|    }
_RNvXs_NtCslzSQV8fq5MO_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterENtNtCsziUsaXjycw_5serde3ser10Serializer22serialize_tuple_structCs3sW5qwsMDgx_6simple:
  244|   199k|    fn serialize_tuple_struct(
  245|   199k|        self,
  246|   199k|        _name: &'static str,
  247|   199k|        len: usize,
  248|   199k|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|   199k|        self.serialize_tuple(len)
  250|   199k|    }

_RNvXs3_NtCs5MIEfznZToq_4sha28core_apiNtB5_13Sha256VarCoreNtNtCse0ropInob7p_6digest8core_api18VariableOutputCore3newCs3sW5qwsMDgx_6simple:
   49|   117k|    fn new(output_size: usize) -> Result<Self, InvalidOutputSize> {
   50|   117k|        let state = match output_size {
   51|      0|            28 => consts::H256_224,
   52|   117k|            32 => consts::H256_256,
   53|      0|            _ => return Err(InvalidOutputSize),
   54|       |        };
   55|   117k|        let block_len = 0;
   56|   117k|        Ok(Self { state, block_len })
   57|   117k|    }
_RNCNvXs3_NtCs5MIEfznZToq_4sha28core_apiNtB7_13Sha256VarCoreNtNtCse0ropInob7p_6digest8core_api18VariableOutputCore22finalize_variable_core0Cs3sW5qwsMDgx_6simple:
   63|   117k|        buffer.len64_padding_be(bit_len, |b| compress256(&mut self.state, from_ref(b)));
_RNvXs3_NtCs5MIEfznZToq_4sha28core_apiNtB5_13Sha256VarCoreNtNtCse0ropInob7p_6digest8core_api18VariableOutputCore22finalize_variable_coreCs3sW5qwsMDgx_6simple:
   60|   117k|    fn finalize_variable_core(&mut self, buffer: &mut Buffer<Self>, out: &mut Output<Self>) {
   61|   117k|        let bs = Self::BlockSize::U64;
   62|   117k|        let bit_len = 8 * (buffer.get_pos() as u64 + bs * self.block_len);
   63|   117k|        buffer.len64_padding_be(bit_len, |b| compress256(&mut self.state, from_ref(b)));
   64|       |
   65|   938k|        for (chunk, v) in out.chunks_exact_mut(4).zip(self.state.iter()) {
   66|   938k|            chunk.copy_from_slice(&v.to_be_bytes());
   67|   938k|        }
   68|   117k|    }

_RNvNtCs5MIEfznZToq_4sha26sha25611compress256:
   34|   117k|pub fn compress256(state: &mut [u32; 8], blocks: &[GenericArray<u8, U64>]) {
   35|   117k|    // SAFETY: GenericArray<u8, U64> and [u8; 64] have
   36|   117k|    // exactly the same memory layout
   37|   117k|    let p = blocks.as_ptr() as *const [u8; 64];
   38|   117k|    let blocks = unsafe { core::slice::from_raw_parts(p, blocks.len()) };
   39|   117k|    compress(state, blocks)
   40|   117k|}

_RNvNtNtCs5MIEfznZToq_4sha26sha2563x868schedule:
   10|  1.40M|unsafe fn schedule(v0: __m128i, v1: __m128i, v2: __m128i, v3: __m128i) -> __m128i {
   11|  1.40M|    let t1 = _mm_sha256msg1_epu32(v0, v1);
   12|  1.40M|    let t2 = _mm_alignr_epi8(v3, v2, 4);
   13|  1.40M|    let t3 = _mm_add_epi32(t1, t2);
   14|  1.40M|    _mm_sha256msg2_epu32(t3, v3)
   15|  1.40M|}
_RNvNtNtCs5MIEfznZToq_4sha26sha2563x868compress:
  102|   117k|pub fn compress(state: &mut [u32; 8], blocks: &[[u8; 64]]) {
  103|   117k|    // TODO: Replace with https://github.com/rust-lang/rfcs/pull/2725
  104|   117k|    // after stabilization
  105|   117k|    if shani_cpuid::get() {
  106|   117k|        unsafe {
  107|   117k|            digest_blocks(state, blocks);
  108|   117k|        }
  109|      0|    } else {
  110|      0|        super::soft::compress(state, blocks);
  111|      0|    }
  112|   117k|}
_RNvNtNtCs5MIEfznZToq_4sha26sha2563x8613digest_blocks:
   42|   117k|unsafe fn digest_blocks(state: &mut [u32; 8], blocks: &[[u8; 64]]) {
   43|   117k|    #[allow(non_snake_case)]
   44|   117k|    let MASK: __m128i = _mm_set_epi64x(
   45|   117k|        0x0C0D_0E0F_0809_0A0Bu64 as i64,
   46|   117k|        0x0405_0607_0001_0203u64 as i64,
   47|   117k|    );
   48|   117k|
   49|   117k|    let state_ptr = state.as_ptr() as *const __m128i;
   50|   117k|    let dcba = _mm_loadu_si128(state_ptr.add(0));
   51|   117k|    let efgh = _mm_loadu_si128(state_ptr.add(1));
   52|   117k|
   53|   117k|    let cdab = _mm_shuffle_epi32(dcba, 0xB1);
   54|   117k|    let efgh = _mm_shuffle_epi32(efgh, 0x1B);
   55|   117k|    let mut abef = _mm_alignr_epi8(cdab, efgh, 8);
   56|   117k|    let mut cdgh = _mm_blend_epi16(efgh, cdab, 0xF0);
   57|       |
   58|   234k|    for block in blocks {
   59|   117k|        let abef_save = abef;
   60|   117k|        let cdgh_save = cdgh;
   61|   117k|
   62|   117k|        let data_ptr = block.as_ptr() as *const __m128i;
   63|   117k|        let mut w0 = _mm_shuffle_epi8(_mm_loadu_si128(data_ptr.add(0)), MASK);
   64|   117k|        let mut w1 = _mm_shuffle_epi8(_mm_loadu_si128(data_ptr.add(1)), MASK);
   65|   117k|        let mut w2 = _mm_shuffle_epi8(_mm_loadu_si128(data_ptr.add(2)), MASK);
   66|   117k|        let mut w3 = _mm_shuffle_epi8(_mm_loadu_si128(data_ptr.add(3)), MASK);
   67|   117k|        let mut w4;
   68|   117k|
   69|   117k|        rounds4!(abef, cdgh, w0, 0);
   70|   117k|        rounds4!(abef, cdgh, w1, 1);
   71|   117k|        rounds4!(abef, cdgh, w2, 2);
   72|   117k|        rounds4!(abef, cdgh, w3, 3);
   73|   117k|        schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 4);
   74|   117k|        schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 5);
   75|   117k|        schedule_rounds4!(abef, cdgh, w2, w3, w4, w0, w1, 6);
   76|   117k|        schedule_rounds4!(abef, cdgh, w3, w4, w0, w1, w2, 7);
   77|   117k|        schedule_rounds4!(abef, cdgh, w4, w0, w1, w2, w3, 8);
   78|   117k|        schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 9);
   79|   117k|        schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 10);
   80|   117k|        schedule_rounds4!(abef, cdgh, w2, w3, w4, w0, w1, 11);
   81|   117k|        schedule_rounds4!(abef, cdgh, w3, w4, w0, w1, w2, 12);
   82|   117k|        schedule_rounds4!(abef, cdgh, w4, w0, w1, w2, w3, 13);
   83|   117k|        schedule_rounds4!(abef, cdgh, w0, w1, w2, w3, w4, 14);
   84|   117k|        schedule_rounds4!(abef, cdgh, w1, w2, w3, w4, w0, 15);
   85|   117k|
   86|   117k|        abef = _mm_add_epi32(abef, abef_save);
   87|   117k|        cdgh = _mm_add_epi32(cdgh, cdgh_save);
   88|   117k|    }
   89|       |
   90|   117k|    let feba = _mm_shuffle_epi32(abef, 0x1B);
   91|   117k|    let dchg = _mm_shuffle_epi32(cdgh, 0xB1);
   92|   117k|    let dcba = _mm_blend_epi16(feba, dchg, 0xF0);
   93|   117k|    let hgef = _mm_alignr_epi8(dchg, feba, 8);
   94|   117k|
   95|   117k|    let state_ptr_mut = state.as_mut_ptr() as *mut __m128i;
   96|   117k|    _mm_storeu_si128(state_ptr_mut.add(0), dcba);
   97|   117k|    _mm_storeu_si128(state_ptr_mut.add(1), hgef);
   98|   117k|}

_RNvNtCs7hHWOx8ZF1r_15unsigned_varint6encode3u64Cs3sW5qwsMDgx_6simple:
   69|  51.5k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  51.5k|    encode!(number, buf)
   71|  51.5k|}
_RNvNtCs7hHWOx8ZF1r_15unsigned_varint6encode2u8Cs3sW5qwsMDgx_6simple:
   45|  17.1k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|  17.1k|    encode!(number, buf)
   47|  17.1k|}
_RNvNtCs7hHWOx8ZF1r_15unsigned_varint6encode9u8_bufferCs3sW5qwsMDgx_6simple:
  101|  17.1k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|  17.1k|    [0; U8_LEN]
  103|  17.1k|}
_RNvNtCs7hHWOx8ZF1r_15unsigned_varint6encode10u64_bufferCs3sW5qwsMDgx_6simple:
  119|  51.5k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  51.5k|    [0; U64_LEN]
  121|  51.5k|}


_RNvXs_NtCs3PUiQ7m774R_19fvm_ipld_blockstore5blockINtB4_5BlockRINtNtCsh5ATE4OSafo_5alloc3vec3VechEEINtNtCscES2q764p84_4core7convert5AsRefShE6as_refCs3sW5qwsMDgx_6simple:
   42|  23.2k|    fn as_ref(&self) -> &[u8] {
   43|  23.2k|        self.data.as_ref()
   44|  23.2k|    }
_RNvMNtCs3PUiQ7m774R_19fvm_ipld_blockstore5blockINtB2_5BlockRINtNtCsh5ATE4OSafo_5alloc3vec3VechEE3cidCs3sW5qwsMDgx_6simple:
   28|  23.2k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   29|  23.2k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   30|  23.2k|    }

_RINvXs0_Cs3PUiQ7m774R_19fvm_ipld_blockstoreRNtNtB6_6memory16MemoryBlockstoreNtB6_10Blockstore3putRINtNtCsh5ATE4OSafo_5alloc3vec3VechEECs3sW5qwsMDgx_6simple:
  108|  23.2k|                fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  109|  23.2k|                where
  110|  23.2k|                    Self: Sized,
  111|  23.2k|                    D: AsRef<[u8]>,
  112|  23.2k|                {
  113|  23.2k|                    (**self).put(mh_code, block)
  114|  23.2k|                }
_RINvYNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCsh5ATE4OSafo_5alloc3vec3VechEECs3sW5qwsMDgx_6simple:
   40|  23.2k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   41|  23.2k|    where
   42|  23.2k|        Self: Sized,
   43|  23.2k|        D: AsRef<[u8]>,
   44|  23.2k|    {
   45|  23.2k|        let k = block.cid(mh_code);
   46|  23.2k|        self.put_keyed(&k, block.as_ref())?;
   47|  23.2k|        Ok(k)
   48|  23.2k|    }

_RNvXs1_NtCs3PUiQ7m774R_19fvm_ipld_blockstore6memoryNtB5_16MemoryBlockstoreNtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   11|  1.36k|#[derive(Debug, Default, Clone)]
_RNvXs_NtCs3PUiQ7m774R_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   36|  23.2k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   37|  23.2k|        self.blocks.borrow_mut().insert(*k, block.into());
   38|  23.2k|        Ok(())
   39|  23.2k|    }

_RINvXNtNtCsi0ki1tlHPfy_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
   35|  23.2k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  23.2k|        where
   37|  23.2k|            S: Serializer,
   38|  23.2k|        {
   39|  23.2k|            serializer.serialize_bytes(self.as_ref())
   40|  23.2k|        }

_RINvYRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCsi0ki1tlHPfy_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB2Q_14hash_algorithm6Sha256EEECs3sW5qwsMDgx_6simple:
   30|  8.19k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  8.19k|    where
   32|  8.19k|        S: ser::Serialize,
   33|  8.19k|    {
   34|  8.19k|        let bytes = crate::to_vec(obj)?;
   35|  8.19k|        self.put(
   36|  8.19k|            code,
   37|  8.19k|            &Block {
   38|  8.19k|                codec: DAG_CBOR,
   39|  8.19k|                data: &bytes,
   40|  8.19k|            },
   41|  8.19k|        )
   42|  8.19k|    }
_RINvYRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCsi0ki1tlHPfy_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB2h_14hash_algorithm6Sha256EECs3sW5qwsMDgx_6simple:
   30|  15.0k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  15.0k|    where
   32|  15.0k|        S: ser::Serialize,
   33|  15.0k|    {
   34|  15.0k|        let bytes = crate::to_vec(obj)?;
   35|  15.0k|        self.put(
   36|  15.0k|            code,
   37|  15.0k|            &Block {
   38|  15.0k|                codec: DAG_CBOR,
   39|  15.0k|                data: &bytes,
   40|  15.0k|            },
   41|  15.0k|        )
   42|  15.0k|    }

_RINvCsi0ki1tlHPfy_17fvm_ipld_encoding6to_vecINtNtCsh5ATE4OSafo_5alloc5boxed3BoxINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtB1k_14hash_algorithm6Sha256EEECs3sW5qwsMDgx_6simple:
   44|  8.19k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  8.19k|where
   46|  8.19k|    T: ser::Serialize + ?Sized,
   47|  8.19k|{
   48|  8.19k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  8.19k|}
_RINvCsi0ki1tlHPfy_17fvm_ipld_encoding6to_vecINtNtCsjFyKPEBWBwj_13fvm_ipld_hamt4node4NodeyyNtNtBL_14hash_algorithm6Sha256EECs3sW5qwsMDgx_6simple:
   44|  15.0k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  15.0k|where
   46|  15.0k|    T: ser::Serialize + ?Sized,
   47|  15.0k|{
   48|  15.0k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  15.0k|}

_RNCNvXNvNtCs3sW5qwsMDgx_6simple6commons_1__NtB6_6MethodNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrarys0_0B8_:
   14|    721|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs3sW5qwsMDgx_6simple6commons_1__NtB6_6MethodNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrary0B8_:
   14|    721|#[derive(Debug, Arbitrary)]
_RNCNvNtCs3sW5qwsMDgx_6simple6common3run0B5_:
   40|  10.6k|                let hamt_deleted = hamt.delete(&key).unwrap().map(|(_, v)| v);
_RNvNtCs3sW5qwsMDgx_6simple6common3run:
   21|  1.36k|pub fn run(flush_rate: u8, operations: Vec<Operation>, conf: Config) {
   22|  1.36k|    let db = fvm_ipld_blockstore::MemoryBlockstore::default();
   23|  1.36k|    let mut hamt = Hamt::<_, _, _>::new_with_config(&db, conf);
   24|  1.36k|    let mut elements = ahash::AHashMap::new();
   25|  1.36k|
   26|  1.36k|    let flush_rate = (flush_rate as usize).saturating_add(5);
   27|  99.5k|    for (i, Operation { key, method }) in operations.into_iter().enumerate() {
   28|  99.5k|        if i % flush_rate == 0 {
   29|  17.3k|            // Periodic flushing of Hamt to fuzz blockstore usage also
   30|  17.3k|            hamt.flush().unwrap();
   31|  82.2k|        }
   32|       |
   33|  99.5k|        match method {
   34|  40.2k|            Method::Insert(v) => {
   35|  40.2k|                elements.insert(key, v);
   36|  40.2k|                hamt.set(key, v).unwrap();
   37|  40.2k|            }
   38|       |            Method::Remove => {
   39|  39.0k|                let el = elements.remove(&key);
   40|  39.0k|                let hamt_deleted = hamt.delete(&key).unwrap().map(|(_, v)| v);
   41|  39.0k|                assert_eq!(hamt_deleted, el);
   42|       |            }
   43|       |            Method::Get => {
   44|  20.2k|                let ev = elements.get(&key);
   45|  20.2k|                let av = hamt.get(&key).unwrap();
   46|  20.2k|                assert_eq!(av, ev);
   47|       |            }
   48|       |        }
   49|       |    }
   50|  1.36k|}
_RNCNvNvNvNtCs3sW5qwsMDgx_6simple6common1__25RECURSIVE_COUNT_Operation7___getit0B9_:
    8|      1|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs3sW5qwsMDgx_6simple6common1__NtB6_9OperationNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrarys_0B8_:
    8|  99.5k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs3sW5qwsMDgx_6simple6common1__NtB6_9OperationNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrary0B8_:
    8|    250|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs3sW5qwsMDgx_6simple6common1__NtB6_9OperationNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrarys0_0B8_:
    8|    250|#[derive(Debug, Arbitrary)]
_RNvXNvNtCs3sW5qwsMDgx_6simple6commons_1__NtB4_6MethodNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrary:
   14|   297k|#[derive(Debug, Arbitrary)]
_RNvXNvNtCs3sW5qwsMDgx_6simple6common1__NtB4_9OperationNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrary:
    8|   298k|#[derive(Debug, Arbitrary)]
_RNCNvNvNvNtCs3sW5qwsMDgx_6simple6commons_1__22RECURSIVE_COUNT_Method7___getit0B9_:
   14|      1|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCs3sW5qwsMDgx_6simple6commons_1__NtB6_6MethodNtCs8ioa9SVYuyc_9arbitrary9Arbitrary9arbitrarys_0B8_:
   14|  99.5k|#[derive(Debug, Arbitrary)]

_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield4zeroCs3sW5qwsMDgx_6simple:
  105|   141k|    pub fn zero() -> Self {
  106|   141k|        Bitfield([0, 0, 0, 0])
  107|   141k|    }
_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield3andCs3sW5qwsMDgx_6simple:
   96|   119k|    pub fn and(self, other: &Self) -> Self {
   97|   119k|        Bitfield([
   98|   119k|            self.0[0] & other.0[0],
   99|   119k|            self.0[1] & other.0[1],
  100|   119k|            self.0[2] & other.0[2],
  101|   119k|            self.0[3] & other.0[3],
  102|   119k|        ])
  103|   119k|    }
_RINvXNtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB3_8BitfieldNtNtCsziUsaXjycw_5serde3ser9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
   19|  23.2k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   20|  23.2k|    where
   21|  23.2k|        S: Serializer,
   22|  23.2k|    {
   23|  23.2k|        let mut v = [0u8; MAX_LEN];
   24|  23.2k|        // Big endian ordering, to match go
   25|  23.2k|        BigEndian::write_u64(&mut v[..8], self.0[3]);
   26|  23.2k|        BigEndian::write_u64(&mut v[8..16], self.0[2]);
   27|  23.2k|        BigEndian::write_u64(&mut v[16..24], self.0[1]);
   28|  23.2k|        BigEndian::write_u64(&mut v[24..], self.0[0]);
   29|       |
   30|   685k|        for i in 0..v.len() {
   31|   685k|            if v[i] != 0 {
   32|  21.7k|                return strict_bytes::Serialize::serialize(&v[i..], serializer);
   33|   663k|            }
   34|       |        }
   35|       |
   36|  1.51k|        <[u8] as strict_bytes::Serialize>::serialize(&[], serializer)
   37|  23.2k|    }
_RNvNtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfield12set_bits_leqB3_:
  138|   113k|fn set_bits_leq(v: u64, bit: u8) -> u64 {
  139|   113k|    (v as u128 | ((1u128 << (1 + bit)) - 1)) as u64
  140|   113k|}
_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield7set_bit:
   85|  40.3k|    pub fn set_bit(&mut self, idx: u8) {
   86|  40.3k|        let ai = idx / 64;
   87|  40.3k|        let bi = idx % 64;
   88|  40.3k|
   89|  40.3k|        self.0[ai as usize] |= 1 << bi;
   90|  40.3k|    }
_RNCNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB7_8Bitfield10count_ones0B9_:
   93|   954k|        self.0.iter().map(|a| a.count_ones() as usize).sum()
_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield11set_bits_le:
  109|   119k|    pub fn set_bits_le(self, bit: u8) -> Self {
  110|   119k|        if bit == 0 {
  111|  5.47k|            return self;
  112|   113k|        }
  113|   113k|        self.set_bits_leq(bit - 1)
  114|   119k|    }
_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield9clear_bit:
   72|  9.69k|    pub fn clear_bit(&mut self, idx: u8) {
   73|  9.69k|        let ai = idx / 64;
   74|  9.69k|        let bi = idx % 64;
   75|  9.69k|        self.0[ai as usize] &= u64::MAX - (1 << bi);
   76|  9.69k|    }
_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield10count_ones:
   92|   238k|    pub fn count_ones(&self) -> usize {
   93|   238k|        self.0.iter().map(|a| a.count_ones() as usize).sum()
   94|   238k|    }
_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield8test_bit:
   78|   147k|    pub fn test_bit(&self, idx: u8) -> bool {
   79|   147k|        let ai = idx / 64;
   80|   147k|        let bi = idx % 64;
   81|   147k|
   82|   147k|        self.0[ai as usize] & (1 << bi) != 0
   83|   147k|    }
_RNvMs1_NtCsjFyKPEBWBwj_13fvm_ipld_hamt8bitfieldNtB5_8Bitfield12set_bits_leq:
  116|   113k|    pub fn set_bits_leq(mut self, bit: u8) -> Self {
  117|   113k|        if bit < 64 {
  118|   113k|            self.0[0] = set_bits_leq(self.0[0], bit);
  119|   113k|        } else if bit < 128 {
  120|      0|            self.0[0] = std::u64::MAX;
  121|      0|            self.0[1] = set_bits_leq(self.0[1], bit - 64);
  122|      0|        } else if bit < 192 {
  123|      0|            self.0[0] = std::u64::MAX;
  124|      0|            self.0[1] = std::u64::MAX;
  125|      0|            self.0[2] = set_bits_leq(self.0[2], bit - 128);
  126|      0|        } else {
  127|      0|            self.0[0] = std::u64::MAX;
  128|      0|            self.0[1] = std::u64::MAX;
  129|      0|            self.0[2] = std::u64::MAX;
  130|      0|            self.0[3] = set_bits_leq(self.0[3], bit - 192);
  131|      0|        }
  132|       |
  133|   113k|        self
  134|   113k|    }

_RNvMs0_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4hamtINtB5_8HamtImplRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE3setCs3sW5qwsMDgx_6simple:
  172|  40.2k|    pub fn set(&mut self, key: K, value: V) -> Result<Option<V>, Error>
  173|  40.2k|    where
  174|  40.2k|        V: PartialEq,
  175|  40.2k|    {
  176|  40.2k|        let (old, modified) = self
  177|  40.2k|            .root
  178|  40.2k|            .set(key, value, self.store.borrow(), &self.conf, true)?;
  179|       |
  180|  40.2k|        if modified {
  181|  35.7k|            self.flushed_cid = None;
  182|  35.7k|        }
  183|       |
  184|  40.2k|        Ok(old)
  185|  40.2k|    }
_RNvMs0_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4hamtINtB5_8HamtImplRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE15new_with_configCs3sW5qwsMDgx_6simple:
   88|  1.36k|    pub fn new_with_config(store: BS, conf: Config) -> Self {
   89|  1.36k|        Self {
   90|  1.36k|            root: Node::default(),
   91|  1.36k|            store,
   92|  1.36k|            conf,
   93|  1.36k|            hash: Default::default(),
   94|  1.36k|            flushed_cid: None,
   95|  1.36k|        }
   96|  1.36k|    }
_RINvMs0_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4hamtINtB6_8HamtImplRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE3getyECs3sW5qwsMDgx_6simple:
  249|  20.2k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Result<Option<&V>, Error>
  250|  20.2k|    where
  251|  20.2k|        K: Borrow<Q>,
  252|  20.2k|        Q: Hash + Eq,
  253|  20.2k|        V: DeserializeOwned,
  254|  20.2k|    {
  255|  20.2k|        match self.root.get(k, self.store.borrow(), &self.conf)? {
  256|  5.30k|            Some(v) => Ok(Some(v)),
  257|  14.9k|            None => Ok(None),
  258|       |        }
  259|  20.2k|    }
_RINvMs0_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4hamtINtB6_8HamtImplRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE6deleteyECs3sW5qwsMDgx_6simple:
  309|  39.0k|    pub fn delete<Q: ?Sized>(&mut self, k: &Q) -> Result<Option<(K, V)>, Error>
  310|  39.0k|    where
  311|  39.0k|        K: Borrow<Q>,
  312|  39.0k|        Q: Hash + Eq,
  313|  39.0k|    {
  314|  39.0k|        let deleted = self.root.remove_entry(k, self.store.borrow(), &self.conf)?;
  315|       |
  316|  39.0k|        if deleted.is_some() {
  317|  10.6k|            self.flushed_cid = None;
  318|  28.4k|        }
  319|       |
  320|  39.0k|        Ok(deleted)
  321|  39.0k|    }
_RNvMs0_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4hamtINtB5_8HamtImplRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyE5flushCs3sW5qwsMDgx_6simple:
  324|  17.3k|    pub fn flush(&mut self) -> Result<Cid, Error> {
  325|  17.3k|        if let Some(cid) = self.flushed_cid {
  326|  2.25k|            return Ok(cid);
  327|  15.0k|        }
  328|  15.0k|        self.root.flush(self.store.borrow())?;
  329|  15.0k|        let cid = self.store.put_cbor(&self.root, Code::Blake2b256)?;
  330|  15.0k|        self.flushed_cid = Some(cid);
  331|  15.0k|        Ok(cid)
  332|  17.3k|    }

_RNvXs0_NtCsjFyKPEBWBwj_13fvm_ipld_hamt14hash_algorithmNtB5_17Sha2HasherWrapperNtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   19|   117k|#[derive(Default)]
_RINvXs_NtCsjFyKPEBWBwj_13fvm_ipld_hamt14hash_algorithmNtB5_6Sha256NtB5_13HashAlgorithm4hashyECs3sW5qwsMDgx_6simple:
   38|   117k|    fn hash<X: ?Sized>(key: &X) -> HashedKey
   39|   117k|    where
   40|   117k|        X: Hash,
   41|   117k|    {
   42|   117k|        let mut hasher = Sha2HasherWrapper::default();
   43|   117k|        key.hash(&mut hasher);
   44|   117k|        hasher.0.finalize().into()
   45|   117k|    }
_RNvXNtCsjFyKPEBWBwj_13fvm_ipld_hamt14hash_algorithmNtB2_17Sha2HasherWrapperNtNtCscES2q764p84_4core4hash6Hasher5write:
   28|   117k|    fn write(&mut self, bytes: &[u8]) {
   29|   117k|        self.0.update(bytes);
   30|   117k|    }

_RNvMNtCsjFyKPEBWBwj_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits3newCs3sW5qwsMDgx_6simple:
   26|  99.5k|    pub fn new(hash_buffer: &'a HashedKey) -> HashBits<'a> {
   27|  99.5k|        Self::new_at_index(hash_buffer, 0)
   28|  99.5k|    }
_RNvMNtCsjFyKPEBWBwj_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits12new_at_indexCs3sW5qwsMDgx_6simple:
   31|   117k|    pub fn new_at_index(hash_buffer: &'a HashedKey, consumed: u32) -> HashBits<'a> {
   32|   117k|        Self {
   33|   117k|            b: hash_buffer,
   34|   117k|            consumed,
   35|   117k|        }
   36|   117k|    }
_RNvNtCsjFyKPEBWBwj_13fvm_ipld_hamt9hash_bits6mkmaskB3_:
   21|   342k|pub(crate) fn mkmask(n: u32) -> u8 {
   22|   342k|    ((1u16 << n) - 1) as u8
   23|   342k|}
_RNvMNtCsjFyKPEBWBwj_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits9next_bits:
   54|   194k|    fn next_bits(&mut self, i: u32) -> u8 {
   55|   194k|        let curbi = self.consumed / 8;
   56|   194k|        let leftb = 8 - (self.consumed % 8);
   57|   194k|
   58|   194k|        let curb = self.b[curbi as usize];
   59|   194k|        match i.cmp(&leftb) {
   60|       |            Ordering::Equal => {
   61|       |                // bits to consume is equal to the bits remaining in the currently indexed byte
   62|      0|                let out = mkmask(i) & curb;
   63|      0|                self.consumed += i;
   64|      0|                out
   65|       |            }
   66|       |            Ordering::Less => {
   67|       |                // Consuming less than the remaining bits in the current byte
   68|   147k|                let a = curb & mkmask(leftb);
   69|   147k|                let b = a & !mkmask(leftb - i);
   70|   147k|                let c = b >> (leftb - i);
   71|   147k|                self.consumed += i;
   72|   147k|                c
   73|       |            }
   74|       |            Ordering::Greater => {
   75|       |                // Consumes remaining bits and remaining bits from a recursive call
   76|  47.2k|                let mut out = mkmask(leftb) & curb;
   77|  47.2k|                out <<= i - leftb;
   78|  47.2k|                self.consumed += leftb;
   79|  47.2k|                out += self.next_bits(i - leftb);
   80|  47.2k|                out
   81|       |            }
   82|       |        }
   83|   194k|    }
_RNvMNtCsjFyKPEBWBwj_13fvm_ipld_hamt9hash_bitsNtB2_8HashBits4next:
   40|   147k|    pub fn next(&mut self, i: u32) -> Result<u8, Error> {
   41|   147k|        if i > 8 || i == 0 {
   42|      0|            return Err(Error::InvalidHashBitLen);
   43|   147k|        }
   44|   147k|        let maxi = (self.b.len() as u32) * 8 - self.consumed;
   45|   147k|        if maxi == 0 {
   46|      0|            return Err(Error::MaxDepth);
   47|   147k|        }
   48|   147k|        // Only take what's left. If we consume 5 bits at a time from a 256 bit key,
   49|   147k|        // there will be 1 bit left at the bottom.
   50|   147k|        Ok(self.next_bits(std::cmp::min(i, maxi)))
   51|   147k|    }

_RNvMs_CsjFyKPEBWBwj_13fvm_ipld_hamtINtB4_12KeyValuePairyyE3keyCs3sW5qwsMDgx_6simple:
   83|   114k|    pub fn key(&self) -> &K {
   84|   114k|        &self.0
   85|   114k|    }
_RNvXCsjFyKPEBWBwj_13fvm_ipld_hamtNtB2_6ConfigNtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   67|  1.36k|    fn default() -> Self {
   68|  1.36k|        Self {
   69|  1.36k|            #[allow(deprecated)]
   70|  1.36k|            bit_width: DEFAULT_BIT_WIDTH,
   71|  1.36k|            min_data_depth: 0,
   72|  1.36k|            max_array_width: 3,
   73|  1.36k|        }
   74|  1.36k|    }
_RNvMs0_CsjFyKPEBWBwj_13fvm_ipld_hamtINtB5_12KeyValuePairyyE3newCs3sW5qwsMDgx_6simple:
   92|  50.1k|    pub fn new(key: K, value: V) -> Self {
   93|  50.1k|        KeyValuePair(key, value)
   94|  50.1k|    }
_RNvMs_CsjFyKPEBWBwj_13fvm_ipld_hamtINtB4_12KeyValuePairyyE5valueCs3sW5qwsMDgx_6simple:
   86|  13.1k|    pub fn value(&self) -> &V {
   87|  13.1k|        &self.1
   88|  13.1k|    }
_RINvXNvCsjFyKPEBWBwj_13fvm_ipld_hamt1__INtB5_12KeyValuePairyyENtNtCsziUsaXjycw_5serde3ser9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
   79|   199k|#[derive(Debug, Serialize, Deserialize, PartialEq)]

_RNCINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E3getyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0Cs3sW5qwsMDgx_6simple:
  189|  5.30k|        Ok(self.search(k, store, conf)?.map(|kv| kv.value()))
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E12modify_valueRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  267|  71.8k|    fn modify_value<S: Blockstore>(
  268|  71.8k|        &mut self,
  269|  71.8k|        hashed_key: &mut HashBits,
  270|  71.8k|        conf: &Config,
  271|  71.8k|        depth: u32,
  272|  71.8k|        key: K,
  273|  71.8k|        value: V,
  274|  71.8k|        store: &S,
  275|  71.8k|        overwrite: bool,
  276|  71.8k|    ) -> Result<(Option<V>, bool), Error>
  277|  71.8k|    where
  278|  71.8k|        V: PartialEq,
  279|  71.8k|    {
  280|  71.8k|        let idx = hashed_key.next(conf.bit_width)?;
  281|       |
  282|       |        // No existing values at this point.
  283|  71.8k|        if !self.bitfield.test_bit(idx) {
  284|  40.3k|            if depth >= conf.min_data_depth {
  285|  40.3k|                self.insert_child(idx, key, value);
  286|  40.3k|            } else {
  287|       |                // Need to insert some empty nodes reserved for links.
  288|      0|                let mut sub = Node::<K, V, H, Ver>::default();
  289|      0|                sub.modify_value(hashed_key, conf, depth + 1, key, value, store, overwrite)?;
  290|      0|                self.insert_child_dirty(idx, Box::new(sub));
  291|       |            }
  292|  40.3k|            return Ok((None, true));
  293|  31.5k|        }
  294|  31.5k|
  295|  31.5k|        let cindex = self.index_for_bit_pos(idx);
  296|  31.5k|        let child = self.get_child_mut(cindex);
  297|  31.5k|
  298|  31.5k|        match child {
  299|  4.76k|            Pointer::Link { cid, cache } => {
  300|  4.76k|                cache.get_or_try_init(|| Node::load(conf, store, cid, depth + 1).map(Box::new))?;
  301|  4.76k|                let child_node = cache.get_mut().expect("filled line above");
  302|       |
  303|  4.76k|                let (old, modified) = child_node.modify_value(
  304|  4.76k|                    hashed_key,
  305|  4.76k|                    conf,
  306|  4.76k|                    depth + 1,
  307|  4.76k|                    key,
  308|  4.76k|                    value,
  309|  4.76k|                    store,
  310|  4.76k|                    overwrite,
  311|  4.76k|                )?;
  312|  4.76k|                if modified {
  313|  4.26k|                    *child = Pointer::Dirty(std::mem::take(child_node));
  314|  4.26k|                }
  315|  4.76k|                Ok((old, modified))
  316|       |            }
  317|  3.22k|            Pointer::Dirty(node) => {
  318|  3.22k|                node.modify_value(hashed_key, conf, depth + 1, key, value, store, overwrite)
  319|       |            }
  320|  23.5k|            Pointer::Values(vals) => {
  321|       |                // Update, if the key already exists.
  322|  23.5k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
  323|  7.83k|                    if overwrite {
  324|       |                        // If value changed, the parent nodes need to be marked as dirty.
  325|       |                        // ! The assumption here is that `PartialEq` is implemented correctly,
  326|       |                        // ! and that if that is true, the serialized bytes are equal.
  327|       |                        // ! To be absolutely sure, can serialize each value and compare or
  328|       |                        // ! refactor the Hamt to not be type safe and serialize on entry and
  329|       |                        // ! exit. These both come at costs, and this isn't a concern.
  330|  7.83k|                        let value_changed = vals[i].value() != &value;
  331|  7.83k|                        return Ok((
  332|  7.83k|                            Some(std::mem::replace(&mut vals[i].1, value)),
  333|  7.83k|                            value_changed,
  334|  7.83k|                        ));
  335|       |                    } else {
  336|       |                        // Can't overwrite, return None and false that the Node was not modified.
  337|      0|                        return Ok((None, false));
  338|       |                    }
  339|  15.6k|                }
  340|  15.6k|
  341|  15.6k|                // If the array is full, create a subshard and insert everything
  342|  15.6k|                if vals.len() >= conf.max_array_width {
  343|  5.89k|                    let kvs = std::mem::take(vals);
  344|  5.89k|                    let hashed_kvs = kvs.into_iter().map(|KeyValuePair(k, v)| {
  345|       |                        let hash = H::hash(&k);
  346|       |                        (k, v, hash)
  347|  5.89k|                    });
  348|  5.89k|
  349|  5.89k|                    let consumed = hashed_key.consumed;
  350|  5.89k|                    let mut sub = Node::<K, V, H, Ver>::default();
  351|  5.89k|                    let modified = sub.modify_value(
  352|  5.89k|                        hashed_key,
  353|  5.89k|                        conf,
  354|  5.89k|                        depth + 1,
  355|  5.89k|                        key,
  356|  5.89k|                        value,
  357|  5.89k|                        store,
  358|  5.89k|                        overwrite,
  359|  5.89k|                    )?;
  360|       |
  361|  23.5k|                    for (k, v, hash) in hashed_kvs {
  362|  17.6k|                        sub.modify_value(
  363|  17.6k|                            &mut HashBits::new_at_index(&hash, consumed),
  364|  17.6k|                            conf,
  365|  17.6k|                            depth + 1,
  366|  17.6k|                            k,
  367|  17.6k|                            v,
  368|  17.6k|                            store,
  369|  17.6k|                            overwrite,
  370|  17.6k|                        )?;
  371|       |                    }
  372|       |
  373|  5.89k|                    *child = Pointer::Dirty(Box::new(sub));
  374|  5.89k|
  375|  5.89k|                    return Ok(modified);
  376|  9.80k|                }
  377|  9.80k|
  378|  9.80k|                // Otherwise insert the element into the array in order.
  379|  9.80k|                let max = vals.len();
  380|  9.80k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
  381|  9.80k|
  382|  9.80k|                let np = KeyValuePair::new(key, value);
  383|  9.80k|                vals.insert(idx, np);
  384|  9.80k|
  385|  9.80k|                Ok((None, true))
  386|       |            }
  387|       |        }
  388|  71.8k|    }
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E8rm_valueyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  391|  52.9k|    fn rm_value<Q: ?Sized, S: Blockstore>(
  392|  52.9k|        &mut self,
  393|  52.9k|        hashed_key: &mut HashBits,
  394|  52.9k|        conf: &Config,
  395|  52.9k|        depth: u32,
  396|  52.9k|        key: &Q,
  397|  52.9k|        store: &S,
  398|  52.9k|    ) -> Result<Option<(K, V)>, Error>
  399|  52.9k|    where
  400|  52.9k|        K: Borrow<Q>,
  401|  52.9k|        Q: Hash + Eq,
  402|  52.9k|    {
  403|  52.9k|        let idx = hashed_key.next(conf.bit_width)?;
  404|       |
  405|       |        // No existing values at this point.
  406|  52.9k|        if !self.bitfield.test_bit(idx) {
  407|  18.3k|            return Ok(None);
  408|  34.6k|        }
  409|  34.6k|
  410|  34.6k|        let cindex = self.index_for_bit_pos(idx);
  411|  34.6k|        let child = self.get_child_mut(cindex);
  412|  34.6k|
  413|  34.6k|        match child {
  414|  6.71k|            Pointer::Link { cid, cache } => {
  415|  6.71k|                cache.get_or_try_init(|| Node::load(conf, store, cid, depth + 1).map(Box::new))?;
  416|  6.71k|                let child_node = cache.get_mut().expect("filled line above");
  417|       |
  418|  6.71k|                let deleted = child_node.rm_value(hashed_key, conf, depth + 1, key, store)?;
  419|       |
  420|  6.71k|                if deleted.is_some() {
  421|  2.91k|                    *child = Pointer::Dirty(std::mem::take(child_node));
  422|  2.91k|                    if Self::clean(child, conf, depth)? {
  423|      0|                        self.rm_child(cindex, idx);
  424|  2.91k|                    }
  425|  3.79k|                }
  426|       |
  427|  6.71k|                Ok(deleted)
  428|       |            }
  429|  7.23k|            Pointer::Dirty(node) => {
  430|       |                // Delete value and return deleted value
  431|  7.23k|                let deleted = node.rm_value(hashed_key, conf, depth + 1, key, store)?;
  432|       |
  433|  7.23k|                if deleted.is_some() && Self::clean(child, conf, depth)? {
  434|      0|                    self.rm_child(cindex, idx);
  435|  7.23k|                }
  436|       |
  437|  7.23k|                Ok(deleted)
  438|       |            }
  439|  20.6k|            Pointer::Values(vals) => {
  440|       |                // Delete value
  441|  27.1k|                for (i, p) in vals.iter().enumerate() {
  442|  27.1k|                    if key.eq(p.key().borrow()) {
  443|  10.6k|                        let old = if vals.len() == 1 {
  444|  9.69k|                            if let Pointer::Values(new_v) = self.rm_child(cindex, idx) {
  445|  9.69k|                                new_v.into_iter().next().unwrap()
  446|       |                            } else {
  447|      0|                                unreachable!()
  448|       |                            }
  449|       |                        } else {
  450|    919|                            vals.remove(i)
  451|       |                        };
  452|  10.6k|                        return Ok(Some((old.0, old.1)));
  453|  16.5k|                    }
  454|       |                }
  455|       |
  456|  10.0k|                Ok(None)
  457|       |            }
  458|       |        }
  459|  52.9k|    }
_RNCINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0Cs3sW5qwsMDgx_6simple:
  322|  40.3k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E5flushRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  461|  23.2k|    pub fn flush<S: Blockstore>(&mut self, store: &S) -> Result<(), Error> {
  462|   196k|        for pointer in &mut self.pointers {
  463|   172k|            if let Pointer::Dirty(node) = pointer {
  464|       |                // Flush cached sub node to clear it's cache
  465|  8.19k|                node.flush(store)?;
  466|       |
  467|       |                // Put node in blockstore and retrieve Cid
  468|  8.19k|                let cid = store.put_cbor(node, Code::Blake2b256)?;
  469|       |
  470|       |                // Can keep the flushed node in link cache
  471|  8.19k|                let cache = OnceCell::from(std::mem::take(node));
  472|  8.19k|
  473|  8.19k|                // Replace cached node with Cid link
  474|  8.19k|                *pointer = Pointer::Link { cid, cache };
  475|   164k|            }
  476|       |        }
  477|       |
  478|  23.2k|        Ok(())
  479|  23.2k|    }
_RNCINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs1_0Cs3sW5qwsMDgx_6simple:
  380|  12.7k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E3getyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  179|  20.2k|    pub fn get<Q: ?Sized, S: Blockstore>(
  180|  20.2k|        &self,
  181|  20.2k|        k: &Q,
  182|  20.2k|        store: &S,
  183|  20.2k|        conf: &Config,
  184|  20.2k|    ) -> Result<Option<&V>, Error>
  185|  20.2k|    where
  186|  20.2k|        K: Borrow<Q>,
  187|  20.2k|        Q: Eq + Hash,
  188|  20.2k|    {
  189|  20.2k|        Ok(self.search(k, store, conf)?.map(|kv| kv.value()))
  190|  20.2k|    }
_RNvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E13get_child_mutCs3sW5qwsMDgx_6simple:
  498|  66.1k|    fn get_child_mut(&mut self, i: usize) -> &mut Pointer<K, V, H, Ver> {
  499|  66.1k|        &mut self.pointers[i]
  500|  66.1k|    }
_RNvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E8rm_childCs3sW5qwsMDgx_6simple:
  481|  9.69k|    fn rm_child(&mut self, i: usize, idx: u8) -> Pointer<K, V, H, Ver> {
  482|  9.69k|        self.bitfield.clear_bit(idx);
  483|  9.69k|        self.pointers.remove(i)
  484|  9.69k|    }
_RNvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E9get_childCs3sW5qwsMDgx_6simple:
  502|  12.8k|    fn get_child(&self, i: usize) -> &Pointer<K, V, H, Ver> {
  503|  12.8k|        &self.pointers[i]
  504|  12.8k|    }
_RINvXs_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256ENtNtCsziUsaXjycw_5serde3ser9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
   44|  23.2k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   45|  23.2k|    where
   46|  23.2k|        S: Serializer,
   47|  23.2k|    {
   48|  23.2k|        (&self.bitfield, &self.pointers).serialize(serializer)
   49|  23.2k|    }
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E6searchyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  213|  20.2k|    fn search<Q: ?Sized, S: Blockstore>(
  214|  20.2k|        &self,
  215|  20.2k|        q: &Q,
  216|  20.2k|        store: &S,
  217|  20.2k|        conf: &Config,
  218|  20.2k|    ) -> Result<Option<&KeyValuePair<K, V>>, Error>
  219|  20.2k|    where
  220|  20.2k|        K: Borrow<Q>,
  221|  20.2k|        Q: Eq + Hash,
  222|  20.2k|    {
  223|  20.2k|        let hash = H::hash(q);
  224|  20.2k|        self.get_value(&mut HashBits::new(&hash), conf, 0, q, store)
  225|  20.2k|    }
_RNvMs3_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E17index_for_bit_posCs3sW5qwsMDgx_6simple:
  520|   119k|    pub(crate) fn index_for_bit_pos(&self, bp: u8) -> usize {
  521|   119k|        let mask = Bitfield::zero().set_bits_le(bp);
  522|   119k|        debug_assert_eq!(mask.count_ones(), bp as usize);
  523|   119k|        mask.and(&self.bitfield).count_ones()
  524|   119k|    }
_RNCINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E9get_valueyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0Cs3sW5qwsMDgx_6simple:
  254|  12.2k|                return Ok(vals.iter().find(|kv| key.eq(kv.key().borrow())));
_RNvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E5cleanCs3sW5qwsMDgx_6simple:
  510|  8.39k|    fn clean(child: &mut Pointer<K, V, H, Ver>, conf: &Config, depth: u32) -> Result<bool, Error> {
  511|  8.39k|        match child.clean(conf, depth) {
  512|  8.39k|            Ok(()) => Ok(false),
  513|      0|            Err(Error::ZeroPointers) if depth < conf.min_data_depth => Ok(true),
  514|      0|            Err(err) => Err(err),
  515|       |        }
  516|  8.39k|    }
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E3setRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  155|  40.2k|    pub fn set<S: Blockstore>(
  156|  40.2k|        &mut self,
  157|  40.2k|        key: K,
  158|  40.2k|        value: V,
  159|  40.2k|        store: &S,
  160|  40.2k|        conf: &Config,
  161|  40.2k|        overwrite: bool,
  162|  40.2k|    ) -> Result<(Option<V>, bool), Error>
  163|  40.2k|    where
  164|  40.2k|        V: PartialEq,
  165|  40.2k|    {
  166|  40.2k|        let hash = H::hash(&key);
  167|  40.2k|        self.modify_value(
  168|  40.2k|            &mut HashBits::new(&hash),
  169|  40.2k|            conf,
  170|  40.2k|            0,
  171|  40.2k|            key,
  172|  40.2k|            value,
  173|  40.2k|            store,
  174|  40.2k|            overwrite,
  175|  40.2k|        )
  176|  40.2k|    }
_RNvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256E12insert_childCs3sW5qwsMDgx_6simple:
  486|  40.3k|    fn insert_child(&mut self, idx: u8, key: K, value: V) {
  487|  40.3k|        let i = self.index_for_bit_pos(idx);
  488|  40.3k|        self.bitfield.set_bit(idx);
  489|  40.3k|        self.pointers.insert(i, Pointer::from_key_value(key, value))
  490|  40.3k|    }
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E12remove_entryyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  193|  39.0k|    pub fn remove_entry<Q: ?Sized, S>(
  194|  39.0k|        &mut self,
  195|  39.0k|        k: &Q,
  196|  39.0k|        store: &S,
  197|  39.0k|        conf: &Config,
  198|  39.0k|    ) -> Result<Option<(K, V)>, Error>
  199|  39.0k|    where
  200|  39.0k|        K: Borrow<Q>,
  201|  39.0k|        Q: Eq + Hash,
  202|  39.0k|        S: Blockstore,
  203|  39.0k|    {
  204|  39.0k|        let hash = H::hash(k);
  205|  39.0k|        self.rm_value(&mut HashBits::new(&hash), conf, 0, k, store)
  206|  39.0k|    }
_RINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB6_4NodeyyNtNtB8_14hash_algorithm6Sha256E9get_valueyRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreECs3sW5qwsMDgx_6simple:
  227|  22.7k|    fn get_value<Q: ?Sized, S: Blockstore>(
  228|  22.7k|        &self,
  229|  22.7k|        hashed_key: &mut HashBits,
  230|  22.7k|        conf: &Config,
  231|  22.7k|        depth: u32,
  232|  22.7k|        key: &Q,
  233|  22.7k|        store: &S,
  234|  22.7k|    ) -> Result<Option<&KeyValuePair<K, V>>, Error>
  235|  22.7k|    where
  236|  22.7k|        K: Borrow<Q>,
  237|  22.7k|        Q: Eq + Hash,
  238|  22.7k|    {
  239|  22.7k|        let idx = hashed_key.next(conf.bit_width)?;
  240|       |
  241|  22.7k|        if !self.bitfield.test_bit(idx) {
  242|  9.98k|            return Ok(None);
  243|  12.8k|        }
  244|  12.8k|
  245|  12.8k|        let cindex = self.index_for_bit_pos(idx);
  246|  12.8k|        let child = self.get_child(cindex);
  247|       |
  248|  12.8k|        let node = match child {
  249|  2.01k|            Pointer::Link { cid, cache } => {
  250|  2.01k|                cache.get_or_try_init(|| Node::load(conf, store, cid, depth + 1).map(Box::new))?
  251|       |            }
  252|    527|            Pointer::Dirty(node) => node,
  253|  10.2k|            Pointer::Values(vals) => {
  254|  10.2k|                return Ok(vals.iter().find(|kv| key.eq(kv.key().borrow())));
  255|       |            }
  256|       |        };
  257|       |
  258|  2.54k|        node.get_value(hashed_key, conf, depth + 1, key, store)
  259|  22.7k|    }
_RNvXs0_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB5_4NodeyyNtNtB7_14hash_algorithm6Sha256ENtNtCscES2q764p84_4core7default7Default7defaultCs3sW5qwsMDgx_6simple:
   53|  22.6k|    fn default() -> Self {
   54|  22.6k|        Node {
   55|  22.6k|            bitfield: Bitfield::zero(),
   56|  22.6k|            pointers: Vec::new(),
   57|  22.6k|            hash: Default::default(),
   58|  22.6k|        }
   59|  22.6k|    }
_RNCINvMs2_NtCsjFyKPEBWBwj_13fvm_ipld_hamt4nodeINtB8_4NodeyyNtNtBa_14hash_algorithm6Sha256E12modify_valueRNtNtCs3PUiQ7m774R_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0Cs3sW5qwsMDgx_6simple:
  344|  17.6k|                    let hashed_kvs = kvs.into_iter().map(|KeyValuePair(k, v)| {
  345|  17.6k|                        let hash = H::hash(&k);
  346|  17.6k|                        (k, v, hash)
  347|  17.6k|                    });

_RNCNvMs3_NtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointerINtB7_7PointeryyNtNtB9_14hash_algorithm6Sha256E5cleans_0Cs3sW5qwsMDgx_6simple:
  250|  11.2k|                    child_vals.sort_unstable_by(|a, b| {
  251|  11.2k|                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  252|  11.2k|                    });
_RINvXs_NtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256ENtNtCsziUsaXjycw_5serde3ser9Serialize9serializeQINtNtCslzSQV8fq5MO_18serde_ipld_dagcbor3ser10SerializerNtNtNtCscHtwMyHsHJz_7cbor4ii4core5utils9BufWriterEECs3sW5qwsMDgx_6simple:
  116|   172k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  117|   172k|    where
  118|   172k|        S: Serializer,
  119|   172k|    {
  120|   172k|        match Ver::NUMBER {
  121|      0|            0 => pointer_v0::PointerSer::try_from(self)
  122|      0|                .map_err(ser::Error::custom)?
  123|      0|                .serialize(serializer),
  124|   172k|            _ => match self {
  125|   155k|                Pointer::Values(vals) => vals.serialize(serializer),
  126|  17.1k|                Pointer::Link { cid, .. } => cid.serialize(serializer),
  127|      0|                Pointer::Dirty(_) => Err(ser::Error::custom("Cannot serialize cached values")),
  128|       |            },
  129|       |        }
  130|   172k|    }
_RNvMs3_NtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256E5cleanCs3sW5qwsMDgx_6simple:
  199|  8.39k|    pub(crate) fn clean(&mut self, conf: &Config, depth: u32) -> Result<(), Error> {
  200|  8.39k|        match self {
  201|  8.39k|            Pointer::Dirty(n) => match n.pointers.len() {
  202|      0|                0 => Err(Error::ZeroPointers),
  203|  8.39k|                _ if depth < conf.min_data_depth => {
  204|      0|                    // We are in the shallows where we don't want key-value pairs, just links,
  205|      0|                    // so as long as they are pointing at non-empty nodes we can keep them.
  206|      0|                    // The rest of the rules would move key-value pairs up.
  207|      0|                    Ok(())
  208|       |                }
  209|       |                1 => {
  210|       |                    // Node has only one pointer, swap with parent node
  211|    878|                    if let Pointer::Values(vals) = &mut n.pointers[0] {
  212|       |                        // Take child values, to ensure canonical ordering
  213|    567|                        let values = std::mem::take(vals);
  214|    567|
  215|    567|                        // move parent node up
  216|    567|                        *self = Pointer::Values(values)
  217|    311|                    }
  218|    878|                    Ok(())
  219|       |                }
  220|  7.51k|                i if 2 <= i && i <= conf.max_array_width => {
  221|  4.37k|                    // If more child values than max width, nothing to change.
  222|  4.37k|                    let mut children_len = 0;
  223|  12.3k|                    for c in n.pointers.iter() {
  224|  12.3k|                        if let Pointer::Values(vals) = c {
  225|  12.0k|                            children_len += vals.len();
  226|  12.0k|                        } else {
  227|    257|                            return Ok(());
  228|       |                        }
  229|       |                    }
  230|  4.11k|                    if children_len > conf.max_array_width {
  231|    185|                        return Ok(());
  232|  3.93k|                    }
  233|  3.93k|
  234|  3.93k|                    // Collect values from child nodes to collapse.
  235|  3.93k|                    let mut child_vals: Vec<KeyValuePair<K, V>> = n
  236|  3.93k|                        .pointers
  237|  3.93k|                        .iter_mut()
  238|  3.93k|                        .filter_map(|p| {
  239|       |                            if let Pointer::Values(kvs) = p {
  240|       |                                Some(std::mem::take(kvs))
  241|       |                            } else {
  242|       |                                None
  243|       |                            }
  244|  3.93k|                        })
  245|  3.93k|                        .flatten()
  246|  3.93k|                        .collect();
  247|  3.93k|
  248|  3.93k|                    // Sorting by key, values are inserted based on the ordering of the key itself,
  249|  3.93k|                    // so when collapsed, it needs to be ensured that this order is equal.
  250|  3.93k|                    child_vals.sort_unstable_by(|a, b| {
  251|       |                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  252|  3.93k|                    });
  253|  3.93k|
  254|  3.93k|                    // Replace link node with child values
  255|  3.93k|                    *self = Pointer::Values(child_vals);
  256|  3.93k|                    Ok(())
  257|       |                }
  258|  3.14k|                _ => Ok(()),
  259|       |            },
  260|      0|            _ => unreachable!("clean is only called on dirty pointer"),
  261|       |        }
  262|  8.39k|    }
_RNvMs3_NtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointerINtB5_7PointeryyNtNtB7_14hash_algorithm6Sha256E14from_key_valueCs3sW5qwsMDgx_6simple:
  193|  40.3k|    pub(crate) fn from_key_value(key: K, value: V) -> Self {
  194|  40.3k|        Pointer::Values(vec![KeyValuePair::new(key, value)])
  195|  40.3k|    }
_RNCNvMs3_NtCsjFyKPEBWBwj_13fvm_ipld_hamt7pointerINtB7_7PointeryyNtNtB9_14hash_algorithm6Sha256E5clean0Cs3sW5qwsMDgx_6simple:
  238|  11.3k|                        .filter_map(|p| {
  239|  11.3k|                            if let Pointer::Values(kvs) = p {
  240|  11.3k|                                Some(std::mem::take(kvs))
  241|       |                            } else {
  242|      0|                                None
  243|       |                            }
  244|  11.3k|                        })

