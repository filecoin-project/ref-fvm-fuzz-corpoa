_RNvXs1j_CshM3zqtBjApS_9arbitraryTyhENtB6_9Arbitrary9size_hintCsgnvyjDd2DBa_17fvm_ipld_bitfield:
  568|  1.14k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  1.14k|                crate::size_hint::and_all(&[
  570|  1.14k|                    <$last as Arbitrary>::size_hint(depth),
  571|  1.14k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  1.14k|                ])
  573|  1.14k|            }
_RNvXsH_CshM3zqtBjApS_9arbitraryjNtB5_9Arbitrary9size_hintCsgnvyjDd2DBa_17fvm_ipld_bitfield:
  302|    858|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    858|                    let n = mem::size_of::<$ty>();
  304|    858|                    (n, Some(n))
  305|    858|                }
_RNvXsF_CshM3zqtBjApS_9arbitraryyNtB5_9Arbitrary9size_hintCsgnvyjDd2DBa_17fvm_ipld_bitfield:
  302|  1.14k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.14k|                    let n = mem::size_of::<$ty>();
  304|  1.14k|                    (n, Some(n))
  305|  1.14k|                }
_RNvXsC_CshM3zqtBjApS_9arbitraryhNtB5_9Arbitrary9size_hintCsgnvyjDd2DBa_17fvm_ipld_bitfield:
  302|  1.14k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.14k|                    let n = mem::size_of::<$ty>();
  304|  1.14k|                    (n, Some(n))
  305|  1.14k|                }
_RNvXsC_CshM3zqtBjApS_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  1.14k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  1.14k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  1.14k|                    u.fill_buffer(&mut buf)?;
  294|  1.14k|                    let mut x: $unsigned = 0;
  295|  1.14k|                    for i in 0..mem::size_of::<$ty>() {
  296|  1.14k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  1.14k|                    }
  298|  1.14k|                    Ok(x as $ty)
  299|  1.14k|                }
_RNvXs_CshM3zqtBjApS_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  1.14k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  1.14k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  1.14k|    }
_RNvXsF_CshM3zqtBjApS_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  12.5k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  12.5k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  12.5k|                    u.fill_buffer(&mut buf)?;
  294|  12.5k|                    let mut x: $unsigned = 0;
  295|   100k|                    for i in 0..mem::size_of::<$ty>() {
  296|   100k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   100k|                    }
  298|  12.5k|                    Ok(x as $ty)
  299|  12.5k|                }

_RNCNvNtCshM3zqtBjApS_9arbitrary9size_hint3and0CsgnvyjDd2DBa_17fvm_ipld_bitfield:
   28|  3.13k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCshM3zqtBjApS_9arbitrary9size_hint3andCsgnvyjDd2DBa_17fvm_ipld_bitfield:
   26|  3.13k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.13k|    let lower = lhs.0 + rhs.0;
   28|  3.13k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.13k|    (lower, upper)
   30|  3.13k|}
_RNvNtCshM3zqtBjApS_9arbitrary9size_hint7and_allCsgnvyjDd2DBa_17fvm_ipld_bitfield:
   37|  1.14k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.14k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.14k|}
_RNCNCNvNtCshM3zqtBjApS_9arbitrary9size_hint3and00CsgnvyjDd2DBa_17fvm_ipld_bitfield:
   28|  2.28k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsgnvyjDd2DBa_17fvm_ipld_bitfield:
  292|  12.5k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  12.5k|    where
  294|  12.5k|        T: Int,
  295|  12.5k|    {
  296|  12.5k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  12.5k|        self.data = &self.data[bytes_consumed..];
  298|  12.5k|        Ok(result)
  299|  12.5k|    }
_RINvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsgnvyjDd2DBa_17fvm_ipld_bitfield:
  213|  1.14k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  1.14k|    where
  215|  1.14k|        ElementType: Arbitrary<'a>,
  216|  1.14k|    {
  217|  1.14k|        let byte_size = self.arbitrary_byte_size()?;
  218|  1.14k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  1.14k|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|  1.14k|        let elem_size = std::cmp::max(1, elem_size);
  221|  1.14k|        Ok(byte_size / elem_size)
  222|  1.14k|    }
_RINvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgnvyjDd2DBa_17fvm_ipld_bitfield:
  301|  12.5k|    fn int_in_range_impl<T>(
  302|  12.5k|        range: ops::RangeInclusive<T>,
  303|  12.5k|        mut bytes: impl Iterator<Item = u8>,
  304|  12.5k|    ) -> Result<(T, usize)>
  305|  12.5k|    where
  306|  12.5k|        T: Int,
  307|  12.5k|    {
  308|  12.5k|        let start = range.start();
  309|  12.5k|        let end = range.end();
  310|  12.5k|        assert!(
  311|  12.5k|            start <= end,
  312|  12.5k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  12.5k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  12.5k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  12.5k|        }
  320|  12.5k|
  321|  12.5k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  12.5k|        let mut result = T::Widest::ZERO;
  323|  12.5k|        let mut offset: usize = 0;
  324|       |
  325|  25.0k|        while offset < mem::size_of::<T>()
  326|  25.0k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  12.5k|        {
  328|  12.5k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  12.5k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  12.5k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  12.5k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  12.5k|            result = result % range;
  336|  12.5k|        }
  337|       |
  338|  12.5k|        Ok((
  339|  12.5k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  12.5k|            offset,
  341|  12.5k|        ))
  342|  12.5k|    }
_RNvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  13.6k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  13.6k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  13.6k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  13.6k|        for byte in buffer[n..].iter_mut() {
  453|    127|            *byte = 0;
  454|    127|        }
  455|  13.6k|        self.data = &self.data[n..];
  456|  13.6k|        Ok(())
  457|  13.6k|    }
_RNvXs1_NtCshM3zqtBjApS_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  2.96k|                fn as_widest(self) -> Self::Widest {
  768|  2.96k|                    self as $widest
  769|  2.96k|                }
_RNvXs9_NtCshM3zqtBjApS_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  50.0k|                fn as_widest(self) -> Self::Widest {
  768|  50.0k|                    self as $widest
  769|  50.0k|                }
_RNvXs5_NtCshM3zqtBjApS_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|    947|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|    947|                    <$ty>::checked_add(self, rhs)
  786|    947|                }
_RNvXs2_NtCshM3zqtBjApS_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|    205|                fn from_widest(w: Self::Widest) -> Self {
  772|    205|                    let x = <$ty>::max_value().as_widest();
  773|    205|                    (w % x) as Self
  774|    205|                }
_RINvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    742|    fn int_in_range_impl<T>(
  302|    742|        range: ops::RangeInclusive<T>,
  303|    742|        mut bytes: impl Iterator<Item = u8>,
  304|    742|    ) -> Result<(T, usize)>
  305|    742|    where
  306|    742|        T: Int,
  307|    742|    {
  308|    742|        let start = range.start();
  309|    742|        let end = range.end();
  310|    742|        assert!(
  311|    742|            start <= end,
  312|    742|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    742|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    742|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    742|        }
  320|    742|
  321|    742|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    742|        let mut result = T::Widest::ZERO;
  323|    742|        let mut offset: usize = 0;
  324|       |
  325|  1.48k|        while offset < mem::size_of::<T>()
  326|    742|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    742|        {
  328|    742|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    742|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    742|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    742|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    742|            result = result % range;
  336|    742|        }
  337|       |
  338|    742|        Ok((
  339|    742|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    742|            offset,
  341|    742|        ))
  342|    742|    }
_RNvXs2_NtCshM3zqtBjApS_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    820|                fn as_widest(self) -> Self::Widest {
  768|    820|                    self as $widest
  769|    820|                }
_RNvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    285|    pub fn new(data: &'a [u8]) -> Self {
   86|    285|        Unstructured { data }
   87|    285|    }
_RNvXsb_NtCshM3zqtBjApS_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  12.5k|                fn from_u8(b: u8) -> Self {
  777|  12.5k|                    b as Self
  778|  12.5k|                }
_RNvXs5_NtCshM3zqtBjApS_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|    947|                fn wrapping_add(self, rhs: Self) -> Self {
  789|    947|                    <$ty>::wrapping_add(self, rhs)
  790|    947|                }
_RNvXs9_NtCshM3zqtBjApS_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  12.5k|                fn from_widest(w: Self::Widest) -> Self {
  772|  12.5k|                    let x = <$ty>::max_value().as_widest();
  773|  12.5k|                    (w % x) as Self
  774|  12.5k|                }
_RNvXsb_NtCshM3zqtBjApS_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  12.5k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  12.5k|                    <$ty>::checked_add(self, rhs)
  786|  12.5k|                }
_RNvXsb_NtCshM3zqtBjApS_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  25.0k|                fn from_usize(u: usize) -> Self {
  781|  25.0k|                    u as Self
  782|  25.0k|                }
_RINvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    205|    fn int_in_range_impl<T>(
  302|    205|        range: ops::RangeInclusive<T>,
  303|    205|        mut bytes: impl Iterator<Item = u8>,
  304|    205|    ) -> Result<(T, usize)>
  305|    205|    where
  306|    205|        T: Int,
  307|    205|    {
  308|    205|        let start = range.start();
  309|    205|        let end = range.end();
  310|    205|        assert!(
  311|    205|            start <= end,
  312|    205|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    205|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    205|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    205|        }
  320|    205|
  321|    205|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    205|        let mut result = T::Widest::ZERO;
  323|    205|        let mut offset: usize = 0;
  324|       |
  325|    613|        while offset < mem::size_of::<T>()
  326|    410|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    408|        {
  328|    408|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    408|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    408|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    205|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    205|            result = result % range;
  336|    205|        }
  337|       |
  338|    205|        Ok((
  339|    205|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    205|            offset,
  341|    205|        ))
  342|    205|    }
_RNvXs1_NtCshM3zqtBjApS_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    742|                fn from_widest(w: Self::Widest) -> Self {
  772|    742|                    let x = <$ty>::max_value().as_widest();
  773|    742|                    (w % x) as Self
  774|    742|                }
_RNvMNtCshM3zqtBjApS_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  1.14k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  1.14k|        if self.data.is_empty() {
  226|    162|            Ok(0)
  227|    978|        } else if self.data.len() == 1 {
  228|     31|            self.data = &[];
  229|     31|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    947|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    742|                let bytes = 1;
  241|    742|                let max_size = self.data.len() - bytes;
  242|    742|                let (rest, for_size) = self.data.split_at(max_size);
  243|    742|                self.data = rest;
  244|    742|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|    205|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|    205|                let bytes = 2;
  247|    205|                let max_size = self.data.len() - bytes;
  248|    205|                let (rest, for_size) = self.data.split_at(max_size);
  249|    205|                self.data = rest;
  250|    205|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    947|            Ok(len)
  266|       |        }
  267|  1.14k|    }
_RNvXs5_NtCshM3zqtBjApS_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.15k|                fn from_u8(b: u8) -> Self {
  777|  1.15k|                    b as Self
  778|  1.15k|                }
_RNvXsb_NtCshM3zqtBjApS_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  12.5k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  12.5k|                    <$ty>::wrapping_add(self, rhs)
  790|  12.5k|                }
_RNvXs5_NtCshM3zqtBjApS_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  1.15k|                fn from_usize(u: usize) -> Self {
  781|  1.15k|                    u as Self
  782|  1.15k|                }

LLVMFuzzerTestOneInput:
   27|    286|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    286|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    286|    });
   32|    286|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    286|    }
   37|    286|    0
   38|    286|}
_RNCNvCs2ECRBw6klgA_13libfuzzer_sys15test_input_wrap0B3_:
   28|    286|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    286|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    286|        rust_fuzzer_test_input(data_slice);
   31|    286|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE3newB9_:
  342|  3.70k|    fn new(lhs: A, rhs: B) -> Self {
  343|  3.70k|        Self {
  344|  3.70k|            lhs: Lookahead::new(lhs),
  345|  3.70k|            rhs: Lookahead::new(rhs),
  346|  3.70k|            combinator: Default::default(),
  347|  3.70k|        }
  348|  3.70k|    }
_RNvXs6_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|   193k|    fn next(&mut self) -> Option<Self::Item> {
  311|   193k|        self.0.next()
  312|   193k|    }
_RNvXsf_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs7OAcNm5rO7b_4core7default7Default7defaultB9_:
   86|  28.5k|#[derive(Default)]
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekB9_:
  473|   154k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   154k|        self.next.as_mut()
  475|   154k|    }
_RNvXs2_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_lhs:
  225|  18.4k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  226|  18.4k|        Self::advance(lhs, rhs)
  227|  18.4k|    }
_RNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|  57.1k|    fn next(&mut self) -> Option<Self::Item> {
  388|  57.1k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  57.1k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  57.1k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  57.1k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newB9_:
  468|  7.98k|    fn new(mut iter: I) -> Self {
  469|  7.98k|        let next = iter.next();
  470|  7.98k|        Self { iter, next }
  471|  7.98k|    }
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  7.80k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|   155k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   155k|        self.next.as_mut()
  475|   155k|    }
_RNvXs6_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|  56.3k|    fn next(&mut self) -> Option<Self::Item> {
  311|  56.3k|        self.0.next()
  312|  56.3k|    }
_RNvXs2_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_lhs_tail:
  233|  22.8k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  234|  22.8k|        // the symmetric difference of a range and an empty range is just that range
  235|  22.8k|        Some(lhs)
  236|  22.8k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEE3newB9_:
  468|    285|    fn new(mut iter: I) -> Self {
  469|    285|        let next = iter.next();
  470|    285|        Self { iter, next }
  471|    285|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  28.5k|    fn new(mut iter: I) -> Self {
  469|  28.5k|        let next = iter.next();
  470|  28.5k|        Self { iter, next }
  471|  28.5k|    }
_RNvXs_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_lhs_tail:
  138|  1.10k|    fn advance_lhs_tail(&mut self, _lhs: Range<u64>) -> Option<Range<u64>> {
  139|  1.10k|        // the intersection of a range and an empty range is an empty range
  140|  1.10k|        None
  141|  1.10k|    }
_RNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|   199k|    fn next(&mut self) -> Option<Self::Item> {
  388|   199k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   199k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   199k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   199k|    }
_RNvMsa_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|  28.5k|    pub fn new(iter: I) -> Self {
  426|  28.5k|        Self {
  427|  28.5k|            iter: Lookahead::new(iter),
  428|  28.5k|        }
  429|  28.5k|    }
_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|  28.5k|    fn new(lhs: A, rhs: B) -> Self {
  343|  28.5k|        Self {
  344|  28.5k|            lhs: Lookahead::new(lhs),
  345|  28.5k|            rhs: Lookahead::new(rhs),
  346|  28.5k|            combinator: Default::default(),
  347|  28.5k|        }
  348|  28.5k|    }
_RNvMs1_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifference7advance:
  201|  33.5k|    fn advance(left: Range<u64>, right: &mut Range<u64>) -> Range<u64> {
  202|  33.5k|        if left.start <= right.start {
  203|       |            // left:       xxxx--      xx----
  204|       |            // right:      --xxxx  or  ----xx
  205|       |            // output:     xx----      xx----
  206|       |            // new right:  ----xx      ----xx
  207|       |
  208|  22.7k|            let difference = left.start..cmp::min(left.end, right.start);
  209|  22.7k|            right.start = cmp::max(right.start, left.end);
  210|  22.7k|            difference
  211|       |        } else {
  212|       |            // left:       --xx--
  213|       |            // right:      xxxxxx
  214|       |            // output:     xx----
  215|       |            // new right:  ----xx
  216|       |
  217|  10.8k|            let difference = right.start..left.start;
  218|  10.8k|            right.start = left.end;
  219|  10.8k|            difference
  220|       |        }
  221|  33.5k|    }
_RNvMsa_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEE3newB9_:
  425|    285|    pub fn new(iter: I) -> Self {
  426|    285|        Self {
  427|    285|            iter: Lookahead::new(iter),
  428|    285|        }
  429|    285|    }
_RNvMs3_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_3Cut6offset:
  256|  7.52k|    fn offset(&self, range: Range<u64>) -> Range<u64> {
  257|  7.52k|        (range.start - self.offset)..(range.end - self.offset)
  258|  7.52k|    }
_RNvXsb_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|   172k|    fn next(&mut self) -> Option<Self::Item> {
  439|   172k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   155k|        while let Some(next) = self.iter.peek() {
  444|   143k|            if next.start > range.end {
  445|   143k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   155k|        Some(range)
  453|   172k|    }
_RNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|    285|    fn next(&mut self) -> Option<Self::Item> {
  388|    285|        // we repeatedly compute the next range until we find one that is non-empty
  389|    285|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|    285|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|    285|    }
_RNvXNtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|  6.51k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|  6.51k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|  6.51k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  57.0k|    fn new(mut iter: I) -> Self {
  469|  57.0k|        let next = iter.next();
  470|  57.0k|        Self { iter, next }
  471|  57.0k|    }
_RNvXsi_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtNtCs7OAcNm5rO7b_4core7default7Default7defaultB9_:
  195|  3.70k|#[derive(Default)]
_RNvMs5_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutE3newB9_:
  297|    285|    pub fn new(a: A, b: B) -> Self {
  298|    285|        Self(Merge::new(_Combine::new(a, b)))
  299|    285|    }
_RNvXsb_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|   193k|    fn next(&mut self) -> Option<Self::Item> {
  439|   193k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   171k|        while let Some(next) = self.iter.peek() {
  444|   155k|            if next.start > range.end {
  445|   155k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   171k|        Some(range)
  453|   193k|    }
_RNvXs_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_lhs:
  126|  8.89k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  127|  8.89k|        // lhs:     xx----      xxxx--      --xx--
  128|  8.89k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  129|  8.89k|        // output:  ------      --xx--      --xx--
  130|  8.89k|
  131|  8.89k|        cmp::max(lhs.start, rhs.start)..lhs.end
  132|  8.89k|    }
_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE10next_rangeB9_:
  353|  69.2k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  69.2k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  33.5k|            (Some(lhs), Some(rhs)) => {
  356|  33.5k|                // if both iterators are non-empty, we advance the one whichever's
  357|  33.5k|                // corresponding range has a smaller upper bound
  358|  33.5k|                if lhs.end <= rhs.end {
  359|  18.4k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  15.0k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  22.8k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  9.16k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  3.70k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  65.5k|        if advance_lhs {
  370|  41.3k|            self.lhs.next();
  371|  41.3k|        } else {
  372|  24.2k|            self.rhs.next();
  373|  24.2k|        }
  374|       |
  375|  65.5k|        range
  376|  69.2k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|  28.5k|    fn new(mut iter: I) -> Self {
  469|  28.5k|        let next = iter.next();
  470|  28.5k|        Self { iter, next }
  471|  28.5k|    }
_RNvXs0_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|   252k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|   252k|        // the difference between a range and an empty range is just that range
  183|   252k|        Some(lhs)
  184|   252k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  28.5k|    fn new(mut iter: I) -> Self {
  469|  28.5k|        let next = iter.next();
  470|  28.5k|        Self { iter, next }
  471|  28.5k|    }
_RNvXsh_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs7OAcNm5rO7b_4core7default7Default7defaultB9_:
  151|  28.5k|#[derive(Default)]
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  65.5k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXNtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  7.08k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  7.08k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  7.08k|        // to ensure that the lower bounds are monotonically increasing
   93|  7.08k|        //
   94|  7.08k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  7.08k|        // `xxxx--` and then `xxxxxx`, not
   96|  7.08k|        // `--xx--` and then `xxxxxx`
   97|  7.08k|        //
   98|  7.08k|        // lhs:     xx----      xxxx--      --xx--
   99|  7.08k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  7.08k|        // output:  xx----      xxxx--      xxxx--
  101|  7.08k|
  102|  7.08k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  7.08k|    }
_RNvMs5_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  28.5k|    pub fn new(a: A, b: B) -> Self {
  298|  28.5k|        Self(Merge::new(_Combine::new(a, b)))
  299|  28.5k|    }
_RNvXs_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_rhs_tail:
  143|  1.00k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  144|  1.00k|        None
  145|  1.00k|    }
_RNvXse_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|   172k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   172k|        let next = self.next.take()?;
  484|   155k|        self.next = self.iter.next();
  485|   155k|        Some(next)
  486|   172k|    }
_RNvXs2_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_rhs_tail:
  238|  9.16k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  239|  9.16k|        Some(rhs)
  240|  9.16k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE4peekB9_:
  473|  53.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  53.4k|        self.next.as_mut()
  475|  53.4k|    }
_RNvMsa_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEE3newB9_:
  425|  3.70k|    pub fn new(iter: I) -> Self {
  426|  3.70k|        Self {
  427|  3.70k|            iter: Lookahead::new(iter),
  428|  3.70k|        }
  429|  3.70k|    }
_RNvXs0_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|  6.08k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|  6.08k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|  6.08k|        // to avoid it from returning invalid bits in the next iteration
  166|  6.08k|        //
  167|  6.08k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|  6.08k|        // `------` and then `----xx`, not
  169|  6.08k|        // `------` and then `--xxxx`
  170|  6.08k|        //
  171|  6.08k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|  6.08k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|  6.08k|        // output:   ------      ------      xx----
  174|  6.08k|        // new lhs:  ----xx      ----xx      ----xx
  175|  6.08k|
  176|  6.08k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|  6.08k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|  6.08k|        difference
  179|  6.08k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|   199k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   199k|        self.next.as_mut()
  475|   199k|    }
_RNvXse_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  481|  73.3k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  73.3k|        let next = self.next.take()?;
  484|  73.3k|        self.next = self.iter.next();
  485|  73.3k|        Some(next)
  486|  73.3k|    }
_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|   199k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   199k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   176k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  23.4k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   176k|        if advance_lhs {
  370|   176k|            self.lhs.next();
  371|   176k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   176k|        range
  376|   199k|    }
_RNvMs5_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceE3newB9_:
  297|  3.70k|    pub fn new(a: A, b: B) -> Self {
  298|  3.70k|        Self(Merge::new(_Combine::new(a, b)))
  299|  3.70k|    }
_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|   184k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   184k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   164k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  19.5k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   164k|        if advance_lhs {
  370|   164k|            self.lhs.next();
  371|   164k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   164k|        range
  376|   184k|    }
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|   199k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs0_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|    427|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|    427|        // the difference between an empty range and a range is an empty range
  188|    427|        None
  189|    427|    }
_RNvXsb_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|  56.3k|    fn next(&mut self) -> Option<Self::Item> {
  439|  56.3k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  53.4k|        while let Some(next) = self.iter.peek() {
  444|  50.2k|            if next.start > range.end {
  445|  49.4k|                break;
  446|    805|            }
  447|    805|
  448|    805|            range.end = cmp::max(range.end, next.end);
  449|    805|            self.iter.next();
  450|       |        }
  451|       |
  452|  52.6k|        Some(range)
  453|  56.3k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   171k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   171k|        self.next.as_mut()
  475|   171k|    }
_RNvXsj_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtNtCs7OAcNm5rO7b_4core7default7Default7defaultB9_:
  247|    285|#[derive(Default)]
_RNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|   184k|    fn next(&mut self) -> Option<Self::Item> {
  388|   184k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   184k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   184k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   184k|    }
_RNvXse_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|   193k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   193k|        let next = self.next.take()?;
  484|   171k|        self.next = self.iter.next();
  485|   171k|        Some(next)
  486|   193k|    }
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  7.52k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXse_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|    285|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|    285|        let next = self.next.take()?;
  484|      0|        self.next = self.iter.next();
  485|      0|        Some(next)
  486|    285|    }
_RNvXs6_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|    285|    fn next(&mut self) -> Option<Self::Item> {
  311|    285|        self.0.next()
  312|    285|    }
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  69.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|  28.5k|    fn new(mut iter: I) -> Self {
  469|  28.5k|        let next = iter.next();
  470|  28.5k|        Self { iter, next }
  471|  28.5k|    }
_RNvMs5_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|  28.5k|    pub fn new(a: A, b: B) -> Self {
  298|  28.5k|        Self(Merge::new(_Combine::new(a, b)))
  299|  28.5k|    }
_RNvXse_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|   164k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   164k|        let next = self.next.take()?;
  484|   164k|        self.next = self.iter.next();
  485|   164k|        Some(next)
  486|   164k|    }
_RNvXse_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|   176k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   176k|        let next = self.next.take()?;
  484|   176k|        self.next = self.iter.next();
  485|   176k|        Some(next)
  486|   176k|    }
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|   184k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXNtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|   247k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|   247k|        // the union of a range and an empty range is just that range
  111|   247k|        Some(lhs)
  112|   247k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE3newB9_:
  468|  3.70k|    fn new(mut iter: I) -> Self {
  469|  3.70k|        let next = iter.next();
  470|  3.70k|        Self { iter, next }
  471|  3.70k|    }
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|   176k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXse_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|  57.1k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  57.1k|        let next = self.next.take()?;
  484|  53.4k|        self.next = self.iter.next();
  485|  53.4k|        Some(next)
  486|  57.1k|    }
_RNvXs0_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|  7.23k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|  7.23k|        // lhs:     xx----      xxxx--      --xx--
  157|  7.23k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|  7.23k|        // output:  xx----      xx----      ------
  159|  7.23k|
  160|  7.23k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|  7.23k|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   184k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   184k|        self.next.as_mut()
  475|   184k|    }
_RNvXs4_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_rhs:
  267|  3.63k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  268|  3.63k|        let cut = self.offset(lhs.start..cmp::min(lhs.end, rhs.start));
  269|  3.63k|        lhs.start = cmp::max(lhs.start, rhs.end);
  270|  3.63k|        self.offset += rhs.size();
  271|  3.63k|        cut
  272|  3.63k|    }
_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE3newB9_:
  342|    285|    fn new(lhs: A, rhs: B) -> Self {
  343|    285|        Self {
  344|    285|            lhs: Lookahead::new(lhs),
  345|    285|            rhs: Lookahead::new(rhs),
  346|    285|            combinator: Default::default(),
  347|    285|        }
  348|    285|    }
_RNvMsd_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|   384k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   384k|        self.next.as_mut()
  475|   384k|    }
_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE10next_rangeB9_:
  353|  7.80k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.80k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  7.52k|            (Some(lhs), Some(rhs)) => {
  356|  7.52k|                // if both iterators are non-empty, we advance the one whichever's
  357|  7.52k|                // corresponding range has a smaller upper bound
  358|  7.52k|                if lhs.end <= rhs.end {
  359|  3.89k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  3.63k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|      0|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    262|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|     23|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.78k|        if advance_lhs {
  370|  3.89k|            self.lhs.next();
  371|  3.89k|        } else {
  372|  3.89k|            self.rhs.next();
  373|  3.89k|        }
  374|       |
  375|  7.78k|        range
  376|  7.80k|    }
_RNvMs8_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  28.5k|    fn new(lhs: A, rhs: B) -> Self {
  343|  28.5k|        Self {
  344|  28.5k|            lhs: Lookahead::new(lhs),
  345|  28.5k|            rhs: Lookahead::new(rhs),
  346|  28.5k|            combinator: Default::default(),
  347|  28.5k|        }
  348|  28.5k|    }
_RNvXs4_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_lhs:
  262|  3.89k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  263|  3.89k|        // apart from the offset, these implementations are identical to those of the `Difference` combinator
  264|  3.89k|        self.offset(lhs.start..cmp::min(lhs.end, rhs.start))
  265|  3.89k|    }
_RNvXNtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|  7.65k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|  7.65k|        Some(rhs)
  116|  7.65k|    }
_RNvXs4_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator16advance_rhs_tail:
  278|    262|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  279|    262|        None
  280|    262|    }
_RNCNvXs9_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|   164k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs2_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_rhs:
  229|  15.0k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  230|  15.0k|        Self::advance(rhs, lhs)
  231|  15.0k|    }
_RNvXsb_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|    285|    fn next(&mut self) -> Option<Self::Item> {
  439|    285|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|      0|        while let Some(next) = self.iter.peek() {
  444|      0|            if next.start > range.end {
  445|      0|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|      0|        Some(range)
  453|    285|    }
_RNvXs6_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|   172k|    fn next(&mut self) -> Option<Self::Item> {
  311|   172k|        self.0.next()
  312|   172k|    }
_RNvXs_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_rhs:
  134|  7.84k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  135|  7.84k|        cmp::max(lhs.start, rhs.start)..rhs.end
  136|  7.84k|    }
_RNvMsa_NtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|  28.5k|    pub fn new(iter: I) -> Self {
  426|  28.5k|        Self {
  427|  28.5k|            iter: Lookahead::new(iter),
  428|  28.5k|        }
  429|  28.5k|    }

_RINvMs2_NtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|  28.5k|    pub fn new<II>(iter: II) -> Self
  140|  28.5k|    where
  141|  28.5k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  28.5k|    {
  143|  28.5k|        Self(iter.into_iter())
  144|  28.5k|    }
_RINvYINtNtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator3cutB3_EBa_:
   53|    285|    fn cut<R: RangeIterator>(self, other: R) -> Combine<Self, R, Cut> {
   54|    285|        Combine::new(self, other)
   55|    285|    }
_RNvXs3_NtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  57.0k|    fn next(&mut self) -> Option<Self::Item> {
  154|  57.0k|        self.0.next()
  155|  57.0k|    }
_RINvNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEEB4_:
  163|  57.0k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  57.0k|    let mut iter = bits.into_iter().peekable();
  165|  57.0k|
  166|  57.0k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  57.0k|    }))
  180|  57.0k|}
_RNvXs3_NtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   204k|    fn next(&mut self) -> Option<Self::Item> {
  154|   204k|        self.0.next()
  155|   204k|    }
_RINvYINtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  28.5k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  28.5k|        Combine::new(self, other)
   23|  28.5k|    }
_RNCINvNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  57.0k|    Ranges::new(iter::from_fn(move || {
  167|  57.0k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  57.0k|    }))
_RINvYINtNtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|  28.5k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  28.5k|        Combine::new(self, other)
   33|  28.5k|    }
_RINvMs2_NtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  57.0k|    pub fn new<II>(iter: II) -> Self
  140|  57.0k|    where
  141|  57.0k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  57.0k|    {
  143|  57.0k|        Self(iter.into_iter())
  144|  57.0k|    }
_RINvYINtNtNtCsgnvyjDd2DBa_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator20symmetric_differenceB3_EBa_:
   36|  3.70k|    fn symmetric_difference<R: RangeIterator>(
   37|  3.70k|        self,
   38|  3.70k|        other: R,
   39|  3.70k|    ) -> Combine<Self, R, SymmetricDifference> {
   40|  3.70k|        Combine::new(self, other)
   41|  3.70k|    }

_RNvMs4_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|  28.5k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|  28.5k|        iter::Ranges::new(self.ranges.iter().cloned())
  281|  28.5k|    }
_RNvXsi_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs7OAcNm5rO7b_4core7default7Default7defaultB5_:
   42|  5.70k|#[derive(Debug, Default, Clone)]
_RINvMs4_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_3CutEEB6_:
  141|    285|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  142|    285|        Self {
  143|    285|            ranges: iter.collect(),
  144|    285|            ..Default::default()
  145|    285|        }
  146|    285|    }
_RNvXsb_CsgnvyjDd2DBa_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs7OAcNm5rO7b_4core3ops3bit6BitXor6bitxor:
  400|  3.70k|    fn bitxor(self, rhs: &BitField) -> Self::Output {
  401|  3.70k|        BitField::from_ranges(self.ranges().symmetric_difference(rhs.ranges()))
  402|  3.70k|    }
_RINvMs4_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs7OAcNm5rO7b_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCshBxrGJJbA0f_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_19SymmetricDifferenceEEB6_:
  141|  3.70k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  142|  3.70k|        Self {
  143|  3.70k|            ranges: iter.collect(),
  144|  3.70k|            ..Default::default()
  145|  3.70k|        }
  146|  3.70k|    }
_RNvXs_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCs7OAcNm5rO7b_4core3cmp9PartialEq2eq:
   53|  4.27k|    fn eq(&self, other: &Self) -> bool {
   54|  4.27k|        Iterator::eq(self.ranges(), other.ranges())
   55|  4.27k|    }
_RNvMs4_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB5_8BitField3new:
  136|    570|    pub fn new() -> Self {
  137|    570|        Self::default()
  138|    570|    }
_RNvMs4_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|  28.5k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|  28.5k|        self.inner_ranges()
  287|  28.5k|            .union(ranges_from_bits(self.set.iter().copied()))
  288|  28.5k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|  28.5k|    }
_RNvMs4_CsgnvyjDd2DBa_17fvm_ipld_bitfieldNtB5_8BitField3cut:
  329|    285|    pub fn cut(&self, other: &Self) -> Self {
  330|    285|        Self::from_ranges(self.ranges().cut(other.ranges()))
  331|    285|    }

_RNvXNtCsgnvyjDd2DBa_17fvm_ipld_bitfield5rangeINtNtNtCs7OAcNm5rO7b_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  3.63k|    fn size(&self) -> Self::Idx {
   15|  3.63k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  3.63k|            self.end - self.start
   19|       |        }
   20|  3.63k|    }

_RNvXs0_NtCsgnvyjDd2DBa_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCshM3zqtBjApS_9arbitrary9Arbitrary9arbitrary:
  113|  1.14k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|  1.14k|        let mut next_value: bool = bool::arbitrary(u)?;
  115|  1.14k|        let mut ranges = Vec::new();
  116|  1.14k|        let mut index = 0u64;
  117|  1.14k|        let mut total_len: u64 = 0;
  118|       |
  119|  1.14k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|  1.14k|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  12.5k|            let len = u64::arbitrary(u)?;
  124|  12.5k|            let shift = u.int_in_range(0..=63)?;
  125|  12.5k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  12.5k|
  127|  12.5k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  12.5k|            if ovf {
  129|     64|                break;
  130|  12.4k|            }
  131|  12.4k|            total_len = new_total_len;
  132|  12.4k|            let start = index;
  133|  12.4k|            index += len;
  134|  12.4k|            let end = index;
  135|  12.4k|
  136|  12.4k|            if next_value {
  137|  6.38k|                ranges.push(start..end);
  138|  6.38k|            }
  139|       |
  140|  12.4k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|  1.14k|        Ok(Self {
  144|  1.14k|            ranges,
  145|  1.14k|            ..Default::default()
  146|  1.14k|        })
  147|  1.14k|    }
_RNvXs0_NtCsgnvyjDd2DBa_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCshM3zqtBjApS_9arbitrary9Arbitrary9size_hint:
  149|    858|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    858|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    858|    }

