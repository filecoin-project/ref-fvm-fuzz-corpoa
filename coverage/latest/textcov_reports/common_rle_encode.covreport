_RNvXsa_Cs2PBiP67Bzq8_9arbitraryINtNtCsQnwimuuiBo_5alloc3vec3VecNtCsiaJzsQDcFwo_10rle_encode9OperationENtB5_9Arbitrary9size_hintB11_:
  687|    578|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    578|        (0, None)
  689|    578|    }
_RNvXsI_Cs2PBiP67Bzq8_9arbitraryyNtB5_9Arbitrary9size_hintCsiaJzsQDcFwo_10rle_encode:
  320|  1.15k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  1.15k|                    let n = mem::size_of::<$ty>();
  322|  1.15k|                    (n, Some(n))
  323|  1.15k|                }
_RNvYyNtCs2PBiP67Bzq8_9arbitrary9Arbitrary19arbitrary_take_restCsiaJzsQDcFwo_10rle_encode:
  189|    474|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    474|        Self::arbitrary(&mut u)
  191|    474|    }
_RNvXsH_Cs2PBiP67Bzq8_9arbitrarymNtB5_9Arbitrary9size_hintCsiaJzsQDcFwo_10rle_encode:
  320|    577|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    577|                    let n = mem::size_of::<$ty>();
  322|    577|                    (n, Some(n))
  323|    577|                }
_RNvXs1m_Cs2PBiP67Bzq8_9arbitraryTNtCs6GSxvYoZaGB_17fvm_ipld_bitfield8BitFieldINtNtCsQnwimuuiBo_5alloc3vec3VecNtCsiaJzsQDcFwo_10rle_encode9OperationEENtB6_9Arbitrary19arbitrary_take_restB1L_:
  579|    577|            fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  580|    577|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  581|    577|                let $last = $last::arbitrary_take_rest(u)?;
  582|    577|                Ok(($($xs,)* $last,))
  583|    577|            }
_RNvXs1m_Cs2PBiP67Bzq8_9arbitraryTNtCs6GSxvYoZaGB_17fvm_ipld_bitfield8BitFieldINtNtCsQnwimuuiBo_5alloc3vec3VecNtCsiaJzsQDcFwo_10rle_encode9OperationEENtB6_9Arbitrary9size_hintB1L_:
  586|    578|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  587|    578|                crate::size_hint::and_all(&[
  588|    578|                    <$last as Arbitrary>::size_hint(depth),
  589|    578|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  590|    578|                ])
  591|    578|            }
_RNvXsa_Cs2PBiP67Bzq8_9arbitraryINtNtCsQnwimuuiBo_5alloc3vec3VecNtCsiaJzsQDcFwo_10rle_encode9OperationENtB5_9Arbitrary19arbitrary_take_restB11_:
  683|    577|        u.arbitrary_take_rest_iter()?.collect()
  684|    577|    }
_RNvXsI_Cs2PBiP67Bzq8_9arbitraryyNtB5_9Arbitrary9size_hintCs6GSxvYoZaGB_17fvm_ipld_bitfield:
  320|    577|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    577|                    let n = mem::size_of::<$ty>();
  322|    577|                    (n, Some(n))
  323|    577|                }
_RNvXsK_Cs2PBiP67Bzq8_9arbitraryjNtB5_9Arbitrary9size_hintCs6GSxvYoZaGB_17fvm_ipld_bitfield:
  320|    578|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    578|                    let n = mem::size_of::<$ty>();
  322|    578|                    (n, Some(n))
  323|    578|                }
_RNvXs1m_Cs2PBiP67Bzq8_9arbitraryTyhENtB6_9Arbitrary9size_hintCs6GSxvYoZaGB_17fvm_ipld_bitfield:
  586|    577|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  587|    577|                crate::size_hint::and_all(&[
  588|    577|                    <$last as Arbitrary>::size_hint(depth),
  589|    577|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  590|    577|                ])
  591|    577|            }
_RNvXsF_Cs2PBiP67Bzq8_9arbitraryhNtB5_9Arbitrary9size_hintCs6GSxvYoZaGB_17fvm_ipld_bitfield:
  320|    577|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    577|                    let n = mem::size_of::<$ty>();
  322|    577|                    (n, Some(n))
  323|    577|                }
_RNvXsI_Cs2PBiP67Bzq8_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  35.2k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  35.2k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  35.2k|                    u.fill_buffer(&mut buf)?;
  312|  35.2k|                    let mut x: $unsigned = 0;
  313|   282k|                    for i in 0..mem::size_of::<$ty>() {
  314|   282k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   282k|                    }
  316|  35.2k|                    Ok(x as $ty)
  317|  35.2k|                }
_RNvXsH_Cs2PBiP67Bzq8_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  29.7k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  29.7k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  29.7k|                    u.fill_buffer(&mut buf)?;
  312|  29.7k|                    let mut x: $unsigned = 0;
  313|   118k|                    for i in 0..mem::size_of::<$ty>() {
  314|   118k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   118k|                    }
  316|  29.7k|                    Ok(x as $ty)
  317|  29.7k|                }
_RNvXs_Cs2PBiP67Bzq8_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|    577|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|    577|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|    577|    }
_RNvXsF_Cs2PBiP67Bzq8_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|    577|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|    577|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|    577|                    u.fill_buffer(&mut buf)?;
  312|    577|                    let mut x: $unsigned = 0;
  313|    577|                    for i in 0..mem::size_of::<$ty>() {
  314|    577|                        x |= buf[i] as $unsigned << (i * 8);
  315|    577|                    }
  316|    577|                    Ok(x as $ty)
  317|    577|                }

_RNCNvNtCs2PBiP67Bzq8_9arbitrary9size_hint3and0CsiaJzsQDcFwo_10rle_encode:
   28|  2.30k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs2PBiP67Bzq8_9arbitrary9size_hint15recursion_guardNCNvXNvCsiaJzsQDcFwo_10rle_encode1__NtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   12|    577|pub fn recursion_guard(
   13|    577|    depth: usize,
   14|    577|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    577|) -> (usize, Option<usize>) {
   16|    577|    const MAX_DEPTH: usize = 20;
   17|    577|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    577|        f(depth + 1)
   21|       |    }
   22|    577|}
_RNvNtCs2PBiP67Bzq8_9arbitrary9size_hint2orCsiaJzsQDcFwo_10rle_encode:
   44|    577|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|    577|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|    577|    let upper = lhs
   47|    577|        .1
   48|    577|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|    577|    (lower, upper)
   50|    577|}
_RNCNCNvNtCs2PBiP67Bzq8_9arbitrary9size_hint3and00CsiaJzsQDcFwo_10rle_encode:
   28|  1.73k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs2PBiP67Bzq8_9arbitrary9size_hint6or_allCsiaJzsQDcFwo_10rle_encode:
   58|    577|    if let Some(head) = hints.first().copied() {
   59|    577|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    577|}
_RNvNtCs2PBiP67Bzq8_9arbitrary9size_hint7and_allCsiaJzsQDcFwo_10rle_encode:
   37|  1.73k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.73k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.73k|}
_RNCNCNvNtCs2PBiP67Bzq8_9arbitrary9size_hint2or00CsiaJzsQDcFwo_10rle_encode:
   48|    577|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCs2PBiP67Bzq8_9arbitrary9size_hint3andCsiaJzsQDcFwo_10rle_encode:
   26|  2.88k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.88k|    let lower = lhs.0 + rhs.0;
   28|  2.88k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.88k|    (lower, upper)
   30|  2.88k|}
_RNCNvNtCs2PBiP67Bzq8_9arbitrary9size_hint2or0CsiaJzsQDcFwo_10rle_encode:
   48|    577|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCs2PBiP67Bzq8_9arbitrary9size_hint3and0Cs6GSxvYoZaGB_17fvm_ipld_bitfield:
   28|  1.73k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs2PBiP67Bzq8_9arbitrary9size_hint3andCs6GSxvYoZaGB_17fvm_ipld_bitfield:
   26|  1.73k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  1.73k|    let lower = lhs.0 + rhs.0;
   28|  1.73k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  1.73k|    (lower, upper)
   30|  1.73k|}
_RNCNCNvNtCs2PBiP67Bzq8_9arbitrary9size_hint3and00Cs6GSxvYoZaGB_17fvm_ipld_bitfield:
   28|  1.15k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs2PBiP67Bzq8_9arbitrary9size_hint7and_allCs6GSxvYoZaGB_17fvm_ipld_bitfield:
   37|    577|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    577|    hints.iter().copied().fold((0, Some(0)), and)
   39|    577|}

_RNvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsiaJzsQDcFwo_10rle_encode:
  132|  29.7k|    pub fn is_empty(&self) -> bool {
  133|  29.7k|        self.len() == 0
  134|  29.7k|    }
_RNvXs0_NtCs2PBiP67Bzq8_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCsiaJzsQDcFwo_10rle_encode9OperationENtNtNtNtCs390FhxcX5GJ_4core4iter6traits8iterator8Iterator4nextB1e_:
  746|  30.2k|        if let Some(mut u) = self.u.take() {
  747|  29.8k|            if self.size == 1 {
  748|    474|                Some(Arbitrary::arbitrary_take_rest(u))
  749|  29.3k|            } else if self.size == 0 {
  750|    103|                None
  751|       |            } else {
  752|  29.2k|                self.size -= 1;
  753|  29.2k|                let ret = Arbitrary::arbitrary(&mut u);
  754|  29.2k|                self.u = Some(u);
  755|  29.2k|                Some(ret)
  756|       |            }
  757|       |        } else {
  758|    474|            None
  759|       |        }
  760|  30.2k|    }
_RNvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB2_12Unstructured3lenCsiaJzsQDcFwo_10rle_encode:
  108|  30.2k|    pub fn len(&self) -> usize {
  109|  30.2k|        self.data.len()
  110|  30.2k|    }
_RINvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCsiaJzsQDcFwo_10rle_encode9OperationEB1s_:
  620|    577|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|    577|        self,
  622|    577|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|    577|        let (lower, upper) = ElementType::size_hint(0);
  624|    577|
  625|    577|        let elem_size = upper.unwrap_or(lower * 2);
  626|    577|        let elem_size = std::cmp::max(1, elem_size);
  627|    577|        let size = self.len() / elem_size;
  628|    577|        Ok(ArbitraryTakeRestIter {
  629|    577|            size,
  630|    577|            u: Some(self),
  631|    577|            _marker: PhantomData,
  632|    577|        })
  633|    577|    }
_RINvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs6GSxvYoZaGB_17fvm_ipld_bitfield:
  302|  5.57k|    fn int_in_range_impl<T>(
  303|  5.57k|        range: ops::RangeInclusive<T>,
  304|  5.57k|        mut bytes: impl Iterator<Item = u8>,
  305|  5.57k|    ) -> Result<(T, usize)>
  306|  5.57k|    where
  307|  5.57k|        T: Int,
  308|  5.57k|    {
  309|  5.57k|        let start = *range.start();
  310|  5.57k|        let end = *range.end();
  311|  5.57k|        assert!(
  312|  5.57k|            start <= end,
  313|  5.57k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|  5.57k|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  5.57k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  5.57k|        }
  321|  5.57k|
  322|  5.57k|        // From here on out we work with the unsigned representation. All of the
  323|  5.57k|        // operations performed below work out just as well whether or not `T`
  324|  5.57k|        // is a signed or unsigned integer.
  325|  5.57k|        let start = start.to_unsigned();
  326|  5.57k|        let end = end.to_unsigned();
  327|  5.57k|
  328|  5.57k|        let delta = end.wrapping_sub(start);
  329|  5.57k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  5.57k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  5.57k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  11.1k|        while (bytes_consumed < mem::size_of::<T>())
  339|  11.1k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  5.57k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  5.57k|                Some(b) => b,
  344|  5.57k|            };
  345|  5.57k|            bytes_consumed += 1;
  346|  5.57k|
  347|  5.57k|            // Combine this byte into our arbitrary integer, but avoid
  348|  5.57k|            // overflowing the shift for `u8` and `i8`.
  349|  5.57k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  5.57k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  5.57k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  5.57k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  5.57k|        let result = start.wrapping_add(offset);
  365|  5.57k|
  366|  5.57k|        // And convert back to our maybe-signed representation.
  367|  5.57k|        let result = T::from_unsigned(result);
  368|  5.57k|        debug_assert!(*range.start() <= result);
  369|  5.57k|        debug_assert!(result <= *range.end());
  370|       |
  371|  5.57k|        Ok((result, bytes_consumed))
  372|  5.57k|    }
_RINvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECs6GSxvYoZaGB_17fvm_ipld_bitfield:
  293|  5.57k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  5.57k|    where
  295|  5.57k|        T: Int,
  296|  5.57k|    {
  297|  5.57k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  5.57k|        self.data = &self.data[bytes_consumed..];
  299|  5.57k|        Ok(result)
  300|  5.57k|    }
_RINvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECs6GSxvYoZaGB_17fvm_ipld_bitfield:
  213|    577|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    577|    where
  215|    577|        ElementType: Arbitrary<'a>,
  216|    577|    {
  217|    577|        let byte_size = self.arbitrary_byte_size()?;
  218|    577|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    577|        let elem_size = upper.unwrap_or(lower * 2);
  220|    577|        let elem_size = std::cmp::max(1, elem_size);
  221|    577|        Ok(byte_size / elem_size)
  222|    577|    }
_RNvXs2_NtCs2PBiP67Bzq8_9arbitrary12unstructuredtNtB5_3Int10from_usize:
  840|    566|                fn from_usize(u: usize) -> Self {
  841|    566|                    u as Self
  842|    566|                }
_RNvXs3_NtCs2PBiP67Bzq8_9arbitrary12unstructuredmNtB5_3Int10from_usize:
  840|  11.1k|                fn from_usize(u: usize) -> Self {
  841|  11.1k|                    u as Self
  842|  11.1k|                }
_RNvXs1_NtCs2PBiP67Bzq8_9arbitrary12unstructuredhNtB5_3Int13from_unsigned:
  860|    294|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|    294|                    unsigned as Self
  862|    294|                }
_RNvXs2_NtCs2PBiP67Bzq8_9arbitrary12unstructuredtNtB5_3Int13from_unsigned:
  860|    283|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|    283|                    unsigned as Self
  862|    283|                }
_RNvXs1_NtCs2PBiP67Bzq8_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  844|    293|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|    293|                    <$ty>::checked_add(self, rhs)
  846|    293|                }
_RNvXs2_NtCs2PBiP67Bzq8_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  844|    283|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|    283|                    <$ty>::checked_add(self, rhs)
  846|    283|                }
_RNvXs3_NtCs2PBiP67Bzq8_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  844|  5.57k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  5.57k|                    <$ty>::checked_add(self, rhs)
  846|  5.57k|                }
_RNvXs1_NtCs2PBiP67Bzq8_9arbitrary12unstructuredhNtB5_3Int11to_unsigned:
  856|    588|                fn to_unsigned(self) -> Self::Unsigned {
  857|    588|                    self as $unsigned_ty
  858|    588|                }
_RNvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    577|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    577|        if self.data.is_empty() {
  226|      0|            Ok(0)
  227|    577|        } else if self.data.len() == 1 {
  228|      0|            self.data = &[];
  229|      0|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    577|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    294|                let bytes = 1;
  242|    294|                let max_size = self.data.len() - bytes;
  243|    294|                let (rest, for_size) = self.data.split_at(max_size);
  244|    294|                self.data = rest;
  245|    294|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|    283|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|    283|                let bytes = 2;
  248|    283|                let max_size = self.data.len() - bytes;
  249|    283|                let (rest, for_size) = self.data.split_at(max_size);
  250|    283|                self.data = rest;
  251|    283|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    577|            Ok(len)
  267|       |        }
  268|    577|    }
_RINvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    294|    fn int_in_range_impl<T>(
  303|    294|        range: ops::RangeInclusive<T>,
  304|    294|        mut bytes: impl Iterator<Item = u8>,
  305|    294|    ) -> Result<(T, usize)>
  306|    294|    where
  307|    294|        T: Int,
  308|    294|    {
  309|    294|        let start = *range.start();
  310|    294|        let end = *range.end();
  311|    294|        assert!(
  312|    294|            start <= end,
  313|    294|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    294|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    294|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    294|        }
  321|    294|
  322|    294|        // From here on out we work with the unsigned representation. All of the
  323|    294|        // operations performed below work out just as well whether or not `T`
  324|    294|        // is a signed or unsigned integer.
  325|    294|        let start = start.to_unsigned();
  326|    294|        let end = end.to_unsigned();
  327|    294|
  328|    294|        let delta = end.wrapping_sub(start);
  329|    294|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    294|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    294|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    588|        while (bytes_consumed < mem::size_of::<T>())
  339|    294|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    294|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    294|                Some(b) => b,
  344|    294|            };
  345|    294|            bytes_consumed += 1;
  346|    294|
  347|    294|            // Combine this byte into our arbitrary integer, but avoid
  348|    294|            // overflowing the shift for `u8` and `i8`.
  349|    294|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|    294|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    294|        let offset = if delta == T::Unsigned::MAX {
  357|      1|            arbitrary_int
  358|       |        } else {
  359|    293|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    294|        let result = start.wrapping_add(offset);
  365|    294|
  366|    294|        // And convert back to our maybe-signed representation.
  367|    294|        let result = T::from_unsigned(result);
  368|    294|        debug_assert!(*range.start() <= result);
  369|    294|        debug_assert!(result <= *range.end());
  370|       |
  371|    294|        Ok((result, bytes_consumed))
  372|    294|    }
_RNvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    577|    pub fn new(data: &'a [u8]) -> Self {
   86|    577|        Unstructured { data }
   87|    577|    }
_RNvXs2_NtCs2PBiP67Bzq8_9arbitrary12unstructuredtNtB5_3Int12wrapping_sub:
  852|    283|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|    283|                    <$ty>::wrapping_sub(self, rhs)
  854|    283|                }
_RNvXs3_NtCs2PBiP67Bzq8_9arbitrary12unstructuredmNtB5_3Int12wrapping_sub:
  852|  5.57k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  5.57k|                    <$ty>::wrapping_sub(self, rhs)
  854|  5.57k|                }
_RNvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  65.5k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  65.5k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  65.5k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  65.5k|        for byte in buffer[n..].iter_mut() {
  525|      0|            *byte = 0;
  526|      0|        }
  527|  65.5k|        self.data = &self.data[n..];
  528|  65.5k|        Ok(())
  529|  65.5k|    }
_RNvXs9_NtCs2PBiP67Bzq8_9arbitrary12unstructuredlNtB5_3Int11to_unsigned:
  856|  11.1k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  11.1k|                    self as $unsigned_ty
  858|  11.1k|                }
_RNvXs1_NtCs2PBiP67Bzq8_9arbitrary12unstructuredhNtB5_3Int7from_u8:
  836|    294|                fn from_u8(b: u8) -> Self {
  837|    294|                    b as Self
  838|    294|                }
_RNvXs2_NtCs2PBiP67Bzq8_9arbitrary12unstructuredtNtB5_3Int7from_u8:
  836|    565|                fn from_u8(b: u8) -> Self {
  837|    565|                    b as Self
  838|    565|                }
_RNvXs3_NtCs2PBiP67Bzq8_9arbitrary12unstructuredmNtB5_3Int7from_u8:
  836|  5.57k|                fn from_u8(b: u8) -> Self {
  837|  5.57k|                    b as Self
  838|  5.57k|                }
_RNvXs2_NtCs2PBiP67Bzq8_9arbitrary12unstructuredtNtB5_3Int11to_unsigned:
  856|    566|                fn to_unsigned(self) -> Self::Unsigned {
  857|    566|                    self as $unsigned_ty
  858|    566|                }
_RNvXs1_NtCs2PBiP67Bzq8_9arbitrary12unstructuredhNtB5_3Int12wrapping_add:
  848|    294|                fn wrapping_add(self, rhs: Self) -> Self {
  849|    294|                    <$ty>::wrapping_add(self, rhs)
  850|    294|                }
_RNvXs2_NtCs2PBiP67Bzq8_9arbitrary12unstructuredtNtB5_3Int12wrapping_add:
  848|    283|                fn wrapping_add(self, rhs: Self) -> Self {
  849|    283|                    <$ty>::wrapping_add(self, rhs)
  850|    283|                }
_RNvXs1_NtCs2PBiP67Bzq8_9arbitrary12unstructuredhNtB5_3Int10from_usize:
  840|    294|                fn from_usize(u: usize) -> Self {
  841|    294|                    u as Self
  842|    294|                }
_RNvXs1_NtCs2PBiP67Bzq8_9arbitrary12unstructuredhNtB5_3Int12wrapping_sub:
  852|    294|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|    294|                    <$ty>::wrapping_sub(self, rhs)
  854|    294|                }
_RINvMNtCs2PBiP67Bzq8_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    283|    fn int_in_range_impl<T>(
  303|    283|        range: ops::RangeInclusive<T>,
  304|    283|        mut bytes: impl Iterator<Item = u8>,
  305|    283|    ) -> Result<(T, usize)>
  306|    283|    where
  307|    283|        T: Int,
  308|    283|    {
  309|    283|        let start = *range.start();
  310|    283|        let end = *range.end();
  311|    283|        assert!(
  312|    283|            start <= end,
  313|    283|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    283|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    283|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    283|        }
  321|    283|
  322|    283|        // From here on out we work with the unsigned representation. All of the
  323|    283|        // operations performed below work out just as well whether or not `T`
  324|    283|        // is a signed or unsigned integer.
  325|    283|        let start = start.to_unsigned();
  326|    283|        let end = end.to_unsigned();
  327|    283|
  328|    283|        let delta = end.wrapping_sub(start);
  329|    283|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    283|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    283|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    848|        while (bytes_consumed < mem::size_of::<T>())
  339|    566|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    565|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    565|                Some(b) => b,
  344|    565|            };
  345|    565|            bytes_consumed += 1;
  346|    565|
  347|    565|            // Combine this byte into our arbitrary integer, but avoid
  348|    565|            // overflowing the shift for `u8` and `i8`.
  349|    565|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    565|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    283|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    283|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    283|        let result = start.wrapping_add(offset);
  365|    283|
  366|    283|        // And convert back to our maybe-signed representation.
  367|    283|        let result = T::from_unsigned(result);
  368|    283|        debug_assert!(*range.start() <= result);
  369|    283|        debug_assert!(result <= *range.end());
  370|       |
  371|    283|        Ok((result, bytes_consumed))
  372|    283|    }
_RNvXs3_NtCs2PBiP67Bzq8_9arbitrary12unstructuredmNtB5_3Int12wrapping_add:
  848|  5.57k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  5.57k|                    <$ty>::wrapping_add(self, rhs)
  850|  5.57k|                }
_RNvXs9_NtCs2PBiP67Bzq8_9arbitrary12unstructuredlNtB5_3Int13from_unsigned:
  860|  5.57k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  5.57k|                    unsigned as Self
  862|  5.57k|                }

rust_fuzzer_test_input:
  259|    578|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    578|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    578|
  262|    578|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    578|                // implementation. This helps the fuzzer avoid exploring all the
  264|    578|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    578|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    578|                // get to longer inputs that actually lead to interesting executions
  267|    578|                // quicker.
  268|    578|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    577|                }
  271|    577|
  272|    577|                let mut u = Unstructured::new(bytes);
  273|    577|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    577|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    577|                }
  291|       |
  292|    577|                let data = match data {
  293|    577|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    577|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    577|                result.to_libfuzzer_code()
  299|    578|            }
_RNvNvCsiaJzsQDcFwo_10rle_encodes_1__19___libfuzzer_sys_run:
  303|    577|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    577|                $body
  305|    577|            }
_RNvXCskiZxyBbYNe4_13libfuzzer_sysNtB2_6CorpusINtNtCs390FhxcX5GJ_4core7convert4FromuE4from:
   30|    577|    fn from(_: ()) -> Self {
   31|    577|        Self::Keep
   32|    577|    }
LLVMFuzzerTestOneInput:
   58|    578|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    578|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    578|    });
   63|    578|
   64|    578|    match test_input {
   65|    578|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    578|}
_RNvMs_CskiZxyBbYNe4_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|    577|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    577|        match self {
   42|    577|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    577|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCskiZxyBbYNe4_13libfuzzer_sys15test_input_wrap0B3_:
   59|    578|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    578|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    578|        rust_fuzzer_test_input(data_slice)
   62|    578|    });

_RNvMs2_NtCslNDNRZN0aQX_9once_cell3impINtB5_8OnceCellNtNtCsQnwimuuiBo_5alloc6string6StringE14is_initializedCsiaJzsQDcFwo_10rle_encode:
   49|    577|    pub(crate) fn is_initialized(&self) -> bool {
   50|    577|        // An `Acquire` load is enough because that makes all the initialization
   51|    577|        // operations visible to us, and, this being a fast path, weaker
   52|    577|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    577|        // `SeqCst` operations on the slow path.
   54|    577|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    577|    }

_RNvMs4_NtCslNDNRZN0aQX_9once_cell4syncINtB5_8OnceCellNtNtCsQnwimuuiBo_5alloc6string6StringE3getCsiaJzsQDcFwo_10rle_encode:
  965|    577|        pub fn get(&self) -> Option<&T> {
  966|    577|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    577|                None
  971|       |            }
  972|    577|        }

_RNvNtCscY8othRR3AR_15unsigned_varint6encode3u64Cs6GSxvYoZaGB_17fvm_ipld_bitfield:
   69|  35.3k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  35.3k|    encode!(number, buf)
   71|  35.3k|}
_RNvNtCscY8othRR3AR_15unsigned_varint6encode10u64_bufferCs6GSxvYoZaGB_17fvm_ipld_bitfield:
  119|  35.3k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  35.3k|    [0; U64_LEN]
  121|  35.3k|}

_RNvXse_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  67.6k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  67.6k|        let next = self.next.take()?;
  484|  67.6k|        self.next = self.iter.next();
  485|  67.6k|        Some(next)
  486|  67.6k|    }
_RNvMs8_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  77.0k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  77.0k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|  13.8k|            (Some(lhs), Some(rhs)) => {
  357|  13.8k|                // if both iterators are non-empty, we advance the one whichever's
  358|  13.8k|                // corresponding range has a smaller upper bound
  359|  13.8k|                if lhs.end <= rhs.end {
  360|  3.19k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|  10.6k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  22.5k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|  38.3k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  2.30k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  74.7k|        if advance_lhs {
  371|  25.7k|            self.lhs.next();
  372|  49.0k|        } else {
  373|  49.0k|            self.rhs.next();
  374|  49.0k|        }
  375|       |
  376|  74.7k|        range
  377|  77.0k|    }
_RNvXsb_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  71.2k|    fn next(&mut self) -> Option<Self::Item> {
  439|  71.2k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  68.9k|        while let Some(next) = self.iter.peek() {
  444|  66.7k|            if next.start > range.end {
  445|  66.7k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  68.9k|        Some(range)
  453|  71.2k|    }
_RNvMs8_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|  2.30k|    fn new(lhs: A, rhs: B) -> Self {
  344|  2.30k|        Self {
  345|  2.30k|            lhs: Lookahead::new(lhs),
  346|  2.30k|            rhs: Lookahead::new(rhs),
  347|  2.30k|            combinator: Default::default(),
  348|  2.30k|        }
  349|  2.30k|    }
_RNvMs5_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|  2.30k|    pub fn new(a: A, b: B) -> Self {
  299|  2.30k|        Self(Merge::new(_Combine::new(a, b)))
  300|  2.30k|    }
_RNvXs9_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  77.0k|    fn next(&mut self) -> Option<Self::Item> {
  389|  77.0k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  77.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  77.0k|    }
_RNCNvXs9_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  87.9k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsf_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs390FhxcX5GJ_4core7default7Default7defaultB9_:
   87|  2.30k|#[derive(Default)]
_RNvXs0_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  164|  17.9k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  165|  17.9k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  166|  17.9k|        // to avoid it from returning invalid bits in the next iteration
  167|  17.9k|        //
  168|  17.9k|        // e.g. `--xxxx`, `xxxx--` should first produce
  169|  17.9k|        // `------` and then `----xx`, not
  170|  17.9k|        // `------` and then `--xxxx`
  171|  17.9k|        //
  172|  17.9k|        // lhs:      ----xx      --xxxx      xxxxxx
  173|  17.9k|        // rhs:      xx----  or  xxxx--  or  --xx--
  174|  17.9k|        // output:   ------      ------      xx----
  175|  17.9k|        // new lhs:  ----xx      ----xx      ----xx
  176|  17.9k|
  177|  17.9k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  178|  17.9k|        lhs.start = cmp::max(lhs.start, rhs.end);
  179|  17.9k|        difference
  180|  17.9k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  68.9k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  68.9k|        self.next.as_mut()
  475|  68.9k|    }
_RNCNvXs9_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  85.5k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   91|  3.19k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   92|  3.19k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   93|  3.19k|        // to ensure that the lower bounds are monotonically increasing
   94|  3.19k|        //
   95|  3.19k|        // e.g. `--xx--`, `xxxxxx` should first produce
   96|  3.19k|        // `xxxx--` and then `xxxxxx`, not
   97|  3.19k|        // `--xx--` and then `xxxxxx`
   98|  3.19k|        //
   99|  3.19k|        // lhs:     xx----      xxxx--      --xx--
  100|  3.19k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  101|  3.19k|        // output:  xx----      xxxx--      xxxx--
  102|  3.19k|
  103|  3.19k|        cmp::min(lhs.start, rhs.start)..lhs.end
  104|  3.19k|    }
_RNvXs0_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  182|  30.6k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  30.6k|        // the difference between a range and an empty range is just that range
  184|  30.6k|        Some(lhs)
  185|  30.6k|    }
_RNvXs9_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  71.2k|    fn next(&mut self) -> Option<Self::Item> {
  389|  71.2k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  71.2k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  71.2k|    }
_RNvXNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  115|  38.3k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  116|  38.3k|        Some(rhs)
  117|  38.3k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  87.9k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  87.9k|        self.next.as_mut()
  475|  87.9k|    }
_RNvXsb_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  69.9k|    fn next(&mut self) -> Option<Self::Item> {
  439|  69.9k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  74.7k|        while let Some(next) = self.iter.peek() {
  444|  72.5k|            if next.start > range.end {
  445|  65.4k|                break;
  446|  7.14k|            }
  447|  7.14k|
  448|  7.14k|            range.end = cmp::max(range.end, next.end);
  449|  7.14k|            self.iter.next();
  450|       |        }
  451|       |
  452|  67.6k|        Some(range)
  453|  69.9k|    }
_RNvMsa_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|  2.30k|    pub fn new(iter: I) -> Self {
  426|  2.30k|        Self {
  427|  2.30k|            iter: Lookahead::new(iter),
  428|  2.30k|        }
  429|  2.30k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  4.61k|    fn new(mut iter: I) -> Self {
  469|  4.61k|        let next = iter.next();
  470|  4.61k|        Self { iter, next }
  471|  4.61k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|  2.30k|    fn new(mut iter: I) -> Self {
  469|  2.30k|        let next = iter.next();
  470|  2.30k|        Self { iter, next }
  471|  2.30k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  2.30k|    fn new(mut iter: I) -> Self {
  469|  2.30k|        let next = iter.next();
  470|  2.30k|        Self { iter, next }
  471|  2.30k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  74.7k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  74.7k|        self.next.as_mut()
  475|  74.7k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|   164k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   164k|        self.next.as_mut()
  475|   164k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  77.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  77.0k|        self.next.as_mut()
  475|  77.0k|    }
_RNvMs8_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  87.9k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  87.9k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|  54.9k|            (Some(lhs), Some(rhs)) => {
  357|  54.9k|                // if both iterators are non-empty, we advance the one whichever's
  358|  54.9k|                // corresponding range has a smaller upper bound
  359|  54.9k|                if lhs.end <= rhs.end {
  360|  36.9k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|  17.9k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  30.6k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|    354|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  1.95k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  85.9k|        if advance_lhs {
  371|  67.6k|            self.lhs.next();
  372|  67.6k|        } else {
  373|  18.3k|            self.rhs.next();
  374|  18.3k|        }
  375|       |
  376|  85.9k|        range
  377|  87.9k|    }
_RNvXsh_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs390FhxcX5GJ_4core7default7Default7defaultB9_:
  152|  2.30k|#[derive(Default)]
_RNvXse_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  77.0k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  77.0k|        let next = self.next.take()?;
  484|  74.7k|        self.next = self.iter.next();
  485|  74.7k|        Some(next)
  486|  77.0k|    }
_RNCNvXs9_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  77.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs5_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|  2.30k|    pub fn new(a: A, b: B) -> Self {
  299|  2.30k|        Self(Merge::new(_Combine::new(a, b)))
  300|  2.30k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  2.30k|    fn new(mut iter: I) -> Self {
  469|  2.30k|        let next = iter.next();
  470|  2.30k|        Self { iter, next }
  471|  2.30k|    }
_RNvXs0_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  156|  36.9k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  157|  36.9k|        // lhs:     xx----      xxxx--      --xx--
  158|  36.9k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  159|  36.9k|        // output:  xx----      xx----      ------
  160|  36.9k|
  161|  36.9k|        lhs.start..cmp::min(lhs.end, rhs.start)
  162|  36.9k|    }
_RNvMsa_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|  2.30k|    pub fn new(iter: I) -> Self {
  426|  2.30k|        Self {
  427|  2.30k|            iter: Lookahead::new(iter),
  428|  2.30k|        }
  429|  2.30k|    }
_RNvXse_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  71.2k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  71.2k|        let next = self.next.take()?;
  484|  68.9k|        self.next = self.iter.next();
  485|  68.9k|        Some(next)
  486|  71.2k|    }
_RNvMs8_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|  2.30k|    fn new(lhs: A, rhs: B) -> Self {
  344|  2.30k|        Self {
  345|  2.30k|            lhs: Lookahead::new(lhs),
  346|  2.30k|            rhs: Lookahead::new(rhs),
  347|  2.30k|            combinator: Default::default(),
  348|  2.30k|        }
  349|  2.30k|    }
_RNvXNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  106|  10.6k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  107|  10.6k|        cmp::min(lhs.start, rhs.start)..rhs.end
  108|  10.6k|    }
_RNvXs0_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  187|    354|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  188|    354|        // the difference between an empty range and a range is an empty range
  189|    354|        None
  190|    354|    }
_RNCNvXs9_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  74.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  69.9k|    fn next(&mut self) -> Option<Self::Item> {
  312|  69.9k|        self.0.next()
  313|  69.9k|    }
_RNvXs6_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  71.2k|    fn next(&mut self) -> Option<Self::Item> {
  312|  71.2k|        self.0.next()
  313|  71.2k|    }
_RNvMsd_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|  2.30k|    fn new(mut iter: I) -> Self {
  469|  2.30k|        let next = iter.next();
  470|  2.30k|        Self { iter, next }
  471|  2.30k|    }
_RNvXNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  110|  22.5k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  22.5k|        // the union of a range and an empty range is just that range
  112|  22.5k|        Some(lhs)
  113|  22.5k|    }
_RNvXse_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  67.3k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  67.3k|        let next = self.next.take()?;
  484|  67.3k|        self.next = self.iter.next();
  485|  67.3k|        Some(next)
  486|  67.3k|    }
_RNvXse_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  25.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  25.7k|        let next = self.next.take()?;
  484|  25.7k|        self.next = self.iter.next();
  485|  25.7k|        Some(next)
  486|  25.7k|    }

_RINvYINtNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|  2.30k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|  2.30k|        Combine::new(self, other)
   34|  2.30k|    }
_RNvXs3_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  28.0k|    fn next(&mut self) -> Option<Self::Item> {
  155|  28.0k|        self.0.next()
  156|  28.0k|    }
_RINvYINtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|  2.30k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|  2.30k|        Combine::new(self, other)
   24|  2.30k|    }
_RINvMs2_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|  4.61k|    pub fn new<II>(iter: II) -> Self
  141|  4.61k|    where
  142|  4.61k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  4.61k|    {
  144|  4.61k|        Self(iter.into_iter())
  145|  4.61k|    }
_RINvMs2_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|  2.30k|    pub fn new<II>(iter: II) -> Self
  141|  2.30k|    where
  142|  2.30k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  2.30k|    {
  144|  2.30k|        Self(iter.into_iter())
  145|  2.30k|    }
_RNCINvNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0B6_:
  167|  71.9k|    Ranges::new(iter::from_fn(move || {
  168|  71.9k|        let start = iter.next()?;
  169|  67.5k|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|  67.9k|        while let Some(&next) = iter.peek() {
  171|  65.7k|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|  65.7k|            } else if next > end {
  174|  65.3k|                break;
  175|    393|            }
  176|    393|            end = end.checked_add(1).expect("bitfield overflow");
  177|    393|            iter.next();
  178|       |        }
  179|  67.5k|        Some(start..end)
  180|  71.9k|    }))
_RNvXs3_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs390FhxcX5GJ_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  71.9k|    fn next(&mut self) -> Option<Self::Item> {
  155|  71.9k|        self.0.next()
  156|  71.9k|    }
_RINvNtCs6GSxvYoZaGB_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs390FhxcX5GJ_4core4iter8adapters6copied6CopiedINtNtNtNtCsQnwimuuiBo_5alloc11collections5btree3set4IteryEEEB4_:
  164|  4.61k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|  4.61k|    let mut iter = bits.into_iter().peekable();
  166|  4.61k|
  167|  4.61k|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|  4.61k|    }))
  181|  4.61k|}

_RNvXs_Cs6GSxvYoZaGB_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCs390FhxcX5GJ_4core3cmp9PartialEq2eq:
   53|    577|    fn eq(&self, other: &Self) -> bool {
   54|    577|        Iterator::eq(self.ranges(), other.ranges())
   55|    577|    }
_RNvMs4_Cs6GSxvYoZaGB_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  283|  2.30k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|  2.30k|        iter::Ranges::new(self.ranges.iter().cloned())
  285|  2.30k|    }
_RNvMs4_Cs6GSxvYoZaGB_17fvm_ipld_bitfieldNtB5_8BitField7try_set:
  172|  19.6k|    pub fn try_set(&mut self, bit: u64) -> Result<(), OutOfRangeError> {
  173|  19.6k|        if bit == u64::MAX {
  174|     68|            return Err(OutOfRangeError);
  175|  19.6k|        }
  176|  19.6k|        self.unset.remove(&bit);
  177|  19.6k|        self.set.insert(bit);
  178|  19.6k|        Ok(())
  179|  19.6k|    }
_RNvXsa_Cs6GSxvYoZaGB_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs390FhxcX5GJ_4core7default7Default7defaultB5_:
   42|  1.15k|#[derive(Debug, Default, Clone)]
_RNvMs4_Cs6GSxvYoZaGB_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|  2.30k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|  2.30k|        self.inner_ranges()
  291|  2.30k|            .union(ranges_from_bits(self.set.iter().copied()))
  292|  2.30k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|  2.30k|    }
_RNvMs4_Cs6GSxvYoZaGB_17fvm_ipld_bitfieldNtB5_8BitField5unset:
  182|  10.0k|    pub fn unset(&mut self, bit: u64) {
  183|  10.0k|        if bit == u64::MAX {
  184|    471|            return;
  185|  9.55k|        }
  186|  9.55k|        self.set.remove(&bit);
  187|  9.55k|        self.unset.insert(bit);
  188|  10.0k|    }

_RNvXNtCs6GSxvYoZaGB_17fvm_ipld_bitfield5rangeINtNtNtCs390FhxcX5GJ_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  34.4k|    fn size(&self) -> Self::Idx {
   17|  34.4k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  34.4k|            self.end - self.start
   21|       |        }
   22|  34.4k|    }

_RNvMs1_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    577|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    577|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    577|        let version = reader.read(2);
  162|    577|        if version != 0 {
  163|      0|            return Err(Error::UnsupportedVersion);
  164|    577|        }
  165|    577|
  166|    577|        let mut next_value = reader.read(1) == 1;
  167|    577|        let mut ranges = Vec::new();
  168|    577|        let mut index = 0u64;
  169|    577|        let mut total_len: u64 = 0;
  170|       |
  171|  34.6k|        while let Some(len) = reader.read_len()? {
  172|  34.1k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  34.1k|            if ovf {
  174|      0|                return Err(Error::RLEOverflow);
  175|  34.1k|            }
  176|  34.1k|            total_len = new_total_len;
  177|  34.1k|            let start = index;
  178|  34.1k|            index += len;
  179|  34.1k|            let end = index;
  180|  34.1k|
  181|  34.1k|            if next_value {
  182|  17.2k|                ranges.push(start..end);
  183|  17.2k|            }
  184|       |
  185|  34.1k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    577|        if next_value {
  191|      0|            return Err(Error::NotMinimal);
  192|    577|        }
  193|    577|
  194|    577|        Ok(Self {
  195|    577|            ranges,
  196|    577|            ..Default::default()
  197|    577|        })
  198|    577|    }
_RNvMs1_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|  1.15k|    pub fn to_bytes(&self) -> Vec<u8> {
  202|  1.15k|        let mut iter = self.ranges();
  203|       |
  204|  1.15k|        let first_range = match iter.next() {
  205|  1.07k|            Some(range) => range,
  206|     80|            None => return Default::default(),
  207|       |        };
  208|       |
  209|  1.07k|        let mut writer = BitWriter::new();
  210|  1.07k|        writer.write(0, 2); // version 00
  211|  1.07k|
  212|  1.07k|        if first_range.start == 0 {
  213|    666|            writer.write(1, 1); // the first bit is a 1
  214|    666|        } else {
  215|    408|            writer.write(0, 1); // the first bit is a 0
  216|    408|            writer.write_len(first_range.start); // the number of leading 0s
  217|    408|        }
  218|       |
  219|  1.07k|        writer.write_len(first_range.size());
  220|  1.07k|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  34.4k|        for range in iter {
  225|  33.3k|            writer.write_len(range.start - index); // zeros
  226|  33.3k|            writer.write_len(range.size()); // ones
  227|  33.3k|            index = range.end;
  228|  33.3k|        }
  229|       |
  230|  1.07k|        writer.finish()
  231|  1.15k|    }
_RNvXs0_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs2PBiP67Bzq8_9arbitrary9Arbitrary9arbitrary:
  115|    577|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  116|    577|        let mut next_value: bool = bool::arbitrary(u)?;
  117|    577|        let mut ranges = Vec::new();
  118|    577|        let mut index = 0u64;
  119|    577|        let mut total_len: u64 = 0;
  120|       |
  121|    577|        let size = u.arbitrary_len::<(u64, u8)>()?;
  122|       |
  123|    577|        for _ in 0..size {
  124|       |            // 3 line crappy "power-law" distribution
  125|  5.57k|            let len = u64::arbitrary(u)?;
  126|  5.57k|            let shift = u.int_in_range(0..=63)?;
  127|  5.57k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  128|  5.57k|
  129|  5.57k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  130|  5.57k|            if ovf {
  131|     58|                break;
  132|  5.51k|            }
  133|  5.51k|            total_len = new_total_len;
  134|  5.51k|            let start = index;
  135|  5.51k|            index += len;
  136|  5.51k|            let end = index;
  137|  5.51k|
  138|  5.51k|            if next_value {
  139|  2.83k|                ranges.push(start..end);
  140|  2.83k|            }
  141|       |
  142|  5.51k|            next_value = !next_value;
  143|       |        }
  144|       |
  145|    577|        Ok(Self {
  146|    577|            ranges,
  147|    577|            ..Default::default()
  148|    577|        })
  149|    577|    }
_RNvXs0_NtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs2PBiP67Bzq8_9arbitrary9Arbitrary9size_hint:
  151|    578|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  152|    578|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  153|    578|    }

_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  34.6k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  34.6k|        // We're done.
  121|  34.6k|        if !self.has_more() {
  122|    577|            return Ok(None);
  123|  34.1k|        }
  124|  34.1k|
  125|  34.1k|        let peek6 = self.peek(6);
  126|       |
  127|  34.1k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|  14.6k|            self.drop(1);
  130|  14.6k|            1
  131|  19.4k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|  1.74k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|  1.74k|            self.drop(6);
  135|  1.74k|            if val < 2 {
  136|      0|                return Err(Error::NotMinimal);
  137|  1.74k|            }
  138|  1.74k|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  17.6k|            self.drop(2);
  142|  17.6k|            let val = self.read_varint()?;
  143|  17.6k|            if val < 16 {
  144|      0|                return Err(Error::NotMinimal);
  145|  17.6k|            }
  146|  17.6k|            val
  147|       |        };
  148|       |
  149|  34.1k|        Ok(Some(len))
  150|  34.6k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|   149k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|   149k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|   149k|        let mask = (1 << num_bits) - 1;
   56|   149k|        (self.bits & mask) as u8
   57|   149k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  17.6k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  17.6k|        let mut len = 0u64;
   95|       |
   96|   113k|        for i in 0..VARINT_MAX_BYTES {
   97|   113k|            let byte = self.read(8);
   98|   113k|
   99|   113k|            // strip off the most significant bit and add
  100|   113k|            // it to the output
  101|   113k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|   113k|
  103|   113k|            // if the most significant bit is a 0, we've
  104|   113k|            // reached the end of the varint
  105|   113k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  17.6k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      0|                    break;
  110|  17.6k|                }
  111|  17.6k|                return Ok(len);
  112|  96.1k|            }
  113|       |        }
  114|       |
  115|      0|        Err(Error::InvalidVarint)
  116|  17.6k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  153|  34.6k|    pub fn has_more(&self) -> bool {
  154|  34.6k|        self.bits != 0 || !self.bytes.is_empty()
  155|  34.6k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|   149k|    pub fn drop(&mut self, num_bits: u32) {
   62|   149k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|   149k|        self.bits >>= num_bits;
   66|   149k|        self.num_bits -= num_bits;
   67|   149k|
   68|   149k|        // not sure why this being outside of the if improves the performance
   69|   149k|        // bit it does, probably related to keeping caches warm
   70|   149k|        let byte = self.bytes.first().unwrap_or(&0);
   71|   149k|        self.bits |= (*byte as u64) << self.num_bits;
   72|   149k|
   73|   149k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|   149k|        if self.num_bits < 8 {
   75|   121k|            self.num_bits += 8;
   76|   121k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|   121k|        }
   78|   149k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    577|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    577|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    577|        // data.
   29|    577|        if bytes.last() == Some(&0) {
   30|      0|            return Err(Error::NotMinimal);
   31|    577|        }
   32|    577|        let mut bits = 0u64;
   33|  1.73k|        for i in 0..2 {
   34|  1.15k|            let byte = bytes.get(i).unwrap_or(&0);
   35|  1.15k|            bits |= (*byte as u64) << (8 * i);
   36|  1.15k|        }
   37|       |
   38|    577|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    577|
   40|    577|        Ok(Self {
   41|    577|            bytes,
   42|    577|            bits,
   43|    577|            num_bits: 16,
   44|    577|        })
   45|    577|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|   114k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|   114k|        debug_assert!(num_bits <= 8);
   84|       |
   85|   114k|        let res = self.peek(num_bits);
   86|   114k|        self.drop(num_bits);
   87|   114k|
   88|   114k|        res
   89|   114k|    }

_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|   301k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|   301k|        debug_assert!(num_bits <= 8);
   25|   301k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|   301k|        self.bits |= (byte as u16) << self.num_bits;
   28|   301k|        self.num_bits += num_bits;
   29|   301k|
   30|   301k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|   301k|        if self.num_bits >= 8 {
   32|   242k|            self.bytes.push(self.bits as u8);
   33|   242k|            self.bits >>= 8;
   34|   242k|            self.num_bits -= 8;
   35|   242k|        }
   36|   301k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  68.2k|    pub fn write_len(&mut self, len: u64) {
   40|  68.2k|        debug_assert!(len > 0);
   41|       |
   42|  68.2k|        if len == 1 {
   43|  29.3k|            // Block Single (prefix 1)
   44|  29.3k|            self.write(1, 1);
   45|  38.8k|        } else if len < 16 {
   46|  3.48k|            // Block Short (prefix 01)
   47|  3.48k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  3.48k|            self.write(len as u8, 4);
   49|  3.48k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  35.3k|            self.write(0, 2);
   52|  35.3k|
   53|  35.3k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|   227k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|   227k|                self.write(byte, 8);
   56|   227k|            }
   57|       |        }
   58|  68.2k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   18|  1.07k|    pub fn new() -> Self {
   19|  1.07k|        Default::default()
   20|  1.07k|    }
_RNvMNtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|  1.07k|    pub fn finish(mut self) -> Vec<u8> {
   62|  1.07k|        if self.bits > 0 {
   63|    808|            self.bytes.push(self.bits as u8);
   64|    808|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|  1.07k|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|  1.07k|        self.bytes
   72|  1.07k|    }
_RNvXs_NtNtCs6GSxvYoZaGB_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs390FhxcX5GJ_4core7default7Default7defaultB8_:
    5|  1.07k|#[derive(Default, Clone, Debug)]

_RNCNvXNvCsiaJzsQDcFwo_10rle_encode1__NtB6_9OperationNtCs2PBiP67Bzq8_9arbitrary9Arbitrary9size_hint0B6_:
    8|    577|#[derive(Debug, Arbitrary)]
_RNvXNvCsiaJzsQDcFwo_10rle_encode1__NtB4_9OperationNtCs2PBiP67Bzq8_9arbitrary9Arbitrary9size_hintB4_:
    8|    577|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsiaJzsQDcFwo_10rle_encode1__NtB6_9OperationNtCs2PBiP67Bzq8_9arbitrary9Arbitrary19arbitrary_take_rests_0B6_:
    8|    474|#[derive(Debug, Arbitrary)]
_RNvXNvCsiaJzsQDcFwo_10rle_encode1__NtB4_9OperationNtCs2PBiP67Bzq8_9arbitrary9Arbitrary19arbitrary_take_rest:
    8|  1.42k|#[derive(Debug, Arbitrary)]
_RNvXNvCsiaJzsQDcFwo_10rle_encode1__NtB4_9OperationNtCs2PBiP67Bzq8_9arbitrary9Arbitrary9arbitrary:
    8|  87.7k|#[derive(Debug, Arbitrary)]
_RNCNvXNvCsiaJzsQDcFwo_10rle_encode1__NtB6_9OperationNtCs2PBiP67Bzq8_9arbitrary9Arbitrary9arbitrarys_0B6_:
    8|  29.2k|#[derive(Debug, Arbitrary)]

