_RNvXsE_Cs9L1LYAVfFr0_9arbitrarymNtB5_9Arbitrary9size_hintCs8jpOmdIFstN_10rle_encode:
  302|  5.25k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  5.25k|                    let n = mem::size_of::<$ty>();
  304|  5.25k|                    (n, Some(n))
  305|  5.25k|                }
_RNvXsa_Cs9L1LYAVfFr0_9arbitraryINtNtCsL01CZbbkwL_5alloc3vec3VecNtCs8jpOmdIFstN_10rle_encode9OperationENtB5_9Arbitrary19arbitrary_take_restB11_:
  686|  5.25k|        u.arbitrary_take_rest_iter()?.collect()
  687|  5.25k|    }
_RNvXs1j_Cs9L1LYAVfFr0_9arbitraryTNtCsi0aLJPS7wDT_17fvm_ipld_bitfield8BitFieldINtNtCsL01CZbbkwL_5alloc3vec3VecNtCs8jpOmdIFstN_10rle_encode9OperationEENtB6_9Arbitrary19arbitrary_take_restB1L_:
  561|  5.25k|            fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  562|  5.25k|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  563|  5.25k|                let $last = $last::arbitrary_take_rest(u)?;
  564|  5.25k|                Ok(($($xs,)* $last,))
  565|  5.25k|            }
_RNvXsa_Cs9L1LYAVfFr0_9arbitraryINtNtCsL01CZbbkwL_5alloc3vec3VecNtCs8jpOmdIFstN_10rle_encode9OperationENtB5_9Arbitrary9size_hintB11_:
  690|  5.38k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|  5.38k|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|  5.38k|    }
_RNvYyNtCs9L1LYAVfFr0_9arbitrary9Arbitrary19arbitrary_take_restCs8jpOmdIFstN_10rle_encode:
  182|  4.83k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|  4.83k|        Self::arbitrary(&mut u)
  184|  4.83k|    }
_RNvXsH_Cs9L1LYAVfFr0_9arbitraryjNtB5_9Arbitrary9size_hintCs8jpOmdIFstN_10rle_encode:
  302|  5.38k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  5.38k|                    let n = mem::size_of::<$ty>();
  304|  5.38k|                    (n, Some(n))
  305|  5.38k|                }
_RNvXs1j_Cs9L1LYAVfFr0_9arbitraryTNtCsi0aLJPS7wDT_17fvm_ipld_bitfield8BitFieldINtNtCsL01CZbbkwL_5alloc3vec3VecNtCs8jpOmdIFstN_10rle_encode9OperationEENtB6_9Arbitrary9size_hintB1L_:
  568|  5.38k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  5.38k|                crate::size_hint::and_all(&[
  570|  5.38k|                    <$last as Arbitrary>::size_hint(depth),
  571|  5.38k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  5.38k|                ])
  573|  5.38k|            }
_RNvXsF_Cs9L1LYAVfFr0_9arbitraryyNtB5_9Arbitrary9size_hintCs8jpOmdIFstN_10rle_encode:
  302|  10.5k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  10.5k|                    let n = mem::size_of::<$ty>();
  304|  10.5k|                    (n, Some(n))
  305|  10.5k|                }
_RNvXsC_Cs9L1LYAVfFr0_9arbitraryhNtB5_9Arbitrary9size_hintCsi0aLJPS7wDT_17fvm_ipld_bitfield:
  302|  5.25k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  5.25k|                    let n = mem::size_of::<$ty>();
  304|  5.25k|                    (n, Some(n))
  305|  5.25k|                }
_RNvXsH_Cs9L1LYAVfFr0_9arbitraryjNtB5_9Arbitrary9size_hintCsi0aLJPS7wDT_17fvm_ipld_bitfield:
  302|  5.38k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  5.38k|                    let n = mem::size_of::<$ty>();
  304|  5.38k|                    (n, Some(n))
  305|  5.38k|                }
_RNvXsF_Cs9L1LYAVfFr0_9arbitraryyNtB5_9Arbitrary9size_hintCsi0aLJPS7wDT_17fvm_ipld_bitfield:
  302|  5.25k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  5.25k|                    let n = mem::size_of::<$ty>();
  304|  5.25k|                    (n, Some(n))
  305|  5.25k|                }
_RNvXs1j_Cs9L1LYAVfFr0_9arbitraryTyhENtB6_9Arbitrary9size_hintCsi0aLJPS7wDT_17fvm_ipld_bitfield:
  568|  5.25k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  5.25k|                crate::size_hint::and_all(&[
  570|  5.25k|                    <$last as Arbitrary>::size_hint(depth),
  571|  5.25k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  5.25k|                ])
  573|  5.25k|            }
_RNvXs_Cs9L1LYAVfFr0_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  5.25k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  5.25k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  5.25k|    }
_RNvXsE_Cs9L1LYAVfFr0_9arbitrarymNtB5_9Arbitrary9arbitrary:
  291|   621k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|   621k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|   621k|                    u.fill_buffer(&mut buf)?;
  294|   621k|                    let mut x: $unsigned = 0;
  295|  2.48M|                    for i in 0..mem::size_of::<$ty>() {
  296|  2.48M|                        x |= buf[i] as $unsigned << (i * 8);
  297|  2.48M|                    }
  298|   621k|                    Ok(x as $ty)
  299|   621k|                }
_RNvXsF_Cs9L1LYAVfFr0_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|   670k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|   670k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|   670k|                    u.fill_buffer(&mut buf)?;
  294|   670k|                    let mut x: $unsigned = 0;
  295|  5.36M|                    for i in 0..mem::size_of::<$ty>() {
  296|  5.36M|                        x |= buf[i] as $unsigned << (i * 8);
  297|  5.36M|                    }
  298|   670k|                    Ok(x as $ty)
  299|   670k|                }
_RNvXsC_Cs9L1LYAVfFr0_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  5.25k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  5.25k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  5.25k|                    u.fill_buffer(&mut buf)?;
  294|  5.25k|                    let mut x: $unsigned = 0;
  295|  5.25k|                    for i in 0..mem::size_of::<$ty>() {
  296|  5.25k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  5.25k|                    }
  298|  5.25k|                    Ok(x as $ty)
  299|  5.25k|                }

_RINvNtCs9L1LYAVfFr0_9arbitrary9size_hint15recursion_guardNCNvXs_Cs8jpOmdIFstN_10rle_encodeNtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   12|  5.25k|pub fn recursion_guard(
   13|  5.25k|    depth: usize,
   14|  5.25k|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|  5.25k|) -> (usize, Option<usize>) {
   16|  5.25k|    const MAX_DEPTH: usize = 20;
   17|  5.25k|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|  5.25k|        f(depth + 1)
   21|       |    }
   22|  5.25k|}
_RNvNtCs9L1LYAVfFr0_9arbitrary9size_hint7and_allCs8jpOmdIFstN_10rle_encode:
   37|  15.8k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  15.8k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  15.8k|}
_RNCNCNvNtCs9L1LYAVfFr0_9arbitrary9size_hint3and00Cs8jpOmdIFstN_10rle_encode:
   28|  15.7k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCs9L1LYAVfFr0_9arbitrary9size_hint2or00Cs8jpOmdIFstN_10rle_encode:
   48|  5.25k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCs9L1LYAVfFr0_9arbitrary9size_hint3andCs8jpOmdIFstN_10rle_encode:
   26|  31.9k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  31.9k|    let lower = lhs.0 + rhs.0;
   28|  31.9k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  31.9k|    (lower, upper)
   30|  31.9k|}
_RNCNvNtCs9L1LYAVfFr0_9arbitrary9size_hint3and0Cs8jpOmdIFstN_10rle_encode:
   28|  26.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs9L1LYAVfFr0_9arbitrary9size_hint6or_allCs8jpOmdIFstN_10rle_encode:
   58|  5.25k|    if let Some(head) = hints.first().copied() {
   59|  5.25k|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|  5.25k|}
_RNvNtCs9L1LYAVfFr0_9arbitrary9size_hint2orCs8jpOmdIFstN_10rle_encode:
   44|  5.25k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  5.25k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  5.25k|    let upper = lhs
   47|  5.25k|        .1
   48|  5.25k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  5.25k|    (lower, upper)
   50|  5.25k|}
_RNCNvNtCs9L1LYAVfFr0_9arbitrary9size_hint2or0Cs8jpOmdIFstN_10rle_encode:
   48|  5.25k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCs9L1LYAVfFr0_9arbitrary9size_hint7and_allCsi0aLJPS7wDT_17fvm_ipld_bitfield:
   37|  5.25k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.25k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.25k|}
_RNvNtCs9L1LYAVfFr0_9arbitrary9size_hint3andCsi0aLJPS7wDT_17fvm_ipld_bitfield:
   26|  15.8k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  15.8k|    let lower = lhs.0 + rhs.0;
   28|  15.8k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  15.8k|    (lower, upper)
   30|  15.8k|}
_RNCNCNvNtCs9L1LYAVfFr0_9arbitrary9size_hint3and00Csi0aLJPS7wDT_17fvm_ipld_bitfield:
   28|  10.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCs9L1LYAVfFr0_9arbitrary9size_hint3and0Csi0aLJPS7wDT_17fvm_ipld_bitfield:
   28|  15.8k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB2_12Unstructured3lenCs8jpOmdIFstN_10rle_encode:
  108|  5.25k|    pub fn len(&self) -> usize {
  109|  5.25k|        self.data.len()
  110|  5.25k|    }
_RINvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCs8jpOmdIFstN_10rle_encode9OperationEB1s_:
  548|  5.25k|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  549|  5.25k|        self,
  550|  5.25k|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  551|  5.25k|        let (lower, upper) = ElementType::size_hint(0);
  552|  5.25k|
  553|  5.25k|        let elem_size = upper.unwrap_or(lower * 2);
  554|  5.25k|        let elem_size = std::cmp::max(1, elem_size);
  555|  5.25k|        let size = self.len() / elem_size;
  556|  5.25k|        Ok(ArbitraryTakeRestIter {
  557|  5.25k|            size,
  558|  5.25k|            u: Some(self),
  559|  5.25k|            _marker: PhantomData,
  560|  5.25k|        })
  561|  5.25k|    }
_RNvXs0_NtCs9L1LYAVfFr0_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCs8jpOmdIFstN_10rle_encode9OperationENtNtNtNtCskEuM6uQtP4F_4core4iter6traits8iterator8Iterator4nextB1e_:
  686|   626k|        if let Some(mut u) = self.u.take() {
  687|   621k|            if self.size == 1 {
  688|  4.83k|                Some(Arbitrary::arbitrary_take_rest(u))
  689|   617k|            } else if self.size == 0 {
  690|    419|                None
  691|       |            } else {
  692|   616k|                self.size -= 1;
  693|   616k|                let ret = Arbitrary::arbitrary(&mut u);
  694|   616k|                self.u = Some(u);
  695|   616k|                Some(ret)
  696|       |            }
  697|       |        } else {
  698|  4.83k|            None
  699|       |        }
  700|   626k|    }
_RINvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsi0aLJPS7wDT_17fvm_ipld_bitfield:
  213|  5.25k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  5.25k|    where
  215|  5.25k|        ElementType: Arbitrary<'a>,
  216|  5.25k|    {
  217|  5.25k|        let byte_size = self.arbitrary_byte_size()?;
  218|  5.25k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  5.25k|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|  5.25k|        let elem_size = std::cmp::max(1, elem_size);
  221|  5.25k|        Ok(byte_size / elem_size)
  222|  5.25k|    }
_RINvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsi0aLJPS7wDT_17fvm_ipld_bitfield:
  301|  49.3k|    fn int_in_range_impl<T>(
  302|  49.3k|        range: ops::RangeInclusive<T>,
  303|  49.3k|        mut bytes: impl Iterator<Item = u8>,
  304|  49.3k|    ) -> Result<(T, usize)>
  305|  49.3k|    where
  306|  49.3k|        T: Int,
  307|  49.3k|    {
  308|  49.3k|        let start = range.start();
  309|  49.3k|        let end = range.end();
  310|  49.3k|        assert!(
  311|  49.3k|            start <= end,
  312|  49.3k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  49.3k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  49.3k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  49.3k|        }
  320|  49.3k|
  321|  49.3k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  49.3k|        let mut result = T::Widest::ZERO;
  323|  49.3k|        let mut offset: usize = 0;
  324|       |
  325|  98.7k|        while offset < mem::size_of::<T>()
  326|  98.7k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  49.3k|        {
  328|  49.3k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  49.3k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  49.3k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  49.3k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  49.3k|            result = result % range;
  336|  49.3k|        }
  337|       |
  338|  49.3k|        Ok((
  339|  49.3k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  49.3k|            offset,
  341|  49.3k|        ))
  342|  49.3k|    }
_RINvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsi0aLJPS7wDT_17fvm_ipld_bitfield:
  292|  49.3k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  49.3k|    where
  294|  49.3k|        T: Int,
  295|  49.3k|    {
  296|  49.3k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  49.3k|        self.data = &self.data[bytes_consumed..];
  298|  49.3k|        Ok(result)
  299|  49.3k|    }
_RNvXs5_NtCs9L1LYAVfFr0_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  9.41k|                fn from_u8(b: u8) -> Self {
  777|  9.41k|                    b as Self
  778|  9.41k|                }
_RNvXs1_NtCs9L1LYAVfFr0_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|  1.08k|                fn from_widest(w: Self::Widest) -> Self {
  772|  1.08k|                    let x = <$ty>::max_value().as_widest();
  773|  1.08k|                    (w % x) as Self
  774|  1.08k|                }
_RNvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  5.25k|    pub fn new(data: &'a [u8]) -> Self {
   86|  5.25k|        Unstructured { data }
   87|  5.25k|    }
_RNvXs2_NtCs9L1LYAVfFr0_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|  16.6k|                fn as_widest(self) -> Self::Widest {
  768|  16.6k|                    self as $widest
  769|  16.6k|                }
_RNvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  5.25k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  5.25k|        if self.data.is_empty() {
  226|      0|            Ok(0)
  227|  5.25k|        } else if self.data.len() == 1 {
  228|      0|            self.data = &[];
  229|      0|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|  5.25k|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|  1.08k|                let bytes = 1;
  241|  1.08k|                let max_size = self.data.len() - bytes;
  242|  1.08k|                let (rest, for_size) = self.data.split_at(max_size);
  243|  1.08k|                self.data = rest;
  244|  1.08k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|  4.16k|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|  4.16k|                let bytes = 2;
  247|  4.16k|                let max_size = self.data.len() - bytes;
  248|  4.16k|                let (rest, for_size) = self.data.split_at(max_size);
  249|  4.16k|                self.data = rest;
  250|  4.16k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|  5.25k|            Ok(len)
  266|       |        }
  267|  5.25k|    }
_RINvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|  4.16k|    fn int_in_range_impl<T>(
  302|  4.16k|        range: ops::RangeInclusive<T>,
  303|  4.16k|        mut bytes: impl Iterator<Item = u8>,
  304|  4.16k|    ) -> Result<(T, usize)>
  305|  4.16k|    where
  306|  4.16k|        T: Int,
  307|  4.16k|    {
  308|  4.16k|        let start = range.start();
  309|  4.16k|        let end = range.end();
  310|  4.16k|        assert!(
  311|  4.16k|            start <= end,
  312|  4.16k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  4.16k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  4.16k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  4.16k|        }
  320|  4.16k|
  321|  4.16k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  4.16k|        let mut result = T::Widest::ZERO;
  323|  4.16k|        let mut offset: usize = 0;
  324|       |
  325|  12.4k|        while offset < mem::size_of::<T>()
  326|  8.33k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  8.33k|        {
  328|  8.33k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  8.33k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  8.33k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  4.16k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  4.16k|            result = result % range;
  336|  4.16k|        }
  337|       |
  338|  4.16k|        Ok((
  339|  4.16k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  4.16k|            offset,
  341|  4.16k|        ))
  342|  4.16k|    }
_RNvXsb_NtCs9L1LYAVfFr0_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  49.3k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  49.3k|                    <$ty>::checked_add(self, rhs)
  786|  49.3k|                }
_RINvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|  1.08k|    fn int_in_range_impl<T>(
  302|  1.08k|        range: ops::RangeInclusive<T>,
  303|  1.08k|        mut bytes: impl Iterator<Item = u8>,
  304|  1.08k|    ) -> Result<(T, usize)>
  305|  1.08k|    where
  306|  1.08k|        T: Int,
  307|  1.08k|    {
  308|  1.08k|        let start = range.start();
  309|  1.08k|        let end = range.end();
  310|  1.08k|        assert!(
  311|  1.08k|            start <= end,
  312|  1.08k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  1.08k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  1.08k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  1.08k|        }
  320|  1.08k|
  321|  1.08k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  1.08k|        let mut result = T::Widest::ZERO;
  323|  1.08k|        let mut offset: usize = 0;
  324|       |
  325|  2.16k|        while offset < mem::size_of::<T>()
  326|  1.08k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  1.08k|        {
  328|  1.08k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  1.08k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  1.08k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  1.08k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  1.08k|            result = result % range;
  336|  1.08k|        }
  337|       |
  338|  1.08k|        Ok((
  339|  1.08k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  1.08k|            offset,
  341|  1.08k|        ))
  342|  1.08k|    }
_RNvXs9_NtCs9L1LYAVfFr0_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  49.3k|                fn from_widest(w: Self::Widest) -> Self {
  772|  49.3k|                    let x = <$ty>::max_value().as_widest();
  773|  49.3k|                    (w % x) as Self
  774|  49.3k|                }
_RNvXsb_NtCs9L1LYAVfFr0_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  49.3k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  49.3k|                    <$ty>::wrapping_add(self, rhs)
  790|  49.3k|                }
_RNvXs9_NtCs9L1LYAVfFr0_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|   197k|                fn as_widest(self) -> Self::Widest {
  768|   197k|                    self as $widest
  769|   197k|                }
_RNvMNtCs9L1LYAVfFr0_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  1.29M|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  1.29M|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  1.29M|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  1.29M|        for byte in buffer[n..].iter_mut() {
  453|      0|            *byte = 0;
  454|      0|        }
  455|  1.29M|        self.data = &self.data[n..];
  456|  1.29M|        Ok(())
  457|  1.29M|    }
_RNvXsb_NtCs9L1LYAVfFr0_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  98.7k|                fn from_usize(u: usize) -> Self {
  781|  98.7k|                    u as Self
  782|  98.7k|                }
_RNvXsb_NtCs9L1LYAVfFr0_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  49.3k|                fn from_u8(b: u8) -> Self {
  777|  49.3k|                    b as Self
  778|  49.3k|                }
_RNvXs5_NtCs9L1LYAVfFr0_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|  5.25k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  5.25k|                    <$ty>::wrapping_add(self, rhs)
  790|  5.25k|                }
_RNvXs1_NtCs9L1LYAVfFr0_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  4.33k|                fn as_widest(self) -> Self::Widest {
  768|  4.33k|                    self as $widest
  769|  4.33k|                }
_RNvXs5_NtCs9L1LYAVfFr0_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|  5.25k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  5.25k|                    <$ty>::checked_add(self, rhs)
  786|  5.25k|                }
_RNvXs2_NtCs9L1LYAVfFr0_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|  4.16k|                fn from_widest(w: Self::Widest) -> Self {
  772|  4.16k|                    let x = <$ty>::max_value().as_widest();
  773|  4.16k|                    (w % x) as Self
  774|  4.16k|                }
_RNvXs5_NtCs9L1LYAVfFr0_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  9.41k|                fn from_usize(u: usize) -> Self {
  781|  9.41k|                    u as Self
  782|  9.41k|                }

rust_fuzzer_test_input:
  167|  5.38k|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|  5.38k|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|  5.38k|
  170|  5.38k|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|  5.38k|            // implementation. This helps the fuzzer avoid exploring all the
  172|  5.38k|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|  5.38k|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|  5.38k|            // get to longer inputs that actually lead to interesting executions
  175|  5.38k|            // quicker.
  176|  5.38k|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|    138|                return;
  178|  5.25k|            }
  179|  5.25k|
  180|  5.25k|            let mut u = Unstructured::new(bytes);
  181|  5.25k|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|  5.25k|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|  5.25k|            }
  199|       |
  200|  5.25k|            let $data = match data {
  201|  5.25k|                Ok(d) => d,
  202|      0|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|  5.38k|        }
_RNCNvCsejC9DP28kCt_13libfuzzer_sys15test_input_wrap0B3_:
   28|  5.38k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|  5.38k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|  5.38k|        rust_fuzzer_test_input(data_slice);
   31|  5.38k|    });
LLVMFuzzerTestOneInput:
   27|  5.38k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|  5.38k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|  5.38k|    });
   32|  5.38k|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|  5.38k|    }
   37|  5.38k|    0
   38|  5.38k|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvMs2_NtCsbW9PestjODe_9once_cell3impINtB5_8OnceCellNtNtCsL01CZbbkwL_5alloc6string6StringE14is_initializedCs8jpOmdIFstN_10rle_encode:
   74|  5.25k|    pub(crate) fn is_initialized(&self) -> bool {
   75|  5.25k|        // An `Acquire` load is enough because that makes all the initialization
   76|  5.25k|        // operations visible to us, and, this being a fast path, weaker
   77|  5.25k|        // ordering helps with performance. This `Acquire` synchronizes with
   78|  5.25k|        // `SeqCst` operations on the slow path.
   79|  5.25k|        self.state_and_queue.load(Ordering::Acquire) == COMPLETE
   80|  5.25k|    }

_RNvMs4_NtCsbW9PestjODe_9once_cell4syncINtB5_8OnceCellNtNtCsL01CZbbkwL_5alloc6string6StringE3getCs8jpOmdIFstN_10rle_encode:
  850|  5.25k|        pub fn get(&self) -> Option<&T> {
  851|  5.25k|            if self.0.is_initialized() {
  852|       |                // Safe b/c value is initialized.
  853|      0|                Some(unsafe { self.get_unchecked() })
  854|       |            } else {
  855|  5.25k|                None
  856|       |            }
  857|  5.25k|        }

_RNvNtCsbrUMbBMthIJ_15unsigned_varint6encode3u64Csi0aLJPS7wDT_17fvm_ipld_bitfield:
   69|   556k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|   556k|    encode!(number, buf)
   71|   556k|}
_RNvNtCsbrUMbBMthIJ_15unsigned_varint6encode10u64_bufferCsi0aLJPS7wDT_17fvm_ipld_bitfield:
  119|   556k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|   556k|    [0; U64_LEN]
  121|   556k|}

_RNCNvXs9_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  1.17M|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs0_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|   395k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|   395k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|   395k|        // to avoid it from returning invalid bits in the next iteration
  166|   395k|        //
  167|   395k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|   395k|        // `------` and then `----xx`, not
  169|   395k|        // `------` and then `--xxxx`
  170|   395k|        //
  171|   395k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|   395k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|   395k|        // output:   ------      ------      xx----
  174|   395k|        // new lhs:  ----xx      ----xx      ----xx
  175|   395k|
  176|   395k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|   395k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|   395k|        difference
  179|   395k|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|  21.0k|    fn new(mut iter: I) -> Self {
  469|  21.0k|        let next = iter.next();
  470|  21.0k|        Self { iter, next }
  471|  21.0k|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  1.17M|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  1.17M|        self.next.as_mut()
  475|  1.17M|    }
_RNvMs8_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  21.0k|    fn new(lhs: A, rhs: B) -> Self {
  343|  21.0k|        Self {
  344|  21.0k|            lhs: Lookahead::new(lhs),
  345|  21.0k|            rhs: Lookahead::new(rhs),
  346|  21.0k|            combinator: Default::default(),
  347|  21.0k|        }
  348|  21.0k|    }
_RNvXs0_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|   711k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|   711k|        // lhs:     xx----      xxxx--      --xx--
  157|   711k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|   711k|        // output:  xx----      xx----      ------
  159|   711k|
  160|   711k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|   711k|    }
_RNvXse_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  1.11M|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  1.11M|        let next = self.next.take()?;
  484|  1.09M|        self.next = self.iter.next();
  485|  1.09M|        Some(next)
  486|  1.11M|    }
_RNvMs8_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  1.19M|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  1.19M|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|   252k|            (Some(lhs), Some(rhs)) => {
  356|   252k|                // if both iterators are non-empty, we advance the one whichever's
  357|   252k|                // corresponding range has a smaller upper bound
  358|   252k|                if lhs.end <= rhs.end {
  359|  45.7k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|   206k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   301k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|   622k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  21.0k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  1.17M|        if advance_lhs {
  370|   346k|            self.lhs.next();
  371|   828k|        } else {
  372|   828k|            self.rhs.next();
  373|   828k|        }
  374|       |
  375|  1.17M|        range
  376|  1.19M|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  42.0k|    fn new(mut iter: I) -> Self {
  469|  42.0k|        let next = iter.next();
  470|  42.0k|        Self { iter, next }
  471|  42.0k|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  21.0k|    fn new(mut iter: I) -> Self {
  469|  21.0k|        let next = iter.next();
  470|  21.0k|        Self { iter, next }
  471|  21.0k|    }
_RNvXsb_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  1.08M|    fn next(&mut self) -> Option<Self::Item> {
  439|  1.08M|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  1.17M|        while let Some(next) = self.iter.peek() {
  444|  1.15M|            if next.start > range.end {
  445|  1.04M|                break;
  446|   108k|            }
  447|   108k|
  448|   108k|            range.end = cmp::max(range.end, next.end);
  449|   108k|            self.iter.next();
  450|       |        }
  451|       |
  452|  1.06M|        Some(range)
  453|  1.08M|    }
_RNvXse_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  1.06M|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  1.06M|        let next = self.next.take()?;
  484|  1.06M|        self.next = self.iter.next();
  485|  1.06M|        Some(next)
  486|  1.06M|    }
_RNCNvXs9_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  1.19M|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs6_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  1.08M|    fn next(&mut self) -> Option<Self::Item> {
  311|  1.08M|        self.0.next()
  312|  1.08M|    }
_RNvXse_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  1.19M|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  1.19M|        let next = self.next.take()?;
  484|  1.17M|        self.next = self.iter.next();
  485|  1.17M|        Some(next)
  486|  1.19M|    }
_RNvXsb_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  1.11M|    fn next(&mut self) -> Option<Self::Item> {
  439|  1.11M|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  1.09M|        while let Some(next) = self.iter.peek() {
  444|  1.07M|            if next.start > range.end {
  445|  1.07M|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  1.09M|        Some(range)
  453|  1.11M|    }
_RNvXse_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  1.22M|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  1.22M|        let next = self.next.take()?;
  484|  1.22M|        self.next = self.iter.next();
  485|  1.22M|        Some(next)
  486|  1.22M|    }
_RNvXs6_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  1.11M|    fn next(&mut self) -> Option<Self::Item> {
  311|  1.11M|        self.0.next()
  312|  1.11M|    }
_RNvMs5_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|  21.0k|    pub fn new(a: A, b: B) -> Self {
  298|  21.0k|        Self(Merge::new(_Combine::new(a, b)))
  299|  21.0k|    }
_RNvMs5_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  21.0k|    pub fn new(a: A, b: B) -> Self {
  298|  21.0k|        Self(Merge::new(_Combine::new(a, b)))
  299|  21.0k|    }
_RNvXse_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|   346k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   346k|        let next = self.next.take()?;
  484|   346k|        self.next = self.iter.next();
  485|   346k|        Some(next)
  486|   346k|    }
_RNvXs9_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  1.19M|    fn next(&mut self) -> Option<Self::Item> {
  388|  1.19M|        // we repeatedly compute the next range until we find one that is non-empty
  389|  1.19M|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  1.19M|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  1.19M|    }
_RNvXNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|   206k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|   206k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|   206k|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  21.0k|    fn new(mut iter: I) -> Self {
  469|  21.0k|        let next = iter.next();
  470|  21.0k|        Self { iter, next }
  471|  21.0k|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  1.09M|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  1.09M|        self.next.as_mut()
  475|  1.09M|    }
_RNvXs0_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|  4.21k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|  4.21k|        // the difference between an empty range and a range is an empty range
  188|  4.21k|        None
  189|  4.21k|    }
_RNvXs0_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|   355k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|   355k|        // the difference between a range and an empty range is just that range
  183|   355k|        Some(lhs)
  184|   355k|    }
_RNvMs8_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|  21.0k|    fn new(lhs: A, rhs: B) -> Self {
  343|  21.0k|        Self {
  344|  21.0k|            lhs: Lookahead::new(lhs),
  345|  21.0k|            rhs: Lookahead::new(rhs),
  346|  21.0k|            combinator: Default::default(),
  347|  21.0k|        }
  348|  21.0k|    }
_RNvMsa_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|  21.0k|    pub fn new(iter: I) -> Self {
  426|  21.0k|        Self {
  427|  21.0k|            iter: Lookahead::new(iter),
  428|  21.0k|        }
  429|  21.0k|    }
_RNvXNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|   622k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|   622k|        Some(rhs)
  116|   622k|    }
_RNCNvXs9_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  1.46M|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  1.48M|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  1.19M|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  1.19M|        self.next.as_mut()
  475|  1.19M|    }
_RNvXNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|   301k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|   301k|        // the union of a range and an empty range is just that range
  111|   301k|        Some(lhs)
  112|   301k|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  1.48M|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  1.48M|        self.next.as_mut()
  475|  1.48M|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|  21.0k|    fn new(mut iter: I) -> Self {
  469|  21.0k|        let next = iter.next();
  470|  21.0k|        Self { iter, next }
  471|  21.0k|    }
_RNvXsh_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCskEuM6uQtP4F_4core7default7Default7defaultB9_:
  151|  21.0k|#[derive(Default)]
_RNvMs8_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  1.48M|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  1.48M|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  1.10M|            (Some(lhs), Some(rhs)) => {
  356|  1.10M|                // if both iterators are non-empty, we advance the one whichever's
  357|  1.10M|                // corresponding range has a smaller upper bound
  358|  1.10M|                if lhs.end <= rhs.end {
  359|   711k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|   395k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   355k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  4.21k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  16.7k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  1.46M|        if advance_lhs {
  370|  1.06M|            self.lhs.next();
  371|  1.06M|        } else {
  372|   399k|            self.rhs.next();
  373|   399k|        }
  374|       |
  375|  1.46M|        range
  376|  1.48M|    }
_RNvMsd_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  2.68M|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  2.68M|        self.next.as_mut()
  475|  2.68M|    }
_RNvXsf_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCskEuM6uQtP4F_4core7default7Default7defaultB9_:
   86|  21.0k|#[derive(Default)]
_RNvXNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  45.7k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  45.7k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  45.7k|        // to ensure that the lower bounds are monotonically increasing
   93|  45.7k|        //
   94|  45.7k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  45.7k|        // `xxxx--` and then `xxxxxx`, not
   96|  45.7k|        // `--xx--` and then `xxxxxx`
   97|  45.7k|        //
   98|  45.7k|        // lhs:     xx----      xxxx--      --xx--
   99|  45.7k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  45.7k|        // output:  xx----      xxxx--      xxxx--
  101|  45.7k|
  102|  45.7k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  45.7k|    }
_RNvXs9_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  1.11M|    fn next(&mut self) -> Option<Self::Item> {
  388|  1.11M|        // we repeatedly compute the next range until we find one that is non-empty
  389|  1.11M|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  1.11M|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  1.11M|    }
_RNvMsa_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|  21.0k|    pub fn new(iter: I) -> Self {
  426|  21.0k|        Self {
  427|  21.0k|            iter: Lookahead::new(iter),
  428|  21.0k|        }
  429|  21.0k|    }

_RINvNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEEB4_:
  163|  42.0k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  42.0k|    let mut iter = bits.into_iter().peekable();
  165|  42.0k|
  166|  42.0k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  42.0k|    }))
  180|  42.0k|}
_RINvMs2_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|  21.0k|    pub fn new<II>(iter: II) -> Self
  140|  21.0k|    where
  141|  21.0k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  21.0k|    {
  143|  21.0k|        Self(iter.into_iter())
  144|  21.0k|    }
_RNvXs3_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   367k|    fn next(&mut self) -> Option<Self::Item> {
  154|   367k|        self.0.next()
  155|   367k|    }
_RNCINvNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  1.27M|    Ranges::new(iter::from_fn(move || {
  167|  1.27M|        let start = iter.next()?;
  168|  1.23M|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|  1.23M|        while let Some(&next) = iter.peek() {
  170|  1.21M|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|  1.21M|            } else if next > end {
  173|  1.20M|                break;
  174|  7.57k|            }
  175|  7.57k|            end = end.checked_add(1).expect("bitfield overflow");
  176|  7.57k|            iter.next();
  177|       |        }
  178|  1.23M|        Some(start..end)
  179|  1.27M|    }))
_RNvXs3_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  1.27M|    fn next(&mut self) -> Option<Self::Item> {
  154|  1.27M|        self.0.next()
  155|  1.27M|    }
_RINvYINtNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|  21.0k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  21.0k|        Combine::new(self, other)
   33|  21.0k|    }
_RINvMs2_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  42.0k|    pub fn new<II>(iter: II) -> Self
  140|  42.0k|    where
  141|  42.0k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  42.0k|    {
  143|  42.0k|        Self(iter.into_iter())
  144|  42.0k|    }
_RINvYINtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCskEuM6uQtP4F_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsL01CZbbkwL_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  21.0k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  21.0k|        Combine::new(self, other)
   23|  21.0k|    }

_RNvMs4_Csi0aLJPS7wDT_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  273|  21.0k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  274|  21.0k|        iter::Ranges::new(self.ranges.iter().cloned())
  275|  21.0k|    }
_RNvMs4_Csi0aLJPS7wDT_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  279|  21.0k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  280|  21.0k|        self.inner_ranges()
  281|  21.0k|            .union(ranges_from_bits(self.set.iter().copied()))
  282|  21.0k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  283|  21.0k|    }
_RNvXs_Csi0aLJPS7wDT_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCskEuM6uQtP4F_4core3cmp9PartialEq2eq:
   47|  5.25k|    fn eq(&self, other: &Self) -> bool {
   48|  5.25k|        Iterator::eq(self.ranges(), other.ranges())
   49|  5.25k|    }
_RNvMs4_Csi0aLJPS7wDT_17fvm_ipld_bitfieldNtB5_8BitField5unset:
  172|   248k|    pub fn unset(&mut self, bit: u64) {
  173|   248k|        if bit == u64::MAX {
  174|  20.6k|            return;
  175|   228k|        }
  176|   228k|        self.set.remove(&bit);
  177|   228k|        self.unset.insert(bit);
  178|   248k|    }
_RNvXsi_Csi0aLJPS7wDT_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCskEuM6uQtP4F_4core7default7Default7defaultB5_:
   36|  10.5k|#[derive(Debug, Default, Clone)]
_RNvMs4_Csi0aLJPS7wDT_17fvm_ipld_bitfieldNtB5_8BitField7try_set:
  162|   372k|    pub fn try_set(&mut self, bit: u64) -> Result<(), OutOfRangeError> {
  163|   372k|        if bit == u64::MAX {
  164|  2.45k|            return Err(OutOfRangeError);
  165|   370k|        }
  166|   370k|        self.unset.remove(&bit);
  167|   370k|        self.set.insert(bit);
  168|   370k|        Ok(())
  169|   372k|    }

_RNvXNtCsi0aLJPS7wDT_17fvm_ipld_bitfield5rangeINtNtNtCskEuM6uQtP4F_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|   546k|    fn size(&self) -> Self::Idx {
   15|   546k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|   546k|            self.end - self.start
   19|       |        }
   20|   546k|    }

_RNvXs0_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs9L1LYAVfFr0_9arbitrary9Arbitrary9arbitrary:
  119|  5.25k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  120|  5.25k|        let mut next_value: bool = bool::arbitrary(u)?;
  121|  5.25k|        let mut ranges = Vec::new();
  122|  5.25k|        let mut index = 0u64;
  123|  5.25k|        let mut total_len: u64 = 0;
  124|       |
  125|  5.25k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  126|       |
  127|  5.25k|        for _ in 0..size {
  128|       |            // 3 line crappy "power-law" distribution
  129|  49.3k|            let len = u64::arbitrary(u)?;
  130|  49.3k|            let shift = u.int_in_range(0..=63)?;
  131|  49.3k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  132|  49.3k|
  133|  49.3k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  134|  49.3k|            if ovf {
  135|    944|                break;
  136|  48.4k|            }
  137|  48.4k|            total_len = new_total_len;
  138|  48.4k|            let start = index;
  139|  48.4k|            index += len;
  140|  48.4k|            let end = index;
  141|  48.4k|
  142|  48.4k|            if next_value {
  143|  24.5k|                ranges.push(start..end);
  144|  24.5k|            }
  145|       |
  146|  48.4k|            next_value = !next_value;
  147|       |        }
  148|       |
  149|  5.25k|        Ok(Self {
  150|  5.25k|            ranges,
  151|  5.25k|            ..Default::default()
  152|  5.25k|        })
  153|  5.25k|    }
_RNvMs1_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  205|  10.5k|    pub fn to_bytes(&self) -> Vec<u8> {
  206|  10.5k|        let mut iter = self.ranges();
  207|       |
  208|  10.5k|        let first_range = match iter.next() {
  209|  9.99k|            Some(range) => range,
  210|    504|            None => return Default::default(),
  211|       |        };
  212|       |
  213|  9.99k|        let mut writer = BitWriter::new();
  214|  9.99k|        writer.write(0, 2); // version 00
  215|  9.99k|
  216|  9.99k|        if first_range.start == 0 {
  217|  6.86k|            writer.write(1, 1); // the first bit is a 1
  218|  6.86k|        } else {
  219|  3.13k|            writer.write(0, 1); // the first bit is a 0
  220|  3.13k|            writer.write_len(first_range.start); // the number of leading 0s
  221|  3.13k|        }
  222|       |
  223|  9.99k|        writer.write_len(first_range.size());
  224|  9.99k|        let mut index = first_range.end;
  225|       |
  226|       |        // for each range of 1s we first encode the number of 0s that came prior
  227|       |        // before encoding the number of 1s
  228|   546k|        for range in iter {
  229|   536k|            writer.write_len(range.start - index); // zeros
  230|   536k|            writer.write_len(range.size()); // ones
  231|   536k|            index = range.end;
  232|   536k|        }
  233|       |
  234|  9.99k|        writer.finish()
  235|  10.5k|    }
_RNvMs1_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  162|  5.25k|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  163|  5.25k|        let mut reader = BitReader::new(bytes)?;
  164|       |
  165|  5.25k|        let version = reader.read(2);
  166|  5.25k|        if version != 0 {
  167|      0|            return Err(Error::UnsupportedVersion);
  168|  5.25k|        }
  169|  5.25k|
  170|  5.25k|        let mut next_value = reader.read(1) == 1;
  171|  5.25k|        let mut ranges = Vec::new();
  172|  5.25k|        let mut index = 0u64;
  173|  5.25k|        let mut total_len: u64 = 0;
  174|       |
  175|   548k|        while let Some(len) = reader.read_len()? {
  176|   542k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  177|   542k|            if ovf {
  178|      0|                return Err(Error::RLEOverflow);
  179|   542k|            }
  180|   542k|            total_len = new_total_len;
  181|   542k|            let start = index;
  182|   542k|            index += len;
  183|   542k|            let end = index;
  184|   542k|
  185|   542k|            if next_value {
  186|   273k|                ranges.push(start..end);
  187|   273k|            }
  188|       |
  189|   542k|            next_value = !next_value;
  190|       |        }
  191|       |
  192|       |        // next_value equal true means we just read a run of zeros
  193|       |        // which means that there is a trailing run of zeros
  194|  5.25k|        if next_value {
  195|      0|            return Err(Error::NotMinimal);
  196|  5.25k|        }
  197|  5.25k|
  198|  5.25k|        Ok(Self {
  199|  5.25k|            ranges,
  200|  5.25k|            ..Default::default()
  201|  5.25k|        })
  202|  5.25k|    }
_RNvXs0_NtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs9L1LYAVfFr0_9arbitrary9Arbitrary9size_hint:
  155|  5.38k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  156|  5.38k|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  157|  5.38k|    }

_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|   548k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|   548k|        // We're done.
  120|   548k|        if !self.has_more() {
  121|  5.25k|            return Ok(None);
  122|   542k|        }
  123|   542k|
  124|   542k|        let peek6 = self.peek(6);
  125|       |
  126|   542k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|   250k|            self.drop(1);
  129|   250k|            1
  130|   292k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  13.8k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  13.8k|            self.drop(6);
  134|  13.8k|            if val < 2 {
  135|      0|                return Err(Error::NotMinimal);
  136|  13.8k|            }
  137|  13.8k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|   278k|            self.drop(2);
  141|   278k|            let val = self.read_varint()?;
  142|   278k|            if val < 16 {
  143|      0|                return Err(Error::NotMinimal);
  144|   278k|            }
  145|   278k|            val
  146|       |        };
  147|       |
  148|   542k|        Ok(Some(len))
  149|   548k|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|   278k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|   278k|        let mut len = 0u64;
   94|       |
   95|  1.79M|        for i in 0..VARINT_MAX_BYTES {
   96|  1.79M|            let byte = self.read(8);
   97|  1.79M|
   98|  1.79M|            // strip off the most significant bit and add
   99|  1.79M|            // it to the output
  100|  1.79M|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  1.79M|
  102|  1.79M|            // if the most significant bit is a 0, we've
  103|  1.79M|            // reached the end of the varint
  104|  1.79M|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|   278k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      0|                    break;
  109|   278k|                }
  110|   278k|                return Ok(len);
  111|  1.51M|            }
  112|       |        }
  113|       |
  114|      0|        Err(Error::InvalidVarint)
  115|   278k|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  1.80M|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  1.80M|        debug_assert!(num_bits <= 8);
   83|       |
   84|  1.80M|        let res = self.peek(num_bits);
   85|  1.80M|        self.drop(num_bits);
   86|  1.80M|
   87|  1.80M|        res
   88|  1.80M|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  2.34M|    pub fn drop(&mut self, num_bits: u32) {
   61|  2.34M|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  2.34M|        self.bits >>= num_bits;
   65|  2.34M|        self.num_bits -= num_bits;
   66|  2.34M|
   67|  2.34M|        // not sure why this being outside of the if improves the performance
   68|  2.34M|        // bit it does, probably related to keeping caches warm
   69|  2.34M|        let byte = self.bytes.first().unwrap_or(&0);
   70|  2.34M|        self.bits |= (*byte as u64) << self.num_bits;
   71|  2.34M|
   72|  2.34M|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  2.34M|        if self.num_bits < 8 {
   74|  1.90M|            self.num_bits += 8;
   75|  1.90M|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  1.90M|        }
   77|  2.34M|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  2.34M|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  2.34M|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  2.34M|        let mask = (1 << num_bits) - 1;
   55|  2.34M|        (self.bits & mask) as u8
   56|  2.34M|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|   548k|    pub fn has_more(&self) -> bool {
  153|   548k|        self.bits != 0 || !self.bytes.is_empty()
  154|   548k|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|  5.25k|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|  5.25k|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|  5.25k|        // data.
   28|  5.25k|        if bytes.last() == Some(&0) {
   29|      0|            return Err(Error::NotMinimal);
   30|  5.25k|        }
   31|  5.25k|        let mut bits = 0u64;
   32|  15.7k|        for i in 0..2 {
   33|  10.5k|            let byte = bytes.get(i).unwrap_or(&0);
   34|  10.5k|            bits |= (*byte as u64) << (8 * i);
   35|  10.5k|        }
   36|       |
   37|  5.25k|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|  5.25k|
   39|  5.25k|        Ok(Self {
   40|  5.25k|            bytes,
   41|  5.25k|            bits,
   42|  5.25k|            num_bits: 16,
   43|  5.25k|        })
   44|  5.25k|    }

_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  1.08M|    pub fn write_len(&mut self, len: u64) {
   39|  1.08M|        debug_assert!(len > 0);
   40|       |
   41|  1.08M|        if len == 1 {
   42|   501k|            // Block Single (prefix 1)
   43|   501k|            self.write(1, 1);
   44|   584k|        } else if len < 16 {
   45|  27.7k|            // Block Short (prefix 01)
   46|  27.7k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  27.7k|            self.write(len as u8, 4);
   48|  27.7k|        } else {
   49|       |            // Block Long (prefix 00)
   50|   556k|            self.write(0, 2);
   51|   556k|
   52|   556k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  3.58M|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  3.58M|                self.write(byte, 8);
   55|  3.58M|            }
   56|       |        }
   57|  1.08M|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|  9.99k|    pub fn finish(mut self) -> Vec<u8> {
   61|  9.99k|        if self.bits > 0 {
   62|  8.24k|            self.bytes.push(self.bits as u8);
   63|  8.24k|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|  9.99k|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|  9.99k|        self.bytes
   71|  9.99k|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  4.72M|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  4.72M|        debug_assert!(num_bits <= 8);
   24|  4.72M|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  4.72M|        self.bits |= (byte as u16) << self.num_bits;
   27|  4.72M|        self.num_bits += num_bits;
   28|  4.72M|
   29|  4.72M|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  4.72M|        if self.num_bits >= 8 {
   31|  3.80M|            self.bytes.push(self.bits as u8);
   32|  3.80M|            self.bits >>= 8;
   33|  3.80M|            self.num_bits -= 8;
   34|  3.80M|        }
   35|  4.72M|    }
_RNvMNtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|  9.99k|    pub fn new() -> Self {
   18|  9.99k|        Default::default()
   19|  9.99k|    }
_RNvXs_NtNtCsi0aLJPS7wDT_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCskEuM6uQtP4F_4core7default7Default7defaultB8_:
    4|  9.99k|#[derive(Default, Clone, Debug)]

_RNCNvXs_Cs8jpOmdIFstN_10rle_encodeNtB6_9OperationNtCs9L1LYAVfFr0_9arbitrary9Arbitrary9size_hint0B6_:
    6|  5.25k|#[derive(Debug, Arbitrary)]
_RNvXs_Cs8jpOmdIFstN_10rle_encodeNtB4_9OperationNtCs9L1LYAVfFr0_9arbitrary9Arbitrary9arbitrary:
    6|   616k|#[derive(Debug, Arbitrary)]
_RNvXs_Cs8jpOmdIFstN_10rle_encodeNtB4_9OperationNtCs9L1LYAVfFr0_9arbitrary9Arbitrary9size_hintB4_:
    6|  5.25k|#[derive(Debug, Arbitrary)]
_RNvXs_Cs8jpOmdIFstN_10rle_encodeNtB4_9OperationNtCs9L1LYAVfFr0_9arbitrary9Arbitrary19arbitrary_take_rest:
    6|  4.83k|#[derive(Debug, Arbitrary)]

