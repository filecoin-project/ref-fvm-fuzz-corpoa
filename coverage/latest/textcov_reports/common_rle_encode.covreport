_RNvXsE_CsaH8JJb4dLgi_9arbitrarymNtB5_9Arbitrary9size_hintCsb88HNtaMA1w_10rle_encode:
  312|    599|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    599|                    let n = mem::size_of::<$ty>();
  314|    599|                    (n, Some(n))
  315|    599|                }
_RNvXs1j_CsaH8JJb4dLgi_9arbitraryTNtCsgQRVtDQWOas_17fvm_ipld_bitfield8BitFieldINtNtCs4n7kKoQiZ5k_5alloc3vec3VecNtCsb88HNtaMA1w_10rle_encode9OperationEENtB6_9Arbitrary9size_hintB1M_:
  578|    600|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  579|    600|                crate::size_hint::and_all(&[
  580|    600|                    <$last as Arbitrary>::size_hint(depth),
  581|    600|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  582|    600|                ])
  583|    600|            }
_RNvXsa_CsaH8JJb4dLgi_9arbitraryINtNtCs4n7kKoQiZ5k_5alloc3vec3VecNtCsb88HNtaMA1w_10rle_encode9OperationENtB5_9Arbitrary9size_hintB12_:
  700|    600|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  701|    600|        (0, None)
  702|    600|    }
_RNvXsF_CsaH8JJb4dLgi_9arbitraryyNtB5_9Arbitrary9size_hintCsb88HNtaMA1w_10rle_encode:
  312|  1.19k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|  1.19k|                    let n = mem::size_of::<$ty>();
  314|  1.19k|                    (n, Some(n))
  315|  1.19k|                }
_RNvXs1j_CsaH8JJb4dLgi_9arbitraryTNtCsgQRVtDQWOas_17fvm_ipld_bitfield8BitFieldINtNtCs4n7kKoQiZ5k_5alloc3vec3VecNtCsb88HNtaMA1w_10rle_encode9OperationEENtB6_9Arbitrary19arbitrary_take_restB1M_:
  571|    599|            fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  572|    599|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  573|    599|                let $last = $last::arbitrary_take_rest(u)?;
  574|    599|                Ok(($($xs,)* $last,))
  575|    599|            }
_RNvXsa_CsaH8JJb4dLgi_9arbitraryINtNtCs4n7kKoQiZ5k_5alloc3vec3VecNtCsb88HNtaMA1w_10rle_encode9OperationENtB5_9Arbitrary19arbitrary_take_restB12_:
  696|    599|        u.arbitrary_take_rest_iter()?.collect()
  697|    599|    }
_RNvYyNtCsaH8JJb4dLgi_9arbitrary9Arbitrary19arbitrary_take_restCsb88HNtaMA1w_10rle_encode:
  182|    493|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    493|        Self::arbitrary(&mut u)
  184|    493|    }
_RNvXsH_CsaH8JJb4dLgi_9arbitraryjNtB5_9Arbitrary9size_hintCsgQRVtDQWOas_17fvm_ipld_bitfield:
  312|    600|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    600|                    let n = mem::size_of::<$ty>();
  314|    600|                    (n, Some(n))
  315|    600|                }
_RNvXs1j_CsaH8JJb4dLgi_9arbitraryTyhENtB6_9Arbitrary9size_hintCsgQRVtDQWOas_17fvm_ipld_bitfield:
  578|    599|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  579|    599|                crate::size_hint::and_all(&[
  580|    599|                    <$last as Arbitrary>::size_hint(depth),
  581|    599|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  582|    599|                ])
  583|    599|            }
_RNvXsF_CsaH8JJb4dLgi_9arbitraryyNtB5_9Arbitrary9size_hintCsgQRVtDQWOas_17fvm_ipld_bitfield:
  312|    599|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    599|                    let n = mem::size_of::<$ty>();
  314|    599|                    (n, Some(n))
  315|    599|                }
_RNvXsC_CsaH8JJb4dLgi_9arbitraryhNtB5_9Arbitrary9size_hintCsgQRVtDQWOas_17fvm_ipld_bitfield:
  312|    599|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    599|                    let n = mem::size_of::<$ty>();
  314|    599|                    (n, Some(n))
  315|    599|                }
_RNvXsE_CsaH8JJb4dLgi_9arbitrarymNtB5_9Arbitrary9arbitrary:
  301|  34.1k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  302|  34.1k|                    let mut buf = [0; mem::size_of::<$ty>()];
  303|  34.1k|                    u.fill_buffer(&mut buf)?;
  304|  34.1k|                    let mut x: $unsigned = 0;
  305|   136k|                    for i in 0..mem::size_of::<$ty>() {
  306|   136k|                        x |= buf[i] as $unsigned << (i * 8);
  307|   136k|                    }
  308|  34.1k|                    Ok(x as $ty)
  309|  34.1k|                }
_RNvXsF_CsaH8JJb4dLgi_9arbitraryyNtB5_9Arbitrary9arbitrary:
  301|  39.8k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  302|  39.8k|                    let mut buf = [0; mem::size_of::<$ty>()];
  303|  39.8k|                    u.fill_buffer(&mut buf)?;
  304|  39.8k|                    let mut x: $unsigned = 0;
  305|   318k|                    for i in 0..mem::size_of::<$ty>() {
  306|   318k|                        x |= buf[i] as $unsigned << (i * 8);
  307|   318k|                    }
  308|  39.8k|                    Ok(x as $ty)
  309|  39.8k|                }
_RNvXs_CsaH8JJb4dLgi_9arbitrarybNtB4_9Arbitrary9arbitrary:
  287|    599|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  288|    599|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  289|    599|    }
_RNvXsC_CsaH8JJb4dLgi_9arbitraryhNtB5_9Arbitrary9arbitrary:
  301|    599|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  302|    599|                    let mut buf = [0; mem::size_of::<$ty>()];
  303|    599|                    u.fill_buffer(&mut buf)?;
  304|    599|                    let mut x: $unsigned = 0;
  305|    599|                    for i in 0..mem::size_of::<$ty>() {
  306|    599|                        x |= buf[i] as $unsigned << (i * 8);
  307|    599|                    }
  308|    599|                    Ok(x as $ty)
  309|    599|                }

_RINvNtCsaH8JJb4dLgi_9arbitrary9size_hint15recursion_guardNCNvXs_Csb88HNtaMA1w_10rle_encodeNtB10_9OperationNtB4_9Arbitrary9size_hint0EB10_:
   12|    599|pub fn recursion_guard(
   13|    599|    depth: usize,
   14|    599|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    599|) -> (usize, Option<usize>) {
   16|    599|    const MAX_DEPTH: usize = 20;
   17|    599|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    599|        f(depth + 1)
   21|       |    }
   22|    599|}
_RNvNtCsaH8JJb4dLgi_9arbitrary9size_hint3andCsb88HNtaMA1w_10rle_encode:
   26|  2.99k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.99k|    let lower = lhs.0 + rhs.0;
   28|  2.99k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.99k|    (lower, upper)
   30|  2.99k|}
_RNvNtCsaH8JJb4dLgi_9arbitrary9size_hint6or_allCsb88HNtaMA1w_10rle_encode:
   58|    599|    if let Some(head) = hints.first().copied() {
   59|    599|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    599|}
_RNvNtCsaH8JJb4dLgi_9arbitrary9size_hint2orCsb88HNtaMA1w_10rle_encode:
   44|    599|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|    599|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|    599|    let upper = lhs
   47|    599|        .1
   48|    599|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|    599|    (lower, upper)
   50|    599|}
_RNCNCNvNtCsaH8JJb4dLgi_9arbitrary9size_hint2or00Csb88HNtaMA1w_10rle_encode:
   48|    599|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCsaH8JJb4dLgi_9arbitrary9size_hint3and00Csb88HNtaMA1w_10rle_encode:
   28|  1.79k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCsaH8JJb4dLgi_9arbitrary9size_hint3and0Csb88HNtaMA1w_10rle_encode:
   28|  2.39k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsaH8JJb4dLgi_9arbitrary9size_hint7and_allCsb88HNtaMA1w_10rle_encode:
   37|  1.79k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.79k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.79k|}
_RNCNvNtCsaH8JJb4dLgi_9arbitrary9size_hint2or0Csb88HNtaMA1w_10rle_encode:
   48|    599|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCsaH8JJb4dLgi_9arbitrary9size_hint3andCsgQRVtDQWOas_17fvm_ipld_bitfield:
   26|  1.79k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  1.79k|    let lower = lhs.0 + rhs.0;
   28|  1.79k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  1.79k|    (lower, upper)
   30|  1.79k|}
_RNCNCNvNtCsaH8JJb4dLgi_9arbitrary9size_hint3and00CsgQRVtDQWOas_17fvm_ipld_bitfield:
   28|  1.19k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsaH8JJb4dLgi_9arbitrary9size_hint7and_allCsgQRVtDQWOas_17fvm_ipld_bitfield:
   37|    599|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    599|    hints.iter().copied().fold((0, Some(0)), and)
   39|    599|}
_RNCNvNtCsaH8JJb4dLgi_9arbitrary9size_hint3and0CsgQRVtDQWOas_17fvm_ipld_bitfield:
   28|  1.79k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtCsb88HNtaMA1w_10rle_encode9OperationEB1s_:
  591|    599|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  592|    599|        self,
  593|    599|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  594|    599|        let (lower, upper) = ElementType::size_hint(0);
  595|    599|
  596|    599|        let elem_size = upper.unwrap_or(lower * 2);
  597|    599|        let elem_size = std::cmp::max(1, elem_size);
  598|    599|        let size = self.len() / elem_size;
  599|    599|        Ok(ArbitraryTakeRestIter {
  600|    599|            size,
  601|    599|            u: Some(self),
  602|    599|            _marker: PhantomData,
  603|    599|        })
  604|    599|    }
_RNvXs0_NtCsaH8JJb4dLgi_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtCsb88HNtaMA1w_10rle_encode9OperationENtNtNtNtCs2pjNMKisfcl_4core4iter6traits8iterator8Iterator4nextB1e_:
  729|  34.7k|        if let Some(mut u) = self.u.take() {
  730|  34.2k|            if self.size == 1 {
  731|    493|                Some(Arbitrary::arbitrary_take_rest(u))
  732|  33.7k|            } else if self.size == 0 {
  733|    106|                None
  734|       |            } else {
  735|  33.6k|                self.size -= 1;
  736|  33.6k|                let ret = Arbitrary::arbitrary(&mut u);
  737|  33.6k|                self.u = Some(u);
  738|  33.6k|                Some(ret)
  739|       |            }
  740|       |        } else {
  741|    493|            None
  742|       |        }
  743|  34.7k|    }
_RNvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB2_12Unstructured3lenCsb88HNtaMA1w_10rle_encode:
  108|    599|    pub fn len(&self) -> usize {
  109|    599|        self.data.len()
  110|    599|    }
_RINvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsgQRVtDQWOas_17fvm_ipld_bitfield:
  213|    599|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    599|    where
  215|    599|        ElementType: Arbitrary<'a>,
  216|    599|    {
  217|    599|        let byte_size = self.arbitrary_byte_size()?;
  218|    599|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    599|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|    599|        let elem_size = std::cmp::max(1, elem_size);
  221|    599|        Ok(byte_size / elem_size)
  222|    599|    }
_RINvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsgQRVtDQWOas_17fvm_ipld_bitfield:
  293|  5.68k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  5.68k|    where
  295|  5.68k|        T: Int,
  296|  5.68k|    {
  297|  5.68k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  5.68k|        self.data = &self.data[bytes_consumed..];
  299|  5.68k|        Ok(result)
  300|  5.68k|    }
_RINvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgQRVtDQWOas_17fvm_ipld_bitfield:
  302|  5.68k|    fn int_in_range_impl<T>(
  303|  5.68k|        range: ops::RangeInclusive<T>,
  304|  5.68k|        mut bytes: impl Iterator<Item = u8>,
  305|  5.68k|    ) -> Result<(T, usize)>
  306|  5.68k|    where
  307|  5.68k|        T: Int,
  308|  5.68k|    {
  309|  5.68k|        let start = range.start();
  310|  5.68k|        let end = range.end();
  311|  5.68k|        assert!(
  312|  5.68k|            start <= end,
  313|  5.68k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|  5.68k|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  5.68k|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|  5.68k|        }
  321|  5.68k|
  322|  5.68k|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|  5.68k|        let mut result = T::Widest::ZERO;
  324|  5.68k|        let mut offset: usize = 0;
  325|       |
  326|  11.3k|        while offset < mem::size_of::<T>()
  327|  11.3k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|  5.68k|        {
  329|  5.68k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|  5.68k|            result = (result << 8) | T::Widest::from_u8(byte);
  331|  5.68k|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|  5.68k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|  5.68k|            result = result % range;
  337|  5.68k|        }
  338|       |
  339|  5.68k|        Ok((
  340|  5.68k|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|  5.68k|            offset,
  342|  5.68k|        ))
  343|  5.68k|    }
_RNvXs5_NtCsaH8JJb4dLgi_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  823|    912|                fn from_usize(u: usize) -> Self {
  824|    912|                    u as Self
  825|    912|                }
_RNvXs2_NtCsaH8JJb4dLgi_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  810|  1.25k|                fn as_widest(self) -> Self::Widest {
  811|  1.25k|                    self as $widest
  812|  1.25k|                }
_RNvXs5_NtCsaH8JJb4dLgi_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  827|    599|                fn checked_add(self, rhs: Self) -> Option<Self> {
  828|    599|                    <$ty>::checked_add(self, rhs)
  829|    599|                }
_RNvXs9_NtCsaH8JJb4dLgi_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  810|  22.7k|                fn as_widest(self) -> Self::Widest {
  811|  22.7k|                    self as $widest
  812|  22.7k|                }
_RNvXs2_NtCsaH8JJb4dLgi_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  814|    313|                fn from_widest(w: Self::Widest) -> Self {
  815|    313|                    let x = <$ty>::max_value().as_widest();
  816|    313|                    (w % x) as Self
  817|    313|                }
_RNvXsb_NtCsaH8JJb4dLgi_9arbitrary12unstructurednNtB5_3Int10from_usize:
  823|  11.3k|                fn from_usize(u: usize) -> Self {
  824|  11.3k|                    u as Self
  825|  11.3k|                }
_RNvXsb_NtCsaH8JJb4dLgi_9arbitrary12unstructurednNtB5_3Int7from_u8:
  819|  5.68k|                fn from_u8(b: u8) -> Self {
  820|  5.68k|                    b as Self
  821|  5.68k|                }
_RNvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  492|  74.5k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  493|  74.5k|        let n = std::cmp::min(buffer.len(), self.data.len());
  494|  74.5k|        buffer[..n].copy_from_slice(&self.data[..n]);
  495|  74.5k|        for byte in buffer[n..].iter_mut() {
  496|      0|            *byte = 0;
  497|      0|        }
  498|  74.5k|        self.data = &self.data[n..];
  499|  74.5k|        Ok(())
  500|  74.5k|    }
_RNvXs5_NtCsaH8JJb4dLgi_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  831|    599|                fn wrapping_add(self, rhs: Self) -> Self {
  832|    599|                    <$ty>::wrapping_add(self, rhs)
  833|    599|                }
_RNvXs9_NtCsaH8JJb4dLgi_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  814|  5.68k|                fn from_widest(w: Self::Widest) -> Self {
  815|  5.68k|                    let x = <$ty>::max_value().as_widest();
  816|  5.68k|                    (w % x) as Self
  817|  5.68k|                }
_RNvXsb_NtCsaH8JJb4dLgi_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  831|  5.68k|                fn wrapping_add(self, rhs: Self) -> Self {
  832|  5.68k|                    <$ty>::wrapping_add(self, rhs)
  833|  5.68k|                }
_RNvXs1_NtCsaH8JJb4dLgi_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  810|  1.14k|                fn as_widest(self) -> Self::Widest {
  811|  1.14k|                    self as $widest
  812|  1.14k|                }
_RNvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    599|    pub fn new(data: &'a [u8]) -> Self {
   86|    599|        Unstructured { data }
   87|    599|    }
_RNvXs1_NtCsaH8JJb4dLgi_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  814|    286|                fn from_widest(w: Self::Widest) -> Self {
  815|    286|                    let x = <$ty>::max_value().as_widest();
  816|    286|                    (w % x) as Self
  817|    286|                }
_RINvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    313|    fn int_in_range_impl<T>(
  303|    313|        range: ops::RangeInclusive<T>,
  304|    313|        mut bytes: impl Iterator<Item = u8>,
  305|    313|    ) -> Result<(T, usize)>
  306|    313|    where
  307|    313|        T: Int,
  308|    313|    {
  309|    313|        let start = range.start();
  310|    313|        let end = range.end();
  311|    313|        assert!(
  312|    313|            start <= end,
  313|    313|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    313|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    313|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|    313|        }
  321|    313|
  322|    313|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|    313|        let mut result = T::Widest::ZERO;
  324|    313|        let mut offset: usize = 0;
  325|       |
  326|    938|        while offset < mem::size_of::<T>()
  327|    626|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|    625|        {
  329|    625|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|    625|            result = (result << 8) | T::Widest::from_u8(byte);
  331|    625|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|    313|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|    313|            result = result % range;
  337|    313|        }
  338|       |
  339|    313|        Ok((
  340|    313|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|    313|            offset,
  342|    313|        ))
  343|    313|    }
_RNvXsb_NtCsaH8JJb4dLgi_9arbitrary12unstructurednNtB5_3Int11checked_add:
  827|  5.68k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  828|  5.68k|                    <$ty>::checked_add(self, rhs)
  829|  5.68k|                }
_RINvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    286|    fn int_in_range_impl<T>(
  303|    286|        range: ops::RangeInclusive<T>,
  304|    286|        mut bytes: impl Iterator<Item = u8>,
  305|    286|    ) -> Result<(T, usize)>
  306|    286|    where
  307|    286|        T: Int,
  308|    286|    {
  309|    286|        let start = range.start();
  310|    286|        let end = range.end();
  311|    286|        assert!(
  312|    286|            start <= end,
  313|    286|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    286|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    286|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|    286|        }
  321|    286|
  322|    286|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|    286|        let mut result = T::Widest::ZERO;
  324|    286|        let mut offset: usize = 0;
  325|       |
  326|    572|        while offset < mem::size_of::<T>()
  327|    286|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|    286|        {
  329|    286|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|    286|            result = (result << 8) | T::Widest::from_u8(byte);
  331|    286|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|    286|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|    286|            result = result % range;
  337|    286|        }
  338|       |
  339|    286|        Ok((
  340|    286|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|    286|            offset,
  342|    286|        ))
  343|    286|    }
_RNvMNtCsaH8JJb4dLgi_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    599|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    599|        if self.data.is_empty() {
  226|      0|            Ok(0)
  227|    599|        } else if self.data.len() == 1 {
  228|      0|            self.data = &[];
  229|      0|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    599|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    286|                let bytes = 1;
  242|    286|                let max_size = self.data.len() - bytes;
  243|    286|                let (rest, for_size) = self.data.split_at(max_size);
  244|    286|                self.data = rest;
  245|    286|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|    313|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|    313|                let bytes = 2;
  248|    313|                let max_size = self.data.len() - bytes;
  249|    313|                let (rest, for_size) = self.data.split_at(max_size);
  250|    313|                self.data = rest;
  251|    313|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    599|            Ok(len)
  267|       |        }
  268|    599|    }
_RNvXs5_NtCsaH8JJb4dLgi_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  819|    911|                fn from_u8(b: u8) -> Self {
  820|    911|                    b as Self
  821|    911|                }

rust_fuzzer_test_input:
  167|    600|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    600|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    600|
  170|    600|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    600|            // implementation. This helps the fuzzer avoid exploring all the
  172|    600|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    600|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    600|            // get to longer inputs that actually lead to interesting executions
  175|    600|            // quicker.
  176|    600|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    599|            }
  179|    599|
  180|    599|            let mut u = Unstructured::new(bytes);
  181|    599|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    599|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    599|            }
  199|       |
  200|    599|            let $data = match data {
  201|    599|                Ok(d) => d,
  202|      0|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    600|        }
_RNCNvCsa7YlXXn9uPf_13libfuzzer_sys15test_input_wrap0B3_:
   28|    600|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    600|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    600|        rust_fuzzer_test_input(data_slice);
   31|    600|    });
LLVMFuzzerTestOneInput:
   27|    600|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    600|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    600|    });
   32|    600|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    600|    }
   37|    600|    0
   38|    600|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvMs2_NtCs7hX78lIwswQ_9once_cell3impINtB5_8OnceCellNtNtCs4n7kKoQiZ5k_5alloc6string6StringE14is_initializedCsb88HNtaMA1w_10rle_encode:
   62|    599|    pub(crate) fn is_initialized(&self) -> bool {
   63|    599|        // An `Acquire` load is enough because that makes all the initialization
   64|    599|        // operations visible to us, and, this being a fast path, weaker
   65|    599|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    599|        // `SeqCst` operations on the slow path.
   67|    599|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    599|    }

_RNvMs4_NtCs7hX78lIwswQ_9once_cell4syncINtB5_8OnceCellNtNtCs4n7kKoQiZ5k_5alloc6string6StringE3getCsb88HNtaMA1w_10rle_encode:
  869|    599|        pub fn get(&self) -> Option<&T> {
  870|    599|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    599|                None
  875|       |            }
  876|    599|        }

_RNvNtCsiCVB9QNqJ4A_15unsigned_varint6encode3u64CsgQRVtDQWOas_17fvm_ipld_bitfield:
   69|  39.5k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  39.5k|    encode!(number, buf)
   71|  39.5k|}
_RNvNtCsiCVB9QNqJ4A_15unsigned_varint6encode10u64_bufferCsgQRVtDQWOas_17fvm_ipld_bitfield:
  119|  39.5k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  39.5k|    [0; U64_LEN]
  121|  39.5k|}


_RNvXse_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  84.7k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  84.7k|        let next = self.next.take()?;
  483|  82.3k|        self.next = self.iter.next();
  484|  82.3k|        Some(next)
  485|  84.7k|    }
_RNvMs8_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  2.39k|    fn new(lhs: A, rhs: B) -> Self {
  343|  2.39k|        Self {
  344|  2.39k|            lhs: Lookahead::new(lhs),
  345|  2.39k|            rhs: Lookahead::new(rhs),
  346|  2.39k|            combinator: Default::default(),
  347|  2.39k|        }
  348|  2.39k|    }
_RNvMs8_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  98.7k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  98.7k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  63.1k|            (Some(lhs), Some(rhs)) => {
  356|  63.1k|                // if both iterators are non-empty, we advance the one whichever's
  357|  63.1k|                // corresponding range has a smaller upper bound
  358|  63.1k|                if lhs.end <= rhs.end {
  359|  42.9k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  20.2k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  33.1k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    384|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  2.01k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  96.7k|        if advance_lhs {
  370|  76.0k|            self.lhs.next();
  371|  76.0k|        } else {
  372|  20.6k|            self.rhs.next();
  373|  20.6k|        }
  374|       |
  375|  96.7k|        range
  376|  98.7k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|   183k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   183k|        self.next.as_mut()
  474|   183k|    }
_RNvXsb_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  79.5k|    fn next(&mut self) -> Option<Self::Item> {
  438|  79.5k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  77.1k|        while let Some(next) = self.iter.peek() {
  443|  74.9k|            if next.start > range.end {
  444|  74.9k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  77.1k|        Some(range)
  452|  79.5k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|  4.79k|    fn new(mut iter: I) -> Self {
  468|  4.79k|        let next = iter.next();
  469|  4.79k|        Self { iter, next }
  470|  4.79k|    }
_RNvXsf_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs2pjNMKisfcl_4core7default7Default7defaultB9_:
   86|  2.39k|#[derive(Default)]
_RNvXs9_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  79.5k|    fn next(&mut self) -> Option<Self::Item> {
  388|  79.5k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  79.5k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  79.5k|    }
_RNCNvXs9_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  96.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  82.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|  2.39k|    fn new(mut iter: I) -> Self {
  468|  2.39k|        let next = iter.next();
  469|  2.39k|        Self { iter, next }
  470|  2.39k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  82.3k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  82.3k|        self.next.as_mut()
  474|  82.3k|    }
_RNvXse_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  76.0k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  76.0k|        let next = self.next.take()?;
  483|  76.0k|        self.next = self.iter.next();
  484|  76.0k|        Some(next)
  485|  76.0k|    }
_RNvXsh_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs2pjNMKisfcl_4core7default7Default7defaultB9_:
  151|  2.39k|#[derive(Default)]
_RNvXs6_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  78.4k|    fn next(&mut self) -> Option<Self::Item> {
  311|  78.4k|        self.0.next()
  312|  78.4k|    }
_RNvXNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|  10.6k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|  10.6k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|  10.6k|    }
_RNvXsb_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  78.4k|    fn next(&mut self) -> Option<Self::Item> {
  438|  78.4k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  82.3k|        while let Some(next) = self.iter.peek() {
  443|  80.1k|            if next.start > range.end {
  444|  73.8k|                break;
  445|  6.31k|            }
  446|  6.31k|
  447|  6.31k|            range.end = cmp::max(range.end, next.end);
  448|  6.31k|            self.iter.next();
  449|       |        }
  450|       |
  451|  76.0k|        Some(range)
  452|  78.4k|    }
_RNvMs8_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  84.7k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  84.7k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  13.8k|            (Some(lhs), Some(rhs)) => {
  356|  13.8k|                // if both iterators are non-empty, we advance the one whichever's
  357|  13.8k|                // corresponding range has a smaller upper bound
  358|  13.8k|                if lhs.end <= rhs.end {
  359|  3.20k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  10.6k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  24.7k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  43.8k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  2.39k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  82.3k|        if advance_lhs {
  370|  27.9k|            self.lhs.next();
  371|  54.4k|        } else {
  372|  54.4k|            self.rhs.next();
  373|  54.4k|        }
  374|       |
  375|  82.3k|        range
  376|  84.7k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  77.1k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  77.1k|        self.next.as_mut()
  474|  77.1k|    }
_RNvXs0_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  33.1k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  33.1k|        // the difference between a range and an empty range is just that range
  183|  33.1k|        Some(lhs)
  184|  33.1k|    }
_RNvXNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  3.20k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  3.20k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  3.20k|        // to ensure that the lower bounds are monotonically increasing
   93|  3.20k|        //
   94|  3.20k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  3.20k|        // `xxxx--` and then `xxxxxx`, not
   96|  3.20k|        // `--xx--` and then `xxxxxx`
   97|  3.20k|        //
   98|  3.20k|        // lhs:     xx----      xxxx--      --xx--
   99|  3.20k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  3.20k|        // output:  xx----      xxxx--      xxxx--
  101|  3.20k|
  102|  3.20k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  3.20k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  84.7k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  84.7k|        self.next.as_mut()
  474|  84.7k|    }
_RNvXs0_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|  20.2k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|  20.2k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|  20.2k|        // to avoid it from returning invalid bits in the next iteration
  166|  20.2k|        //
  167|  20.2k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|  20.2k|        // `------` and then `----xx`, not
  169|  20.2k|        // `------` and then `--xxxx`
  170|  20.2k|        //
  171|  20.2k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|  20.2k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|  20.2k|        // output:   ------      ------      xx----
  174|  20.2k|        // new lhs:  ----xx      ----xx      ----xx
  175|  20.2k|
  176|  20.2k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|  20.2k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|  20.2k|        difference
  179|  20.2k|    }
_RNvXse_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  75.0k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  75.0k|        let next = self.next.take()?;
  483|  75.0k|        self.next = self.iter.next();
  484|  75.0k|        Some(next)
  485|  75.0k|    }
_RNvXs6_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  79.5k|    fn next(&mut self) -> Option<Self::Item> {
  311|  79.5k|        self.0.next()
  312|  79.5k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|  2.39k|    fn new(mut iter: I) -> Self {
  468|  2.39k|        let next = iter.next();
  469|  2.39k|        Self { iter, next }
  470|  2.39k|    }
_RNvMsa_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|  2.39k|    pub fn new(iter: I) -> Self {
  425|  2.39k|        Self {
  426|  2.39k|            iter: Lookahead::new(iter),
  427|  2.39k|        }
  428|  2.39k|    }
_RNvMs5_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|  2.39k|    pub fn new(a: A, b: B) -> Self {
  298|  2.39k|        Self(Merge::new(_Combine::new(a, b)))
  299|  2.39k|    }
_RNvMs5_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  2.39k|    pub fn new(a: A, b: B) -> Self {
  298|  2.39k|        Self(Merge::new(_Combine::new(a, b)))
  299|  2.39k|    }
_RNvXs0_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|    384|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|    384|        // the difference between an empty range and a range is an empty range
  188|    384|        None
  189|    384|    }
_RNvMsa_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|  2.39k|    pub fn new(iter: I) -> Self {
  425|  2.39k|        Self {
  426|  2.39k|            iter: Lookahead::new(iter),
  427|  2.39k|        }
  428|  2.39k|    }
_RNvMs8_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|  2.39k|    fn new(lhs: A, rhs: B) -> Self {
  343|  2.39k|        Self {
  344|  2.39k|            lhs: Lookahead::new(lhs),
  345|  2.39k|            rhs: Lookahead::new(rhs),
  346|  2.39k|            combinator: Default::default(),
  347|  2.39k|        }
  348|  2.39k|    }
_RNvXNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  24.7k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  24.7k|        // the union of a range and an empty range is just that range
  111|  24.7k|        Some(lhs)
  112|  24.7k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|  2.39k|    fn new(mut iter: I) -> Self {
  468|  2.39k|        let next = iter.next();
  469|  2.39k|        Self { iter, next }
  470|  2.39k|    }
_RNvXs9_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  84.7k|    fn next(&mut self) -> Option<Self::Item> {
  388|  84.7k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  84.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  84.7k|    }
_RNvXse_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  27.9k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  27.9k|        let next = self.next.take()?;
  483|  27.9k|        self.next = self.iter.next();
  484|  27.9k|        Some(next)
  485|  27.9k|    }
_RNvXs0_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|  42.9k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|  42.9k|        // lhs:     xx----      xxxx--      --xx--
  157|  42.9k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|  42.9k|        // output:  xx----      xx----      ------
  159|  42.9k|
  160|  42.9k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|  42.9k|    }
_RNvXse_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  79.5k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  79.5k|        let next = self.next.take()?;
  483|  77.1k|        self.next = self.iter.next();
  484|  77.1k|        Some(next)
  485|  79.5k|    }
_RNCNvXs9_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  98.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  84.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|  43.8k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|  43.8k|        Some(rhs)
  116|  43.8k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|  2.39k|    fn new(mut iter: I) -> Self {
  468|  2.39k|        let next = iter.next();
  469|  2.39k|        Self { iter, next }
  470|  2.39k|    }
_RNvMsd_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  98.7k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  98.7k|        self.next.as_mut()
  474|  98.7k|    }

_RINvYINtNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|  2.39k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  2.39k|        Combine::new(self, other)
   33|  2.39k|    }
_RINvNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEEB4_:
  163|  4.79k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  4.79k|    let mut iter = bits.into_iter().peekable();
  165|  4.79k|
  166|  4.79k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  4.79k|    }))
  180|  4.79k|}
_RNvXs3_NtCsgQRVtDQWOas_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  30.3k|    fn next(&mut self) -> Option<Self::Item> {
  154|  30.3k|        self.0.next()
  155|  30.3k|    }
_RINvMs2_NtCsgQRVtDQWOas_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  4.79k|    pub fn new<II>(iter: II) -> Self
  140|  4.79k|    where
  141|  4.79k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  4.79k|    {
  143|  4.79k|        Self(iter.into_iter())
  144|  4.79k|    }
_RNvXs3_NtCsgQRVtDQWOas_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  79.8k|    fn next(&mut self) -> Option<Self::Item> {
  154|  79.8k|        self.0.next()
  155|  79.8k|    }
_RINvYINtNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  2.39k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  2.39k|        Combine::new(self, other)
   23|  2.39k|    }
_RINvMs2_NtCsgQRVtDQWOas_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|  2.39k|    pub fn new<II>(iter: II) -> Self
  140|  2.39k|    where
  141|  2.39k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  2.39k|    {
  143|  2.39k|        Self(iter.into_iter())
  144|  2.39k|    }
_RNCINvNtCsgQRVtDQWOas_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs2pjNMKisfcl_4core4iter8adapters6copied6CopiedINtNtNtNtCs4n7kKoQiZ5k_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  79.8k|    Ranges::new(iter::from_fn(move || {
  167|  79.8k|        let start = iter.next()?;
  168|  75.2k|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|  75.5k|        while let Some(&next) = iter.peek() {
  170|  73.2k|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|  73.2k|            } else if next > end {
  173|  72.9k|                break;
  174|    312|            }
  175|    312|            end = end.checked_add(1).expect("bitfield overflow");
  176|    312|            iter.next();
  177|       |        }
  178|  75.2k|        Some(start..end)
  179|  79.8k|    }))

_RNvMs4_CsgQRVtDQWOas_17fvm_ipld_bitfieldNtB5_8BitField5unset:
  178|  11.6k|    pub fn unset(&mut self, bit: u64) {
  179|  11.6k|        if bit == u64::MAX {
  180|    556|            return;
  181|  11.0k|        }
  182|  11.0k|        self.set.remove(&bit);
  183|  11.0k|        self.unset.insert(bit);
  184|  11.6k|    }
_RNvXsi_CsgQRVtDQWOas_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs2pjNMKisfcl_4core7default7Default7defaultB5_:
   42|  1.19k|#[derive(Debug, Default, Clone)]
_RNvMs4_CsgQRVtDQWOas_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|  2.39k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|  2.39k|        self.inner_ranges()
  287|  2.39k|            .union(ranges_from_bits(self.set.iter().copied()))
  288|  2.39k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|  2.39k|    }
_RNvMs4_CsgQRVtDQWOas_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|  2.39k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|  2.39k|        iter::Ranges::new(self.ranges.iter().cloned())
  281|  2.39k|    }
_RNvXs_CsgQRVtDQWOas_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCs2pjNMKisfcl_4core3cmp9PartialEq2eq:
   53|    599|    fn eq(&self, other: &Self) -> bool {
   54|    599|        Iterator::eq(self.ranges(), other.ranges())
   55|    599|    }
_RNvMs4_CsgQRVtDQWOas_17fvm_ipld_bitfieldNtB5_8BitField7try_set:
  168|  22.5k|    pub fn try_set(&mut self, bit: u64) -> Result<(), OutOfRangeError> {
  169|  22.5k|        if bit == u64::MAX {
  170|     68|            return Err(OutOfRangeError);
  171|  22.4k|        }
  172|  22.4k|        self.unset.remove(&bit);
  173|  22.4k|        self.set.insert(bit);
  174|  22.4k|        Ok(())
  175|  22.5k|    }

_RNvXNtCsgQRVtDQWOas_17fvm_ipld_bitfield5rangeINtNtNtCs2pjNMKisfcl_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  38.5k|    fn size(&self) -> Self::Idx {
   15|  38.5k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  38.5k|            self.end - self.start
   19|       |        }
   20|  38.5k|    }

_RNvMs1_NtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|  1.19k|    pub fn to_bytes(&self) -> Vec<u8> {
  200|  1.19k|        let mut iter = self.ranges();
  201|       |
  202|  1.19k|        let first_range = match iter.next() {
  203|  1.11k|            Some(range) => range,
  204|     88|            None => return Default::default(),
  205|       |        };
  206|       |
  207|  1.11k|        let mut writer = BitWriter::new();
  208|  1.11k|        writer.write(0, 2); // version 00
  209|  1.11k|
  210|  1.11k|        if first_range.start == 0 {
  211|    670|            writer.write(1, 1); // the first bit is a 1
  212|    670|        } else {
  213|    440|            writer.write(0, 1); // the first bit is a 0
  214|    440|            writer.write_len(first_range.start); // the number of leading 0s
  215|    440|        }
  216|       |
  217|  1.11k|        writer.write_len(first_range.size());
  218|  1.11k|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  38.5k|        for range in iter {
  223|  37.4k|            writer.write_len(range.start - index); // zeros
  224|  37.4k|            writer.write_len(range.size()); // ones
  225|  37.4k|            index = range.end;
  226|  37.4k|        }
  227|       |
  228|  1.11k|        writer.finish()
  229|  1.19k|    }
_RNvXs0_NtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsaH8JJb4dLgi_9arbitrary9Arbitrary9arbitrary:
  113|    599|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|    599|        let mut next_value: bool = bool::arbitrary(u)?;
  115|    599|        let mut ranges = Vec::new();
  116|    599|        let mut index = 0u64;
  117|    599|        let mut total_len: u64 = 0;
  118|       |
  119|    599|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|    599|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  5.68k|            let len = u64::arbitrary(u)?;
  124|  5.68k|            let shift = u.int_in_range(0..=63)?;
  125|  5.68k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  5.68k|
  127|  5.68k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  5.68k|            if ovf {
  129|     57|                break;
  130|  5.62k|            }
  131|  5.62k|            total_len = new_total_len;
  132|  5.62k|            let start = index;
  133|  5.62k|            index += len;
  134|  5.62k|            let end = index;
  135|  5.62k|
  136|  5.62k|            if next_value {
  137|  2.88k|                ranges.push(start..end);
  138|  2.88k|            }
  139|       |
  140|  5.62k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|    599|        Ok(Self {
  144|    599|            ranges,
  145|    599|            ..Default::default()
  146|    599|        })
  147|    599|    }
_RNvXs0_NtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsaH8JJb4dLgi_9arbitrary9Arbitrary9size_hint:
  149|    600|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    600|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    600|    }
_RNvMs1_NtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    599|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    599|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    599|        let version = reader.read(2);
  160|    599|        if version != 0 {
  161|      0|            return Err(Error::UnsupportedVersion);
  162|    599|        }
  163|    599|
  164|    599|        let mut next_value = reader.read(1) == 1;
  165|    599|        let mut ranges = Vec::new();
  166|    599|        let mut index = 0u64;
  167|    599|        let mut total_len: u64 = 0;
  168|       |
  169|  38.8k|        while let Some(len) = reader.read_len()? {
  170|  38.2k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  38.2k|            if ovf {
  172|      0|                return Err(Error::RLEOverflow);
  173|  38.2k|            }
  174|  38.2k|            total_len = new_total_len;
  175|  38.2k|            let start = index;
  176|  38.2k|            index += len;
  177|  38.2k|            let end = index;
  178|  38.2k|
  179|  38.2k|            if next_value {
  180|  19.2k|                ranges.push(start..end);
  181|  19.2k|            }
  182|       |
  183|  38.2k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    599|        if next_value {
  189|      0|            return Err(Error::NotMinimal);
  190|    599|        }
  191|    599|
  192|    599|        Ok(Self {
  193|    599|            ranges,
  194|    599|            ..Default::default()
  195|    599|        })
  196|    599|    }

_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|   166k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|   166k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|   166k|        let mask = (1 << num_bits) - 1;
   55|   166k|        (self.bits & mask) as u8
   56|   166k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|   166k|    pub fn drop(&mut self, num_bits: u32) {
   61|   166k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|   166k|        self.bits >>= num_bits;
   65|   166k|        self.num_bits -= num_bits;
   66|   166k|
   67|   166k|        // not sure why this being outside of the if improves the performance
   68|   166k|        // bit it does, probably related to keeping caches warm
   69|   166k|        let byte = self.bytes.first().unwrap_or(&0);
   70|   166k|        self.bits |= (*byte as u64) << self.num_bits;
   71|   166k|
   72|   166k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|   166k|        if self.num_bits < 8 {
   74|   135k|            self.num_bits += 8;
   75|   135k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|   135k|        }
   77|   166k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  19.7k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  19.7k|        let mut len = 0u64;
   94|       |
   95|   127k|        for i in 0..VARINT_MAX_BYTES {
   96|   127k|            let byte = self.read(8);
   97|   127k|
   98|   127k|            // strip off the most significant bit and add
   99|   127k|            // it to the output
  100|   127k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|   127k|
  102|   127k|            // if the most significant bit is a 0, we've
  103|   127k|            // reached the end of the varint
  104|   127k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  19.7k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      0|                    break;
  109|  19.7k|                }
  110|  19.7k|                return Ok(len);
  111|   107k|            }
  112|       |        }
  113|       |
  114|      0|        Err(Error::InvalidVarint)
  115|  19.7k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|   128k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|   128k|        debug_assert!(num_bits <= 8);
   83|       |
   84|   128k|        let res = self.peek(num_bits);
   85|   128k|        self.drop(num_bits);
   86|   128k|
   87|   128k|        res
   88|   128k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  38.8k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  38.8k|        // We're done.
  120|  38.8k|        if !self.has_more() {
  121|    599|            return Ok(None);
  122|  38.2k|        }
  123|  38.2k|
  124|  38.2k|        let peek6 = self.peek(6);
  125|       |
  126|  38.2k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|  16.7k|            self.drop(1);
  129|  16.7k|            1
  130|  21.5k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  1.77k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  1.77k|            self.drop(6);
  134|  1.77k|            if val < 2 {
  135|      0|                return Err(Error::NotMinimal);
  136|  1.77k|            }
  137|  1.77k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  19.7k|            self.drop(2);
  141|  19.7k|            let val = self.read_varint()?;
  142|  19.7k|            if val < 16 {
  143|      0|                return Err(Error::NotMinimal);
  144|  19.7k|            }
  145|  19.7k|            val
  146|       |        };
  147|       |
  148|  38.2k|        Ok(Some(len))
  149|  38.8k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  38.8k|    pub fn has_more(&self) -> bool {
  153|  38.8k|        self.bits != 0 || !self.bytes.is_empty()
  154|  38.8k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    599|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    599|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    599|        // data.
   28|    599|        if bytes.last() == Some(&0) {
   29|      0|            return Err(Error::NotMinimal);
   30|    599|        }
   31|    599|        let mut bits = 0u64;
   32|  1.79k|        for i in 0..2 {
   33|  1.19k|            let byte = bytes.get(i).unwrap_or(&0);
   34|  1.19k|            bits |= (*byte as u64) << (8 * i);
   35|  1.19k|        }
   36|       |
   37|    599|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    599|
   39|    599|        Ok(Self {
   40|    599|            bytes,
   41|    599|            bits,
   42|    599|            num_bits: 16,
   43|    599|        })
   44|    599|    }

_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|  1.11k|    pub fn finish(mut self) -> Vec<u8> {
   61|  1.11k|        if self.bits > 0 {
   62|    858|            self.bytes.push(self.bits as u8);
   63|    858|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|  1.11k|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|  1.11k|        self.bytes
   71|  1.11k|    }
_RNvXs_NtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs2pjNMKisfcl_4core7default7Default7defaultB8_:
    4|  1.11k|#[derive(Default, Clone, Debug)]
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|  1.11k|    pub fn new() -> Self {
   18|  1.11k|        Default::default()
   19|  1.11k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  76.5k|    pub fn write_len(&mut self, len: u64) {
   39|  76.5k|        debug_assert!(len > 0);
   40|       |
   41|  76.5k|        if len == 1 {
   42|  33.4k|            // Block Single (prefix 1)
   43|  33.4k|            self.write(1, 1);
   44|  43.0k|        } else if len < 16 {
   45|  3.55k|            // Block Short (prefix 01)
   46|  3.55k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  3.55k|            self.write(len as u8, 4);
   48|  3.55k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  39.5k|            self.write(0, 2);
   51|  39.5k|
   52|  39.5k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|   254k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|   254k|                self.write(byte, 8);
   55|   254k|            }
   56|       |        }
   57|  76.5k|    }
_RNvMNtNtCsgQRVtDQWOas_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|   336k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|   336k|        debug_assert!(num_bits <= 8);
   24|   336k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|   336k|        self.bits |= (byte as u16) << self.num_bits;
   27|   336k|        self.num_bits += num_bits;
   28|   336k|
   29|   336k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|   336k|        if self.num_bits >= 8 {
   31|   271k|            self.bytes.push(self.bits as u8);
   32|   271k|            self.bits >>= 8;
   33|   271k|            self.num_bits -= 8;
   34|   271k|        }
   35|   336k|    }

_RNvXs_Csb88HNtaMA1w_10rle_encodeNtB4_9OperationNtCsaH8JJb4dLgi_9arbitrary9Arbitrary9size_hintB4_:
    6|    599|#[derive(Debug, Arbitrary)]
_RNCNvNvCsb88HNtaMA1w_10rle_encode25RECURSIVE_COUNT_Operation7___getit0B5_:
    6|      1|#[derive(Debug, Arbitrary)]
_RNvXs_Csb88HNtaMA1w_10rle_encodeNtB4_9OperationNtCsaH8JJb4dLgi_9arbitrary9Arbitrary19arbitrary_take_rest:
    6|    493|#[derive(Debug, Arbitrary)]
_RNvXs_Csb88HNtaMA1w_10rle_encodeNtB4_9OperationNtCsaH8JJb4dLgi_9arbitrary9Arbitrary9arbitrary:
    6|  33.6k|#[derive(Debug, Arbitrary)]
_RNCNvXs_Csb88HNtaMA1w_10rle_encodeNtB6_9OperationNtCsaH8JJb4dLgi_9arbitrary9Arbitrary19arbitrary_take_rest0B6_:
    6|    493|#[derive(Debug, Arbitrary)]
_RNCNvXs_Csb88HNtaMA1w_10rle_encodeNtB6_9OperationNtCsaH8JJb4dLgi_9arbitrary9Arbitrary9arbitrary0B6_:
    6|  33.6k|#[derive(Debug, Arbitrary)]
_RNCNvXs_Csb88HNtaMA1w_10rle_encodeNtB6_9OperationNtCsaH8JJb4dLgi_9arbitrary9Arbitrary9size_hint0B6_:
    6|    599|#[derive(Debug, Arbitrary)]

