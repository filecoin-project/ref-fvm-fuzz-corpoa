rust_fuzzer_test_input:
  215|    203|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    203|                }
  223|    203|
  224|    203|                __libfuzzer_sys_run(bytes);
  225|    203|                0
  226|    203|            }
_RNvNvCs2qvRzXfnOKo_10rle_decode1__19___libfuzzer_sys_run:
  241|    158|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|    158|                $body
  243|    203|            }
LLVMFuzzerTestOneInput:
   58|    203|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    203|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    203|    });
   63|    203|
   64|    203|    match test_input {
   65|    203|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    203|}
_RNCNvCseq2thxlQfnx_13libfuzzer_sys15test_input_wrap0B3_:
   59|    203|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    203|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    203|        rust_fuzzer_test_input(data_slice)
   62|    203|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvMs2_NtCshU9M7pUKDAE_9once_cell3impINtB5_8OnceCellNtNtCsdecYurlFeGH_5alloc6string6StringE14is_initializedCs2qvRzXfnOKo_10rle_decode:
   49|    203|    pub(crate) fn is_initialized(&self) -> bool {
   50|    203|        // An `Acquire` load is enough because that makes all the initialization
   51|    203|        // operations visible to us, and, this being a fast path, weaker
   52|    203|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    203|        // `SeqCst` operations on the slow path.
   54|    203|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    203|    }

_RNvMs4_NtCshU9M7pUKDAE_9once_cell4syncINtB5_8OnceCellNtNtCsdecYurlFeGH_5alloc6string6StringE3getCs2qvRzXfnOKo_10rle_decode:
  965|    203|        pub fn get(&self) -> Option<&T> {
  966|    203|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    203|                None
  971|       |            }
  972|    203|        }

_RNvNtCshctigG3TaiR_15unsigned_varint6encode3u64CsimSNx9tGulf_17fvm_ipld_bitfield:
   69|  3.96k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  3.96k|    encode!(number, buf)
   71|  3.96k|}
_RNvNtCshctigG3TaiR_15unsigned_varint6encode10u64_bufferCsimSNx9tGulf_17fvm_ipld_bitfield:
  119|  3.96k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.96k|    [0; U64_LEN]
  121|  3.96k|}

_RNvMs8_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    158|    fn new(lhs: A, rhs: B) -> Self {
  344|    158|        Self {
  345|    158|            lhs: Lookahead::new(lhs),
  346|    158|            rhs: Lookahead::new(rhs),
  347|    158|            combinator: Default::default(),
  348|    158|        }
  349|    158|    }
_RNvXs6_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  312|  13.6k|        self.0.next()
  313|  13.6k|    }
_RNvXs9_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  389|  13.6k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  13.6k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  13.6k|    }
_RNvMsa_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    158|    pub fn new(iter: I) -> Self {
  426|    158|        Self {
  427|    158|            iter: Lookahead::new(iter),
  428|    158|        }
  429|    158|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  13.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  13.4k|        self.next.as_mut()
  475|  13.4k|    }
_RNvMs8_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  13.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  13.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  13.4k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    158|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  13.4k|        if advance_lhs {
  371|  13.4k|            self.lhs.next();
  372|  13.4k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  13.4k|        range
  377|  13.6k|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    158|    fn new(mut iter: I) -> Self {
  469|    158|        let next = iter.next();
  470|    158|        Self { iter, next }
  471|    158|    }
_RNvMs5_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    158|    pub fn new(a: A, b: B) -> Self {
  299|    158|        Self(Merge::new(_Combine::new(a, b)))
  300|    158|    }
_RNvXsf_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCscKKu0w0qiPL_4core7default7Default7defaultB9_:
   87|    158|#[derive(Default)]
_RNvMsa_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    158|    pub fn new(iter: I) -> Self {
  426|    158|        Self {
  427|    158|            iter: Lookahead::new(iter),
  428|    158|        }
  429|    158|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    158|    fn new(mut iter: I) -> Self {
  469|    158|        let next = iter.next();
  470|    158|        Self { iter, next }
  471|    158|    }
_RNvXsb_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  439|  13.6k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  13.4k|        while let Some(next) = self.iter.peek() {
  444|  13.2k|            if next.start > range.end {
  445|  13.2k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  13.4k|        Some(range)
  453|  13.6k|    }
_RNvXs0_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  182|  13.4k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  13.4k|        // the difference between a range and an empty range is just that range
  184|  13.4k|        Some(lhs)
  185|  13.4k|    }
_RNCNvXs9_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  13.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  13.6k|        let next = self.next.take()?;
  484|  13.4k|        self.next = self.iter.next();
  485|  13.4k|        Some(next)
  486|  13.6k|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  13.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  13.6k|        self.next.as_mut()
  475|  13.6k|    }
_RNvXs6_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  312|  13.6k|        self.0.next()
  313|  13.6k|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|    316|    fn new(mut iter: I) -> Self {
  469|    316|        let next = iter.next();
  470|    316|        Self { iter, next }
  471|    316|    }
_RNCNvXs9_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  13.6k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    158|    fn new(mut iter: I) -> Self {
  469|    158|        let next = iter.next();
  470|    158|        Self { iter, next }
  471|    158|    }
_RNvXse_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  13.6k|        let next = self.next.take()?;
  484|  13.4k|        self.next = self.iter.next();
  485|  13.4k|        Some(next)
  486|  13.6k|    }
_RNvMs8_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    158|    fn new(lhs: A, rhs: B) -> Self {
  344|    158|        Self {
  345|    158|            lhs: Lookahead::new(lhs),
  346|    158|            rhs: Lookahead::new(rhs),
  347|    158|            combinator: Default::default(),
  348|    158|        }
  349|    158|    }
_RNvXs9_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  389|  13.6k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  13.6k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  13.6k|    }
_RNvMs5_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    158|    pub fn new(a: A, b: B) -> Self {
  299|    158|        Self(Merge::new(_Combine::new(a, b)))
  300|    158|    }
_RNvXsh_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCscKKu0w0qiPL_4core7default7Default7defaultB9_:
  152|    158|#[derive(Default)]
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  13.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  13.4k|        self.next.as_mut()
  475|  13.4k|    }
_RNvXsb_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  439|  13.6k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  13.4k|        while let Some(next) = self.iter.peek() {
  444|  13.2k|            if next.start > range.end {
  445|  13.2k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  13.4k|        Some(range)
  453|  13.6k|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  27.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  27.2k|        self.next.as_mut()
  475|  27.2k|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    158|    fn new(mut iter: I) -> Self {
  469|    158|        let next = iter.next();
  470|    158|        Self { iter, next }
  471|    158|    }
_RNvXse_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  13.4k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  13.4k|        let next = self.next.take()?;
  484|  13.4k|        self.next = self.iter.next();
  485|  13.4k|        Some(next)
  486|  13.4k|    }
_RNCNvXs9_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  13.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  13.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  13.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  13.4k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    158|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  13.4k|        if advance_lhs {
  371|  13.4k|            self.lhs.next();
  372|  13.4k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  13.4k|        range
  377|  13.6k|    }
_RNvMsd_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  13.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  13.6k|        self.next.as_mut()
  475|  13.6k|    }
_RNvXse_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  13.4k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  13.4k|        let next = self.next.take()?;
  484|  13.4k|        self.next = self.iter.next();
  485|  13.4k|        Some(next)
  486|  13.4k|    }
_RNCNvXs9_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  13.6k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXNtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  110|  13.4k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  13.4k|        // the union of a range and an empty range is just that range
  112|  13.4k|        Some(lhs)
  113|  13.4k|    }

_RNvXs3_NtCsimSNx9tGulf_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|    316|    fn next(&mut self) -> Option<Self::Item> {
  155|    316|        self.0.next()
  156|    316|    }
_RINvMs2_NtCsimSNx9tGulf_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    158|    pub fn new<II>(iter: II) -> Self
  141|    158|    where
  142|    158|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    158|    {
  144|    158|        Self(iter.into_iter())
  145|    158|    }
_RINvYINtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    158|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    158|        Combine::new(self, other)
   24|    158|    }
_RNvXs3_NtCsimSNx9tGulf_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  13.6k|    fn next(&mut self) -> Option<Self::Item> {
  155|  13.6k|        self.0.next()
  156|  13.6k|    }
_RNCINvNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0B6_:
  167|    316|    Ranges::new(iter::from_fn(move || {
  168|    316|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|    316|    }))
_RINvMs2_NtCsimSNx9tGulf_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|    316|    pub fn new<II>(iter: II) -> Self
  141|    316|    where
  142|    316|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    316|    {
  144|    316|        Self(iter.into_iter())
  145|    316|    }
_RINvYINtNtNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    158|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    158|        Combine::new(self, other)
   34|    158|    }
_RINvNtCsimSNx9tGulf_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCscKKu0w0qiPL_4core4iter8adapters6copied6CopiedINtNtNtNtCsdecYurlFeGH_5alloc11collections5btree3set4IteryEEEB4_:
  164|    316|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|    316|    let mut iter = bits.into_iter().peekable();
  166|    316|
  167|    316|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|    316|    }))
  181|    316|}

_RNvMs4_CsimSNx9tGulf_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    158|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    158|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    158|    }
_RNvXsa_CsimSNx9tGulf_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCscKKu0w0qiPL_4core7default7Default7defaultB5_:
   42|    158|#[derive(Debug, Default, Clone)]
_RNvMs4_CsimSNx9tGulf_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    158|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    158|        self.inner_ranges()
  287|    158|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    158|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    158|    }

_RNvXNtCsimSNx9tGulf_17fvm_ipld_bitfield5rangeINtNtNtCscKKu0w0qiPL_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  13.4k|    fn size(&self) -> Self::Idx {
   17|  13.4k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  13.4k|            self.end - self.start
   21|       |        }
   22|  13.4k|    }

_RNvMs1_NtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    203|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    203|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    202|        let version = reader.read(2);
  162|    202|        if version != 0 {
  163|      1|            return Err(Error::UnsupportedVersion);
  164|    201|        }
  165|    201|
  166|    201|        let mut next_value = reader.read(1) == 1;
  167|    201|        let mut ranges = Vec::new();
  168|    201|        let mut index = 0u64;
  169|    201|        let mut total_len: u64 = 0;
  170|       |
  171|  29.2k|        while let Some(len) = reader.read_len()? {
  172|  29.0k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  29.0k|            if ovf {
  174|      1|                return Err(Error::RLEOverflow);
  175|  29.0k|            }
  176|  29.0k|            total_len = new_total_len;
  177|  29.0k|            let start = index;
  178|  29.0k|            index += len;
  179|  29.0k|            let end = index;
  180|  29.0k|
  181|  29.0k|            if next_value {
  182|  14.5k|                ranges.push(start..end);
  183|  14.5k|            }
  184|       |
  185|  29.0k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    173|        if next_value {
  191|     15|            return Err(Error::NotMinimal);
  192|    158|        }
  193|    158|
  194|    158|        Ok(Self {
  195|    158|            ranges,
  196|    158|            ..Default::default()
  197|    158|        })
  198|    203|    }
_RNvMs1_NtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    158|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    158|        let mut iter = self.ranges();
  203|       |
  204|    158|        let first_range = match iter.next() {
  205|    158|            Some(range) => range,
  206|      0|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    158|        let mut writer = BitWriter::new();
  210|    158|        writer.write(0, 2); // version 00
  211|    158|
  212|    158|        if first_range.start == 0 {
  213|     40|            writer.write(1, 1); // the first bit is a 1
  214|    118|        } else {
  215|    118|            writer.write(0, 1); // the first bit is a 0
  216|    118|            writer.write_len(first_range.start); // the number of leading 0s
  217|    118|        }
  218|       |
  219|    158|        writer.write_len(first_range.size());
  220|    158|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  13.4k|        for range in iter {
  225|  13.2k|            writer.write_len(range.start - index); // zeros
  226|  13.2k|            writer.write_len(range.size()); // ones
  227|  13.2k|            index = range.end;
  228|  13.2k|        }
  229|       |
  230|    158|        writer.finish()
  231|    158|    }

_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    203|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    203|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    203|        // data.
   29|    203|        if bytes.last() == Some(&0) {
   30|      1|            return Err(Error::NotMinimal);
   31|    202|        }
   32|    202|        let mut bits = 0u64;
   33|    606|        for i in 0..2 {
   34|    404|            let byte = bytes.get(i).unwrap_or(&0);
   35|    404|            bits |= (*byte as u64) << (8 * i);
   36|    404|        }
   37|       |
   38|    202|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    202|
   40|    202|        Ok(Self {
   41|    202|            bytes,
   42|    202|            bits,
   43|    202|            num_bits: 16,
   44|    202|        })
   45|    203|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  43.6k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  43.6k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  43.6k|        let mask = (1 << num_bits) - 1;
   56|  43.6k|        (self.bits & mask) as u8
   57|  43.6k|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  4.34k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  4.34k|        let mut len = 0u64;
   95|       |
   96|  14.1k|        for i in 0..VARINT_MAX_BYTES {
   97|  14.1k|            let byte = self.read(8);
   98|  14.1k|
   99|  14.1k|            // strip off the most significant bit and add
  100|  14.1k|            // it to the output
  101|  14.1k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  14.1k|
  103|  14.1k|            // if the most significant bit is a 0, we've
  104|  14.1k|            // reached the end of the varint
  105|  14.1k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  4.33k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      4|                    break;
  110|  4.33k|                }
  111|  4.33k|                return Ok(len);
  112|  9.79k|            }
  113|       |        }
  114|       |
  115|      6|        Err(Error::InvalidVarint)
  116|  4.34k|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  43.6k|    pub fn drop(&mut self, num_bits: u32) {
   62|  43.6k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  43.6k|        self.bits >>= num_bits;
   66|  43.6k|        self.num_bits -= num_bits;
   67|  43.6k|
   68|  43.6k|        // not sure why this being outside of the if improves the performance
   69|  43.6k|        // bit it does, probably related to keeping caches warm
   70|  43.6k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  43.6k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  43.6k|
   73|  43.6k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  43.6k|        if self.num_bits < 8 {
   75|  21.4k|            self.num_bits += 8;
   76|  21.4k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  22.1k|        }
   78|  43.6k|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  29.2k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  29.2k|        // We're done.
  121|  29.2k|        if !self.has_more() {
  122|    173|            return Ok(None);
  123|  29.1k|        }
  124|  29.1k|
  125|  29.1k|        let peek6 = self.peek(6);
  126|       |
  127|  29.1k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|  19.6k|            self.drop(1);
  130|  19.6k|            1
  131|  9.46k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|  5.12k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|  5.12k|            self.drop(6);
  135|  5.12k|            if val < 2 {
  136|      7|                return Err(Error::NotMinimal);
  137|  5.11k|            }
  138|  5.11k|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  4.34k|            self.drop(2);
  142|  4.34k|            let val = self.read_varint()?;
  143|  4.33k|            if val < 16 {
  144|     14|                return Err(Error::NotMinimal);
  145|  4.32k|            }
  146|  4.32k|            val
  147|       |        };
  148|       |
  149|  29.0k|        Ok(Some(len))
  150|  29.2k|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  153|  29.2k|    pub fn has_more(&self) -> bool {
  154|  29.2k|        self.bits != 0 || !self.bytes.is_empty()
  155|  29.2k|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  14.5k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  14.5k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  14.5k|        let res = self.peek(num_bits);
   86|  14.5k|        self.drop(num_bits);
   87|  14.5k|
   88|  14.5k|        res
   89|  14.5k|    }

_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  45.3k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  45.3k|        debug_assert!(num_bits <= 8);
   25|  45.3k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  45.3k|        self.bits |= (byte as u16) << self.num_bits;
   28|  45.3k|        self.num_bits += num_bits;
   29|  45.3k|
   30|  45.3k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  45.3k|        if self.num_bits >= 8 {
   32|  20.3k|            self.bytes.push(self.bits as u8);
   33|  20.3k|            self.bits >>= 8;
   34|  20.3k|            self.num_bits -= 8;
   35|  25.0k|        }
   36|  45.3k|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  26.8k|    pub fn write_len(&mut self, len: u64) {
   40|  26.8k|        debug_assert!(len > 0);
   41|       |
   42|  26.8k|        if len == 1 {
   43|  18.2k|            // Block Single (prefix 1)
   44|  18.2k|            self.write(1, 1);
   45|  18.2k|        } else if len < 16 {
   46|  4.65k|            // Block Short (prefix 01)
   47|  4.65k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  4.65k|            self.write(len as u8, 4);
   49|  4.65k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  3.96k|            self.write(0, 2);
   52|  3.96k|
   53|  3.96k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  13.5k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  13.5k|                self.write(byte, 8);
   56|  13.5k|            }
   57|       |        }
   58|  26.8k|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   18|    158|    pub fn new() -> Self {
   19|    158|        Default::default()
   20|    158|    }
_RNvMNtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    158|    pub fn finish(mut self) -> Vec<u8> {
   62|    158|        if self.bits > 0 {
   63|     20|            self.bytes.push(self.bits as u8);
   64|    138|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    158|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    158|        self.bytes
   72|    158|    }
_RNvXs_NtNtCsimSNx9tGulf_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCscKKu0w0qiPL_4core7default7Default7defaultB8_:
    5|    158|#[derive(Default, Clone, Debug)]

