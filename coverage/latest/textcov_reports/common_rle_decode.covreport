rust_fuzzer_test_input:
  141|    202|        pub extern "C" fn rust_fuzzer_test_input($bytes: &[u8]) {
  142|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  143|       |            // formatting of the input to that file. This is only intended for
  144|       |            // `cargo fuzz`'s use!
  145|       |
  146|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  147|    202|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  148|       |                use std::io::Write;
  149|      0|                let mut file = std::fs::File::create(path)
  150|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  151|      0|                writeln!(&mut file, "{:?}", $bytes)
  152|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  153|      0|                return;
  154|    202|            }
  155|       |
  156|       |            $body
  157|    202|        }
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}
LLVMFuzzerTestOneInput:
   27|    202|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    202|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    202|    });
   32|    202|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    202|    }
   37|    202|    0
   38|    202|}
_RNCNvCs2laV9Zv1Vx9_13libfuzzer_sys15test_input_wrap0B3_:
   28|    202|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    202|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    202|        rust_fuzzer_test_input(data_slice);
   31|    202|    });

_RNvMs2_NtCs79dTyp1dc9q_9once_cell3impINtB5_8OnceCellNtNtCsgkyd3Od2GCu_5alloc6string6StringE14is_initializedCs3dMzQRqiQn6_10rle_decode:
   62|    202|    pub(crate) fn is_initialized(&self) -> bool {
   63|    202|        // An `Acquire` load is enough because that makes all the initialization
   64|    202|        // operations visible to us, and, this being a fast path, weaker
   65|    202|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    202|        // `SeqCst` operations on the slow path.
   67|    202|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    202|    }

_RNvMs4_NtCs79dTyp1dc9q_9once_cell4syncINtB5_8OnceCellNtNtCsgkyd3Od2GCu_5alloc6string6StringE3getCs3dMzQRqiQn6_10rle_decode:
  869|    202|        pub fn get(&self) -> Option<&T> {
  870|    202|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    202|                None
  875|       |            }
  876|    202|        }

_RNvNtCslPnyvF3IU4Y_15unsigned_varint6encode3u64Cs5XVzSlMbIV9_17fvm_ipld_bitfield:
   69|  4.48k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  4.48k|    encode!(number, buf)
   71|  4.48k|}
_RNvNtCslPnyvF3IU4Y_15unsigned_varint6encode10u64_bufferCs5XVzSlMbIV9_17fvm_ipld_bitfield:
  119|  4.48k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  4.48k|    [0; U64_LEN]
  121|  4.48k|}

_RNvXsh_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs2NzlCTJjHie_4core7default7Default7defaultB9_:
  151|    157|#[derive(Default)]
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    157|    fn new(mut iter: I) -> Self {
  468|    157|        let next = iter.next();
  469|    157|        Self { iter, next }
  470|    157|    }
_RNvMs8_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  15.3k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  15.3k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  15.1k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    157|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  15.1k|        if advance_lhs {
  370|  15.1k|            self.lhs.next();
  371|  15.1k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  15.1k|        range
  376|  15.3k|    }
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  15.3k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  15.3k|        self.next.as_mut()
  474|  15.3k|    }
_RNvMsa_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    157|    pub fn new(iter: I) -> Self {
  425|    157|        Self {
  426|    157|            iter: Lookahead::new(iter),
  427|    157|        }
  428|    157|    }
_RNvXs0_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  15.1k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  15.1k|        // the difference between a range and an empty range is just that range
  183|  15.1k|        Some(lhs)
  184|  15.1k|    }
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    157|    fn new(mut iter: I) -> Self {
  468|    157|        let next = iter.next();
  469|    157|        Self { iter, next }
  470|    157|    }
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|    314|    fn new(mut iter: I) -> Self {
  468|    314|        let next = iter.next();
  469|    314|        Self { iter, next }
  470|    314|    }
_RNvXsb_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  438|  15.3k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  15.1k|        while let Some(next) = self.iter.peek() {
  443|  15.0k|            if next.start > range.end {
  444|  15.0k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  15.1k|        Some(range)
  452|  15.3k|    }
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    157|    fn new(mut iter: I) -> Self {
  468|    157|        let next = iter.next();
  469|    157|        Self { iter, next }
  470|    157|    }
_RNvXNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  15.1k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  15.1k|        // the union of a range and an empty range is just that range
  111|  15.1k|        Some(lhs)
  112|  15.1k|    }
_RNvXse_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  15.3k|        let next = self.next.take()?;
  483|  15.1k|        self.next = self.iter.next();
  484|  15.1k|        Some(next)
  485|  15.3k|    }
_RNCNvXs9_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  15.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  311|  15.3k|        self.0.next()
  312|  15.3k|    }
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  15.3k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  15.3k|        self.next.as_mut()
  474|  15.3k|    }
_RNvXse_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  15.1k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  15.1k|        let next = self.next.take()?;
  483|  15.1k|        self.next = self.iter.next();
  484|  15.1k|        Some(next)
  485|  15.1k|    }
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  30.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  30.6k|        self.next.as_mut()
  474|  30.6k|    }
_RNvXsf_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs2NzlCTJjHie_4core7default7Default7defaultB9_:
   86|    157|#[derive(Default)]
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  15.1k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  15.1k|        self.next.as_mut()
  474|  15.1k|    }
_RNvXs9_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  388|  15.3k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  15.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  15.3k|    }
_RNvMs8_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    157|    fn new(lhs: A, rhs: B) -> Self {
  343|    157|        Self {
  344|    157|            lhs: Lookahead::new(lhs),
  345|    157|            rhs: Lookahead::new(rhs),
  346|    157|            combinator: Default::default(),
  347|    157|        }
  348|    157|    }
_RNvXse_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  15.3k|        let next = self.next.take()?;
  483|  15.1k|        self.next = self.iter.next();
  484|  15.1k|        Some(next)
  485|  15.3k|    }
_RNvXs9_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  388|  15.3k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  15.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  15.3k|    }
_RNvMs8_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    157|    fn new(lhs: A, rhs: B) -> Self {
  343|    157|        Self {
  344|    157|            lhs: Lookahead::new(lhs),
  345|    157|            rhs: Lookahead::new(rhs),
  346|    157|            combinator: Default::default(),
  347|    157|        }
  348|    157|    }
_RNCNvXs9_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  15.1k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  311|  15.3k|        self.0.next()
  312|  15.3k|    }
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    157|    fn new(mut iter: I) -> Self {
  468|    157|        let next = iter.next();
  469|    157|        Self { iter, next }
  470|    157|    }
_RNvXse_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  15.1k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  15.1k|        let next = self.next.take()?;
  483|  15.1k|        self.next = self.iter.next();
  484|  15.1k|        Some(next)
  485|  15.1k|    }
_RNvMs5_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    157|    pub fn new(a: A, b: B) -> Self {
  298|    157|        Self(Merge::new(_Combine::new(a, b)))
  299|    157|    }
_RNvMs8_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  15.3k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  15.3k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  15.1k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    157|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  15.1k|        if advance_lhs {
  370|  15.1k|            self.lhs.next();
  371|  15.1k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  15.1k|        range
  376|  15.3k|    }
_RNCNvXs9_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  15.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  15.1k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  15.1k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  15.1k|        self.next.as_mut()
  474|  15.1k|    }
_RNvXsb_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  438|  15.3k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  15.1k|        while let Some(next) = self.iter.peek() {
  443|  15.0k|            if next.start > range.end {
  444|  15.0k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  15.1k|        Some(range)
  452|  15.3k|    }
_RNvMsa_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    157|    pub fn new(iter: I) -> Self {
  425|    157|        Self {
  426|    157|            iter: Lookahead::new(iter),
  427|    157|        }
  428|    157|    }
_RNvMs5_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    157|    pub fn new(a: A, b: B) -> Self {
  298|    157|        Self(Merge::new(_Combine::new(a, b)))
  299|    157|    }

_RINvMs2_NtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|    314|    pub fn new<II>(iter: II) -> Self
  140|    314|    where
  141|    314|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    314|    {
  143|    314|        Self(iter.into_iter())
  144|    314|    }
_RNvXs3_NtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|    314|    fn next(&mut self) -> Option<Self::Item> {
  154|    314|        self.0.next()
  155|    314|    }
_RINvMs2_NtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    157|    pub fn new<II>(iter: II) -> Self
  140|    157|    where
  141|    157|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    157|    {
  143|    157|        Self(iter.into_iter())
  144|    157|    }
_RINvYINtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    157|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    157|        Combine::new(self, other)
   23|    157|    }
_RINvNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEEB4_:
  163|    314|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|    314|    let mut iter = bits.into_iter().peekable();
  165|    314|
  166|    314|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|    314|    }))
  180|    314|}
_RINvYINtNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    157|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    157|        Combine::new(self, other)
   33|    157|    }
_RNvXs3_NtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  15.3k|    fn next(&mut self) -> Option<Self::Item> {
  154|  15.3k|        self.0.next()
  155|  15.3k|    }
_RNCINvNtCs5XVzSlMbIV9_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs2NzlCTJjHie_4core4iter8adapters6copied6CopiedINtNtNtNtCsgkyd3Od2GCu_5alloc11collections5btree3set4IteryEEE0B6_:
  166|    314|    Ranges::new(iter::from_fn(move || {
  167|    314|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|    314|    }))

_RNvMs4_Cs5XVzSlMbIV9_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    157|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    157|        self.inner_ranges()
  287|    157|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    157|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    157|    }
_RNvMs4_Cs5XVzSlMbIV9_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    157|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    157|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    157|    }
_RNvXsi_Cs5XVzSlMbIV9_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs2NzlCTJjHie_4core7default7Default7defaultB5_:
   42|    157|#[derive(Debug, Default, Clone)]

_RNvXNtCs5XVzSlMbIV9_17fvm_ipld_bitfield5rangeINtNtNtCs2NzlCTJjHie_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  15.1k|    fn size(&self) -> Self::Idx {
   15|  15.1k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  15.1k|            self.end - self.start
   19|       |        }
   20|  15.1k|    }

_RNvMs1_NtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    157|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    157|        let mut iter = self.ranges();
  201|       |
  202|    157|        let first_range = match iter.next() {
  203|    157|            Some(range) => range,
  204|      0|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    157|        let mut writer = BitWriter::new();
  208|    157|        writer.write(0, 2); // version 00
  209|    157|
  210|    157|        if first_range.start == 0 {
  211|     40|            writer.write(1, 1); // the first bit is a 1
  212|    117|        } else {
  213|    117|            writer.write(0, 1); // the first bit is a 0
  214|    117|            writer.write_len(first_range.start); // the number of leading 0s
  215|    117|        }
  216|       |
  217|    157|        writer.write_len(first_range.size());
  218|    157|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  15.1k|        for range in iter {
  223|  15.0k|            writer.write_len(range.start - index); // zeros
  224|  15.0k|            writer.write_len(range.size()); // ones
  225|  15.0k|            index = range.end;
  226|  15.0k|        }
  227|       |
  228|    157|        writer.finish()
  229|    157|    }
_RNvMs1_NtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    202|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    202|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    201|        let version = reader.read(2);
  160|    201|        if version != 0 {
  161|      1|            return Err(Error::UnsupportedVersion);
  162|    200|        }
  163|    200|
  164|    200|        let mut next_value = reader.read(1) == 1;
  165|    200|        let mut ranges = Vec::new();
  166|    200|        let mut index = 0u64;
  167|    200|        let mut total_len: u64 = 0;
  168|       |
  169|  32.6k|        while let Some(len) = reader.read_len()? {
  170|  32.4k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  32.4k|            if ovf {
  172|      1|                return Err(Error::RLEOverflow);
  173|  32.4k|            }
  174|  32.4k|            total_len = new_total_len;
  175|  32.4k|            let start = index;
  176|  32.4k|            index += len;
  177|  32.4k|            let end = index;
  178|  32.4k|
  179|  32.4k|            if next_value {
  180|  16.2k|                ranges.push(start..end);
  181|  16.2k|            }
  182|       |
  183|  32.4k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    172|        if next_value {
  189|     15|            return Err(Error::NotMinimal);
  190|    157|        }
  191|    157|
  192|    157|        Ok(Self {
  193|    157|            ranges,
  194|    157|            ..Default::default()
  195|    157|        })
  196|    202|    }

_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  17.9k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  17.9k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  17.9k|        let res = self.peek(num_bits);
   85|  17.9k|        self.drop(num_bits);
   86|  17.9k|
   87|  17.9k|        res
   88|  17.9k|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  32.6k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  32.6k|        // We're done.
  120|  32.6k|        if !self.has_more() {
  121|    172|            return Ok(None);
  122|  32.5k|        }
  123|  32.5k|
  124|  32.5k|        let peek6 = self.peek(6);
  125|       |
  126|  32.5k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|  21.6k|            self.drop(1);
  129|  21.6k|            1
  130|  10.8k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  5.98k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  5.98k|            self.drop(6);
  134|  5.98k|            if val < 2 {
  135|      7|                return Err(Error::NotMinimal);
  136|  5.97k|            }
  137|  5.97k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  4.86k|            self.drop(2);
  141|  4.86k|            let val = self.read_varint()?;
  142|  4.85k|            if val < 16 {
  143|     14|                return Err(Error::NotMinimal);
  144|  4.84k|            }
  145|  4.84k|            val
  146|       |        };
  147|       |
  148|  32.4k|        Ok(Some(len))
  149|  32.6k|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  50.4k|    pub fn drop(&mut self, num_bits: u32) {
   61|  50.4k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  50.4k|        self.bits >>= num_bits;
   65|  50.4k|        self.num_bits -= num_bits;
   66|  50.4k|
   67|  50.4k|        // not sure why this being outside of the if improves the performance
   68|  50.4k|        // bit it does, probably related to keeping caches warm
   69|  50.4k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  50.4k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  50.4k|
   72|  50.4k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  50.4k|        if self.num_bits < 8 {
   74|  25.8k|            self.num_bits += 8;
   75|  25.8k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  25.8k|        }
   77|  50.4k|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    202|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    202|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    202|        // data.
   28|    202|        if bytes.last() == Some(&0) {
   29|      1|            return Err(Error::NotMinimal);
   30|    201|        }
   31|    201|        let mut bits = 0u64;
   32|    603|        for i in 0..2 {
   33|    402|            let byte = bytes.get(i).unwrap_or(&0);
   34|    402|            bits |= (*byte as u64) << (8 * i);
   35|    402|        }
   36|       |
   37|    201|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    201|
   39|    201|        Ok(Self {
   40|    201|            bytes,
   41|    201|            bits,
   42|    201|            num_bits: 16,
   43|    201|        })
   44|    202|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  4.86k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  4.86k|        let mut len = 0u64;
   94|       |
   95|  17.5k|        for i in 0..VARINT_MAX_BYTES {
   96|  17.5k|            let byte = self.read(8);
   97|  17.5k|
   98|  17.5k|            // strip off the most significant bit and add
   99|  17.5k|            // it to the output
  100|  17.5k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  17.5k|
  102|  17.5k|            // if the most significant bit is a 0, we've
  103|  17.5k|            // reached the end of the varint
  104|  17.5k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  4.85k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      4|                    break;
  109|  4.85k|                }
  110|  4.85k|                return Ok(len);
  111|  12.6k|            }
  112|       |        }
  113|       |
  114|      6|        Err(Error::InvalidVarint)
  115|  4.86k|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  32.6k|    pub fn has_more(&self) -> bool {
  153|  32.6k|        self.bits != 0 || !self.bytes.is_empty()
  154|  32.6k|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  50.4k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  50.4k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  50.4k|        let mask = (1 << num_bits) - 1;
   55|  50.4k|        (self.bits & mask) as u8
   56|  50.4k|    }

_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  53.0k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  53.0k|        debug_assert!(num_bits <= 8);
   24|  53.0k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  53.0k|        self.bits |= (byte as u16) << self.num_bits;
   27|  53.0k|        self.num_bits += num_bits;
   28|  53.0k|
   29|  53.0k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  53.0k|        if self.num_bits >= 8 {
   31|  24.7k|            self.bytes.push(self.bits as u8);
   32|  24.7k|            self.bits >>= 8;
   33|  24.7k|            self.num_bits -= 8;
   34|  28.3k|        }
   35|  53.0k|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    157|    pub fn new() -> Self {
   18|    157|        Default::default()
   19|    157|    }
_RNvXs_NtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs2NzlCTJjHie_4core7default7Default7defaultB8_:
    4|    157|#[derive(Default, Clone, Debug)]
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  30.2k|    pub fn write_len(&mut self, len: u64) {
   39|  30.2k|        debug_assert!(len > 0);
   40|       |
   41|  30.2k|        if len == 1 {
   42|  20.2k|            // Block Single (prefix 1)
   43|  20.2k|            self.write(1, 1);
   44|  20.2k|        } else if len < 16 {
   45|  5.51k|            // Block Short (prefix 01)
   46|  5.51k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  5.51k|            self.write(len as u8, 4);
   48|  5.51k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  4.48k|            self.write(0, 2);
   51|  4.48k|
   52|  4.48k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  16.9k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  16.9k|                self.write(byte, 8);
   55|  16.9k|            }
   56|       |        }
   57|  30.2k|    }
_RNvMNtNtCs5XVzSlMbIV9_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    157|    pub fn finish(mut self) -> Vec<u8> {
   61|    157|        if self.bits > 0 {
   62|     24|            self.bytes.push(self.bits as u8);
   63|    133|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    157|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    157|        self.bytes
   71|    157|    }

