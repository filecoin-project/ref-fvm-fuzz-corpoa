_RINvNtNtCseuCwczWVij_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  599|  9.55k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  9.55k|    -> Result<Option<usize>, Error<R::Error>>
  601|  9.55k|{
  602|  9.55k|    if byte != (marker::START | (major << 5)) {
  603|  4.83k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  4.77k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  4.77k|        Ok(Some(len))
  606|       |    } else {
  607|  4.71k|        Ok(None)
  608|       |    }
  609|  9.55k|}
_RNvNtNtCseuCwczWVij_7cbor4ii4core3dec8if_majorCsfpTA0IcUOwH_11cbor_decode:
  894|    260|pub fn if_major(byte: u8) -> u8 {
  895|    260|    byte >> 5
  896|    260|}
_RINvXss_NtNtCseuCwczWVij_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  256|    457|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    457|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    457|                }
_RNCINvNtNtCseuCwczWVij_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0CsfpTA0IcUOwH_11cbor_decode:
  475|  5.53k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvMs0_NtNtCseuCwczWVij_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  227|  5.56k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  5.56k|        match self.byte & self.major_limit {
  229|  5.56k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|    979|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|    364|                let mut buf = [0; 2];
  233|    364|                pull_exact(reader, &mut buf)?;
  234|    356|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|    215|                let mut buf = [0; 4];
  238|    215|                pull_exact(reader, &mut buf)?;
  239|    205|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    338|                let mut buf = [0; 8];
  243|    338|                pull_exact(reader, &mut buf)?;
  244|    329|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|     47|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  5.56k|    }
_RINvXs5_NtNtCseuCwczWVij_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs4DfSYhG45Ol_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  510|  3.03k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  3.03k|        use crate::alloc::borrow::Cow;
  512|  3.03k|
  513|  3.03k|        let mut buf = Vec::new();
  514|  3.03k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  2.79k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|     94|            Cow::Owned(buf)
  518|       |        }))
  519|  3.03k|    }
_RINvYNtNtNtCseuCwczWVij_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
   73|    271|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    271|        let byte = pull_one(reader)?;
   75|    270|        Self::decode_with(byte, reader)
   76|    271|    }
_RNvMNtNtCseuCwczWVij_7cbor4ii4core3decNtB2_9Reference6as_refCsfpTA0IcUOwH_11cbor_decode:
   81|  12.7k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  12.7k|        match self {
   83|  12.7k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  12.7k|    }
_RINvNtNtCseuCwczWVij_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  431|  8.56k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  8.56k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  8.56k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  8.56k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  3.80k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  3.80k|            if buf.len() >= len {
  440|  3.74k|                reader.advance(len);
  441|  3.74k|                return Ok(Some(&buf[..len]));
  442|     62|            }
  443|      0|        }
  444|       |
  445|     62|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|     67|        while len != 0 {
  448|     67|            let readbuf = reader.fill(len)?;
  449|     67|            let readbuf = readbuf.as_ref();
  450|     67|
  451|     67|            if readbuf.is_empty() {
  452|     62|                return Err(Error::Eof);
  453|      5|            }
  454|      5|
  455|      5|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      5|
  457|      5|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      5|            reader.advance(readlen);
  459|      5|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|  5.89k|            let byte = pull_one(reader)?;
  467|       |
  468|  5.87k|            if byte == marker::BREAK {
  469|    343|                break
  470|  5.53k|            }
  471|  5.53k|
  472|  5.53k|            if !reader.step_in() {
  473|      1|                return Err(Error::DepthLimit);
  474|  5.53k|            }
  475|  5.53k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|  5.53k|            let reader = &mut *reader;
  477|       |
  478|  5.53k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|    950|                buf.extend_from_slice(longbuf);
  480|    950|            }
  481|       |        }
  482|       |
  483|    343|        Ok(None)
  484|       |    }
  485|  8.56k|}
_RINvNtNtCseuCwczWVij_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  125|  11.7k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  11.7k|    let b = reader.fill(1)?
  127|  11.7k|        .as_ref()
  128|  11.7k|        .get(0)
  129|  11.7k|        .copied()
  130|  11.7k|        .ok_or(Error::Eof)?;
  131|  11.6k|    reader.advance(1);
  132|  11.6k|    Ok(b)
  133|  11.7k|}
_RINvNtNtCseuCwczWVij_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  136|    917|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  1.82k|    while !buf.is_empty() {
  138|    932|        let readbuf = reader.fill(buf.len())?;
  139|    932|        let readbuf = readbuf.as_ref();
  140|    932|
  141|    932|        if readbuf.is_empty() {
  142|     27|            return Err(Error::Eof);
  143|    905|        }
  144|    905|
  145|    905|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    905|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    905|        reader.advance(len);
  148|    905|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    890|    Ok(())
  152|    917|}
_RINvXsg_NtNtCseuCwczWVij_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  707|    270|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    270|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    270|    }
_RINvYyNtNtNtCseuCwczWVij_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
   73|    463|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    463|        let byte = pull_one(reader)?;
   75|    457|        Self::decode_with(byte, reader)
   76|    463|    }
_RNvMs0_NtNtCseuCwczWVij_7cbor4ii4core3decNtB5_7TypeNum3newCsfpTA0IcUOwH_11cbor_decode:
  179|  5.56k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  5.56k|        TypeNum { major_limit, byte }
  181|  5.56k|    }
_RINvYNtNtNtCseuCwczWVij_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
   73|  1.00k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  1.00k|        let byte = pull_one(reader)?;
   75|    996|        Self::decode_with(byte, reader)
   76|  1.00k|    }
_RINvXsc_NtNtCseuCwczWVij_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
  615|    996|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|    996|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|    996|    }
_RINvYINtNtNtCseuCwczWVij_7cbor4ii4core5types5BytesINtNtCs4DfSYhG45Ol_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
   73|  3.09k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  3.09k|        let byte = pull_one(reader)?;
   75|  3.03k|        Self::decode_with(byte, reader)
   76|  3.09k|    }

_RINvXs2_NtNtCseuCwczWVij_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
   70|  2.19k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  2.19k|        match u8::try_from(self.value) {
   72|  2.05k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    134|                let [x0, x1] = self.value.to_be_bytes();
   75|    134|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  2.19k|        Ok(())
   79|  2.19k|    }
_RNvMs0_NtNtCseuCwczWVij_7cbor4ii4core3encINtB5_7TypeNumhE3newCsfpTA0IcUOwH_11cbor_decode:
   52|  2.05k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.05k|        TypeNum { type_, value }
   54|  2.05k|    }
_RINvXs1_NtNtCseuCwczWVij_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
   59|  2.05k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  2.05k|        match self.value {
   61|  2.05k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    702|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  2.05k|        Ok(())
   65|  2.05k|    }
_RINvXsd_NtNtCseuCwczWVij_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
  270|    424|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    424|        Ok(())
  272|    424|    }
_RINvXsu_NtNtCseuCwczWVij_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
  159|    212|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    212|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    212|                }
_RNvMs0_NtNtCseuCwczWVij_7cbor4ii4core3encINtB5_7TypeNumtE3newCsfpTA0IcUOwH_11cbor_decode:
   52|  2.19k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.19k|        TypeNum { type_, value }
   54|  2.19k|    }
_RNvMs0_NtNtCseuCwczWVij_7cbor4ii4core3encINtB5_7TypeNumyE3newCsfpTA0IcUOwH_11cbor_decode:
   52|  2.36k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.36k|        TypeNum { type_, value }
   54|  2.36k|    }
_RINvXs4_NtNtCseuCwczWVij_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
   98|  2.36k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  2.36k|        match u32::try_from(self.value) {
  100|  2.19k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    168|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    168|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  2.36k|        Ok(())
  107|  2.36k|    }
_RINvXsi_NtNtCseuCwczWVij_7cbor4ii4core3encINtNtB8_5types3TagINtBH_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
  317|    212|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    212|        self.1.encode(writer)
  319|    212|    }
_RINvXs7_NtNtCseuCwczWVij_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
  209|  1.51k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.51k|        writer.push(self.0)?;
  211|  1.51k|        Ok(())
  212|  1.51k|    }
_RINvXs3_NtNtCseuCwczWVij_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfpTA0IcUOwH_11cbor_decode:
   84|  2.19k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  2.19k|        match u16::try_from(self.value) {
   86|  2.19k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      4|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      4|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  2.19k|        Ok(())
   93|  2.19k|    }
_RNvMs0_NtNtCseuCwczWVij_7cbor4ii4core3encINtB5_7TypeNummE3newCsfpTA0IcUOwH_11cbor_decode:
   52|  2.19k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.19k|        TypeNum { type_, value }
   54|  2.19k|    }

_RNvXs1_NtNtCseuCwczWVij_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsfpTA0IcUOwH_11cbor_decode:
   62|  17.2k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  17.2k|        let len = core::cmp::min(self.buf.len(), want);
   64|  17.2k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  17.2k|    }
_RNvXs1_NtNtCseuCwczWVij_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsfpTA0IcUOwH_11cbor_decode:
   84|  6.53k|    fn step_out(&mut self) {
   85|  6.53k|        self.limit += 1;
   86|  6.53k|    }
_RNvXs1_NtNtCseuCwczWVij_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsfpTA0IcUOwH_11cbor_decode:
   75|  6.53k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  6.53k|            self.limit = limit;
   77|  6.53k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  6.53k|    }
_RNvXs1_NtNtCseuCwczWVij_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsfpTA0IcUOwH_11cbor_decode:
   68|  16.2k|    fn advance(&mut self, n: usize) {
   69|  16.2k|        let len = core::cmp::min(self.buf.len(), n);
   70|  16.2k|        self.buf = &self.buf[len..];
   71|  16.2k|    }
_RNvXs_NtNtCseuCwczWVij_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsfpTA0IcUOwH_11cbor_decode:
   40|  3.88k|        self.0.try_reserve(input.len())?;
   41|  3.88k|        self.0.extend_from_slice(input);
   42|  3.88k|        Ok(())
   43|  3.88k|    }
_RNvMNtNtCseuCwczWVij_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    212|    pub fn into_inner(self) -> Vec<u8> {
   25|    212|        self.0
   26|    212|    }
_RNvMNtNtCseuCwczWVij_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    212|    pub fn new(buf: Vec<u8>) -> Self {
   15|    212|       BufWriter(buf)
   16|    212|    }
_RNvMs0_NtNtCseuCwczWVij_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    586|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    586|        SliceReader { buf, limit: 256 }
   55|    586|    }

_RNvMs1_NtCseuCwczWVij_7cbor4ii5errorINtB5_11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleE8mismatchCsfpTA0IcUOwH_11cbor_decode:
   93|     47|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     47|        DecodeError::Mismatch {
   95|     47|            expect_major: (!major_limit) >> 5,
   96|     47|            byte
   97|     47|        }
   98|     47|    }

_RNvXs_NtCseuCwczWVij_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCs7Lt4kQG01hY_4core3ops5deref8DerefMut9deref_mutCsfpTA0IcUOwH_11cbor_decode:
   17|  5.53k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  5.53k|        self.0
   19|  5.53k|    }
_RNvXs0_NtCseuCwczWVij_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCs7Lt4kQG01hY_4core3ops4drop4Drop4dropCsfpTA0IcUOwH_11cbor_decode:
   24|  5.53k|    fn drop(&mut self) {
   25|  5.53k|        (self.1)(self.0);
   26|  5.53k|    }

_RNvXs6_NtCs4Ozj5dI0DK0_3cid3cidINtB5_3CidKj40_EINtNtCs7Lt4kQG01hY_4core7convert7TryFromRShE8try_fromCsfpTA0IcUOwH_11cbor_decode:
  353|    252|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    252|        Self::read_bytes(&mut bytes)
  355|    252|    }
_RNvMNtCs4Ozj5dI0DK0_3cid3cidINtB2_3CidKj40_E6new_v0CsfpTA0IcUOwH_11cbor_decode:
   78|     25|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     25|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     25|        }
   82|     25|        Ok(Self {
   83|     25|            version: Version::V0,
   84|     25|            codec: DAG_PB,
   85|     25|            hash,
   86|     25|        })
   87|     25|    }
_RINvMNtCs4Ozj5dI0DK0_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs4DfSYhG45Ol_5alloc3vec3VechEECsfpTA0IcUOwH_11cbor_decode:
  162|    188|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    188|        let mut version_buf = varint_encode::u64_buffer();
  164|    188|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    188|
  166|    188|        let mut codec_buf = varint_encode::u64_buffer();
  167|    188|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    188|
  169|    188|        let mut written = version.len() + codec.len();
  170|    188|
  171|    188|        w.write_all(version)?;
  172|    188|        w.write_all(codec)?;
  173|    188|        written += self.hash.write(&mut w)?;
  174|       |
  175|    188|        Ok(written)
  176|    188|    }
_RNvMNtCs4Ozj5dI0DK0_3cid3cidINtB2_3CidKj40_E3newCsfpTA0IcUOwH_11cbor_decode:
   99|    194|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    194|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    194|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    194|    }
_RINvMNtCs4Ozj5dI0DK0_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsfpTA0IcUOwH_11cbor_decode:
  140|    252|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    252|        let version = varint_read_u64(&mut r)?;
  142|    250|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    247|        if [version, codec] == [0x12, 0x20] {
  146|     26|            let mut digest = [0u8; 32];
  147|     26|            r.read_exact(&mut digest)?;
  148|     25|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|     25|            return Self::new_v0(mh);
  150|    221|        }
  151|       |
  152|    221|        let version = Version::try_from(version)?;
  153|    219|        match version {
  154|      4|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    215|                let mh = Multihash::read(r)?;
  157|    194|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    252|    }
_RNvMNtCs4Ozj5dI0DK0_3cid3cidINtB2_3CidKj40_E8to_bytesCsfpTA0IcUOwH_11cbor_decode:
  205|    212|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    212|        let mut bytes = Vec::new();
  207|    212|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    212|        debug_assert_eq!(written, bytes.len());
  209|    212|        bytes
  210|    212|    }
_RINvMNtCs4Ozj5dI0DK0_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs4DfSYhG45Ol_5alloc3vec3VechEECsfpTA0IcUOwH_11cbor_decode:
  179|    212|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    212|        let written = match self.version {
  181|     24|            Version::V0 => self.hash.write(w)?,
  182|    188|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    212|        Ok(written)
  185|    212|    }
_RNvMNtCs4Ozj5dI0DK0_3cid3cidINtB2_3CidKj40_E6new_v1CsfpTA0IcUOwH_11cbor_decode:
   90|    194|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    194|        Self {
   92|    194|            version: Version::V1,
   93|    194|            codec,
   94|    194|            hash,
   95|    194|        }
   96|    194|    }

_RNvXs3_NtCs4Ozj5dI0DK0_3cid5errorNtB5_5ErrorINtNtCs7Lt4kQG01hY_4core7convert4FromNtNtCsgubijPM5HW3_15unsigned_varint2io9ReadErrorE4from:
   81|      5|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   82|      5|        use unsigned_varint::io::ReadError::*;
   83|      5|        match err {
   84|      1|            Io(err) => Self::Io(err),
   85|      4|            _ => Self::VarIntDecodeError,
   86|       |        }
   87|      5|    }
_RNvXs_NtCs4Ozj5dI0DK0_3cid5errorNtB4_5ErrorNtNtCs7Lt4kQG01hY_4core3fmt7Display3fmt:
   41|     33|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|       |        use self::Error::*;
   43|     33|        let error = match self {
   44|      0|            UnknownCodec => "Unknown codec",
   45|      0|            InputTooShort => "Input too short",
   46|     21|            ParsingError => "Failed to parse multihash",
   47|      2|            InvalidCidVersion => "Unrecognized CID version",
   48|      0|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   49|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   50|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   51|      4|            VarIntDecodeError => "Failed to decode unsigned varint format",
   52|      2|            Io(err) => return write!(f, "{}", err),
   53|      4|            InvalidExplicitCidV0 => "CIDv0 cannot be specified in CIDv1 format",
   54|       |        };
   55|       |
   56|     31|        f.write_str(error)
   57|     33|    }
_RNvXs4_NtCs4Ozj5dI0DK0_3cid5errorNtB5_5ErrorINtNtCs7Lt4kQG01hY_4core7convert4FromNtNtNtCs9EhF0IKEJfx_3std2io5error5ErrorE4from:
   91|      1|    fn from(err: io::Error) -> Self {
   92|      1|        Self::Io(err)
   93|      1|    }
_RNvXs1_NtCs4Ozj5dI0DK0_3cid5errorNtB5_5ErrorINtNtCs7Lt4kQG01hY_4core7convert4FromNtNtCsaLvTCCKtX5_9multihash5error5ErrorE4from:
   68|     21|    fn from(_: multihash::Error) -> Error {
   69|     21|        Error::ParsingError
   70|     21|    }

_RINvXNtCs4Ozj5dI0DK0_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   29|    212|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    212|    where
   31|    212|        S: ser::Serializer,
   32|    212|    {
   33|    212|        let value = ByteBuf::from(self.to_bytes());
   34|    212|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    212|    }
_RINvXs_NtCs4Ozj5dI0DK0_3cid5serdeNtB5_17BytesToCidVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor11visit_bytesINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
   48|    252|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    252|    where
   50|    252|        E: de::Error,
   51|    252|    {
   52|    252|        CidGeneric::<SIZE>::try_from(value)
   53|    252|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    252|    }
_RINvXs0_NtCs4Ozj5dI0DK0_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   79|    271|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    271|    where
   81|    271|        D: de::Deserializer<'de>,
   82|    271|    {
   83|    271|        /// Main visitor to deserialize a CID.
   84|    271|        ///
   85|    271|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    271|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    271|        /// to bytes.
   88|    271|        struct MainEntryVisitor<const SIZE: usize>;
   89|    271|
   90|    271|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    271|            type Value = CidGeneric<SIZE>;
   92|    271|
   93|    271|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    271|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    271|            }
   96|    271|
   97|    271|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    271|            where
   99|    271|                D: de::Deserializer<'de>,
  100|    271|            {
  101|    271|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    271|            }
  103|    271|        }
  104|    271|
  105|    271|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    271|    }
_RNCINvXs_NtCs4Ozj5dI0DK0_3cid5serdeNtB7_17BytesToCidVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor11visit_bytesINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEE0CsfpTA0IcUOwH_11cbor_decode:
   53|     33|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
_RINvXNvXs0_NtCs4Ozj5dI0DK0_3cid5serdeINtNtBb_3cid3CidKpENtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   97|    261|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    261|            where
   99|    261|                D: de::Deserializer<'de>,
  100|    261|            {
  101|    261|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    261|            }

_RNvXs0_NtCs4Ozj5dI0DK0_3cid7versionyINtNtCs7Lt4kQG01hY_4core7convert4FromNtB5_7VersionE4from:
   44|    188|    fn from(ver: Version) -> u64 {
   45|    188|        match ver {
   46|      0|            Version::V0 => 0,
   47|    188|            Version::V1 => 1,
   48|       |        }
   49|    188|    }
_RNvXs_NtCs4Ozj5dI0DK0_3cid7versionNtB4_7VersionINtNtCs7Lt4kQG01hY_4core7convert7TryFromyE8try_from:
   34|    221|    fn try_from(raw: u64) -> Result<Self> {
   35|    221|        match raw {
   36|      4|            0 => Ok(Self::V0),
   37|    215|            1 => Ok(Self::V1),
   38|      2|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    221|    }

_RNvNvCsfpTA0IcUOwH_11cbor_decode1__19___libfuzzer_sys_run:
  241|    106|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|    106|                $body
  243|    480|            }
rust_fuzzer_test_input:
  215|    480|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    480|                }
  223|    480|
  224|    480|                __libfuzzer_sys_run(bytes);
  225|    480|                0
  226|    480|            }
LLVMFuzzerTestOneInput:
   58|    480|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    480|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    480|    });
   63|    480|
   64|    480|    match test_input {
   65|    480|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    480|}
_RNCNvCsbpoCYhSnKSY_13libfuzzer_sys15test_input_wrap0B3_:
   59|    480|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    480|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    480|        rust_fuzzer_test_input(data_slice)
   62|    480|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs0_NtCsaLvTCCKtX5_9multihash5errorNtB5_5ErrorINtNtCs7Lt4kQG01hY_4core7convert4FromNtNtNtCs9EhF0IKEJfx_3std2io5error5ErrorE4from:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }
_RNvXs1_NtCsaLvTCCKtX5_9multihash5errorNtB5_5ErrorINtNtCs7Lt4kQG01hY_4core7convert4FromNtNtCsgubijPM5HW3_15unsigned_varint2io9ReadErrorE4from:
   44|     14|    fn from(err: ReadError) -> Self {
   45|     14|        match err {
   46|     11|            ReadError::Io(err) => Self::Io(err),
   47|      3|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     14|    }

_RNvMs_NtCsaLvTCCKtX5_9multihash9multihashINtB4_9MultihashKj40_E4codeCsfpTA0IcUOwH_11cbor_decode:
  120|    237|    pub const fn code(&self) -> u64 {
  121|    237|        self.code
  122|    237|    }
_RINvMs_NtCsaLvTCCKtX5_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs4DfSYhG45Ol_5alloc3vec3VechEECsfpTA0IcUOwH_11cbor_decode:
  163|    188|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    188|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    188|    }
_RINvMs_NtCsaLvTCCKtX5_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsfpTA0IcUOwH_11cbor_decode:
  135|    215|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    215|    where
  137|    215|        Self: Sized,
  138|    215|    {
  139|    215|        let (code, size, digest) = read_multihash(r)?;
  140|    194|        Ok(Self { code, size, digest })
  141|    215|    }
_RNvMs_NtCsaLvTCCKtX5_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsfpTA0IcUOwH_11cbor_decode:
  101|     25|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     25|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     25|        }
  105|     25|        let size = input_digest.len();
  106|     25|        let mut digest = [0; S];
  107|     25|        let mut i = 0;
  108|    825|        while i < size {
  109|    800|            digest[i] = input_digest[i];
  110|    800|            i += 1;
  111|    800|        }
  112|     25|        Ok(Self {
  113|     25|            code,
  114|     25|            size: size as u8,
  115|     25|            digest,
  116|     25|        })
  117|     25|    }
_RINvMs_NtCsaLvTCCKtX5_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs4DfSYhG45Ol_5alloc3vec3VechEECsfpTA0IcUOwH_11cbor_decode:
  163|     24|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     24|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     24|    }
_RINvNtCsaLvTCCKtX5_9multihash9multihash15write_multihashQQINtNtCs4DfSYhG45Ol_5alloc3vec3VechEECsfpTA0IcUOwH_11cbor_decode:
  310|    188|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    188|where
  312|    188|    W: io::Write,
  313|    188|{
  314|    188|    let mut code_buf = varint_encode::u64_buffer();
  315|    188|    let code = varint_encode::u64(code, &mut code_buf);
  316|    188|
  317|    188|    let mut size_buf = varint_encode::u8_buffer();
  318|    188|    let size = varint_encode::u8(size, &mut size_buf);
  319|    188|
  320|    188|    let written = code.len() + size.len() + digest.len();
  321|    188|
  322|    188|    w.write_all(code)?;
  323|    188|    w.write_all(size)?;
  324|    188|    w.write_all(digest)?;
  325|       |
  326|    188|    Ok(written)
  327|    188|}
_RNvMs_NtCsaLvTCCKtX5_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsfpTA0IcUOwH_11cbor_decode:
  125|    237|    pub const fn size(&self) -> u8 {
  126|    237|        self.size
  127|    237|    }
_RNvMs_NtCsaLvTCCKtX5_9multihash9multihashINtB4_9MultihashKj40_E6digestCsfpTA0IcUOwH_11cbor_decode:
  130|    212|    pub fn digest(&self) -> &[u8] {
  131|    212|        &self.digest[..self.size as usize]
  132|    212|    }
_RINvNtCsaLvTCCKtX5_9multihash9multihash15write_multihashQINtNtCs4DfSYhG45Ol_5alloc3vec3VechEECsfpTA0IcUOwH_11cbor_decode:
  310|     24|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     24|where
  312|     24|    W: io::Write,
  313|     24|{
  314|     24|    let mut code_buf = varint_encode::u64_buffer();
  315|     24|    let code = varint_encode::u64(code, &mut code_buf);
  316|     24|
  317|     24|    let mut size_buf = varint_encode::u8_buffer();
  318|     24|    let size = varint_encode::u8(size, &mut size_buf);
  319|     24|
  320|     24|    let written = code.len() + size.len() + digest.len();
  321|     24|
  322|     24|    w.write_all(code)?;
  323|     24|    w.write_all(size)?;
  324|     24|    w.write_all(digest)?;
  325|       |
  326|     24|    Ok(written)
  327|     24|}
_RINvNtCsaLvTCCKtX5_9multihash9multihash14read_multihashQRShKj40_ECsfpTA0IcUOwH_11cbor_decode:
  335|    215|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    215|where
  337|    215|    R: io::Read,
  338|    215|{
  339|    215|    let code = read_u64(&mut r)?;
  340|    212|    let size = read_u64(&mut r)?;
  341|       |
  342|    201|    if size > S as u64 || size > u8::MAX as u64 {
  343|      6|        return Err(Error::InvalidSize(size));
  344|    195|    }
  345|    195|
  346|    195|    let mut digest = [0; S];
  347|    195|    r.read_exact(&mut digest[..size as usize])?;
  348|    194|    Ok((code, size as u8, digest))
  349|    215|}

_RNvYNtNtNtCslfkyZmnmC60_10fvm_shared7address8protocol8ProtocolNtNtCsg2iHFwzWKAu_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  1.57k|    fn from_u8(n: u8) -> Option<Self> {
  468|  1.57k|        FromPrimitive::from_u64(From::from(n))
  469|  1.57k|    }

_RNvMs2_NtCsgcZ75qsWxzj_9once_cell3impINtB5_8OnceCellNtNtCs4DfSYhG45Ol_5alloc6string6StringE14is_initializedCsfpTA0IcUOwH_11cbor_decode:
   49|    480|    pub(crate) fn is_initialized(&self) -> bool {
   50|    480|        // An `Acquire` load is enough because that makes all the initialization
   51|    480|        // operations visible to us, and, this being a fast path, weaker
   52|    480|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    480|        // `SeqCst` operations on the slow path.
   54|    480|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    480|    }

_RNvMs4_NtCsgcZ75qsWxzj_9once_cell4syncINtB5_8OnceCellNtNtCs4DfSYhG45Ol_5alloc6string6StringE3getCsfpTA0IcUOwH_11cbor_decode:
  965|    480|        pub fn get(&self) -> Option<&T> {
  966|    480|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    480|                None
  971|       |            }
  972|    480|        }

_RINvCshPpYxSdlddU_10scopeguard5guardQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEFBy_EuECsfpTA0IcUOwH_11cbor_decode:
  367|  1.00k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|  1.00k|    where F: FnOnce(T)
  369|  1.00k|{
  370|  1.00k|    ScopeGuard::with_strategy(v, dropfn)
  371|  1.00k|}
_RNvMs1_CshPpYxSdlddU_10scopeguardINtB5_10ScopeGuardQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsfpTA0IcUOwH_11cbor_decode:
  317|  1.00k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|  1.00k|        ScopeGuard {
  319|  1.00k|            value: ManuallyDrop::new(v),
  320|  1.00k|            dropfn: ManuallyDrop::new(dropfn),
  321|  1.00k|            strategy: PhantomData,
  322|  1.00k|        }
  323|  1.00k|    }
_RNvXCshPpYxSdlddU_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|  1.00k|    fn should_run() -> bool { true }
_RNvXs4_CshPpYxSdlddU_10scopeguardINtB5_10ScopeGuardQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs7Lt4kQG01hY_4core3ops5deref8DerefMut9deref_mutCsfpTA0IcUOwH_11cbor_decode:
  443|  1.00k|    fn deref_mut(&mut self) -> &mut T {
  444|  1.00k|        &mut *self.value
  445|  1.00k|    }
_RNvXs5_CshPpYxSdlddU_10scopeguardINtB5_10ScopeGuardQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs7Lt4kQG01hY_4core3ops4drop4Drop4dropCsfpTA0IcUOwH_11cbor_decode:
  452|  1.00k|    fn drop(&mut self) {
  453|  1.00k|        // This is OK because the fields are `ManuallyDrop`s
  454|  1.00k|        // which will not be dropped by the compiler.
  455|  1.00k|        let (value, dropfn) = unsafe {
  456|  1.00k|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|  1.00k|        };
  458|  1.00k|        if S::should_run() {
  459|  1.00k|            dropfn(value);
  460|  1.00k|        }
  461|  1.00k|    }

_RINvXNvXsV_NtNtCsh3pHmw2rnsT_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
  138|    450|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    450|        where
  140|    450|            E: Error,
  141|    450|        {
  142|    450|            Ok(v)
  143|    450|        }
_RINvXsV_NtNtCsh3pHmw2rnsT_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  113|    463|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    463|            where
  115|    463|                D: Deserializer<'de>,
  116|    463|            {
  117|    463|                struct PrimitiveVisitor;
  118|    463|
  119|    463|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    463|                    type Value = $primitive;
  121|    463|
  122|    463|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    463|                        formatter.write_str(stringify!($primitive))
  124|    463|                    }
  125|    463|
  126|    463|                    $($($method!($val : $visit);)*)*
  127|    463|                }
  128|    463|
  129|    463|                deserializer.$deserialize(PrimitiveVisitor)
  130|    463|            }
_RINvXNvXsh_NtNtCsh3pHmw2rnsT_5serde2de5implsINtNtCs4DfSYhG45Ol_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCslfkyZmnmC60_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
 1035|    402|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    402|            where
 1037|    402|                A: SeqAccess<'de>,
 1038|    402|            {
 1039|    402|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1040|       |
 1041|  1.53k|                while let Some(value) = try!(seq.next_element()) {
 1042|  1.13k|                    values.push(value);
 1043|  1.13k|                }
 1044|       |
 1045|    324|                Ok(values)
 1046|    402|            }
_RINvXsh_NtNtCsh3pHmw2rnsT_5serde2de5implsINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
 1017|    418|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1018|    418|    where
 1019|    418|        D: Deserializer<'de>,
 1020|    418|    {
 1021|    418|        struct VecVisitor<T> {
 1022|    418|            marker: PhantomData<T>,
 1023|    418|        }
 1024|    418|
 1025|    418|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1026|    418|        where
 1027|    418|            T: Deserialize<'de>,
 1028|    418|        {
 1029|    418|            type Value = Vec<T>;
 1030|    418|
 1031|    418|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1032|    418|                formatter.write_str("a sequence")
 1033|    418|            }
 1034|    418|
 1035|    418|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    418|            where
 1037|    418|                A: SeqAccess<'de>,
 1038|    418|            {
 1039|    418|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1040|    418|
 1041|    418|                while let Some(value) = try!(seq.next_element()) {
 1042|    418|                    values.push(value);
 1043|    418|                }
 1044|    418|
 1045|    418|                Ok(values)
 1046|    418|            }
 1047|    418|        }
 1048|    418|
 1049|    418|        let visitor = VecVisitor {
 1050|    418|            marker: PhantomData,
 1051|    418|        };
 1052|    418|        deserializer.deserialize_seq(visitor)
 1053|    418|    }

_RINvXs3_NtCsh3pHmw2rnsT_5serde2deINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtNtCslfkyZmnmC60_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  787|  1.65k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|  1.65k|    where
  789|  1.65k|        D: Deserializer<'de>,
  790|  1.65k|    {
  791|  1.65k|        T::deserialize(deserializer)
  792|  1.65k|    }
_RINvXs3_NtCsh3pHmw2rnsT_5serde2deINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtCshDgXgtzY0Ab_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  787|    324|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    324|    where
  789|    324|        D: Deserializer<'de>,
  790|    324|    {
  791|    324|        T::deserialize(deserializer)
  792|    324|    }
_RINvYINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess12next_elementINtNtCs4Ozj5dI0DK0_3cid3cid3CidKj40_EECsfpTA0IcUOwH_11cbor_decode:
 1727|    271|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    271|    where
 1729|    271|        T: Deserialize<'de>,
 1730|    271|    {
 1731|    271|        self.next_element_seed(PhantomData)
 1732|    271|    }
_RINvYINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess12next_elementNtCshDgXgtzY0Ab_17fvm_ipld_bitfield8BitFieldECsfpTA0IcUOwH_11cbor_decode:
 1727|    324|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    324|    where
 1729|    324|        T: Deserialize<'de>,
 1730|    324|    {
 1731|    324|        self.next_element_seed(PhantomData)
 1732|    324|    }
_RINvYINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess12next_elementNtNtCslfkyZmnmC60_10fvm_shared7address7AddressECsfpTA0IcUOwH_11cbor_decode:
 1727|  1.98k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|  1.98k|    where
 1729|  1.98k|        T: Deserialize<'de>,
 1730|  1.98k|    {
 1731|  1.98k|        self.next_element_seed(PhantomData)
 1732|  1.98k|    }
_RINvYINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB2K_7PayloadNtB1K_11Deserialize11deserialize1__NtB2H_5InnerB3w_11deserializeNtB2C_9___VisitorNtB1K_7Visitor9visit_seq17___DeserializeWithECsfpTA0IcUOwH_11cbor_decode:
 1727|    573|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    573|    where
 1729|    573|        T: Deserialize<'de>,
 1730|    573|    {
 1731|    573|        self.next_element_seed(PhantomData)
 1732|    573|    }
_RINvXs3_NtCsh3pHmw2rnsT_5serde2deINtNtCs7Lt4kQG01hY_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  787|    463|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    463|    where
  789|    463|        D: Deserializer<'de>,
  790|    463|    {
  791|    463|        T::deserialize(deserializer)
  792|    463|    }
_RINvXs3_NtCsh3pHmw2rnsT_5serde2deINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  787|    418|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    418|    where
  789|    418|        D: Deserializer<'de>,
  790|    418|    {
  791|    418|        T::deserialize(deserializer)
  792|    418|    }
_RINvYNtNvXs_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor20visit_borrowed_bytesINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
 1567|    726|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1568|    726|    where
 1569|    726|        E: Error,
 1570|    726|    {
 1571|    726|        self.visit_bytes(v)
 1572|    726|    }
_RINvXs3_NtCsh3pHmw2rnsT_5serde2deINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataINtNtCs4Ozj5dI0DK0_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  787|    271|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    271|    where
  789|    271|        D: Deserializer<'de>,
  790|    271|    {
  791|    271|        T::deserialize(deserializer)
  792|    271|    }
_RINvXs3_NtCsh3pHmw2rnsT_5serde2deINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  787|    573|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    573|    where
  789|    573|        D: Deserializer<'de>,
  790|    573|    {
  791|    573|        T::deserialize(deserializer)
  792|    573|    }
_RINvYINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess12next_elementINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEECsfpTA0IcUOwH_11cbor_decode:
 1727|    418|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    418|    where
 1729|    418|        T: Deserialize<'de>,
 1730|    418|    {
 1731|    418|        self.next_element_seed(PhantomData)
 1732|    418|    }
_RINvXs3_NtCsh3pHmw2rnsT_5serde2deINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  787|    284|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    284|    where
  789|    284|        D: Deserializer<'de>,
  790|    284|    {
  791|    284|        T::deserialize(deserializer)
  792|    284|    }
_RINvYINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess12next_elementNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsfpTA0IcUOwH_11cbor_decode:
 1727|    284|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    284|    where
 1729|    284|        T: Deserialize<'de>,
 1730|    284|    {
 1731|    284|        self.next_element_seed(PhantomData)
 1732|    284|    }
_RINvYINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess12next_elementyECsfpTA0IcUOwH_11cbor_decode:
 1727|    463|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    463|    where
 1729|    463|        T: Deserialize<'de>,
 1730|    463|    {
 1731|    463|        self.next_element_seed(PhantomData)
 1732|    463|    }
_RINvYNtNtCs4Ozj5dI0DK0_3cid5serde17BytesToCidVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor14visit_byte_bufINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
 1591|      3|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1592|      3|    where
 1593|      3|        E: Error,
 1594|      3|    {
 1595|      3|        self.visit_bytes(&v)
 1596|      3|    }
_RINvYNtNtCs4Ozj5dI0DK0_3cid5serde17BytesToCidVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor20visit_borrowed_bytesINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
 1567|    249|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1568|    249|    where
 1569|    249|        E: Error,
 1570|    249|    {
 1571|    249|        self.visit_bytes(v)
 1572|    249|    }

_RNvNtNtCsh3pHmw2rnsT_5serde9___private9size_hint8cautiousCsfpTA0IcUOwH_11cbor_decode:
   12|    402|pub fn cautious(hint: Option<usize>) -> usize {
   13|    402|    cmp::min(hint.unwrap_or(0), 4096)
   14|    402|}

_RINvXs1E_NtNtCsh3pHmw2rnsT_5serde3ser5implsRNtNtCslfkyZmnmC60_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  423|    668|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    668|            where
  425|    668|                S: Serializer,
  426|    668|            {
  427|    668|                (**self).serialize(serializer)
  428|    668|            }
_RINvXs1E_NtNtCsh3pHmw2rnsT_5serde3ser5implsRNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  423|    212|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    212|            where
  425|    212|                S: Serializer,
  426|    212|            {
  427|    212|                (**self).serialize(serializer)
  428|    212|            }
_RINvXs1E_NtNtCsh3pHmw2rnsT_5serde3ser5implsRINtNtCs4Ozj5dI0DK0_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  423|    212|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    212|            where
  425|    212|                S: Serializer,
  426|    212|            {
  427|    212|                (**self).serialize(serializer)
  428|    212|            }
_RINvXsE_NtNtCsh3pHmw2rnsT_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   11|    212|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    212|            where
   13|    212|                S: Serializer,
   14|    212|            {
   15|    212|                serializer.$method(*self $($cast)*)
   16|    212|            }
_RINvXs1E_NtNtCsh3pHmw2rnsT_5serde3ser5implsRINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  423|    212|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    212|            where
  425|    212|                S: Serializer,
  426|    212|            {
  427|    212|                (**self).serialize(serializer)
  428|    212|            }
_RINvXs1E_NtNtCsh3pHmw2rnsT_5serde3ser5implsRNtCshDgXgtzY0Ab_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  423|    212|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    212|            where
  425|    212|                S: Serializer,
  426|    212|            {
  427|    212|                (**self).serialize(serializer)
  428|    212|            }
_RINvXs1k_NtNtCsh3pHmw2rnsT_5serde3ser5implsINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  193|    212|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  194|    212|            where
  195|    212|                S: Serializer,
  196|    212|            {
  197|    212|                serializer.collect_seq(self)
  198|    212|            }
_RINvXs1E_NtNtCsh3pHmw2rnsT_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  423|    212|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    212|            where
  425|    212|                S: Serializer,
  426|    212|            {
  427|    212|                (**self).serialize(serializer)
  428|    212|            }

_RINvYQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer11collect_seqRINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEECsfpTA0IcUOwH_11cbor_decode:
 1277|    212|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1278|    212|    where
 1279|    212|        I: IntoIterator,
 1280|    212|        <I as IntoIterator>::Item: Serialize,
 1281|    212|    {
 1282|    212|        let iter = iter.into_iter();
 1283|    212|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1284|       |
 1285|       |        #[cfg(not(no_iterator_try_fold))]
 1286|       |        {
 1287|    212|            let mut iter = iter;
 1288|    212|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1289|       |        }
 1290|       |
 1291|       |        #[cfg(no_iterator_try_fold)]
 1292|       |        {
 1293|       |            for item in iter {
 1294|       |                try!(serializer.serialize_element(&item));
 1295|       |            }
 1296|       |        }
 1297|       |
 1298|    212|        serializer.end()
 1299|    212|    }
_RINvNtCsh3pHmw2rnsT_5serde3ser17iterator_len_hintINtNtNtCs7Lt4kQG01hY_4core5slice4iter4IterNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEECsfpTA0IcUOwH_11cbor_decode:
 1984|    212|    match iter.size_hint() {
 1985|    212|        (lo, Some(hi)) if lo == hi => Some(lo),
 1986|      0|        _ => None,
 1987|       |    }
 1988|    212|}
_RNCINvYQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer11collect_seqRINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEE0CsfpTA0IcUOwH_11cbor_decode:
 1288|    456|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvMNtCsdPXfszfLJoH_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs4DfSYhG45Ol_5alloc3vec3VechEECsfpTA0IcUOwH_11cbor_decode:
   60|    212|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    212|        ByteBuf {
   62|    212|            bytes: bytes.into(),
   63|    212|        }
   64|    212|    }
_RINvXsc_NtCsdPXfszfLJoH_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  186|    212|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    212|    where
  188|    212|        S: Serializer,
  189|    212|    {
  190|    212|        serializer.serialize_bytes(&self.bytes)
  191|    212|    }

_RINvNtCsctzOknhqbL8_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderECsfpTA0IcUOwH_11cbor_decode:
   26|    759|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    759|    let buf = match reader.fill(1)? {
   28|    759|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    759|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    539|    Ok(byte)
   33|    759|}

_RNCNvMs_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderE8try_step0CsfpTA0IcUOwH_11cbor_decode:
  106|  1.00k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc3vec3VechENtB2Z_11Deserialize11deserialize10VecVisitorECsfpTA0IcUOwH_11cbor_decode:
  228|    857|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    857|    where
  230|    857|        V: Visitor<'de>,
  231|    857|    {
  232|    857|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    726|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      8|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    857|    }
_RINvNtCsctzOknhqbL8_18serde_ipld_dagcbor2de10from_sliceNtNtCsa5KSQNCWF8I_11common_fuzz4cbor7PayloadECsfpTA0IcUOwH_11cbor_decode:
   40|    586|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    586|where
   42|    586|    T: de::Deserialize<'a>,
   43|    586|{
   44|    586|    let reader = SliceReader::new(buf);
   45|    586|    let mut deserializer = Deserializer::from_reader(reader);
   46|    586|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    219|    deserializer.end()?;
   48|    212|    Ok(value)
   49|    586|}
_RINvXs7_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer17deserialize_bytesNtNtCs4Ozj5dI0DK0_3cid5serde17BytesToCidVisitorECsfpTA0IcUOwH_11cbor_decode:
  646|    261|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    261|        let byte = peek_one(&mut self.0.reader)?;
  648|    260|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    259|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    251|                    Cow::Borrowed(buf) => {
  653|    251|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    249|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      5|                    Cow::Owned(mut buf) => {
  660|      5|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      3|                            buf.remove(0);
  664|      3|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      1|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    261|    }
_RNvMs1_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderE5arrayCsfpTA0IcUOwH_11cbor_decode:
  434|    418|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    418|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    402|        Ok(Accessor {
  437|    402|            de,
  438|    402|            len: array_start.0,
  439|    402|        })
  440|    418|    }
_RINvMs_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs4Ozj5dI0DK0_3cid5serdeINtNtB2k_3cid3CidKpENtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsfpTA0IcUOwH_11cbor_decode:
  113|    271|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    271|    where
  115|    271|        V: Visitor<'de>,
  116|    271|    {
  117|    271|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    265|        match tag.0 {
  120|    261|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      4|            _ => Err(DecodeError::TypeMismatch {
  122|      4|                name: "CBOR tag",
  123|      4|                byte: tag.0 as u8,
  124|      4|            }),
  125|       |        }
  126|    271|    }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc6borrow3CowShENtB30_11Deserialize11deserialize10CowVisitorECsfpTA0IcUOwH_11cbor_decode:
  228|  1.97k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  1.97k|    where
  230|  1.97k|        V: Visitor<'de>,
  231|  1.97k|    {
  232|  1.97k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  1.82k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     81|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  1.97k|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess17next_element_seedINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEEECsfpTA0IcUOwH_11cbor_decode:
  484|    418|        if let Some(len) = self.len.as_mut() {
  485|    418|            if *len > 0 {
  486|    418|                *len -= 1;
  487|    418|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    418|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess17next_element_seedINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB3D_7PayloadNtB1Q_11Deserialize11deserialize1__NtB3A_5InnerB4p_11deserializeNtB3v_9___VisitorNtB1Q_7Visitor9visit_seq17___DeserializeWithEECsfpTA0IcUOwH_11cbor_decode:
  484|    573|        if let Some(len) = self.len.as_mut() {
  485|    573|            if *len > 0 {
  486|    573|                *len -= 1;
  487|    573|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    573|    }
_RNvMs_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderE3endCsfpTA0IcUOwH_11cbor_decode:
  131|    219|        match peek_one(&mut self.reader) {
  132|      7|            Ok(_) => Err(DecodeError::TrailingData),
  133|    212|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    219|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess17next_element_seedINtNtCs7Lt4kQG01hY_4core6marker11PhantomDatayEECsfpTA0IcUOwH_11cbor_decode:
  484|    463|        if let Some(len) = self.len.as_mut() {
  485|    463|            if *len > 0 {
  486|    463|                *len -= 1;
  487|    463|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    463|    }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1W_5implsyNtB1W_11Deserialize11deserialize16PrimitiveVisitorECsfpTA0IcUOwH_11cbor_decode:
  142|    463|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    463|        where V: Visitor<'de>
  144|    463|        {
  145|    463|            let value = <$t>::decode(&mut self.reader)?;
  146|    450|            visitor.$visit(value)
  147|    463|        }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB39_7PayloadNtB1W_11Deserialize11deserialize1__NtB36_5InnerB3V_11deserialize9___VisitorECsfpTA0IcUOwH_11cbor_decode:
  354|    586|    fn deserialize_tuple_struct<V>(
  355|    586|        self,
  356|    586|        _name: &'static str,
  357|    586|        len: usize,
  358|    586|        visitor: V,
  359|    586|    ) -> Result<V::Value, Self::Error>
  360|    586|    where
  361|    586|        V: Visitor<'de>,
  362|    586|    {
  363|    586|        self.deserialize_tuple(len, visitor)
  364|    586|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess17next_element_seedINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEECsfpTA0IcUOwH_11cbor_decode:
  484|  1.98k|        if let Some(len) = self.len.as_mut() {
  485|  1.70k|            if *len > 0 {
  486|  1.38k|                *len -= 1;
  487|  1.38k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    323|                Ok(None)
  490|       |            }
  491|    279|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|    271|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      1|            self.de.reader.advance(1);
  495|      1|            Ok(None)
  496|       |        }
  497|  1.98k|    }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1W_5implsINtNtCs4DfSYhG45Ol_5alloc3vec3VecpENtB1W_11Deserialize11deserialize10VecVisitorNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEECsfpTA0IcUOwH_11cbor_decode:
  334|    418|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    418|    where
  336|    418|        V: Visitor<'de>,
  337|    418|    {
  338|    418|        let mut de = self.try_step()?;
  339|    418|        let seq = Accessor::array(&mut de)?;
  340|    402|        visitor.visit_seq(seq)
  341|    418|    }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs4Ozj5dI0DK0_3cid5serdeINtNtB3c_3cid3CidKpENtB1W_11Deserialize11deserialize16MainEntryVisitorKj40_EECsfpTA0IcUOwH_11cbor_decode:
  318|    271|    fn deserialize_newtype_struct<V>(
  319|    271|        self,
  320|    271|        name: &'static str,
  321|    271|        visitor: V,
  322|    271|    ) -> Result<V::Value, Self::Error>
  323|    271|    where
  324|    271|        V: Visitor<'de>,
  325|    271|    {
  326|    271|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    271|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    271|    }
_RNvMs1_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderE5tupleCsfpTA0IcUOwH_11cbor_decode:
  443|    586|    pub fn tuple(
  444|    586|        de: &'a mut Deserializer<R>,
  445|    586|        len: usize,
  446|    586|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    586|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    579|        if array_start.0 == Some(len) {
  450|    573|            Ok(Accessor {
  451|    573|                de,
  452|    573|                len: array_start.0,
  453|    573|            })
  454|       |        } else {
  455|      6|            Err(DecodeError::RequireLength {
  456|      6|                name: "tuple",
  457|      6|                expect: len,
  458|      6|                value: array_start.0.unwrap_or(0),
  459|      6|            })
  460|       |        }
  461|    586|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess17next_element_seedINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtCshDgXgtzY0Ab_17fvm_ipld_bitfield8BitFieldEECsfpTA0IcUOwH_11cbor_decode:
  484|    324|        if let Some(len) = self.len.as_mut() {
  485|    324|            if *len > 0 {
  486|    324|                *len -= 1;
  487|    324|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    324|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess17next_element_seedINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataINtNtCs4Ozj5dI0DK0_3cid3cid3CidKj40_EEECsfpTA0IcUOwH_11cbor_decode:
  484|    271|        if let Some(len) = self.len.as_mut() {
  485|    271|            if *len > 0 {
  486|    271|                *len -= 1;
  487|    271|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    271|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess17next_element_seedINtNtCs7Lt4kQG01hY_4core6marker11PhantomDataNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsfpTA0IcUOwH_11cbor_decode:
  484|    284|        if let Some(len) = self.len.as_mut() {
  485|    284|            if *len > 0 {
  486|    284|                *len -= 1;
  487|    284|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    284|    }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB32_7PayloadNtB1W_11Deserialize11deserialize1__NtB2Z_5InnerB3O_11deserialize9___VisitorECsfpTA0IcUOwH_11cbor_decode:
  344|    586|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    586|    where
  346|    586|        V: Visitor<'de>,
  347|    586|    {
  348|    586|        let mut de = self.try_step()?;
  349|    586|        let seq = Accessor::tuple(&mut de, len)?;
  350|    573|        visitor.visit_seq(seq)
  351|    586|    }
_RNvMNtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderE11from_readerCsfpTA0IcUOwH_11cbor_decode:
   93|    586|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    586|        Deserializer { reader }
   95|    586|    }
_RNvMs_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderE8try_stepCsfpTA0IcUOwH_11cbor_decode:
  101|  1.00k|    fn try_step<'a>(
  102|  1.00k|        &'a mut self,
  103|  1.00k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|  1.00k|    {
  105|  1.00k|        if self.reader.step_in() {
  106|  1.00k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|  1.00k|    }
_RNvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de9SeqAccess9size_hintCsfpTA0IcUOwH_11cbor_decode:
  500|    402|    fn size_hint(&self) -> Option<usize> {
  501|    402|        self.len
  502|    402|    }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderENtNtCsh3pHmw2rnsT_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc3vec3VechENtB32_11Deserialize11deserialize10VecVisitorECsfpTA0IcUOwH_11cbor_decode:
  239|    857|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    857|    where
  241|    857|        V: Visitor<'de>,
  242|    857|    {
  243|    857|        self.deserialize_bytes(visitor)
  244|    857|    }

_RINvXs4_NtCsctzOknhqbL8_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleENtNtCsh3pHmw2rnsT_5serde2de5Error6customNtNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus5error5ErrorECsfpTA0IcUOwH_11cbor_decode:
  134|     34|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     34|        DecodeError::Msg(msg.to_string())
  136|     34|    }
_RNvXs6_NtCsctzOknhqbL8_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCsfpTA0IcUOwH_11cbor_decode:
  161|    374|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  162|    374|        fmt::Debug::fmt(self, f)
  163|    374|    }
_RINvXs4_NtCsctzOknhqbL8_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleENtNtCsh3pHmw2rnsT_5serde2de5Error6customNtNtNtCslfkyZmnmC60_10fvm_shared7address6errors5ErrorECsfpTA0IcUOwH_11cbor_decode:
  134|     33|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     33|        DecodeError::Msg(msg.to_string())
  136|     33|    }
_RNvXs9_NtCsctzOknhqbL8_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCsfpTA0IcUOwH_11cbor_decode:
   70|    374|#[derive(Debug)]
_RINvXs4_NtCsctzOknhqbL8_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleENtNtCsh3pHmw2rnsT_5serde2de5Error6customNtNtCs4DfSYhG45Ol_5alloc6string6StringECsfpTA0IcUOwH_11cbor_decode:
  134|     33|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     33|        DecodeError::Msg(msg.to_string())
  136|     33|    }
_RNvXs7_NtCsctzOknhqbL8_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEINtB16_4FromINtNtCseuCwczWVij_7cbor4ii5error11DecodeErrorB14_EE4fromCsfpTA0IcUOwH_11cbor_decode:
  167|    244|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  168|    244|        match err {
  169|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  170|    196|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  171|     47|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  172|     47|                DecodeError::Mismatch { expect_major, byte }
  173|       |            }
  174|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  175|      0|                DecodeError::TypeMismatch { name, byte }
  176|       |            }
  177|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  178|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  179|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  180|       |            cbor4ii::DecodeError::RequireLength {
  181|      0|                name,
  182|      0|                expect,
  183|      0|                value,
  184|      0|            } => DecodeError::RequireLength {
  185|      0|                name,
  186|      0|                expect,
  187|      0|                value,
  188|      0|            },
  189|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  190|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  191|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  192|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  193|      0|            _ => DecodeError::Msg(err.to_string()),
  194|       |        }
  195|    244|    }

_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsfpTA0IcUOwH_11cbor_decode:
  403|    212|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    212|        value.serialize(&mut *self.ser)
  405|    212|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsfpTA0IcUOwH_11cbor_decode:
  403|    212|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    212|        value.serialize(&mut *self.ser)
  405|    212|    }
_RNvMNtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterE10into_innerCsfpTA0IcUOwH_11cbor_decode:
   56|    212|    pub fn into_inner(self) -> W {
   57|    212|        self.writer
   58|    212|    }
_RNvXs7_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer15serialize_bytesCsfpTA0IcUOwH_11cbor_decode:
  550|    212|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    212|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    212|        let prefixed = [&[0x00], value].concat();
  553|    212|        // CIDs are serialized with CBOR tag 42.
  554|    212|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    212|        Ok(())
  556|    212|    }
_RNvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser12SerializeSeq3endCsfpTA0IcUOwH_11cbor_decode:
  374|    212|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    212|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    212|        }
  378|       |
  379|    212|        Ok(())
  380|    212|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsa5KSQNCWF8I_11common_fuzz4cborNtB3a_7PayloadNtB1V_9Serialize9serialize1__NtB35_5InnerB3W_9serialize15___SerializeWithECsfpTA0IcUOwH_11cbor_decode:
  403|    212|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    212|        value.serialize(&mut *self.ser)
  405|    212|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCshDgXgtzY0Ab_17fvm_ipld_bitfield8BitFieldECsfpTA0IcUOwH_11cbor_decode:
  403|    212|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    212|        value.serialize(&mut *self.ser)
  405|    212|    }
_RINvXs0_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser12SerializeSeq17serialize_elementRNtNtCslfkyZmnmC60_10fvm_shared7address7AddressECsfpTA0IcUOwH_11cbor_decode:
  369|    456|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    456|        value.serialize(&mut *self.ser)
  371|    456|    }
_RINvXs_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer24serialize_newtype_structNtNtCsdPXfszfLJoH_11serde_bytes7bytebuf7ByteBufECsfpTA0IcUOwH_11cbor_decode:
  199|    212|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    212|        self,
  201|    212|        name: &'static str,
  202|    212|        value: &T,
  203|    212|    ) -> Result<Self::Ok, Self::Error> {
  204|    212|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    212|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    212|    }
_RNvXs_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer13serialize_seqCsfpTA0IcUOwH_11cbor_decode:
  226|    212|        if let Some(len) = len {
  227|    212|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    212|        Ok(Collect {
  232|    212|            bounded: len.is_some(),
  233|    212|            ser: self,
  234|    212|        })
  235|    212|    }
_RNvXs_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer15serialize_bytesCsfpTA0IcUOwH_11cbor_decode:
  160|  1.30k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  1.30k|        Ok(())
  162|  1.30k|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs4DfSYhG45Ol_5alloc3vec3VecNtNtCslfkyZmnmC60_10fvm_shared7address7AddressEECsfpTA0IcUOwH_11cbor_decode:
  403|    212|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    212|        value.serialize(&mut *self.ser)
  405|    212|    }
_RNvXs_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer15serialize_tupleCsfpTA0IcUOwH_11cbor_decode:
  239|    212|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    212|        Ok(BoundedCollect { ser: self })
  241|    212|    }
_RNvXs_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer22serialize_tuple_structCsfpTA0IcUOwH_11cbor_decode:
  244|    212|    fn serialize_tuple_struct(
  245|    212|        self,
  246|    212|        _name: &'static str,
  247|    212|        len: usize,
  248|    212|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    212|        self.serialize_tuple(len)
  250|    212|    }
_RNvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct3endCsfpTA0IcUOwH_11cbor_decode:
  408|    212|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    212|        Ok(())
  410|    212|    }
_RNvXs_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser10Serializer13serialize_u64CsfpTA0IcUOwH_11cbor_decode:
  123|    212|        v.encode(&mut self.writer)?;
  124|    212|        Ok(())
  125|    212|    }
_RNvMNtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterE3newCsfpTA0IcUOwH_11cbor_decode:
   51|    212|    pub fn new(writer: W) -> Serializer<W> {
   52|    212|        Serializer { writer }
   53|    212|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs4Ozj5dI0DK0_3cid3cid3CidKj40_EECsfpTA0IcUOwH_11cbor_decode:
  403|    212|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    212|        value.serialize(&mut *self.ser)
  405|    212|    }
_RINvXs2_NtCsctzOknhqbL8_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterENtNtCsh3pHmw2rnsT_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCslfkyZmnmC60_10fvm_shared7address7AddressECsfpTA0IcUOwH_11cbor_decode:
  403|    212|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    212|        value.serialize(&mut *self.ser)
  405|    212|    }
_RINvNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser6to_vecNtNtCsa5KSQNCWF8I_11common_fuzz4cbor7PayloadECsfpTA0IcUOwH_11cbor_decode:
   23|    212|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    212|where
   25|    212|    T: Serialize + ?Sized,
   26|    212|{
   27|    212|    let writer = BufWriter::new(Vec::new());
   28|    212|    let mut serializer = Serializer::new(writer);
   29|    212|    value.serialize(&mut serializer)?;
   30|    212|    Ok(serializer.into_inner().into_inner())
   31|    212|}

_RINvXs_Cs9E4z8ROzTFV_11serde_tupleINtB5_12DeserializerQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEENtNtCsh3pHmw2rnsT_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB3R_7PayloadNtB2E_11Deserialize11deserialize1__NtB3O_5InnerB4D_11deserialize9___VisitorECsfpTA0IcUOwH_11cbor_decode:
  353|    586|    fn deserialize_tuple_struct<V>(
  354|    586|        self,
  355|    586|        name: &'static str,
  356|    586|        len: usize,
  357|    586|        visitor: V,
  358|    586|    ) -> Result<V::Value, Self::Error>
  359|    586|    where
  360|    586|        V: serde::de::Visitor<'de>,
  361|    586|    {
  362|    586|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    586|    }
_RNvXCs9E4z8ROzTFV_11serde_tupleINtB2_10SerializerQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEENtNtCsh3pHmw2rnsT_5serde3ser10Serializer22serialize_tuple_structCsfpTA0IcUOwH_11cbor_decode:
  158|    212|    fn serialize_tuple_struct(
  159|    212|        self,
  160|    212|        name: &'static str,
  161|    212|        len: usize,
  162|    212|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    212|        self.0.serialize_tuple_struct(name, len)
  164|    212|    }

_RNvXNtCsfZStZMSZNFV_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCslfkyZmnmC60_10fvm_shared:
    9|      4|    fn as_display(&self) -> Self {
   10|      4|        self
   11|      4|    }

_RNvNtCsgubijPM5HW3_15unsigned_varint6decode3u64CsfpTA0IcUOwH_11cbor_decode:
  122|    914|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    914|    decode!(buf, 9, u64)
  124|    914|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6decode7is_lastCsfpTA0IcUOwH_11cbor_decode:
   90|  3.88k|pub fn is_last(b: u8) -> bool {
   91|  3.88k|    b & 0x80 == 0
   92|  3.88k|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6decode7is_lastCslfkyZmnmC60_10fvm_shared:
   90|  3.16k|pub fn is_last(b: u8) -> bool {
   91|  3.16k|    b & 0x80 == 0
   92|  3.16k|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6decode3u64CslfkyZmnmC60_10fvm_shared:
  122|    675|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    675|    decode!(buf, 9, u64)
  124|    675|}

_RNvNtCsgubijPM5HW3_15unsigned_varint6encode10u64_bufferCsfpTA0IcUOwH_11cbor_decode:
  119|  1.51k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.51k|    [0; U64_LEN]
  121|  1.51k|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6encode2u8CsfpTA0IcUOwH_11cbor_decode:
   45|    212|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    212|    encode!(number, buf)
   47|    212|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6encode9u8_bufferCsfpTA0IcUOwH_11cbor_decode:
  101|    212|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    212|    [0; U8_LEN]
  103|    212|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6encode3u64CsfpTA0IcUOwH_11cbor_decode:
   69|    588|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    588|    encode!(number, buf)
   71|    588|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6encode10u64_bufferCslfkyZmnmC60_10fvm_shared:
  119|    282|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    282|    [0; U64_LEN]
  121|    282|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6encode3u64CslfkyZmnmC60_10fvm_shared:
   69|    282|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    282|    encode!(number, buf)
   71|    282|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6encode3u64CshDgXgtzY0Ab_17fvm_ipld_bitfield:
   69|  9.14k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  9.14k|    encode!(number, buf)
   71|  9.14k|}
_RNvNtCsgubijPM5HW3_15unsigned_varint6encode10u64_bufferCshDgXgtzY0Ab_17fvm_ipld_bitfield:
  119|  9.14k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  9.14k|    [0; U64_LEN]
  121|  9.14k|}

_RINvNtCsgubijPM5HW3_15unsigned_varint2io8read_u64QQRShECsfpTA0IcUOwH_11cbor_decode:
   31|    929|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    929|                let mut b = encode::$b();
   33|  1.99k|                for i in 0 .. b.len() {
   34|  1.99k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.99k|                    if n == 0 {
   36|     12|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.98k|                    }
   38|  1.98k|                    if decode::is_last(b[i]) {
   39|    914|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.07k|                    }
   41|       |                }
   42|      3|                Err(decode::Error::Overflow.into())
   43|    929|            }
_RNvXs1_NtCsgubijPM5HW3_15unsigned_varint2ioNtB5_9ReadErrorINtNtCs7Lt4kQG01hY_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|      7|    fn from(e: decode::Error) -> Self {
   92|      7|        ReadError::Decode(e)
   93|      7|    }

_RNvMsa_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    212|    pub fn new(iter: I) -> Self {
  426|    212|        Self {
  427|    212|            iter: Lookahead::new(iter),
  428|    212|        }
  429|    212|    }
_RNvXsf_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs7Lt4kQG01hY_4core7default7Default7defaultB9_:
   87|    212|#[derive(Default)]
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    212|    fn new(mut iter: I) -> Self {
  469|    212|        let next = iter.next();
  470|    212|        Self { iter, next }
  471|    212|    }
_RNvXse_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.23k|        let next = self.next.take()?;
  484|  9.02k|        self.next = self.iter.next();
  485|  9.02k|        Some(next)
  486|  9.23k|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  9.23k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.23k|        self.next.as_mut()
  475|  9.23k|    }
_RNvMs8_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  9.23k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  9.23k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  9.02k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    212|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  9.02k|        if advance_lhs {
  371|  9.02k|            self.lhs.next();
  372|  9.02k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  9.02k|        range
  377|  9.23k|    }
_RNvXse_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.23k|        let next = self.next.take()?;
  484|  9.02k|        self.next = self.iter.next();
  485|  9.02k|        Some(next)
  486|  9.23k|    }
_RNvMs8_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    212|    fn new(lhs: A, rhs: B) -> Self {
  344|    212|        Self {
  345|    212|            lhs: Lookahead::new(lhs),
  346|    212|            rhs: Lookahead::new(rhs),
  347|    212|            combinator: Default::default(),
  348|    212|        }
  349|    212|    }
_RNvXse_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  9.02k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.02k|        let next = self.next.take()?;
  484|  9.02k|        self.next = self.iter.next();
  485|  9.02k|        Some(next)
  486|  9.02k|    }
_RNvXsb_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  439|  9.23k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  9.02k|        while let Some(next) = self.iter.peek() {
  444|  8.84k|            if next.start > range.end {
  445|  8.84k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  9.02k|        Some(range)
  453|  9.23k|    }
_RNCNvXs9_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  9.23k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  312|  9.23k|        self.0.next()
  313|  9.23k|    }
_RNvXsb_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  439|  9.23k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  9.02k|        while let Some(next) = self.iter.peek() {
  444|  8.84k|            if next.start > range.end {
  445|  8.84k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  9.02k|        Some(range)
  453|  9.23k|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  18.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  18.4k|        self.next.as_mut()
  475|  18.4k|    }
_RNvMs8_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  9.23k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  9.23k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  9.02k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    212|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  9.02k|        if advance_lhs {
  371|  9.02k|            self.lhs.next();
  372|  9.02k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  9.02k|        range
  377|  9.23k|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    212|    fn new(mut iter: I) -> Self {
  469|    212|        let next = iter.next();
  470|    212|        Self { iter, next }
  471|    212|    }
_RNvXs6_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  312|  9.23k|        self.0.next()
  313|  9.23k|    }
_RNvXse_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  9.02k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.02k|        let next = self.next.take()?;
  484|  9.02k|        self.next = self.iter.next();
  485|  9.02k|        Some(next)
  486|  9.02k|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    212|    fn new(mut iter: I) -> Self {
  469|    212|        let next = iter.next();
  470|    212|        Self { iter, next }
  471|    212|    }
_RNvXs0_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  182|  9.02k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  9.02k|        // the difference between a range and an empty range is just that range
  184|  9.02k|        Some(lhs)
  185|  9.02k|    }
_RNCNvXs9_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  9.02k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsh_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs7Lt4kQG01hY_4core7default7Default7defaultB9_:
  152|    212|#[derive(Default)]
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    212|    fn new(mut iter: I) -> Self {
  469|    212|        let next = iter.next();
  470|    212|        Self { iter, next }
  471|    212|    }
_RNvXs9_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  389|  9.23k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  9.23k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  9.23k|    }
_RNvMsa_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    212|    pub fn new(iter: I) -> Self {
  426|    212|        Self {
  427|    212|            iter: Lookahead::new(iter),
  428|    212|        }
  429|    212|    }
_RNvMs5_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    212|    pub fn new(a: A, b: B) -> Self {
  299|    212|        Self(Merge::new(_Combine::new(a, b)))
  300|    212|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  9.02k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.02k|        self.next.as_mut()
  475|  9.02k|    }
_RNvXs9_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  389|  9.23k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  9.23k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  9.23k|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  9.23k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.23k|        self.next.as_mut()
  475|  9.23k|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  9.02k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.02k|        self.next.as_mut()
  475|  9.02k|    }
_RNvMsd_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|    424|    fn new(mut iter: I) -> Self {
  469|    424|        let next = iter.next();
  470|    424|        Self { iter, next }
  471|    424|    }
_RNCNvXs9_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  9.23k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs5_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    212|    pub fn new(a: A, b: B) -> Self {
  299|    212|        Self(Merge::new(_Combine::new(a, b)))
  300|    212|    }
_RNvXNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  110|  9.02k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  9.02k|        // the union of a range and an empty range is just that range
  112|  9.02k|        Some(lhs)
  113|  9.02k|    }
_RNCNvXs9_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  9.02k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    212|    fn new(lhs: A, rhs: B) -> Self {
  344|    212|        Self {
  345|    212|            lhs: Lookahead::new(lhs),
  346|    212|            rhs: Lookahead::new(rhs),
  347|    212|            combinator: Default::default(),
  348|    212|        }
  349|    212|    }

_RNvXs3_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|    424|    fn next(&mut self) -> Option<Self::Item> {
  155|    424|        self.0.next()
  156|    424|    }
_RINvYINtNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    212|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    212|        Combine::new(self, other)
   34|    212|    }
_RNvXs3_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  9.23k|    fn next(&mut self) -> Option<Self::Item> {
  155|  9.23k|        self.0.next()
  156|  9.23k|    }
_RINvMs2_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    212|    pub fn new<II>(iter: II) -> Self
  141|    212|    where
  142|    212|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    212|    {
  144|    212|        Self(iter.into_iter())
  145|    212|    }
_RINvNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEEB4_:
  164|    424|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|    424|    let mut iter = bits.into_iter().peekable();
  166|    424|
  167|    424|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|    424|    }))
  181|    424|}
_RNCINvNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0B6_:
  167|    424|    Ranges::new(iter::from_fn(move || {
  168|    424|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|    424|    }))
_RINvMs2_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|    424|    pub fn new<II>(iter: II) -> Self
  141|    424|    where
  142|    424|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    424|    {
  144|    424|        Self(iter.into_iter())
  145|    424|    }
_RINvYINtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs7Lt4kQG01hY_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs4DfSYhG45Ol_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    212|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    212|        Combine::new(self, other)
   24|    212|    }

_RNvMs4_CshDgXgtzY0Ab_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    212|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    212|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    212|    }
_RNvXsa_CshDgXgtzY0Ab_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs7Lt4kQG01hY_4core7default7Default7defaultB5_:
   42|    284|#[derive(Debug, Default, Clone)]
_RNvMs4_CshDgXgtzY0Ab_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    212|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    212|        self.inner_ranges()
  287|    212|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    212|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    212|    }

_RNvXNtCshDgXgtzY0Ab_17fvm_ipld_bitfield5rangeINtNtNtCs7Lt4kQG01hY_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  9.02k|    fn size(&self) -> Self::Idx {
   17|  9.02k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  9.02k|            self.end - self.start
   21|       |        }
   22|  9.02k|    }

_RNvXs5_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCs7Lt4kQG01hY_4core3fmt7Display3fmt:
    5|     34|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXs_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   99|    324|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    324|    where
  101|    324|        D: Deserializer<'de>,
  102|    324|    {
  103|    324|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    318|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    318|        }
  110|    318|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    324|    }
_RINvXNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   83|    212|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    212|    where
   85|    212|        S: Serializer,
   86|    212|    {
   87|    212|        let bytes = self.to_bytes();
   88|    212|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    212|        }
   94|    212|        strict_bytes::serialize(&bytes, serializer)
   95|    212|    }
_RNvMs1_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    318|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    318|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    317|        let version = reader.read(2);
  162|    317|        if version != 0 {
  163|      1|            return Err(Error::UnsupportedVersion);
  164|    316|        }
  165|    316|
  166|    316|        let mut next_value = reader.read(1) == 1;
  167|    316|        let mut ranges = Vec::new();
  168|    316|        let mut index = 0u64;
  169|    316|        let mut total_len: u64 = 0;
  170|       |
  171|  26.6k|        while let Some(len) = reader.read_len()? {
  172|  26.3k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  26.3k|            if ovf {
  174|      1|                return Err(Error::RLEOverflow);
  175|  26.3k|            }
  176|  26.3k|            total_len = new_total_len;
  177|  26.3k|            let start = index;
  178|  26.3k|            index += len;
  179|  26.3k|            let end = index;
  180|  26.3k|
  181|  26.3k|            if next_value {
  182|  13.2k|                ranges.push(start..end);
  183|  13.2k|            }
  184|       |
  185|  26.3k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    292|        if next_value {
  191|      8|            return Err(Error::NotMinimal);
  192|    284|        }
  193|    284|
  194|    284|        Ok(Self {
  195|    284|            ranges,
  196|    284|            ..Default::default()
  197|    284|        })
  198|    318|    }
_RNvMs1_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    212|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    212|        let mut iter = self.ranges();
  203|       |
  204|    212|        let first_range = match iter.next() {
  205|    178|            Some(range) => range,
  206|     34|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    178|        let mut writer = BitWriter::new();
  210|    178|        writer.write(0, 2); // version 00
  211|    178|
  212|    178|        if first_range.start == 0 {
  213|     90|            writer.write(1, 1); // the first bit is a 1
  214|     90|        } else {
  215|     88|            writer.write(0, 1); // the first bit is a 0
  216|     88|            writer.write_len(first_range.start); // the number of leading 0s
  217|     88|        }
  218|       |
  219|    178|        writer.write_len(first_range.size());
  220|    178|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  9.02k|        for range in iter {
  225|  8.84k|            writer.write_len(range.start - index); // zeros
  226|  8.84k|            writer.write_len(range.size()); // ones
  227|  8.84k|            index = range.end;
  228|  8.84k|        }
  229|       |
  230|    178|        writer.finish()
  231|    212|    }

_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    318|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    318|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    318|        // data.
   29|    318|        if bytes.last() == Some(&0) {
   30|      1|            return Err(Error::NotMinimal);
   31|    317|        }
   32|    317|        let mut bits = 0u64;
   33|    951|        for i in 0..2 {
   34|    634|            let byte = bytes.get(i).unwrap_or(&0);
   35|    634|            bits |= (*byte as u64) << (8 * i);
   36|    634|        }
   37|       |
   38|    317|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    317|
   40|    317|        Ok(Self {
   41|    317|            bytes,
   42|    317|            bits,
   43|    317|            num_bits: 16,
   44|    317|        })
   45|    318|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  11.3k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  11.3k|        let mut len = 0u64;
   95|       |
   96|  55.6k|        for i in 0..VARINT_MAX_BYTES {
   97|  55.6k|            let byte = self.read(8);
   98|  55.6k|
   99|  55.6k|            // strip off the most significant bit and add
  100|  55.6k|            // it to the output
  101|  55.6k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  55.6k|
  103|  55.6k|            // if the most significant bit is a 0, we've
  104|  55.6k|            // reached the end of the varint
  105|  55.6k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  11.3k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      5|                    break;
  110|  11.3k|                }
  111|  11.3k|                return Ok(len);
  112|  44.2k|            }
  113|       |        }
  114|       |
  115|      6|        Err(Error::InvalidVarint)
  116|  11.3k|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  26.6k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  26.6k|        // We're done.
  121|  26.6k|        if !self.has_more() {
  122|    292|            return Ok(None);
  123|  26.3k|        }
  124|  26.3k|
  125|  26.3k|        let peek6 = self.peek(6);
  126|       |
  127|  26.3k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|  12.3k|            self.drop(1);
  130|  12.3k|            1
  131|  13.9k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|  2.57k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|  2.57k|            self.drop(6);
  135|  2.57k|            if val < 2 {
  136|      7|                return Err(Error::NotMinimal);
  137|  2.56k|            }
  138|  2.56k|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  11.3k|            self.drop(2);
  142|  11.3k|            let val = self.read_varint()?;
  143|  11.3k|            if val < 16 {
  144|     10|                return Err(Error::NotMinimal);
  145|  11.3k|            }
  146|  11.3k|            val
  147|       |        };
  148|       |
  149|  26.3k|        Ok(Some(len))
  150|  26.6k|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  82.6k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  82.6k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  82.6k|        let mask = (1 << num_bits) - 1;
   56|  82.6k|        (self.bits & mask) as u8
   57|  82.6k|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  153|  26.6k|    pub fn has_more(&self) -> bool {
  154|  26.6k|        self.bits != 0 || !self.bytes.is_empty()
  155|  26.6k|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  82.6k|    pub fn drop(&mut self, num_bits: u32) {
   62|  82.6k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  82.6k|        self.bits >>= num_bits;
   66|  82.6k|        self.num_bits -= num_bits;
   67|  82.6k|
   68|  82.6k|        // not sure why this being outside of the if improves the performance
   69|  82.6k|        // bit it does, probably related to keeping caches warm
   70|  82.6k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  82.6k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  82.6k|
   73|  82.6k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  82.6k|        if self.num_bits < 8 {
   75|  61.9k|            self.num_bits += 8;
   76|  61.9k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  61.9k|        }
   78|  82.6k|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  56.2k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  56.2k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  56.2k|        let res = self.peek(num_bits);
   86|  56.2k|        self.drop(num_bits);
   87|  56.2k|
   88|  56.2k|        res
   89|  56.2k|    }

_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  64.9k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  64.9k|        debug_assert!(num_bits <= 8);
   25|  64.9k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  64.9k|        self.bits |= (byte as u16) << self.num_bits;
   28|  64.9k|        self.num_bits += num_bits;
   29|  64.9k|
   30|  64.9k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  64.9k|        if self.num_bits >= 8 {
   32|  49.3k|            self.bytes.push(self.bits as u8);
   33|  49.3k|            self.bits >>= 8;
   34|  49.3k|            self.num_bits -= 8;
   35|  49.3k|        }
   36|  64.9k|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  17.9k|    pub fn write_len(&mut self, len: u64) {
   40|  17.9k|        debug_assert!(len > 0);
   41|       |
   42|  17.9k|        if len == 1 {
   43|  7.11k|            // Block Single (prefix 1)
   44|  7.11k|            self.write(1, 1);
   45|  10.8k|        } else if len < 16 {
   46|  1.69k|            // Block Short (prefix 01)
   47|  1.69k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.69k|            self.write(len as u8, 4);
   49|  1.69k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  9.14k|            self.write(0, 2);
   52|  9.14k|
   53|  9.14k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  44.9k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  44.9k|                self.write(byte, 8);
   56|  44.9k|            }
   57|       |        }
   58|  17.9k|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    178|    pub fn finish(mut self) -> Vec<u8> {
   62|    178|        if self.bits > 0 {
   63|     72|            self.bytes.push(self.bits as u8);
   64|    106|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    178|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    178|        self.bytes
   72|    178|    }
_RNvMNtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   18|    178|    pub fn new() -> Self {
   19|    178|        Default::default()
   20|    178|    }
_RNvXs_NtNtCshDgXgtzY0Ab_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs7Lt4kQG01hY_4core7default7Default7defaultB8_:
    5|    178|#[derive(Default, Clone, Debug)]

_RINvXNvNtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   36|    212|#[derive(Debug, Serialize)]
_RINvXNvXNvNtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   36|    212|#[derive(Debug, Serialize)]
_RINvXs4_NtCshDgXgtzY0Ab_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   94|    284|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    284|    where
   96|    284|        D: Deserializer<'de>,
   97|    284|    {
   98|    284|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    271|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    271|        }
  105|    271|        Ok(Self::Unvalidated(bytes))
  106|    284|    }

_RINvXNvXs_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor14visit_byte_bufINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
   64|      8|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|      8|                where
   66|      8|                    E: Error,
   67|      8|                {
   68|      8|                    Ok(v)
   69|      8|                }
_RINvXNvXs_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor11visit_bytesINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
   57|    726|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    726|                where
   59|    726|                    E: Error,
   60|    726|                {
   61|    726|                    Ok(v.into())
   62|    726|                }
_RINvXNvXs0_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor14visit_byte_bufINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
  103|     81|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|     81|                where
  105|     81|                    E: Error,
  106|     81|                {
  107|     81|                    Ok(Cow::Owned(v))
  108|     81|                }
_RINvXNtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   35|    668|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    668|        where
   37|    668|            S: Serializer,
   38|    668|        {
   39|    668|            serializer.serialize_bytes(self.as_ref())
   40|    668|        }
_RINvNtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCs4DfSYhG45Ol_5alloc3vec3VechEQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  154|    424|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    424|    where
  156|    424|        T: ?Sized + AsRef<[u8]>,
  157|    424|        S: Serializer,
  158|    424|    {
  159|    424|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    424|    }
_RINvXNtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   35|    636|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    636|        where
   37|    636|            S: Serializer,
   38|    636|        {
   39|    636|            serializer.serialize_bytes(self.as_ref())
   40|    636|        }
_RINvXs_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   44|    857|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    857|        where
   46|    857|            D: Deserializer<'de>,
   47|    857|        {
   48|    857|            struct VecVisitor;
   49|    857|
   50|    857|            impl<'de> Visitor<'de> for VecVisitor {
   51|    857|                type Value = Vec<u8>;
   52|    857|
   53|    857|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    857|                    formatter.write_str("byte array")
   55|    857|                }
   56|    857|
   57|    857|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    857|                where
   59|    857|                    E: Error,
   60|    857|                {
   61|    857|                    Ok(v.into())
   62|    857|                }
   63|    857|
   64|    857|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    857|                where
   66|    857|                    E: Error,
   67|    857|                {
   68|    857|                    Ok(v)
   69|    857|                }
   70|    857|            }
   71|    857|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    857|        }
_RINvXs0_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   76|  1.97k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  1.97k|        where
   78|  1.97k|            D: Deserializer<'de>,
   79|  1.97k|        {
   80|  1.97k|            struct CowVisitor;
   81|  1.97k|
   82|  1.97k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  1.97k|                type Value = Cow<'de, [u8]>;
   84|  1.97k|
   85|  1.97k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  1.97k|                    formatter.write_str("a byte array")
   87|  1.97k|                }
   88|  1.97k|
   89|  1.97k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  1.97k|                where
   91|  1.97k|                    E: Error,
   92|  1.97k|                {
   93|  1.97k|                    Ok(Cow::Borrowed(v))
   94|  1.97k|                }
   95|  1.97k|
   96|  1.97k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  1.97k|                where
   98|  1.97k|                    E: Error,
   99|  1.97k|                {
  100|  1.97k|                    Ok(Cow::Owned(v.to_vec()))
  101|  1.97k|                }
  102|  1.97k|
  103|  1.97k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  1.97k|                where
  105|  1.97k|                    E: Error,
  106|  1.97k|                {
  107|  1.97k|                    Ok(Cow::Owned(v))
  108|  1.97k|                }
  109|  1.97k|            }
  110|  1.97k|            deserializer.deserialize_bytes(CowVisitor)
  111|  1.97k|        }
_RINvNtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCs4DfSYhG45Ol_5alloc3vec3VechEQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  154|    212|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    212|    where
  156|    212|        T: ?Sized + AsRef<[u8]>,
  157|    212|        S: Serializer,
  158|    212|    {
  159|    212|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    212|    }
_RINvXNvXs0_NtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs4DfSYhG45Ol_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsh3pHmw2rnsT_5serde2de7Visitor20visit_borrowed_bytesINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7Lt4kQG01hY_4core7convert10InfallibleEECsfpTA0IcUOwH_11cbor_decode:
   89|  1.82k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  1.82k|                where
   91|  1.82k|                    E: Error,
   92|  1.82k|                {
   93|  1.82k|                    Ok(Cow::Borrowed(v))
   94|  1.82k|                }
_RINvNtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs4DfSYhG45Ol_5alloc3vec3VechEQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  162|    857|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    857|    where
  164|    857|        T: Deserialize<'de>,
  165|    857|        D: Deserializer<'de>,
  166|    857|    {
  167|    857|        Deserialize::deserialize(deserializer)
  168|    857|    }
_RINvNtNtCs6XMETPIY5Vl_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs4DfSYhG45Ol_5alloc6borrow3CowShEQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  162|    324|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    324|    where
  164|    324|        T: Deserialize<'de>,
  165|    324|        D: Deserializer<'de>,
  166|    324|    {
  167|    324|        Deserialize::deserialize(deserializer)
  168|    324|    }

_RNvXNtCs6XMETPIY5Vl_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCs7Lt4kQG01hY_4core7convert4FromINtNtCsctzOknhqbL8_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCsfpTA0IcUOwH_11cbor_decode:
   23|    374|    fn from(err: DecodeError<T>) -> Self {
   24|    374|        Self {
   25|    374|            description: err.to_string(),
   26|    374|            protocol: CodecProtocol::Cbor,
   27|    374|        }
   28|    374|    }

_RINvCs6XMETPIY5Vl_17fvm_ipld_encoding6to_vecNtNtCsa5KSQNCWF8I_11common_fuzz4cbor7PayloadECsfpTA0IcUOwH_11cbor_decode:
   44|    212|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    212|where
   46|    212|    T: ser::Serialize + ?Sized,
   47|    212|{
   48|    212|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    212|}
_RINvCs6XMETPIY5Vl_17fvm_ipld_encoding10from_sliceNtNtCsa5KSQNCWF8I_11common_fuzz4cbor7PayloadECsfpTA0IcUOwH_11cbor_decode:
   61|    586|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    586|where
   63|    586|    T: de::Deserialize<'a>,
   64|    586|{
   65|    586|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    586|}

_RNvXs7_NtNtCslfkyZmnmC60_10fvm_shared7address6errorsNtB5_5ErrorNtNtCs7Lt4kQG01hY_4core3fmt7Display3fmt:
   14|     33|#[derive(Debug, PartialEq, Eq, Error)]
_RNvXs0_NtNtCslfkyZmnmC60_10fvm_shared7address6errorsNtB5_5ErrorINtNtCs7Lt4kQG01hY_4core7convert4FromNtNtCsgubijPM5HW3_15unsigned_varint6decode5ErrorE4from:
   52|     16|    fn from(_: VarintError) -> Error {
   53|     16|        Error::InvalidPayload
   54|     16|    }

_RINvXs2_NtCslfkyZmnmC60_10fvm_shared7addressNtB6_7AddressNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
  348|    668|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  349|    668|    where
  350|    668|        S: Serializer,
  351|    668|    {
  352|    668|        let address_bytes = self.to_bytes();
  353|    668|        strict_bytes::Serialize::serialize(&address_bytes, s)
  354|    668|    }
_RINvXs3_NtCslfkyZmnmC60_10fvm_shared7addressNtB6_7AddressNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
  358|  1.65k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  359|  1.65k|    where
  360|  1.65k|        D: Deserializer<'de>,
  361|  1.65k|    {
  362|  1.65k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  363|       |
  364|       |        // Create and return created address of unmarshalled bytes
  365|  1.58k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  366|  1.65k|    }
_RNvMNtCslfkyZmnmC60_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|    668|    pub fn to_bytes(self) -> Vec<u8> {
  169|    668|        self.payload.to_bytes()
  170|    668|    }
_RNvMNtCslfkyZmnmC60_10fvm_shared7addressNtB2_7Address3new:
   79|  1.57k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  1.57k|        Ok(Self {
   81|  1.57k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  1.57k|    }
_RNvMNtCslfkyZmnmC60_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  1.58k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  1.58k|        if bz.len() < 2 {
   88|      9|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  1.57k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  1.57k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  1.58k|    }
_RNvNtCslfkyZmnmC60_10fvm_shared7address12to_leb_bytes:
  369|    282|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  370|    282|    // write id to buffer in leb128 format
  371|    282|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  372|    282|}
_RNvNtCslfkyZmnmC60_10fvm_shared7address14from_leb_bytes:
  374|    459|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  375|       |    // write id to buffer in leb128 format
  376|    459|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  377|    444|    if !remaining.is_empty() {
  378|      2|        return Err(Error::InvalidPayload);
  379|    442|    }
  380|    442|    Ok(id)
  381|    459|}

_RNvMs0_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|    215|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|    215|        let length = subaddress.len();
   59|    215|        if length > MAX_SUBADDRESS_LEN {
   60|      1|            return Err(Error::InvalidPayloadLength(length));
   61|    214|        }
   62|    214|        let mut addr = DelegatedAddress {
   63|    214|            namespace,
   64|    214|            length,
   65|    214|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|    214|        };
   67|    214|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|    214|        Ok(addr)
   69|    215|    }
_RNCNvMs2_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB7_7Payload3news_0Bb_:
  149|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMs0_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|     98|    pub fn subaddress(&self) -> &[u8] {
   80|     98|        &self.buffer[..self.length]
   81|     98|    }
_RNvMs2_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|    668|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|    668|        use Payload::*;
  117|    668|        match self {
  118|    184|            ID(i) => to_leb_bytes(i),
  119|    132|            Secp256k1(arr) => arr.to_vec(),
  120|    138|            Actor(arr) => arr.to_vec(),
  121|    116|            BLS(arr) => arr.to_vec(),
  122|     98|            Delegated(addr) => {
  123|     98|                let mut buf = to_leb_bytes(addr.namespace());
  124|     98|                buf.extend(addr.subaddress());
  125|     98|                buf
  126|       |            }
  127|       |        }
  128|    668|    }
_RNvMs2_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  1.57k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  1.57k|        let payload = match protocol {
  140|    459|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    273|                payload
  143|    273|                    .try_into()
  144|    273|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    390|                payload
  148|    390|                    .try_into()
  149|    390|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    234|                payload
  153|    234|                    .try_into()
  154|    234|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|    216|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|    215|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  1.55k|        Ok(payload)
  162|  1.57k|    }
_RNvXs3_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCs7Lt4kQG01hY_4core7convert4FromNtB5_7PayloadE4from:
  166|    668|    fn from(pl: Payload) -> Self {
  167|    668|        match pl {
  168|    184|            Payload::ID(_) => Self::ID,
  169|    132|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    138|            Payload::Actor(_) => Self::Actor,
  171|    116|            Payload::BLS(_) => Self::BLS,
  172|     98|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|    668|    }
_RNvMs0_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|     98|    pub fn namespace(&self) -> ActorID {
   74|     98|        self.namespace
   75|     98|    }
_RNCNvMs2_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB7_7Payload3news0_0Bb_:
  154|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMs2_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB7_7Payload3new0Bb_:
  144|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMs2_NtNtCslfkyZmnmC60_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|    668|    pub fn to_bytes(self) -> Vec<u8> {
  132|    668|        let mut bz = self.to_raw_bytes();
  133|    668|        bz.insert(0, Protocol::from(self) as u8);
  134|    668|        bz
  135|    668|    }

_RNvXNvNtNtCslfkyZmnmC60_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsg2iHFwzWKAu_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  1.57k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCslfkyZmnmC60_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsg2iHFwzWKAu_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  1.57k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCslfkyZmnmC60_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  1.57k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  1.57k|        FromPrimitive::from_u8(b)
   31|  1.57k|    }

_RINvXNvXNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtBe_7PayloadNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   12|    573|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCsa5KSQNCWF8I_11common_fuzz4cborNtBd_7PayloadNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   12|    212|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtBb_7PayloadNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   12|    573|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsa5KSQNCWF8I_11common_fuzz4cborNtBa_7PayloadNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs9E4z8ROzTFV_11serde_tuple10SerializerQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEEECsfpTA0IcUOwH_11cbor_decode:
   12|    212|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCsa5KSQNCWF8I_11common_fuzz4cborNtB5_7PayloadNtNtCsh3pHmw2rnsT_5serde3ser9Serialize9serializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor3ser10SerializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils9BufWriterEECsfpTA0IcUOwH_11cbor_decode:
   12|    212|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB8_7PayloadNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs9E4z8ROzTFV_11serde_tuple12DeserializerQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEEECsfpTA0IcUOwH_11cbor_decode:
   12|    586|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtB3_7PayloadNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserializeQINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de12DeserializerNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEECsfpTA0IcUOwH_11cbor_decode:
   12|    953|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCsa5KSQNCWF8I_11common_fuzz4cborNtBd_7PayloadNtNtCsh3pHmw2rnsT_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsctzOknhqbL8_18serde_ipld_dagcbor2de8AccessorNtNtNtCseuCwczWVij_7cbor4ii4core5utils11SliceReaderEE0CsfpTA0IcUOwH_11cbor_decode:
   12|    463|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

