_RINvXsg_NtNtCsadRB8jH4Cfu_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  707|    254|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    254|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    254|    }
_RINvYNtNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
   73|    255|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    255|        let byte = pull_one(reader)?;
   75|    254|        Self::decode_with(byte, reader)
   76|    255|    }
_RINvMs0_NtNtCsadRB8jH4Cfu_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  227|  5.28k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  5.28k|        match self.byte & self.major_limit {
  229|  5.28k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|    946|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|    375|                let mut buf = [0; 2];
  233|    375|                pull_exact(reader, &mut buf)?;
  234|    366|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|    215|                let mut buf = [0; 4];
  238|    215|                pull_exact(reader, &mut buf)?;
  239|    205|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    343|                let mut buf = [0; 8];
  243|    343|                pull_exact(reader, &mut buf)?;
  244|    333|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|     50|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  5.28k|    }
_RINvXs5_NtNtCsadRB8jH4Cfu_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsgGlVtr8vkIt_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  510|  2.82k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  2.82k|        use crate::alloc::borrow::Cow;
  512|  2.82k|
  513|  2.82k|        let mut buf = Vec::new();
  514|  2.82k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  2.59k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|     90|            Cow::Owned(buf)
  518|       |        }))
  519|  2.82k|    }
_RINvNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  599|  9.19k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  9.19k|    -> Result<Option<usize>, Error<R::Error>>
  601|  9.19k|{
  602|  9.19k|    if byte != (marker::START | (major << 5)) {
  603|  4.60k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  4.53k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  4.53k|        Ok(Some(len))
  606|       |    } else {
  607|  4.58k|        Ok(None)
  608|       |    }
  609|  9.19k|}
_RINvXss_NtNtCsadRB8jH4Cfu_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  256|    432|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    432|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    432|                }
_RINvYyNtNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
   73|    438|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    438|        let byte = pull_one(reader)?;
   75|    432|        Self::decode_with(byte, reader)
   76|    438|    }
_RINvNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  431|  8.24k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  8.24k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  8.24k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  8.24k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  3.61k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  3.61k|            if buf.len() >= len {
  440|  3.56k|                reader.advance(len);
  441|  3.56k|                return Ok(Some(&buf[..len]));
  442|     54|            }
  443|      0|        }
  444|       |
  445|     54|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|     58|        while len != 0 {
  448|     58|            let readbuf = reader.fill(len)?;
  449|     58|            let readbuf = readbuf.as_ref();
  450|     58|
  451|     58|            if readbuf.is_empty() {
  452|     54|                return Err(Error::Eof);
  453|      4|            }
  454|      4|
  455|      4|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      4|
  457|      4|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      4|            reader.advance(readlen);
  459|      4|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|  5.78k|            let byte = pull_one(reader)?;
  467|       |
  468|  5.76k|            if byte == marker::BREAK {
  469|    343|                break
  470|  5.41k|            }
  471|  5.41k|
  472|  5.41k|            if !reader.step_in() {
  473|      1|                return Err(Error::DepthLimit);
  474|  5.41k|            }
  475|  5.41k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|  5.41k|            let reader = &mut *reader;
  477|       |
  478|  5.41k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|    966|                buf.extend_from_slice(longbuf);
  480|    966|            }
  481|       |        }
  482|       |
  483|    343|        Ok(None)
  484|       |    }
  485|  8.24k|}
_RINvYNtNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
   73|    950|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    950|        let byte = pull_one(reader)?;
   75|    945|        Self::decode_with(byte, reader)
   76|    950|    }
_RNvMNtNtCsadRB8jH4Cfu_7cbor4ii4core3decNtB2_9Reference6as_refCs8pwGhle9zPK_11cbor_decode:
   81|  12.2k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  12.2k|        match self {
   83|  12.2k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  12.2k|    }
_RNCINvNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0Cs8pwGhle9zPK_11cbor_decode:
  475|  5.41k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RNvNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec8if_majorCs8pwGhle9zPK_11cbor_decode:
  894|    244|pub fn if_major(byte: u8) -> u8 {
  895|    244|    byte >> 5
  896|    244|}
_RNvMs0_NtNtCsadRB8jH4Cfu_7cbor4ii4core3decNtB5_7TypeNum3newCs8pwGhle9zPK_11cbor_decode:
  179|  5.28k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  5.28k|        TypeNum { major_limit, byte }
  181|  5.28k|    }
_RINvYINtNtNtCsadRB8jH4Cfu_7cbor4ii4core5types5BytesINtNtCsgGlVtr8vkIt_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
   73|  2.88k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  2.88k|        let byte = pull_one(reader)?;
   75|  2.82k|        Self::decode_with(byte, reader)
   76|  2.88k|    }
_RINvNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  125|  11.2k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  11.2k|    let b = reader.fill(1)?
  127|  11.2k|        .as_ref()
  128|  11.2k|        .get(0)
  129|  11.2k|        .copied()
  130|  11.2k|        .ok_or(Error::Eof)?;
  131|  11.1k|    reader.advance(1);
  132|  11.1k|    Ok(b)
  133|  11.2k|}
_RINvXsc_NtNtCsadRB8jH4Cfu_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  615|    945|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|    945|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|    945|    }
_RINvNtNtCsadRB8jH4Cfu_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
  136|    933|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  1.85k|    while !buf.is_empty() {
  138|    949|        let readbuf = reader.fill(buf.len())?;
  139|    949|        let readbuf = readbuf.as_ref();
  140|    949|
  141|    949|        if readbuf.is_empty() {
  142|     29|            return Err(Error::Eof);
  143|    920|        }
  144|    920|
  145|    920|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    920|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    920|        reader.advance(len);
  148|    920|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    904|    Ok(())
  152|    933|}

_RINvXs7_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
  209|  1.35k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.35k|        writer.push(self.0)?;
  211|  1.35k|        Ok(())
  212|  1.35k|    }
_RINvXsu_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
  159|    198|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    198|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    198|                }
_RINvXs4_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
   98|  2.14k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  2.14k|        match u32::try_from(self.value) {
  100|  1.98k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    156|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    156|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  2.14k|        Ok(())
  107|  2.14k|    }
_RINvXs3_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
   84|  1.98k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  1.98k|        match u16::try_from(self.value) {
   86|  1.98k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      4|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      4|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  1.98k|        Ok(())
   93|  1.98k|    }
_RNvMs0_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB5_7TypeNumtE3newCs8pwGhle9zPK_11cbor_decode:
   52|  1.98k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.98k|        TypeNum { type_, value }
   54|  1.98k|    }
_RNvMs0_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB5_7TypeNumyE3newCs8pwGhle9zPK_11cbor_decode:
   52|  2.14k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.14k|        TypeNum { type_, value }
   54|  2.14k|    }
_RNvMs0_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB5_7TypeNummE3newCs8pwGhle9zPK_11cbor_decode:
   52|  1.98k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.98k|        TypeNum { type_, value }
   54|  1.98k|    }
_RNvMs0_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB5_7TypeNumhE3newCs8pwGhle9zPK_11cbor_decode:
   52|  1.83k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.83k|        TypeNum { type_, value }
   54|  1.83k|    }
_RINvXs2_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
   70|  1.98k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  1.98k|        match u8::try_from(self.value) {
   72|  1.83k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    150|                let [x0, x1] = self.value.to_be_bytes();
   75|    150|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  1.98k|        Ok(())
   79|  1.98k|    }
_RINvXsi_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
  317|    198|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    198|        self.1.encode(writer)
  319|    198|    }
_RINvXs1_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
   59|  1.83k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  1.83k|        match self.value {
   61|  1.83k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    654|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  1.83k|        Ok(())
   65|  1.83k|    }
_RINvXsd_NtNtCsadRB8jH4Cfu_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs8pwGhle9zPK_11cbor_decode:
  270|    396|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    396|        Ok(())
  272|    396|    }

_RNvXs1_NtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCs8pwGhle9zPK_11cbor_decode:
   62|  16.6k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  16.6k|        let len = core::cmp::min(self.buf.len(), want);
   64|  16.6k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  16.6k|    }
_RNvXs_NtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCs8pwGhle9zPK_11cbor_decode:
   40|  3.49k|        self.0.try_reserve(input.len())?;
   41|  3.49k|        self.0.extend_from_slice(input);
   42|  3.49k|        Ok(())
   43|  3.49k|    }
_RNvXs1_NtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCs8pwGhle9zPK_11cbor_decode:
   84|  6.36k|    fn step_out(&mut self) {
   85|  6.36k|        self.limit += 1;
   86|  6.36k|    }
_RNvXs1_NtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCs8pwGhle9zPK_11cbor_decode:
   75|  6.36k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  6.36k|            self.limit = limit;
   77|  6.36k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  6.36k|    }
_RNvXs1_NtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCs8pwGhle9zPK_11cbor_decode:
   68|  15.6k|    fn advance(&mut self, n: usize) {
   69|  15.6k|        let len = core::cmp::min(self.buf.len(), n);
   70|  15.6k|        self.buf = &self.buf[len..];
   71|  15.6k|    }
_RNvMNtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    198|    pub fn new(buf: Vec<u8>) -> Self {
   15|    198|       BufWriter(buf)
   16|    198|    }
_RNvMs0_NtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    559|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    559|        SliceReader { buf, limit: 256 }
   55|    559|    }
_RNvMNtNtCsadRB8jH4Cfu_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    198|    pub fn into_inner(self) -> Vec<u8> {
   25|    198|        self.0
   26|    198|    }

_RNvMs1_NtCsadRB8jH4Cfu_7cbor4ii5errorINtB5_11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleE8mismatchCs8pwGhle9zPK_11cbor_decode:
   93|     50|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     50|        DecodeError::Mismatch {
   95|     50|            expect_major: (!major_limit) >> 5,
   96|     50|            byte
   97|     50|        }
   98|     50|    }

_RNvXs_NtCsadRB8jH4Cfu_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCsewp07EQjaMZ_4core3ops5deref8DerefMut9deref_mutCs8pwGhle9zPK_11cbor_decode:
   17|  5.41k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  5.41k|        self.0
   19|  5.41k|    }
_RNvXs0_NtCsadRB8jH4Cfu_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCsewp07EQjaMZ_4core3ops4drop4Drop4dropCs8pwGhle9zPK_11cbor_decode:
   24|  5.41k|    fn drop(&mut self) {
   25|  5.41k|        (self.1)(self.0);
   26|  5.41k|    }

_RNvMNtCs243SzT5MOo5_3cid3cidINtB2_3CidKj40_E6new_v1Cs8pwGhle9zPK_11cbor_decode:
   90|    185|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    185|        Self {
   92|    185|            version: Version::V1,
   93|    185|            codec,
   94|    185|            hash,
   95|    185|        }
   96|    185|    }
_RINvMNtCs243SzT5MOo5_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs8pwGhle9zPK_11cbor_decode:
  176|    198|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  177|    198|        match self.version {
  178|     18|            Version::V0 => self.hash.write(w)?,
  179|    180|            Version::V1 => self.write_bytes_v1(w)?,
  180|       |        }
  181|    198|        Ok(())
  182|    198|    }
_RNvXs6_NtCs243SzT5MOo5_3cid3cidINtB5_3CidKj40_EINtNtCsewp07EQjaMZ_4core7convert7TryFromRShE8try_fromCs8pwGhle9zPK_11cbor_decode:
  333|    236|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  334|    236|        Self::read_bytes(&mut bytes)
  335|    236|    }
_RNvMNtCs243SzT5MOo5_3cid3cidINtB2_3CidKj40_E8to_bytesCs8pwGhle9zPK_11cbor_decode:
  186|    198|    pub fn to_bytes(&self) -> Vec<u8> {
  187|    198|        let mut bytes = Vec::new();
  188|    198|        self.write_bytes(&mut bytes).unwrap();
  189|    198|        bytes
  190|    198|    }
_RNvMNtCs243SzT5MOo5_3cid3cidINtB2_3CidKj40_E3newCs8pwGhle9zPK_11cbor_decode:
   99|    185|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    185|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    185|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    185|    }
_RINvMNtCs243SzT5MOo5_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECs8pwGhle9zPK_11cbor_decode:
  140|    236|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    236|        let version = varint_read_u64(&mut r)?;
  142|    235|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    231|        if [version, codec] == [0x12, 0x20] {
  146|     20|            let mut digest = [0u8; 32];
  147|     20|            r.read_exact(&mut digest)?;
  148|     19|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|     19|            return Self::new_v0(mh);
  150|    211|        }
  151|       |
  152|    211|        let version = Version::try_from(version)?;
  153|    209|        match version {
  154|      2|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    207|                let mh = Multihash::read(r)?;
  157|    185|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    236|    }
_RNvMNtCs243SzT5MOo5_3cid3cidINtB2_3CidKj40_E6new_v0Cs8pwGhle9zPK_11cbor_decode:
   78|     19|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     19|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     19|        }
   82|     19|        Ok(Self {
   83|     19|            version: Version::V0,
   84|     19|            codec: DAG_PB,
   85|     19|            hash,
   86|     19|        })
   87|     19|    }
_RINvMNtCs243SzT5MOo5_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs8pwGhle9zPK_11cbor_decode:
  162|    180|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  163|    180|        let mut version_buf = varint_encode::u64_buffer();
  164|    180|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    180|
  166|    180|        let mut codec_buf = varint_encode::u64_buffer();
  167|    180|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    180|
  169|    180|        w.write_all(version)?;
  170|    180|        w.write_all(codec)?;
  171|    180|        self.hash.write(&mut w)?;
  172|    180|        Ok(())
  173|    180|    }

_RNvXs_NtCs243SzT5MOo5_3cid5errorNtB4_5ErrorNtNtCsewp07EQjaMZ_4core3fmt7Display3fmt:
   41|     32|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|       |        use self::Error::*;
   43|     32|        let error = match self {
   44|      0|            UnknownCodec => "Unknown codec",
   45|      0|            InputTooShort => "Input too short",
   46|     22|            ParsingError => "Failed to parse multihash",
   47|      2|            InvalidCidVersion => "Unrecognized CID version",
   48|      0|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   49|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   50|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   51|      4|            VarIntDecodeError => "Failed to decode unsigned varint format",
   52|      2|            Io(err) => return write!(f, "{}", err),
   53|      2|            InvalidExplicitCidV0 => "CIDv0 cannot be specified in CIDv1 format",
   54|       |        };
   55|       |
   56|     30|        f.write_str(error)
   57|     32|    }
_RNvXs4_NtCs243SzT5MOo5_3cid5errorNtB5_5ErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtNtCs41l67bscAfL_3std2io5error5ErrorE4from:
   91|      1|    fn from(err: io::Error) -> Self {
   92|      1|        Self::Io(err)
   93|      1|    }
_RNvXs1_NtCs243SzT5MOo5_3cid5errorNtB5_5ErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtCs8vjweDwK8zb_9multihash5error5ErrorE4from:
   68|     22|    fn from(_: multihash::Error) -> Error {
   69|     22|        Error::ParsingError
   70|     22|    }
_RNvXs3_NtCs243SzT5MOo5_3cid5errorNtB5_5ErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtCs3K7eiokevIC_15unsigned_varint2io9ReadErrorE4from:
   81|      5|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   82|      5|        use unsigned_varint::io::ReadError::*;
   83|      5|        match err {
   84|      1|            Io(err) => Self::Io(err),
   85|      4|            _ => Self::VarIntDecodeError,
   86|       |        }
   87|      5|    }

_RINvXNtCs243SzT5MOo5_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs8unybNTJIdL_5serde3ser9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   29|    198|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    198|    where
   31|    198|        S: ser::Serializer,
   32|    198|    {
   33|    198|        let value = ByteBuf::from(self.to_bytes());
   34|    198|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    198|    }
_RNCINvXs_NtCs243SzT5MOo5_3cid5serdeNtB7_17BytesToCidVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor11visit_bytesINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEE0Cs8pwGhle9zPK_11cbor_decode:
   53|     32|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
_RINvXNvXs0_NtCs243SzT5MOo5_3cid5serdeINtNtBb_3cid3CidKpENtNtCs8unybNTJIdL_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   97|    245|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    245|            where
   99|    245|                D: de::Deserializer<'de>,
  100|    245|            {
  101|    245|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    245|            }
_RINvXs0_NtCs243SzT5MOo5_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs8unybNTJIdL_5serde2de11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   79|    255|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    255|    where
   81|    255|        D: de::Deserializer<'de>,
   82|    255|    {
   83|    255|        /// Main visitor to deserialize a CID.
   84|    255|        ///
   85|    255|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    255|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    255|        /// to bytes.
   88|    255|        struct MainEntryVisitor<const SIZE: usize>;
   89|    255|
   90|    255|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    255|            type Value = CidGeneric<SIZE>;
   92|    255|
   93|    255|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    255|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    255|            }
   96|    255|
   97|    255|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    255|            where
   99|    255|                D: de::Deserializer<'de>,
  100|    255|            {
  101|    255|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    255|            }
  103|    255|        }
  104|    255|
  105|    255|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    255|    }
_RINvXs_NtCs243SzT5MOo5_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor11visit_bytesINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
   48|    236|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    236|    where
   50|    236|        E: de::Error,
   51|    236|    {
   52|    236|        CidGeneric::<SIZE>::try_from(value)
   53|    236|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    236|    }

_RNvXs0_NtCs243SzT5MOo5_3cid7versionyINtNtCsewp07EQjaMZ_4core7convert4FromNtB5_7VersionE4from:
   44|    180|    fn from(ver: Version) -> u64 {
   45|    180|        match ver {
   46|      0|            Version::V0 => 0,
   47|    180|            Version::V1 => 1,
   48|       |        }
   49|    180|    }
_RNvXs_NtCs243SzT5MOo5_3cid7versionNtB4_7VersionINtNtCsewp07EQjaMZ_4core7convert7TryFromyE8try_from:
   34|    211|    fn try_from(raw: u64) -> Result<Self> {
   35|    211|        match raw {
   36|      2|            0 => Ok(Self::V0),
   37|    207|            1 => Ok(Self::V1),
   38|      2|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    211|    }

_RNvNvCs8pwGhle9zPK_11cbor_decode1__19___libfuzzer_sys_run:
  241|     99|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|     99|                $body
  243|    460|            }
rust_fuzzer_test_input:
  215|    460|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    460|                }
  223|    460|
  224|    460|                __libfuzzer_sys_run(bytes);
  225|    460|                0
  226|    460|            }
LLVMFuzzerTestOneInput:
   58|    460|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    460|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    460|    });
   63|    460|
   64|    460|    match test_input {
   65|    460|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    460|}
_RNCNvCsg2dOsqTdQ67_13libfuzzer_sys15test_input_wrap0B3_:
   59|    460|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    460|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    460|        rust_fuzzer_test_input(data_slice)
   62|    460|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs0_NtCs8vjweDwK8zb_9multihash5errorNtB5_5ErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtNtCs41l67bscAfL_3std2io5error5ErrorE4from:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }
_RNvXs1_NtCs8vjweDwK8zb_9multihash5errorNtB5_5ErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtCs3K7eiokevIC_15unsigned_varint2io9ReadErrorE4from:
   44|     14|    fn from(err: ReadError) -> Self {
   45|     14|        match err {
   46|     11|            ReadError::Io(err) => Self::Io(err),
   47|      3|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     14|    }

_RNvMs_NtCs8vjweDwK8zb_9multihash9multihashINtB4_9MultihashKj40_E6digestCs8pwGhle9zPK_11cbor_decode:
  130|    198|    pub fn digest(&self) -> &[u8] {
  131|    198|        &self.digest[..self.size as usize]
  132|    198|    }
_RINvMs_NtCs8vjweDwK8zb_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECs8pwGhle9zPK_11cbor_decode:
  135|    207|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    207|    where
  137|    207|        Self: Sized,
  138|    207|    {
  139|    207|        let (code, size, digest) = read_multihash(r)?;
  140|    185|        Ok(Self { code, size, digest })
  141|    207|    }
_RINvMs_NtCs8vjweDwK8zb_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs8pwGhle9zPK_11cbor_decode:
  163|     18|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     18|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     18|    }
_RNvMs_NtCs8vjweDwK8zb_9multihash9multihashINtB4_9MultihashKj40_E4codeCs8pwGhle9zPK_11cbor_decode:
  120|    217|    pub const fn code(&self) -> u64 {
  121|    217|        self.code
  122|    217|    }
_RINvNtCs8vjweDwK8zb_9multihash9multihash14read_multihashQRShKj40_ECs8pwGhle9zPK_11cbor_decode:
  318|    207|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  319|    207|where
  320|    207|    R: io::Read,
  321|    207|{
  322|    207|    let code = read_u64(&mut r)?;
  323|    203|    let size = read_u64(&mut r)?;
  324|       |
  325|    193|    if size > S as u64 || size > u8::MAX as u64 {
  326|      7|        return Err(Error::InvalidSize(size));
  327|    186|    }
  328|    186|
  329|    186|    let mut digest = [0; S];
  330|    186|    r.read_exact(&mut digest[..size as usize])?;
  331|    185|    Ok((code, size as u8, digest))
  332|    207|}
_RINvNtCs8vjweDwK8zb_9multihash9multihash15write_multihashQINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs8pwGhle9zPK_11cbor_decode:
  296|     18|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  297|     18|where
  298|     18|    W: io::Write,
  299|     18|{
  300|     18|    let mut code_buf = varint_encode::u64_buffer();
  301|     18|    let code = varint_encode::u64(code, &mut code_buf);
  302|     18|
  303|     18|    let mut size_buf = varint_encode::u8_buffer();
  304|     18|    let size = varint_encode::u8(size, &mut size_buf);
  305|     18|
  306|     18|    w.write_all(code)?;
  307|     18|    w.write_all(size)?;
  308|     18|    w.write_all(digest)?;
  309|     18|    Ok(())
  310|     18|}
_RNvMs_NtCs8vjweDwK8zb_9multihash9multihashINtB4_9MultihashKj40_E4sizeCs8pwGhle9zPK_11cbor_decode:
  125|    198|    pub const fn size(&self) -> u8 {
  126|    198|        self.size
  127|    198|    }
_RNvMs_NtCs8vjweDwK8zb_9multihash9multihashINtB4_9MultihashKj40_E4wrapCs8pwGhle9zPK_11cbor_decode:
  101|     19|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     19|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     19|        }
  105|     19|        let size = input_digest.len();
  106|     19|        let mut digest = [0; S];
  107|     19|        let mut i = 0;
  108|    627|        while i < size {
  109|    608|            digest[i] = input_digest[i];
  110|    608|            i += 1;
  111|    608|        }
  112|     19|        Ok(Self {
  113|     19|            code,
  114|     19|            size: size as u8,
  115|     19|            digest,
  116|     19|        })
  117|     19|    }
_RINvNtCs8vjweDwK8zb_9multihash9multihash15write_multihashQQINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs8pwGhle9zPK_11cbor_decode:
  296|    180|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  297|    180|where
  298|    180|    W: io::Write,
  299|    180|{
  300|    180|    let mut code_buf = varint_encode::u64_buffer();
  301|    180|    let code = varint_encode::u64(code, &mut code_buf);
  302|    180|
  303|    180|    let mut size_buf = varint_encode::u8_buffer();
  304|    180|    let size = varint_encode::u8(size, &mut size_buf);
  305|    180|
  306|    180|    w.write_all(code)?;
  307|    180|    w.write_all(size)?;
  308|    180|    w.write_all(digest)?;
  309|    180|    Ok(())
  310|    180|}
_RINvMs_NtCs8vjweDwK8zb_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs8pwGhle9zPK_11cbor_decode:
  163|    180|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    180|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    180|    }

_RNvYNtNtNtCs52j84AUb23Y_10fvm_shared7address8protocol8ProtocolNtNtCsbovZiiNTyfw_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  1.44k|    fn from_u8(n: u8) -> Option<Self> {
  468|  1.44k|        FromPrimitive::from_u64(From::from(n))
  469|  1.44k|    }

_RNvMs2_NtCs5ipnfD7JkbQ_9once_cell3impINtB5_8OnceCellNtNtCsgGlVtr8vkIt_5alloc6string6StringE14is_initializedCs8pwGhle9zPK_11cbor_decode:
   49|    460|    pub(crate) fn is_initialized(&self) -> bool {
   50|    460|        // An `Acquire` load is enough because that makes all the initialization
   51|    460|        // operations visible to us, and, this being a fast path, weaker
   52|    460|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    460|        // `SeqCst` operations on the slow path.
   54|    460|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    460|    }

_RNvMs4_NtCs5ipnfD7JkbQ_9once_cell4syncINtB5_8OnceCellNtNtCsgGlVtr8vkIt_5alloc6string6StringE3getCs8pwGhle9zPK_11cbor_decode:
  965|    460|        pub fn get(&self) -> Option<&T> {
  966|    460|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    460|                None
  971|       |            }
  972|    460|        }

_RNvXs4_Csc6iYwFNDbiO_10scopeguardINtB5_10ScopeGuardQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsewp07EQjaMZ_4core3ops5deref8DerefMut9deref_mutCs8pwGhle9zPK_11cbor_decode:
  443|    950|    fn deref_mut(&mut self) -> &mut T {
  444|    950|        &mut *self.value
  445|    950|    }
_RINvCsc6iYwFNDbiO_10scopeguard5guardQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEFBy_EuECs8pwGhle9zPK_11cbor_decode:
  367|    950|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    950|    where F: FnOnce(T)
  369|    950|{
  370|    950|    ScopeGuard::with_strategy(v, dropfn)
  371|    950|}
_RNvXCsc6iYwFNDbiO_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    950|    fn should_run() -> bool { true }
_RNvXs5_Csc6iYwFNDbiO_10scopeguardINtB5_10ScopeGuardQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsewp07EQjaMZ_4core3ops4drop4Drop4dropCs8pwGhle9zPK_11cbor_decode:
  452|    950|    fn drop(&mut self) {
  453|    950|        // This is OK because the fields are `ManuallyDrop`s
  454|    950|        // which will not be dropped by the compiler.
  455|    950|        let (value, dropfn) = unsafe {
  456|    950|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    950|        };
  458|    950|        if S::should_run() {
  459|    950|            dropfn(value);
  460|    950|        }
  461|    950|    }
_RNvMs1_Csc6iYwFNDbiO_10scopeguardINtB5_10ScopeGuardQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCs8pwGhle9zPK_11cbor_decode:
  317|    950|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    950|        ScopeGuard {
  319|    950|            value: ManuallyDrop::new(v),
  320|    950|            dropfn: ManuallyDrop::new(dropfn),
  321|    950|            strategy: PhantomData,
  322|    950|        }
  323|    950|    }

_RINvXsV_NtNtCs8unybNTJIdL_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  113|    438|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    438|            where
  115|    438|                D: Deserializer<'de>,
  116|    438|            {
  117|    438|                struct PrimitiveVisitor;
  118|    438|
  119|    438|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    438|                    type Value = $primitive;
  121|    438|
  122|    438|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    438|                        formatter.write_str(stringify!($primitive))
  124|    438|                    }
  125|    438|
  126|    438|                    $($($method!($val : $visit);)*)*
  127|    438|                }
  128|    438|
  129|    438|                deserializer.$deserialize(PrimitiveVisitor)
  130|    438|            }
_RINvXNvXsh_NtNtCs8unybNTJIdL_5serde2de5implsINtNtCsgGlVtr8vkIt_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs52j84AUb23Y_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
 1035|    379|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    379|            where
 1037|    379|                A: SeqAccess<'de>,
 1038|    379|            {
 1039|    379|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1040|       |
 1041|  1.40k|                while let Some(value) = try!(seq.next_element()) {
 1042|  1.02k|                    values.push(value);
 1043|  1.02k|                }
 1044|       |
 1045|    306|                Ok(values)
 1046|    379|            }
_RINvXsh_NtNtCs8unybNTJIdL_5serde2de5implsINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
 1017|    391|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1018|    391|    where
 1019|    391|        D: Deserializer<'de>,
 1020|    391|    {
 1021|    391|        struct VecVisitor<T> {
 1022|    391|            marker: PhantomData<T>,
 1023|    391|        }
 1024|    391|
 1025|    391|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1026|    391|        where
 1027|    391|            T: Deserialize<'de>,
 1028|    391|        {
 1029|    391|            type Value = Vec<T>;
 1030|    391|
 1031|    391|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1032|    391|                formatter.write_str("a sequence")
 1033|    391|            }
 1034|    391|
 1035|    391|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    391|            where
 1037|    391|                A: SeqAccess<'de>,
 1038|    391|            {
 1039|    391|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1040|    391|
 1041|    391|                while let Some(value) = try!(seq.next_element()) {
 1042|    391|                    values.push(value);
 1043|    391|                }
 1044|    391|
 1045|    391|                Ok(values)
 1046|    391|            }
 1047|    391|        }
 1048|    391|
 1049|    391|        let visitor = VecVisitor {
 1050|    391|            marker: PhantomData,
 1051|    391|        };
 1052|    391|        deserializer.deserialize_seq(visitor)
 1053|    391|    }
_RINvXNvXsV_NtNtCs8unybNTJIdL_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
  138|    425|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    425|        where
  140|    425|            E: Error,
  141|    425|        {
  142|    425|            Ok(v)
  143|    425|        }

_RINvYINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECs8pwGhle9zPK_11cbor_decode:
 1727|    546|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    546|    where
 1729|    546|        T: Deserialize<'de>,
 1730|    546|    {
 1731|    546|        self.next_element_seed(PhantomData)
 1732|    546|    }
_RINvXs3_NtCs8unybNTJIdL_5serde2deINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtNtCs52j84AUb23Y_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  787|  1.52k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|  1.52k|    where
  789|  1.52k|        D: Deserializer<'de>,
  790|  1.52k|    {
  791|  1.52k|        T::deserialize(deserializer)
  792|  1.52k|    }
_RINvYNtNvXs_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor20visit_borrowed_bytesINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
 1567|    685|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1568|    685|    where
 1569|    685|        E: Error,
 1570|    685|    {
 1571|    685|        self.visit_bytes(v)
 1572|    685|    }
_RINvYINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess12next_elementINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEECs8pwGhle9zPK_11cbor_decode:
 1727|    391|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    391|    where
 1729|    391|        T: Deserialize<'de>,
 1730|    391|    {
 1731|    391|        self.next_element_seed(PhantomData)
 1732|    391|    }
_RINvYINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess12next_elementNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECs8pwGhle9zPK_11cbor_decode:
 1727|    268|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    268|    where
 1729|    268|        T: Deserialize<'de>,
 1730|    268|    {
 1731|    268|        self.next_element_seed(PhantomData)
 1732|    268|    }
_RINvYINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess12next_elementyECs8pwGhle9zPK_11cbor_decode:
 1727|    438|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    438|    where
 1729|    438|        T: Deserialize<'de>,
 1730|    438|    {
 1731|    438|        self.next_element_seed(PhantomData)
 1732|    438|    }
_RINvXs3_NtCs8unybNTJIdL_5serde2deINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtCs9VIxVmynZwi_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  787|    306|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    306|    where
  789|    306|        D: Deserializer<'de>,
  790|    306|    {
  791|    306|        T::deserialize(deserializer)
  792|    306|    }
_RINvYNtNtCs243SzT5MOo5_3cid5serde17BytesToCidVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor14visit_byte_bufINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
 1591|      2|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1592|      2|    where
 1593|      2|        E: Error,
 1594|      2|    {
 1595|      2|        self.visit_bytes(&v)
 1596|      2|    }
_RINvXs3_NtCs8unybNTJIdL_5serde2deINtNtCsewp07EQjaMZ_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  787|    438|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    438|    where
  789|    438|        D: Deserializer<'de>,
  790|    438|    {
  791|    438|        T::deserialize(deserializer)
  792|    438|    }
_RINvYNtNtCs243SzT5MOo5_3cid5serde17BytesToCidVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor20visit_borrowed_bytesINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
 1567|    234|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1568|    234|    where
 1569|    234|        E: Error,
 1570|    234|    {
 1571|    234|        self.visit_bytes(v)
 1572|    234|    }
_RINvXs3_NtCs8unybNTJIdL_5serde2deINtNtCsewp07EQjaMZ_4core6marker11PhantomDataINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  787|    391|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    391|    where
  789|    391|        D: Deserializer<'de>,
  790|    391|    {
  791|    391|        T::deserialize(deserializer)
  792|    391|    }
_RINvXs3_NtCs8unybNTJIdL_5serde2deINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  787|    546|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    546|    where
  789|    546|        D: Deserializer<'de>,
  790|    546|    {
  791|    546|        T::deserialize(deserializer)
  792|    546|    }
_RINvYINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess12next_elementINtNtCs243SzT5MOo5_3cid3cid3CidKj40_EECs8pwGhle9zPK_11cbor_decode:
 1727|    255|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    255|    where
 1729|    255|        T: Deserialize<'de>,
 1730|    255|    {
 1731|    255|        self.next_element_seed(PhantomData)
 1732|    255|    }
_RINvYINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess12next_elementNtCs9VIxVmynZwi_17fvm_ipld_bitfield8BitFieldECs8pwGhle9zPK_11cbor_decode:
 1727|    306|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    306|    where
 1729|    306|        T: Deserialize<'de>,
 1730|    306|    {
 1731|    306|        self.next_element_seed(PhantomData)
 1732|    306|    }
_RINvXs3_NtCs8unybNTJIdL_5serde2deINtNtCsewp07EQjaMZ_4core6marker11PhantomDataINtNtCs243SzT5MOo5_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  787|    255|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    255|    where
  789|    255|        D: Deserializer<'de>,
  790|    255|    {
  791|    255|        T::deserialize(deserializer)
  792|    255|    }
_RINvYINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess12next_elementNtNtCs52j84AUb23Y_10fvm_shared7address7AddressECs8pwGhle9zPK_11cbor_decode:
 1727|  1.83k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|  1.83k|    where
 1729|  1.83k|        T: Deserialize<'de>,
 1730|  1.83k|    {
 1731|  1.83k|        self.next_element_seed(PhantomData)
 1732|  1.83k|    }
_RINvXs3_NtCs8unybNTJIdL_5serde2deINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  787|    268|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    268|    where
  789|    268|        D: Deserializer<'de>,
  790|    268|    {
  791|    268|        T::deserialize(deserializer)
  792|    268|    }

_RNvNtNtCs8unybNTJIdL_5serde9___private9size_hint8cautiousCs8pwGhle9zPK_11cbor_decode:
   12|    379|pub fn cautious(hint: Option<usize>) -> usize {
   13|    379|    cmp::min(hint.unwrap_or(0), 4096)
   14|    379|}

_RINvXs1E_NtNtCs8unybNTJIdL_5serde3ser5implsRINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  423|    198|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    198|            where
  425|    198|                S: Serializer,
  426|    198|            {
  427|    198|                (**self).serialize(serializer)
  428|    198|            }
_RINvXs1E_NtNtCs8unybNTJIdL_5serde3ser5implsRNtCs9VIxVmynZwi_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  423|    198|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    198|            where
  425|    198|                S: Serializer,
  426|    198|            {
  427|    198|                (**self).serialize(serializer)
  428|    198|            }
_RINvXs1k_NtNtCs8unybNTJIdL_5serde3ser5implsINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  193|    198|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  194|    198|            where
  195|    198|                S: Serializer,
  196|    198|            {
  197|    198|                serializer.collect_seq(self)
  198|    198|            }
_RINvXs1E_NtNtCs8unybNTJIdL_5serde3ser5implsRNtNtCs52j84AUb23Y_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  423|    558|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    558|            where
  425|    558|                S: Serializer,
  426|    558|            {
  427|    558|                (**self).serialize(serializer)
  428|    558|            }
_RINvXs1E_NtNtCs8unybNTJIdL_5serde3ser5implsRINtNtCs243SzT5MOo5_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  423|    198|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    198|            where
  425|    198|                S: Serializer,
  426|    198|            {
  427|    198|                (**self).serialize(serializer)
  428|    198|            }
_RINvXsE_NtNtCs8unybNTJIdL_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   11|    198|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    198|            where
   13|    198|                S: Serializer,
   14|    198|            {
   15|    198|                serializer.$method(*self $($cast)*)
   16|    198|            }
_RINvXs1E_NtNtCs8unybNTJIdL_5serde3ser5implsRNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  423|    198|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    198|            where
  425|    198|                S: Serializer,
  426|    198|            {
  427|    198|                (**self).serialize(serializer)
  428|    198|            }
_RINvXs1E_NtNtCs8unybNTJIdL_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  423|    198|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    198|            where
  425|    198|                S: Serializer,
  426|    198|            {
  427|    198|                (**self).serialize(serializer)
  428|    198|            }

_RINvNtCs8unybNTJIdL_5serde3ser17iterator_len_hintINtNtNtCsewp07EQjaMZ_4core5slice4iter4IterNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEECs8pwGhle9zPK_11cbor_decode:
 1984|    198|    match iter.size_hint() {
 1985|    198|        (lo, Some(hi)) if lo == hi => Some(lo),
 1986|      0|        _ => None,
 1987|       |    }
 1988|    198|}
_RINvYQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer11collect_seqRINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEECs8pwGhle9zPK_11cbor_decode:
 1277|    198|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1278|    198|    where
 1279|    198|        I: IntoIterator,
 1280|    198|        <I as IntoIterator>::Item: Serialize,
 1281|    198|    {
 1282|    198|        let iter = iter.into_iter();
 1283|    198|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1284|       |
 1285|       |        #[cfg(not(no_iterator_try_fold))]
 1286|       |        {
 1287|    198|            let mut iter = iter;
 1288|    198|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1289|       |        }
 1290|       |
 1291|       |        #[cfg(no_iterator_try_fold)]
 1292|       |        {
 1293|       |            for item in iter {
 1294|       |                try!(serializer.serialize_element(&item));
 1295|       |            }
 1296|       |        }
 1297|       |
 1298|    198|        serializer.end()
 1299|    198|    }
_RNCINvYQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer11collect_seqRINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEE0Cs8pwGhle9zPK_11cbor_decode:
 1288|    360|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvMNtCsaQpCZ3ALgPx_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsgGlVtr8vkIt_5alloc3vec3VechEECs8pwGhle9zPK_11cbor_decode:
   60|    198|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    198|        ByteBuf {
   62|    198|            bytes: bytes.into(),
   63|    198|        }
   64|    198|    }
_RINvXsc_NtCsaQpCZ3ALgPx_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs8unybNTJIdL_5serde3ser9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  186|    198|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    198|    where
  188|    198|        S: Serializer,
  189|    198|    {
  190|    198|        serializer.serialize_bytes(&self.bytes)
  191|    198|    }

_RINvNtCs92H5M7BUMUn_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderECs8pwGhle9zPK_11cbor_decode:
   26|    736|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    736|    let buf = match reader.fill(1)? {
   28|    736|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    736|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    532|    Ok(byte)
   33|    736|}

_RINvNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de10from_sliceNtNtCs3xktYLmzold_11common_fuzz4cbor7PayloadECs8pwGhle9zPK_11cbor_decode:
   40|    559|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    559|where
   42|    559|    T: de::Deserialize<'a>,
   43|    559|{
   44|    559|    let reader = SliceReader::new(buf);
   45|    559|    let mut deserializer = Deserializer::from_reader(reader);
   46|    559|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    204|    deserializer.end()?;
   48|    198|    Ok(value)
   49|    559|}
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess17next_element_seedINtNtCsewp07EQjaMZ_4core6marker11PhantomDataINtNtCs243SzT5MOo5_3cid3cid3CidKj40_EEECs8pwGhle9zPK_11cbor_decode:
  484|    255|        if let Some(len) = self.len.as_mut() {
  485|    255|            if *len > 0 {
  486|    255|                *len -= 1;
  487|    255|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    255|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsgGlVtr8vkIt_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEECs8pwGhle9zPK_11cbor_decode:
  334|    391|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    391|    where
  336|    391|        V: Visitor<'de>,
  337|    391|    {
  338|    391|        let mut de = self.try_step()?;
  339|    391|        let seq = Accessor::array(&mut de)?;
  340|    379|        visitor.visit_seq(seq)
  341|    391|    }
_RNCNvMs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderE8try_step0Cs8pwGhle9zPK_11cbor_decode:
  106|    950|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvMs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs243SzT5MOo5_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs8unybNTJIdL_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECs8pwGhle9zPK_11cbor_decode:
  113|    255|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    255|    where
  115|    255|        V: Visitor<'de>,
  116|    255|    {
  117|    255|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    249|        match tag.0 {
  120|    245|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      4|            _ => Err(DecodeError::TypeMismatch {
  122|      4|                name: "CBOR tag",
  123|      4|                byte: tag.0 as u8,
  124|      4|            }),
  125|       |        }
  126|    255|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess17next_element_seedINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtCs9VIxVmynZwi_17fvm_ipld_bitfield8BitFieldEECs8pwGhle9zPK_11cbor_decode:
  484|    306|        if let Some(len) = self.len.as_mut() {
  485|    306|            if *len > 0 {
  486|    306|                *len -= 1;
  487|    306|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    306|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess17next_element_seedINtNtCsewp07EQjaMZ_4core6marker11PhantomDatayEECs8pwGhle9zPK_11cbor_decode:
  484|    438|        if let Some(len) = self.len.as_mut() {
  485|    438|            if *len > 0 {
  486|    438|                *len -= 1;
  487|    438|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    438|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs243SzT5MOo5_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECs8pwGhle9zPK_11cbor_decode:
  318|    255|    fn deserialize_newtype_struct<V>(
  319|    255|        self,
  320|    255|        name: &'static str,
  321|    255|        visitor: V,
  322|    255|    ) -> Result<V::Value, Self::Error>
  323|    255|    where
  324|    255|        V: Visitor<'de>,
  325|    255|    {
  326|    255|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    255|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    255|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess17next_element_seedINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECs8pwGhle9zPK_11cbor_decode:
  484|    268|        if let Some(len) = self.len.as_mut() {
  485|    268|            if *len > 0 {
  486|    268|                *len -= 1;
  487|    268|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    268|    }
_RNvMs1_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderE5arrayCs8pwGhle9zPK_11cbor_decode:
  434|    391|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    391|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    379|        Ok(Accessor {
  437|    379|            de,
  438|    379|            len: array_start.0,
  439|    379|        })
  440|    391|    }
_RNvMs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderE8try_stepCs8pwGhle9zPK_11cbor_decode:
  101|    950|    fn try_step<'a>(
  102|    950|        &'a mut self,
  103|    950|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    950|    {
  105|    950|        if self.reader.step_in() {
  106|    950|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    950|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess17next_element_seedINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEECs8pwGhle9zPK_11cbor_decode:
  484|  1.83k|        if let Some(len) = self.len.as_mut() {
  485|  1.54k|            if *len > 0 {
  486|  1.24k|                *len -= 1;
  487|  1.24k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    305|                Ok(None)
  490|       |            }
  491|    287|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|    281|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      1|            self.de.reader.advance(1);
  495|      1|            Ok(None)
  496|       |        }
  497|  1.83k|    }
_RNvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess9size_hintCs8pwGhle9zPK_11cbor_decode:
  500|    379|    fn size_hint(&self) -> Option<usize> {
  501|    379|        self.len
  502|    379|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECs8pwGhle9zPK_11cbor_decode:
  228|  1.82k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  1.82k|    where
  230|  1.82k|        V: Visitor<'de>,
  231|  1.82k|    {
  232|  1.82k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  1.67k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     78|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  1.82k|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECs8pwGhle9zPK_11cbor_decode:
  228|    814|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    814|    where
  230|    814|        V: Visitor<'de>,
  231|    814|    {
  232|    814|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    685|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      8|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    814|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECs8pwGhle9zPK_11cbor_decode:
  239|    814|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    814|    where
  241|    814|        V: Visitor<'de>,
  242|    814|    {
  243|    814|        self.deserialize_bytes(visitor)
  244|    814|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess17next_element_seedINtNtCsewp07EQjaMZ_4core6marker11PhantomDataINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEEECs8pwGhle9zPK_11cbor_decode:
  484|    391|        if let Some(len) = self.len.as_mut() {
  485|    391|            if *len > 0 {
  486|    391|                *len -= 1;
  487|    391|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    391|    }
_RNvMNtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderE11from_readerCs8pwGhle9zPK_11cbor_decode:
   93|    559|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    559|        Deserializer { reader }
   95|    559|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECs8pwGhle9zPK_11cbor_decode:
  344|    559|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    559|    where
  346|    559|        V: Visitor<'de>,
  347|    559|    {
  348|    559|        let mut de = self.try_step()?;
  349|    559|        let seq = Accessor::tuple(&mut de, len)?;
  350|    546|        visitor.visit_seq(seq)
  351|    559|    }
_RNvMs1_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderE5tupleCs8pwGhle9zPK_11cbor_decode:
  443|    559|    pub fn tuple(
  444|    559|        de: &'a mut Deserializer<R>,
  445|    559|        len: usize,
  446|    559|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    559|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    552|        if array_start.0 == Some(len) {
  450|    546|            Ok(Accessor {
  451|    546|                de,
  452|    546|                len: array_start.0,
  453|    546|            })
  454|       |        } else {
  455|      6|            Err(DecodeError::RequireLength {
  456|      6|                name: "tuple",
  457|      6|                expect: len,
  458|      6|                value: array_start.0.unwrap_or(0),
  459|      6|            })
  460|       |        }
  461|    559|    }
_RNvMs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderE3endCs8pwGhle9zPK_11cbor_decode:
  131|    204|        match peek_one(&mut self.reader) {
  132|      6|            Ok(_) => Err(DecodeError::TrailingData),
  133|    198|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    204|    }
_RINvXs7_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer17deserialize_bytesNtNtCs243SzT5MOo5_3cid5serde17BytesToCidVisitorECs8pwGhle9zPK_11cbor_decode:
  646|    245|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    245|        let byte = peek_one(&mut self.0.reader)?;
  648|    244|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    243|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    236|                    Cow::Borrowed(buf) => {
  653|    236|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    234|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      4|                    Cow::Owned(mut buf) => {
  660|      4|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      2|                            buf.remove(0);
  664|      2|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      1|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    245|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECs8pwGhle9zPK_11cbor_decode:
  354|    559|    fn deserialize_tuple_struct<V>(
  355|    559|        self,
  356|    559|        _name: &'static str,
  357|    559|        len: usize,
  358|    559|        visitor: V,
  359|    559|    ) -> Result<V::Value, Self::Error>
  360|    559|    where
  361|    559|        V: Visitor<'de>,
  362|    559|    {
  363|    559|        self.deserialize_tuple(len, visitor)
  364|    559|    }
_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECs8pwGhle9zPK_11cbor_decode:
  142|    438|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    438|        where V: Visitor<'de>
  144|    438|        {
  145|    438|            let value = <$t>::decode(&mut self.reader)?;
  146|    425|            visitor.$visit(value)
  147|    438|        }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderENtNtCs8unybNTJIdL_5serde2de9SeqAccess17next_element_seedINtNtCsewp07EQjaMZ_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECs8pwGhle9zPK_11cbor_decode:
  484|    546|        if let Some(len) = self.len.as_mut() {
  485|    546|            if *len > 0 {
  486|    546|                *len -= 1;
  487|    546|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    546|    }

_RNvXs7_NtCs92H5M7BUMUn_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEINtB16_4FromINtNtCsadRB8jH4Cfu_7cbor4ii5error11DecodeErrorB14_EE4fromCs8pwGhle9zPK_11cbor_decode:
  167|    234|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  168|    234|        match err {
  169|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  170|    183|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  171|     50|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  172|     50|                DecodeError::Mismatch { expect_major, byte }
  173|       |            }
  174|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  175|      0|                DecodeError::TypeMismatch { name, byte }
  176|       |            }
  177|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  178|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  179|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  180|       |            cbor4ii::DecodeError::RequireLength {
  181|      0|                name,
  182|      0|                expect,
  183|      0|                value,
  184|      0|            } => DecodeError::RequireLength {
  185|      0|                name,
  186|      0|                expect,
  187|      0|                value,
  188|      0|            },
  189|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  190|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  191|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  192|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  193|      0|            _ => DecodeError::Msg(err.to_string()),
  194|       |        }
  195|    234|    }
_RINvXs4_NtCs92H5M7BUMUn_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleENtNtCs8unybNTJIdL_5serde2de5Error6customNtNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus5error5ErrorECs8pwGhle9zPK_11cbor_decode:
  134|     34|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     34|        DecodeError::Msg(msg.to_string())
  136|     34|    }
_RINvXs4_NtCs92H5M7BUMUn_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleENtNtCs8unybNTJIdL_5serde2de5Error6customNtNtCsgGlVtr8vkIt_5alloc6string6StringECs8pwGhle9zPK_11cbor_decode:
  134|     32|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     32|        DecodeError::Msg(msg.to_string())
  136|     32|    }
_RINvXs4_NtCs92H5M7BUMUn_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleENtNtCs8unybNTJIdL_5serde2de5Error6customNtNtNtCs52j84AUb23Y_10fvm_shared7address6errors5ErrorECs8pwGhle9zPK_11cbor_decode:
  134|     34|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     34|        DecodeError::Msg(msg.to_string())
  136|     34|    }
_RNvXs6_NtCs92H5M7BUMUn_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCs8pwGhle9zPK_11cbor_decode:
  161|    361|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  162|    361|        fmt::Debug::fmt(self, f)
  163|    361|    }
_RNvXs9_NtCs92H5M7BUMUn_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCs8pwGhle9zPK_11cbor_decode:
   70|    361|#[derive(Debug)]

_RINvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser12SerializeSeq17serialize_elementRNtNtCs52j84AUb23Y_10fvm_shared7address7AddressECs8pwGhle9zPK_11cbor_decode:
  369|    360|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    360|        value.serialize(&mut *self.ser)
  371|    360|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsgGlVtr8vkIt_5alloc3vec3VecNtNtCs52j84AUb23Y_10fvm_shared7address7AddressEECs8pwGhle9zPK_11cbor_decode:
  403|    198|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    198|        value.serialize(&mut *self.ser)
  405|    198|    }
_RNvXs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer13serialize_seqCs8pwGhle9zPK_11cbor_decode:
  226|    198|        if let Some(len) = len {
  227|    198|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    198|        Ok(Collect {
  232|    198|            bounded: len.is_some(),
  233|    198|            ser: self,
  234|    198|        })
  235|    198|    }
_RNvXs7_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer15serialize_bytesCs8pwGhle9zPK_11cbor_decode:
  550|    198|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    198|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    198|        let prefixed = [&[0x00], value].concat();
  553|    198|        // CIDs are serialized with CBOR tag 42.
  554|    198|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    198|        Ok(())
  556|    198|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs243SzT5MOo5_3cid3cid3CidKj40_EECs8pwGhle9zPK_11cbor_decode:
  403|    198|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    198|        value.serialize(&mut *self.ser)
  405|    198|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs52j84AUb23Y_10fvm_shared7address7AddressECs8pwGhle9zPK_11cbor_decode:
  403|    198|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    198|        value.serialize(&mut *self.ser)
  405|    198|    }
_RNvXs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer15serialize_tupleCs8pwGhle9zPK_11cbor_decode:
  239|    198|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    198|        Ok(BoundedCollect { ser: self })
  241|    198|    }
_RNvXs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer22serialize_tuple_structCs8pwGhle9zPK_11cbor_decode:
  244|    198|    fn serialize_tuple_struct(
  245|    198|        self,
  246|    198|        _name: &'static str,
  247|    198|        len: usize,
  248|    198|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    198|        self.serialize_tuple(len)
  250|    198|    }
_RINvNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser6to_vecNtNtCs3xktYLmzold_11common_fuzz4cbor7PayloadECs8pwGhle9zPK_11cbor_decode:
   23|    198|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    198|where
   25|    198|    T: Serialize + ?Sized,
   26|    198|{
   27|    198|    let writer = BufWriter::new(Vec::new());
   28|    198|    let mut serializer = Serializer::new(writer);
   29|    198|    value.serialize(&mut serializer)?;
   30|    198|    Ok(serializer.into_inner().into_inner())
   31|    198|}
_RNvMNtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterE10into_innerCs8pwGhle9zPK_11cbor_decode:
   56|    198|    pub fn into_inner(self) -> W {
   57|    198|        self.writer
   58|    198|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECs8pwGhle9zPK_11cbor_decode:
  403|    198|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    198|        value.serialize(&mut *self.ser)
  405|    198|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct15serialize_fieldRyECs8pwGhle9zPK_11cbor_decode:
  403|    198|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    198|        value.serialize(&mut *self.ser)
  405|    198|    }
_RNvMNtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterE3newCs8pwGhle9zPK_11cbor_decode:
   51|    198|    pub fn new(writer: W) -> Serializer<W> {
   52|    198|        Serializer { writer }
   53|    198|    }
_RINvXs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer24serialize_newtype_structNtNtCsaQpCZ3ALgPx_11serde_bytes7bytebuf7ByteBufECs8pwGhle9zPK_11cbor_decode:
  199|    198|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    198|        self,
  201|    198|        name: &'static str,
  202|    198|        value: &T,
  203|    198|    ) -> Result<Self::Ok, Self::Error> {
  204|    198|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    198|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    198|    }
_RNvXs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer13serialize_u64Cs8pwGhle9zPK_11cbor_decode:
  123|    198|        v.encode(&mut self.writer)?;
  124|    198|        Ok(())
  125|    198|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCs3xktYLmzold_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECs8pwGhle9zPK_11cbor_decode:
  403|    198|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    198|        value.serialize(&mut *self.ser)
  405|    198|    }
_RINvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCs9VIxVmynZwi_17fvm_ipld_bitfield8BitFieldECs8pwGhle9zPK_11cbor_decode:
  403|    198|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    198|        value.serialize(&mut *self.ser)
  405|    198|    }
_RNvXs_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser10Serializer15serialize_bytesCs8pwGhle9zPK_11cbor_decode:
  160|  1.15k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  1.15k|        Ok(())
  162|  1.15k|    }
_RNvXs2_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser20SerializeTupleStruct3endCs8pwGhle9zPK_11cbor_decode:
  408|    198|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    198|        Ok(())
  410|    198|    }
_RNvXs0_NtCs92H5M7BUMUn_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterENtNtCs8unybNTJIdL_5serde3ser12SerializeSeq3endCs8pwGhle9zPK_11cbor_decode:
  374|    198|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    198|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    198|        }
  378|       |
  379|    198|        Ok(())
  380|    198|    }

_RNvXCs9fDrCcGrNqE_11serde_tupleINtB2_10SerializerQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEENtNtCs8unybNTJIdL_5serde3ser10Serializer22serialize_tuple_structCs8pwGhle9zPK_11cbor_decode:
  158|    198|    fn serialize_tuple_struct(
  159|    198|        self,
  160|    198|        name: &'static str,
  161|    198|        len: usize,
  162|    198|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    198|        self.0.serialize_tuple_struct(name, len)
  164|    198|    }
_RINvXs_Cs9fDrCcGrNqE_11serde_tupleINtB5_12DeserializerQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEENtNtCs8unybNTJIdL_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECs8pwGhle9zPK_11cbor_decode:
  353|    559|    fn deserialize_tuple_struct<V>(
  354|    559|        self,
  355|    559|        name: &'static str,
  356|    559|        len: usize,
  357|    559|        visitor: V,
  358|    559|    ) -> Result<V::Value, Self::Error>
  359|    559|    where
  360|    559|        V: serde::de::Visitor<'de>,
  361|    559|    {
  362|    559|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    559|    }

_RNvXNtCsg4xpuVyPdDi_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCs52j84AUb23Y_10fvm_shared:
    9|      4|    fn as_display(&self) -> Self {
   10|      4|        self
   11|      4|    }

_RNvNtCs3K7eiokevIC_15unsigned_varint6decode7is_lastCs8pwGhle9zPK_11cbor_decode:
   90|  3.71k|pub fn is_last(b: u8) -> bool {
   91|  3.71k|    b & 0x80 == 0
   92|  3.71k|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6decode3u64Cs8pwGhle9zPK_11cbor_decode:
  122|    866|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    866|    decode!(buf, 9, u64)
  124|    866|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6decode7is_lastCs52j84AUb23Y_10fvm_shared:
   90|  2.85k|pub fn is_last(b: u8) -> bool {
   91|  2.85k|    b & 0x80 == 0
   92|  2.85k|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6decode3u64Cs52j84AUb23Y_10fvm_shared:
  122|    532|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    532|    decode!(buf, 9, u64)
  124|    532|}

_RNvNtCs3K7eiokevIC_15unsigned_varint6encode10u64_bufferCs8pwGhle9zPK_11cbor_decode:
  119|  1.43k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.43k|    [0; U64_LEN]
  121|  1.43k|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6encode2u8Cs8pwGhle9zPK_11cbor_decode:
   45|    198|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    198|    encode!(number, buf)
   47|    198|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6encode9u8_bufferCs8pwGhle9zPK_11cbor_decode:
  101|    198|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    198|    [0; U8_LEN]
  103|    198|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6encode3u64Cs8pwGhle9zPK_11cbor_decode:
   69|    558|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    558|    encode!(number, buf)
   71|    558|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6encode10u64_bufferCs52j84AUb23Y_10fvm_shared:
  119|    238|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    238|    [0; U64_LEN]
  121|    238|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6encode3u64Cs52j84AUb23Y_10fvm_shared:
   69|    238|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    238|    encode!(number, buf)
   71|    238|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6encode3u64Cs9VIxVmynZwi_17fvm_ipld_bitfield:
   69|  8.79k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  8.79k|    encode!(number, buf)
   71|  8.79k|}
_RNvNtCs3K7eiokevIC_15unsigned_varint6encode10u64_bufferCs9VIxVmynZwi_17fvm_ipld_bitfield:
  119|  8.79k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  8.79k|    [0; U64_LEN]
  121|  8.79k|}

_RINvNtCs3K7eiokevIC_15unsigned_varint2io8read_u64QQRShECs8pwGhle9zPK_11cbor_decode:
   31|    881|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    881|                let mut b = encode::$b();
   33|  1.91k|                for i in 0 .. b.len() {
   34|  1.91k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.91k|                    if n == 0 {
   36|     12|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.90k|                    }
   38|  1.90k|                    if decode::is_last(b[i]) {
   39|    866|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.03k|                    }
   41|       |                }
   42|      3|                Err(decode::Error::Overflow.into())
   43|    881|            }
_RNvXs1_NtCs3K7eiokevIC_15unsigned_varint2ioNtB5_9ReadErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|      7|    fn from(e: decode::Error) -> Self {
   92|      7|        ReadError::Decode(e)
   93|      7|    }

_RNCNvXs9_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  8.59k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|    396|    fn new(mut iter: I) -> Self {
  469|    396|        let next = iter.next();
  470|    396|        Self { iter, next }
  471|    396|    }
_RNvMs8_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  8.79k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  8.79k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  8.59k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    198|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  8.59k|        if advance_lhs {
  371|  8.59k|            self.lhs.next();
  372|  8.59k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  8.59k|        range
  377|  8.79k|    }
_RNvMs8_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  8.79k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  8.79k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  8.59k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    198|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  8.59k|        if advance_lhs {
  371|  8.59k|            self.lhs.next();
  372|  8.59k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  8.59k|        range
  377|  8.79k|    }
_RNvMs8_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    198|    fn new(lhs: A, rhs: B) -> Self {
  344|    198|        Self {
  345|    198|            lhs: Lookahead::new(lhs),
  346|    198|            rhs: Lookahead::new(rhs),
  347|    198|            combinator: Default::default(),
  348|    198|        }
  349|    198|    }
_RNvXsb_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  439|  8.79k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  8.59k|        while let Some(next) = self.iter.peek() {
  444|  8.42k|            if next.start > range.end {
  445|  8.42k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  8.59k|        Some(range)
  453|  8.79k|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  17.5k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  17.5k|        self.next.as_mut()
  475|  17.5k|    }
_RNvMsa_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    198|    pub fn new(iter: I) -> Self {
  426|    198|        Self {
  427|    198|            iter: Lookahead::new(iter),
  428|    198|        }
  429|    198|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    198|    fn new(mut iter: I) -> Self {
  469|    198|        let next = iter.next();
  470|    198|        Self { iter, next }
  471|    198|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    198|    fn new(mut iter: I) -> Self {
  469|    198|        let next = iter.next();
  470|    198|        Self { iter, next }
  471|    198|    }
_RNvMs8_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    198|    fn new(lhs: A, rhs: B) -> Self {
  344|    198|        Self {
  345|    198|            lhs: Lookahead::new(lhs),
  346|    198|            rhs: Lookahead::new(rhs),
  347|    198|            combinator: Default::default(),
  348|    198|        }
  349|    198|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    198|    fn new(mut iter: I) -> Self {
  469|    198|        let next = iter.next();
  470|    198|        Self { iter, next }
  471|    198|    }
_RNvXse_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.79k|        let next = self.next.take()?;
  484|  8.59k|        self.next = self.iter.next();
  485|  8.59k|        Some(next)
  486|  8.79k|    }
_RNvXsf_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsewp07EQjaMZ_4core7default7Default7defaultB9_:
   87|    198|#[derive(Default)]
_RNvXs9_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  389|  8.79k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  8.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  8.79k|    }
_RNvMsa_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    198|    pub fn new(iter: I) -> Self {
  426|    198|        Self {
  427|    198|            iter: Lookahead::new(iter),
  428|    198|        }
  429|    198|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  8.59k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.59k|        self.next.as_mut()
  475|  8.59k|    }
_RNCNvXs9_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  8.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  312|  8.79k|        self.0.next()
  313|  8.79k|    }
_RNCNvXs9_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  8.59k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  389|  8.79k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  8.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  8.79k|    }
_RNvXs0_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  182|  8.59k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  8.59k|        // the difference between a range and an empty range is just that range
  184|  8.59k|        Some(lhs)
  185|  8.59k|    }
_RNvXse_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  8.59k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.59k|        let next = self.next.take()?;
  484|  8.59k|        self.next = self.iter.next();
  485|  8.59k|        Some(next)
  486|  8.59k|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    198|    fn new(mut iter: I) -> Self {
  469|    198|        let next = iter.next();
  470|    198|        Self { iter, next }
  471|    198|    }
_RNvMs5_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    198|    pub fn new(a: A, b: B) -> Self {
  299|    198|        Self(Merge::new(_Combine::new(a, b)))
  300|    198|    }
_RNvXse_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.79k|        let next = self.next.take()?;
  484|  8.59k|        self.next = self.iter.next();
  485|  8.59k|        Some(next)
  486|  8.79k|    }
_RNvXsb_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  439|  8.79k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  8.59k|        while let Some(next) = self.iter.peek() {
  444|  8.42k|            if next.start > range.end {
  445|  8.42k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  8.59k|        Some(range)
  453|  8.79k|    }
_RNvXNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  110|  8.59k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  8.59k|        // the union of a range and an empty range is just that range
  112|  8.59k|        Some(lhs)
  113|  8.59k|    }
_RNvMs5_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    198|    pub fn new(a: A, b: B) -> Self {
  299|    198|        Self(Merge::new(_Combine::new(a, b)))
  300|    198|    }
_RNvXse_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  8.59k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.59k|        let next = self.next.take()?;
  484|  8.59k|        self.next = self.iter.next();
  485|  8.59k|        Some(next)
  486|  8.59k|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  8.79k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.79k|        self.next.as_mut()
  475|  8.79k|    }
_RNvXs6_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  312|  8.79k|        self.0.next()
  313|  8.79k|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  8.59k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.59k|        self.next.as_mut()
  475|  8.59k|    }
_RNvMsd_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  8.79k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.79k|        self.next.as_mut()
  475|  8.79k|    }
_RNvXsh_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsewp07EQjaMZ_4core7default7Default7defaultB9_:
  152|    198|#[derive(Default)]
_RNCNvXs9_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  8.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())

_RNCINvNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0B6_:
  167|    396|    Ranges::new(iter::from_fn(move || {
  168|    396|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|    396|    }))
_RNvXs3_NtCs9VIxVmynZwi_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|    396|    fn next(&mut self) -> Option<Self::Item> {
  155|    396|        self.0.next()
  156|    396|    }
_RINvMs2_NtCs9VIxVmynZwi_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|    396|    pub fn new<II>(iter: II) -> Self
  141|    396|    where
  142|    396|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    396|    {
  144|    396|        Self(iter.into_iter())
  145|    396|    }
_RINvNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEEB4_:
  164|    396|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|    396|    let mut iter = bits.into_iter().peekable();
  166|    396|
  167|    396|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|    396|    }))
  181|    396|}
_RINvMs2_NtCs9VIxVmynZwi_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    198|    pub fn new<II>(iter: II) -> Self
  141|    198|    where
  142|    198|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    198|    {
  144|    198|        Self(iter.into_iter())
  145|    198|    }
_RINvYINtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    198|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    198|        Combine::new(self, other)
   24|    198|    }
_RNvXs3_NtCs9VIxVmynZwi_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  8.79k|    fn next(&mut self) -> Option<Self::Item> {
  155|  8.79k|        self.0.next()
  156|  8.79k|    }
_RINvYINtNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsewp07EQjaMZ_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsgGlVtr8vkIt_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    198|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    198|        Combine::new(self, other)
   34|    198|    }

_RNvMs4_Cs9VIxVmynZwi_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    198|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    198|        self.inner_ranges()
  287|    198|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    198|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    198|    }
_RNvMs4_Cs9VIxVmynZwi_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    198|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    198|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    198|    }
_RNvXsa_Cs9VIxVmynZwi_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsewp07EQjaMZ_4core7default7Default7defaultB5_:
   42|    268|#[derive(Debug, Default, Clone)]

_RNvXNtCs9VIxVmynZwi_17fvm_ipld_bitfield5rangeINtNtNtCsewp07EQjaMZ_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  8.59k|    fn size(&self) -> Self::Idx {
   17|  8.59k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  8.59k|            self.end - self.start
   21|       |        }
   22|  8.59k|    }

_RNvXs5_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCsewp07EQjaMZ_4core3fmt7Display3fmt:
    5|     34|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXs_NtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   99|    306|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    306|    where
  101|    306|        D: Deserializer<'de>,
  102|    306|    {
  103|    306|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    302|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    302|        }
  110|    302|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    306|    }
_RINvXNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs8unybNTJIdL_5serde3ser9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   83|    198|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    198|    where
   85|    198|        S: Serializer,
   86|    198|    {
   87|    198|        let bytes = self.to_bytes();
   88|    198|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    198|        }
   94|    198|        strict_bytes::serialize(&bytes, serializer)
   95|    198|    }
_RNvMs1_NtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    198|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    198|        let mut iter = self.ranges();
  203|       |
  204|    198|        let first_range = match iter.next() {
  205|    168|            Some(range) => range,
  206|     30|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    168|        let mut writer = BitWriter::new();
  210|    168|        writer.write(0, 2); // version 00
  211|    168|
  212|    168|        if first_range.start == 0 {
  213|     94|            writer.write(1, 1); // the first bit is a 1
  214|     94|        } else {
  215|     74|            writer.write(0, 1); // the first bit is a 0
  216|     74|            writer.write_len(first_range.start); // the number of leading 0s
  217|     74|        }
  218|       |
  219|    168|        writer.write_len(first_range.size());
  220|    168|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  8.59k|        for range in iter {
  225|  8.42k|            writer.write_len(range.start - index); // zeros
  226|  8.42k|            writer.write_len(range.size()); // ones
  227|  8.42k|            index = range.end;
  228|  8.42k|        }
  229|       |
  230|    168|        writer.finish()
  231|    198|    }
_RNvMs1_NtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    302|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    302|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    301|        let version = reader.read(2);
  162|    301|        if version != 0 {
  163|      1|            return Err(Error::UnsupportedVersion);
  164|    300|        }
  165|    300|
  166|    300|        let mut next_value = reader.read(1) == 1;
  167|    300|        let mut ranges = Vec::new();
  168|    300|        let mut index = 0u64;
  169|    300|        let mut total_len: u64 = 0;
  170|       |
  171|  26.0k|        while let Some(len) = reader.read_len()? {
  172|  25.7k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  25.7k|            if ovf {
  174|      1|                return Err(Error::RLEOverflow);
  175|  25.7k|            }
  176|  25.7k|            total_len = new_total_len;
  177|  25.7k|            let start = index;
  178|  25.7k|            index += len;
  179|  25.7k|            let end = index;
  180|  25.7k|
  181|  25.7k|            if next_value {
  182|  12.9k|                ranges.push(start..end);
  183|  12.9k|            }
  184|       |
  185|  25.7k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    272|        if next_value {
  191|      4|            return Err(Error::NotMinimal);
  192|    268|        }
  193|    268|
  194|    268|        Ok(Self {
  195|    268|            ranges,
  196|    268|            ..Default::default()
  197|    268|        })
  198|    302|    }

_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  55.8k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  55.8k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  55.8k|        let res = self.peek(num_bits);
   86|  55.8k|        self.drop(num_bits);
   87|  55.8k|
   88|  55.8k|        res
   89|  55.8k|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  11.2k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  11.2k|        let mut len = 0u64;
   95|       |
   96|  55.2k|        for i in 0..VARINT_MAX_BYTES {
   97|  55.2k|            let byte = self.read(8);
   98|  55.2k|
   99|  55.2k|            // strip off the most significant bit and add
  100|  55.2k|            // it to the output
  101|  55.2k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  55.2k|
  103|  55.2k|            // if the most significant bit is a 0, we've
  104|  55.2k|            // reached the end of the varint
  105|  55.2k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  11.2k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      4|                    break;
  110|  11.2k|                }
  111|  11.2k|                return Ok(len);
  112|  43.9k|            }
  113|       |        }
  114|       |
  115|      6|        Err(Error::InvalidVarint)
  116|  11.2k|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  81.6k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  81.6k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  81.6k|        let mask = (1 << num_bits) - 1;
   56|  81.6k|        (self.bits & mask) as u8
   57|  81.6k|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  81.6k|    pub fn drop(&mut self, num_bits: u32) {
   62|  81.6k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  81.6k|        self.bits >>= num_bits;
   66|  81.6k|        self.num_bits -= num_bits;
   67|  81.6k|
   68|  81.6k|        // not sure why this being outside of the if improves the performance
   69|  81.6k|        // bit it does, probably related to keeping caches warm
   70|  81.6k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  81.6k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  81.6k|
   73|  81.6k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  81.6k|        if self.num_bits < 8 {
   75|  61.3k|            self.num_bits += 8;
   76|  61.3k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  61.3k|        }
   78|  81.6k|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  26.0k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  26.0k|        // We're done.
  121|  26.0k|        if !self.has_more() {
  122|    272|            return Ok(None);
  123|  25.8k|        }
  124|  25.8k|
  125|  25.8k|        let peek6 = self.peek(6);
  126|       |
  127|  25.8k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|  12.1k|            self.drop(1);
  130|  12.1k|            1
  131|  13.6k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|  2.37k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|  2.37k|            self.drop(6);
  135|  2.37k|            if val < 2 {
  136|      8|                return Err(Error::NotMinimal);
  137|  2.37k|            }
  138|  2.37k|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  11.2k|            self.drop(2);
  142|  11.2k|            let val = self.read_varint()?;
  143|  11.2k|            if val < 16 {
  144|     13|                return Err(Error::NotMinimal);
  145|  11.2k|            }
  146|  11.2k|            val
  147|       |        };
  148|       |
  149|  25.7k|        Ok(Some(len))
  150|  26.0k|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    302|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    302|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    302|        // data.
   29|    302|        if bytes.last() == Some(&0) {
   30|      1|            return Err(Error::NotMinimal);
   31|    301|        }
   32|    301|        let mut bits = 0u64;
   33|    903|        for i in 0..2 {
   34|    602|            let byte = bytes.get(i).unwrap_or(&0);
   35|    602|            bits |= (*byte as u64) << (8 * i);
   36|    602|        }
   37|       |
   38|    301|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    301|
   40|    301|        Ok(Self {
   41|    301|            bytes,
   42|    301|            bits,
   43|    301|            num_bits: 16,
   44|    301|        })
   45|    302|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  153|  26.0k|    pub fn has_more(&self) -> bool {
  154|  26.0k|        self.bits != 0 || !self.bytes.is_empty()
  155|  26.0k|    }

_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    168|    pub fn finish(mut self) -> Vec<u8> {
   62|    168|        if self.bits > 0 {
   63|     64|            self.bytes.push(self.bits as u8);
   64|    104|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    168|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    168|        self.bytes
   72|    168|    }
_RNvXs_NtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsewp07EQjaMZ_4core7default7Default7defaultB8_:
    5|    168|#[derive(Default, Clone, Debug)]
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  17.0k|    pub fn write_len(&mut self, len: u64) {
   40|  17.0k|        debug_assert!(len > 0);
   41|       |
   42|  17.0k|        if len == 1 {
   43|  6.77k|            // Block Single (prefix 1)
   44|  6.77k|            self.write(1, 1);
   45|  10.3k|        } else if len < 16 {
   46|  1.51k|            // Block Short (prefix 01)
   47|  1.51k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.51k|            self.write(len as u8, 4);
   49|  1.51k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  8.79k|            self.write(0, 2);
   52|  8.79k|
   53|  8.79k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  43.5k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  43.5k|                self.write(byte, 8);
   56|  43.5k|            }
   57|       |        }
   58|  17.0k|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  62.5k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  62.5k|        debug_assert!(num_bits <= 8);
   25|  62.5k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  62.5k|        self.bits |= (byte as u16) << self.num_bits;
   28|  62.5k|        self.num_bits += num_bits;
   29|  62.5k|
   30|  62.5k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  62.5k|        if self.num_bits >= 8 {
   32|  47.7k|            self.bytes.push(self.bits as u8);
   33|  47.7k|            self.bits >>= 8;
   34|  47.7k|            self.num_bits -= 8;
   35|  47.7k|        }
   36|  62.5k|    }
_RNvMNtNtCs9VIxVmynZwi_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   18|    168|    pub fn new() -> Self {
   19|    168|        Default::default()
   20|    168|    }

_RINvXNvXNvNtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs8unybNTJIdL_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   36|    198|#[derive(Debug, Serialize)]
_RINvXs4_NtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   94|    268|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    268|    where
   96|    268|        D: Deserializer<'de>,
   97|    268|    {
   98|    268|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    255|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    255|        }
  105|    255|        Ok(Self::Unvalidated(bytes))
  106|    268|    }
_RINvXNvNtCs9VIxVmynZwi_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs8unybNTJIdL_5serde3ser9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   36|    198|#[derive(Debug, Serialize)]

_RINvXs0_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   76|  1.82k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  1.82k|        where
   78|  1.82k|            D: Deserializer<'de>,
   79|  1.82k|        {
   80|  1.82k|            struct CowVisitor;
   81|  1.82k|
   82|  1.82k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  1.82k|                type Value = Cow<'de, [u8]>;
   84|  1.82k|
   85|  1.82k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  1.82k|                    formatter.write_str("a byte array")
   87|  1.82k|                }
   88|  1.82k|
   89|  1.82k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  1.82k|                where
   91|  1.82k|                    E: Error,
   92|  1.82k|                {
   93|  1.82k|                    Ok(Cow::Borrowed(v))
   94|  1.82k|                }
   95|  1.82k|
   96|  1.82k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  1.82k|                where
   98|  1.82k|                    E: Error,
   99|  1.82k|                {
  100|  1.82k|                    Ok(Cow::Owned(v.to_vec()))
  101|  1.82k|                }
  102|  1.82k|
  103|  1.82k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  1.82k|                where
  105|  1.82k|                    E: Error,
  106|  1.82k|                {
  107|  1.82k|                    Ok(Cow::Owned(v))
  108|  1.82k|                }
  109|  1.82k|            }
  110|  1.82k|            deserializer.deserialize_bytes(CowVisitor)
  111|  1.82k|        }
_RINvXNvXs0_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor20visit_borrowed_bytesINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
   89|  1.67k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  1.67k|                where
   91|  1.67k|                    E: Error,
   92|  1.67k|                {
   93|  1.67k|                    Ok(Cow::Borrowed(v))
   94|  1.67k|                }
_RINvXNvXs0_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor14visit_byte_bufINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
  103|     78|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|     78|                where
  105|     78|                    E: Error,
  106|     78|                {
  107|     78|                    Ok(Cow::Owned(v))
  108|     78|                }
_RINvNtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsgGlVtr8vkIt_5alloc6borrow3CowShEQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  162|    306|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    306|    where
  164|    306|        T: Deserialize<'de>,
  165|    306|        D: Deserializer<'de>,
  166|    306|    {
  167|    306|        Deserialize::deserialize(deserializer)
  168|    306|    }
_RINvXNvXs_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor14visit_byte_bufINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
   64|      8|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|      8|                where
   66|      8|                    E: Error,
   67|      8|                {
   68|      8|                    Ok(v)
   69|      8|                }
_RINvXs_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   44|    814|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    814|        where
   46|    814|            D: Deserializer<'de>,
   47|    814|        {
   48|    814|            struct VecVisitor;
   49|    814|
   50|    814|            impl<'de> Visitor<'de> for VecVisitor {
   51|    814|                type Value = Vec<u8>;
   52|    814|
   53|    814|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    814|                    formatter.write_str("byte array")
   55|    814|                }
   56|    814|
   57|    814|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    814|                where
   59|    814|                    E: Error,
   60|    814|                {
   61|    814|                    Ok(v.into())
   62|    814|                }
   63|    814|
   64|    814|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    814|                where
   66|    814|                    E: Error,
   67|    814|                {
   68|    814|                    Ok(v)
   69|    814|                }
   70|    814|            }
   71|    814|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    814|        }
_RINvXNtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   35|    558|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    558|        where
   37|    558|            S: Serializer,
   38|    558|        {
   39|    558|            serializer.serialize_bytes(self.as_ref())
   40|    558|        }
_RINvNtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCsgGlVtr8vkIt_5alloc3vec3VechEQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  154|    396|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    396|    where
  156|    396|        T: ?Sized + AsRef<[u8]>,
  157|    396|        S: Serializer,
  158|    396|    {
  159|    396|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    396|    }
_RINvXNtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   35|    594|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    594|        where
   37|    594|            S: Serializer,
   38|    594|        {
   39|    594|            serializer.serialize_bytes(self.as_ref())
   40|    594|        }
_RINvNtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsgGlVtr8vkIt_5alloc3vec3VechEQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  162|    814|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    814|    where
  164|    814|        T: Deserialize<'de>,
  165|    814|        D: Deserializer<'de>,
  166|    814|    {
  167|    814|        Deserialize::deserialize(deserializer)
  168|    814|    }
_RINvXNvXs_NtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsgGlVtr8vkIt_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs8unybNTJIdL_5serde2de7Visitor11visit_bytesINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsewp07EQjaMZ_4core7convert10InfallibleEECs8pwGhle9zPK_11cbor_decode:
   57|    685|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    685|                where
   59|    685|                    E: Error,
   60|    685|                {
   61|    685|                    Ok(v.into())
   62|    685|                }
_RINvNtNtCsl2pK8BBiRbs_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCsgGlVtr8vkIt_5alloc3vec3VechEQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  154|    198|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    198|    where
  156|    198|        T: ?Sized + AsRef<[u8]>,
  157|    198|        S: Serializer,
  158|    198|    {
  159|    198|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    198|    }

_RNvXNtCsl2pK8BBiRbs_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCsewp07EQjaMZ_4core7convert4FromINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCs8pwGhle9zPK_11cbor_decode:
   23|    361|    fn from(err: DecodeError<T>) -> Self {
   24|    361|        Self {
   25|    361|            description: err.to_string(),
   26|    361|            protocol: CodecProtocol::Cbor,
   27|    361|        }
   28|    361|    }

_RINvCsl2pK8BBiRbs_17fvm_ipld_encoding10from_sliceNtNtCs3xktYLmzold_11common_fuzz4cbor7PayloadECs8pwGhle9zPK_11cbor_decode:
   61|    559|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    559|where
   63|    559|    T: de::Deserialize<'a>,
   64|    559|{
   65|    559|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    559|}
_RINvCsl2pK8BBiRbs_17fvm_ipld_encoding6to_vecNtNtCs3xktYLmzold_11common_fuzz4cbor7PayloadECs8pwGhle9zPK_11cbor_decode:
   44|    198|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    198|where
   46|    198|    T: ser::Serialize + ?Sized,
   47|    198|{
   48|    198|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    198|}

_RNvXs0_NtNtCs52j84AUb23Y_10fvm_shared7address6errorsNtB5_5ErrorINtNtCsewp07EQjaMZ_4core7convert4FromNtNtCs3K7eiokevIC_15unsigned_varint6decode5ErrorE4from:
   52|     16|    fn from(_: VarintError) -> Error {
   53|     16|        Error::InvalidPayload
   54|     16|    }
_RNvXs7_NtNtCs52j84AUb23Y_10fvm_shared7address6errorsNtB5_5ErrorNtNtCsewp07EQjaMZ_4core3fmt7Display3fmt:
   14|     34|#[derive(Debug, PartialEq, Eq, Error)]

_RINvXs3_NtCs52j84AUb23Y_10fvm_shared7addressNtB6_7AddressNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
  358|  1.52k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  359|  1.52k|    where
  360|  1.52k|        D: Deserializer<'de>,
  361|  1.52k|    {
  362|  1.52k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  363|       |
  364|       |        // Create and return created address of unmarshalled bytes
  365|  1.45k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  366|  1.52k|    }
_RINvXs2_NtCs52j84AUb23Y_10fvm_shared7addressNtB6_7AddressNtNtCs8unybNTJIdL_5serde3ser9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
  348|    558|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  349|    558|    where
  350|    558|        S: Serializer,
  351|    558|    {
  352|    558|        let address_bytes = self.to_bytes();
  353|    558|        strict_bytes::Serialize::serialize(&address_bytes, s)
  354|    558|    }
_RNvMNtCs52j84AUb23Y_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  1.45k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  1.45k|        if bz.len() < 2 {
   88|      9|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  1.44k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  1.44k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  1.45k|    }
_RNvNtCs52j84AUb23Y_10fvm_shared7address12to_leb_bytes:
  369|    238|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  370|    238|    // write id to buffer in leb128 format
  371|    238|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  372|    238|}
_RNvMNtCs52j84AUb23Y_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|    558|    pub fn to_bytes(self) -> Vec<u8> {
  169|    558|        self.payload.to_bytes()
  170|    558|    }
_RNvMNtCs52j84AUb23Y_10fvm_shared7addressNtB2_7Address3new:
   79|  1.44k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  1.44k|        Ok(Self {
   81|  1.44k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  1.44k|    }
_RNvNtCs52j84AUb23Y_10fvm_shared7address14from_leb_bytes:
  374|    440|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  375|       |    // write id to buffer in leb128 format
  376|    440|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  377|    425|    if !remaining.is_empty() {
  378|      3|        return Err(Error::InvalidPayload);
  379|    422|    }
  380|    422|    Ok(id)
  381|    440|}

_RNvMs0_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|     91|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|     91|        let length = subaddress.len();
   59|     91|        if length > MAX_SUBADDRESS_LEN {
   60|      1|            return Err(Error::InvalidPayloadLength(length));
   61|     90|        }
   62|     90|        let mut addr = DelegatedAddress {
   63|     90|            namespace,
   64|     90|            length,
   65|     90|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|     90|        };
   67|     90|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|     90|        Ok(addr)
   69|     91|    }
_RNCNvMs2_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB7_7Payload3new0Bb_:
  144|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMs0_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|     56|    pub fn subaddress(&self) -> &[u8] {
   80|     56|        &self.buffer[..self.length]
   81|     56|    }
_RNvMs2_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|    558|    pub fn to_bytes(self) -> Vec<u8> {
  132|    558|        let mut bz = self.to_raw_bytes();
  133|    558|        bz.insert(0, Protocol::from(self) as u8);
  134|    558|        bz
  135|    558|    }
_RNvMs2_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|    558|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|    558|        use Payload::*;
  117|    558|        match self {
  118|    182|            ID(i) => to_leb_bytes(i),
  119|    114|            Secp256k1(arr) => arr.to_vec(),
  120|     96|            Actor(arr) => arr.to_vec(),
  121|    110|            BLS(arr) => arr.to_vec(),
  122|     56|            Delegated(addr) => {
  123|     56|                let mut buf = to_leb_bytes(addr.namespace());
  124|     56|                buf.extend(addr.subaddress());
  125|     56|                buf
  126|       |            }
  127|       |        }
  128|    558|    }
_RNvMs2_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  1.44k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  1.44k|        let payload = match protocol {
  140|    440|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    276|                payload
  143|    276|                    .try_into()
  144|    276|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    399|                payload
  148|    399|                    .try_into()
  149|    399|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    236|                payload
  153|    236|                    .try_into()
  154|    236|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|     92|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|     91|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  1.42k|        Ok(payload)
  162|  1.44k|    }
_RNvXs3_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCsewp07EQjaMZ_4core7convert4FromNtB5_7PayloadE4from:
  166|    558|    fn from(pl: Payload) -> Self {
  167|    558|        match pl {
  168|    182|            Payload::ID(_) => Self::ID,
  169|    114|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|     96|            Payload::Actor(_) => Self::Actor,
  171|    110|            Payload::BLS(_) => Self::BLS,
  172|     56|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|    558|    }
_RNCNvMs2_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB7_7Payload3news0_0Bb_:
  154|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMs2_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB7_7Payload3news_0Bb_:
  149|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMs0_NtNtCs52j84AUb23Y_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|     56|    pub fn namespace(&self) -> ActorID {
   74|     56|        self.namespace
   75|     56|    }

_RNvXNvNtNtCs52j84AUb23Y_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsbovZiiNTyfw_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  1.44k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs52j84AUb23Y_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsbovZiiNTyfw_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  1.44k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCs52j84AUb23Y_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  1.44k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  1.44k|        FromPrimitive::from_u8(b)
   31|  1.44k|    }

_RINvXNvXNvNvXs_NtCs3xktYLmzold_11common_fuzz4cborNtBd_7PayloadNtNtCs8unybNTJIdL_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   12|    198|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCs3xktYLmzold_11common_fuzz4cborNtB3_7PayloadNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   12|    914|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtBd_7PayloadNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEE0Cs8pwGhle9zPK_11cbor_decode:
   12|    438|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtBb_7PayloadNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de8AccessorNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   12|    546|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCs3xktYLmzold_11common_fuzz4cborNtBa_7PayloadNtNtCs8unybNTJIdL_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs9fDrCcGrNqE_11serde_tuple10SerializerQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEEECs8pwGhle9zPK_11cbor_decode:
   12|    198|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtB8_7PayloadNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs9fDrCcGrNqE_11serde_tuple12DeserializerQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEEECs8pwGhle9zPK_11cbor_decode:
   12|    559|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCs3xktYLmzold_11common_fuzz4cborNtBe_7PayloadNtNtCs8unybNTJIdL_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils11SliceReaderEECs8pwGhle9zPK_11cbor_decode:
   12|    546|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCs3xktYLmzold_11common_fuzz4cborNtB5_7PayloadNtNtCs8unybNTJIdL_5serde3ser9Serialize9serializeQINtNtCs92H5M7BUMUn_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsadRB8jH4Cfu_7cbor4ii4core5utils9BufWriterEECs8pwGhle9zPK_11cbor_decode:
   12|    198|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

