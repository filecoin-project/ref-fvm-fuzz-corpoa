_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  599|  10.7k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  10.7k|    -> Result<Option<usize>, Error<R::Error>>
  601|  10.7k|{
  602|  10.7k|    if byte != (marker::START | (major << 5)) {
  603|  6.11k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  6.05k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  6.05k|        Ok(Some(len))
  606|       |    } else {
  607|  4.60k|        Ok(None)
  608|       |    }
  609|  10.7k|}
_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  125|  13.2k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  13.2k|    let b = reader.fill(1)?
  127|  13.2k|        .as_ref()
  128|  13.2k|        .get(0)
  129|  13.2k|        .copied()
  130|  13.2k|        .ok_or(Error::Eof)?;
  131|  13.0k|    reader.advance(1);
  132|  13.0k|    Ok(b)
  133|  13.2k|}
_RNvNtNtCs1YscacFooSg_7cbor4ii4core3dec8if_majorCshlOgiIj0SRD_11cbor_decode:
  894|    302|pub fn if_major(byte: u8) -> u8 {
  895|    302|    byte >> 5
  896|    302|}
_RINvYNtNtNtCs1YscacFooSg_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
   73|  1.19k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  1.19k|        let byte = pull_one(reader)?;
   75|  1.17k|        Self::decode_with(byte, reader)
   76|  1.19k|    }
_RINvXss_NtNtCs1YscacFooSg_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  256|    548|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    548|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    548|                }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB5_7TypeNum3newCshlOgiIj0SRD_11cbor_decode:
  179|  6.98k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  6.98k|        TypeNum { major_limit, byte }
  181|  6.98k|    }
_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  431|  9.55k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  9.55k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  9.55k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  9.55k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  4.89k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  4.89k|            if buf.len() >= len {
  440|  4.83k|                reader.advance(len);
  441|  4.83k|                return Ok(Some(&buf[..len]));
  442|     66|            }
  443|      0|        }
  444|       |
  445|     66|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|     70|        while len != 0 {
  448|     70|            let readbuf = reader.fill(len)?;
  449|     70|            let readbuf = readbuf.as_ref();
  450|     70|
  451|     70|            if readbuf.is_empty() {
  452|     66|                return Err(Error::Eof);
  453|      4|            }
  454|      4|
  455|      4|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      4|
  457|      4|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      4|            reader.advance(readlen);
  459|      4|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|  6.02k|            let byte = pull_one(reader)?;
  467|       |
  468|  5.99k|            if byte == marker::BREAK {
  469|    450|                break
  470|  5.54k|            }
  471|  5.54k|
  472|  5.54k|            if !reader.step_in() {
  473|      1|                return Err(Error::DepthLimit);
  474|  5.54k|            }
  475|  5.54k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|  5.54k|            let reader = &mut *reader;
  477|       |
  478|  5.54k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|  1.16k|                buf.extend_from_slice(longbuf);
  480|  1.16k|            }
  481|       |        }
  482|       |
  483|    450|        Ok(None)
  484|       |    }
  485|  9.55k|}
_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  136|    926|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  1.83k|    while !buf.is_empty() {
  138|    941|        let readbuf = reader.fill(buf.len())?;
  139|    941|        let readbuf = readbuf.as_ref();
  140|    941|
  141|    941|        if readbuf.is_empty() {
  142|     31|            return Err(Error::Eof);
  143|    910|        }
  144|    910|
  145|    910|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    910|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    910|        reader.advance(len);
  148|    910|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    895|    Ok(())
  152|    926|}
_RINvYINtNtNtCs1YscacFooSg_7cbor4ii4core5types5BytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
   73|  4.10k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  4.10k|        let byte = pull_one(reader)?;
   75|  4.00k|        Self::decode_with(byte, reader)
   76|  4.10k|    }
_RINvYNtNtNtCs1YscacFooSg_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
   73|    318|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    318|        let byte = pull_one(reader)?;
   75|    315|        Self::decode_with(byte, reader)
   76|    318|    }
_RINvXs5_NtNtCs1YscacFooSg_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  510|  4.00k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  4.00k|        use crate::alloc::borrow::Cow;
  512|  4.00k|
  513|  4.00k|        let mut buf = Vec::new();
  514|  4.00k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  3.66k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|    203|            Cow::Owned(buf)
  518|       |        }))
  519|  4.00k|    }
_RINvYyNtNtNtCs1YscacFooSg_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
   73|    557|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    557|        let byte = pull_one(reader)?;
   75|    548|        Self::decode_with(byte, reader)
   76|    557|    }
_RNvMNtNtCs1YscacFooSg_7cbor4ii4core3decNtB2_9Reference6as_refCshlOgiIj0SRD_11cbor_decode:
   81|  14.2k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  14.2k|        match self {
   83|  14.2k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  14.2k|    }
_RNCINvNtNtCs1YscacFooSg_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0CshlOgiIj0SRD_11cbor_decode:
  475|  5.54k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvXsc_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  615|  1.17k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|  1.17k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|  1.17k|    }
_RINvXsg_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  707|    315|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    315|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    315|    }
_RINvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
  227|  6.98k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  6.98k|        match self.byte & self.major_limit {
  229|  6.98k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|  1.06k|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|    327|                let mut buf = [0; 2];
  233|    327|                pull_exact(reader, &mut buf)?;
  234|    319|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|    239|                let mut buf = [0; 4];
  238|    239|                pull_exact(reader, &mut buf)?;
  239|    227|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    360|                let mut buf = [0; 8];
  243|    360|                pull_exact(reader, &mut buf)?;
  244|    349|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|     39|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  6.98k|    }

_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNumhE3newCshlOgiIj0SRD_11cbor_decode:
   52|  2.69k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.69k|        TypeNum { type_, value }
   54|  2.69k|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNumtE3newCshlOgiIj0SRD_11cbor_decode:
   52|  2.78k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.78k|        TypeNum { type_, value }
   54|  2.78k|    }
_RINvXs4_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
   98|  2.91k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  2.91k|        match u32::try_from(self.value) {
  100|  2.79k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    122|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    122|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  2.91k|        Ok(())
  107|  2.91k|    }
_RINvXs1_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
   59|  2.69k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  2.69k|        match self.value {
   61|  2.69k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    598|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  2.69k|        Ok(())
   65|  2.69k|    }
_RINvXsu_NtNtCs1YscacFooSg_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
  159|    252|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    252|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    252|                }
_RINvXs3_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
   84|  2.79k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  2.79k|        match u16::try_from(self.value) {
   86|  2.78k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      8|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      8|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  2.79k|        Ok(())
   93|  2.79k|    }
_RINvXsi_NtNtCs1YscacFooSg_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
  316|    252|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  317|    252|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    252|        self.1.encode(writer)
  319|    252|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNummE3newCshlOgiIj0SRD_11cbor_decode:
   52|  2.79k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.79k|        TypeNum { type_, value }
   54|  2.79k|    }
_RINvXs2_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
   70|  2.78k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  2.78k|        match u8::try_from(self.value) {
   72|  2.69k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     88|                let [x0, x1] = self.value.to_be_bytes();
   75|     88|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  2.78k|        Ok(())
   79|  2.78k|    }
_RINvXs7_NtNtCs1YscacFooSg_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
  208|  1.90k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  209|  1.90k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.90k|        writer.push(self.0)?;
  211|  1.90k|        Ok(())
  212|  1.90k|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNumyE3newCshlOgiIj0SRD_11cbor_decode:
   52|  2.91k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.91k|        TypeNum { type_, value }
   54|  2.91k|    }
_RINvXsd_NtNtCs1YscacFooSg_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshlOgiIj0SRD_11cbor_decode:
  269|    504|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  270|    504|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    504|        Ok(())
  272|    504|    }

_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCshlOgiIj0SRD_11cbor_decode:
   62|  19.7k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  19.7k|        let len = core::cmp::min(self.buf.len(), want);
   64|  19.7k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  19.7k|    }
_RNvMNtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB2_9BufWriter10into_innerCshlOgiIj0SRD_11cbor_decode:
   24|    252|    pub fn into_inner(self) -> Vec<u8> {
   25|    252|        self.0
   26|    252|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReader3newCshlOgiIj0SRD_11cbor_decode:
   53|    685|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    685|        SliceReader { buf, limit: 256 }
   55|    685|    }
_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCshlOgiIj0SRD_11cbor_decode:
   74|  6.73k|    fn step_in(&mut self) -> bool {
   75|  6.73k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  6.73k|            self.limit = limit;
   77|  6.73k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  6.73k|    }
_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCshlOgiIj0SRD_11cbor_decode:
   84|  6.73k|    fn step_out(&mut self) {
   85|  6.73k|        self.limit += 1;
   86|  6.73k|    }
_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCshlOgiIj0SRD_11cbor_decode:
   68|  18.8k|    fn advance(&mut self, n: usize) {
   69|  18.8k|        let len = core::cmp::min(self.buf.len(), n);
   70|  18.8k|        self.buf = &self.buf[len..];
   71|  18.8k|    }
_RNvMNtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB2_9BufWriter3newCshlOgiIj0SRD_11cbor_decode:
   14|    252|    pub fn new(buf: Vec<u8>) -> Self {
   15|    252|       BufWriter(buf)
   16|    252|    }
_RNvXs_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCshlOgiIj0SRD_11cbor_decode:
   39|  4.82k|    fn push(&mut self, input: &[u8]) -> Result<(), Self::Error> {
   40|  4.82k|        self.0.try_reserve(input.len())?;
   41|  4.82k|        self.0.extend_from_slice(input);
   42|  4.82k|        Ok(())
   43|  4.82k|    }

_RNvMs1_NtCs1YscacFooSg_7cbor4ii5errorINtB5_11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleE8mismatchCshlOgiIj0SRD_11cbor_decode:
   93|     39|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     39|        DecodeError::Mismatch {
   95|     39|            expect_major: (!major_limit) >> 5,
   96|     39|            byte
   97|     39|        }
   98|     39|    }

_RNvXs0_NtCs1YscacFooSg_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCs9SrTLDOTsEo_4core3ops4drop4Drop4dropCshlOgiIj0SRD_11cbor_decode:
   24|  5.54k|    fn drop(&mut self) {
   25|  5.54k|        (self.1)(self.0);
   26|  5.54k|    }
_RNvXs_NtCs1YscacFooSg_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCs9SrTLDOTsEo_4core3ops5deref8DerefMut9deref_mutCshlOgiIj0SRD_11cbor_decode:
   17|  5.54k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  5.54k|        self.0
   19|  5.54k|    }

_RINvMNtCsdutg7qHs94C_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECshlOgiIj0SRD_11cbor_decode:
  162|    232|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    232|        let mut version_buf = varint_encode::u64_buffer();
  164|    232|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    232|
  166|    232|        let mut codec_buf = varint_encode::u64_buffer();
  167|    232|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    232|
  169|    232|        let mut written = version.len() + codec.len();
  170|    232|
  171|    232|        w.write_all(version)?;
  172|    232|        w.write_all(codec)?;
  173|    232|        written += self.hash.write(&mut w)?;
  174|       |
  175|    232|        Ok(written)
  176|    232|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E3newCshlOgiIj0SRD_11cbor_decode:
   99|    236|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    236|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    236|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    236|    }
_RNvXs6_NtCsdutg7qHs94C_3cid3cidINtB5_3CidKj40_EINtNtCs9SrTLDOTsEo_4core7convert7TryFromRShE8try_fromCshlOgiIj0SRD_11cbor_decode:
  353|    295|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    295|        Self::read_bytes(&mut bytes)
  355|    295|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E6new_v1CshlOgiIj0SRD_11cbor_decode:
   90|    236|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    236|        Self {
   92|    236|            version: Version::V1,
   93|    236|            codec,
   94|    236|            hash,
   95|    236|        }
   96|    236|    }
_RINvMNtCsdutg7qHs94C_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECshlOgiIj0SRD_11cbor_decode:
  179|    252|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    252|        let written = match self.version {
  181|     20|            Version::V0 => self.hash.write(w)?,
  182|    232|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    252|        Ok(written)
  185|    252|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E6new_v0CshlOgiIj0SRD_11cbor_decode:
   78|     22|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     22|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     22|        }
   82|     22|        Ok(Self {
   83|     22|            version: Version::V0,
   84|     22|            codec: DAG_PB,
   85|     22|            hash,
   86|     22|        })
   87|     22|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E8to_bytesCshlOgiIj0SRD_11cbor_decode:
  205|    252|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    252|        let mut bytes = Vec::new();
  207|    252|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    252|        debug_assert_eq!(written, bytes.len());
  209|    252|        bytes
  210|    252|    }
_RINvMNtCsdutg7qHs94C_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECshlOgiIj0SRD_11cbor_decode:
  140|    295|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    295|        let version = varint_read_u64(&mut r)?;
  142|    290|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    280|        if [version, codec] == [0x12, 0x20] {
  146|     23|            let mut digest = [0u8; 32];
  147|     23|            r.read_exact(&mut digest)?;
  148|     22|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|     22|            return Self::new_v0(mh);
  150|    257|        }
  151|       |
  152|    257|        let version = Version::try_from(version)?;
  153|    253|        match version {
  154|      1|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    252|                let mh = Multihash::read(r)?;
  157|    236|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    295|    }

_RNvXs4_NtCsdutg7qHs94C_3cid5errorNtB5_5ErrorINtNtCs9SrTLDOTsEo_4core7convert4FromNtNtNtCsa9VQedahTrh_3std2io5error5ErrorE4fromCshlOgiIj0SRD_11cbor_decode:
   91|      1|    fn from(err: io::Error) -> Self {
   92|      1|        Self::Io(err)
   93|      1|    }
_RNvXs_NtCsdutg7qHs94C_3cid5errorNtB4_5ErrorNtNtCs9SrTLDOTsEo_4core3fmt7Display3fmt:
   41|     37|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|       |        use self::Error::*;
   43|     37|        let error = match self {
   44|      0|            UnknownCodec => "Unknown codec",
   45|      0|            InputTooShort => "Input too short",
   46|     16|            ParsingError => "Failed to parse multihash",
   47|      4|            InvalidCidVersion => "Unrecognized CID version",
   48|      0|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   49|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   50|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   51|      4|            VarIntDecodeError => "Failed to decode unsigned varint format",
   52|     12|            Io(err) => return write!(f, "{}", err),
   53|      1|            InvalidExplicitCidV0 => "CIDv0 cannot be specified in CIDv1 format",
   54|       |        };
   55|       |
   56|     25|        f.write_str(error)
   57|     37|    }
_RNvXs1_NtCsdutg7qHs94C_3cid5errorNtB5_5ErrorINtNtCs9SrTLDOTsEo_4core7convert4FromNtNtCsjIAJgk4Fm4y_9multihash5error5ErrorE4from:
   68|     16|    fn from(_: multihash::Error) -> Error {
   69|     16|        Error::ParsingError
   70|     16|    }
_RNvXs3_NtCsdutg7qHs94C_3cid5errorNtB5_5ErrorINtNtCs9SrTLDOTsEo_4core7convert4FromNtNtCsh1OwLNxVWDy_15unsigned_varint2io9ReadErrorE4from:
   81|     15|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   82|     15|        use unsigned_varint::io::ReadError::*;
   83|     15|        match err {
   84|     11|            Io(err) => Self::Io(err),
   85|      4|            _ => Self::VarIntDecodeError,
   86|       |        }
   87|     15|    }

_RINvXs_NtCsdutg7qHs94C_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor11visit_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
   48|    295|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    295|    where
   50|    295|        E: de::Error,
   51|    295|    {
   52|    295|        CidGeneric::<SIZE>::try_from(value)
   53|    295|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    295|    }
_RINvXNtCsdutg7qHs94C_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   29|    252|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    252|    where
   31|    252|        S: ser::Serializer,
   32|    252|    {
   33|    252|        let value = ByteBuf::from(self.to_bytes());
   34|    252|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    252|    }
_RINvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   79|    318|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    318|    where
   81|    318|        D: de::Deserializer<'de>,
   82|    318|    {
   83|    318|        /// Main visitor to deserialize a CID.
   84|    318|        ///
   85|    318|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    318|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    318|        /// to bytes.
   88|    318|        struct MainEntryVisitor<const SIZE: usize>;
   89|    318|
   90|    318|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    318|            type Value = CidGeneric<SIZE>;
   92|    318|
   93|    318|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    318|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    318|            }
   96|    318|
   97|    318|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    318|            where
   99|    318|                D: de::Deserializer<'de>,
  100|    318|            {
  101|    318|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    318|            }
  103|    318|        }
  104|    318|
  105|    318|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    318|    }
_RNCINvXs_NtCsdutg7qHs94C_3cid5serdeNtB7_17BytesToCidVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor11visit_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEE0CshlOgiIj0SRD_11cbor_decode:
   53|     37|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
_RINvXNvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtBb_3cid3CidKpENtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   97|    303|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    303|            where
   99|    303|                D: de::Deserializer<'de>,
  100|    303|            {
  101|    303|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    303|            }

_RNvXs_NtCsdutg7qHs94C_3cid7versionNtB4_7VersionINtNtCs9SrTLDOTsEo_4core7convert7TryFromyE8try_fromCshlOgiIj0SRD_11cbor_decode:
   34|    257|    fn try_from(raw: u64) -> Result<Self> {
   35|    257|        match raw {
   36|      1|            0 => Ok(Self::V0),
   37|    252|            1 => Ok(Self::V1),
   38|      4|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    257|    }
_RNvXs0_NtCsdutg7qHs94C_3cid7versionyINtNtCs9SrTLDOTsEo_4core7convert4FromNtB5_7VersionE4fromCshlOgiIj0SRD_11cbor_decode:
   44|    232|    fn from(ver: Version) -> u64 {
   45|    232|        match ver {
   46|      0|            Version::V0 => 0,
   47|    232|            Version::V1 => 1,
   48|       |        }
   49|    232|    }

rust_fuzzer_test_input:
  209|    559|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|    559|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    559|                }
  223|    559|
  224|    559|                __libfuzzer_sys_run(bytes);
  225|    559|                0
  226|    559|            }
_RNvNvCshlOgiIj0SRD_11cbor_decode1__19___libfuzzer_sys_run:
  241|    559|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|       |                $body
  243|    559|            }
LLVMFuzzerTestOneInput:
   58|    559|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    559|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    559|    });
   63|    559|
   64|    559|    match test_input {
   65|    559|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    559|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsa6haWA5TwtQ_13libfuzzer_sys15test_input_wrap0B3_:
   59|    559|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    559|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    559|        rust_fuzzer_test_input(data_slice)
   62|    559|    });

_RNvXs0_NtCsjIAJgk4Fm4y_9multihash5errorNtB5_5ErrorINtNtCs9SrTLDOTsEo_4core7convert4FromNtNtNtCsa9VQedahTrh_3std2io5error5ErrorE4fromCshlOgiIj0SRD_11cbor_decode:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }
_RNvXs1_NtCsjIAJgk4Fm4y_9multihash5errorNtB5_5ErrorINtNtCs9SrTLDOTsEo_4core7convert4FromNtNtCsh1OwLNxVWDy_15unsigned_varint2io9ReadErrorE4fromCshlOgiIj0SRD_11cbor_decode:
   44|     10|    fn from(err: ReadError) -> Self {
   45|     10|        match err {
   46|      3|            ReadError::Io(err) => Self::Io(err),
   47|      7|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     10|    }

_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E6digestCshlOgiIj0SRD_11cbor_decode:
  130|    252|    pub fn digest(&self) -> &[u8] {
  131|    252|        &self.digest[..self.size as usize]
  132|    252|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4codeCshlOgiIj0SRD_11cbor_decode:
  120|    274|    pub const fn code(&self) -> u64 {
  121|    274|        self.code
  122|    274|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4wrapCshlOgiIj0SRD_11cbor_decode:
  101|     22|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     22|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     22|        }
  105|     22|        let size = input_digest.len();
  106|     22|        let mut digest = [0; S];
  107|     22|        let mut i = 0;
  108|    726|        while i < size {
  109|    704|            digest[i] = input_digest[i];
  110|    704|            i += 1;
  111|    704|        }
  112|     22|        Ok(Self {
  113|     22|            code,
  114|     22|            size: size as u8,
  115|     22|            digest,
  116|     22|        })
  117|     22|    }
_RINvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECshlOgiIj0SRD_11cbor_decode:
  135|    252|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    252|    where
  137|    252|        Self: Sized,
  138|    252|    {
  139|    252|        let (code, size, digest) = read_multihash(r)?;
  140|    236|        Ok(Self { code, size, digest })
  141|    252|    }
_RINvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECshlOgiIj0SRD_11cbor_decode:
  163|     20|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     20|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     20|    }
_RINvNtCsjIAJgk4Fm4y_9multihash9multihash14read_multihashQRShKj40_ECshlOgiIj0SRD_11cbor_decode:
  335|    252|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    252|where
  337|    252|    R: io::Read,
  338|    252|{
  339|    252|    let code = read_u64(&mut r)?;
  340|    250|    let size = read_u64(&mut r)?;
  341|       |
  342|    242|    if size > S as u64 || size > u8::MAX as u64 {
  343|      5|        return Err(Error::InvalidSize(size));
  344|    237|    }
  345|    237|
  346|    237|    let mut digest = [0; S];
  347|    237|    r.read_exact(&mut digest[..size as usize])?;
  348|    236|    Ok((code, size as u8, digest))
  349|    252|}
_RINvNtCsjIAJgk4Fm4y_9multihash9multihash15write_multihashQQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECshlOgiIj0SRD_11cbor_decode:
  310|    232|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    232|where
  312|    232|    W: io::Write,
  313|    232|{
  314|    232|    let mut code_buf = varint_encode::u64_buffer();
  315|    232|    let code = varint_encode::u64(code, &mut code_buf);
  316|    232|
  317|    232|    let mut size_buf = varint_encode::u8_buffer();
  318|    232|    let size = varint_encode::u8(size, &mut size_buf);
  319|    232|
  320|    232|    let written = code.len() + size.len() + digest.len();
  321|    232|
  322|    232|    w.write_all(code)?;
  323|    232|    w.write_all(size)?;
  324|    232|    w.write_all(digest)?;
  325|       |
  326|    232|    Ok(written)
  327|    232|}
_RINvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECshlOgiIj0SRD_11cbor_decode:
  163|    232|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    232|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    232|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4sizeCshlOgiIj0SRD_11cbor_decode:
  125|    274|    pub const fn size(&self) -> u8 {
  126|    274|        self.size
  127|    274|    }
_RINvNtCsjIAJgk4Fm4y_9multihash9multihash15write_multihashQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECshlOgiIj0SRD_11cbor_decode:
  310|     20|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     20|where
  312|     20|    W: io::Write,
  313|     20|{
  314|     20|    let mut code_buf = varint_encode::u64_buffer();
  315|     20|    let code = varint_encode::u64(code, &mut code_buf);
  316|     20|
  317|     20|    let mut size_buf = varint_encode::u8_buffer();
  318|     20|    let size = varint_encode::u8(size, &mut size_buf);
  319|     20|
  320|     20|    let written = code.len() + size.len() + digest.len();
  321|     20|
  322|     20|    w.write_all(code)?;
  323|     20|    w.write_all(size)?;
  324|     20|    w.write_all(digest)?;
  325|       |
  326|     20|    Ok(written)
  327|     20|}

_RNvYNtNtNtCscxungraXhZF_10fvm_shared7address8protocol8ProtocolNtNtCs1o5kPwn786I_10num_traits4cast13FromPrimitive7from_u8B8_:
  448|  2.29k|    fn from_u8(n: u8) -> Option<Self> {
  449|  2.29k|        FromPrimitive::from_u64(From::from(n))
  450|  2.29k|    }

_RNvMs2_NtCsl7lNOXGcE0N_9once_cell3impINtB5_8OnceCellNtNtCsfyv4r1PwjHS_5alloc6string6StringE14is_initializedCshlOgiIj0SRD_11cbor_decode:
   49|    559|    pub(crate) fn is_initialized(&self) -> bool {
   50|    559|        // An `Acquire` load is enough because that makes all the initialization
   51|    559|        // operations visible to us, and, this being a fast path, weaker
   52|    559|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    559|        // `SeqCst` operations on the slow path.
   54|    559|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    559|    }

_RNvMs4_NtCsl7lNOXGcE0N_9once_cell4syncINtB5_8OnceCellNtNtCsfyv4r1PwjHS_5alloc6string6StringE3getCshlOgiIj0SRD_11cbor_decode:
  965|    559|        pub fn get(&self) -> Option<&T> {
  966|    559|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    559|                None
  971|       |            }
  972|    559|        }

_RINvCsacNEgsRTSCS_10scopeguard5guardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBy_EuECshlOgiIj0SRD_11cbor_decode:
  375|  1.19k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|  1.19k|where
  377|  1.19k|    F: FnOnce(T),
  378|  1.19k|{
  379|  1.19k|    ScopeGuard::with_strategy(v, dropfn)
  380|  1.19k|}
_RNvXCsacNEgsRTSCS_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|  1.19k|    fn should_run() -> bool {
  232|  1.19k|        true
  233|  1.19k|    }
_RNvXs4_CsacNEgsRTSCS_10scopeguardINtB5_10ScopeGuardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs9SrTLDOTsEo_4core3ops5deref8DerefMut9deref_mutCshlOgiIj0SRD_11cbor_decode:
  460|  1.19k|    fn deref_mut(&mut self) -> &mut T {
  461|  1.19k|        &mut *self.value
  462|  1.19k|    }
_RNvXs5_CsacNEgsRTSCS_10scopeguardINtB5_10ScopeGuardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs9SrTLDOTsEo_4core3ops4drop4Drop4dropCshlOgiIj0SRD_11cbor_decode:
  470|  1.19k|    fn drop(&mut self) {
  471|  1.19k|        // This is OK because the fields are `ManuallyDrop`s
  472|  1.19k|        // which will not be dropped by the compiler.
  473|  1.19k|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|  1.19k|        if S::should_run() {
  475|  1.19k|            dropfn(value);
  476|  1.19k|        }
  477|  1.19k|    }
_RNvMs1_CsacNEgsRTSCS_10scopeguardINtB5_10ScopeGuardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCshlOgiIj0SRD_11cbor_decode:
  326|  1.19k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|  1.19k|        ScopeGuard {
  328|  1.19k|            value: ManuallyDrop::new(v),
  329|  1.19k|            dropfn: ManuallyDrop::new(dropfn),
  330|  1.19k|            strategy: PhantomData,
  331|  1.19k|        }
  332|  1.19k|    }

_RINvXsX_NtNtCs2xjNbAYLrNs_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  111|    557|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  112|    557|            where
  113|    557|                D: Deserializer<'de>,
  114|    557|            {
  115|    557|                struct PrimitiveVisitor;
  116|    557|
  117|    557|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  118|    557|                    type Value = $primitive;
  119|    557|
  120|    557|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  121|    557|                        formatter.write_str(stringify!($primitive))
  122|    557|                    }
  123|    557|
  124|    557|                    $($($method!($val : $visit);)*)*
  125|    557|                }
  126|    557|
  127|    557|                deserializer.$deserialize(PrimitiveVisitor)
  128|    557|            }
_RINvXNvXsX_NtNtCs2xjNbAYLrNs_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
  136|    541|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  137|    541|        where
  138|    541|            E: Error,
  139|    541|        {
  140|    541|            Ok(v)
  141|    541|        }
_RINvXsh_NtNtCs2xjNbAYLrNs_5serde2de5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
 1009|    508|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1010|    508|    where
 1011|    508|        D: Deserializer<'de>,
 1012|    508|    {
 1013|    508|        struct VecVisitor<T> {
 1014|    508|            marker: PhantomData<T>,
 1015|    508|        }
 1016|    508|
 1017|    508|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1018|    508|        where
 1019|    508|            T: Deserialize<'de>,
 1020|    508|        {
 1021|    508|            type Value = Vec<T>;
 1022|    508|
 1023|    508|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1024|    508|                formatter.write_str("a sequence")
 1025|    508|            }
 1026|    508|
 1027|    508|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|    508|            where
 1029|    508|                A: SeqAccess<'de>,
 1030|    508|            {
 1031|    508|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|    508|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|    508|
 1034|    508|                while let Some(value) = tri!(seq.next_element()) {
 1035|    508|                    values.push(value);
 1036|    508|                }
 1037|    508|
 1038|    508|                Ok(values)
 1039|    508|            }
 1040|    508|        }
 1041|    508|
 1042|    508|        let visitor = VecVisitor {
 1043|    508|            marker: PhantomData,
 1044|    508|        };
 1045|    508|        deserializer.deserialize_seq(visitor)
 1046|    508|    }
_RINvXNvXsh_NtNtCs2xjNbAYLrNs_5serde2de5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCscxungraXhZF_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
 1027|    484|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|    484|            where
 1029|    484|                A: SeqAccess<'de>,
 1030|    484|            {
 1031|    484|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|    484|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|       |
 1034|  2.24k|                while let Some(value) = tri!(seq.next_element()) {
 1035|  1.76k|                    values.push(value);
 1036|  1.76k|                }
 1037|       |
 1038|    391|                Ok(values)
 1039|    484|            }

_RINvYNtNtCsdutg7qHs94C_3cid5serde17BytesToCidVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor14visit_byte_bufINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
 1586|      7|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1587|      7|    where
 1588|      7|        E: Error,
 1589|      7|    {
 1590|      7|        self.visit_bytes(&v)
 1591|      7|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEECshlOgiIj0SRD_11cbor_decode:
 1722|    508|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    508|    where
 1724|    508|        T: Deserialize<'de>,
 1725|    508|    {
 1726|    508|        self.next_element_seed(PhantomData)
 1727|    508|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECshlOgiIj0SRD_11cbor_decode:
 1722|    671|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    671|    where
 1724|    671|        T: Deserialize<'de>,
 1725|    671|    {
 1726|    671|        self.next_element_seed(PhantomData)
 1727|    671|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  790|    671|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    671|    where
  792|    671|        D: Deserializer<'de>,
  793|    671|    {
  794|    671|        T::deserialize(deserializer)
  795|    671|    }
_RINvYNtNtCsdutg7qHs94C_3cid5serde17BytesToCidVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor20visit_borrowed_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
 1562|    288|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    288|    where
 1564|    288|        E: Error,
 1565|    288|    {
 1566|    288|        self.visit_bytes(v)
 1567|    288|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  790|    391|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    391|    where
  792|    391|        D: Deserializer<'de>,
  793|    391|    {
  794|    391|        T::deserialize(deserializer)
  795|    391|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  790|  2.39k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  2.39k|    where
  792|  2.39k|        D: Deserializer<'de>,
  793|  2.39k|    {
  794|  2.39k|        T::deserialize(deserializer)
  795|  2.39k|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EECshlOgiIj0SRD_11cbor_decode:
 1722|    318|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    318|    where
 1724|    318|        T: Deserialize<'de>,
 1725|    318|    {
 1726|    318|        self.next_element_seed(PhantomData)
 1727|    318|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtNtCscxungraXhZF_10fvm_shared7address7AddressECshlOgiIj0SRD_11cbor_decode:
 1722|  2.78k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  2.78k|    where
 1724|  2.78k|        T: Deserialize<'de>,
 1725|  2.78k|    {
 1726|  2.78k|        self.next_element_seed(PhantomData)
 1727|  2.78k|    }
_RINvYNtNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor20visit_borrowed_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
 1562|    863|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    863|    where
 1564|    863|        E: Error,
 1565|    863|    {
 1566|    863|        self.visit_bytes(v)
 1567|    863|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  790|    341|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    341|    where
  792|    341|        D: Deserializer<'de>,
  793|    341|    {
  794|    341|        T::deserialize(deserializer)
  795|    341|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECshlOgiIj0SRD_11cbor_decode:
 1722|    341|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    341|    where
 1724|    341|        T: Deserialize<'de>,
 1725|    341|    {
 1726|    341|        self.next_element_seed(PhantomData)
 1727|    341|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementyECshlOgiIj0SRD_11cbor_decode:
 1722|    557|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    557|    where
 1724|    557|        T: Deserialize<'de>,
 1725|    557|    {
 1726|    557|        self.next_element_seed(PhantomData)
 1727|    557|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  790|    508|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    508|    where
  792|    508|        D: Deserializer<'de>,
  793|    508|    {
  794|    508|        T::deserialize(deserializer)
  795|    508|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  790|    557|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    557|    where
  792|    557|        D: Deserializer<'de>,
  793|    557|    {
  794|    557|        T::deserialize(deserializer)
  795|    557|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  790|    318|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    318|    where
  792|    318|        D: Deserializer<'de>,
  793|    318|    {
  794|    318|        T::deserialize(deserializer)
  795|    318|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldECshlOgiIj0SRD_11cbor_decode:
 1722|    391|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    391|    where
 1724|    391|        T: Deserialize<'de>,
 1725|    391|    {
 1726|    391|        self.next_element_seed(PhantomData)
 1727|    391|    }

_RINvNtNtCs2xjNbAYLrNs_5serde2de9size_hint8cautiousNtNtCscxungraXhZF_10fvm_shared7address7AddressECshlOgiIj0SRD_11cbor_decode:
   11|    484|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|    484|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|    484|
   14|    484|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|    484|        cmp::min(
   18|    484|            hint.unwrap_or(0),
   19|    484|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|    484|        )
   21|       |    }
   22|    484|}

_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  452|    252|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    252|            where
  454|    252|                S: Serializer,
  455|    252|            {
  456|    252|                (**self).serialize(serializer)
  457|    252|            }
_RINvXs1m_NtNtCs2xjNbAYLrNs_5serde3ser5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  190|    252|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|    252|            where
  192|    252|                S: Serializer,
  193|    252|            {
  194|    252|                serializer.collect_seq(self)
  195|    252|            }
_RINvXsH_NtNtCs2xjNbAYLrNs_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   11|    252|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    252|            where
   13|    252|                S: Serializer,
   14|    252|            {
   15|    252|                serializer.$method(*self $($cast)*)
   16|    252|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  452|    252|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    252|            where
  454|    252|                S: Serializer,
  455|    252|            {
  456|    252|                (**self).serialize(serializer)
  457|    252|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  452|    252|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    252|            where
  454|    252|                S: Serializer,
  455|    252|            {
  456|    252|                (**self).serialize(serializer)
  457|    252|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  452|    252|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    252|            where
  454|    252|                S: Serializer,
  455|    252|            {
  456|    252|                (**self).serialize(serializer)
  457|    252|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRNtNtCscxungraXhZF_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  452|    900|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    900|            where
  454|    900|                S: Serializer,
  455|    900|            {
  456|    900|                (**self).serialize(serializer)
  457|    900|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRINtNtCsdutg7qHs94C_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  452|    252|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    252|            where
  454|    252|                S: Serializer,
  455|    252|            {
  456|    252|                (**self).serialize(serializer)
  457|    252|            }

_RNCINvYQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer11collect_seqRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEE0CshlOgiIj0SRD_11cbor_decode:
 1278|    648|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer11collect_seqRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEECshlOgiIj0SRD_11cbor_decode:
 1271|    252|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|    252|    where
 1273|    252|        I: IntoIterator,
 1274|    252|        <I as IntoIterator>::Item: Serialize,
 1275|    252|    {
 1276|    252|        let mut iter = iter.into_iter();
 1277|    252|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|    252|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|    252|        serializer.end()
 1280|    252|    }
_RINvNtCs2xjNbAYLrNs_5serde3ser17iterator_len_hintINtNtNtCs9SrTLDOTsEo_4core5slice4iter4IterNtNtCscxungraXhZF_10fvm_shared7address7AddressEECshlOgiIj0SRD_11cbor_decode:
 1944|    252|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|    252|where
 1946|    252|    I: Iterator,
 1947|    252|{
 1948|    252|    match iter.size_hint() {
 1949|    252|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|    252|}

_RINvMNtCshC5wrnBZx9o_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECshlOgiIj0SRD_11cbor_decode:
   60|    252|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    252|        ByteBuf {
   62|    252|            bytes: bytes.into(),
   63|    252|        }
   64|    252|    }
_RINvXsc_NtCshC5wrnBZx9o_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  186|    252|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    252|    where
  188|    252|        S: Serializer,
  189|    252|    {
  190|    252|        serializer.serialize_bytes(&self.bytes)
  191|    252|    }

_RINvNtCsazDgIAEeCwb_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderECshlOgiIj0SRD_11cbor_decode:
   26|    561|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    561|    let buf = match reader.fill(1)? {
   28|    561|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    561|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|    308|    Ok(byte)
   33|    561|}

_RINvNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de10from_sliceNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECshlOgiIj0SRD_11cbor_decode:
   40|    685|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    685|where
   42|    685|    T: de::Deserialize<'a>,
   43|    685|{
   44|    685|    let reader = SliceReader::new(buf);
   45|    685|    let mut deserializer = Deserializer::from_reader(reader);
   46|    685|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    258|    deserializer.end()?;
   48|    252|    Ok(value)
   49|    685|}
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECshlOgiIj0SRD_11cbor_decode:
  476|    341|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    341|    where
  478|    341|        T: de::DeserializeSeed<'de>,
  479|    341|    {
  480|    341|        if self.len > 0 {
  481|    341|            self.len -= 1;
  482|    341|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    341|    }
_RINvXs7_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_bytesNtNtCsdutg7qHs94C_3cid5serde17BytesToCidVisitorECshlOgiIj0SRD_11cbor_decode:
  628|    303|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  629|    303|        let byte = peek_one(&mut self.0.reader)?;
  630|    302|        match dec::if_major(byte) {
  631|       |            major::BYTES => {
  632|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  633|    301|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  634|    290|                    Cow::Borrowed(buf) => {
  635|    290|                        if buf.len() <= 1 || buf[0] != 0 {
  636|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  637|       |                        } else {
  638|    288|                            visitor.visit_borrowed_bytes(&buf[1..])
  639|       |                        }
  640|       |                    }
  641|      9|                    Cow::Owned(mut buf) => {
  642|      9|                        if buf.len() <= 1 || buf[0] != 0 {
  643|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  644|       |                        } else {
  645|      7|                            buf.remove(0);
  646|      7|                            visitor.visit_byte_buf(buf)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |            }
  651|      1|            _ => Err(DecodeError::Unsupported { byte }),
  652|       |        }
  653|    303|    }
_RINvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECshlOgiIj0SRD_11cbor_decode:
  113|    318|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    318|    where
  115|    318|        V: Visitor<'de>,
  116|    318|    {
  117|    318|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    308|        match tag.0 {
  120|    303|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      5|            _ => Err(DecodeError::TypeMismatch {
  122|      5|                name: "CBOR tag",
  123|      5|                byte: tag.0 as u8,
  124|      5|            }),
  125|       |        }
  126|    318|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECshlOgiIj0SRD_11cbor_decode:
  476|    671|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    671|    where
  478|    671|        T: de::DeserializeSeed<'de>,
  479|    671|    {
  480|    671|        if self.len > 0 {
  481|    671|            self.len -= 1;
  482|    671|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    671|    }
_RNCNvMs1_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE5arrays_0CshlOgiIj0SRD_11cbor_decode:
  437|    484|            move |len| Ok(Accessor { de, len }),
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECshlOgiIj0SRD_11cbor_decode:
  239|  2.78k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  2.78k|    where
  241|  2.78k|        V: Visitor<'de>,
  242|  2.78k|    {
  243|  2.78k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|  2.51k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|    182|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  2.78k|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldEECshlOgiIj0SRD_11cbor_decode:
  476|    391|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    391|    where
  478|    391|        T: de::DeserializeSeed<'de>,
  479|    391|    {
  480|    391|        if self.len > 0 {
  481|    391|            self.len -= 1;
  482|    391|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    391|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECshlOgiIj0SRD_11cbor_decode:
  343|    685|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|    685|    where
  345|    685|        V: Visitor<'de>,
  346|    685|    {
  347|    685|        let mut de = self.try_step()?;
  348|    685|        let seq = Accessor::tuple(&mut de, len)?;
  349|    671|        visitor.visit_seq(seq)
  350|    685|    }
_RNvMNtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE11from_readerCshlOgiIj0SRD_11cbor_decode:
   93|    685|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    685|        Deserializer { reader }
   95|    685|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EEECshlOgiIj0SRD_11cbor_decode:
  476|    318|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    318|    where
  478|    318|        T: de::DeserializeSeed<'de>,
  479|    318|    {
  480|    318|        if self.len > 0 {
  481|    318|            self.len -= 1;
  482|    318|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    318|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECshlOgiIj0SRD_11cbor_decode:
  250|  1.01k|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  251|  1.01k|    where
  252|  1.01k|        V: Visitor<'de>,
  253|  1.01k|    {
  254|  1.01k|        self.deserialize_bytes(visitor)
  255|  1.01k|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDatayEECshlOgiIj0SRD_11cbor_decode:
  476|    557|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    557|    where
  478|    557|        T: de::DeserializeSeed<'de>,
  479|    557|    {
  480|    557|        if self.len > 0 {
  481|    557|            self.len -= 1;
  482|    557|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    557|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCscxungraXhZF_10fvm_shared7address7AddressEECshlOgiIj0SRD_11cbor_decode:
  333|    508|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|    508|    where
  335|    508|        V: Visitor<'de>,
  336|    508|    {
  337|    508|        let mut de = self.try_step()?;
  338|    508|        let seq = Accessor::array(&mut de)?;
  339|    484|        visitor.visit_seq(seq)
  340|    508|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECshlOgiIj0SRD_11cbor_decode:
  142|    557|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    557|        where V: Visitor<'de>
  144|    557|        {
  145|    557|            let value = <$t>::decode(&mut self.reader)?;
  146|    541|            visitor.$visit(value)
  147|    557|        }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECshlOgiIj0SRD_11cbor_decode:
  239|  1.01k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  1.01k|    where
  241|  1.01k|        V: Visitor<'de>,
  242|  1.01k|    {
  243|  1.01k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|    863|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|     12|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  1.01k|    }
_RNCNvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE8try_step0CshlOgiIj0SRD_11cbor_decode:
  106|  1.19k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RNvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE3endCshlOgiIj0SRD_11cbor_decode:
  130|    258|    pub fn end(&mut self) -> Result<(), DecodeError<R::Error>> {
  131|    258|        match peek_one(&mut self.reader) {
  132|      6|            Ok(_) => Err(DecodeError::TrailingData),
  133|    252|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    258|    }
_RNvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE8try_stepCshlOgiIj0SRD_11cbor_decode:
  101|  1.19k|    fn try_step<'a>(
  102|  1.19k|        &'a mut self,
  103|  1.19k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|  1.19k|    {
  105|  1.19k|        if self.reader.step_in() {
  106|  1.19k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|  1.19k|    }
_RNCNvMs1_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE5array0CshlOgiIj0SRD_11cbor_decode:
  436|      1|            || Err(DecodeError::IndefiniteSize),
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCscxungraXhZF_10fvm_shared7address7AddressEECshlOgiIj0SRD_11cbor_decode:
  476|  2.78k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  2.78k|    where
  478|  2.78k|        T: de::DeserializeSeed<'de>,
  479|  2.78k|    {
  480|  2.78k|        if self.len > 0 {
  481|  2.39k|            self.len -= 1;
  482|  2.39k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|    391|            Ok(None)
  485|       |        }
  486|  2.78k|    }
_RNvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess9size_hintCshlOgiIj0SRD_11cbor_decode:
  489|    484|    fn size_hint(&self) -> Option<usize> {
  490|    484|        Some(self.len)
  491|    484|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECshlOgiIj0SRD_11cbor_decode:
  353|    685|    fn deserialize_tuple_struct<V>(
  354|    685|        self,
  355|    685|        _name: &'static str,
  356|    685|        len: usize,
  357|    685|        visitor: V,
  358|    685|    ) -> Result<V::Value, Self::Error>
  359|    685|    where
  360|    685|        V: Visitor<'de>,
  361|    685|    {
  362|    685|        self.deserialize_tuple(len, visitor)
  363|    685|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEEECshlOgiIj0SRD_11cbor_decode:
  476|    508|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    508|    where
  478|    508|        T: de::DeserializeSeed<'de>,
  479|    508|    {
  480|    508|        if self.len > 0 {
  481|    508|            self.len -= 1;
  482|    508|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    508|    }
_RNvMs1_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE5arrayCshlOgiIj0SRD_11cbor_decode:
  433|    508|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  434|    508|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  435|    485|        array_start.0.map_or_else(
  436|    485|            || Err(DecodeError::IndefiniteSize),
  437|    485|            move |len| Ok(Accessor { de, len }),
  438|    485|        )
  439|    508|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECshlOgiIj0SRD_11cbor_decode:
  317|    318|    fn deserialize_newtype_struct<V>(
  318|    318|        self,
  319|    318|        name: &'static str,
  320|    318|        visitor: V,
  321|    318|    ) -> Result<V::Value, Self::Error>
  322|    318|    where
  323|    318|        V: Visitor<'de>,
  324|    318|    {
  325|    318|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  326|    318|            self.deserialize_cid(visitor)
  327|       |        } else {
  328|      0|            visitor.visit_newtype_struct(self)
  329|       |        }
  330|    318|    }
_RNvMs1_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE5tupleCshlOgiIj0SRD_11cbor_decode:
  442|    685|    pub fn tuple(
  443|    685|        de: &'a mut Deserializer<R>,
  444|    685|        len: usize,
  445|    685|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  446|    685|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  447|       |
  448|    678|        if array_start.0 == Some(len) {
  449|    671|            Ok(Accessor { de, len })
  450|       |        } else {
  451|      7|            Err(DecodeError::RequireLength {
  452|      7|                name: "tuple",
  453|      7|                expect: len,
  454|      7|                value: array_start.0.unwrap_or(0),
  455|      7|            })
  456|       |        }
  457|    685|    }

_RNvXs9_NtCsazDgIAEeCwb_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCshlOgiIj0SRD_11cbor_decode:
   70|    433|#[derive(Debug)]
_RINvXs4_NtCsazDgIAEeCwb_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleENtNtCs2xjNbAYLrNs_5serde2de5Error6customNtNtNtCscxungraXhZF_10fvm_shared7address6errors5ErrorECshlOgiIj0SRD_11cbor_decode:
  136|     38|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     38|        DecodeError::Msg(msg.to_string())
  138|     38|    }
_RNvXs7_NtCsazDgIAEeCwb_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEINtB16_4FromINtNtCs1YscacFooSg_7cbor4ii5error11DecodeErrorB14_EE4fromCshlOgiIj0SRD_11cbor_decode:
  169|    289|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  170|    289|        match err {
  171|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  172|    249|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  173|     39|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  174|     39|                DecodeError::Mismatch { expect_major, byte }
  175|       |            }
  176|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  177|      0|                DecodeError::TypeMismatch { name, byte }
  178|       |            }
  179|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  180|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  181|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  182|       |            cbor4ii::DecodeError::RequireLength {
  183|      0|                name,
  184|      0|                expect,
  185|      0|                value,
  186|      0|            } => DecodeError::RequireLength {
  187|      0|                name,
  188|      0|                expect,
  189|      0|                value,
  190|      0|            },
  191|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  192|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  193|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  194|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  195|      0|            _ => DecodeError::Msg(err.to_string()),
  196|       |        }
  197|    289|    }
_RNvXs6_NtCsazDgIAEeCwb_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCshlOgiIj0SRD_11cbor_decode:
  163|    433|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  164|    433|        fmt::Debug::fmt(self, f)
  165|    433|    }
_RINvXs4_NtCsazDgIAEeCwb_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleENtNtCs2xjNbAYLrNs_5serde2de5Error6customNtNtCsfyv4r1PwjHS_5alloc6string6StringECshlOgiIj0SRD_11cbor_decode:
  136|     37|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     37|        DecodeError::Msg(msg.to_string())
  138|     37|    }
_RINvXs4_NtCsazDgIAEeCwb_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleENtNtCs2xjNbAYLrNs_5serde2de5Error6customNtNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus5error5ErrorECshlOgiIj0SRD_11cbor_decode:
  136|     44|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     44|        DecodeError::Msg(msg.to_string())
  138|     44|    }

_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCscxungraXhZF_10fvm_shared7address7AddressECshlOgiIj0SRD_11cbor_decode:
  414|    252|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    252|        value.serialize(&mut *self.ser)
  416|    252|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer22serialize_tuple_structCshlOgiIj0SRD_11cbor_decode:
  244|    252|    fn serialize_tuple_struct(
  245|    252|        self,
  246|    252|        _name: &'static str,
  247|    252|        len: usize,
  248|    252|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    252|        self.serialize_tuple(len)
  250|    252|    }
_RNvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser12SerializeSeq3endCshlOgiIj0SRD_11cbor_decode:
  385|    252|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|    252|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|    252|        }
  389|       |
  390|    252|        Ok(())
  391|    252|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser12SerializeSeq17serialize_elementRNtNtCscxungraXhZF_10fvm_shared7address7AddressECshlOgiIj0SRD_11cbor_decode:
  380|    648|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|    648|        value.serialize(&mut *self.ser)
  382|    648|    }
_RNvMNtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterE3newCshlOgiIj0SRD_11cbor_decode:
   51|    252|    pub fn new(writer: W) -> Serializer<W> {
   52|    252|        Serializer { writer }
   53|    252|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEECshlOgiIj0SRD_11cbor_decode:
  414|    252|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    252|        value.serialize(&mut *self.ser)
  416|    252|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer13serialize_seqCshlOgiIj0SRD_11cbor_decode:
  225|    252|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
  226|    252|        if let Some(len) = len {
  227|    252|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    252|        Ok(Collect {
  232|    252|            bounded: len.is_some(),
  233|    252|            ser: self,
  234|    252|        })
  235|    252|    }
_RNvMNtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterE10into_innerCshlOgiIj0SRD_11cbor_decode:
   56|    252|    pub fn into_inner(self) -> W {
   57|    252|        self.writer
   58|    252|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldECshlOgiIj0SRD_11cbor_decode:
  414|    252|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    252|        value.serialize(&mut *self.ser)
  416|    252|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECshlOgiIj0SRD_11cbor_decode:
  414|    252|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    252|        value.serialize(&mut *self.ser)
  416|    252|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer13serialize_u64CshlOgiIj0SRD_11cbor_decode:
  122|    252|    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
  123|    252|        v.encode(&mut self.writer)?;
  124|    252|        Ok(())
  125|    252|    }
_RNvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct3endCshlOgiIj0SRD_11cbor_decode:
  419|    252|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|    252|        Ok(())
  421|    252|    }
_RINvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer24serialize_newtype_structNtNtCshC5wrnBZx9o_11serde_bytes7bytebuf7ByteBufECshlOgiIj0SRD_11cbor_decode:
  199|    252|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    252|        self,
  201|    252|        name: &'static str,
  202|    252|        value: &T,
  203|    252|    ) -> Result<Self::Ok, Self::Error> {
  204|    252|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    252|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    252|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EECshlOgiIj0SRD_11cbor_decode:
  414|    252|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    252|        value.serialize(&mut *self.ser)
  416|    252|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer15serialize_bytesCshlOgiIj0SRD_11cbor_decode:
  159|  1.65k|    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
  160|  1.65k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  1.65k|        Ok(())
  162|  1.65k|    }
_RINvNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser6to_vecNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECshlOgiIj0SRD_11cbor_decode:
   23|    252|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    252|where
   25|    252|    T: Serialize + ?Sized,
   26|    252|{
   27|    252|    let writer = BufWriter::new(Vec::new());
   28|    252|    let mut serializer = Serializer::new(writer);
   29|    252|    value.serialize(&mut serializer)?;
   30|    252|    Ok(serializer.into_inner().into_inner())
   31|    252|}
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer15serialize_tupleCshlOgiIj0SRD_11cbor_decode:
  238|    252|    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
  239|    252|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    252|        Ok(BoundedCollect { ser: self })
  241|    252|    }
_RNvXs7_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer15serialize_bytesCshlOgiIj0SRD_11cbor_decode:
  561|    252|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|    252|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|    252|        let prefixed = [&[0x00], value].concat();
  564|    252|        // CIDs are serialized with CBOR tag 42.
  565|    252|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|    252|        Ok(())
  567|    252|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECshlOgiIj0SRD_11cbor_decode:
  414|    252|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    252|        value.serialize(&mut *self.ser)
  416|    252|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRyECshlOgiIj0SRD_11cbor_decode:
  414|    252|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    252|        value.serialize(&mut *self.ser)
  416|    252|    }

_RINvXs_Cs8RS3iyFEIvR_11serde_tupleINtB5_12DeserializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEENtNtCs2xjNbAYLrNs_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECshlOgiIj0SRD_11cbor_decode:
  353|    685|    fn deserialize_tuple_struct<V>(
  354|    685|        self,
  355|    685|        name: &'static str,
  356|    685|        len: usize,
  357|    685|        visitor: V,
  358|    685|    ) -> Result<V::Value, Self::Error>
  359|    685|    where
  360|    685|        V: serde::de::Visitor<'de>,
  361|    685|    {
  362|    685|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    685|    }
_RNvXCs8RS3iyFEIvR_11serde_tupleINtB2_10SerializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEENtNtCs2xjNbAYLrNs_5serde3ser10Serializer22serialize_tuple_structCshlOgiIj0SRD_11cbor_decode:
  158|    252|    fn serialize_tuple_struct(
  159|    252|        self,
  160|    252|        name: &'static str,
  161|    252|        len: usize,
  162|    252|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    252|        self.0.serialize_tuple_struct(name, len)
  164|    252|    }

_RNvXNtCs3fGevSFxthC_9thiserror7displayRjNtB2_9AsDisplay10as_displayCscxungraXhZF_10fvm_shared:
   19|      4|    fn as_display(&'a self) -> Self::Target {
   20|      4|        *self
   21|      4|    }

_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode7is_lastCshlOgiIj0SRD_11cbor_decode:
   90|  4.68k|pub fn is_last(b: u8) -> bool {
   91|  4.68k|    b & 0x80 == 0
   92|  4.68k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode3u64CshlOgiIj0SRD_11cbor_decode:
  122|  1.07k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.07k|    decode!(buf, 9, u64)
  124|  1.07k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode7is_lastCscxungraXhZF_10fvm_shared:
   90|  6.15k|pub fn is_last(b: u8) -> bool {
   91|  6.15k|    b & 0x80 == 0
   92|  6.15k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode3u64CscxungraXhZF_10fvm_shared:
  122|  1.69k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.69k|    decode!(buf, 9, u64)
  124|  1.69k|}

_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode2u8CshlOgiIj0SRD_11cbor_decode:
   45|    252|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    252|    encode!(number, buf)
   47|    252|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode10u64_bufferCshlOgiIj0SRD_11cbor_decode:
  119|  1.80k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.80k|    [0; U64_LEN]
  121|  1.80k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode3u64CshlOgiIj0SRD_11cbor_decode:
   69|    716|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    716|    encode!(number, buf)
   71|    716|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode9u8_bufferCshlOgiIj0SRD_11cbor_decode:
  101|    252|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    252|    [0; U8_LEN]
  103|    252|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode3u64CscxungraXhZF_10fvm_shared:
   69|    592|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    592|    encode!(number, buf)
   71|    592|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode10u64_bufferCscxungraXhZF_10fvm_shared:
  119|    592|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    592|    [0; U64_LEN]
  121|    592|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode3u64CsaKmXn3VhZf2_17fvm_ipld_bitfield:
   69|  7.67k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  7.67k|    encode!(number, buf)
   71|  7.67k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode10u64_bufferCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  119|  7.67k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  7.67k|    [0; U64_LEN]
  121|  7.67k|}

_RNvXs1_NtCsh1OwLNxVWDy_15unsigned_varint2ioNtB5_9ReadErrorINtNtCs9SrTLDOTsEo_4core7convert4FromNtNtB7_6decode5ErrorE4fromCshlOgiIj0SRD_11cbor_decode:
   91|     11|    fn from(e: decode::Error) -> Self {
   92|     11|        ReadError::Decode(e)
   93|     11|    }
_RINvNtCsh1OwLNxVWDy_15unsigned_varint2io8read_u64QQRShECshlOgiIj0SRD_11cbor_decode:
   31|  1.08k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.08k|                let mut b = encode::$b();
   33|  2.38k|                for i in 0 .. b.len() {
   34|  2.38k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  2.38k|                    if n == 0 {
   36|     14|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  2.37k|                    }
   38|  2.37k|                    if decode::is_last(b[i]) {
   39|  1.07k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.30k|                    }
   41|       |                }
   42|      1|                Err(decode::Error::Overflow.into())
   43|  1.08k|            }

_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  9.50k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.50k|        let next = self.next.take()?;
  484|  9.50k|        self.next = self.iter.next();
  485|  9.50k|        Some(next)
  486|  9.50k|    }
_RNvMsa_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    252|    pub fn new(iter: I) -> Self {
  426|    252|        Self {
  427|    252|            iter: Lookahead::new(iter),
  428|    252|        }
  429|    252|    }
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  9.76k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  9.50k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.76k|        let next = self.next.take()?;
  484|  9.50k|        self.next = self.iter.next();
  485|  9.50k|        Some(next)
  486|  9.76k|    }
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  9.50k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  9.76k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  9.76k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  9.50k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    252|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  9.50k|        if advance_lhs {
  371|  9.50k|            self.lhs.next();
  372|  9.50k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  9.50k|        range
  377|  9.76k|    }
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    252|    fn new(lhs: A, rhs: B) -> Self {
  344|    252|        Self {
  345|    252|            lhs: Lookahead::new(lhs),
  346|    252|            rhs: Lookahead::new(rhs),
  347|    252|            combinator: Default::default(),
  348|    252|        }
  349|    252|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    252|    fn new(mut iter: I) -> Self {
  469|    252|        let next = iter.next();
  470|    252|        Self { iter, next }
  471|    252|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  9.50k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.50k|        self.next.as_mut()
  475|  9.50k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  9.50k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.50k|        self.next.as_mut()
  475|  9.50k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    252|    fn new(mut iter: I) -> Self {
  469|    252|        let next = iter.next();
  470|    252|        Self { iter, next }
  471|    252|    }
_RNvXs6_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  312|  9.76k|        self.0.next()
  313|  9.76k|    }
_RNvMsa_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    252|    pub fn new(iter: I) -> Self {
  426|    252|        Self {
  427|    252|            iter: Lookahead::new(iter),
  428|    252|        }
  429|    252|    }
_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  9.50k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.50k|        let next = self.next.take()?;
  484|  9.50k|        self.next = self.iter.next();
  485|  9.50k|        Some(next)
  486|  9.50k|    }
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  9.76k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  9.76k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  9.50k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    252|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  9.50k|        if advance_lhs {
  371|  9.50k|            self.lhs.next();
  372|  9.50k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  9.50k|        range
  377|  9.76k|    }
_RNvXsf_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB9_:
   87|    252|#[derive(Default)]
_RNvXs6_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  312|  9.76k|        self.0.next()
  313|  9.76k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  19.5k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  19.5k|        self.next.as_mut()
  475|  19.5k|    }
_RNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  389|  9.76k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  9.76k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  9.76k|    }
_RNvXs0_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tailB9_:
  182|  9.50k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  9.50k|        // the difference between a range and an empty range is just that range
  184|  9.50k|        Some(lhs)
  185|  9.50k|    }
_RNvMs5_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    252|    pub fn new(a: A, b: B) -> Self {
  299|    252|        Self(Merge::new(_Combine::new(a, b)))
  300|    252|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|    504|    fn new(mut iter: I) -> Self {
  469|    504|        let next = iter.next();
  470|    504|        Self { iter, next }
  471|    504|    }
_RNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  389|  9.76k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  9.76k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  9.76k|    }
_RNvXNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tailB6_:
  110|  9.50k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  9.50k|        // the union of a range and an empty range is just that range
  112|  9.50k|        Some(lhs)
  113|  9.50k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  9.76k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.76k|        self.next.as_mut()
  475|  9.76k|    }
_RNvMs5_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    252|    pub fn new(a: A, b: B) -> Self {
  299|    252|        Self(Merge::new(_Combine::new(a, b)))
  300|    252|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    252|    fn new(mut iter: I) -> Self {
  469|    252|        let next = iter.next();
  470|    252|        Self { iter, next }
  471|    252|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    252|    fn new(mut iter: I) -> Self {
  469|    252|        let next = iter.next();
  470|    252|        Self { iter, next }
  471|    252|    }
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  9.76k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  9.76k|        let next = self.next.take()?;
  484|  9.50k|        self.next = self.iter.next();
  485|  9.50k|        Some(next)
  486|  9.76k|    }
_RNvXsh_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB9_:
  152|    252|#[derive(Default)]
_RNvXsb_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  439|  9.76k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  9.50k|        while let Some(next) = self.iter.peek() {
  444|  9.36k|            if next.start > range.end {
  445|  9.36k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  9.50k|        Some(range)
  453|  9.76k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  9.76k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.76k|        self.next.as_mut()
  475|  9.76k|    }
_RNvXsb_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  439|  9.76k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  9.50k|        while let Some(next) = self.iter.peek() {
  444|  9.36k|            if next.start > range.end {
  445|  9.36k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  9.50k|        Some(range)
  453|  9.76k|    }
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    252|    fn new(lhs: A, rhs: B) -> Self {
  344|    252|        Self {
  345|    252|            lhs: Lookahead::new(lhs),
  346|    252|            rhs: Lookahead::new(rhs),
  347|    252|            combinator: Default::default(),
  348|    252|        }
  349|    252|    }

_RNvXs3_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|    504|    fn next(&mut self) -> Option<Self::Item> {
  155|    504|        self.0.next()
  156|    504|    }
_RINvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEEB4_:
  164|    504|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|    504|    let mut iter = bits.into_iter().peekable();
  166|    504|
  167|    504|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|    504|    }))
  181|    504|}
_RINvMs2_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    252|    pub fn new<II>(iter: II) -> Self
  141|    252|    where
  142|    252|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    252|    {
  144|    252|        Self(iter.into_iter())
  145|    252|    }
_RNvXs3_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  9.76k|    fn next(&mut self) -> Option<Self::Item> {
  155|  9.76k|        self.0.next()
  156|  9.76k|    }
_RINvMs2_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|    504|    pub fn new<II>(iter: II) -> Self
  141|    504|    where
  142|    504|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    504|    {
  144|    504|        Self(iter.into_iter())
  145|    504|    }
_RNCINvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0B6_:
  167|    504|    Ranges::new(iter::from_fn(move || {
  168|    504|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|    504|    }))
_RINvYINtNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    252|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    252|        Combine::new(self, other)
   34|    252|    }
_RINvYINtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    252|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    252|        Combine::new(self, other)
   24|    252|    }

_RNvXsa_CsaKmXn3VhZf2_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB5_:
   42|    341|#[derive(Debug, Default, Clone)]
_RNvMs4_CsaKmXn3VhZf2_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|    252|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|    252|        self.inner_ranges()
  291|    252|            .union(ranges_from_bits(self.set.iter().copied()))
  292|    252|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|    252|    }
_RNvMs4_CsaKmXn3VhZf2_17fvm_ipld_bitfieldNtB5_8BitField12inner_rangesB5_:
  283|    252|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|    252|        iter::Ranges::new(self.ranges.iter().cloned())
  285|    252|    }

_RNvXNtCsaKmXn3VhZf2_17fvm_ipld_bitfield5rangeINtNtNtCs9SrTLDOTsEo_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  9.50k|    fn size(&self) -> Self::Idx {
   17|  9.50k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  9.50k|            self.end - self.start
   21|       |        }
   22|  9.50k|    }

_RNvXs5_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCs9SrTLDOTsEo_4core3fmt7Display3fmt:
    5|     44|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   83|    252|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    252|    where
   85|    252|        S: Serializer,
   86|    252|    {
   87|    252|        let bytes = self.to_bytes();
   88|    252|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    252|        }
   94|    252|        strict_bytes::serialize(&bytes, serializer)
   95|    252|    }
_RINvXs_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   99|    391|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    391|    where
  101|    391|        D: Deserializer<'de>,
  102|    391|    {
  103|    391|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    385|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    385|        }
  110|    385|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    391|    }
_RNvMs1_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    252|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    252|        let mut iter = self.ranges();
  203|       |
  204|    252|        let first_range = match iter.next() {
  205|    146|            Some(range) => range,
  206|    106|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    146|        let mut writer = BitWriter::new();
  210|    146|        writer.write(0, 2); // version 00
  211|    146|
  212|    146|        if first_range.start == 0 {
  213|     70|            writer.write(1, 1); // the first bit is a 1
  214|     76|        } else {
  215|     76|            writer.write(0, 1); // the first bit is a 0
  216|     76|            writer.write_len(first_range.start); // the number of leading 0s
  217|     76|        }
  218|       |
  219|    146|        writer.write_len(first_range.size());
  220|    146|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  9.50k|        for range in iter {
  225|  9.36k|            writer.write_len(range.start - index); // zeros
  226|  9.36k|            writer.write_len(range.size()); // ones
  227|  9.36k|            index = range.end;
  228|  9.36k|        }
  229|       |
  230|    146|        writer.finish()
  231|    252|    }
_RNvMs1_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    385|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    385|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    384|        let version = reader.read(2);
  162|    384|        if version != 0 {
  163|      3|            return Err(Error::UnsupportedVersion);
  164|    381|        }
  165|    381|
  166|    381|        let mut next_value = reader.read(1) == 1;
  167|    381|        let mut ranges = Vec::new();
  168|    381|        let mut index = 0u64;
  169|    381|        let mut total_len: u64 = 0;
  170|       |
  171|  24.1k|        while let Some(len) = reader.read_len()? {
  172|  23.7k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  23.7k|            if ovf {
  174|      1|                return Err(Error::RLEOverflow);
  175|  23.7k|            }
  176|  23.7k|            total_len = new_total_len;
  177|  23.7k|            let start = index;
  178|  23.7k|            index += len;
  179|  23.7k|            let end = index;
  180|  23.7k|
  181|  23.7k|            if next_value {
  182|  11.9k|                ranges.push(start..end);
  183|  11.9k|            }
  184|       |
  185|  23.7k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    352|        if next_value {
  191|     11|            return Err(Error::NotMinimal);
  192|    341|        }
  193|    341|
  194|    341|        Ok(Self {
  195|    341|            ranges,
  196|    341|            ..Default::default()
  197|    341|        })
  198|    385|    }

_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  40.9k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  40.9k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  40.9k|        let res = self.peek(num_bits);
   86|  40.9k|        self.drop(num_bits);
   87|  40.9k|
   88|  40.9k|        res
   89|  40.9k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  64.7k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  64.7k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  64.7k|        let mask = (1 << num_bits) - 1;
   56|  64.7k|        (self.bits & mask) as u8
   57|  64.7k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  64.7k|    pub fn drop(&mut self, num_bits: u32) {
   62|  64.7k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  64.7k|        self.bits >>= num_bits;
   66|  64.7k|        self.num_bits -= num_bits;
   67|  64.7k|
   68|  64.7k|        // not sure why this being outside of the if improves the performance
   69|  64.7k|        // bit it does, probably related to keeping caches warm
   70|  64.7k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  64.7k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  64.7k|
   73|  64.7k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  64.7k|        if self.num_bits < 8 {
   75|  45.6k|            self.num_bits += 8;
   76|  45.6k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  45.6k|        }
   78|  64.7k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  24.1k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  24.1k|        // We're done.
  121|  24.1k|        if !self.has_more() {
  122|    352|            return Ok(None);
  123|  23.7k|        }
  124|  23.7k|
  125|  23.7k|        let peek6 = self.peek(6);
  126|       |
  127|  23.7k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|  12.8k|            self.drop(1);
  130|  12.8k|            1
  131|  10.9k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|  2.38k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|  2.38k|            self.drop(6);
  135|  2.38k|            if val < 2 {
  136|      7|                return Err(Error::NotMinimal);
  137|  2.38k|            }
  138|  2.38k|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  8.58k|            self.drop(2);
  142|  8.58k|            let val = self.read_varint()?;
  143|  8.57k|            if val < 16 {
  144|     14|                return Err(Error::NotMinimal);
  145|  8.56k|            }
  146|  8.56k|            val
  147|       |        };
  148|       |
  149|  23.7k|        Ok(Some(len))
  150|  24.1k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    385|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    385|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    385|        // data.
   29|    385|        if bytes.last() == Some(&0) {
   30|      1|            return Err(Error::NotMinimal);
   31|    384|        }
   32|    384|        let mut bits = 0u64;
   33|  1.15k|        for i in 0..2 {
   34|    768|            let byte = bytes.get(i).unwrap_or(&0);
   35|    768|            bits |= (*byte as u64) << (8 * i);
   36|    768|        }
   37|       |
   38|    384|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    384|
   40|    384|        Ok(Self {
   41|    384|            bytes,
   42|    384|            bits,
   43|    384|            num_bits: 16,
   44|    384|        })
   45|    385|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_moreB6_:
  153|  24.1k|    pub fn has_more(&self) -> bool {
  154|  24.1k|        self.bits != 0 || !self.bytes.is_empty()
  155|  24.1k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  8.58k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  8.58k|        let mut len = 0u64;
   95|       |
   96|  40.1k|        for i in 0..VARINT_MAX_BYTES {
   97|  40.1k|            let byte = self.read(8);
   98|  40.1k|
   99|  40.1k|            // strip off the most significant bit and add
  100|  40.1k|            // it to the output
  101|  40.1k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  40.1k|
  103|  40.1k|            // if the most significant bit is a 0, we've
  104|  40.1k|            // reached the end of the varint
  105|  40.1k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  8.57k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      4|                    break;
  110|  8.57k|                }
  111|  8.57k|                return Ok(len);
  112|  31.5k|            }
  113|       |        }
  114|       |
  115|      7|        Err(Error::InvalidVarint)
  116|  8.58k|    }

_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    146|    pub fn finish(mut self) -> Vec<u8> {
   62|    146|        if self.bits > 0 {
   63|     54|            self.bytes.push(self.bits as u8);
   64|     92|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    146|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    146|        self.bytes
   72|    146|    }
_RNvXs_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB8_:
    5|    146|#[derive(Default, Clone, Debug)]
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  18.9k|    pub fn write_len(&mut self, len: u64) {
   40|  18.9k|        debug_assert!(len > 0);
   41|       |
   42|  18.9k|        if len == 1 {
   43|  9.47k|            // Block Single (prefix 1)
   44|  9.47k|            self.write(1, 1);
   45|  9.47k|        } else if len < 16 {
   46|  1.80k|            // Block Short (prefix 01)
   47|  1.80k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.80k|            self.write(len as u8, 4);
   49|  1.80k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  7.67k|            self.write(0, 2);
   52|  7.67k|
   53|  7.67k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  36.9k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  36.9k|                self.write(byte, 8);
   56|  36.9k|            }
   57|       |        }
   58|  18.9k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  57.9k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  57.9k|        debug_assert!(num_bits <= 8);
   25|  57.9k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  57.9k|        self.bits |= (byte as u16) << self.num_bits;
   28|  57.9k|        self.num_bits += num_bits;
   29|  57.9k|
   30|  57.9k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  57.9k|        if self.num_bits >= 8 {
   32|  41.3k|            self.bytes.push(self.bits as u8);
   33|  41.3k|            self.bits >>= 8;
   34|  41.3k|            self.num_bits -= 8;
   35|  41.3k|        }
   36|  57.9k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3newB6_:
   18|    146|    pub fn new() -> Self {
   19|    146|        Default::default()
   20|    146|    }

_RINvXNvXNvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   36|    252|#[derive(Debug, Serialize)]
_RINvXs4_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   94|    341|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    341|    where
   96|    341|        D: Deserializer<'de>,
   97|    341|    {
   98|    341|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    318|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    318|        }
  105|    318|        Ok(Self::Unvalidated(bytes))
  106|    341|    }
_RINvXNvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   36|    252|#[derive(Debug, Serialize)]

_RINvXNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor14visit_byte_bufINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
   64|     12|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|     12|                where
   66|     12|                    E: Error,
   67|     12|                {
   68|     12|                    Ok(v)
   69|     12|                }
_RINvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   44|  1.01k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|  1.01k|        where
   46|  1.01k|            D: Deserializer<'de>,
   47|  1.01k|        {
   48|  1.01k|            struct VecVisitor;
   49|  1.01k|
   50|  1.01k|            impl<'de> Visitor<'de> for VecVisitor {
   51|  1.01k|                type Value = Vec<u8>;
   52|  1.01k|
   53|  1.01k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|  1.01k|                    formatter.write_str("byte array")
   55|  1.01k|                }
   56|  1.01k|
   57|  1.01k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|  1.01k|                where
   59|  1.01k|                    E: Error,
   60|  1.01k|                {
   61|  1.01k|                    Ok(v.into())
   62|  1.01k|                }
   63|  1.01k|
   64|  1.01k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|  1.01k|                where
   66|  1.01k|                    E: Error,
   67|  1.01k|                {
   68|  1.01k|                    Ok(v)
   69|  1.01k|                }
   70|  1.01k|            }
   71|  1.01k|            deserializer.deserialize_byte_buf(VecVisitor)
   72|  1.01k|        }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCsfyv4r1PwjHS_5alloc3vec3VechEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  154|    252|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    252|    where
  156|    252|        T: ?Sized + AsRef<[u8]>,
  157|    252|        S: Serializer,
  158|    252|    {
  159|    252|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    252|    }
_RINvXNvXs0_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor20visit_borrowed_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
   89|  2.51k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  2.51k|                where
   91|  2.51k|                    E: Error,
   92|  2.51k|                {
   93|  2.51k|                    Ok(Cow::Borrowed(v))
   94|  2.51k|                }
_RINvXNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   35|    900|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    900|        where
   37|    900|            S: Serializer,
   38|    900|        {
   39|    900|            serializer.serialize_bytes(self.as_ref())
   40|    900|        }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCsfyv4r1PwjHS_5alloc3vec3VechEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  154|    504|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    504|    where
  156|    504|        T: ?Sized + AsRef<[u8]>,
  157|    504|        S: Serializer,
  158|    504|    {
  159|    504|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    504|    }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsfyv4r1PwjHS_5alloc3vec3VechEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  162|  1.01k|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|  1.01k|    where
  164|  1.01k|        T: Deserialize<'de>,
  165|  1.01k|        D: Deserializer<'de>,
  166|  1.01k|    {
  167|  1.01k|        Deserialize::deserialize(deserializer)
  168|  1.01k|    }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  162|    391|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    391|    where
  164|    391|        T: Deserialize<'de>,
  165|    391|        D: Deserializer<'de>,
  166|    391|    {
  167|    391|        Deserialize::deserialize(deserializer)
  168|    391|    }
_RINvXNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor11visit_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
   57|    863|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    863|                where
   59|    863|                    E: Error,
   60|    863|                {
   61|    863|                    Ok(v.into())
   62|    863|                }
_RINvXNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   35|    756|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    756|        where
   37|    756|            S: Serializer,
   38|    756|        {
   39|    756|            serializer.serialize_bytes(self.as_ref())
   40|    756|        }
_RINvXNvXs0_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor14visit_byte_bufINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECshlOgiIj0SRD_11cbor_decode:
  103|    182|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|    182|                where
  105|    182|                    E: Error,
  106|    182|                {
  107|    182|                    Ok(Cow::Owned(v))
  108|    182|                }
_RINvXs0_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   76|  2.78k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  2.78k|        where
   78|  2.78k|            D: Deserializer<'de>,
   79|  2.78k|        {
   80|  2.78k|            struct CowVisitor;
   81|  2.78k|
   82|  2.78k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  2.78k|                type Value = Cow<'de, [u8]>;
   84|  2.78k|
   85|  2.78k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  2.78k|                    formatter.write_str("a byte array")
   87|  2.78k|                }
   88|  2.78k|
   89|  2.78k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  2.78k|                where
   91|  2.78k|                    E: Error,
   92|  2.78k|                {
   93|  2.78k|                    Ok(Cow::Borrowed(v))
   94|  2.78k|                }
   95|  2.78k|
   96|  2.78k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  2.78k|                where
   98|  2.78k|                    E: Error,
   99|  2.78k|                {
  100|  2.78k|                    Ok(Cow::Owned(v.to_vec()))
  101|  2.78k|                }
  102|  2.78k|
  103|  2.78k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  2.78k|                where
  105|  2.78k|                    E: Error,
  106|  2.78k|                {
  107|  2.78k|                    Ok(Cow::Owned(v))
  108|  2.78k|                }
  109|  2.78k|            }
  110|  2.78k|            deserializer.deserialize_bytes(CowVisitor)
  111|  2.78k|        }

_RNvXNtCs6vxvMFpiYEV_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCs9SrTLDOTsEo_4core7convert4FromINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCshlOgiIj0SRD_11cbor_decode:
   23|    433|    fn from(err: DecodeError<T>) -> Self {
   24|    433|        Self {
   25|    433|            description: err.to_string(),
   26|    433|            protocol: CodecProtocol::Cbor,
   27|    433|        }
   28|    433|    }

_RINvCs6vxvMFpiYEV_17fvm_ipld_encoding10from_sliceNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECshlOgiIj0SRD_11cbor_decode:
   61|    685|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    685|where
   63|    685|    T: de::Deserialize<'a>,
   64|    685|{
   65|    685|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    685|}
_RINvCs6vxvMFpiYEV_17fvm_ipld_encoding6to_vecNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECshlOgiIj0SRD_11cbor_decode:
   44|    252|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    252|where
   46|    252|    T: ser::Serialize + ?Sized,
   47|    252|{
   48|    252|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    252|}

_RNvXs7_NtNtCscxungraXhZF_10fvm_shared7address6errorsNtB5_5ErrorNtNtCs9SrTLDOTsEo_4core3fmt7Display3fmt:
   14|     38|#[derive(Debug, PartialEq, Eq, Error)]
_RNvXs0_NtNtCscxungraXhZF_10fvm_shared7address6errorsNtB5_5ErrorINtNtCs9SrTLDOTsEo_4core7convert4FromNtNtCsh1OwLNxVWDy_15unsigned_varint6decode5ErrorE4fromB9_:
   52|     21|    fn from(_: VarintError) -> Error {
   53|     21|        Error::InvalidPayload
   54|     21|    }

_RINvXs4_NtCscxungraXhZF_10fvm_shared7addressNtB6_7AddressNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
  367|  2.39k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  368|  2.39k|    where
  369|  2.39k|        D: Deserializer<'de>,
  370|  2.39k|    {
  371|  2.39k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  372|       |
  373|       |        // Create and return created address of unmarshalled bytes
  374|  2.30k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  375|  2.39k|    }
_RINvXs3_NtCscxungraXhZF_10fvm_shared7addressNtB6_7AddressNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
  357|    900|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  358|    900|    where
  359|    900|        S: Serializer,
  360|    900|    {
  361|    900|        let address_bytes = self.to_bytes();
  362|    900|        strict_bytes::Serialize::serialize(&address_bytes, s)
  363|    900|    }
_RNvNtCscxungraXhZF_10fvm_shared7address14from_leb_bytes:
  383|    719|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  384|       |    // write id to buffer in leb128 format
  385|    719|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  386|    701|    if !remaining.is_empty() {
  387|      2|        return Err(Error::InvalidPayload);
  388|    699|    }
  389|    699|    Ok(id)
  390|    719|}
_RNvMNtCscxungraXhZF_10fvm_shared7addressNtB2_7Address3new:
   79|  2.29k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  2.29k|        Ok(Self {
   81|  2.29k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  2.29k|    }
_RNvMNtCscxungraXhZF_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  2.30k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  2.30k|        if bz.len() < 2 {
   88|     10|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  2.29k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  2.29k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  2.30k|    }
_RNvNtCscxungraXhZF_10fvm_shared7address12to_leb_bytes:
  378|    592|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  379|    592|    // write id to buffer in leb128 format
  380|    592|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  381|    592|}
_RNvMNtCscxungraXhZF_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|    900|    pub fn to_bytes(self) -> Vec<u8> {
  169|    900|        self.payload.to_bytes()
  170|    900|    }

_RNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|    900|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|    900|        use Payload::*;
  117|    900|        match self {
  118|    330|            ID(i) => to_leb_bytes(i),
  119|    122|            Secp256k1(arr) => arr.to_vec(),
  120|    104|            Actor(arr) => arr.to_vec(),
  121|     82|            BLS(arr) => arr.to_vec(),
  122|    262|            Delegated(addr) => {
  123|    262|                let mut buf = to_leb_bytes(addr.namespace());
  124|    262|                buf.extend(addr.subaddress());
  125|    262|                buf
  126|       |            }
  127|       |        }
  128|    900|    }
_RNvMs0_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|    262|    pub fn subaddress(&self) -> &[u8] {
   80|    262|        &self.buffer[..self.length]
   81|    262|    }
_RNvMs0_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|    975|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|    975|        let length = subaddress.len();
   59|    975|        if length > MAX_SUBADDRESS_LEN {
   60|      1|            return Err(Error::InvalidPayloadLength(length));
   61|    974|        }
   62|    974|        let mut addr = DelegatedAddress {
   63|    974|            namespace,
   64|    974|            length,
   65|    974|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|    974|        };
   67|    974|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|    974|        Ok(addr)
   69|    975|    }
_RNCNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB7_7Payload3news_0Bb_:
  149|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvXs3_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCs9SrTLDOTsEo_4core7convert4FromNtB5_7PayloadE4fromB9_:
  166|    900|    fn from(pl: Payload) -> Self {
  167|    900|        match pl {
  168|    330|            Payload::ID(_) => Self::ID,
  169|    122|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    104|            Payload::Actor(_) => Self::Actor,
  171|     82|            Payload::BLS(_) => Self::BLS,
  172|    262|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|    900|    }
_RNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  2.29k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  2.29k|        let payload = match protocol {
  140|    719|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    233|                payload
  143|    233|                    .try_into()
  144|    233|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    208|                payload
  148|    208|                    .try_into()
  149|    208|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    159|                payload
  153|    159|                    .try_into()
  154|    159|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|    978|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|    975|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  2.27k|        Ok(payload)
  162|  2.29k|    }
_RNvMs0_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|    262|    pub fn namespace(&self) -> ActorID {
   74|    262|        self.namespace
   75|    262|    }
_RNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|    900|    pub fn to_bytes(self) -> Vec<u8> {
  132|    900|        let mut bz = self.to_raw_bytes();
  133|    900|        bz.insert(0, Protocol::from(self) as u8);
  134|    900|        bz
  135|    900|    }
_RNCNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB7_7Payload3new0Bb_:
  144|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB7_7Payload3news0_0Bb_:
  154|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,

_RNvXNvNtNtCscxungraXhZF_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs1o5kPwn786I_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  2.29k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCscxungraXhZF_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  2.29k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  2.29k|        FromPrimitive::from_u8(b)
   31|  2.29k|    }
_RNvXNvNtNtCscxungraXhZF_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs1o5kPwn786I_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  2.29k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RINvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtB5_7PayloadNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   12|    252|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtBb_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   12|    671|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtBd_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEE0CshlOgiIj0SRD_11cbor_decode:
   12|    557|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB8_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs8RS3iyFEIvR_11serde_tuple12DeserializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEEECshlOgiIj0SRD_11cbor_decode:
   12|    685|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   12|  1.11k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtBe_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECshlOgiIj0SRD_11cbor_decode:
   12|    785|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtBa_7PayloadNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs8RS3iyFEIvR_11serde_tuple10SerializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEEECshlOgiIj0SRD_11cbor_decode:
   12|    252|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtBd_7PayloadNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECshlOgiIj0SRD_11cbor_decode:
   12|    252|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

