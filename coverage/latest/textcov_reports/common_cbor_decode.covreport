_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  427|  11.7k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  11.7k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  11.7k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  11.7k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  5.46k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  5.46k|            if buf.len() >= len {
  436|  5.38k|                reader.advance(len);
  437|  5.38k|                return Ok(Some(&buf[..len]));
  438|     74|            }
  439|      0|        }
  440|       |
  441|     74|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|     90|        while len != 0 {
  444|     90|            let readbuf = reader.fill(len)?;
  445|     90|            let readbuf = readbuf.as_ref();
  446|     90|
  447|     90|            if readbuf.is_empty() {
  448|     74|                return Err(Error::Eof);
  449|     16|            }
  450|     16|
  451|     16|            let readlen = core::cmp::min(readbuf.len(), len);
  452|     16|
  453|     16|            buf.extend_from_slice(&readbuf[..readlen]);
  454|     16|            reader.advance(readlen);
  455|     16|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|  8.75k|            let byte = pull_one(reader)?;
  463|       |
  464|  8.72k|            if byte == marker::BREAK {
  465|    381|                break
  466|  8.34k|            }
  467|  8.34k|
  468|  8.34k|            if !reader.step_in() {
  469|      1|                return Err(Error::DepthLimit);
  470|  8.34k|            }
  471|  8.34k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|  8.34k|            let reader = &mut *reader;
  473|       |
  474|  8.34k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|  2.26k|                buf.extend_from_slice(longbuf);
  476|  2.26k|            }
  477|       |        }
  478|       |
  479|    381|        Ok(None)
  480|       |    }
  481|  11.7k|}
_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  595|  12.7k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  12.7k|    -> Result<Option<usize>, Error<R::Error>>
  597|  12.7k|{
  598|  12.7k|    if byte != (marker::START | (major << 5)) {
  599|  6.50k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  6.43k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  6.43k|        Ok(Some(len))
  602|       |    } else {
  603|  6.25k|        Ok(None)
  604|       |    }
  605|  12.7k|}
_RNCINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0CsbYJ3pOsSiPS_11cbor_decode:
  471|  8.34k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvYyNtNtNtCs2IAGTsgeePC_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
   73|    470|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    470|        let byte = pull_one(reader)?;
   75|    464|        Self::decode_with(byte, reader)
   76|    470|    }
_RNvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec8if_majorCsbYJ3pOsSiPS_11cbor_decode:
  890|    238|pub fn if_major(byte: u8) -> u8 {
  891|    238|    byte >> 5
  892|    238|}
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB5_7TypeNum3newCsbYJ3pOsSiPS_11cbor_decode:
  175|  7.22k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  7.22k|        TypeNum { major_limit, byte }
  177|  7.22k|    }
_RNvMNtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB2_9Reference6as_refCsbYJ3pOsSiPS_11cbor_decode:
   81|  16.7k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  16.7k|        match self {
   83|  16.7k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  16.7k|    }
_RINvXs5_NtNtCs2IAGTsgeePC_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsddeQUdmtqP6_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  506|  3.40k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  3.40k|        use crate::alloc::borrow::Cow;
  508|  3.40k|
  509|  3.40k|        let mut buf = Vec::new();
  510|  3.40k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  3.12k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|    106|            Cow::Owned(buf)
  514|       |        }))
  515|  3.40k|    }
_RINvXsc_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  611|  1.00k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|  1.00k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|  1.00k|    }
_RINvYNtNtNtCs2IAGTsgeePC_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
   73|    259|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    259|        let byte = pull_one(reader)?;
   75|    255|        Self::decode_with(byte, reader)
   76|    259|    }
_RINvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  223|  7.22k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  7.22k|        match self.byte & self.major_limit {
  225|  7.22k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|  1.07k|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|    499|                let mut buf = [0; 2];
  229|    499|                pull_exact(reader, &mut buf)?;
  230|    492|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|    663|                let mut buf = [0; 4];
  234|    663|                pull_exact(reader, &mut buf)?;
  235|    655|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    441|                let mut buf = [0; 8];
  239|    441|                pull_exact(reader, &mut buf)?;
  240|    434|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|     65|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  7.22k|    }
_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  136|  1.60k|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  3.19k|    while !buf.is_empty() {
  138|  1.61k|        let readbuf = reader.fill(buf.len())?;
  139|  1.61k|        let readbuf = readbuf.as_ref();
  140|  1.61k|
  141|  1.61k|        if readbuf.is_empty() {
  142|     22|            return Err(Error::Eof);
  143|  1.59k|        }
  144|  1.59k|
  145|  1.59k|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|  1.59k|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|  1.59k|        reader.advance(len);
  148|  1.59k|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|  1.58k|    Ok(())
  152|  1.60k|}
_RINvXss_NtNtCs2IAGTsgeePC_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  252|    464|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    464|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    464|                }
_RINvXsg_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  703|    255|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    255|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    255|    }
_RINvYINtNtNtCs2IAGTsgeePC_7cbor4ii4core5types5BytesINtNtCsddeQUdmtqP6_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
   73|  3.46k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  3.46k|        let byte = pull_one(reader)?;
   75|  3.40k|        Self::decode_with(byte, reader)
   76|  3.46k|    }
_RINvYNtNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
   73|  1.01k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  1.01k|        let byte = pull_one(reader)?;
   75|  1.00k|        Self::decode_with(byte, reader)
   76|  1.01k|    }
_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
  125|  15.0k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  15.0k|    let b = reader.fill(1)?
  127|  15.0k|        .as_ref()
  128|  15.0k|        .get(0)
  129|  15.0k|        .copied()
  130|  15.0k|        .ok_or(Error::Eof)?;
  131|  14.9k|    reader.advance(1);
  132|  14.9k|    Ok(b)
  133|  15.0k|}

_RINvXs4_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
   98|  1.89k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  1.89k|        match u32::try_from(self.value) {
  100|  1.72k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    170|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    170|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  1.89k|        Ok(())
  107|  1.89k|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNumtE3newCsbYJ3pOsSiPS_11cbor_decode:
   52|  1.71k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.71k|        TypeNum { type_, value }
   54|  1.71k|    }
_RINvXsd_NtNtCs2IAGTsgeePC_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
  270|    372|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    372|        Ok(())
  272|    372|    }
_RINvXs2_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
   70|  1.71k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  1.71k|        match u8::try_from(self.value) {
   72|  1.58k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    134|                let [x0, x1] = self.value.to_be_bytes();
   75|    134|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  1.71k|        Ok(())
   79|  1.71k|    }
_RINvXsu_NtNtCs2IAGTsgeePC_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
  159|    186|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    186|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    186|                }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNummE3newCsbYJ3pOsSiPS_11cbor_decode:
   52|  1.72k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.72k|        TypeNum { type_, value }
   54|  1.72k|    }
_RINvXs7_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
  209|  1.14k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.14k|        writer.push(self.0)?;
  211|  1.14k|        Ok(())
  212|  1.14k|    }
_RINvXs3_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
   84|  1.72k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  1.72k|        match u16::try_from(self.value) {
   86|  1.71k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      4|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      4|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  1.72k|        Ok(())
   93|  1.72k|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNumhE3newCsbYJ3pOsSiPS_11cbor_decode:
   52|  1.58k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.58k|        TypeNum { type_, value }
   54|  1.58k|    }
_RINvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
   59|  1.58k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  1.58k|        match self.value {
   61|  1.58k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    618|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  1.58k|        Ok(())
   65|  1.58k|    }
_RINvXsi_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsbYJ3pOsSiPS_11cbor_decode:
  317|    186|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    186|        self.1.encode(writer)
  319|    186|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNumyE3newCsbYJ3pOsSiPS_11cbor_decode:
   52|  1.89k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.89k|        TypeNum { type_, value }
   54|  1.89k|    }

_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsbYJ3pOsSiPS_11cbor_decode:
   68|  21.9k|    fn advance(&mut self, n: usize) {
   69|  21.9k|        let len = core::cmp::min(self.buf.len(), n);
   70|  21.9k|        self.buf = &self.buf[len..];
   71|  21.9k|    }
_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsbYJ3pOsSiPS_11cbor_decode:
   62|  23.5k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  23.5k|        let len = core::cmp::min(self.buf.len(), want);
   64|  23.5k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  23.5k|    }
_RNvXs_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsbYJ3pOsSiPS_11cbor_decode:
   40|  3.04k|        self.0.try_reserve(input.len())?;
   41|  3.04k|        self.0.extend_from_slice(input);
   42|  3.04k|        Ok(())
   43|  3.04k|    }
_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsbYJ3pOsSiPS_11cbor_decode:
   75|  9.35k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  9.35k|            self.limit = limit;
   77|  9.35k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  9.35k|    }
_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsbYJ3pOsSiPS_11cbor_decode:
   84|  9.35k|    fn step_out(&mut self) {
   85|  9.35k|        self.limit += 1;
   86|  9.35k|    }
_RNvMNtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    186|    pub fn new(buf: Vec<u8>) -> Self {
   15|    186|       BufWriter(buf)
   16|    186|    }
_RNvMNtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    186|    pub fn into_inner(self) -> Vec<u8> {
   25|    186|        self.0
   26|    186|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    600|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    600|        SliceReader { buf, limit: 256 }
   55|    600|    }

_RNvMs1_NtCs2IAGTsgeePC_7cbor4ii5errorINtB5_11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleE8mismatchCsbYJ3pOsSiPS_11cbor_decode:
   93|     65|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     65|        DecodeError::Mismatch {
   95|     65|            expect_major: (!major_limit) >> 5,
   96|     65|            byte
   97|     65|        }
   98|     65|    }

_RNvXs_NtCs2IAGTsgeePC_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCsUG827pA8ag_4core3ops5deref8DerefMut9deref_mutCsbYJ3pOsSiPS_11cbor_decode:
   17|  8.34k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  8.34k|        self.0
   19|  8.34k|    }
_RNvXs0_NtCs2IAGTsgeePC_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCsUG827pA8ag_4core3ops4drop4Drop4dropCsbYJ3pOsSiPS_11cbor_decode:
   24|  8.34k|    fn drop(&mut self) {
   25|  8.34k|        (self.1)(self.0);
   26|  8.34k|    }

_RINvMNtCskhitFtkqptf_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
  157|    186|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    186|        match self.version {
  159|     18|            Version::V0 => self.hash.write(w)?,
  160|    168|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    186|        Ok(())
  163|    186|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E8to_bytesCsbYJ3pOsSiPS_11cbor_decode:
  167|    186|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    186|        let mut bytes = Vec::new();
  169|    186|        self.write_bytes(&mut bytes).unwrap();
  170|    186|        bytes
  171|    186|    }
_RINvMNtCskhitFtkqptf_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsbYJ3pOsSiPS_11cbor_decode:
  127|    228|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    228|        let version = varint_read_u64(&mut r)?;
  129|    227|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    222|        if [version, codec] == [0x12, 0x20] {
  132|     20|            let mut digest = [0u8; 32];
  133|     20|            r.read_exact(&mut digest)?;
  134|     19|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|     19|            Self::new_v0(mh)
  136|       |        } else {
  137|    202|            let version = Version::try_from(version)?;
  138|    200|            let mh = Multihash::read(r)?;
  139|    175|            Self::new(version, codec, mh)
  140|       |        }
  141|    228|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E6new_v1CsbYJ3pOsSiPS_11cbor_decode:
   90|    173|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    173|        Self {
   92|    173|            version: Version::V1,
   93|    173|            codec,
   94|    173|            hash,
   95|    173|        }
   96|    173|    }
_RNvXs6_NtCskhitFtkqptf_3cid3cidINtB5_3CidKj40_EINtNtCsUG827pA8ag_4core7convert7TryFromRShE8try_fromCsbYJ3pOsSiPS_11cbor_decode:
  314|    228|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    228|        Self::read_bytes(&mut bytes)
  316|    228|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E3newCsbYJ3pOsSiPS_11cbor_decode:
   99|    175|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    175|        match version {
  101|       |            Version::V0 => {
  102|      2|                if codec != DAG_PB {
  103|      2|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    173|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    175|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E6new_v0CsbYJ3pOsSiPS_11cbor_decode:
   78|     19|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     19|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     19|        }
   82|     19|        Ok(Self {
   83|     19|            version: Version::V0,
   84|     19|            codec: DAG_PB,
   85|     19|            hash,
   86|     19|        })
   87|     19|    }
_RINvMNtCskhitFtkqptf_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
  143|    168|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    168|        let mut version_buf = varint_encode::u64_buffer();
  145|    168|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    168|
  147|    168|        let mut codec_buf = varint_encode::u64_buffer();
  148|    168|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    168|
  150|    168|        w.write_all(version)?;
  151|    168|        w.write_all(codec)?;
  152|    168|        self.hash.write(&mut w)?;
  153|    168|        Ok(())
  154|    168|    }

_RNvXs1_NtCskhitFtkqptf_3cid5errorNtB5_5ErrorINtNtCsUG827pA8ag_4core7convert4FromNtNtCs6Yl6r13Ki3I_9multihash5error5ErrorE4from:
   65|     25|    fn from(_: multihash::Error) -> Error {
   66|     25|        Error::ParsingError
   67|     25|    }
_RNvXs4_NtCskhitFtkqptf_3cid5errorNtB5_5ErrorINtNtCsUG827pA8ag_4core7convert4FromNtNtNtCs81xyq7JeQbH_3std2io5error5ErrorE4from:
   88|      1|    fn from(err: io::Error) -> Self {
   89|      1|        Self::Io(err)
   90|      1|    }
_RNvXs3_NtCskhitFtkqptf_3cid5errorNtB5_5ErrorINtNtCsUG827pA8ag_4core7convert4FromNtNtCskfR01peMIm4_15unsigned_varint2io9ReadErrorE4from:
   78|      6|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   79|      6|        use unsigned_varint::io::ReadError::*;
   80|      6|        match err {
   81|      2|            Io(err) => Self::Io(err),
   82|      4|            _ => Self::VarIntDecodeError,
   83|       |        }
   84|      6|    }
_RNvXs_NtCskhitFtkqptf_3cid5errorNtB4_5ErrorNtNtCsUG827pA8ag_4core3fmt7Display3fmt:
   39|     36|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   40|       |        use self::Error::*;
   41|     36|        let error = match self {
   42|      0|            UnknownCodec => "Unknown codec",
   43|      0|            InputTooShort => "Input too short",
   44|     25|            ParsingError => "Failed to parse multihash",
   45|      2|            InvalidCidVersion => "Unrecognized CID version",
   46|      2|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   47|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   48|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   49|      4|            VarIntDecodeError => "Failed to decode unsigned varint format",
   50|      3|            Io(err) => return write!(f, "{}", err),
   51|       |        };
   52|       |
   53|     33|        f.write_str(error)
   54|     36|    }

_RINvXs_NtCskhitFtkqptf_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor11visit_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
   48|    228|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    228|    where
   50|    228|        E: de::Error,
   51|    228|    {
   52|    228|        CidGeneric::<SIZE>::try_from(value)
   53|    228|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    228|    }
_RNCINvXs_NtCskhitFtkqptf_3cid5serdeNtB7_17BytesToCidVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor11visit_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEE0CsbYJ3pOsSiPS_11cbor_decode:
   53|     36|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
_RINvXs0_NtCskhitFtkqptf_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   79|    259|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    259|    where
   81|    259|        D: de::Deserializer<'de>,
   82|    259|    {
   83|    259|        /// Main visitor to deserialize a CID.
   84|    259|        ///
   85|    259|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    259|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    259|        /// to bytes.
   88|    259|        struct MainEntryVisitor<const SIZE: usize>;
   89|    259|
   90|    259|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    259|            type Value = CidGeneric<SIZE>;
   92|    259|
   93|    259|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    259|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    259|            }
   96|    259|
   97|    259|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    259|            where
   99|    259|                D: de::Deserializer<'de>,
  100|    259|            {
  101|    259|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    259|            }
  103|    259|        }
  104|    259|
  105|    259|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    259|    }
_RINvXNvXs0_NtCskhitFtkqptf_3cid5serdeINtNtBb_3cid3CidKpENtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   97|    239|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    239|            where
   99|    239|                D: de::Deserializer<'de>,
  100|    239|            {
  101|    239|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    239|            }
_RINvXNtCskhitFtkqptf_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   29|    186|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    186|    where
   31|    186|        S: ser::Serializer,
   32|    186|    {
   33|    186|        let value = ByteBuf::from(self.to_bytes());
   34|    186|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    186|    }

_RNvXs0_NtCskhitFtkqptf_3cid7versionyINtNtCsUG827pA8ag_4core7convert4FromNtB5_7VersionE4from:
   44|    168|    fn from(ver: Version) -> u64 {
   45|    168|        match ver {
   46|      0|            Version::V0 => 0,
   47|    168|            Version::V1 => 1,
   48|       |        }
   49|    168|    }
_RNvXs_NtCskhitFtkqptf_3cid7versionNtB4_7VersionINtNtCsUG827pA8ag_4core7convert7TryFromyE8try_from:
   34|    202|    fn try_from(raw: u64) -> Result<Self> {
   35|    202|        match raw {
   36|      4|            0 => Ok(Self::V0),
   37|    196|            1 => Ok(Self::V1),
   38|      2|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    202|    }

_RINvXsd_NtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor11visit_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
  203|    715|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    715|    where
  205|    715|        E: Error,
  206|    715|    {
  207|    715|        Ok(ByteBuf::from(v))
  208|    715|    }
_RINvMNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
   60|     14|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|     14|        ByteBuf {
   62|     14|            bytes: bytes.into(),
   63|     14|        }
   64|     14|    }
_RINvMNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECsbYJ3pOsSiPS_11cbor_decode:
   60|    715|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    715|        ByteBuf {
   62|    715|            bytes: bytes.into(),
   63|    715|        }
   64|    715|    }
_RINvXsd_NtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor14visit_byte_bufINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
  210|     14|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<ByteBuf, E>
  211|     14|    where
  212|     14|        E: Error,
  213|     14|    {
  214|     14|        Ok(ByteBuf::from(v))
  215|     14|    }
_RINvXse_NtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  219|    862|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    862|    where
  221|    862|        D: Deserializer<'de>,
  222|    862|    {
  223|    862|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    862|    }
_RNvMNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    729|    pub fn into_vec(self) -> Vec<u8> {
   68|    729|        self.bytes
   69|    729|    }

_RINvXNvXs2_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor20visit_borrowed_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
   85|  2.18k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  2.18k|            where
   87|  2.18k|                E: Error,
   88|  2.18k|            {
   89|  2.18k|                Ok(Cow::Borrowed(v))
   90|  2.18k|            }
_RINvXs_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   42|    862|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    862|    where
   44|    862|        D: Deserializer<'de>,
   45|    862|    {
   46|    862|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    862|    }
_RINvXNvXs2_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor14visit_byte_bufINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
   99|     87|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|     87|            where
  101|     87|                E: Error,
  102|     87|            {
  103|     87|                Ok(Cow::Owned(v))
  104|     87|            }
_RINvXs1_NtCs5AVzAzKkM8N_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   61|    862|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    862|    where
   63|    862|        D: Deserializer<'de>,
   64|    862|    {
   65|    862|        // Via the serde::Deserialize impl for ByteBuf.
   66|    862|        serde::Deserialize::deserialize(deserializer)
   67|    862|    }
_RINvXs2_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   72|  2.36k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  2.36k|    where
   74|  2.36k|        D: Deserializer<'de>,
   75|  2.36k|    {
   76|  2.36k|        struct CowVisitor;
   77|  2.36k|
   78|  2.36k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  2.36k|            type Value = Cow<'de, [u8]>;
   80|  2.36k|
   81|  2.36k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  2.36k|                formatter.write_str("a byte array")
   83|  2.36k|            }
   84|  2.36k|
   85|  2.36k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  2.36k|            where
   87|  2.36k|                E: Error,
   88|  2.36k|            {
   89|  2.36k|                Ok(Cow::Borrowed(v))
   90|  2.36k|            }
   91|  2.36k|
   92|  2.36k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  2.36k|            where
   94|  2.36k|                E: Error,
   95|  2.36k|            {
   96|  2.36k|                Ok(Cow::Owned(v.to_vec()))
   97|  2.36k|            }
   98|  2.36k|
   99|  2.36k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  2.36k|            where
  101|  2.36k|                E: Error,
  102|  2.36k|            {
  103|  2.36k|                Ok(Cow::Owned(v))
  104|  2.36k|            }
  105|  2.36k|        }
  106|  2.36k|
  107|  2.36k|        deserializer.deserialize_bytes(CowVisitor)
  108|  2.36k|    }

_RINvCs5AVzAzKkM8N_14cs_serde_bytes11deserializeINtNtCsddeQUdmtqP6_5alloc3vec3VechEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  103|    862|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    862|where
  105|    862|    T: Deserialize<'de>,
  106|    862|    D: Deserializer<'de>,
  107|    862|{
  108|    862|    Deserialize::deserialize(deserializer)
  109|    862|}
_RINvCs5AVzAzKkM8N_14cs_serde_bytes11deserializeINtNtCsddeQUdmtqP6_5alloc6borrow3CowShEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  103|    326|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    326|where
  105|    326|    T: Deserialize<'de>,
  106|    326|    D: Deserializer<'de>,
  107|    326|{
  108|    326|    Deserialize::deserialize(deserializer)
  109|    326|}
_RINvCs5AVzAzKkM8N_14cs_serde_bytes9serializeRINtNtCsddeQUdmtqP6_5alloc3vec3VechEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   77|    186|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    186|where
   79|    186|    T: ?Sized + Serialize,
   80|    186|    S: Serializer,
   81|    186|{
   82|    186|    Serialize::serialize(bytes, serializer)
   83|    186|}
_RINvCs5AVzAzKkM8N_14cs_serde_bytes9serializeINtNtCsddeQUdmtqP6_5alloc3vec3VechEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   77|    372|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    372|where
   79|    372|    T: ?Sized + Serialize,
   80|    372|    S: Serializer,
   81|    372|{
   82|    372|    Serialize::serialize(bytes, serializer)
   83|    372|}

_RINvXs4_NtCs5AVzAzKkM8N_14cs_serde_bytes3serRINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   88|    186|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    186|    where
   90|    186|        S: Serializer,
   91|    186|    {
   92|    186|        (**self).serialize(serializer)
   93|    186|    }
_RINvXs_NtCs5AVzAzKkM8N_14cs_serde_bytes3serINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   37|    962|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|    962|    where
   39|    962|        S: Serializer,
   40|    962|    {
   41|    962|        serializer.serialize_bytes(self)
   42|    962|    }

rust_fuzzer_test_input:
  141|    507|        pub extern "C" fn rust_fuzzer_test_input($bytes: &[u8]) {
  142|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  143|       |            // formatting of the input to that file. This is only intended for
  144|       |            // `cargo fuzz`'s use!
  145|       |
  146|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  147|    507|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  148|       |                use std::io::Write;
  149|      0|                let mut file = std::fs::File::create(path)
  150|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  151|      0|                writeln!(&mut file, "{:?}", $bytes)
  152|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  153|      0|                return;
  154|    507|            }
  155|       |
  156|       |            $body
  157|    507|        }
LLVMFuzzerTestOneInput:
   27|    507|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    507|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    507|    });
   32|    507|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    507|    }
   37|    507|    0
   38|    507|}
_RNCNvCsbfCMulWnQsh_13libfuzzer_sys15test_input_wrap0B3_:
   28|    507|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    507|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    507|        rust_fuzzer_test_input(data_slice);
   31|    507|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs0_NtCs6Yl6r13Ki3I_9multihash5errorNtB5_5ErrorINtNtCsUG827pA8ag_4core7convert4FromNtNtNtCs81xyq7JeQbH_3std2io5error5ErrorE4from:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }
_RNvXs1_NtCs6Yl6r13Ki3I_9multihash5errorNtB5_5ErrorINtNtCsUG827pA8ag_4core7convert4FromNtNtCskfR01peMIm4_15unsigned_varint2io9ReadErrorE4from:
   44|     16|    fn from(err: ReadError) -> Self {
   45|     16|        match err {
   46|     11|            ReadError::Io(err) => Self::Io(err),
   47|      5|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     16|    }

_RINvNtCs6Yl6r13Ki3I_9multihash9multihash14read_multihashQRShKj40_ECsbYJ3pOsSiPS_11cbor_decode:
  298|    200|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    200|where
  300|    200|    R: io::Read,
  301|    200|{
  302|    200|    let code = read_u64(&mut r)?;
  303|    196|    let size = read_u64(&mut r)?;
  304|       |
  305|    184|    if size > S as u64 || size > u8::MAX as u64 {
  306|      8|        return Err(Error::InvalidSize(size));
  307|    176|    }
  308|    176|
  309|    176|    let mut digest = [0; S];
  310|    176|    r.read_exact(&mut digest[..size as usize])?;
  311|    175|    Ok((code, size as u8, digest))
  312|    200|}
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E6digestCsbYJ3pOsSiPS_11cbor_decode:
  130|    186|    pub fn digest(&self) -> &[u8] {
  131|    186|        &self.digest[..self.size as usize]
  132|    186|    }
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsbYJ3pOsSiPS_11cbor_decode:
  125|    186|    pub const fn size(&self) -> u8 {
  126|    186|        self.size
  127|    186|    }
_RINvNtCs6Yl6r13Ki3I_9multihash9multihash15write_multihashQQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
  276|    168|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    168|where
  278|    168|    W: io::Write,
  279|    168|{
  280|    168|    let mut code_buf = varint_encode::u64_buffer();
  281|    168|    let code = varint_encode::u64(code, &mut code_buf);
  282|    168|
  283|    168|    let mut size_buf = varint_encode::u8_buffer();
  284|    168|    let size = varint_encode::u8(size, &mut size_buf);
  285|    168|
  286|    168|    w.write_all(code)?;
  287|    168|    w.write_all(size)?;
  288|    168|    w.write_all(digest)?;
  289|    168|    Ok(())
  290|    168|}
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4codeCsbYJ3pOsSiPS_11cbor_decode:
  120|    205|    pub const fn code(&self) -> u64 {
  121|    205|        self.code
  122|    205|    }
_RINvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
  163|    168|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    168|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    168|    }
_RINvNtCs6Yl6r13Ki3I_9multihash9multihash15write_multihashQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
  276|     18|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     18|where
  278|     18|    W: io::Write,
  279|     18|{
  280|     18|    let mut code_buf = varint_encode::u64_buffer();
  281|     18|    let code = varint_encode::u64(code, &mut code_buf);
  282|     18|
  283|     18|    let mut size_buf = varint_encode::u8_buffer();
  284|     18|    let size = varint_encode::u8(size, &mut size_buf);
  285|     18|
  286|     18|    w.write_all(code)?;
  287|     18|    w.write_all(size)?;
  288|     18|    w.write_all(digest)?;
  289|     18|    Ok(())
  290|     18|}
_RINvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
  163|     18|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     18|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     18|    }
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsbYJ3pOsSiPS_11cbor_decode:
  101|     19|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     19|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     19|        }
  105|     19|        let size = input_digest.len();
  106|     19|        let mut digest = [0; S];
  107|     19|        let mut i = 0;
  108|    627|        while i < size {
  109|    608|            digest[i] = input_digest[i];
  110|    608|            i += 1;
  111|    608|        }
  112|     19|        Ok(Self {
  113|     19|            code,
  114|     19|            size: size as u8,
  115|     19|            digest,
  116|     19|        })
  117|     19|    }
_RINvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsbYJ3pOsSiPS_11cbor_decode:
  135|    200|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    200|    where
  137|    200|        Self: Sized,
  138|    200|    {
  139|    200|        let (code, size, digest) = read_multihash(r)?;
  140|    175|        Ok(Self { code, size, digest })
  141|    200|    }

_RNvYNtNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocol8ProtocolNtNtCscdoVAoRIjja_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  1.94k|    fn from_u8(n: u8) -> Option<Self> {
  468|  1.94k|        FromPrimitive::from_u64(From::from(n))
  469|  1.94k|    }

_RNvMs2_NtCsllPYJFWufyT_9once_cell3impINtB5_8OnceCellNtNtCsddeQUdmtqP6_5alloc6string6StringE14is_initializedCsbYJ3pOsSiPS_11cbor_decode:
   62|    507|    pub(crate) fn is_initialized(&self) -> bool {
   63|    507|        // An `Acquire` load is enough because that makes all the initialization
   64|    507|        // operations visible to us, and, this being a fast path, weaker
   65|    507|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    507|        // `SeqCst` operations on the slow path.
   67|    507|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    507|    }

_RNvMs4_NtCsllPYJFWufyT_9once_cell4syncINtB5_8OnceCellNtNtCsddeQUdmtqP6_5alloc6string6StringE3getCsbYJ3pOsSiPS_11cbor_decode:
  869|    507|        pub fn get(&self) -> Option<&T> {
  870|    507|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    507|                None
  875|       |            }
  876|    507|        }

_RNvMs1_Csei3EIldeqNP_10scopeguardINtB5_10ScopeGuardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsbYJ3pOsSiPS_11cbor_decode:
  317|  1.01k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|  1.01k|        ScopeGuard {
  319|  1.01k|            value: ManuallyDrop::new(v),
  320|  1.01k|            dropfn: ManuallyDrop::new(dropfn),
  321|  1.01k|            strategy: PhantomData,
  322|  1.01k|        }
  323|  1.01k|    }
_RNvXCsei3EIldeqNP_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|  1.01k|    fn should_run() -> bool { true }
_RNvXs4_Csei3EIldeqNP_10scopeguardINtB5_10ScopeGuardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsUG827pA8ag_4core3ops5deref8DerefMut9deref_mutCsbYJ3pOsSiPS_11cbor_decode:
  443|  1.01k|    fn deref_mut(&mut self) -> &mut T {
  444|  1.01k|        &mut *self.value
  445|  1.01k|    }
_RINvCsei3EIldeqNP_10scopeguard5guardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBy_EuECsbYJ3pOsSiPS_11cbor_decode:
  367|  1.01k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|  1.01k|    where F: FnOnce(T)
  369|  1.01k|{
  370|  1.01k|    ScopeGuard::with_strategy(v, dropfn)
  371|  1.01k|}
_RNvXs5_Csei3EIldeqNP_10scopeguardINtB5_10ScopeGuardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsUG827pA8ag_4core3ops4drop4Drop4dropCsbYJ3pOsSiPS_11cbor_decode:
  452|  1.01k|    fn drop(&mut self) {
  453|  1.01k|        // This is OK because the fields are `ManuallyDrop`s
  454|  1.01k|        // which will not be dropped by the compiler.
  455|  1.01k|        let (value, dropfn) = unsafe {
  456|  1.01k|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|  1.01k|        };
  458|  1.01k|        if S::should_run() {
  459|  1.01k|            dropfn(value);
  460|  1.01k|        }
  461|  1.01k|    }

_RINvXsV_NtNtCs94lCMAiFPGZ_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  113|    470|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    470|            where
  115|    470|                D: Deserializer<'de>,
  116|    470|            {
  117|    470|                struct PrimitiveVisitor;
  118|    470|
  119|    470|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    470|                    type Value = $primitive;
  121|    470|
  122|    470|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    470|                        formatter.write_str(stringify!($primitive))
  124|    470|                    }
  125|    470|
  126|    470|                    $($($method!($val : $visit);)*)*
  127|    470|                }
  128|    470|
  129|    470|                deserializer.$deserialize(PrimitiveVisitor)
  130|    470|            }
_RINvXNvXsV_NtNtCs94lCMAiFPGZ_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
  138|    457|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    457|        where
  140|    457|            E: Error,
  141|    457|        {
  142|    457|            Ok(v)
  143|    457|        }
_RINvXsh_NtNtCs94lCMAiFPGZ_5serde2de5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
 1014|    410|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    410|    where
 1016|    410|        D: Deserializer<'de>,
 1017|    410|    {
 1018|    410|        struct VecVisitor<T> {
 1019|    410|            marker: PhantomData<T>,
 1020|    410|        }
 1021|    410|
 1022|    410|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    410|        where
 1024|    410|            T: Deserialize<'de>,
 1025|    410|        {
 1026|    410|            type Value = Vec<T>;
 1027|    410|
 1028|    410|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    410|                formatter.write_str("a sequence")
 1030|    410|            }
 1031|    410|
 1032|    410|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    410|            where
 1034|    410|                A: SeqAccess<'de>,
 1035|    410|            {
 1036|    410|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    410|
 1038|    410|                while let Some(value) = try!(seq.next_element()) {
 1039|    410|                    values.push(value);
 1040|    410|                }
 1041|    410|
 1042|    410|                Ok(values)
 1043|    410|            }
 1044|    410|        }
 1045|    410|
 1046|    410|        let visitor = VecVisitor {
 1047|    410|            marker: PhantomData,
 1048|    410|        };
 1049|    410|        deserializer.deserialize_seq(visitor)
 1050|    410|    }
_RINvXNvXsh_NtNtCs94lCMAiFPGZ_5serde2de5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
 1032|    407|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    407|            where
 1034|    407|                A: SeqAccess<'de>,
 1035|    407|            {
 1036|    407|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  1.91k|                while let Some(value) = try!(seq.next_element()) {
 1039|  1.50k|                    values.push(value);
 1040|  1.50k|                }
 1041|       |
 1042|    326|                Ok(values)
 1043|    407|            }

_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  783|  2.03k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  2.03k|    where
  785|  2.03k|        D: Deserializer<'de>,
  786|  2.03k|    {
  787|  2.03k|        T::deserialize(deserializer)
  788|  2.03k|    }
_RINvYNtNtCskhitFtkqptf_3cid5serde17BytesToCidVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor20visit_borrowed_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
 1563|    226|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    226|    where
 1565|    226|        E: Error,
 1566|    226|    {
 1567|    226|        self.visit_bytes(v)
 1568|    226|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsbYJ3pOsSiPS_11cbor_decode:
 1723|    588|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    588|    where
 1725|    588|        T: Deserialize<'de>,
 1726|    588|    {
 1727|    588|        self.next_element_seed(PhantomData)
 1728|    588|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB1p_7PayloadNtB6_11Deserialize11deserialize1__NtB1m_5InnerB2b_11deserializeNtB1h_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  783|    588|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    588|    where
  785|    588|        D: Deserializer<'de>,
  786|    588|    {
  787|    588|        T::deserialize(deserializer)
  788|    588|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  783|    274|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    274|    where
  785|    274|        D: Deserializer<'de>,
  786|    274|    {
  787|    274|        T::deserialize(deserializer)
  788|    274|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressECsbYJ3pOsSiPS_11cbor_decode:
 1723|  2.37k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  2.37k|    where
 1725|  2.37k|        T: Deserialize<'de>,
 1726|  2.37k|    {
 1727|  2.37k|        self.next_element_seed(PhantomData)
 1728|  2.37k|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementyECsbYJ3pOsSiPS_11cbor_decode:
 1723|    470|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    470|    where
 1725|    470|        T: Deserialize<'de>,
 1726|    470|    {
 1727|    470|        self.next_element_seed(PhantomData)
 1728|    470|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  783|    410|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    410|    where
  785|    410|        D: Deserializer<'de>,
  786|    410|    {
  787|    410|        T::deserialize(deserializer)
  788|    410|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  783|    326|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    326|    where
  785|    326|        D: Deserializer<'de>,
  786|    326|    {
  787|    326|        T::deserialize(deserializer)
  788|    326|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldECsbYJ3pOsSiPS_11cbor_decode:
 1723|    326|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    326|    where
 1725|    326|        T: Deserialize<'de>,
 1726|    326|    {
 1727|    326|        self.next_element_seed(PhantomData)
 1728|    326|    }
_RINvYNtNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor20visit_borrowed_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
 1563|    715|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    715|    where
 1565|    715|        E: Error,
 1566|    715|    {
 1567|    715|        self.visit_bytes(v)
 1568|    715|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsbYJ3pOsSiPS_11cbor_decode:
 1723|    410|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    410|    where
 1725|    410|        T: Deserialize<'de>,
 1726|    410|    {
 1727|    410|        self.next_element_seed(PhantomData)
 1728|    410|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  783|    470|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    470|    where
  785|    470|        D: Deserializer<'de>,
  786|    470|    {
  787|    470|        T::deserialize(deserializer)
  788|    470|    }
_RINvYNtNtCskhitFtkqptf_3cid5serde17BytesToCidVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor14visit_byte_bufINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsbYJ3pOsSiPS_11cbor_decode:
 1587|      2|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1588|      2|    where
 1589|      2|        E: Error,
 1590|      2|    {
 1591|      2|        self.visit_bytes(&v)
 1592|      2|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCskhitFtkqptf_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  783|    259|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    259|    where
  785|    259|        D: Deserializer<'de>,
  786|    259|    {
  787|    259|        T::deserialize(deserializer)
  788|    259|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementINtNtCskhitFtkqptf_3cid3cid3CidKj40_EECsbYJ3pOsSiPS_11cbor_decode:
 1723|    259|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    259|    where
 1725|    259|        T: Deserialize<'de>,
 1726|    259|    {
 1727|    259|        self.next_element_seed(PhantomData)
 1728|    259|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsbYJ3pOsSiPS_11cbor_decode:
 1723|    274|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    274|    where
 1725|    274|        T: Deserialize<'de>,
 1726|    274|    {
 1727|    274|        self.next_element_seed(PhantomData)
 1728|    274|    }

_RNvNtNtCs94lCMAiFPGZ_5serde9___private9size_hint8cautiousCsbYJ3pOsSiPS_11cbor_decode:
   12|    407|pub fn cautious(hint: Option<usize>) -> usize {
   13|    407|    cmp::min(hint.unwrap_or(0), 4096)
   14|    407|}

_RINvXsE_NtNtCs94lCMAiFPGZ_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   11|    186|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    186|            where
   13|    186|                S: Serializer,
   14|    186|            {
   15|    186|                serializer.$method(*self $($cast)*)
   16|    186|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  386|    186|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    186|            where
  388|    186|                S: Serializer,
  389|    186|            {
  390|    186|                (**self).serialize(serializer)
  391|    186|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  386|    186|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    186|            where
  388|    186|                S: Serializer,
  389|    186|            {
  390|    186|                (**self).serialize(serializer)
  391|    186|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRINtNtCskhitFtkqptf_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  386|    186|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    186|            where
  388|    186|                S: Serializer,
  389|    186|            {
  390|    186|                (**self).serialize(serializer)
  391|    186|            }
_RINvXs1k_NtNtCs94lCMAiFPGZ_5serde3ser5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  194|    186|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    186|            where
  196|    186|                S: Serializer,
  197|    186|            {
  198|    186|                serializer.collect_seq(self)
  199|    186|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  386|    404|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    404|            where
  388|    404|                S: Serializer,
  389|    404|            {
  390|    404|                (**self).serialize(serializer)
  391|    404|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  386|    186|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    186|            where
  388|    186|                S: Serializer,
  389|    186|            {
  390|    186|                (**self).serialize(serializer)
  391|    186|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  386|    186|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    186|            where
  388|    186|                S: Serializer,
  389|    186|            {
  390|    186|                (**self).serialize(serializer)
  391|    186|            }

_RINvYQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer11collect_seqRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsbYJ3pOsSiPS_11cbor_decode:
 1275|    186|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    186|    where
 1277|    186|        I: IntoIterator,
 1278|    186|        <I as IntoIterator>::Item: Serialize,
 1279|    186|    {
 1280|    186|        let iter = iter.into_iter();
 1281|    186|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    186|            let mut iter = iter;
 1286|    186|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    186|        serializer.end()
 1297|    186|    }
_RINvNtCs94lCMAiFPGZ_5serde3ser17iterator_len_hintINtNtNtCsUG827pA8ag_4core5slice4iter4IterNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsbYJ3pOsSiPS_11cbor_decode:
 1982|    186|    match iter.size_hint() {
 1983|    186|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    186|}
_RNCINvYQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer11collect_seqRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEE0CsbYJ3pOsSiPS_11cbor_decode:
 1286|    218|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXsc_NtCscEN7YdUwkvU_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  186|    186|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    186|    where
  188|    186|        S: Serializer,
  189|    186|    {
  190|    186|        serializer.serialize_bytes(&self.bytes)
  191|    186|    }
_RINvMNtCscEN7YdUwkvU_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsbYJ3pOsSiPS_11cbor_decode:
   60|    186|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    186|        ByteBuf {
   62|    186|            bytes: bytes.into(),
   63|    186|        }
   64|    186|    }

_RINvNtCsi8FzBKos3j5_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderECsbYJ3pOsSiPS_11cbor_decode:
   26|  1.36k|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|  1.36k|    let buf = match reader.fill(1)? {
   28|  1.36k|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|  1.36k|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|  1.16k|    Ok(byte)
   33|  1.36k|}

_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsbYJ3pOsSiPS_11cbor_decode:
  334|    410|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    410|    where
  336|    410|        V: Visitor<'de>,
  337|    410|    {
  338|    410|        let mut de = self.try_step()?;
  339|    410|        let seq = Accessor::array(&mut de)?;
  340|    407|        visitor.visit_seq(seq)
  341|    410|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer20deserialize_byte_bufNtNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebuf14ByteBufVisitorECsbYJ3pOsSiPS_11cbor_decode:
  239|    862|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    862|    where
  241|    862|        V: Visitor<'de>,
  242|    862|    {
  243|    862|        self.deserialize_bytes(visitor)
  244|    862|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsbYJ3pOsSiPS_11cbor_decode:
  354|    600|    fn deserialize_tuple_struct<V>(
  355|    600|        self,
  356|    600|        _name: &'static str,
  357|    600|        len: usize,
  358|    600|        visitor: V,
  359|    600|    ) -> Result<V::Value, Self::Error>
  360|    600|    where
  361|    600|        V: Visitor<'de>,
  362|    600|    {
  363|    600|        self.deserialize_tuple(len, visitor)
  364|    600|    }
_RINvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCskhitFtkqptf_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsbYJ3pOsSiPS_11cbor_decode:
  113|    259|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    259|    where
  115|    259|        V: Visitor<'de>,
  116|    259|    {
  117|    259|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    245|        match tag.0 {
  120|    239|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      6|            _ => Err(DecodeError::TypeMismatch {
  122|      6|                name: "CBOR tag",
  123|      6|                byte: tag.0 as u8,
  124|      6|            }),
  125|       |        }
  126|    259|    }
_RNvMNtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE11from_readerCsbYJ3pOsSiPS_11cbor_decode:
   93|    600|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    600|        Deserializer { reader }
   95|    600|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDatayEECsbYJ3pOsSiPS_11cbor_decode:
  484|    470|        if let Some(len) = self.len.as_mut() {
  485|    470|            if *len > 0 {
  486|    470|                *len -= 1;
  487|    470|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    470|    }
_RNCNvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE8try_step0CsbYJ3pOsSiPS_11cbor_decode:
  106|  1.01k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RNvMs1_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE5tupleCsbYJ3pOsSiPS_11cbor_decode:
  443|    600|    pub fn tuple(
  444|    600|        de: &'a mut Deserializer<R>,
  445|    600|        len: usize,
  446|    600|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    600|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    593|        if array_start.0 == Some(len) {
  450|    588|            Ok(Accessor {
  451|    588|                de,
  452|    588|                len: array_start.0,
  453|    588|            })
  454|       |        } else {
  455|      5|            Err(DecodeError::RequireLength {
  456|      5|                name: "tuple",
  457|      5|                expect: len,
  458|      5|                value: array_start.0.unwrap_or(0),
  459|      5|            })
  460|       |        }
  461|    600|    }
_RINvXs7_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_bytesNtNtCskhitFtkqptf_3cid5serde17BytesToCidVisitorECsbYJ3pOsSiPS_11cbor_decode:
  646|    239|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    239|        let byte = peek_one(&mut self.0.reader)?;
  648|    238|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    237|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    228|                    Cow::Borrowed(buf) => {
  653|    228|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    226|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      5|                    Cow::Owned(mut buf) => {
  660|      5|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      3|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      2|                            buf.remove(0);
  664|      2|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      1|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    239|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsbYJ3pOsSiPS_11cbor_decode:
  228|  2.36k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  2.36k|    where
  230|  2.36k|        V: Visitor<'de>,
  231|  2.36k|    {
  232|  2.36k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  2.18k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     87|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  2.36k|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCskhitFtkqptf_3cid3cid3CidKj40_EEECsbYJ3pOsSiPS_11cbor_decode:
  484|    259|        if let Some(len) = self.len.as_mut() {
  485|    259|            if *len > 0 {
  486|    259|                *len -= 1;
  487|    259|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    259|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldEECsbYJ3pOsSiPS_11cbor_decode:
  484|    326|        if let Some(len) = self.len.as_mut() {
  485|    326|            if *len > 0 {
  486|    326|                *len -= 1;
  487|    326|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    326|    }
_RNvMs1_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE5arrayCsbYJ3pOsSiPS_11cbor_decode:
  434|    410|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    410|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    407|        Ok(Accessor {
  437|    407|            de,
  438|    407|            len: array_start.0,
  439|    407|        })
  440|    410|    }
_RNvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE3endCsbYJ3pOsSiPS_11cbor_decode:
  131|    192|        match peek_one(&mut self.reader) {
  132|      6|            Ok(_) => Err(DecodeError::TrailingData),
  133|    186|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    192|    }
_RNvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE8try_stepCsbYJ3pOsSiPS_11cbor_decode:
  101|  1.01k|    fn try_step<'a>(
  102|  1.01k|        &'a mut self,
  103|  1.01k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|  1.01k|    {
  105|  1.01k|        if self.reader.step_in() {
  106|  1.01k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|  1.01k|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_bytesNtNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebuf14ByteBufVisitorECsbYJ3pOsSiPS_11cbor_decode:
  228|    862|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    862|    where
  230|    862|        V: Visitor<'de>,
  231|    862|    {
  232|    862|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    715|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     14|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    862|    }
_RNvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess9size_hintCsbYJ3pOsSiPS_11cbor_decode:
  500|    407|    fn size_hint(&self) -> Option<usize> {
  501|    407|        self.len
  502|    407|    }
_RINvNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de10from_sliceNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsbYJ3pOsSiPS_11cbor_decode:
   40|    600|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    600|where
   42|    600|    T: de::Deserialize<'a>,
   43|    600|{
   44|    600|    let reader = SliceReader::new(buf);
   45|    600|    let mut deserializer = Deserializer::from_reader(reader);
   46|    600|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    192|    deserializer.end()?;
   48|    186|    Ok(value)
   49|    600|}
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsbYJ3pOsSiPS_11cbor_decode:
  484|    274|        if let Some(len) = self.len.as_mut() {
  485|    274|            if *len > 0 {
  486|    274|                *len -= 1;
  487|    274|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    274|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsbYJ3pOsSiPS_11cbor_decode:
  142|    470|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    470|        where V: Visitor<'de>
  144|    470|        {
  145|    470|            let value = <$t>::decode(&mut self.reader)?;
  146|    457|            visitor.$visit(value)
  147|    470|        }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEEECsbYJ3pOsSiPS_11cbor_decode:
  484|    410|        if let Some(len) = self.len.as_mut() {
  485|    410|            if *len > 0 {
  486|    410|                *len -= 1;
  487|    410|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    410|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCskhitFtkqptf_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsbYJ3pOsSiPS_11cbor_decode:
  318|    259|    fn deserialize_newtype_struct<V>(
  319|    259|        self,
  320|    259|        name: &'static str,
  321|    259|        visitor: V,
  322|    259|    ) -> Result<V::Value, Self::Error>
  323|    259|    where
  324|    259|        V: Visitor<'de>,
  325|    259|    {
  326|    259|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    259|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    259|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsbYJ3pOsSiPS_11cbor_decode:
  484|  2.37k|        if let Some(len) = self.len.as_mut() {
  485|  1.43k|            if *len > 0 {
  486|  1.11k|                *len -= 1;
  487|  1.11k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    325|                Ok(None)
  490|       |            }
  491|    931|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|    923|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      1|            self.de.reader.advance(1);
  495|      1|            Ok(None)
  496|       |        }
  497|  2.37k|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3D_7PayloadNtB1R_11Deserialize11deserialize1__NtB3A_5InnerB4p_11deserializeNtB3v_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsbYJ3pOsSiPS_11cbor_decode:
  484|    588|        if let Some(len) = self.len.as_mut() {
  485|    588|            if *len > 0 {
  486|    588|                *len -= 1;
  487|    588|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    588|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsbYJ3pOsSiPS_11cbor_decode:
  344|    600|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    600|    where
  346|    600|        V: Visitor<'de>,
  347|    600|    {
  348|    600|        let mut de = self.try_step()?;
  349|    600|        let seq = Accessor::tuple(&mut de, len)?;
  350|    588|        visitor.visit_seq(seq)
  351|    600|    }

_RINvXs4_NtCsi8FzBKos3j5_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleENtNtCs94lCMAiFPGZ_5serde2de5Error6customNtNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus5error5ErrorECsbYJ3pOsSiPS_11cbor_decode:
  134|     45|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     45|        DecodeError::Msg(msg.to_string())
  136|     45|    }
_RNvXs9_NtCsi8FzBKos3j5_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCsbYJ3pOsSiPS_11cbor_decode:
   70|    414|#[derive(Debug)]
_RINvXs4_NtCsi8FzBKos3j5_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleENtNtCs94lCMAiFPGZ_5serde2de5Error6customNtNtNtCsg5M8PL4Ya9o_10fvm_shared7address6errors5ErrorECsbYJ3pOsSiPS_11cbor_decode:
  134|     34|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     34|        DecodeError::Msg(msg.to_string())
  136|     34|    }
_RNvXs7_NtCsi8FzBKos3j5_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEINtB16_4FromINtNtCs2IAGTsgeePC_7cbor4ii5error11DecodeErrorB14_EE4fromCsbYJ3pOsSiPS_11cbor_decode:
  167|    268|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  168|    268|        match err {
  169|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  170|    202|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  171|     65|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  172|     65|                DecodeError::Mismatch { expect_major, byte }
  173|       |            }
  174|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  175|      0|                DecodeError::TypeMismatch { name, byte }
  176|       |            }
  177|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  178|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  179|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  180|       |            cbor4ii::DecodeError::RequireLength {
  181|      0|                name,
  182|      0|                expect,
  183|      0|                value,
  184|      0|            } => DecodeError::RequireLength {
  185|      0|                name,
  186|      0|                expect,
  187|      0|                value,
  188|      0|            },
  189|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  190|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  191|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  192|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  193|      0|            _ => DecodeError::Msg(err.to_string()),
  194|       |        }
  195|    268|    }
_RNvXs6_NtCsi8FzBKos3j5_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCsbYJ3pOsSiPS_11cbor_decode:
  161|    414|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  162|    414|        fmt::Debug::fmt(self, f)
  163|    414|    }
_RINvXs4_NtCsi8FzBKos3j5_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleENtNtCs94lCMAiFPGZ_5serde2de5Error6customNtNtCsddeQUdmtqP6_5alloc6string6StringECsbYJ3pOsSiPS_11cbor_decode:
  134|     36|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     36|        DecodeError::Msg(msg.to_string())
  136|     36|    }

_RINvNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser6to_vecNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsbYJ3pOsSiPS_11cbor_decode:
   23|    186|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    186|where
   25|    186|    T: Serialize + ?Sized,
   26|    186|{
   27|    186|    let writer = BufWriter::new(Vec::new());
   28|    186|    let mut serializer = Serializer::new(writer);
   29|    186|    value.serialize(&mut serializer)?;
   30|    186|    Ok(serializer.into_inner().into_inner())
   31|    186|}
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldECsbYJ3pOsSiPS_11cbor_decode:
  403|    186|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    186|        value.serialize(&mut *self.ser)
  405|    186|    }
_RINvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer24serialize_newtype_structNtNtCscEN7YdUwkvU_11serde_bytes7bytebuf7ByteBufECsbYJ3pOsSiPS_11cbor_decode:
  199|    186|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    186|        self,
  201|    186|        name: &'static str,
  202|    186|        value: &T,
  203|    186|    ) -> Result<Self::Ok, Self::Error> {
  204|    186|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    186|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    186|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsbYJ3pOsSiPS_11cbor_decode:
  403|    186|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    186|        value.serialize(&mut *self.ser)
  405|    186|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer13serialize_u64CsbYJ3pOsSiPS_11cbor_decode:
  123|    186|        v.encode(&mut self.writer)?;
  124|    186|        Ok(())
  125|    186|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressECsbYJ3pOsSiPS_11cbor_decode:
  403|    186|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    186|        value.serialize(&mut *self.ser)
  405|    186|    }
_RNvMNtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterE3newCsbYJ3pOsSiPS_11cbor_decode:
   51|    186|    pub fn new(writer: W) -> Serializer<W> {
   52|    186|        Serializer { writer }
   53|    186|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsbYJ3pOsSiPS_11cbor_decode:
  403|    186|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    186|        value.serialize(&mut *self.ser)
  405|    186|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer13serialize_seqCsbYJ3pOsSiPS_11cbor_decode:
  226|    186|        if let Some(len) = len {
  227|    186|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    186|        Ok(Collect {
  232|    186|            bounded: len.is_some(),
  233|    186|            ser: self,
  234|    186|        })
  235|    186|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser12SerializeSeq17serialize_elementRNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressECsbYJ3pOsSiPS_11cbor_decode:
  369|    218|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    218|        value.serialize(&mut *self.ser)
  371|    218|    }
_RNvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser12SerializeSeq3endCsbYJ3pOsSiPS_11cbor_decode:
  374|    186|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    186|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    186|        }
  378|       |
  379|    186|        Ok(())
  380|    186|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCskhitFtkqptf_3cid3cid3CidKj40_EECsbYJ3pOsSiPS_11cbor_decode:
  403|    186|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    186|        value.serialize(&mut *self.ser)
  405|    186|    }
_RNvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct3endCsbYJ3pOsSiPS_11cbor_decode:
  408|    186|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    186|        Ok(())
  410|    186|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer15serialize_tupleCsbYJ3pOsSiPS_11cbor_decode:
  239|    186|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    186|        Ok(BoundedCollect { ser: self })
  241|    186|    }
_RNvXs7_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer15serialize_bytesCsbYJ3pOsSiPS_11cbor_decode:
  550|    186|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    186|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    186|        let prefixed = [&[0x00], value].concat();
  553|    186|        // CIDs are serialized with CBOR tag 42.
  554|    186|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    186|        Ok(())
  556|    186|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsbYJ3pOsSiPS_11cbor_decode:
  403|    186|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    186|        value.serialize(&mut *self.ser)
  405|    186|    }
_RNvMNtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterE10into_innerCsbYJ3pOsSiPS_11cbor_decode:
   56|    186|    pub fn into_inner(self) -> W {
   57|    186|        self.writer
   58|    186|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsbYJ3pOsSiPS_11cbor_decode:
  403|    186|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    186|        value.serialize(&mut *self.ser)
  405|    186|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer22serialize_tuple_structCsbYJ3pOsSiPS_11cbor_decode:
  244|    186|    fn serialize_tuple_struct(
  245|    186|        self,
  246|    186|        _name: &'static str,
  247|    186|        len: usize,
  248|    186|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    186|        self.serialize_tuple(len)
  250|    186|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer15serialize_bytesCsbYJ3pOsSiPS_11cbor_decode:
  160|    962|        types::Bytes(v).encode(&mut self.writer)?;
  161|    962|        Ok(())
  162|    962|    }

_RNvXCseGEyZedQVlX_11serde_tupleINtB2_10SerializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEENtNtCs94lCMAiFPGZ_5serde3ser10Serializer22serialize_tuple_structCsbYJ3pOsSiPS_11cbor_decode:
  158|    186|    fn serialize_tuple_struct(
  159|    186|        self,
  160|    186|        name: &'static str,
  161|    186|        len: usize,
  162|    186|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    186|        self.0.serialize_tuple_struct(name, len)
  164|    186|    }
_RINvXs_CseGEyZedQVlX_11serde_tupleINtB5_12DeserializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEENtNtCs94lCMAiFPGZ_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsbYJ3pOsSiPS_11cbor_decode:
  353|    600|    fn deserialize_tuple_struct<V>(
  354|    600|        self,
  355|    600|        name: &'static str,
  356|    600|        len: usize,
  357|    600|        visitor: V,
  358|    600|    ) -> Result<V::Value, Self::Error>
  359|    600|    where
  360|    600|        V: serde::de::Visitor<'de>,
  361|    600|    {
  362|    600|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    600|    }

_RNvXNtCs3GhHaT9005n_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCsg5M8PL4Ya9o_10fvm_shared:
    9|      3|    fn as_display(&self) -> Self {
   10|      3|        self
   11|      3|    }

_RNvNtCskfR01peMIm4_15unsigned_varint6decode3u64CsbYJ3pOsSiPS_11cbor_decode:
  122|    835|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    835|    decode!(buf, 9, u64)
  124|    835|}
_RNvNtCskfR01peMIm4_15unsigned_varint6decode7is_lastCsbYJ3pOsSiPS_11cbor_decode:
   90|  3.78k|pub fn is_last(b: u8) -> bool {
   91|  3.78k|    b & 0x80 == 0
   92|  3.78k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6decode3u64Csg5M8PL4Ya9o_10fvm_shared:
  122|    421|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    421|    decode!(buf, 9, u64)
  124|    421|}
_RNvNtCskfR01peMIm4_15unsigned_varint6decode7is_lastCsg5M8PL4Ya9o_10fvm_shared:
   90|  2.55k|pub fn is_last(b: u8) -> bool {
   91|  2.55k|    b & 0x80 == 0
   92|  2.55k|}

_RNvNtCskfR01peMIm4_15unsigned_varint6encode2u8CsbYJ3pOsSiPS_11cbor_decode:
   45|    186|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    186|    encode!(number, buf)
   47|    186|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode3u64CsbYJ3pOsSiPS_11cbor_decode:
   69|    522|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    522|    encode!(number, buf)
   71|    522|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode9u8_bufferCsbYJ3pOsSiPS_11cbor_decode:
  101|    186|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    186|    [0; U8_LEN]
  103|    186|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode10u64_bufferCsbYJ3pOsSiPS_11cbor_decode:
  119|  1.37k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.37k|    [0; U64_LEN]
  121|  1.37k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode3u64Csg5M8PL4Ya9o_10fvm_shared:
   69|    142|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    142|    encode!(number, buf)
   71|    142|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode10u64_bufferCsg5M8PL4Ya9o_10fvm_shared:
  119|    142|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    142|    [0; U64_LEN]
  121|    142|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode10u64_bufferCssVkL66IuLW_17fvm_ipld_bitfield:
  119|  9.07k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  9.07k|    [0; U64_LEN]
  121|  9.07k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode3u64CssVkL66IuLW_17fvm_ipld_bitfield:
   69|  9.07k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  9.07k|    encode!(number, buf)
   71|  9.07k|}

_RINvNtCskfR01peMIm4_15unsigned_varint2io8read_u64QQRShECsbYJ3pOsSiPS_11cbor_decode:
   31|    851|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    851|                let mut b = encode::$b();
   33|  1.95k|                for i in 0 .. b.len() {
   34|  1.95k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.95k|                    if n == 0 {
   36|     13|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.93k|                    }
   38|  1.93k|                    if decode::is_last(b[i]) {
   39|    835|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.10k|                    }
   41|       |                }
   42|      3|                Err(decode::Error::Overflow.into())
   43|    851|            }
_RNvXs1_NtCskfR01peMIm4_15unsigned_varint2ioNtB5_9ReadErrorINtNtCsUG827pA8ag_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|      9|    fn from(e: decode::Error) -> Self {
   92|      9|        ReadError::Decode(e)
   93|      9|    }

_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEE3newB9_:
  467|    186|    fn new(mut iter: I) -> Self {
  468|    186|        let next = iter.next();
  469|    186|        Self { iter, next }
  470|    186|    }
_RNvXsb_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1U_5slice4iter4IterINtNtNtB1U_3ops5range5RangeyEEEEIB1z_INtNtNtB1S_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1Q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3B_NtB5_10DifferenceEENtNtNtB1S_6traits8iterator8Iterator4nextB9_:
  437|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  438|  8.49k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  8.30k|        while let Some(next) = self.iter.peek() {
  443|  8.13k|            if next.start > range.end {
  444|  8.13k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  8.30k|        Some(range)
  452|  8.49k|    }
_RNvMs5_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBT_INtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3d_NtB5_10DifferenceE3newB9_:
  297|    186|    pub fn new(a: A, b: B) -> Self {
  298|    186|        Self(Merge::new(_Combine::new(a, b)))
  299|    186|    }
_RNvMsa_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1U_5slice4iter4IterINtNtNtB1U_3ops5range5RangeyEEEEIB1z_INtNtNtB1S_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1Q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3B_NtB5_10DifferenceEE3newB9_:
  424|    186|    pub fn new(iter: I) -> Self {
  425|    186|        Self {
  426|    186|            iter: Lookahead::new(iter),
  427|    186|        }
  428|    186|    }
_RNvXNtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  8.30k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  8.30k|        // the union of a range and an empty range is just that range
  111|  8.30k|        Some(lhs)
  112|  8.30k|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1u_6traits8iterator8Iterator4nexts_0Bb_:
  389|  8.30k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  8.49k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.49k|        self.next.as_mut()
  474|  8.49k|    }
_RNvMsa_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1G_5slice4iter4IterINtNtNtB1G_3ops5range5RangeyEEEEIB1l_INtNtNtB1E_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1C_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    186|    pub fn new(iter: I) -> Self {
  425|    186|        Self {
  426|    186|            iter: Lookahead::new(iter),
  427|    186|        }
  428|    186|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1s_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  16.9k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  16.9k|        self.next.as_mut()
  474|  16.9k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    186|    fn new(mut iter: I) -> Self {
  468|    186|        let next = iter.next();
  469|    186|        Self { iter, next }
  470|    186|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1Y_5slice4iter4IterINtNtNtB1Y_3ops5range5RangeyEEEEIB1D_INtNtNtB1W_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1U_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEE4peekB9_:
  472|  8.30k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.30k|        self.next.as_mut()
  474|  8.30k|    }
_RNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEIB19_INtNtNtB1s_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1s_6traits8iterator8Iterator4nextB9_:
  387|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  388|  8.49k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  8.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  8.49k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1s_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|    372|    fn new(mut iter: I) -> Self {
  468|    372|        let next = iter.next();
  469|    372|        Self { iter, next }
  470|    372|    }
_RNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceENtNtNtB1G_6traits8iterator8Iterator4nextB9_:
  387|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  388|  8.49k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  8.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  8.49k|    }
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEENtNtNtB1s_6traits8iterator8Iterator4nextB9_:
  480|  8.30k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.30k|        let next = self.next.take()?;
  483|  8.30k|        self.next = self.iter.next();
  484|  8.30k|        Some(next)
  485|  8.30k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    186|    fn new(mut iter: I) -> Self {
  468|    186|        let next = iter.next();
  469|    186|        Self { iter, next }
  470|    186|    }
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1Y_5slice4iter4IterINtNtNtB1Y_3ops5range5RangeyEEEEIB1D_INtNtNtB1W_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1U_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEENtNtNtB1W_6traits8iterator8Iterator4nextB9_:
  480|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.49k|        let next = self.next.take()?;
  483|  8.30k|        self.next = self.iter.next();
  484|  8.30k|        Some(next)
  485|  8.49k|    }
_RNvXs6_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1q_6traits8iterator8Iterator4nextB9_:
  310|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  311|  8.49k|        self.0.next()
  312|  8.49k|    }
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1G_6traits8iterator8Iterator4nextB9_:
  480|  8.30k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.30k|        let next = self.next.take()?;
  483|  8.30k|        self.next = self.iter.next();
  484|  8.30k|        Some(next)
  485|  8.30k|    }
_RNvXsf_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsUG827pA8ag_4core7default7Default7defaultB9_:
   86|    186|#[derive(Default)]
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceE3newB9_:
  342|    186|    fn new(lhs: A, rhs: B) -> Self {
  343|    186|        Self {
  344|    186|            lhs: Lookahead::new(lhs),
  345|    186|            rhs: Lookahead::new(rhs),
  346|    186|            combinator: Default::default(),
  347|    186|        }
  348|    186|    }
_RNvXsh_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsUG827pA8ag_4core7default7Default7defaultB9_:
  151|    186|#[derive(Default)]
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1I_6traits8iterator8Iterator4nextB9_:
  480|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.49k|        let next = self.next.take()?;
  483|  8.30k|        self.next = self.iter.next();
  484|  8.30k|        Some(next)
  485|  8.49k|    }
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceE10next_rangeB9_:
  353|  8.49k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  8.49k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  8.30k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    186|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  8.30k|        if advance_lhs {
  370|  8.30k|            self.lhs.next();
  371|  8.30k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  8.30k|        range
  376|  8.49k|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3r_NtB7_10DifferenceENtNtNtB1I_6traits8iterator8Iterator4next0Bb_:
  389|  8.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEE4peekB9_:
  472|  8.49k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.49k|        self.next.as_mut()
  474|  8.49k|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1u_6traits8iterator8Iterator4next0Bb_:
  389|  8.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEIB19_INtNtNtB1s_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    186|    fn new(lhs: A, rhs: B) -> Self {
  343|    186|        Self {
  344|    186|            lhs: Lookahead::new(lhs),
  345|    186|            rhs: Lookahead::new(rhs),
  346|    186|            combinator: Default::default(),
  347|    186|        }
  348|    186|    }
_RNvXs6_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBT_INtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3d_NtB5_10DifferenceENtNtNtB1u_6traits8iterator8Iterator4nextB9_:
  310|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  311|  8.49k|        self.0.next()
  312|  8.49k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1Y_5slice4iter4IterINtNtNtB1Y_3ops5range5RangeyEEEEIB1D_INtNtNtB1W_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1U_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEE3newB9_:
  467|    186|    fn new(mut iter: I) -> Self {
  468|    186|        let next = iter.next();
  469|    186|        Self { iter, next }
  470|    186|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  8.30k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.30k|        self.next.as_mut()
  474|  8.30k|    }
_RNvXs0_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  8.30k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  8.30k|        // the difference between a range and an empty range is just that range
  183|  8.30k|        Some(lhs)
  184|  8.30k|    }
_RNvMs5_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    186|    pub fn new(a: A, b: B) -> Self {
  298|    186|        Self(Merge::new(_Combine::new(a, b)))
  299|    186|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3r_NtB7_10DifferenceENtNtNtB1I_6traits8iterator8Iterator4nexts_0Bb_:
  389|  8.30k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsb_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1G_5slice4iter4IterINtNtNtB1G_3ops5range5RangeyEEEEIB1l_INtNtNtB1E_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1C_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1E_6traits8iterator8Iterator4nextB9_:
  437|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  438|  8.49k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  8.30k|        while let Some(next) = self.iter.peek() {
  443|  8.13k|            if next.start > range.end {
  444|  8.13k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  8.30k|        Some(range)
  452|  8.49k|    }
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEIB19_INtNtNtB1s_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  8.49k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  8.49k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  8.30k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    186|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  8.30k|        if advance_lhs {
  370|  8.30k|            self.lhs.next();
  371|  8.30k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  8.30k|        range
  376|  8.49k|    }

_RNvXs3_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB12_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtNtNtB12_6traits8iterator8Iterator4nextB7_:
  153|    372|    fn next(&mut self) -> Option<Self::Item> {
  154|    372|        self.0.next()
  155|    372|    }
_RINvNtCssVkL66IuLW_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsUG827pA8ag_4core4iter8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEEB4_:
  163|    372|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|    372|    let mut iter = bits.into_iter().peekable();
  165|    372|
  166|    372|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|    372|    }))
  180|    372|}
_RINvYINtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtBZ_5slice4iter4IterINtNtNtBZ_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBX_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBV_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    186|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    186|        Combine::new(self, other)
   23|    186|    }
_RINvMs2_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EE3newBW_EB8_:
  139|    372|    pub fn new<II>(iter: II) -> Self
  140|    372|    where
  141|    372|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    372|    {
  143|    372|        Self(iter.into_iter())
  144|    372|    }
_RINvYINtNtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1n_5slice4iter4IterINtNtNtB1n_3ops5range5RangeyEEEEIB12_INtNtNtB1l_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1j_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB34_EBa_:
   31|    186|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    186|        Combine::new(self, other)
   33|    186|    }
_RNvXs3_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB14_5slice4iter4IterINtNtNtB14_3ops5range5RangeyEEEENtNtNtB12_6traits8iterator8Iterator4nextB7_:
  153|  8.49k|    fn next(&mut self) -> Option<Self::Item> {
  154|  8.49k|        self.0.next()
  155|  8.49k|    }
_RINvMs2_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEE3newBW_EB8_:
  139|    186|    pub fn new<II>(iter: II) -> Self
  140|    186|    where
  141|    186|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    186|    {
  143|    186|        Self(iter.into_iter())
  144|    186|    }
_RNCINvNtCssVkL66IuLW_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsUG827pA8ag_4core4iter8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0B6_:
  166|    372|    Ranges::new(iter::from_fn(move || {
  167|    372|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|    372|    }))

_RNvMs4_CssVkL66IuLW_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    186|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    186|        self.inner_ranges()
  287|    186|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    186|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    186|    }
_RNvMs4_CssVkL66IuLW_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    186|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    186|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    186|    }
_RNvXsi_CssVkL66IuLW_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsUG827pA8ag_4core7default7Default7defaultB5_:
   42|    274|#[derive(Debug, Default, Clone)]

_RNvXNtCssVkL66IuLW_17fvm_ipld_bitfield5rangeINtNtNtCsUG827pA8ag_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  8.30k|    fn size(&self) -> Self::Idx {
   15|  8.30k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  8.30k|            self.end - self.start
   19|       |        }
   20|  8.30k|    }

_RNvXs5_NtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCsUG827pA8ag_4core3fmt7Display3fmt:
    3|     45|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   81|    186|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    186|    where
   83|    186|        S: Serializer,
   84|    186|    {
   85|    186|        let bytes = self.to_bytes();
   86|    186|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    186|        }
   92|    186|        serde_bytes::serialize(&bytes, serializer)
   93|    186|    }
_RINvXs_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   97|    326|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    326|    where
   99|    326|        D: Deserializer<'de>,
  100|    326|    {
  101|    326|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    319|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    319|        }
  108|    319|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    326|    }
_RNvMs1_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    319|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    319|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    318|        let version = reader.read(2);
  160|    318|        if version != 0 {
  161|      1|            return Err(Error::UnsupportedVersion);
  162|    317|        }
  163|    317|
  164|    317|        let mut next_value = reader.read(1) == 1;
  165|    317|        let mut ranges = Vec::new();
  166|    317|        let mut index = 0u64;
  167|    317|        let mut total_len: u64 = 0;
  168|       |
  169|  25.6k|        while let Some(len) = reader.read_len()? {
  170|  25.3k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  25.3k|            if ovf {
  172|      1|                return Err(Error::RLEOverflow);
  173|  25.3k|            }
  174|  25.3k|            total_len = new_total_len;
  175|  25.3k|            let start = index;
  176|  25.3k|            index += len;
  177|  25.3k|            let end = index;
  178|  25.3k|
  179|  25.3k|            if next_value {
  180|  12.7k|                ranges.push(start..end);
  181|  12.7k|            }
  182|       |
  183|  25.3k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    280|        if next_value {
  189|      6|            return Err(Error::NotMinimal);
  190|    274|        }
  191|    274|
  192|    274|        Ok(Self {
  193|    274|            ranges,
  194|    274|            ..Default::default()
  195|    274|        })
  196|    319|    }
_RNvMs1_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    186|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    186|        let mut iter = self.ranges();
  201|       |
  202|    186|        let first_range = match iter.next() {
  203|    178|            Some(range) => range,
  204|      8|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    178|        let mut writer = BitWriter::new();
  208|    178|        writer.write(0, 2); // version 00
  209|    178|
  210|    178|        if first_range.start == 0 {
  211|    100|            writer.write(1, 1); // the first bit is a 1
  212|    100|        } else {
  213|     78|            writer.write(0, 1); // the first bit is a 0
  214|     78|            writer.write_len(first_range.start); // the number of leading 0s
  215|     78|        }
  216|       |
  217|    178|        writer.write_len(first_range.size());
  218|    178|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  8.30k|        for range in iter {
  223|  8.13k|            writer.write_len(range.start - index); // zeros
  224|  8.13k|            writer.write_len(range.size()); // ones
  225|  8.13k|            index = range.end;
  226|  8.13k|        }
  227|       |
  228|    178|        writer.finish()
  229|    186|    }

_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  25.6k|    pub fn has_more(&self) -> bool {
  153|  25.6k|        self.bits != 0 || !self.bytes.is_empty()
  154|  25.6k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  25.6k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  25.6k|        // We're done.
  120|  25.6k|        if !self.has_more() {
  121|    280|            return Ok(None);
  122|  25.3k|        }
  123|  25.3k|
  124|  25.3k|        let peek6 = self.peek(6);
  125|       |
  126|  25.3k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|  10.7k|            self.drop(1);
  129|  10.7k|            1
  130|  14.5k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  2.63k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  2.63k|            self.drop(6);
  134|  2.63k|            if val < 2 {
  135|     12|                return Err(Error::NotMinimal);
  136|  2.62k|            }
  137|  2.62k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  11.9k|            self.drop(2);
  141|  11.9k|            let val = self.read_varint()?;
  142|  11.9k|            if val < 16 {
  143|     13|                return Err(Error::NotMinimal);
  144|  11.9k|            }
  145|  11.9k|            val
  146|       |        };
  147|       |
  148|  25.3k|        Ok(Some(len))
  149|  25.6k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  85.6k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  85.6k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  85.6k|        let mask = (1 << num_bits) - 1;
   55|  85.6k|        (self.bits & mask) as u8
   56|  85.6k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  11.9k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  11.9k|        let mut len = 0u64;
   94|       |
   95|  59.6k|        for i in 0..VARINT_MAX_BYTES {
   96|  59.6k|            let byte = self.read(8);
   97|  59.6k|
   98|  59.6k|            // strip off the most significant bit and add
   99|  59.6k|            // it to the output
  100|  59.6k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  59.6k|
  102|  59.6k|            // if the most significant bit is a 0, we've
  103|  59.6k|            // reached the end of the varint
  104|  59.6k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  11.9k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      8|                    break;
  109|  11.9k|                }
  110|  11.9k|                return Ok(len);
  111|  47.6k|            }
  112|       |        }
  113|       |
  114|     11|        Err(Error::InvalidVarint)
  115|  11.9k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  60.2k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  60.2k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  60.2k|        let res = self.peek(num_bits);
   85|  60.2k|        self.drop(num_bits);
   86|  60.2k|
   87|  60.2k|        res
   88|  60.2k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  85.6k|    pub fn drop(&mut self, num_bits: u32) {
   61|  85.6k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  85.6k|        self.bits >>= num_bits;
   65|  85.6k|        self.num_bits -= num_bits;
   66|  85.6k|
   67|  85.6k|        // not sure why this being outside of the if improves the performance
   68|  85.6k|        // bit it does, probably related to keeping caches warm
   69|  85.6k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  85.6k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  85.6k|
   72|  85.6k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  85.6k|        if self.num_bits < 8 {
   74|  65.9k|            self.num_bits += 8;
   75|  65.9k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  65.9k|        }
   77|  85.6k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    319|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    319|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    319|        // data.
   28|    319|        if bytes.last() == Some(&0) {
   29|      1|            return Err(Error::NotMinimal);
   30|    318|        }
   31|    318|        let mut bits = 0u64;
   32|    954|        for i in 0..2 {
   33|    636|            let byte = bytes.get(i).unwrap_or(&0);
   34|    636|            bits |= (*byte as u64) << (8 * i);
   35|    636|        }
   36|       |
   37|    318|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    318|
   39|    318|        Ok(Self {
   40|    318|            bytes,
   41|    318|            bits,
   42|    318|            num_bits: 16,
   43|    318|        })
   44|    319|    }

_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  16.5k|    pub fn write_len(&mut self, len: u64) {
   39|  16.5k|        debug_assert!(len > 0);
   40|       |
   41|  16.5k|        if len == 1 {
   42|  5.87k|            // Block Single (prefix 1)
   43|  5.87k|            self.write(1, 1);
   44|  10.6k|        } else if len < 16 {
   45|  1.57k|            // Block Short (prefix 01)
   46|  1.57k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  1.57k|            self.write(len as u8, 4);
   48|  1.57k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  9.07k|            self.write(0, 2);
   51|  9.07k|
   52|  9.07k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  45.7k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  45.7k|                self.write(byte, 8);
   55|  45.7k|            }
   56|       |        }
   57|  16.5k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  64.2k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  64.2k|        debug_assert!(num_bits <= 8);
   24|  64.2k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  64.2k|        self.bits |= (byte as u16) << self.num_bits;
   27|  64.2k|        self.num_bits += num_bits;
   28|  64.2k|
   29|  64.2k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  64.2k|        if self.num_bits >= 8 {
   31|  49.9k|            self.bytes.push(self.bits as u8);
   32|  49.9k|            self.bits >>= 8;
   33|  49.9k|            self.num_bits -= 8;
   34|  49.9k|        }
   35|  64.2k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    178|    pub fn finish(mut self) -> Vec<u8> {
   61|    178|        if self.bits > 0 {
   62|     78|            self.bytes.push(self.bits as u8);
   63|    100|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    178|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    178|        self.bytes
   71|    178|    }
_RNvXs_NtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsUG827pA8ag_4core7default7Default7defaultB8_:
    4|    178|#[derive(Default, Clone, Debug)]
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    178|    pub fn new() -> Self {
   18|    178|        Default::default()
   19|    178|    }

_RINvXs4_NtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   93|    274|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    274|    where
   95|    274|        D: Deserializer<'de>,
   96|    274|    {
   97|    274|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    259|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    259|        }
  104|    259|        Ok(Self::Unvalidated(bytes))
  105|    274|    }
_RINvXNvXNvNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1m_9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   35|    186|#[derive(Debug, Serialize)]
_RINvXNvNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   35|    186|#[derive(Debug, Serialize)]

_RNvXNtCs6hP7RYj9RD6_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCsUG827pA8ag_4core7convert4FromINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCsbYJ3pOsSiPS_11cbor_decode:
   22|    414|    fn from(err: DecodeError<T>) -> Self {
   23|    414|        Self {
   24|    414|            description: err.to_string(),
   25|    414|            protocol: CodecProtocol::Cbor,
   26|    414|        }
   27|    414|    }

_RINvCs6hP7RYj9RD6_17fvm_ipld_encoding6to_vecNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsbYJ3pOsSiPS_11cbor_decode:
   33|    186|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    186|where
   35|    186|    T: ser::Serialize + ?Sized,
   36|    186|{
   37|    186|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    186|}
_RINvCs6hP7RYj9RD6_17fvm_ipld_encoding10from_sliceNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsbYJ3pOsSiPS_11cbor_decode:
   50|    600|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    600|where
   52|    600|    T: de::Deserialize<'a>,
   53|    600|{
   54|    600|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    600|}

_RNvXs5_NtNtCsg5M8PL4Ya9o_10fvm_shared7address6errorsNtB5_5ErrorNtNtCsUG827pA8ag_4core3fmt7Display3fmt:
   13|     34|#[derive(Debug, PartialEq, Error)]
_RNvXs0_NtNtCsg5M8PL4Ya9o_10fvm_shared7address6errorsNtB5_5ErrorINtNtCsUG827pA8ag_4core7convert4FromNtNtCskfR01peMIm4_15unsigned_varint6decode5ErrorE4from:
   49|     17|    fn from(_: VarintError) -> Error {
   50|     17|        Error::InvalidPayload
   51|     17|    }

_RINvXs3_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB6_7AddressNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
  274|  2.03k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  2.03k|    where
  276|  2.03k|        D: Deserializer<'de>,
  277|  2.03k|    {
  278|  2.03k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  1.95k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  2.03k|    }
_RINvXs2_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB6_7AddressNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
  264|    404|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|    404|    where
  266|    404|        S: Serializer,
  267|    404|    {
  268|    404|        let address_bytes = self.to_bytes();
  269|    404|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|    404|    }
_RNvMs_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  1.95k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  1.95k|        if bz.len() < 2 {
   88|      9|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  1.94k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  1.94k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  1.95k|    }
_RNvMs_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|    404|    pub fn to_bytes(self) -> Vec<u8> {
  177|    404|        self.payload.to_bytes()
  178|    404|    }
_RNvNtCsg5M8PL4Ya9o_10fvm_shared7address12to_leb_bytes:
  310|    142|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|    142|    // write id to buffer in leb128 format
  312|    142|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|    142|}
_RNvMs_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB4_7Address3new:
   78|  1.94k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  1.94k|        Ok(Self {
   80|  1.94k|            network,
   81|  1.94k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  1.94k|    }
_RNvNtCsg5M8PL4Ya9o_10fvm_shared7address14from_leb_bytes:
  315|    421|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|    421|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|    404|    if !remaining.is_empty() {
  319|      4|        return Err(Error::InvalidPayload);
  320|    400|    }
  321|    400|    Ok(id)
  322|    421|}

_RNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|    404|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|    404|        let mut bz = match self {
   40|    142|            ID(i) => to_leb_bytes(i).unwrap(),
   41|     88|            Secp256k1(arr) => arr.to_vec(),
   42|     80|            Actor(arr) => arr.to_vec(),
   43|     94|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|    404|        bz.insert(0, Protocol::from(self) as u8);
   47|    404|        bz
   48|    404|    }
_RNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  1.94k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  1.94k|        let payload = match protocol {
   53|    421|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    423|                payload
   56|    423|                    .try_into()
   57|    423|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    742|                payload
   61|    742|                    .try_into()
   62|    742|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    354|                payload
   66|    354|                    .try_into()
   67|    354|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  1.91k|        Ok(payload)
   71|  1.94k|    }
_RNCNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB4_7Payload3news0_0B8_:
   67|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB4_7Payload3new0B8_:
   57|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB4_7Payload3news_0B8_:
   62|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvXs_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsUG827pA8ag_4core7convert4FromNtB4_7PayloadE4from:
   75|    404|    fn from(pl: Payload) -> Self {
   76|    404|        match pl {
   77|    142|            Payload::ID(_) => Self::ID,
   78|     88|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|     80|            Payload::Actor(_) => Self::Actor,
   80|     94|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|    404|    }

_RNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  1.94k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  1.94k|        FromPrimitive::from_u8(b)
   28|  1.94k|    }
_RNvXNvNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscdoVAoRIjja_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  1.94k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscdoVAoRIjja_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  1.94k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RINvXNvNvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtBa_7PayloadNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCseGEyZedQVlX_11serde_tuple10SerializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEEECsbYJ3pOsSiPS_11cbor_decode:
   10|    186|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtB5_7PayloadNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   10|    186|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtBd_7PayloadNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsbYJ3pOsSiPS_11cbor_decode:
   10|    186|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtBb_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   10|    118|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   10|  1.00k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtBd_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEE0CsbYJ3pOsSiPS_11cbor_decode:
   10|    470|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtBe_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsbYJ3pOsSiPS_11cbor_decode:
   10|    588|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB8_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCseGEyZedQVlX_11serde_tuple12DeserializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEEECsbYJ3pOsSiPS_11cbor_decode:
   10|    600|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

