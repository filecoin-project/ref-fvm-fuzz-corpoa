_RINvXss_NtNtCsSqpNEdGVxA_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  256|    522|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    522|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    522|                }
_RNvMNtNtCsSqpNEdGVxA_7cbor4ii4core3decNtB2_9Reference6as_refCsi91UKKyYkf_11cbor_decode:
   81|  15.2k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  15.2k|        match self {
   83|  15.2k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  15.2k|    }
_RINvMs0_NtNtCsSqpNEdGVxA_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  227|  7.40k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  7.40k|        match self.byte & self.major_limit {
  229|  7.40k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|  1.45k|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|    346|                let mut buf = [0; 2];
  233|    346|                pull_exact(reader, &mut buf)?;
  234|    338|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|    354|                let mut buf = [0; 4];
  238|    354|                pull_exact(reader, &mut buf)?;
  239|    342|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    415|                let mut buf = [0; 8];
  243|    415|                pull_exact(reader, &mut buf)?;
  244|    404|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|     40|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  7.40k|    }
_RINvXs5_NtNtCsSqpNEdGVxA_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs5sAj5AAFQNS_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  510|  4.31k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  4.31k|        use crate::alloc::borrow::Cow;
  512|  4.31k|
  513|  4.31k|        let mut buf = Vec::new();
  514|  4.31k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  4.07k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|     92|            Cow::Owned(buf)
  518|       |        }))
  519|  4.31k|    }
_RNvNtNtCsSqpNEdGVxA_7cbor4ii4core3dec8if_majorCsi91UKKyYkf_11cbor_decode:
  894|    282|pub fn if_major(byte: u8) -> u8 {
  895|    282|    byte >> 5
  896|    282|}
_RNCINvNtNtCsSqpNEdGVxA_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0Csi91UKKyYkf_11cbor_decode:
  475|  5.80k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvYNtNtNtCsSqpNEdGVxA_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
   73|  1.14k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  1.14k|        let byte = pull_one(reader)?;
   75|  1.13k|        Self::decode_with(byte, reader)
   76|  1.14k|    }
_RINvNtNtCsSqpNEdGVxA_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  431|  10.1k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  10.1k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  10.1k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  10.1k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  5.40k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  5.40k|            if buf.len() >= len {
  440|  5.33k|                reader.advance(len);
  441|  5.33k|                return Ok(Some(&buf[..len]));
  442|     71|            }
  443|      0|        }
  444|       |
  445|     71|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|     76|        while len != 0 {
  448|     76|            let readbuf = reader.fill(len)?;
  449|     76|            let readbuf = readbuf.as_ref();
  450|     76|
  451|     76|            if readbuf.is_empty() {
  452|     71|                return Err(Error::Eof);
  453|      5|            }
  454|      5|
  455|      5|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      5|
  457|      5|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      5|            reader.advance(readlen);
  459|      5|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|  6.17k|            let byte = pull_one(reader)?;
  467|       |
  468|  6.14k|            if byte == marker::BREAK {
  469|    339|                break
  470|  5.81k|            }
  471|  5.81k|
  472|  5.81k|            if !reader.step_in() {
  473|      1|                return Err(Error::DepthLimit);
  474|  5.80k|            }
  475|  5.80k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|  5.80k|            let reader = &mut *reader;
  477|       |
  478|  5.80k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|  1.26k|                buf.extend_from_slice(longbuf);
  480|  1.26k|            }
  481|       |        }
  482|       |
  483|    339|        Ok(None)
  484|       |    }
  485|  10.1k|}
_RINvYNtNtNtCsSqpNEdGVxA_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
   73|    298|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    298|        let byte = pull_one(reader)?;
   75|    295|        Self::decode_with(byte, reader)
   76|    298|    }
_RINvNtNtCsSqpNEdGVxA_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  136|  1.11k|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  2.21k|    while !buf.is_empty() {
  138|  1.13k|        let readbuf = reader.fill(buf.len())?;
  139|  1.13k|        let readbuf = readbuf.as_ref();
  140|  1.13k|
  141|  1.13k|        if readbuf.is_empty() {
  142|     31|            return Err(Error::Eof);
  143|  1.09k|        }
  144|  1.09k|
  145|  1.09k|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|  1.09k|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|  1.09k|        reader.advance(len);
  148|  1.09k|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|  1.08k|    Ok(())
  152|  1.11k|}
_RINvNtNtCsSqpNEdGVxA_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  125|  14.0k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  14.0k|    let b = reader.fill(1)?
  127|  14.0k|        .as_ref()
  128|  14.0k|        .get(0)
  129|  14.0k|        .copied()
  130|  14.0k|        .ok_or(Error::Eof)?;
  131|  13.8k|    reader.advance(1);
  132|  13.8k|    Ok(b)
  133|  14.0k|}
_RINvYyNtNtNtCsSqpNEdGVxA_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
   73|    531|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    531|        let byte = pull_one(reader)?;
   75|    522|        Self::decode_with(byte, reader)
   76|    531|    }
_RINvXsg_NtNtCsSqpNEdGVxA_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  707|    295|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    295|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    295|    }
_RNvMs0_NtNtCsSqpNEdGVxA_7cbor4ii4core3decNtB5_7TypeNum3newCsi91UKKyYkf_11cbor_decode:
  179|  7.40k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  7.40k|        TypeNum { major_limit, byte }
  181|  7.40k|    }
_RINvXsc_NtNtCsSqpNEdGVxA_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  615|  1.13k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|  1.13k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|  1.13k|    }
_RINvYINtNtNtCsSqpNEdGVxA_7cbor4ii4core5types5BytesINtNtCs5sAj5AAFQNS_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
   73|  4.39k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  4.39k|        let byte = pull_one(reader)?;
   75|  4.31k|        Self::decode_with(byte, reader)
   76|  4.39k|    }
_RINvNtNtCsSqpNEdGVxA_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
  599|  11.2k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  11.2k|    -> Result<Option<usize>, Error<R::Error>>
  601|  11.2k|{
  602|  11.2k|    if byte != (marker::START | (major << 5)) {
  603|  6.58k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  6.52k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  6.52k|        Ok(Some(len))
  606|       |    } else {
  607|  4.67k|        Ok(None)
  608|       |    }
  609|  11.2k|}

_RINvXs2_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
   70|  2.40k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  2.40k|        match u8::try_from(self.value) {
   72|  2.29k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    106|                let [x0, x1] = self.value.to_be_bytes();
   75|    106|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  2.40k|        Ok(())
   79|  2.40k|    }
_RINvXsi_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtNtB8_5types3TagINtBH_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
  317|    234|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    234|        self.1.encode(writer)
  319|    234|    }
_RINvXs7_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
  209|  1.60k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.60k|        writer.push(self.0)?;
  211|  1.60k|        Ok(())
  212|  1.60k|    }
_RNvMs0_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB5_7TypeNumtE3newCsi91UKKyYkf_11cbor_decode:
   52|  2.40k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.40k|        TypeNum { type_, value }
   54|  2.40k|    }
_RNvMs0_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB5_7TypeNummE3newCsi91UKKyYkf_11cbor_decode:
   52|  2.40k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.40k|        TypeNum { type_, value }
   54|  2.40k|    }
_RINvXs1_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
   59|  2.29k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  2.29k|        match self.value {
   61|  2.29k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    648|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  2.29k|        Ok(())
   65|  2.29k|    }
_RINvXs3_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
   84|  2.40k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  2.40k|        match u16::try_from(self.value) {
   86|  2.40k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      4|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      4|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  2.40k|        Ok(())
   93|  2.40k|    }
_RINvXsd_NtNtCsSqpNEdGVxA_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
  270|    468|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    468|        Ok(())
  272|    468|    }
_RINvXs4_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
   98|  2.54k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  2.54k|        match u32::try_from(self.value) {
  100|  2.40k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    136|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    136|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  2.54k|        Ok(())
  107|  2.54k|    }
_RNvMs0_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB5_7TypeNumhE3newCsi91UKKyYkf_11cbor_decode:
   52|  2.29k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.29k|        TypeNum { type_, value }
   54|  2.29k|    }
_RNvMs0_NtNtCsSqpNEdGVxA_7cbor4ii4core3encINtB5_7TypeNumyE3newCsi91UKKyYkf_11cbor_decode:
   52|  2.54k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.54k|        TypeNum { type_, value }
   54|  2.54k|    }
_RINvXsu_NtNtCsSqpNEdGVxA_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsi91UKKyYkf_11cbor_decode:
  159|    234|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    234|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    234|                }

_RNvXs_NtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsi91UKKyYkf_11cbor_decode:
   40|  4.15k|        self.0.try_reserve(input.len())?;
   41|  4.15k|        self.0.extend_from_slice(input);
   42|  4.15k|        Ok(())
   43|  4.15k|    }
_RNvXs1_NtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsi91UKKyYkf_11cbor_decode:
   62|  21.1k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  21.1k|        let len = core::cmp::min(self.buf.len(), want);
   64|  21.1k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  21.1k|    }
_RNvXs1_NtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsi91UKKyYkf_11cbor_decode:
   75|  6.95k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  6.95k|            self.limit = limit;
   77|  6.95k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  6.95k|    }
_RNvXs1_NtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsi91UKKyYkf_11cbor_decode:
   68|  20.3k|    fn advance(&mut self, n: usize) {
   69|  20.3k|        let len = core::cmp::min(self.buf.len(), n);
   70|  20.3k|        self.buf = &self.buf[len..];
   71|  20.3k|    }
_RNvXs1_NtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsi91UKKyYkf_11cbor_decode:
   84|  6.95k|    fn step_out(&mut self) {
   85|  6.95k|        self.limit += 1;
   86|  6.95k|    }
_RNvMNtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    234|    pub fn new(buf: Vec<u8>) -> Self {
   15|    234|       BufWriter(buf)
   16|    234|    }
_RNvMNtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    234|    pub fn into_inner(self) -> Vec<u8> {
   25|    234|        self.0
   26|    234|    }
_RNvMs0_NtNtCsSqpNEdGVxA_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    662|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    662|        SliceReader { buf, limit: 256 }
   55|    662|    }

_RNvMs1_NtCsSqpNEdGVxA_7cbor4ii5errorINtB5_11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleE8mismatchCsi91UKKyYkf_11cbor_decode:
   93|     40|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     40|        DecodeError::Mismatch {
   95|     40|            expect_major: (!major_limit) >> 5,
   96|     40|            byte
   97|     40|        }
   98|     40|    }

_RNvXs0_NtCsSqpNEdGVxA_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCsaFkFfa58Dz1_4core3ops4drop4Drop4dropCsi91UKKyYkf_11cbor_decode:
   24|  5.80k|    fn drop(&mut self) {
   25|  5.80k|        (self.1)(self.0);
   26|  5.80k|    }
_RNvXs_NtCsSqpNEdGVxA_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCsaFkFfa58Dz1_4core3ops5deref8DerefMut9deref_mutCsi91UKKyYkf_11cbor_decode:
   17|  5.80k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  5.80k|        self.0
   19|  5.80k|    }

_RINvMNtCskDqycojkxt_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs5sAj5AAFQNS_5alloc3vec3VechEECsi91UKKyYkf_11cbor_decode:
  162|    212|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    212|        let mut version_buf = varint_encode::u64_buffer();
  164|    212|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    212|
  166|    212|        let mut codec_buf = varint_encode::u64_buffer();
  167|    212|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    212|
  169|    212|        let mut written = version.len() + codec.len();
  170|    212|
  171|    212|        w.write_all(version)?;
  172|    212|        w.write_all(codec)?;
  173|    212|        written += self.hash.write(&mut w)?;
  174|       |
  175|    212|        Ok(written)
  176|    212|    }
_RINvMNtCskDqycojkxt_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsi91UKKyYkf_11cbor_decode:
  140|    275|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    275|        let version = varint_read_u64(&mut r)?;
  142|    270|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    260|        if [version, codec] == [0x12, 0x20] {
  146|     24|            let mut digest = [0u8; 32];
  147|     24|            r.read_exact(&mut digest)?;
  148|     23|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|     23|            return Self::new_v0(mh);
  150|    236|        }
  151|       |
  152|    236|        let version = Version::try_from(version)?;
  153|    233|        match version {
  154|      1|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    232|                let mh = Multihash::read(r)?;
  157|    216|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    275|    }
_RNvMNtCskDqycojkxt_3cid3cidINtB2_3CidKj40_E6new_v0Csi91UKKyYkf_11cbor_decode:
   78|     23|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     23|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     23|        }
   82|     23|        Ok(Self {
   83|     23|            version: Version::V0,
   84|     23|            codec: DAG_PB,
   85|     23|            hash,
   86|     23|        })
   87|     23|    }
_RNvMNtCskDqycojkxt_3cid3cidINtB2_3CidKj40_E6new_v1Csi91UKKyYkf_11cbor_decode:
   90|    216|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    216|        Self {
   92|    216|            version: Version::V1,
   93|    216|            codec,
   94|    216|            hash,
   95|    216|        }
   96|    216|    }
_RINvMNtCskDqycojkxt_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs5sAj5AAFQNS_5alloc3vec3VechEECsi91UKKyYkf_11cbor_decode:
  179|    234|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    234|        let written = match self.version {
  181|     22|            Version::V0 => self.hash.write(w)?,
  182|    212|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    234|        Ok(written)
  185|    234|    }
_RNvMNtCskDqycojkxt_3cid3cidINtB2_3CidKj40_E8to_bytesCsi91UKKyYkf_11cbor_decode:
  205|    234|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    234|        let mut bytes = Vec::new();
  207|    234|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    234|        debug_assert_eq!(written, bytes.len());
  209|    234|        bytes
  210|    234|    }
_RNvMNtCskDqycojkxt_3cid3cidINtB2_3CidKj40_E3newCsi91UKKyYkf_11cbor_decode:
   99|    216|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    216|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    216|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    216|    }
_RNvXs6_NtCskDqycojkxt_3cid3cidINtB5_3CidKj40_EINtNtCsaFkFfa58Dz1_4core7convert7TryFromRShE8try_fromCsi91UKKyYkf_11cbor_decode:
  353|    275|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    275|        Self::read_bytes(&mut bytes)
  355|    275|    }

_RNvXs_NtCskDqycojkxt_3cid5errorNtB4_5ErrorNtNtCsaFkFfa58Dz1_4core3fmt7Display3fmt:
   41|     36|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|       |        use self::Error::*;
   43|     36|        let error = match self {
   44|      0|            UnknownCodec => "Unknown codec",
   45|      0|            InputTooShort => "Input too short",
   46|     16|            ParsingError => "Failed to parse multihash",
   47|      3|            InvalidCidVersion => "Unrecognized CID version",
   48|      0|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   49|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   50|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   51|      3|            VarIntDecodeError => "Failed to decode unsigned varint format",
   52|     13|            Io(err) => return write!(f, "{}", err),
   53|      1|            InvalidExplicitCidV0 => "CIDv0 cannot be specified in CIDv1 format",
   54|       |        };
   55|       |
   56|     23|        f.write_str(error)
   57|     36|    }
_RNvXs4_NtCskDqycojkxt_3cid5errorNtB5_5ErrorINtNtCsaFkFfa58Dz1_4core7convert4FromNtNtNtCskhhLEkdI0wg_3std2io5error5ErrorE4from:
   91|      1|    fn from(err: io::Error) -> Self {
   92|      1|        Self::Io(err)
   93|      1|    }
_RNvXs1_NtCskDqycojkxt_3cid5errorNtB5_5ErrorINtNtCsaFkFfa58Dz1_4core7convert4FromNtNtCs6u57D9YxoYc_9multihash5error5ErrorE4from:
   68|     16|    fn from(_: multihash::Error) -> Error {
   69|     16|        Error::ParsingError
   70|     16|    }
_RNvXs3_NtCskDqycojkxt_3cid5errorNtB5_5ErrorINtNtCsaFkFfa58Dz1_4core7convert4FromNtNtCsfxCqH6gdHka_15unsigned_varint2io9ReadErrorE4from:
   81|     15|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   82|     15|        use unsigned_varint::io::ReadError::*;
   83|     15|        match err {
   84|     12|            Io(err) => Self::Io(err),
   85|      3|            _ => Self::VarIntDecodeError,
   86|       |        }
   87|     15|    }

_RNCINvXs_NtCskDqycojkxt_3cid5serdeNtB7_17BytesToCidVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor11visit_bytesINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEE0Csi91UKKyYkf_11cbor_decode:
   53|     36|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
_RINvXs_NtCskDqycojkxt_3cid5serdeNtB5_17BytesToCidVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor11visit_bytesINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
   48|    275|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    275|    where
   50|    275|        E: de::Error,
   51|    275|    {
   52|    275|        CidGeneric::<SIZE>::try_from(value)
   53|    275|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    275|    }
_RINvXs0_NtCskDqycojkxt_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   79|    298|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    298|    where
   81|    298|        D: de::Deserializer<'de>,
   82|    298|    {
   83|    298|        /// Main visitor to deserialize a CID.
   84|    298|        ///
   85|    298|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    298|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    298|        /// to bytes.
   88|    298|        struct MainEntryVisitor<const SIZE: usize>;
   89|    298|
   90|    298|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    298|            type Value = CidGeneric<SIZE>;
   92|    298|
   93|    298|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    298|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    298|            }
   96|    298|
   97|    298|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    298|            where
   99|    298|                D: de::Deserializer<'de>,
  100|    298|            {
  101|    298|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    298|            }
  103|    298|        }
  104|    298|
  105|    298|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    298|    }
_RINvXNvXs0_NtCskDqycojkxt_3cid5serdeINtNtBb_3cid3CidKpENtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBT_7Visitor20visit_newtype_structQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   97|    283|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    283|            where
   99|    283|                D: de::Deserializer<'de>,
  100|    283|            {
  101|    283|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    283|            }
_RINvXNtCskDqycojkxt_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsaPIgCidcmIN_5serde3ser9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   29|    234|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    234|    where
   31|    234|        S: ser::Serializer,
   32|    234|    {
   33|    234|        let value = ByteBuf::from(self.to_bytes());
   34|    234|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    234|    }

_RNvXs0_NtCskDqycojkxt_3cid7versionyINtNtCsaFkFfa58Dz1_4core7convert4FromNtB5_7VersionE4from:
   44|    212|    fn from(ver: Version) -> u64 {
   45|    212|        match ver {
   46|      0|            Version::V0 => 0,
   47|    212|            Version::V1 => 1,
   48|       |        }
   49|    212|    }
_RNvXs_NtCskDqycojkxt_3cid7versionNtB4_7VersionINtNtCsaFkFfa58Dz1_4core7convert7TryFromyE8try_from:
   34|    236|    fn try_from(raw: u64) -> Result<Self> {
   35|    236|        match raw {
   36|      1|            0 => Ok(Self::V0),
   37|    232|            1 => Ok(Self::V1),
   38|      3|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    236|    }

_RNvNvCsi91UKKyYkf_11cbor_decode1__19___libfuzzer_sys_run:
  241|    117|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|    117|                $body
  243|    545|            }
rust_fuzzer_test_input:
  215|    545|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    545|                }
  223|    545|
  224|    545|                __libfuzzer_sys_run(bytes);
  225|    545|                0
  226|    545|            }
LLVMFuzzerTestOneInput:
   58|    545|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    545|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    545|    });
   63|    545|
   64|    545|    match test_input {
   65|    545|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    545|}
_RNCNvCsfwf6baRzT3E_13libfuzzer_sys15test_input_wrap0B3_:
   59|    545|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    545|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    545|        rust_fuzzer_test_input(data_slice)
   62|    545|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs0_NtCs6u57D9YxoYc_9multihash5errorNtB5_5ErrorINtNtCsaFkFfa58Dz1_4core7convert4FromNtNtNtCskhhLEkdI0wg_3std2io5error5ErrorE4from:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }
_RNvXs1_NtCs6u57D9YxoYc_9multihash5errorNtB5_5ErrorINtNtCsaFkFfa58Dz1_4core7convert4FromNtNtCsfxCqH6gdHka_15unsigned_varint2io9ReadErrorE4from:
   44|      9|    fn from(err: ReadError) -> Self {
   45|      9|        match err {
   46|      3|            ReadError::Io(err) => Self::Io(err),
   47|      6|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|      9|    }

_RINvNtCs6u57D9YxoYc_9multihash9multihash14read_multihashQRShKj40_ECsi91UKKyYkf_11cbor_decode:
  335|    232|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    232|where
  337|    232|    R: io::Read,
  338|    232|{
  339|    232|    let code = read_u64(&mut r)?;
  340|    230|    let size = read_u64(&mut r)?;
  341|       |
  342|    223|    if size > S as u64 || size > u8::MAX as u64 {
  343|      6|        return Err(Error::InvalidSize(size));
  344|    217|    }
  345|    217|
  346|    217|    let mut digest = [0; S];
  347|    217|    r.read_exact(&mut digest[..size as usize])?;
  348|    216|    Ok((code, size as u8, digest))
  349|    232|}
_RINvMs_NtCs6u57D9YxoYc_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs5sAj5AAFQNS_5alloc3vec3VechEECsi91UKKyYkf_11cbor_decode:
  163|     22|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     22|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     22|    }
_RINvMs_NtCs6u57D9YxoYc_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs5sAj5AAFQNS_5alloc3vec3VechEECsi91UKKyYkf_11cbor_decode:
  163|    212|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    212|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    212|    }
_RINvMs_NtCs6u57D9YxoYc_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsi91UKKyYkf_11cbor_decode:
  135|    232|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    232|    where
  137|    232|        Self: Sized,
  138|    232|    {
  139|    232|        let (code, size, digest) = read_multihash(r)?;
  140|    216|        Ok(Self { code, size, digest })
  141|    232|    }
_RINvNtCs6u57D9YxoYc_9multihash9multihash15write_multihashQINtNtCs5sAj5AAFQNS_5alloc3vec3VechEECsi91UKKyYkf_11cbor_decode:
  310|     22|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     22|where
  312|     22|    W: io::Write,
  313|     22|{
  314|     22|    let mut code_buf = varint_encode::u64_buffer();
  315|     22|    let code = varint_encode::u64(code, &mut code_buf);
  316|     22|
  317|     22|    let mut size_buf = varint_encode::u8_buffer();
  318|     22|    let size = varint_encode::u8(size, &mut size_buf);
  319|     22|
  320|     22|    let written = code.len() + size.len() + digest.len();
  321|     22|
  322|     22|    w.write_all(code)?;
  323|     22|    w.write_all(size)?;
  324|     22|    w.write_all(digest)?;
  325|       |
  326|     22|    Ok(written)
  327|     22|}
_RNvMs_NtCs6u57D9YxoYc_9multihash9multihashINtB4_9MultihashKj40_E4codeCsi91UKKyYkf_11cbor_decode:
  120|    257|    pub const fn code(&self) -> u64 {
  121|    257|        self.code
  122|    257|    }
_RNvMs_NtCs6u57D9YxoYc_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsi91UKKyYkf_11cbor_decode:
  125|    257|    pub const fn size(&self) -> u8 {
  126|    257|        self.size
  127|    257|    }
_RNvMs_NtCs6u57D9YxoYc_9multihash9multihashINtB4_9MultihashKj40_E6digestCsi91UKKyYkf_11cbor_decode:
  130|    234|    pub fn digest(&self) -> &[u8] {
  131|    234|        &self.digest[..self.size as usize]
  132|    234|    }
_RINvNtCs6u57D9YxoYc_9multihash9multihash15write_multihashQQINtNtCs5sAj5AAFQNS_5alloc3vec3VechEECsi91UKKyYkf_11cbor_decode:
  310|    212|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    212|where
  312|    212|    W: io::Write,
  313|    212|{
  314|    212|    let mut code_buf = varint_encode::u64_buffer();
  315|    212|    let code = varint_encode::u64(code, &mut code_buf);
  316|    212|
  317|    212|    let mut size_buf = varint_encode::u8_buffer();
  318|    212|    let size = varint_encode::u8(size, &mut size_buf);
  319|    212|
  320|    212|    let written = code.len() + size.len() + digest.len();
  321|    212|
  322|    212|    w.write_all(code)?;
  323|    212|    w.write_all(size)?;
  324|    212|    w.write_all(digest)?;
  325|       |
  326|    212|    Ok(written)
  327|    212|}
_RNvMs_NtCs6u57D9YxoYc_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsi91UKKyYkf_11cbor_decode:
  101|     23|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     23|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     23|        }
  105|     23|        let size = input_digest.len();
  106|     23|        let mut digest = [0; S];
  107|     23|        let mut i = 0;
  108|    759|        while i < size {
  109|    736|            digest[i] = input_digest[i];
  110|    736|            i += 1;
  111|    736|        }
  112|     23|        Ok(Self {
  113|     23|            code,
  114|     23|            size: size as u8,
  115|     23|            digest,
  116|     23|        })
  117|     23|    }

_RNvYNtNtNtCsh47h2fRhlw5_10fvm_shared7address8protocol8ProtocolNtNtCsjtRQbvNmNGE_10num_traits4cast13FromPrimitive7from_u8B8_:
  448|  2.68k|    fn from_u8(n: u8) -> Option<Self> {
  449|  2.68k|        FromPrimitive::from_u64(From::from(n))
  450|  2.68k|    }

_RNvMs2_NtCs5bsFLjxT8Ad_9once_cell3impINtB5_8OnceCellNtNtCs5sAj5AAFQNS_5alloc6string6StringE14is_initializedCsi91UKKyYkf_11cbor_decode:
   49|    545|    pub(crate) fn is_initialized(&self) -> bool {
   50|    545|        // An `Acquire` load is enough because that makes all the initialization
   51|    545|        // operations visible to us, and, this being a fast path, weaker
   52|    545|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    545|        // `SeqCst` operations on the slow path.
   54|    545|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    545|    }

_RNvMs4_NtCs5bsFLjxT8Ad_9once_cell4syncINtB5_8OnceCellNtNtCs5sAj5AAFQNS_5alloc6string6StringE3getCsi91UKKyYkf_11cbor_decode:
  965|    545|        pub fn get(&self) -> Option<&T> {
  966|    545|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    545|                None
  971|       |            }
  972|    545|        }

_RNvXs5_CsfCPlxGas4hZ_10scopeguardINtB5_10ScopeGuardQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsaFkFfa58Dz1_4core3ops4drop4Drop4dropCsi91UKKyYkf_11cbor_decode:
  470|  1.14k|    fn drop(&mut self) {
  471|  1.14k|        // This is OK because the fields are `ManuallyDrop`s
  472|  1.14k|        // which will not be dropped by the compiler.
  473|  1.14k|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|  1.14k|        if S::should_run() {
  475|  1.14k|            dropfn(value);
  476|  1.14k|        }
  477|  1.14k|    }
_RINvCsfCPlxGas4hZ_10scopeguard5guardQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEFBy_EuECsi91UKKyYkf_11cbor_decode:
  375|  1.14k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|  1.14k|where
  377|  1.14k|    F: FnOnce(T),
  378|  1.14k|{
  379|  1.14k|    ScopeGuard::with_strategy(v, dropfn)
  380|  1.14k|}
_RNvMs1_CsfCPlxGas4hZ_10scopeguardINtB5_10ScopeGuardQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsi91UKKyYkf_11cbor_decode:
  326|  1.14k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|  1.14k|        ScopeGuard {
  328|  1.14k|            value: ManuallyDrop::new(v),
  329|  1.14k|            dropfn: ManuallyDrop::new(dropfn),
  330|  1.14k|            strategy: PhantomData,
  331|  1.14k|        }
  332|  1.14k|    }
_RNvXCsfCPlxGas4hZ_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|  1.14k|    fn should_run() -> bool {
  232|  1.14k|        true
  233|  1.14k|    }
_RNvXs4_CsfCPlxGas4hZ_10scopeguardINtB5_10ScopeGuardQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsaFkFfa58Dz1_4core3ops5deref8DerefMut9deref_mutCsi91UKKyYkf_11cbor_decode:
  460|  1.14k|    fn deref_mut(&mut self) -> &mut T {
  461|  1.14k|        &mut *self.value
  462|  1.14k|    }

_RINvXNvXsh_NtNtCsaPIgCidcmIN_5serde2de5implsINtNtCs5sAj5AAFQNS_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
 1035|    459|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    459|            where
 1037|    459|                A: SeqAccess<'de>,
 1038|    459|            {
 1039|    459|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1040|    459|                let mut values = Vec::<T>::with_capacity(capacity);
 1041|       |
 1042|  2.63k|                while let Some(value) = try!(seq.next_element()) {
 1043|  2.17k|                    values.push(value);
 1044|  2.17k|                }
 1045|       |
 1046|    376|                Ok(values)
 1047|    459|            }
_RINvXsX_NtNtCsaPIgCidcmIN_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  113|    531|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    531|            where
  115|    531|                D: Deserializer<'de>,
  116|    531|            {
  117|    531|                struct PrimitiveVisitor;
  118|    531|
  119|    531|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    531|                    type Value = $primitive;
  121|    531|
  122|    531|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    531|                        formatter.write_str(stringify!($primitive))
  124|    531|                    }
  125|    531|
  126|    531|                    $($($method!($val : $visit);)*)*
  127|    531|                }
  128|    531|
  129|    531|                deserializer.$deserialize(PrimitiveVisitor)
  130|    531|            }
_RINvXNvXsX_NtNtCsaPIgCidcmIN_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
  138|    515|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    515|        where
  140|    515|            E: Error,
  141|    515|        {
  142|    515|            Ok(v)
  143|    515|        }
_RINvXsh_NtNtCsaPIgCidcmIN_5serde2de5implsINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
 1017|    482|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1018|    482|    where
 1019|    482|        D: Deserializer<'de>,
 1020|    482|    {
 1021|    482|        struct VecVisitor<T> {
 1022|    482|            marker: PhantomData<T>,
 1023|    482|        }
 1024|    482|
 1025|    482|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1026|    482|        where
 1027|    482|            T: Deserialize<'de>,
 1028|    482|        {
 1029|    482|            type Value = Vec<T>;
 1030|    482|
 1031|    482|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1032|    482|                formatter.write_str("a sequence")
 1033|    482|            }
 1034|    482|
 1035|    482|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    482|            where
 1037|    482|                A: SeqAccess<'de>,
 1038|    482|            {
 1039|    482|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1040|    482|                let mut values = Vec::<T>::with_capacity(capacity);
 1041|    482|
 1042|    482|                while let Some(value) = try!(seq.next_element()) {
 1043|    482|                    values.push(value);
 1044|    482|                }
 1045|    482|
 1046|    482|                Ok(values)
 1047|    482|            }
 1048|    482|        }
 1049|    482|
 1050|    482|        let visitor = VecVisitor {
 1051|    482|            marker: PhantomData,
 1052|    482|        };
 1053|    482|        deserializer.deserialize_seq(visitor)
 1054|    482|    }

_RINvXs3_NtCsaPIgCidcmIN_5serde2deINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtCsbAjHBjOUB8L_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  791|    376|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  792|    376|    where
  793|    376|        D: Deserializer<'de>,
  794|    376|    {
  795|    376|        T::deserialize(deserializer)
  796|    376|    }
_RINvXs3_NtCsaPIgCidcmIN_5serde2deINtNtCsaFkFfa58Dz1_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  791|    531|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  792|    531|    where
  793|    531|        D: Deserializer<'de>,
  794|    531|    {
  795|    531|        T::deserialize(deserializer)
  796|    531|    }
_RINvYINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess12next_elementINtNtCskDqycojkxt_3cid3cid3CidKj40_EECsi91UKKyYkf_11cbor_decode:
 1730|    298|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1731|    298|    where
 1732|    298|        T: Deserialize<'de>,
 1733|    298|    {
 1734|    298|        self.next_element_seed(PhantomData)
 1735|    298|    }
_RINvYINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess12next_elementNtCsbAjHBjOUB8L_17fvm_ipld_bitfield8BitFieldECsi91UKKyYkf_11cbor_decode:
 1730|    376|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1731|    376|    where
 1732|    376|        T: Deserialize<'de>,
 1733|    376|    {
 1734|    376|        self.next_element_seed(PhantomData)
 1735|    376|    }
_RINvYINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess12next_elementNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressECsi91UKKyYkf_11cbor_decode:
 1730|  3.14k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1731|  3.14k|    where
 1732|  3.14k|        T: Deserialize<'de>,
 1733|  3.14k|    {
 1734|  3.14k|        self.next_element_seed(PhantomData)
 1735|  3.14k|    }
_RINvYNtNtCskDqycojkxt_3cid5serde17BytesToCidVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
 1570|    267|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1571|    267|    where
 1572|    267|        E: Error,
 1573|    267|    {
 1574|    267|        self.visit_bytes(v)
 1575|    267|    }
_RINvXs3_NtCsaPIgCidcmIN_5serde2deINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  791|    482|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  792|    482|    where
  793|    482|        D: Deserializer<'de>,
  794|    482|    {
  795|    482|        T::deserialize(deserializer)
  796|    482|    }
_RINvXs3_NtCsaPIgCidcmIN_5serde2deINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  791|  2.77k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  792|  2.77k|    where
  793|  2.77k|        D: Deserializer<'de>,
  794|  2.77k|    {
  795|  2.77k|        T::deserialize(deserializer)
  796|  2.77k|    }
_RINvYNtNvXs_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
 1570|    817|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1571|    817|    where
 1572|    817|        E: Error,
 1573|    817|    {
 1574|    817|        self.visit_bytes(v)
 1575|    817|    }
_RINvXs3_NtCsaPIgCidcmIN_5serde2deINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  791|    319|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  792|    319|    where
  793|    319|        D: Deserializer<'de>,
  794|    319|    {
  795|    319|        T::deserialize(deserializer)
  796|    319|    }
_RINvXs3_NtCsaPIgCidcmIN_5serde2deINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataINtNtCskDqycojkxt_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  791|    298|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  792|    298|    where
  793|    298|        D: Deserializer<'de>,
  794|    298|    {
  795|    298|        T::deserialize(deserializer)
  796|    298|    }
_RINvYNtNtCskDqycojkxt_3cid5serde17BytesToCidVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor14visit_byte_bufINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
 1594|      8|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1595|      8|    where
 1596|      8|        E: Error,
 1597|      8|    {
 1598|      8|        self.visit_bytes(&v)
 1599|      8|    }
_RINvYINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess12next_elementINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEECsi91UKKyYkf_11cbor_decode:
 1730|    482|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1731|    482|    where
 1732|    482|        T: Deserialize<'de>,
 1733|    482|    {
 1734|    482|        self.next_element_seed(PhantomData)
 1735|    482|    }
_RINvYINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess12next_elementNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsi91UKKyYkf_11cbor_decode:
 1730|    319|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1731|    319|    where
 1732|    319|        T: Deserialize<'de>,
 1733|    319|    {
 1734|    319|        self.next_element_seed(PhantomData)
 1735|    319|    }
_RINvYINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB2K_7PayloadNtB1K_11Deserialize11deserialize1__NtB2H_5InnerB3w_11deserializeNtB2C_9___VisitorNtB1K_7Visitor9visit_seq17___DeserializeWithECsi91UKKyYkf_11cbor_decode:
 1730|    648|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1731|    648|    where
 1732|    648|        T: Deserialize<'de>,
 1733|    648|    {
 1734|    648|        self.next_element_seed(PhantomData)
 1735|    648|    }
_RINvYINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess12next_elementyECsi91UKKyYkf_11cbor_decode:
 1730|    531|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1731|    531|    where
 1732|    531|        T: Deserialize<'de>,
 1733|    531|    {
 1734|    531|        self.next_element_seed(PhantomData)
 1735|    531|    }
_RINvXs3_NtCsaPIgCidcmIN_5serde2deINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  791|    648|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  792|    648|    where
  793|    648|        D: Deserializer<'de>,
  794|    648|    {
  795|    648|        T::deserialize(deserializer)
  796|    648|    }

_RINvNtNtCsaPIgCidcmIN_5serde9___private9size_hint8cautiousNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressECsi91UKKyYkf_11cbor_decode:
   11|    459|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|    459|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|    459|
   14|    459|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|    459|        cmp::min(
   18|    459|            hint.unwrap_or(0),
   19|    459|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|    459|        )
   21|       |    }
   22|    459|}

_RINvXsG_NtNtCsaPIgCidcmIN_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   11|    234|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    234|            where
   13|    234|                S: Serializer,
   14|    234|            {
   15|    234|                serializer.$method(*self $($cast)*)
   16|    234|            }
_RINvXs1G_NtNtCsaPIgCidcmIN_5serde3ser5implsRNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  457|    234|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  458|    234|            where
  459|    234|                S: Serializer,
  460|    234|            {
  461|    234|                (**self).serialize(serializer)
  462|    234|            }
_RINvXs1G_NtNtCsaPIgCidcmIN_5serde3ser5implsRNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  457|    672|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  458|    672|            where
  459|    672|                S: Serializer,
  460|    672|            {
  461|    672|                (**self).serialize(serializer)
  462|    672|            }
_RINvXs1G_NtNtCsaPIgCidcmIN_5serde3ser5implsRNtCsbAjHBjOUB8L_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  457|    234|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  458|    234|            where
  459|    234|                S: Serializer,
  460|    234|            {
  461|    234|                (**self).serialize(serializer)
  462|    234|            }
_RINvXs1G_NtNtCsaPIgCidcmIN_5serde3ser5implsRINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  457|    234|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  458|    234|            where
  459|    234|                S: Serializer,
  460|    234|            {
  461|    234|                (**self).serialize(serializer)
  462|    234|            }
_RINvXs1m_NtNtCsaPIgCidcmIN_5serde3ser5implsINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  193|    234|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  194|    234|            where
  195|    234|                S: Serializer,
  196|    234|            {
  197|    234|                serializer.collect_seq(self)
  198|    234|            }
_RINvXs1G_NtNtCsaPIgCidcmIN_5serde3ser5implsRINtNtCskDqycojkxt_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  457|    234|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  458|    234|            where
  459|    234|                S: Serializer,
  460|    234|            {
  461|    234|                (**self).serialize(serializer)
  462|    234|            }
_RINvXs1G_NtNtCsaPIgCidcmIN_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  457|    234|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  458|    234|            where
  459|    234|                S: Serializer,
  460|    234|            {
  461|    234|                (**self).serialize(serializer)
  462|    234|            }

_RINvYQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer11collect_seqRINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEECsi91UKKyYkf_11cbor_decode:
 1277|    234|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1278|    234|    where
 1279|    234|        I: IntoIterator,
 1280|    234|        <I as IntoIterator>::Item: Serialize,
 1281|    234|    {
 1282|    234|        let iter = iter.into_iter();
 1283|    234|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1284|       |
 1285|       |        #[cfg(not(no_iterator_try_fold))]
 1286|       |        {
 1287|    234|            let mut iter = iter;
 1288|    234|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1289|       |        }
 1290|       |
 1291|       |        #[cfg(no_iterator_try_fold)]
 1292|       |        {
 1293|       |            for item in iter {
 1294|       |                try!(serializer.serialize_element(&item));
 1295|       |            }
 1296|       |        }
 1297|       |
 1298|    234|        serializer.end()
 1299|    234|    }
_RNCINvYQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer11collect_seqRINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEE0Csi91UKKyYkf_11cbor_decode:
 1288|    438|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCsaPIgCidcmIN_5serde3ser17iterator_len_hintINtNtNtCsaFkFfa58Dz1_4core5slice4iter4IterNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEECsi91UKKyYkf_11cbor_decode:
 1980|    234|    match iter.size_hint() {
 1981|    234|        (lo, Some(hi)) if lo == hi => Some(lo),
 1982|      0|        _ => None,
 1983|       |    }
 1984|    234|}

_RINvXsc_NtCs2OtNX2ggXrb_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  186|    234|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    234|    where
  188|    234|        S: Serializer,
  189|    234|    {
  190|    234|        serializer.serialize_bytes(&self.bytes)
  191|    234|    }
_RINvMNtCs2OtNX2ggXrb_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs5sAj5AAFQNS_5alloc3vec3VechEECsi91UKKyYkf_11cbor_decode:
   60|    234|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    234|        ByteBuf {
   62|    234|            bytes: bytes.into(),
   63|    234|        }
   64|    234|    }

_RINvNtCsfokjsIrkMGq_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderECsi91UKKyYkf_11cbor_decode:
   26|    522|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    522|    let buf = match reader.fill(1)? {
   28|    522|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    522|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|    287|    Ok(byte)
   33|    522|}

_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1W_5implsINtNtCs5sAj5AAFQNS_5alloc3vec3VecpENtB1W_11Deserialize11deserialize10VecVisitorNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEECsi91UKKyYkf_11cbor_decode:
  325|    482|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  326|    482|    where
  327|    482|        V: Visitor<'de>,
  328|    482|    {
  329|    482|        let mut de = self.try_step()?;
  330|    482|        let seq = Accessor::array(&mut de)?;
  331|    459|        visitor.visit_seq(seq)
  332|    482|    }
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc6borrow3CowShENtB30_11Deserialize11deserialize10CowVisitorECsi91UKKyYkf_11cbor_decode:
  231|  3.14k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  232|  3.14k|    where
  233|  3.14k|        V: Visitor<'de>,
  234|  3.14k|    {
  235|  3.14k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  236|  2.99k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  237|     70|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  238|       |        }
  239|  3.14k|    }
_RNCNvMs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE8try_step0Csi91UKKyYkf_11cbor_decode:
  106|  1.14k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs7_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer17deserialize_bytesNtNtCskDqycojkxt_3cid5serde17BytesToCidVisitorECsi91UKKyYkf_11cbor_decode:
  620|    283|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  621|    283|        let byte = peek_one(&mut self.0.reader)?;
  622|    282|        match dec::if_major(byte) {
  623|       |            major::BYTES => {
  624|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  625|    281|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  626|    269|                    Cow::Borrowed(buf) => {
  627|    269|                        if buf.len() <= 1 || buf[0] != 0 {
  628|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  629|       |                        } else {
  630|    267|                            visitor.visit_borrowed_bytes(&buf[1..])
  631|       |                        }
  632|       |                    }
  633|     10|                    Cow::Owned(mut buf) => {
  634|     10|                        if buf.len() <= 1 || buf[0] != 0 {
  635|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  636|       |                        } else {
  637|      8|                            buf.remove(0);
  638|      8|                            visitor.visit_byte_buf(buf)
  639|       |                        }
  640|       |                    }
  641|       |                }
  642|       |            }
  643|      1|            _ => Err(DecodeError::Unsupported { byte }),
  644|       |        }
  645|    283|    }
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc3vec3VechENtB32_11Deserialize11deserialize10VecVisitorECsi91UKKyYkf_11cbor_decode:
  242|    967|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  243|    967|    where
  244|    967|        V: Visitor<'de>,
  245|    967|    {
  246|    967|        self.deserialize_bytes(visitor)
  247|    967|    }
_RINvMs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCskDqycojkxt_3cid5serdeINtNtB2k_3cid3CidKpENtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsi91UKKyYkf_11cbor_decode:
  113|    298|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    298|    where
  115|    298|        V: Visitor<'de>,
  116|    298|    {
  117|    298|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    288|        match tag.0 {
  120|    283|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      5|            _ => Err(DecodeError::TypeMismatch {
  122|      5|                name: "CBOR tag",
  123|      5|                byte: tag.0 as u8,
  124|      5|            }),
  125|       |        }
  126|    298|    }
_RNvMs1_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE5arrayCsi91UKKyYkf_11cbor_decode:
  425|    482|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  426|    482|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  427|    460|        array_start.0.map_or_else(
  428|    460|            || Err(DecodeError::IndefiniteSize),
  429|    460|            move |len| Ok(Accessor { de, len }),
  430|    460|        )
  431|    482|    }
_RNvMs1_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE5tupleCsi91UKKyYkf_11cbor_decode:
  434|    662|    pub fn tuple(
  435|    662|        de: &'a mut Deserializer<R>,
  436|    662|        len: usize,
  437|    662|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  438|    662|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  439|       |
  440|    655|        if array_start.0 == Some(len) {
  441|    648|            Ok(Accessor { de, len })
  442|       |        } else {
  443|      7|            Err(DecodeError::RequireLength {
  444|      7|                name: "tuple",
  445|      7|                expect: len,
  446|      7|                value: array_start.0.unwrap_or(0),
  447|      7|            })
  448|       |        }
  449|    662|    }
_RNvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess9size_hintCsi91UKKyYkf_11cbor_decode:
  481|    459|    fn size_hint(&self) -> Option<usize> {
  482|    459|        Some(self.len)
  483|    459|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess17next_element_seedINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsi91UKKyYkf_11cbor_decode:
  468|    319|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  469|    319|    where
  470|    319|        T: de::DeserializeSeed<'de>,
  471|    319|    {
  472|    319|        if self.len > 0 {
  473|    319|            self.len -= 1;
  474|    319|            Ok(Some(seed.deserialize(&mut *self.de)?))
  475|       |        } else {
  476|      0|            Ok(None)
  477|       |        }
  478|    319|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess17next_element_seedINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB3D_7PayloadNtB1Q_11Deserialize11deserialize1__NtB3A_5InnerB4p_11deserializeNtB3v_9___VisitorNtB1Q_7Visitor9visit_seq17___DeserializeWithEECsi91UKKyYkf_11cbor_decode:
  468|    648|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  469|    648|    where
  470|    648|        T: de::DeserializeSeed<'de>,
  471|    648|    {
  472|    648|        if self.len > 0 {
  473|    648|            self.len -= 1;
  474|    648|            Ok(Some(seed.deserialize(&mut *self.de)?))
  475|       |        } else {
  476|      0|            Ok(None)
  477|       |        }
  478|    648|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess17next_element_seedINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataINtNtCskDqycojkxt_3cid3cid3CidKj40_EEECsi91UKKyYkf_11cbor_decode:
  468|    298|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  469|    298|    where
  470|    298|        T: de::DeserializeSeed<'de>,
  471|    298|    {
  472|    298|        if self.len > 0 {
  473|    298|            self.len -= 1;
  474|    298|            Ok(Some(seed.deserialize(&mut *self.de)?))
  475|       |        } else {
  476|      0|            Ok(None)
  477|       |        }
  478|    298|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess17next_element_seedINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEECsi91UKKyYkf_11cbor_decode:
  468|  3.14k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  469|  3.14k|    where
  470|  3.14k|        T: de::DeserializeSeed<'de>,
  471|  3.14k|    {
  472|  3.14k|        if self.len > 0 {
  473|  2.77k|            self.len -= 1;
  474|  2.77k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  475|       |        } else {
  476|    376|            Ok(None)
  477|       |        }
  478|  3.14k|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess17next_element_seedINtNtCsaFkFfa58Dz1_4core6marker11PhantomDatayEECsi91UKKyYkf_11cbor_decode:
  468|    531|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  469|    531|    where
  470|    531|        T: de::DeserializeSeed<'de>,
  471|    531|    {
  472|    531|        if self.len > 0 {
  473|    531|            self.len -= 1;
  474|    531|            Ok(Some(seed.deserialize(&mut *self.de)?))
  475|       |        } else {
  476|      0|            Ok(None)
  477|       |        }
  478|    531|    }
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB32_7PayloadNtB1W_11Deserialize11deserialize1__NtB2Z_5InnerB3O_11deserialize9___VisitorECsi91UKKyYkf_11cbor_decode:
  335|    662|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  336|    662|    where
  337|    662|        V: Visitor<'de>,
  338|    662|    {
  339|    662|        let mut de = self.try_step()?;
  340|    662|        let seq = Accessor::tuple(&mut de, len)?;
  341|    648|        visitor.visit_seq(seq)
  342|    662|    }
_RNvMs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE3endCsi91UKKyYkf_11cbor_decode:
  131|    239|        match peek_one(&mut self.reader) {
  132|      5|            Ok(_) => Err(DecodeError::TrailingData),
  133|    234|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    239|    }
_RNvMs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE8try_stepCsi91UKKyYkf_11cbor_decode:
  101|  1.14k|    fn try_step<'a>(
  102|  1.14k|        &'a mut self,
  103|  1.14k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|  1.14k|    {
  105|  1.14k|        if self.reader.step_in() {
  106|  1.14k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|  1.14k|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess17next_element_seedINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEEECsi91UKKyYkf_11cbor_decode:
  468|    482|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  469|    482|    where
  470|    482|        T: de::DeserializeSeed<'de>,
  471|    482|    {
  472|    482|        if self.len > 0 {
  473|    482|            self.len -= 1;
  474|    482|            Ok(Some(seed.deserialize(&mut *self.de)?))
  475|       |        } else {
  476|      0|            Ok(None)
  477|       |        }
  478|    482|    }
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1W_5implsyNtB1W_11Deserialize11deserialize16PrimitiveVisitorECsi91UKKyYkf_11cbor_decode:
  142|    531|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    531|        where V: Visitor<'de>
  144|    531|        {
  145|    531|            let value = <$t>::decode(&mut self.reader)?;
  146|    515|            visitor.$visit(value)
  147|    531|        }
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc3vec3VechENtB2Z_11Deserialize11deserialize10VecVisitorECsi91UKKyYkf_11cbor_decode:
  231|    967|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  232|    967|    where
  233|    967|        V: Visitor<'de>,
  234|    967|    {
  235|    967|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  236|    817|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  237|     12|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  238|       |        }
  239|    967|    }
_RINvNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de10from_sliceNtNtCs98lIsuRvmzl_11common_fuzz4cbor7PayloadECsi91UKKyYkf_11cbor_decode:
   40|    662|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    662|where
   42|    662|    T: de::Deserialize<'a>,
   43|    662|{
   44|    662|    let reader = SliceReader::new(buf);
   45|    662|    let mut deserializer = Deserializer::from_reader(reader);
   46|    662|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    239|    deserializer.end()?;
   48|    234|    Ok(value)
   49|    662|}
_RNCNvMs1_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE5array0Csi91UKKyYkf_11cbor_decode:
  428|      1|            || Err(DecodeError::IndefiniteSize),
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de9SeqAccess17next_element_seedINtNtCsaFkFfa58Dz1_4core6marker11PhantomDataNtCsbAjHBjOUB8L_17fvm_ipld_bitfield8BitFieldEECsi91UKKyYkf_11cbor_decode:
  468|    376|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  469|    376|    where
  470|    376|        T: de::DeserializeSeed<'de>,
  471|    376|    {
  472|    376|        if self.len > 0 {
  473|    376|            self.len -= 1;
  474|    376|            Ok(Some(seed.deserialize(&mut *self.de)?))
  475|       |        } else {
  476|      0|            Ok(None)
  477|       |        }
  478|    376|    }
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB39_7PayloadNtB1W_11Deserialize11deserialize1__NtB36_5InnerB3V_11deserialize9___VisitorECsi91UKKyYkf_11cbor_decode:
  345|    662|    fn deserialize_tuple_struct<V>(
  346|    662|        self,
  347|    662|        _name: &'static str,
  348|    662|        len: usize,
  349|    662|        visitor: V,
  350|    662|    ) -> Result<V::Value, Self::Error>
  351|    662|    where
  352|    662|        V: Visitor<'de>,
  353|    662|    {
  354|    662|        self.deserialize_tuple(len, visitor)
  355|    662|    }
_RNCNvMs1_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE5arrays_0Csi91UKKyYkf_11cbor_decode:
  429|    459|            move |len| Ok(Accessor { de, len }),
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderENtNtCsaPIgCidcmIN_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCskDqycojkxt_3cid5serdeINtNtB3c_3cid3CidKpENtB1W_11Deserialize11deserialize16MainEntryVisitorKj40_EECsi91UKKyYkf_11cbor_decode:
  309|    298|    fn deserialize_newtype_struct<V>(
  310|    298|        self,
  311|    298|        name: &'static str,
  312|    298|        visitor: V,
  313|    298|    ) -> Result<V::Value, Self::Error>
  314|    298|    where
  315|    298|        V: Visitor<'de>,
  316|    298|    {
  317|    298|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  318|    298|            self.deserialize_cid(visitor)
  319|       |        } else {
  320|      0|            visitor.visit_newtype_struct(self)
  321|       |        }
  322|    298|    }
_RNvMNtCsfokjsIrkMGq_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderE11from_readerCsi91UKKyYkf_11cbor_decode:
   93|    662|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    662|        Deserializer { reader }
   95|    662|    }

_RNvXs7_NtCsfokjsIrkMGq_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEINtB16_4FromINtNtCsSqpNEdGVxA_7cbor4ii5error11DecodeErrorB14_EE4fromCsi91UKKyYkf_11cbor_decode:
  169|    281|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  170|    281|        match err {
  171|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  172|    240|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  173|     40|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  174|     40|                DecodeError::Mismatch { expect_major, byte }
  175|       |            }
  176|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  177|      0|                DecodeError::TypeMismatch { name, byte }
  178|       |            }
  179|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  180|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  181|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  182|       |            cbor4ii::DecodeError::RequireLength {
  183|      0|                name,
  184|      0|                expect,
  185|      0|                value,
  186|      0|            } => DecodeError::RequireLength {
  187|      0|                name,
  188|      0|                expect,
  189|      0|                value,
  190|      0|            },
  191|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  192|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  193|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  194|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  195|      0|            _ => DecodeError::Msg(err.to_string()),
  196|       |        }
  197|    281|    }
_RINvXs4_NtCsfokjsIrkMGq_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleENtNtCsaPIgCidcmIN_5serde2de5Error6customNtNtCs5sAj5AAFQNS_5alloc6string6StringECsi91UKKyYkf_11cbor_decode:
  136|     36|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     36|        DecodeError::Msg(msg.to_string())
  138|     36|    }
_RINvXs4_NtCsfokjsIrkMGq_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleENtNtCsaPIgCidcmIN_5serde2de5Error6customNtNtNtCsh47h2fRhlw5_10fvm_shared7address6errors5ErrorECsi91UKKyYkf_11cbor_decode:
  136|     38|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     38|        DecodeError::Msg(msg.to_string())
  138|     38|    }
_RNvXs9_NtCsfokjsIrkMGq_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCsi91UKKyYkf_11cbor_decode:
   70|    428|#[derive(Debug)]
_RINvXs4_NtCsfokjsIrkMGq_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleENtNtCsaPIgCidcmIN_5serde2de5Error6customNtNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus5error5ErrorECsi91UKKyYkf_11cbor_decode:
  136|     49|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     49|        DecodeError::Msg(msg.to_string())
  138|     49|    }
_RNvXs6_NtCsfokjsIrkMGq_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCsi91UKKyYkf_11cbor_decode:
  163|    428|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  164|    428|        fmt::Debug::fmt(self, f)
  165|    428|    }

_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCskDqycojkxt_3cid3cid3CidKj40_EECsi91UKKyYkf_11cbor_decode:
  403|    234|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    234|        value.serialize(&mut *self.ser)
  405|    234|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressECsi91UKKyYkf_11cbor_decode:
  403|    234|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    234|        value.serialize(&mut *self.ser)
  405|    234|    }
_RINvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser12SerializeSeq17serialize_elementRNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressECsi91UKKyYkf_11cbor_decode:
  369|    438|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    438|        value.serialize(&mut *self.ser)
  371|    438|    }
_RNvMNtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterE3newCsi91UKKyYkf_11cbor_decode:
   51|    234|    pub fn new(writer: W) -> Serializer<W> {
   52|    234|        Serializer { writer }
   53|    234|    }
_RINvXs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer24serialize_newtype_structNtNtCs2OtNX2ggXrb_11serde_bytes7bytebuf7ByteBufECsi91UKKyYkf_11cbor_decode:
  199|    234|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    234|        self,
  201|    234|        name: &'static str,
  202|    234|        value: &T,
  203|    234|    ) -> Result<Self::Ok, Self::Error> {
  204|    234|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    234|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    234|    }
_RNvXs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer15serialize_bytesCsi91UKKyYkf_11cbor_decode:
  160|  1.37k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  1.37k|        Ok(())
  162|  1.37k|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsi91UKKyYkf_11cbor_decode:
  403|    234|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    234|        value.serialize(&mut *self.ser)
  405|    234|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsi91UKKyYkf_11cbor_decode:
  403|    234|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    234|        value.serialize(&mut *self.ser)
  405|    234|    }
_RNvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct3endCsi91UKKyYkf_11cbor_decode:
  408|    234|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    234|        Ok(())
  410|    234|    }
_RNvMNtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterE10into_innerCsi91UKKyYkf_11cbor_decode:
   56|    234|    pub fn into_inner(self) -> W {
   57|    234|        self.writer
   58|    234|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCs98lIsuRvmzl_11common_fuzz4cborNtB3a_7PayloadNtB1V_9Serialize9serialize1__NtB35_5InnerB3W_9serialize15___SerializeWithECsi91UKKyYkf_11cbor_decode:
  403|    234|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    234|        value.serialize(&mut *self.ser)
  405|    234|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsbAjHBjOUB8L_17fvm_ipld_bitfield8BitFieldECsi91UKKyYkf_11cbor_decode:
  403|    234|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    234|        value.serialize(&mut *self.ser)
  405|    234|    }
_RINvNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser6to_vecNtNtCs98lIsuRvmzl_11common_fuzz4cbor7PayloadECsi91UKKyYkf_11cbor_decode:
   23|    234|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    234|where
   25|    234|    T: Serialize + ?Sized,
   26|    234|{
   27|    234|    let writer = BufWriter::new(Vec::new());
   28|    234|    let mut serializer = Serializer::new(writer);
   29|    234|    value.serialize(&mut serializer)?;
   30|    234|    Ok(serializer.into_inner().into_inner())
   31|    234|}
_RNvXs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer22serialize_tuple_structCsi91UKKyYkf_11cbor_decode:
  244|    234|    fn serialize_tuple_struct(
  245|    234|        self,
  246|    234|        _name: &'static str,
  247|    234|        len: usize,
  248|    234|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    234|        self.serialize_tuple(len)
  250|    234|    }
_RNvXs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer13serialize_u64Csi91UKKyYkf_11cbor_decode:
  123|    234|        v.encode(&mut self.writer)?;
  124|    234|        Ok(())
  125|    234|    }
_RINvXs2_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs5sAj5AAFQNS_5alloc3vec3VecNtNtCsh47h2fRhlw5_10fvm_shared7address7AddressEECsi91UKKyYkf_11cbor_decode:
  403|    234|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    234|        value.serialize(&mut *self.ser)
  405|    234|    }
_RNvXs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer15serialize_tupleCsi91UKKyYkf_11cbor_decode:
  239|    234|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    234|        Ok(BoundedCollect { ser: self })
  241|    234|    }
_RNvXs_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer13serialize_seqCsi91UKKyYkf_11cbor_decode:
  226|    234|        if let Some(len) = len {
  227|    234|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    234|        Ok(Collect {
  232|    234|            bounded: len.is_some(),
  233|    234|            ser: self,
  234|    234|        })
  235|    234|    }
_RNvXs0_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser12SerializeSeq3endCsi91UKKyYkf_11cbor_decode:
  374|    234|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    234|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    234|        }
  378|       |
  379|    234|        Ok(())
  380|    234|    }
_RNvXs7_NtCsfokjsIrkMGq_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterENtNtCsaPIgCidcmIN_5serde3ser10Serializer15serialize_bytesCsi91UKKyYkf_11cbor_decode:
  550|    234|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    234|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    234|        let prefixed = [&[0x00], value].concat();
  553|    234|        // CIDs are serialized with CBOR tag 42.
  554|    234|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    234|        Ok(())
  556|    234|    }

_RINvXs_Cs5gkxa96HMQ9_11serde_tupleINtB5_12DeserializerQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEENtNtCsaPIgCidcmIN_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB3R_7PayloadNtB2E_11Deserialize11deserialize1__NtB3O_5InnerB4D_11deserialize9___VisitorECsi91UKKyYkf_11cbor_decode:
  353|    662|    fn deserialize_tuple_struct<V>(
  354|    662|        self,
  355|    662|        name: &'static str,
  356|    662|        len: usize,
  357|    662|        visitor: V,
  358|    662|    ) -> Result<V::Value, Self::Error>
  359|    662|    where
  360|    662|        V: serde::de::Visitor<'de>,
  361|    662|    {
  362|    662|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    662|    }
_RNvXCs5gkxa96HMQ9_11serde_tupleINtB2_10SerializerQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEENtNtCsaPIgCidcmIN_5serde3ser10Serializer22serialize_tuple_structCsi91UKKyYkf_11cbor_decode:
  158|    234|    fn serialize_tuple_struct(
  159|    234|        self,
  160|    234|        name: &'static str,
  161|    234|        len: usize,
  162|    234|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    234|        self.0.serialize_tuple_struct(name, len)
  164|    234|    }

_RNvXNtCsnmPLgwnlll_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCsh47h2fRhlw5_10fvm_shared:
    9|      4|    fn as_display(&self) -> Self {
   10|      4|        self
   11|      4|    }

_RNvNtCsfxCqH6gdHka_15unsigned_varint6decode3u64Csi91UKKyYkf_11cbor_decode:
  122|    991|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    991|    decode!(buf, 9, u64)
  124|    991|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6decode7is_lastCsi91UKKyYkf_11cbor_decode:
   90|  4.28k|pub fn is_last(b: u8) -> bool {
   91|  4.28k|    b & 0x80 == 0
   92|  4.28k|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6decode3u64Csh47h2fRhlw5_10fvm_shared:
  122|  2.00k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  2.00k|    decode!(buf, 9, u64)
  124|  2.00k|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6decode7is_lastCsh47h2fRhlw5_10fvm_shared:
   90|  6.92k|pub fn is_last(b: u8) -> bool {
   91|  6.92k|    b & 0x80 == 0
   92|  6.92k|}

_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode10u64_bufferCsi91UKKyYkf_11cbor_decode:
  119|  1.66k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.66k|    [0; U64_LEN]
  121|  1.66k|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode9u8_bufferCsi91UKKyYkf_11cbor_decode:
  101|    234|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    234|    [0; U8_LEN]
  103|    234|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode2u8Csi91UKKyYkf_11cbor_decode:
   45|    234|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    234|    encode!(number, buf)
   47|    234|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode3u64Csi91UKKyYkf_11cbor_decode:
   69|    658|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    658|    encode!(number, buf)
   71|    658|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode3u64Csh47h2fRhlw5_10fvm_shared:
   69|    330|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    330|    encode!(number, buf)
   71|    330|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode10u64_bufferCsh47h2fRhlw5_10fvm_shared:
  119|    330|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    330|    [0; U64_LEN]
  121|    330|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode10u64_bufferCsbAjHBjOUB8L_17fvm_ipld_bitfield:
  119|  7.92k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  7.92k|    [0; U64_LEN]
  121|  7.92k|}
_RNvNtCsfxCqH6gdHka_15unsigned_varint6encode3u64CsbAjHBjOUB8L_17fvm_ipld_bitfield:
   69|  7.92k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  7.92k|    encode!(number, buf)
   71|  7.92k|}

_RINvNtCsfxCqH6gdHka_15unsigned_varint2io8read_u64QQRShECsi91UKKyYkf_11cbor_decode:
   31|  1.00k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.00k|                let mut b = encode::$b();
   33|  2.18k|                for i in 0 .. b.len() {
   34|  2.18k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  2.18k|                    if n == 0 {
   36|     15|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  2.17k|                    }
   38|  2.17k|                    if decode::is_last(b[i]) {
   39|    991|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.18k|                    }
   41|       |                }
   42|      1|                Err(decode::Error::Overflow.into())
   43|  1.00k|            }
_RNvXs1_NtCsfxCqH6gdHka_15unsigned_varint2ioNtB5_9ReadErrorINtNtCsaFkFfa58Dz1_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|      9|    fn from(e: decode::Error) -> Self {
   92|      9|        ReadError::Decode(e)
   93|      9|    }

_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    234|    fn new(mut iter: I) -> Self {
  469|    234|        let next = iter.next();
  470|    234|        Self { iter, next }
  471|    234|    }
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  8.58k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.58k|        self.next.as_mut()
  475|  8.58k|    }
_RNvXsh_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsaFkFfa58Dz1_4core7default7Default7defaultB9_:
  152|    234|#[derive(Default)]
_RNvXse_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  8.35k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.35k|        let next = self.next.take()?;
  484|  8.35k|        self.next = self.iter.next();
  485|  8.35k|        Some(next)
  486|  8.35k|    }
_RNvMs8_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  8.58k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  8.58k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  8.35k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    234|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  8.35k|        if advance_lhs {
  371|  8.35k|            self.lhs.next();
  372|  8.35k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  8.35k|        range
  377|  8.58k|    }
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    234|    fn new(mut iter: I) -> Self {
  469|    234|        let next = iter.next();
  470|    234|        Self { iter, next }
  471|    234|    }
_RNvXs9_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  389|  8.58k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  8.58k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  8.58k|    }
_RNvMs5_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    234|    pub fn new(a: A, b: B) -> Self {
  299|    234|        Self(Merge::new(_Combine::new(a, b)))
  300|    234|    }
_RNCNvXs9_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  8.58k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  8.35k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.35k|        self.next.as_mut()
  475|  8.35k|    }
_RNvMs5_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    234|    pub fn new(a: A, b: B) -> Self {
  299|    234|        Self(Merge::new(_Combine::new(a, b)))
  300|    234|    }
_RNvXsb_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  439|  8.58k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  8.35k|        while let Some(next) = self.iter.peek() {
  444|  8.19k|            if next.start > range.end {
  445|  8.19k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  8.35k|        Some(range)
  453|  8.58k|    }
_RNvMsa_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    234|    pub fn new(iter: I) -> Self {
  426|    234|        Self {
  427|    234|            iter: Lookahead::new(iter),
  428|    234|        }
  429|    234|    }
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|    468|    fn new(mut iter: I) -> Self {
  469|    468|        let next = iter.next();
  470|    468|        Self { iter, next }
  471|    468|    }
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    234|    fn new(mut iter: I) -> Self {
  469|    234|        let next = iter.next();
  470|    234|        Self { iter, next }
  471|    234|    }
_RNvXNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  110|  8.35k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  8.35k|        // the union of a range and an empty range is just that range
  112|  8.35k|        Some(lhs)
  113|  8.35k|    }
_RNvXs9_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  389|  8.58k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  8.58k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  8.58k|    }
_RNCNvXs9_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  8.35k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsa_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    234|    pub fn new(iter: I) -> Self {
  426|    234|        Self {
  427|    234|            iter: Lookahead::new(iter),
  428|    234|        }
  429|    234|    }
_RNvMs8_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    234|    fn new(lhs: A, rhs: B) -> Self {
  344|    234|        Self {
  345|    234|            lhs: Lookahead::new(lhs),
  346|    234|            rhs: Lookahead::new(rhs),
  347|    234|            combinator: Default::default(),
  348|    234|        }
  349|    234|    }
_RNvXsf_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsaFkFfa58Dz1_4core7default7Default7defaultB9_:
   87|    234|#[derive(Default)]
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  8.35k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.35k|        self.next.as_mut()
  475|  8.35k|    }
_RNvXs6_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  312|  8.58k|        self.0.next()
  313|  8.58k|    }
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  17.1k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  17.1k|        self.next.as_mut()
  475|  17.1k|    }
_RNvMs8_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  8.58k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  8.58k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  8.35k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    234|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  8.35k|        if advance_lhs {
  371|  8.35k|            self.lhs.next();
  372|  8.35k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  8.35k|        range
  377|  8.58k|    }
_RNvXse_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.58k|        let next = self.next.take()?;
  484|  8.35k|        self.next = self.iter.next();
  485|  8.35k|        Some(next)
  486|  8.58k|    }
_RNvXs6_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  312|  8.58k|        self.0.next()
  313|  8.58k|    }
_RNvXs0_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  182|  8.35k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  8.35k|        // the difference between a range and an empty range is just that range
  184|  8.35k|        Some(lhs)
  185|  8.35k|    }
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    234|    fn new(mut iter: I) -> Self {
  469|    234|        let next = iter.next();
  470|    234|        Self { iter, next }
  471|    234|    }
_RNvXse_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  8.35k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.35k|        let next = self.next.take()?;
  484|  8.35k|        self.next = self.iter.next();
  485|  8.35k|        Some(next)
  486|  8.35k|    }
_RNvXse_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.58k|        let next = self.next.take()?;
  484|  8.35k|        self.next = self.iter.next();
  485|  8.35k|        Some(next)
  486|  8.58k|    }
_RNCNvXs9_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  8.35k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsb_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  439|  8.58k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  8.35k|        while let Some(next) = self.iter.peek() {
  444|  8.19k|            if next.start > range.end {
  445|  8.19k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  8.35k|        Some(range)
  453|  8.58k|    }
_RNCNvXs9_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  8.58k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    234|    fn new(lhs: A, rhs: B) -> Self {
  344|    234|        Self {
  345|    234|            lhs: Lookahead::new(lhs),
  346|    234|            rhs: Lookahead::new(rhs),
  347|    234|            combinator: Default::default(),
  348|    234|        }
  349|    234|    }
_RNvMsd_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  8.58k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.58k|        self.next.as_mut()
  475|  8.58k|    }

_RINvYINtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    234|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    234|        Combine::new(self, other)
   24|    234|    }
_RNCINvNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0B6_:
  167|    468|    Ranges::new(iter::from_fn(move || {
  168|    468|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|    468|    }))
_RINvYINtNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    234|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    234|        Combine::new(self, other)
   34|    234|    }
_RNvXs3_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  8.58k|    fn next(&mut self) -> Option<Self::Item> {
  155|  8.58k|        self.0.next()
  156|  8.58k|    }
_RINvNtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEEB4_:
  164|    468|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|    468|    let mut iter = bits.into_iter().peekable();
  166|    468|
  167|    468|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|    468|    }))
  181|    468|}
_RNvXs3_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|    468|    fn next(&mut self) -> Option<Self::Item> {
  155|    468|        self.0.next()
  156|    468|    }
_RINvMs2_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    234|    pub fn new<II>(iter: II) -> Self
  141|    234|    where
  142|    234|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    234|    {
  144|    234|        Self(iter.into_iter())
  145|    234|    }
_RINvMs2_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsaFkFfa58Dz1_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs5sAj5AAFQNS_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|    468|    pub fn new<II>(iter: II) -> Self
  141|    468|    where
  142|    468|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    468|    {
  144|    468|        Self(iter.into_iter())
  145|    468|    }

_RNvXsa_CsbAjHBjOUB8L_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsaFkFfa58Dz1_4core7default7Default7defaultB5_:
   42|    319|#[derive(Debug, Default, Clone)]
_RNvMs4_CsbAjHBjOUB8L_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|    234|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|    234|        self.inner_ranges()
  291|    234|            .union(ranges_from_bits(self.set.iter().copied()))
  292|    234|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|    234|    }
_RNvMs4_CsbAjHBjOUB8L_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  283|    234|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|    234|        iter::Ranges::new(self.ranges.iter().cloned())
  285|    234|    }

_RNvXNtCsbAjHBjOUB8L_17fvm_ipld_bitfield5rangeINtNtNtCsaFkFfa58Dz1_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  8.35k|    fn size(&self) -> Self::Idx {
   17|  8.35k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  8.35k|            self.end - self.start
   21|       |        }
   22|  8.35k|    }

_RNvXs5_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCsaFkFfa58Dz1_4core3fmt7Display3fmt:
    5|     49|#[derive(PartialEq, Eq, Clone, Debug, Error)]
    6|      9|pub enum Error {

_RINvXs_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   99|    376|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    376|    where
  101|    376|        D: Deserializer<'de>,
  102|    376|    {
  103|    376|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    368|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    368|        }
  110|    368|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    376|    }
_RINvXNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   83|    234|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    234|    where
   85|    234|        S: Serializer,
   86|    234|    {
   87|    234|        let bytes = self.to_bytes();
   88|    234|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    234|        }
   94|    234|        strict_bytes::serialize(&bytes, serializer)
   95|    234|    }
_RNvMs1_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    234|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    234|        let mut iter = self.ranges();
  203|       |
  204|    234|        let first_range = match iter.next() {
  205|    154|            Some(range) => range,
  206|     80|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    154|        let mut writer = BitWriter::new();
  210|    154|        writer.write(0, 2); // version 00
  211|    154|
  212|    154|        if first_range.start == 0 {
  213|     74|            writer.write(1, 1); // the first bit is a 1
  214|     80|        } else {
  215|     80|            writer.write(0, 1); // the first bit is a 0
  216|     80|            writer.write_len(first_range.start); // the number of leading 0s
  217|     80|        }
  218|       |
  219|    154|        writer.write_len(first_range.size());
  220|    154|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  8.35k|        for range in iter {
  225|  8.19k|            writer.write_len(range.start - index); // zeros
  226|  8.19k|            writer.write_len(range.size()); // ones
  227|  8.19k|            index = range.end;
  228|  8.19k|        }
  229|       |
  230|    154|        writer.finish()
  231|    234|    }
_RNvMs1_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    368|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    368|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    367|        let version = reader.read(2);
  162|    367|        if version != 0 {
  163|      3|            return Err(Error::UnsupportedVersion);
  164|    364|        }
  165|    364|
  166|    364|        let mut next_value = reader.read(1) == 1;
  167|    364|        let mut ranges = Vec::new();
  168|    364|        let mut index = 0u64;
  169|    364|        let mut total_len: u64 = 0;
  170|       |
  171|  23.0k|        while let Some(len) = reader.read_len()? {
  172|  22.7k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  22.7k|            if ovf {
  174|      1|                return Err(Error::RLEOverflow);
  175|  22.7k|            }
  176|  22.7k|            total_len = new_total_len;
  177|  22.7k|            let start = index;
  178|  22.7k|            index += len;
  179|  22.7k|            let end = index;
  180|  22.7k|
  181|  22.7k|            if next_value {
  182|  11.4k|                ranges.push(start..end);
  183|  11.4k|            }
  184|       |
  185|  22.7k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    332|        if next_value {
  191|     13|            return Err(Error::NotMinimal);
  192|    319|        }
  193|    319|
  194|    319|        Ok(Self {
  195|    319|            ranges,
  196|    319|            ..Default::default()
  197|    319|        })
  198|    368|    }

_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  153|  23.0k|    pub fn has_more(&self) -> bool {
  154|  23.0k|        self.bits != 0 || !self.bytes.is_empty()
  155|  23.0k|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  43.0k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  43.0k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  43.0k|        let res = self.peek(num_bits);
   86|  43.0k|        self.drop(num_bits);
   87|  43.0k|
   88|  43.0k|        res
   89|  43.0k|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  65.8k|    pub fn drop(&mut self, num_bits: u32) {
   62|  65.8k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  65.8k|        self.bits >>= num_bits;
   66|  65.8k|        self.num_bits -= num_bits;
   67|  65.8k|
   68|  65.8k|        // not sure why this being outside of the if improves the performance
   69|  65.8k|        // bit it does, probably related to keeping caches warm
   70|  65.8k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  65.8k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  65.8k|
   73|  65.8k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  65.8k|        if self.num_bits < 8 {
   75|  47.6k|            self.num_bits += 8;
   76|  47.6k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  47.6k|        }
   78|  65.8k|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  23.0k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  23.0k|        // We're done.
  121|  23.0k|        if !self.has_more() {
  122|    332|            return Ok(None);
  123|  22.7k|        }
  124|  22.7k|
  125|  22.7k|        let peek6 = self.peek(6);
  126|       |
  127|  22.7k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|  11.5k|            self.drop(1);
  130|  11.5k|            1
  131|  11.2k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|  2.30k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|  2.30k|            self.drop(6);
  135|  2.30k|            if val < 2 {
  136|      7|                return Err(Error::NotMinimal);
  137|  2.29k|            }
  138|  2.29k|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  8.94k|            self.drop(2);
  142|  8.94k|            let val = self.read_varint()?;
  143|  8.93k|            if val < 16 {
  144|     15|                return Err(Error::NotMinimal);
  145|  8.91k|            }
  146|  8.91k|            val
  147|       |        };
  148|       |
  149|  22.7k|        Ok(Some(len))
  150|  23.0k|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  65.8k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  65.8k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  65.8k|        let mask = (1 << num_bits) - 1;
   56|  65.8k|        (self.bits & mask) as u8
   57|  65.8k|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    368|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    368|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    368|        // data.
   29|    368|        if bytes.last() == Some(&0) {
   30|      1|            return Err(Error::NotMinimal);
   31|    367|        }
   32|    367|        let mut bits = 0u64;
   33|  1.10k|        for i in 0..2 {
   34|    734|            let byte = bytes.get(i).unwrap_or(&0);
   35|    734|            bits |= (*byte as u64) << (8 * i);
   36|    734|        }
   37|       |
   38|    367|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    367|
   40|    367|        Ok(Self {
   41|    367|            bytes,
   42|    367|            bits,
   43|    367|            num_bits: 16,
   44|    367|        })
   45|    368|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  8.94k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  8.94k|        let mut len = 0u64;
   95|       |
   96|  42.3k|        for i in 0..VARINT_MAX_BYTES {
   97|  42.3k|            let byte = self.read(8);
   98|  42.3k|
   99|  42.3k|            // strip off the most significant bit and add
  100|  42.3k|            // it to the output
  101|  42.3k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  42.3k|
  103|  42.3k|            // if the most significant bit is a 0, we've
  104|  42.3k|            // reached the end of the varint
  105|  42.3k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  8.94k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      6|                    break;
  110|  8.93k|                }
  111|  8.93k|                return Ok(len);
  112|  33.3k|            }
  113|       |        }
  114|       |
  115|      9|        Err(Error::InvalidVarint)
  116|  8.94k|    }

_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  16.6k|    pub fn write_len(&mut self, len: u64) {
   40|  16.6k|        debug_assert!(len > 0);
   41|       |
   42|  16.6k|        if len == 1 {
   43|  7.10k|            // Block Single (prefix 1)
   44|  7.10k|            self.write(1, 1);
   45|  9.52k|        } else if len < 16 {
   46|  1.59k|            // Block Short (prefix 01)
   47|  1.59k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.59k|            self.write(len as u8, 4);
   49|  1.59k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  7.92k|            self.write(0, 2);
   52|  7.92k|
   53|  7.92k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  38.7k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  38.7k|                self.write(byte, 8);
   56|  38.7k|            }
   57|       |        }
   58|  16.6k|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   18|    154|    pub fn new() -> Self {
   19|    154|        Default::default()
   20|    154|    }
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    154|    pub fn finish(mut self) -> Vec<u8> {
   62|    154|        if self.bits > 0 {
   63|     64|            self.bytes.push(self.bits as u8);
   64|     90|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    154|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    154|        self.bytes
   72|    154|    }
_RNvXs_NtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsaFkFfa58Dz1_4core7default7Default7defaultB8_:
    5|    154|#[derive(Default, Clone, Debug)]
_RNvMNtNtCsbAjHBjOUB8L_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  57.2k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  57.2k|        debug_assert!(num_bits <= 8);
   25|  57.2k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  57.2k|        self.bits |= (byte as u16) << self.num_bits;
   28|  57.2k|        self.num_bits += num_bits;
   29|  57.2k|
   30|  57.2k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  57.2k|        if self.num_bits >= 8 {
   32|  42.7k|            self.bytes.push(self.bits as u8);
   33|  42.7k|            self.bits >>= 8;
   34|  42.7k|            self.num_bits -= 8;
   35|  42.7k|        }
   36|  57.2k|    }

_RINvXNvXNvNtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   36|    234|#[derive(Debug, Serialize)]
_RINvXNvNtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   36|    234|#[derive(Debug, Serialize)]
_RINvXs4_NtCsbAjHBjOUB8L_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   94|    319|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    319|    where
   96|    319|        D: Deserializer<'de>,
   97|    319|    {
   98|    319|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    298|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    298|        }
  105|    298|        Ok(Self::Unvalidated(bytes))
  106|    319|    }

_RINvXNvXs_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor11visit_bytesINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
   57|    817|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    817|                where
   59|    817|                    E: Error,
   60|    817|                {
   61|    817|                    Ok(v.into())
   62|    817|                }
_RINvXs_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   44|    967|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    967|        where
   46|    967|            D: Deserializer<'de>,
   47|    967|        {
   48|    967|            struct VecVisitor;
   49|    967|
   50|    967|            impl<'de> Visitor<'de> for VecVisitor {
   51|    967|                type Value = Vec<u8>;
   52|    967|
   53|    967|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    967|                    formatter.write_str("byte array")
   55|    967|                }
   56|    967|
   57|    967|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    967|                where
   59|    967|                    E: Error,
   60|    967|                {
   61|    967|                    Ok(v.into())
   62|    967|                }
   63|    967|
   64|    967|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    967|                where
   66|    967|                    E: Error,
   67|    967|                {
   68|    967|                    Ok(v)
   69|    967|                }
   70|    967|            }
   71|    967|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    967|        }
_RINvNtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCs5sAj5AAFQNS_5alloc3vec3VechEQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  154|    234|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    234|    where
  156|    234|        T: ?Sized + AsRef<[u8]>,
  157|    234|        S: Serializer,
  158|    234|    {
  159|    234|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    234|    }
_RINvXNvXs0_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
   89|  2.99k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  2.99k|                where
   91|  2.99k|                    E: Error,
   92|  2.99k|                {
   93|  2.99k|                    Ok(Cow::Borrowed(v))
   94|  2.99k|                }
_RINvXNvXs_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor14visit_byte_bufINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
   64|     12|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|     12|                where
   66|     12|                    E: Error,
   67|     12|                {
   68|     12|                    Ok(v)
   69|     12|                }
_RINvNtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs5sAj5AAFQNS_5alloc6borrow3CowShEQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  162|    376|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    376|    where
  164|    376|        T: Deserialize<'de>,
  165|    376|        D: Deserializer<'de>,
  166|    376|    {
  167|    376|        Deserialize::deserialize(deserializer)
  168|    376|    }
_RINvXNtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   35|    702|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    702|        where
   37|    702|            S: Serializer,
   38|    702|        {
   39|    702|            serializer.serialize_bytes(self.as_ref())
   40|    702|        }
_RINvXNvXs0_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsaPIgCidcmIN_5serde2de7Visitor14visit_byte_bufINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsaFkFfa58Dz1_4core7convert10InfallibleEECsi91UKKyYkf_11cbor_decode:
  103|     70|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|     70|                where
  105|     70|                    E: Error,
  106|     70|                {
  107|     70|                    Ok(Cow::Owned(v))
  108|     70|                }
_RINvXs0_NtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   76|  3.14k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  3.14k|        where
   78|  3.14k|            D: Deserializer<'de>,
   79|  3.14k|        {
   80|  3.14k|            struct CowVisitor;
   81|  3.14k|
   82|  3.14k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  3.14k|                type Value = Cow<'de, [u8]>;
   84|  3.14k|
   85|  3.14k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  3.14k|                    formatter.write_str("a byte array")
   87|  3.14k|                }
   88|  3.14k|
   89|  3.14k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  3.14k|                where
   91|  3.14k|                    E: Error,
   92|  3.14k|                {
   93|  3.14k|                    Ok(Cow::Borrowed(v))
   94|  3.14k|                }
   95|  3.14k|
   96|  3.14k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  3.14k|                where
   98|  3.14k|                    E: Error,
   99|  3.14k|                {
  100|  3.14k|                    Ok(Cow::Owned(v.to_vec()))
  101|  3.14k|                }
  102|  3.14k|
  103|  3.14k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  3.14k|                where
  105|  3.14k|                    E: Error,
  106|  3.14k|                {
  107|  3.14k|                    Ok(Cow::Owned(v))
  108|  3.14k|                }
  109|  3.14k|            }
  110|  3.14k|            deserializer.deserialize_bytes(CowVisitor)
  111|  3.14k|        }
_RINvNtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs5sAj5AAFQNS_5alloc3vec3VechEQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  162|    967|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    967|    where
  164|    967|        T: Deserialize<'de>,
  165|    967|        D: Deserializer<'de>,
  166|    967|    {
  167|    967|        Deserialize::deserialize(deserializer)
  168|    967|    }
_RINvNtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCs5sAj5AAFQNS_5alloc3vec3VechEQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  154|    468|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    468|    where
  156|    468|        T: ?Sized + AsRef<[u8]>,
  157|    468|        S: Serializer,
  158|    468|    {
  159|    468|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    468|    }
_RINvXNtNtCs3kAkErapv4O_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs5sAj5AAFQNS_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   35|    672|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    672|        where
   37|    672|            S: Serializer,
   38|    672|        {
   39|    672|            serializer.serialize_bytes(self.as_ref())
   40|    672|        }

_RNvXNtCs3kAkErapv4O_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCsaFkFfa58Dz1_4core7convert4FromINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCsi91UKKyYkf_11cbor_decode:
   23|    428|    fn from(err: DecodeError<T>) -> Self {
   24|    428|        Self {
   25|    428|            description: err.to_string(),
   26|    428|            protocol: CodecProtocol::Cbor,
   27|    428|        }
   28|    428|    }

_RINvCs3kAkErapv4O_17fvm_ipld_encoding10from_sliceNtNtCs98lIsuRvmzl_11common_fuzz4cbor7PayloadECsi91UKKyYkf_11cbor_decode:
   61|    662|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    662|where
   63|    662|    T: de::Deserialize<'a>,
   64|    662|{
   65|    662|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    662|}
_RINvCs3kAkErapv4O_17fvm_ipld_encoding6to_vecNtNtCs98lIsuRvmzl_11common_fuzz4cbor7PayloadECsi91UKKyYkf_11cbor_decode:
   44|    234|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    234|where
   46|    234|    T: ser::Serialize + ?Sized,
   47|    234|{
   48|    234|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    234|}

_RNvXs7_NtNtCsh47h2fRhlw5_10fvm_shared7address6errorsNtB5_5ErrorNtNtCsaFkFfa58Dz1_4core3fmt7Display3fmt:
   14|     38|#[derive(Debug, PartialEq, Eq, Error)]
   15|      0|pub enum Error {
_RNvXs0_NtNtCsh47h2fRhlw5_10fvm_shared7address6errorsNtB5_5ErrorINtNtCsaFkFfa58Dz1_4core7convert4FromNtNtCsfxCqH6gdHka_15unsigned_varint6decode5ErrorE4from:
   52|     21|    fn from(_: VarintError) -> Error {
   53|     21|        Error::InvalidPayload
   54|     21|    }

_RINvXs2_NtCsh47h2fRhlw5_10fvm_shared7addressNtB6_7AddressNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
  348|    672|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  349|    672|    where
  350|    672|        S: Serializer,
  351|    672|    {
  352|    672|        let address_bytes = self.to_bytes();
  353|    672|        strict_bytes::Serialize::serialize(&address_bytes, s)
  354|    672|    }
_RINvXs3_NtCsh47h2fRhlw5_10fvm_shared7addressNtB6_7AddressNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
  358|  2.77k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  359|  2.77k|    where
  360|  2.77k|        D: Deserializer<'de>,
  361|  2.77k|    {
  362|  2.77k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  363|       |
  364|       |        // Create and return created address of unmarshalled bytes
  365|  2.69k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  366|  2.77k|    }
_RNvNtCsh47h2fRhlw5_10fvm_shared7address14from_leb_bytes:
  374|    558|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  375|       |    // write id to buffer in leb128 format
  376|    558|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  377|    541|    if !remaining.is_empty() {
  378|      2|        return Err(Error::InvalidPayload);
  379|    539|    }
  380|    539|    Ok(id)
  381|    558|}
_RNvMNtCsh47h2fRhlw5_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|    672|    pub fn to_bytes(self) -> Vec<u8> {
  169|    672|        self.payload.to_bytes()
  170|    672|    }
_RNvMNtCsh47h2fRhlw5_10fvm_shared7addressNtB2_7Address3new:
   79|  2.68k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  2.68k|        Ok(Self {
   81|  2.68k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  2.68k|    }
_RNvMNtCsh47h2fRhlw5_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  2.69k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  2.69k|        if bz.len() < 2 {
   88|     10|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  2.68k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  2.68k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  2.69k|    }
_RNvNtCsh47h2fRhlw5_10fvm_shared7address12to_leb_bytes:
  369|    330|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  370|    330|    // write id to buffer in leb128 format
  371|    330|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  372|    330|}

_RNvMs2_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|    672|    pub fn to_bytes(self) -> Vec<u8> {
  132|    672|        let mut bz = self.to_raw_bytes();
  133|    672|        bz.insert(0, Protocol::from(self) as u8);
  134|    672|        bz
  135|    672|    }
_RNCNvMs2_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB7_7Payload3news_0Bb_:
  149|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMs2_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB7_7Payload3new0Bb_:
  144|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMs0_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|  1.44k|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|  1.44k|        let length = subaddress.len();
   59|  1.44k|        if length > MAX_SUBADDRESS_LEN {
   60|      1|            return Err(Error::InvalidPayloadLength(length));
   61|  1.44k|        }
   62|  1.44k|        let mut addr = DelegatedAddress {
   63|  1.44k|            namespace,
   64|  1.44k|            length,
   65|  1.44k|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|  1.44k|        };
   67|  1.44k|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|  1.44k|        Ok(addr)
   69|  1.44k|    }
_RNvMs2_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|    672|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|    672|        use Payload::*;
  117|    672|        match self {
  118|    230|            ID(i) => to_leb_bytes(i),
  119|    116|            Secp256k1(arr) => arr.to_vec(),
  120|    126|            Actor(arr) => arr.to_vec(),
  121|    100|            BLS(arr) => arr.to_vec(),
  122|    100|            Delegated(addr) => {
  123|    100|                let mut buf = to_leb_bytes(addr.namespace());
  124|    100|                buf.extend(addr.subaddress());
  125|    100|                buf
  126|       |            }
  127|       |        }
  128|    672|    }
_RNvMs2_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  2.68k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  2.68k|        let payload = match protocol {
  140|    558|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    230|                payload
  143|    230|                    .try_into()
  144|    230|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    280|                payload
  148|    280|                    .try_into()
  149|    280|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    165|                payload
  153|    165|                    .try_into()
  154|    165|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|  1.45k|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|  1.44k|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  2.65k|        Ok(payload)
  162|  2.68k|    }
_RNvXs3_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCsaFkFfa58Dz1_4core7convert4FromNtB5_7PayloadE4from:
  166|    672|    fn from(pl: Payload) -> Self {
  167|    672|        match pl {
  168|    230|            Payload::ID(_) => Self::ID,
  169|    116|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    126|            Payload::Actor(_) => Self::Actor,
  171|    100|            Payload::BLS(_) => Self::BLS,
  172|    100|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|    672|    }
_RNvMs0_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|    100|    pub fn namespace(&self) -> ActorID {
   74|    100|        self.namespace
   75|    100|    }
_RNCNvMs2_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB7_7Payload3news0_0Bb_:
  154|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMs0_NtNtCsh47h2fRhlw5_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|    100|    pub fn subaddress(&self) -> &[u8] {
   80|    100|        &self.buffer[..self.length]
   81|    100|    }

_RNvXNvNtNtCsh47h2fRhlw5_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsjtRQbvNmNGE_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  2.68k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCsh47h2fRhlw5_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsjtRQbvNmNGE_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  2.68k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCsh47h2fRhlw5_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  2.68k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  2.68k|        FromPrimitive::from_u8(b)
   31|  2.68k|    }

_RINvXNvXNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtBe_7PayloadNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   12|    765|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtBd_7PayloadNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEE0Csi91UKKyYkf_11cbor_decode:
   12|    531|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCs98lIsuRvmzl_11common_fuzz4cborNtBd_7PayloadNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   12|    234|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCs98lIsuRvmzl_11common_fuzz4cborNtB5_7PayloadNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEECsi91UKKyYkf_11cbor_decode:
   12|    234|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB3_7PayloadNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserializeQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   12|  1.08k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCs98lIsuRvmzl_11common_fuzz4cborNtBa_7PayloadNtNtCsaPIgCidcmIN_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs5gkxa96HMQ9_11serde_tuple10SerializerQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils9BufWriterEEECsi91UKKyYkf_11cbor_decode:
   12|    234|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtBb_7PayloadNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de8AccessorNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEECsi91UKKyYkf_11cbor_decode:
   12|    648|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCs98lIsuRvmzl_11common_fuzz4cborNtB8_7PayloadNtNtCsaPIgCidcmIN_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs5gkxa96HMQ9_11serde_tuple12DeserializerQINtNtCsfokjsIrkMGq_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsSqpNEdGVxA_7cbor4ii4core5utils11SliceReaderEEECsi91UKKyYkf_11cbor_decode:
   12|    662|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

