_RINvXss_NtNtCs8dP7NWGLpjb_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  252|    433|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    433|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    433|                }
_RINvNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  125|  12.2k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  12.2k|    let b = reader.fill(1)?
  127|  12.2k|        .as_ref()
  128|  12.2k|        .get(0)
  129|  12.2k|        .copied()
  130|  12.2k|        .ok_or(Error::Eof)?;
  131|  12.1k|    reader.advance(1);
  132|  12.1k|    Ok(b)
  133|  12.2k|}
_RINvNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  427|  9.16k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  9.16k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  9.16k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  9.16k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  3.92k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  3.92k|            if buf.len() >= len {
  436|  3.86k|                reader.advance(len);
  437|  3.86k|                return Ok(Some(&buf[..len]));
  438|     59|            }
  439|      0|        }
  440|       |
  441|     59|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|     64|        while len != 0 {
  444|     64|            let readbuf = reader.fill(len)?;
  445|     64|            let readbuf = readbuf.as_ref();
  446|     64|
  447|     64|            if readbuf.is_empty() {
  448|     59|                return Err(Error::Eof);
  449|      5|            }
  450|      5|
  451|      5|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      5|
  453|      5|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      5|            reader.advance(readlen);
  455|      5|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|  6.65k|            let byte = pull_one(reader)?;
  463|       |
  464|  6.62k|            if byte == marker::BREAK {
  465|    416|                break
  466|  6.21k|            }
  467|  6.21k|
  468|  6.21k|            if !reader.step_in() {
  469|      1|                return Err(Error::DepthLimit);
  470|  6.21k|            }
  471|  6.21k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|  6.21k|            let reader = &mut *reader;
  473|       |
  474|  6.21k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|  1.21k|                buf.extend_from_slice(longbuf);
  476|  1.21k|            }
  477|       |        }
  478|       |
  479|    416|        Ok(None)
  480|       |    }
  481|  9.16k|}
_RINvNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  136|  1.01k|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  2.02k|    while !buf.is_empty() {
  138|  1.03k|        let readbuf = reader.fill(buf.len())?;
  139|  1.03k|        let readbuf = readbuf.as_ref();
  140|  1.03k|
  141|  1.03k|        if readbuf.is_empty() {
  142|     25|            return Err(Error::Eof);
  143|  1.00k|        }
  144|  1.00k|
  145|  1.00k|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|  1.00k|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|  1.00k|        reader.advance(len);
  148|  1.00k|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    993|    Ok(())
  152|  1.01k|}
_RINvXsc_NtNtCs8dP7NWGLpjb_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  611|    946|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|    946|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|    946|    }
_RINvMs0_NtNtCs8dP7NWGLpjb_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  223|  5.58k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  5.58k|        match self.byte & self.major_limit {
  225|  5.58k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|    956|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|    374|                let mut buf = [0; 2];
  229|    374|                pull_exact(reader, &mut buf)?;
  230|    366|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|    264|                let mut buf = [0; 4];
  234|    264|                pull_exact(reader, &mut buf)?;
  235|    255|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    380|                let mut buf = [0; 8];
  239|    380|                pull_exact(reader, &mut buf)?;
  240|    372|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|     52|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  5.58k|    }
_RINvYINtNtNtCs8dP7NWGLpjb_7cbor4ii4core5types5BytesINtNtCs9VBnAT6y2aj_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
   73|  3.00k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  3.00k|        let byte = pull_one(reader)?;
   75|  2.94k|        Self::decode_with(byte, reader)
   76|  3.00k|    }
_RNvNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec8if_majorCskLEm2Dfx7Ph_11cbor_decode:
  890|    231|pub fn if_major(byte: u8) -> u8 {
  891|    231|    byte >> 5
  892|    231|}
_RNCINvNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0CskLEm2Dfx7Ph_11cbor_decode:
  471|  6.21k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvXs5_NtNtCs8dP7NWGLpjb_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs9VBnAT6y2aj_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  506|  2.94k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  2.94k|        use crate::alloc::borrow::Cow;
  508|  2.94k|
  509|  2.94k|        let mut buf = Vec::new();
  510|  2.94k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  2.64k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|    152|            Cow::Owned(buf)
  514|       |        }))
  515|  2.94k|    }
_RINvXsg_NtNtCs8dP7NWGLpjb_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  703|    245|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    245|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    245|    }
_RNvMs0_NtNtCs8dP7NWGLpjb_7cbor4ii4core3decNtB5_7TypeNum3newCskLEm2Dfx7Ph_11cbor_decode:
  175|  5.58k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  5.58k|        TypeNum { major_limit, byte }
  177|  5.58k|    }
_RINvYNtNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
   73|    246|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    246|        let byte = pull_one(reader)?;
   75|    245|        Self::decode_with(byte, reader)
   76|    246|    }
_RINvNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
  595|  10.1k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  10.1k|    -> Result<Option<usize>, Error<R::Error>>
  597|  10.1k|{
  598|  10.1k|    if byte != (marker::START | (major << 5)) {
  599|  4.90k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  4.84k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  4.84k|        Ok(Some(len))
  602|       |    } else {
  603|  5.19k|        Ok(None)
  604|       |    }
  605|  10.1k|}
_RINvYNtNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
   73|    949|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    949|        let byte = pull_one(reader)?;
   75|    946|        Self::decode_with(byte, reader)
   76|    949|    }
_RNvMNtNtCs8dP7NWGLpjb_7cbor4ii4core3decNtB2_9Reference6as_refCskLEm2Dfx7Ph_11cbor_decode:
   81|  13.3k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  13.3k|        match self {
   83|  13.3k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  13.3k|    }
_RINvYyNtNtNtCs8dP7NWGLpjb_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
   73|    439|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    439|        let byte = pull_one(reader)?;
   75|    433|        Self::decode_with(byte, reader)
   76|    439|    }

_RINvXsi_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
  317|    180|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    180|        self.1.encode(writer)
  319|    180|    }
_RINvXsu_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
  159|    180|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    180|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    180|                }
_RNvMs0_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB5_7TypeNummE3newCskLEm2Dfx7Ph_11cbor_decode:
   52|  1.67k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.67k|        TypeNum { type_, value }
   54|  1.67k|    }
_RINvXsd_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
  270|    360|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    360|        Ok(())
  272|    360|    }
_RINvXs3_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
   84|  1.67k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  1.67k|        match u16::try_from(self.value) {
   86|  1.66k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      4|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      4|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  1.67k|        Ok(())
   93|  1.67k|    }
_RINvXs1_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
   59|  1.53k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  1.53k|        match self.value {
   61|  1.53k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    588|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  1.53k|        Ok(())
   65|  1.53k|    }
_RINvXs2_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
   70|  1.66k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  1.66k|        match u8::try_from(self.value) {
   72|  1.53k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    130|                let [x0, x1] = self.value.to_be_bytes();
   75|    130|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  1.66k|        Ok(())
   79|  1.66k|    }
_RNvMs0_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB5_7TypeNumyE3newCskLEm2Dfx7Ph_11cbor_decode:
   52|  1.83k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.83k|        TypeNum { type_, value }
   54|  1.83k|    }
_RNvMs0_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB5_7TypeNumtE3newCskLEm2Dfx7Ph_11cbor_decode:
   52|  1.66k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.66k|        TypeNum { type_, value }
   54|  1.66k|    }
_RNvMs0_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB5_7TypeNumhE3newCskLEm2Dfx7Ph_11cbor_decode:
   52|  1.53k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.53k|        TypeNum { type_, value }
   54|  1.53k|    }
_RINvXs4_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
   98|  1.83k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  1.83k|        match u32::try_from(self.value) {
  100|  1.67k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    164|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    164|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  1.83k|        Ok(())
  107|  1.83k|    }
_RINvXs7_NtNtCs8dP7NWGLpjb_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECskLEm2Dfx7Ph_11cbor_decode:
  209|  1.11k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.11k|        writer.push(self.0)?;
  211|  1.11k|        Ok(())
  212|  1.11k|    }

_RNvXs1_NtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCskLEm2Dfx7Ph_11cbor_decode:
   68|  17.0k|    fn advance(&mut self, n: usize) {
   69|  17.0k|        let len = core::cmp::min(self.buf.len(), n);
   70|  17.0k|        self.buf = &self.buf[len..];
   71|  17.0k|    }
_RNvXs1_NtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCskLEm2Dfx7Ph_11cbor_decode:
   62|  18.1k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  18.1k|        let len = core::cmp::min(self.buf.len(), want);
   64|  18.1k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  18.1k|    }
_RNvXs1_NtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCskLEm2Dfx7Ph_11cbor_decode:
   75|  7.16k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  7.16k|            self.limit = limit;
   77|  7.16k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  7.16k|    }
_RNvXs_NtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCskLEm2Dfx7Ph_11cbor_decode:
   40|  2.95k|        self.0.try_reserve(input.len())?;
   41|  2.95k|        self.0.extend_from_slice(input);
   42|  2.95k|        Ok(())
   43|  2.95k|    }
_RNvXs1_NtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCskLEm2Dfx7Ph_11cbor_decode:
   84|  7.16k|    fn step_out(&mut self) {
   85|  7.16k|        self.limit += 1;
   86|  7.16k|    }
_RNvMNtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    180|    pub fn new(buf: Vec<u8>) -> Self {
   15|    180|       BufWriter(buf)
   16|    180|    }
_RNvMs0_NtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    560|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    560|        SliceReader { buf, limit: 256 }
   55|    560|    }
_RNvMNtNtCs8dP7NWGLpjb_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    180|    pub fn into_inner(self) -> Vec<u8> {
   25|    180|        self.0
   26|    180|    }

_RNvMs1_NtCs8dP7NWGLpjb_7cbor4ii5errorINtB5_11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleE8mismatchCskLEm2Dfx7Ph_11cbor_decode:
   93|     52|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     52|        DecodeError::Mismatch {
   95|     52|            expect_major: (!major_limit) >> 5,
   96|     52|            byte
   97|     52|        }
   98|     52|    }

_RNvXs0_NtCs8dP7NWGLpjb_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCsbBucQyKleSJ_4core3ops4drop4Drop4dropCskLEm2Dfx7Ph_11cbor_decode:
   24|  6.21k|    fn drop(&mut self) {
   25|  6.21k|        (self.1)(self.0);
   26|  6.21k|    }
_RNvXs_NtCs8dP7NWGLpjb_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCsbBucQyKleSJ_4core3ops5deref8DerefMut9deref_mutCskLEm2Dfx7Ph_11cbor_decode:
   17|  6.21k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  6.21k|        self.0
   19|  6.21k|    }

_RNvXs6_NtCs75BWONeJyCe_3cid3cidINtB5_3CidKj40_EINtNtCsbBucQyKleSJ_4core7convert7TryFromRShE8try_fromCskLEm2Dfx7Ph_11cbor_decode:
  314|    219|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    219|        Self::read_bytes(&mut bytes)
  316|    219|    }
_RNvMNtCs75BWONeJyCe_3cid3cidINtB2_3CidKj40_E8to_bytesCskLEm2Dfx7Ph_11cbor_decode:
  167|    180|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    180|        let mut bytes = Vec::new();
  169|    180|        self.write_bytes(&mut bytes).unwrap();
  170|    180|        bytes
  171|    180|    }
_RNvMNtCs75BWONeJyCe_3cid3cidINtB2_3CidKj40_E6new_v1CskLEm2Dfx7Ph_11cbor_decode:
   90|    167|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    167|        Self {
   92|    167|            version: Version::V1,
   93|    167|            codec,
   94|    167|            hash,
   95|    167|        }
   96|    167|    }
_RINvMNtCs75BWONeJyCe_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECskLEm2Dfx7Ph_11cbor_decode:
  127|    219|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    219|        let version = varint_read_u64(&mut r)?;
  129|    218|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    214|        if [version, codec] == [0x12, 0x20] {
  132|     20|            let mut digest = [0u8; 32];
  133|     20|            r.read_exact(&mut digest)?;
  134|     19|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|     19|            Self::new_v0(mh)
  136|       |        } else {
  137|    194|            let version = Version::try_from(version)?;
  138|    192|            let mh = Multihash::read(r)?;
  139|    169|            Self::new(version, codec, mh)
  140|       |        }
  141|    219|    }
_RINvMNtCs75BWONeJyCe_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
  143|    162|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    162|        let mut version_buf = varint_encode::u64_buffer();
  145|    162|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    162|
  147|    162|        let mut codec_buf = varint_encode::u64_buffer();
  148|    162|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    162|
  150|    162|        w.write_all(version)?;
  151|    162|        w.write_all(codec)?;
  152|    162|        self.hash.write(&mut w)?;
  153|    162|        Ok(())
  154|    162|    }
_RINvMNtCs75BWONeJyCe_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
  157|    180|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    180|        match self.version {
  159|     18|            Version::V0 => self.hash.write(w)?,
  160|    162|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    180|        Ok(())
  163|    180|    }
_RNvMNtCs75BWONeJyCe_3cid3cidINtB2_3CidKj40_E3newCskLEm2Dfx7Ph_11cbor_decode:
   99|    169|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    169|        match version {
  101|       |            Version::V0 => {
  102|      2|                if codec != DAG_PB {
  103|      1|                    return Err(Error::InvalidCidV0Codec);
  104|      1|                }
  105|      1|                Self::new_v0(hash)
  106|       |            }
  107|    167|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    169|    }
_RNvMNtCs75BWONeJyCe_3cid3cidINtB2_3CidKj40_E6new_v0CskLEm2Dfx7Ph_11cbor_decode:
   78|     20|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     20|        if hash.code() != SHA2_256 {
   80|      1|            return Err(Error::InvalidCidV0Multihash);
   81|     19|        }
   82|     19|        Ok(Self {
   83|     19|            version: Version::V0,
   84|     19|            codec: DAG_PB,
   85|     19|            hash,
   86|     19|        })
   87|     20|    }

_RNvXs4_NtCs75BWONeJyCe_3cid5errorNtB5_5ErrorINtNtCsbBucQyKleSJ_4core7convert4FromNtNtNtCsgh5bzdpzPR5_3std2io5error5ErrorE4from:
   88|      1|    fn from(err: io::Error) -> Self {
   89|      1|        Self::Io(err)
   90|      1|    }
_RNvXs3_NtCs75BWONeJyCe_3cid5errorNtB5_5ErrorINtNtCsbBucQyKleSJ_4core7convert4FromNtNtCsi8uswdNwmYF_15unsigned_varint2io9ReadErrorE4from:
   78|      5|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   79|      5|        use unsigned_varint::io::ReadError::*;
   80|      5|        match err {
   81|      1|            Io(err) => Self::Io(err),
   82|      4|            _ => Self::VarIntDecodeError,
   83|       |        }
   84|      5|    }
_RNvXs_NtCs75BWONeJyCe_3cid5errorNtB4_5ErrorNtNtCsbBucQyKleSJ_4core3fmt7Display3fmt:
   39|     33|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   40|       |        use self::Error::*;
   41|     33|        let error = match self {
   42|      0|            UnknownCodec => "Unknown codec",
   43|      0|            InputTooShort => "Input too short",
   44|     23|            ParsingError => "Failed to parse multihash",
   45|      2|            InvalidCidVersion => "Unrecognized CID version",
   46|      1|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   47|      1|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   48|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   49|      4|            VarIntDecodeError => "Failed to decode unsigned varint format",
   50|      2|            Io(err) => return write!(f, "{}", err),
   51|       |        };
   52|       |
   53|     31|        f.write_str(error)
   54|     33|    }
_RNvXs1_NtCs75BWONeJyCe_3cid5errorNtB5_5ErrorINtNtCsbBucQyKleSJ_4core7convert4FromNtNtCslNPQyuBlAi5_9multihash5error5ErrorE4from:
   65|     23|    fn from(_: multihash::Error) -> Error {
   66|     23|        Error::ParsingError
   67|     23|    }

_RINvXs0_NtCs75BWONeJyCe_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   79|    246|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    246|    where
   81|    246|        D: de::Deserializer<'de>,
   82|    246|    {
   83|    246|        /// Main visitor to deserialize a CID.
   84|    246|        ///
   85|    246|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    246|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    246|        /// to bytes.
   88|    246|        struct MainEntryVisitor<const SIZE: usize>;
   89|    246|
   90|    246|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    246|            type Value = CidGeneric<SIZE>;
   92|    246|
   93|    246|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    246|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    246|            }
   96|    246|
   97|    246|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    246|            where
   99|    246|                D: de::Deserializer<'de>,
  100|    246|            {
  101|    246|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    246|            }
  103|    246|        }
  104|    246|
  105|    246|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    246|    }
_RINvXNvXs0_NtCs75BWONeJyCe_3cid5serdeINtNtBb_3cid3CidKpENtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   97|    232|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    232|            where
   99|    232|                D: de::Deserializer<'de>,
  100|    232|            {
  101|    232|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    232|            }
_RINvXNtCs75BWONeJyCe_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsfeRzglKx8o0_5serde3ser9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   29|    180|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    180|    where
   31|    180|        S: ser::Serializer,
   32|    180|    {
   33|    180|        let value = ByteBuf::from(self.to_bytes());
   34|    180|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    180|    }
_RINvXs_NtCs75BWONeJyCe_3cid5serdeNtB5_17BytesToCidVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor11visit_bytesINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
   48|    219|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    219|    where
   50|    219|        E: de::Error,
   51|    219|    {
   52|    219|        CidGeneric::<SIZE>::try_from(value)
   53|    219|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    219|    }
_RNCINvXs_NtCs75BWONeJyCe_3cid5serdeNtB7_17BytesToCidVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor11visit_bytesINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEE0CskLEm2Dfx7Ph_11cbor_decode:
   53|     33|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))

_RNvXs_NtCs75BWONeJyCe_3cid7versionNtB4_7VersionINtNtCsbBucQyKleSJ_4core7convert7TryFromyE8try_from:
   34|    194|    fn try_from(raw: u64) -> Result<Self> {
   35|    194|        match raw {
   36|      4|            0 => Ok(Self::V0),
   37|    188|            1 => Ok(Self::V1),
   38|      2|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    194|    }
_RNvXs0_NtCs75BWONeJyCe_3cid7versionyINtNtCsbBucQyKleSJ_4core7convert4FromNtB5_7VersionE4from:
   44|    162|    fn from(ver: Version) -> u64 {
   45|    162|        match ver {
   46|      0|            Version::V0 => 0,
   47|    162|            Version::V1 => 1,
   48|       |        }
   49|    162|    }

_RINvMNtCs5QpmUDTOccT_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
   60|      9|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|      9|        ByteBuf {
   62|      9|            bytes: bytes.into(),
   63|      9|        }
   64|      9|    }
_RINvXsd_NtCs5QpmUDTOccT_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor14visit_byte_bufINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
  210|      9|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<ByteBuf, E>
  211|      9|    where
  212|      9|        E: Error,
  213|      9|    {
  214|      9|        Ok(ByteBuf::from(v))
  215|      9|    }
_RINvMNtCs5QpmUDTOccT_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECskLEm2Dfx7Ph_11cbor_decode:
   60|    676|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    676|        ByteBuf {
   62|    676|            bytes: bytes.into(),
   63|    676|        }
   64|    676|    }
_RINvXsd_NtCs5QpmUDTOccT_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor11visit_bytesINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
  203|    676|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    676|    where
  205|    676|        E: Error,
  206|    676|    {
  207|    676|        Ok(ByteBuf::from(v))
  208|    676|    }
_RINvXse_NtCs5QpmUDTOccT_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  219|    810|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    810|    where
  221|    810|        D: Deserializer<'de>,
  222|    810|    {
  223|    810|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    810|    }
_RNvMNtCs5QpmUDTOccT_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    685|    pub fn into_vec(self) -> Vec<u8> {
   68|    685|        self.bytes
   69|    685|    }

_RINvXNvXs2_NtCs5QpmUDTOccT_14cs_serde_bytes2deINtNtCs9VBnAT6y2aj_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor14visit_byte_bufINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
   99|    137|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|    137|            where
  101|    137|                E: Error,
  102|    137|            {
  103|    137|                Ok(Cow::Owned(v))
  104|    137|            }
_RINvXNvXs2_NtCs5QpmUDTOccT_14cs_serde_bytes2deINtNtCs9VBnAT6y2aj_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor20visit_borrowed_bytesINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
   85|  1.75k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  1.75k|            where
   87|  1.75k|                E: Error,
   88|  1.75k|            {
   89|  1.75k|                Ok(Cow::Borrowed(v))
   90|  1.75k|            }
_RINvXs1_NtCs5QpmUDTOccT_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   61|    810|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    810|    where
   63|    810|        D: Deserializer<'de>,
   64|    810|    {
   65|    810|        // Via the serde::Deserialize impl for ByteBuf.
   66|    810|        serde::Deserialize::deserialize(deserializer)
   67|    810|    }
_RINvXs2_NtCs5QpmUDTOccT_14cs_serde_bytes2deINtNtCs9VBnAT6y2aj_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   72|  1.96k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  1.96k|    where
   74|  1.96k|        D: Deserializer<'de>,
   75|  1.96k|    {
   76|  1.96k|        struct CowVisitor;
   77|  1.96k|
   78|  1.96k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  1.96k|            type Value = Cow<'de, [u8]>;
   80|  1.96k|
   81|  1.96k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  1.96k|                formatter.write_str("a byte array")
   83|  1.96k|            }
   84|  1.96k|
   85|  1.96k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  1.96k|            where
   87|  1.96k|                E: Error,
   88|  1.96k|            {
   89|  1.96k|                Ok(Cow::Borrowed(v))
   90|  1.96k|            }
   91|  1.96k|
   92|  1.96k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  1.96k|            where
   94|  1.96k|                E: Error,
   95|  1.96k|            {
   96|  1.96k|                Ok(Cow::Owned(v.to_vec()))
   97|  1.96k|            }
   98|  1.96k|
   99|  1.96k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  1.96k|            where
  101|  1.96k|                E: Error,
  102|  1.96k|            {
  103|  1.96k|                Ok(Cow::Owned(v))
  104|  1.96k|            }
  105|  1.96k|        }
  106|  1.96k|
  107|  1.96k|        deserializer.deserialize_bytes(CowVisitor)
  108|  1.96k|    }
_RINvXs_NtCs5QpmUDTOccT_14cs_serde_bytes2deINtNtCs9VBnAT6y2aj_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   42|    810|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    810|    where
   44|    810|        D: Deserializer<'de>,
   45|    810|    {
   46|    810|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    810|    }

_RINvCs5QpmUDTOccT_14cs_serde_bytes9serializeRINtNtCs9VBnAT6y2aj_5alloc3vec3VechEQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   77|    180|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    180|where
   79|    180|    T: ?Sized + Serialize,
   80|    180|    S: Serializer,
   81|    180|{
   82|    180|    Serialize::serialize(bytes, serializer)
   83|    180|}
_RINvCs5QpmUDTOccT_14cs_serde_bytes11deserializeINtNtCs9VBnAT6y2aj_5alloc6borrow3CowShEQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  103|    312|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    312|where
  105|    312|    T: Deserialize<'de>,
  106|    312|    D: Deserializer<'de>,
  107|    312|{
  108|    312|    Deserialize::deserialize(deserializer)
  109|    312|}
_RINvCs5QpmUDTOccT_14cs_serde_bytes11deserializeINtNtCs9VBnAT6y2aj_5alloc3vec3VechEQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  103|    810|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    810|where
  105|    810|    T: Deserialize<'de>,
  106|    810|    D: Deserializer<'de>,
  107|    810|{
  108|    810|    Deserialize::deserialize(deserializer)
  109|    810|}
_RINvCs5QpmUDTOccT_14cs_serde_bytes9serializeINtNtCs9VBnAT6y2aj_5alloc3vec3VechEQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   77|    360|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    360|where
   79|    360|    T: ?Sized + Serialize,
   80|    360|    S: Serializer,
   81|    360|{
   82|    360|    Serialize::serialize(bytes, serializer)
   83|    360|}

_RINvXs4_NtCs5QpmUDTOccT_14cs_serde_bytes3serRINtNtCs9VBnAT6y2aj_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   88|    180|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    180|    where
   90|    180|        S: Serializer,
   91|    180|    {
   92|    180|        (**self).serialize(serializer)
   93|    180|    }
_RINvXs_NtCs5QpmUDTOccT_14cs_serde_bytes3serINtNtCs9VBnAT6y2aj_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   37|    936|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|    936|    where
   39|    936|        S: Serializer,
   40|    936|    {
   41|    936|        serializer.serialize_bytes(self)
   42|    936|    }

rust_fuzzer_test_input:
  141|    470|        pub extern "C" fn rust_fuzzer_test_input($bytes: &[u8]) {
  142|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  143|       |            // formatting of the input to that file. This is only intended for
  144|       |            // `cargo fuzz`'s use!
  145|       |
  146|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  147|    470|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  148|       |                use std::io::Write;
  149|      0|                let mut file = std::fs::File::create(path)
  150|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  151|      0|                writeln!(&mut file, "{:?}", $bytes)
  152|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  153|      0|                return;
  154|    470|            }
  155|       |
  156|       |            $body
  157|    470|        }
LLVMFuzzerTestOneInput:
   27|    470|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    470|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    470|    });
   32|    470|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    470|    }
   37|    470|    0
   38|    470|}
_RNCNvCs1m4m9pCJCKP_13libfuzzer_sys15test_input_wrap0B3_:
   28|    470|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    470|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    470|        rust_fuzzer_test_input(data_slice);
   31|    470|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs1_NtCslNPQyuBlAi5_9multihash5errorNtB5_5ErrorINtNtCsbBucQyKleSJ_4core7convert4FromNtNtCsi8uswdNwmYF_15unsigned_varint2io9ReadErrorE4from:
   44|     15|    fn from(err: ReadError) -> Self {
   45|     15|        match err {
   46|     11|            ReadError::Io(err) => Self::Io(err),
   47|      4|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     15|    }
_RNvXs0_NtCslNPQyuBlAi5_9multihash5errorNtB5_5ErrorINtNtCsbBucQyKleSJ_4core7convert4FromNtNtNtCsgh5bzdpzPR5_3std2io5error5ErrorE4from:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }

_RINvMs_NtCslNPQyuBlAi5_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
  163|    162|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    162|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    162|    }
_RINvMs_NtCslNPQyuBlAi5_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECskLEm2Dfx7Ph_11cbor_decode:
  135|    192|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    192|    where
  137|    192|        Self: Sized,
  138|    192|    {
  139|    192|        let (code, size, digest) = read_multihash(r)?;
  140|    169|        Ok(Self { code, size, digest })
  141|    192|    }
_RINvNtCslNPQyuBlAi5_9multihash9multihash15write_multihashQINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
  276|     18|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     18|where
  278|     18|    W: io::Write,
  279|     18|{
  280|     18|    let mut code_buf = varint_encode::u64_buffer();
  281|     18|    let code = varint_encode::u64(code, &mut code_buf);
  282|     18|
  283|     18|    let mut size_buf = varint_encode::u8_buffer();
  284|     18|    let size = varint_encode::u8(size, &mut size_buf);
  285|     18|
  286|     18|    w.write_all(code)?;
  287|     18|    w.write_all(size)?;
  288|     18|    w.write_all(digest)?;
  289|     18|    Ok(())
  290|     18|}
_RNvMs_NtCslNPQyuBlAi5_9multihash9multihashINtB4_9MultihashKj40_E4sizeCskLEm2Dfx7Ph_11cbor_decode:
  125|    180|    pub const fn size(&self) -> u8 {
  126|    180|        self.size
  127|    180|    }
_RINvMs_NtCslNPQyuBlAi5_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
  163|     18|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     18|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     18|    }
_RNvMs_NtCslNPQyuBlAi5_9multihash9multihashINtB4_9MultihashKj40_E4codeCskLEm2Dfx7Ph_11cbor_decode:
  120|    200|    pub const fn code(&self) -> u64 {
  121|    200|        self.code
  122|    200|    }
_RINvNtCslNPQyuBlAi5_9multihash9multihash14read_multihashQRShKj40_ECskLEm2Dfx7Ph_11cbor_decode:
  298|    192|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    192|where
  300|    192|    R: io::Read,
  301|    192|{
  302|    192|    let code = read_u64(&mut r)?;
  303|    188|    let size = read_u64(&mut r)?;
  304|       |
  305|    177|    if size > S as u64 || size > u8::MAX as u64 {
  306|      7|        return Err(Error::InvalidSize(size));
  307|    170|    }
  308|    170|
  309|    170|    let mut digest = [0; S];
  310|    170|    r.read_exact(&mut digest[..size as usize])?;
  311|    169|    Ok((code, size as u8, digest))
  312|    192|}
_RNvMs_NtCslNPQyuBlAi5_9multihash9multihashINtB4_9MultihashKj40_E4wrapCskLEm2Dfx7Ph_11cbor_decode:
  101|     19|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     19|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     19|        }
  105|     19|        let size = input_digest.len();
  106|     19|        let mut digest = [0; S];
  107|     19|        let mut i = 0;
  108|    627|        while i < size {
  109|    608|            digest[i] = input_digest[i];
  110|    608|            i += 1;
  111|    608|        }
  112|     19|        Ok(Self {
  113|     19|            code,
  114|     19|            size: size as u8,
  115|     19|            digest,
  116|     19|        })
  117|     19|    }
_RINvNtCslNPQyuBlAi5_9multihash9multihash15write_multihashQQINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
  276|    162|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    162|where
  278|    162|    W: io::Write,
  279|    162|{
  280|    162|    let mut code_buf = varint_encode::u64_buffer();
  281|    162|    let code = varint_encode::u64(code, &mut code_buf);
  282|    162|
  283|    162|    let mut size_buf = varint_encode::u8_buffer();
  284|    162|    let size = varint_encode::u8(size, &mut size_buf);
  285|    162|
  286|    162|    w.write_all(code)?;
  287|    162|    w.write_all(size)?;
  288|    162|    w.write_all(digest)?;
  289|    162|    Ok(())
  290|    162|}
_RNvMs_NtCslNPQyuBlAi5_9multihash9multihashINtB4_9MultihashKj40_E6digestCskLEm2Dfx7Ph_11cbor_decode:
  130|    180|    pub fn digest(&self) -> &[u8] {
  131|    180|        &self.digest[..self.size as usize]
  132|    180|    }

_RNvYNtNtNtCs2JReJWUoxYc_10fvm_shared7address8protocol8ProtocolNtNtCscMhtpJLCyCP_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  1.57k|    fn from_u8(n: u8) -> Option<Self> {
  468|  1.57k|        FromPrimitive::from_u64(From::from(n))
  469|  1.57k|    }

_RNvMs2_NtCs3pUzqYChJ3J_9once_cell3impINtB5_8OnceCellNtNtCs9VBnAT6y2aj_5alloc6string6StringE14is_initializedCskLEm2Dfx7Ph_11cbor_decode:
   62|    470|    pub(crate) fn is_initialized(&self) -> bool {
   63|    470|        // An `Acquire` load is enough because that makes all the initialization
   64|    470|        // operations visible to us, and, this being a fast path, weaker
   65|    470|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    470|        // `SeqCst` operations on the slow path.
   67|    470|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    470|    }

_RNvMs4_NtCs3pUzqYChJ3J_9once_cell4syncINtB5_8OnceCellNtNtCs9VBnAT6y2aj_5alloc6string6StringE3getCskLEm2Dfx7Ph_11cbor_decode:
  869|    470|        pub fn get(&self) -> Option<&T> {
  870|    470|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    470|                None
  875|       |            }
  876|    470|        }

_RNvXs4_CsoisWZQQuwa_10scopeguardINtB5_10ScopeGuardQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEFBM_EuENtNtNtCsbBucQyKleSJ_4core3ops5deref8DerefMut9deref_mutCskLEm2Dfx7Ph_11cbor_decode:
  443|    949|    fn deref_mut(&mut self) -> &mut T {
  444|    949|        &mut *self.value
  445|    949|    }
_RNvMs1_CsoisWZQQuwa_10scopeguardINtB5_10ScopeGuardQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEFBM_EuE13with_strategyCskLEm2Dfx7Ph_11cbor_decode:
  317|    949|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    949|        ScopeGuard {
  319|    949|            value: ManuallyDrop::new(v),
  320|    949|            dropfn: ManuallyDrop::new(dropfn),
  321|    949|            strategy: PhantomData,
  322|    949|        }
  323|    949|    }
_RNvXs5_CsoisWZQQuwa_10scopeguardINtB5_10ScopeGuardQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEFBM_EuENtNtNtCsbBucQyKleSJ_4core3ops4drop4Drop4dropCskLEm2Dfx7Ph_11cbor_decode:
  452|    949|    fn drop(&mut self) {
  453|    949|        // This is OK because the fields are `ManuallyDrop`s
  454|    949|        // which will not be dropped by the compiler.
  455|    949|        let (value, dropfn) = unsafe {
  456|    949|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    949|        };
  458|    949|        if S::should_run() {
  459|    949|            dropfn(value);
  460|    949|        }
  461|    949|    }
_RNvXCsoisWZQQuwa_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    949|    fn should_run() -> bool { true }
_RINvCsoisWZQQuwa_10scopeguard5guardQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEFBx_EuECskLEm2Dfx7Ph_11cbor_decode:
  367|    949|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    949|    where F: FnOnce(T)
  369|    949|{
  370|    949|    ScopeGuard::with_strategy(v, dropfn)
  371|    949|}

_RINvXsh_NtNtCsfeRzglKx8o0_5serde2de5implsINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
 1014|    389|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    389|    where
 1016|    389|        D: Deserializer<'de>,
 1017|    389|    {
 1018|    389|        struct VecVisitor<T> {
 1019|    389|            marker: PhantomData<T>,
 1020|    389|        }
 1021|    389|
 1022|    389|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    389|        where
 1024|    389|            T: Deserialize<'de>,
 1025|    389|        {
 1026|    389|            type Value = Vec<T>;
 1027|    389|
 1028|    389|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    389|                formatter.write_str("a sequence")
 1030|    389|            }
 1031|    389|
 1032|    389|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    389|            where
 1034|    389|                A: SeqAccess<'de>,
 1035|    389|            {
 1036|    389|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    389|
 1038|    389|                while let Some(value) = try!(seq.next_element()) {
 1039|    389|                    values.push(value);
 1040|    389|                }
 1041|    389|
 1042|    389|                Ok(values)
 1043|    389|            }
 1044|    389|        }
 1045|    389|
 1046|    389|        let visitor = VecVisitor {
 1047|    389|            marker: PhantomData,
 1048|    389|        };
 1049|    389|        deserializer.deserialize_seq(visitor)
 1050|    389|    }
_RINvXsV_NtNtCsfeRzglKx8o0_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  113|    439|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    439|            where
  115|    439|                D: Deserializer<'de>,
  116|    439|            {
  117|    439|                struct PrimitiveVisitor;
  118|    439|
  119|    439|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    439|                    type Value = $primitive;
  121|    439|
  122|    439|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    439|                        formatter.write_str(stringify!($primitive))
  124|    439|                    }
  125|    439|
  126|    439|                    $($($method!($val : $visit);)*)*
  127|    439|                }
  128|    439|
  129|    439|                deserializer.$deserialize(PrimitiveVisitor)
  130|    439|            }
_RINvXNvXsh_NtNtCsfeRzglKx8o0_5serde2de5implsINtNtCs9VBnAT6y2aj_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
 1032|    386|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    386|            where
 1034|    386|                A: SeqAccess<'de>,
 1035|    386|            {
 1036|    386|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  1.54k|                while let Some(value) = try!(seq.next_element()) {
 1039|  1.16k|                    values.push(value);
 1040|  1.16k|                }
 1041|       |
 1042|    312|                Ok(values)
 1043|    386|            }
_RINvXNvXsV_NtNtCsfeRzglKx8o0_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
  138|    426|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    426|        where
  140|    426|            E: Error,
  141|    426|        {
  142|    426|            Ok(v)
  143|    426|        }

_RINvYINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess12next_elementNtCs5my6oOLXmvY_17fvm_ipld_bitfield8BitFieldECskLEm2Dfx7Ph_11cbor_decode:
 1723|    312|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    312|    where
 1725|    312|        T: Deserialize<'de>,
 1726|    312|    {
 1727|    312|        self.next_element_seed(PhantomData)
 1728|    312|    }
_RINvYNtNtCs5QpmUDTOccT_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor20visit_borrowed_bytesINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
 1563|    676|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    676|    where
 1565|    676|        E: Error,
 1566|    676|    {
 1567|    676|        self.visit_bytes(v)
 1568|    676|    }
_RINvYINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess12next_elementINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEECskLEm2Dfx7Ph_11cbor_decode:
 1723|    389|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    389|    where
 1725|    389|        T: Deserialize<'de>,
 1726|    389|    {
 1727|    389|        self.next_element_seed(PhantomData)
 1728|    389|    }
_RINvXs3_NtCsfeRzglKx8o0_5serde2deINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  783|    263|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    263|    where
  785|    263|        D: Deserializer<'de>,
  786|    263|    {
  787|    263|        T::deserialize(deserializer)
  788|    263|    }
_RINvYINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess12next_elementINtNtCs75BWONeJyCe_3cid3cid3CidKj40_EECskLEm2Dfx7Ph_11cbor_decode:
 1723|    246|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    246|    where
 1725|    246|        T: Deserialize<'de>,
 1726|    246|    {
 1727|    246|        self.next_element_seed(PhantomData)
 1728|    246|    }
_RINvXs3_NtCsfeRzglKx8o0_5serde2deINtNtCsbBucQyKleSJ_4core6marker11PhantomDataINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  783|    389|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    389|    where
  785|    389|        D: Deserializer<'de>,
  786|    389|    {
  787|    389|        T::deserialize(deserializer)
  788|    389|    }
_RINvXs3_NtCsfeRzglKx8o0_5serde2deINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtCs5my6oOLXmvY_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  783|    312|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    312|    where
  785|    312|        D: Deserializer<'de>,
  786|    312|    {
  787|    312|        T::deserialize(deserializer)
  788|    312|    }
_RINvYINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess12next_elementNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECskLEm2Dfx7Ph_11cbor_decode:
 1723|    263|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    263|    where
 1725|    263|        T: Deserialize<'de>,
 1726|    263|    {
 1727|    263|        self.next_element_seed(PhantomData)
 1728|    263|    }
_RINvYNtNtCs75BWONeJyCe_3cid5serde17BytesToCidVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor20visit_borrowed_bytesINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
 1563|    217|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    217|    where
 1565|    217|        E: Error,
 1566|    217|    {
 1567|    217|        self.visit_bytes(v)
 1568|    217|    }
_RINvXs3_NtCsfeRzglKx8o0_5serde2deINtNtCsbBucQyKleSJ_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  783|    439|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    439|    where
  785|    439|        D: Deserializer<'de>,
  786|    439|    {
  787|    439|        T::deserialize(deserializer)
  788|    439|    }
_RINvXs3_NtCsfeRzglKx8o0_5serde2deINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  783|    547|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    547|    where
  785|    547|        D: Deserializer<'de>,
  786|    547|    {
  787|    547|        T::deserialize(deserializer)
  788|    547|    }
_RINvYINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECskLEm2Dfx7Ph_11cbor_decode:
 1723|    547|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    547|    where
 1725|    547|        T: Deserialize<'de>,
 1726|    547|    {
 1727|    547|        self.next_element_seed(PhantomData)
 1728|    547|    }
_RINvYNtNtCs75BWONeJyCe_3cid5serde17BytesToCidVisitorNtNtCsfeRzglKx8o0_5serde2de7Visitor14visit_byte_bufINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEECskLEm2Dfx7Ph_11cbor_decode:
 1587|      2|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1588|      2|    where
 1589|      2|        E: Error,
 1590|      2|    {
 1591|      2|        self.visit_bytes(&v)
 1592|      2|    }
_RINvXs3_NtCsfeRzglKx8o0_5serde2deINtNtCsbBucQyKleSJ_4core6marker11PhantomDataINtNtCs75BWONeJyCe_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  783|    246|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    246|    where
  785|    246|        D: Deserializer<'de>,
  786|    246|    {
  787|    246|        T::deserialize(deserializer)
  788|    246|    }
_RINvYINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess12next_elementNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressECskLEm2Dfx7Ph_11cbor_decode:
 1723|  1.97k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  1.97k|    where
 1725|  1.97k|        T: Deserialize<'de>,
 1726|  1.97k|    {
 1727|  1.97k|        self.next_element_seed(PhantomData)
 1728|  1.97k|    }
_RINvXs3_NtCsfeRzglKx8o0_5serde2deINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  783|  1.65k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  1.65k|    where
  785|  1.65k|        D: Deserializer<'de>,
  786|  1.65k|    {
  787|  1.65k|        T::deserialize(deserializer)
  788|  1.65k|    }
_RINvYINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess12next_elementyECskLEm2Dfx7Ph_11cbor_decode:
 1723|    439|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    439|    where
 1725|    439|        T: Deserialize<'de>,
 1726|    439|    {
 1727|    439|        self.next_element_seed(PhantomData)
 1728|    439|    }

_RNvNtNtCsfeRzglKx8o0_5serde9___private9size_hint8cautiousCskLEm2Dfx7Ph_11cbor_decode:
   12|    386|pub fn cautious(hint: Option<usize>) -> usize {
   13|    386|    cmp::min(hint.unwrap_or(0), 4096)
   14|    386|}

_RINvXs1E_NtNtCsfeRzglKx8o0_5serde3ser5implsRNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  386|    396|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    396|            where
  388|    396|                S: Serializer,
  389|    396|            {
  390|    396|                (**self).serialize(serializer)
  391|    396|            }
_RINvXsE_NtNtCsfeRzglKx8o0_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   11|    180|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    180|            where
   13|    180|                S: Serializer,
   14|    180|            {
   15|    180|                serializer.$method(*self $($cast)*)
   16|    180|            }
_RINvXs1E_NtNtCsfeRzglKx8o0_5serde3ser5implsRNtCs5my6oOLXmvY_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  386|    180|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    180|            where
  388|    180|                S: Serializer,
  389|    180|            {
  390|    180|                (**self).serialize(serializer)
  391|    180|            }
_RINvXs1k_NtNtCsfeRzglKx8o0_5serde3ser5implsINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  194|    180|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    180|            where
  196|    180|                S: Serializer,
  197|    180|            {
  198|    180|                serializer.collect_seq(self)
  199|    180|            }
_RINvXs1E_NtNtCsfeRzglKx8o0_5serde3ser5implsRNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  386|    180|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    180|            where
  388|    180|                S: Serializer,
  389|    180|            {
  390|    180|                (**self).serialize(serializer)
  391|    180|            }
_RINvXs1E_NtNtCsfeRzglKx8o0_5serde3ser5implsRINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  386|    180|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    180|            where
  388|    180|                S: Serializer,
  389|    180|            {
  390|    180|                (**self).serialize(serializer)
  391|    180|            }
_RINvXs1E_NtNtCsfeRzglKx8o0_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  386|    180|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    180|            where
  388|    180|                S: Serializer,
  389|    180|            {
  390|    180|                (**self).serialize(serializer)
  391|    180|            }
_RINvXs1E_NtNtCsfeRzglKx8o0_5serde3ser5implsRINtNtCs75BWONeJyCe_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  386|    180|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    180|            where
  388|    180|                S: Serializer,
  389|    180|            {
  390|    180|                (**self).serialize(serializer)
  391|    180|            }

_RINvNtCsfeRzglKx8o0_5serde3ser17iterator_len_hintINtNtNtCsbBucQyKleSJ_4core5slice4iter4IterNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEECskLEm2Dfx7Ph_11cbor_decode:
 1982|    180|    match iter.size_hint() {
 1983|    180|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    180|}
_RNCINvYQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer11collect_seqRINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEE0CskLEm2Dfx7Ph_11cbor_decode:
 1286|    216|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer11collect_seqRINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEECskLEm2Dfx7Ph_11cbor_decode:
 1275|    180|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    180|    where
 1277|    180|        I: IntoIterator,
 1278|    180|        <I as IntoIterator>::Item: Serialize,
 1279|    180|    {
 1280|    180|        let iter = iter.into_iter();
 1281|    180|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    180|            let mut iter = iter;
 1286|    180|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    180|        serializer.end()
 1297|    180|    }

_RINvXsc_NtCsiOYVeQThqiI_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  186|    180|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    180|    where
  188|    180|        S: Serializer,
  189|    180|    {
  190|    180|        serializer.serialize_bytes(&self.bytes)
  191|    180|    }
_RINvMNtCsiOYVeQThqiI_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs9VBnAT6y2aj_5alloc3vec3VechEECskLEm2Dfx7Ph_11cbor_decode:
   60|    180|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    180|        ByteBuf {
   62|    180|            bytes: bytes.into(),
   63|    180|        }
   64|    180|    }

_RINvNtCsdfxWOBmsVHA_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderECskLEm2Dfx7Ph_11cbor_decode:
   26|    926|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    926|    let buf = match reader.fill(1)? {
   28|    926|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    926|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    737|    Ok(byte)
   33|    926|}

_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer17deserialize_bytesNtNtCs5QpmUDTOccT_14cs_serde_bytes7bytebuf14ByteBufVisitorECskLEm2Dfx7Ph_11cbor_decode:
  228|    810|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    810|    where
  230|    810|        V: Visitor<'de>,
  231|    810|    {
  232|    810|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    676|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      9|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    810|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess17next_element_seedINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtCs5my6oOLXmvY_17fvm_ipld_bitfield8BitFieldEECskLEm2Dfx7Ph_11cbor_decode:
  484|    312|        if let Some(len) = self.len.as_mut() {
  485|    312|            if *len > 0 {
  486|    312|                *len -= 1;
  487|    312|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    312|    }
_RINvMs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs75BWONeJyCe_3cid5serdeINtNtB2l_3cid3CidKpENtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECskLEm2Dfx7Ph_11cbor_decode:
  113|    246|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    246|    where
  115|    246|        V: Visitor<'de>,
  116|    246|    {
  117|    246|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    239|        match tag.0 {
  120|    232|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      7|            _ => Err(DecodeError::TypeMismatch {
  122|      7|                name: "CBOR tag",
  123|      7|                byte: tag.0 as u8,
  124|      7|            }),
  125|       |        }
  126|    246|    }
_RNvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess9size_hintCskLEm2Dfx7Ph_11cbor_decode:
  500|    386|    fn size_hint(&self) -> Option<usize> {
  501|    386|        self.len
  502|    386|    }
_RNvMs1_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderE5tupleCskLEm2Dfx7Ph_11cbor_decode:
  443|    560|    pub fn tuple(
  444|    560|        de: &'a mut Deserializer<R>,
  445|    560|        len: usize,
  446|    560|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    560|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    553|        if array_start.0 == Some(len) {
  450|    547|            Ok(Accessor {
  451|    547|                de,
  452|    547|                len: array_start.0,
  453|    547|            })
  454|       |        } else {
  455|      6|            Err(DecodeError::RequireLength {
  456|      6|                name: "tuple",
  457|      6|                expect: len,
  458|      6|                value: array_start.0.unwrap_or(0),
  459|      6|            })
  460|       |        }
  461|    560|    }
_RNCNvMs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderE8try_step0CskLEm2Dfx7Ph_11cbor_decode:
  106|    949|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs75BWONeJyCe_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECskLEm2Dfx7Ph_11cbor_decode:
  318|    246|    fn deserialize_newtype_struct<V>(
  319|    246|        self,
  320|    246|        name: &'static str,
  321|    246|        visitor: V,
  322|    246|    ) -> Result<V::Value, Self::Error>
  323|    246|    where
  324|    246|        V: Visitor<'de>,
  325|    246|    {
  326|    246|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    246|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    246|    }
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs5QpmUDTOccT_14cs_serde_bytes2deINtNtCs9VBnAT6y2aj_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECskLEm2Dfx7Ph_11cbor_decode:
  228|  1.96k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  1.96k|    where
  230|  1.96k|        V: Visitor<'de>,
  231|  1.96k|    {
  232|  1.96k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  1.75k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|    137|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  1.96k|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess17next_element_seedINtNtCsbBucQyKleSJ_4core6marker11PhantomDataINtNtCs75BWONeJyCe_3cid3cid3CidKj40_EEECskLEm2Dfx7Ph_11cbor_decode:
  484|    246|        if let Some(len) = self.len.as_mut() {
  485|    246|            if *len > 0 {
  486|    246|                *len -= 1;
  487|    246|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    246|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess17next_element_seedINtNtCsbBucQyKleSJ_4core6marker11PhantomDatayEECskLEm2Dfx7Ph_11cbor_decode:
  484|    439|        if let Some(len) = self.len.as_mut() {
  485|    439|            if *len > 0 {
  486|    439|                *len -= 1;
  487|    439|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    439|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess17next_element_seedINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECskLEm2Dfx7Ph_11cbor_decode:
  484|    547|        if let Some(len) = self.len.as_mut() {
  485|    547|            if *len > 0 {
  486|    547|                *len -= 1;
  487|    547|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    547|    }
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECskLEm2Dfx7Ph_11cbor_decode:
  354|    560|    fn deserialize_tuple_struct<V>(
  355|    560|        self,
  356|    560|        _name: &'static str,
  357|    560|        len: usize,
  358|    560|        visitor: V,
  359|    560|    ) -> Result<V::Value, Self::Error>
  360|    560|    where
  361|    560|        V: Visitor<'de>,
  362|    560|    {
  363|    560|        self.deserialize_tuple(len, visitor)
  364|    560|    }
_RNvMs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderE8try_stepCskLEm2Dfx7Ph_11cbor_decode:
  101|    949|    fn try_step<'a>(
  102|    949|        &'a mut self,
  103|    949|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    949|    {
  105|    949|        if self.reader.step_in() {
  106|    949|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    949|    }
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer20deserialize_byte_bufNtNtCs5QpmUDTOccT_14cs_serde_bytes7bytebuf14ByteBufVisitorECskLEm2Dfx7Ph_11cbor_decode:
  239|    810|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    810|    where
  241|    810|        V: Visitor<'de>,
  242|    810|    {
  243|    810|        self.deserialize_bytes(visitor)
  244|    810|    }
_RINvXs7_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer17deserialize_bytesNtNtCs75BWONeJyCe_3cid5serde17BytesToCidVisitorECskLEm2Dfx7Ph_11cbor_decode:
  646|    232|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    232|        let byte = peek_one(&mut self.0.reader)?;
  648|    231|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    229|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    220|                    Cow::Borrowed(buf) => {
  653|    220|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      3|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    217|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      6|                    Cow::Owned(mut buf) => {
  660|      6|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      4|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      2|                            buf.remove(0);
  664|      2|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      2|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    232|    }
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECskLEm2Dfx7Ph_11cbor_decode:
  142|    439|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    439|        where V: Visitor<'de>
  144|    439|        {
  145|    439|            let value = <$t>::decode(&mut self.reader)?;
  146|    426|            visitor.$visit(value)
  147|    439|        }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess17next_element_seedINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEECskLEm2Dfx7Ph_11cbor_decode:
  484|  1.97k|        if let Some(len) = self.len.as_mut() {
  485|  1.46k|            if *len > 0 {
  486|  1.15k|                *len -= 1;
  487|  1.15k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    311|                Ok(None)
  490|       |            }
  491|    508|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|    499|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      1|            self.de.reader.advance(1);
  495|      1|            Ok(None)
  496|       |        }
  497|  1.97k|    }
_RNvMNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderE11from_readerCskLEm2Dfx7Ph_11cbor_decode:
   93|    560|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    560|        Deserializer { reader }
   95|    560|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess17next_element_seedINtNtCsbBucQyKleSJ_4core6marker11PhantomDataNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECskLEm2Dfx7Ph_11cbor_decode:
  484|    263|        if let Some(len) = self.len.as_mut() {
  485|    263|            if *len > 0 {
  486|    263|                *len -= 1;
  487|    263|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    263|    }
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCs9VBnAT6y2aj_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEECskLEm2Dfx7Ph_11cbor_decode:
  334|    389|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    389|    where
  336|    389|        V: Visitor<'de>,
  337|    389|    {
  338|    389|        let mut de = self.try_step()?;
  339|    389|        let seq = Accessor::array(&mut de)?;
  340|    386|        visitor.visit_seq(seq)
  341|    389|    }
_RNvMs1_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderE5arrayCskLEm2Dfx7Ph_11cbor_decode:
  434|    389|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    389|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    386|        Ok(Accessor {
  437|    386|            de,
  438|    386|            len: array_start.0,
  439|    386|        })
  440|    389|    }
_RNvMs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderE3endCskLEm2Dfx7Ph_11cbor_decode:
  131|    186|        match peek_one(&mut self.reader) {
  132|      6|            Ok(_) => Err(DecodeError::TrailingData),
  133|    180|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    186|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de9SeqAccess17next_element_seedINtNtCsbBucQyKleSJ_4core6marker11PhantomDataINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEEECskLEm2Dfx7Ph_11cbor_decode:
  484|    389|        if let Some(len) = self.len.as_mut() {
  485|    389|            if *len > 0 {
  486|    389|                *len -= 1;
  487|    389|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    389|    }
_RINvNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de10from_sliceNtNtCs1FxgGwPB4ZW_11common_fuzz4cbor7PayloadECskLEm2Dfx7Ph_11cbor_decode:
   40|    560|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    560|where
   42|    560|    T: de::Deserialize<'a>,
   43|    560|{
   44|    560|    let reader = SliceReader::new(buf);
   45|    560|    let mut deserializer = Deserializer::from_reader(reader);
   46|    560|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    186|    deserializer.end()?;
   48|    180|    Ok(value)
   49|    560|}
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderENtNtCsfeRzglKx8o0_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECskLEm2Dfx7Ph_11cbor_decode:
  344|    560|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    560|    where
  346|    560|        V: Visitor<'de>,
  347|    560|    {
  348|    560|        let mut de = self.try_step()?;
  349|    560|        let seq = Accessor::tuple(&mut de, len)?;
  350|    547|        visitor.visit_seq(seq)
  351|    560|    }

_RNvXs9_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCskLEm2Dfx7Ph_11cbor_decode:
   70|    380|#[derive(Debug)]
_RINvXs4_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleENtNtCsfeRzglKx8o0_5serde2de5Error6customNtNtCs9VBnAT6y2aj_5alloc6string6StringECskLEm2Dfx7Ph_11cbor_decode:
  134|     33|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     33|        DecodeError::Msg(msg.to_string())
  136|     33|    }
_RINvXs4_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleENtNtCsfeRzglKx8o0_5serde2de5Error6customNtNtNtCs2JReJWUoxYc_10fvm_shared7address6errors5ErrorECskLEm2Dfx7Ph_11cbor_decode:
  134|     33|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     33|        DecodeError::Msg(msg.to_string())
  136|     33|    }
_RINvXs4_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleENtNtCsfeRzglKx8o0_5serde2de5Error6customNtNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus5error5ErrorECskLEm2Dfx7Ph_11cbor_decode:
  134|     43|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     43|        DecodeError::Msg(msg.to_string())
  136|     43|    }
_RNvXs6_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCskLEm2Dfx7Ph_11cbor_decode:
  161|    380|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  162|    380|        fmt::Debug::fmt(self, f)
  163|    380|    }
_RNvXs7_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsbBucQyKleSJ_4core7convert10InfallibleEINtB16_4FromINtNtCs8dP7NWGLpjb_7cbor4ii5error11DecodeErrorB14_EE4fromCskLEm2Dfx7Ph_11cbor_decode:
  167|    234|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  168|    234|        match err {
  169|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  170|    181|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  171|     52|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  172|     52|                DecodeError::Mismatch { expect_major, byte }
  173|       |            }
  174|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  175|      0|                DecodeError::TypeMismatch { name, byte }
  176|       |            }
  177|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  178|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  179|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  180|       |            cbor4ii::DecodeError::RequireLength {
  181|      0|                name,
  182|      0|                expect,
  183|      0|                value,
  184|      0|            } => DecodeError::RequireLength {
  185|      0|                name,
  186|      0|                expect,
  187|      0|                value,
  188|      0|            },
  189|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  190|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  191|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  192|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  193|      0|            _ => DecodeError::Msg(err.to_string()),
  194|       |        }
  195|    234|    }

_RINvNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser6to_vecNtNtCs1FxgGwPB4ZW_11common_fuzz4cbor7PayloadECskLEm2Dfx7Ph_11cbor_decode:
   23|    180|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    180|where
   25|    180|    T: Serialize + ?Sized,
   26|    180|{
   27|    180|    let writer = BufWriter::new(Vec::new());
   28|    180|    let mut serializer = Serializer::new(writer);
   29|    180|    value.serialize(&mut serializer)?;
   30|    180|    Ok(serializer.into_inner().into_inner())
   31|    180|}
_RNvXs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer15serialize_tupleCskLEm2Dfx7Ph_11cbor_decode:
  239|    180|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    180|        Ok(BoundedCollect { ser: self })
  241|    180|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCs1FxgGwPB4ZW_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECskLEm2Dfx7Ph_11cbor_decode:
  403|    180|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    180|        value.serialize(&mut *self.ser)
  405|    180|    }
_RINvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser12SerializeSeq17serialize_elementRNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressECskLEm2Dfx7Ph_11cbor_decode:
  369|    216|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    216|        value.serialize(&mut *self.ser)
  371|    216|    }
_RNvXs0_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser12SerializeSeq3endCskLEm2Dfx7Ph_11cbor_decode:
  374|    180|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    180|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    180|        }
  378|       |
  379|    180|        Ok(())
  380|    180|    }
_RNvXs7_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer15serialize_bytesCskLEm2Dfx7Ph_11cbor_decode:
  550|    180|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    180|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    180|        let prefixed = [&[0x00], value].concat();
  553|    180|        // CIDs are serialized with CBOR tag 42.
  554|    180|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    180|        Ok(())
  556|    180|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCs5my6oOLXmvY_17fvm_ipld_bitfield8BitFieldECskLEm2Dfx7Ph_11cbor_decode:
  403|    180|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    180|        value.serialize(&mut *self.ser)
  405|    180|    }
_RINvXs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer24serialize_newtype_structNtNtCsiOYVeQThqiI_11serde_bytes7bytebuf7ByteBufECskLEm2Dfx7Ph_11cbor_decode:
  199|    180|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    180|        self,
  201|    180|        name: &'static str,
  202|    180|        value: &T,
  203|    180|    ) -> Result<Self::Ok, Self::Error> {
  204|    180|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    180|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    180|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct15serialize_fieldRyECskLEm2Dfx7Ph_11cbor_decode:
  403|    180|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    180|        value.serialize(&mut *self.ser)
  405|    180|    }
_RNvMNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterE10into_innerCskLEm2Dfx7Ph_11cbor_decode:
   56|    180|    pub fn into_inner(self) -> W {
   57|    180|        self.writer
   58|    180|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressECskLEm2Dfx7Ph_11cbor_decode:
  403|    180|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    180|        value.serialize(&mut *self.ser)
  405|    180|    }
_RNvXs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer13serialize_u64CskLEm2Dfx7Ph_11cbor_decode:
  123|    180|        v.encode(&mut self.writer)?;
  124|    180|        Ok(())
  125|    180|    }
_RNvMNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterE3newCskLEm2Dfx7Ph_11cbor_decode:
   51|    180|    pub fn new(writer: W) -> Serializer<W> {
   52|    180|        Serializer { writer }
   53|    180|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECskLEm2Dfx7Ph_11cbor_decode:
  403|    180|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    180|        value.serialize(&mut *self.ser)
  405|    180|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs75BWONeJyCe_3cid3cid3CidKj40_EECskLEm2Dfx7Ph_11cbor_decode:
  403|    180|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    180|        value.serialize(&mut *self.ser)
  405|    180|    }
_RNvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct3endCskLEm2Dfx7Ph_11cbor_decode:
  408|    180|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    180|        Ok(())
  410|    180|    }
_RINvXs2_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs9VBnAT6y2aj_5alloc3vec3VecNtNtCs2JReJWUoxYc_10fvm_shared7address7AddressEECskLEm2Dfx7Ph_11cbor_decode:
  403|    180|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    180|        value.serialize(&mut *self.ser)
  405|    180|    }
_RNvXs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer13serialize_seqCskLEm2Dfx7Ph_11cbor_decode:
  226|    180|        if let Some(len) = len {
  227|    180|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    180|        Ok(Collect {
  232|    180|            bounded: len.is_some(),
  233|    180|            ser: self,
  234|    180|        })
  235|    180|    }
_RNvXs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer15serialize_bytesCskLEm2Dfx7Ph_11cbor_decode:
  160|    936|        types::Bytes(v).encode(&mut self.writer)?;
  161|    936|        Ok(())
  162|    936|    }
_RNvXs_NtCsdfxWOBmsVHA_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterENtNtCsfeRzglKx8o0_5serde3ser10Serializer22serialize_tuple_structCskLEm2Dfx7Ph_11cbor_decode:
  244|    180|    fn serialize_tuple_struct(
  245|    180|        self,
  246|    180|        _name: &'static str,
  247|    180|        len: usize,
  248|    180|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    180|        self.serialize_tuple(len)
  250|    180|    }

_RINvXs_Cshmk5o4rLjib_11serde_tupleINtB5_12DeserializerQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEENtNtCsfeRzglKx8o0_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECskLEm2Dfx7Ph_11cbor_decode:
  353|    560|    fn deserialize_tuple_struct<V>(
  354|    560|        self,
  355|    560|        name: &'static str,
  356|    560|        len: usize,
  357|    560|        visitor: V,
  358|    560|    ) -> Result<V::Value, Self::Error>
  359|    560|    where
  360|    560|        V: serde::de::Visitor<'de>,
  361|    560|    {
  362|    560|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    560|    }
_RNvXCshmk5o4rLjib_11serde_tupleINtB2_10SerializerQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEENtNtCsfeRzglKx8o0_5serde3ser10Serializer22serialize_tuple_structCskLEm2Dfx7Ph_11cbor_decode:
  158|    180|    fn serialize_tuple_struct(
  159|    180|        self,
  160|    180|        name: &'static str,
  161|    180|        len: usize,
  162|    180|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    180|        self.0.serialize_tuple_struct(name, len)
  164|    180|    }

_RNvXNtCs6ivbbv8VyRX_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCs2JReJWUoxYc_10fvm_shared:
    9|      3|    fn as_display(&self) -> Self {
   10|      3|        self
   11|      3|    }

_RNvNtCsi8uswdNwmYF_15unsigned_varint6decode7is_lastCskLEm2Dfx7Ph_11cbor_decode:
   90|  3.55k|pub fn is_last(b: u8) -> bool {
   91|  3.55k|    b & 0x80 == 0
   92|  3.55k|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6decode3u64CskLEm2Dfx7Ph_11cbor_decode:
  122|    802|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    802|    decode!(buf, 9, u64)
  124|    802|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6decode3u64Cs2JReJWUoxYc_10fvm_shared:
  122|    455|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    455|    decode!(buf, 9, u64)
  124|    455|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6decode7is_lastCs2JReJWUoxYc_10fvm_shared:
   90|  2.40k|pub fn is_last(b: u8) -> bool {
   91|  2.40k|    b & 0x80 == 0
   92|  2.40k|}

_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode10u64_bufferCskLEm2Dfx7Ph_11cbor_decode:
  119|  1.32k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.32k|    [0; U64_LEN]
  121|  1.32k|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode3u64CskLEm2Dfx7Ph_11cbor_decode:
   69|    504|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    504|    encode!(number, buf)
   71|    504|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode2u8CskLEm2Dfx7Ph_11cbor_decode:
   45|    180|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    180|    encode!(number, buf)
   47|    180|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode9u8_bufferCskLEm2Dfx7Ph_11cbor_decode:
  101|    180|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    180|    [0; U8_LEN]
  103|    180|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode3u64Cs2JReJWUoxYc_10fvm_shared:
   69|    140|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    140|    encode!(number, buf)
   71|    140|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode10u64_bufferCs2JReJWUoxYc_10fvm_shared:
  119|    140|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    140|    [0; U64_LEN]
  121|    140|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode10u64_bufferCs5my6oOLXmvY_17fvm_ipld_bitfield:
  119|  8.93k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  8.93k|    [0; U64_LEN]
  121|  8.93k|}
_RNvNtCsi8uswdNwmYF_15unsigned_varint6encode3u64Cs5my6oOLXmvY_17fvm_ipld_bitfield:
   69|  8.93k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  8.93k|    encode!(number, buf)
   71|  8.93k|}

_RINvNtCsi8uswdNwmYF_15unsigned_varint2io8read_u64QQRShECskLEm2Dfx7Ph_11cbor_decode:
   31|    817|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    817|                let mut b = encode::$b();
   33|  1.83k|                for i in 0 .. b.len() {
   34|  1.83k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.83k|                    if n == 0 {
   36|     12|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.81k|                    }
   38|  1.81k|                    if decode::is_last(b[i]) {
   39|    802|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.01k|                    }
   41|       |                }
   42|      3|                Err(decode::Error::Overflow.into())
   43|    817|            }
_RNvXs1_NtCsi8uswdNwmYF_15unsigned_varint2ioNtB5_9ReadErrorINtNtCsbBucQyKleSJ_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|      8|    fn from(e: decode::Error) -> Self {
   92|      8|        ReadError::Decode(e)
   93|      8|    }

_RNvXsb_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  438|  8.81k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  8.63k|        while let Some(next) = self.iter.peek() {
  443|  8.46k|            if next.start > range.end {
  444|  8.46k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  8.63k|        Some(range)
  452|  8.81k|    }
_RNvXNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  8.63k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  8.63k|        // the union of a range and an empty range is just that range
  111|  8.63k|        Some(lhs)
  112|  8.63k|    }
_RNvMsa_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    180|    pub fn new(iter: I) -> Self {
  425|    180|        Self {
  426|    180|            iter: Lookahead::new(iter),
  427|    180|        }
  428|    180|    }
_RNvMs5_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    180|    pub fn new(a: A, b: B) -> Self {
  298|    180|        Self(Merge::new(_Combine::new(a, b)))
  299|    180|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  8.81k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.81k|        self.next.as_mut()
  474|  8.81k|    }
_RNvMsa_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    180|    pub fn new(iter: I) -> Self {
  425|    180|        Self {
  426|    180|            iter: Lookahead::new(iter),
  427|    180|        }
  428|    180|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  17.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  17.6k|        self.next.as_mut()
  474|  17.6k|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  8.81k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.81k|        self.next.as_mut()
  474|  8.81k|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    180|    fn new(mut iter: I) -> Self {
  468|    180|        let next = iter.next();
  469|    180|        Self { iter, next }
  470|    180|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  8.63k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.63k|        self.next.as_mut()
  474|  8.63k|    }
_RNvXs9_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  388|  8.81k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  8.81k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  8.81k|    }
_RNCNvXs9_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  8.81k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|    360|    fn new(mut iter: I) -> Self {
  468|    360|        let next = iter.next();
  469|    360|        Self { iter, next }
  470|    360|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    180|    fn new(mut iter: I) -> Self {
  468|    180|        let next = iter.next();
  469|    180|        Self { iter, next }
  470|    180|    }
_RNvXs9_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  388|  8.81k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  8.81k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  8.81k|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    180|    fn new(mut iter: I) -> Self {
  468|    180|        let next = iter.next();
  469|    180|        Self { iter, next }
  470|    180|    }
_RNvXse_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.81k|        let next = self.next.take()?;
  483|  8.63k|        self.next = self.iter.next();
  484|  8.63k|        Some(next)
  485|  8.81k|    }
_RNvXs6_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  311|  8.81k|        self.0.next()
  312|  8.81k|    }
_RNvXse_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  8.63k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.63k|        let next = self.next.take()?;
  483|  8.63k|        self.next = self.iter.next();
  484|  8.63k|        Some(next)
  485|  8.63k|    }
_RNvMs8_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    180|    fn new(lhs: A, rhs: B) -> Self {
  343|    180|        Self {
  344|    180|            lhs: Lookahead::new(lhs),
  345|    180|            rhs: Lookahead::new(rhs),
  346|    180|            combinator: Default::default(),
  347|    180|        }
  348|    180|    }
_RNvXse_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.81k|        let next = self.next.take()?;
  483|  8.63k|        self.next = self.iter.next();
  484|  8.63k|        Some(next)
  485|  8.81k|    }
_RNCNvXs9_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  8.63k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  8.81k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  8.81k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  8.63k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    180|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  8.63k|        if advance_lhs {
  370|  8.63k|            self.lhs.next();
  371|  8.63k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  8.63k|        range
  376|  8.81k|    }
_RNvXsf_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsbBucQyKleSJ_4core7default7Default7defaultB9_:
   86|    180|#[derive(Default)]
_RNvMs8_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    180|    fn new(lhs: A, rhs: B) -> Self {
  343|    180|        Self {
  344|    180|            lhs: Lookahead::new(lhs),
  345|    180|            rhs: Lookahead::new(rhs),
  346|    180|            combinator: Default::default(),
  347|    180|        }
  348|    180|    }
_RNvXsh_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsbBucQyKleSJ_4core7default7Default7defaultB9_:
  151|    180|#[derive(Default)]
_RNvXs6_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  311|  8.81k|        self.0.next()
  312|  8.81k|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    180|    fn new(mut iter: I) -> Self {
  468|    180|        let next = iter.next();
  469|    180|        Self { iter, next }
  470|    180|    }
_RNvMsd_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  8.63k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.63k|        self.next.as_mut()
  474|  8.63k|    }
_RNvXse_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  8.63k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.63k|        let next = self.next.take()?;
  483|  8.63k|        self.next = self.iter.next();
  484|  8.63k|        Some(next)
  485|  8.63k|    }
_RNvMs5_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    180|    pub fn new(a: A, b: B) -> Self {
  298|    180|        Self(Merge::new(_Combine::new(a, b)))
  299|    180|    }
_RNCNvXs9_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  8.63k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs0_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  8.63k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  8.63k|        // the difference between a range and an empty range is just that range
  183|  8.63k|        Some(lhs)
  184|  8.63k|    }
_RNCNvXs9_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  8.81k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsb_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  438|  8.81k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  8.63k|        while let Some(next) = self.iter.peek() {
  443|  8.46k|            if next.start > range.end {
  444|  8.46k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  8.63k|        Some(range)
  452|  8.81k|    }
_RNvMs8_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  8.81k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  8.81k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  8.63k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    180|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  8.63k|        if advance_lhs {
  370|  8.63k|            self.lhs.next();
  371|  8.63k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  8.63k|        range
  376|  8.81k|    }

_RNvXs3_NtCs5my6oOLXmvY_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|    360|    fn next(&mut self) -> Option<Self::Item> {
  154|    360|        self.0.next()
  155|    360|    }
_RNvXs3_NtCs5my6oOLXmvY_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  8.81k|    fn next(&mut self) -> Option<Self::Item> {
  154|  8.81k|        self.0.next()
  155|  8.81k|    }
_RINvMs2_NtCs5my6oOLXmvY_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|    360|    pub fn new<II>(iter: II) -> Self
  140|    360|    where
  141|    360|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    360|    {
  143|    360|        Self(iter.into_iter())
  144|    360|    }
_RINvYINtNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    180|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    180|        Combine::new(self, other)
   33|    180|    }
_RNCINvNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0B6_:
  166|    360|    Ranges::new(iter::from_fn(move || {
  167|    360|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|    360|    }))
_RINvNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEEB4_:
  163|    360|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|    360|    let mut iter = bits.into_iter().peekable();
  165|    360|
  166|    360|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|    360|    }))
  180|    360|}
_RINvYINtNtCs5my6oOLXmvY_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs9VBnAT6y2aj_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    180|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    180|        Combine::new(self, other)
   23|    180|    }
_RINvMs2_NtCs5my6oOLXmvY_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsbBucQyKleSJ_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    180|    pub fn new<II>(iter: II) -> Self
  140|    180|    where
  141|    180|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    180|    {
  143|    180|        Self(iter.into_iter())
  144|    180|    }

_RNvXsi_Cs5my6oOLXmvY_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsbBucQyKleSJ_4core7default7Default7defaultB5_:
   42|    263|#[derive(Debug, Default, Clone)]
_RNvMs4_Cs5my6oOLXmvY_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    180|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    180|        self.inner_ranges()
  287|    180|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    180|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    180|    }
_RNvMs4_Cs5my6oOLXmvY_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    180|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    180|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    180|    }

_RNvXNtCs5my6oOLXmvY_17fvm_ipld_bitfield5rangeINtNtNtCsbBucQyKleSJ_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  8.63k|    fn size(&self) -> Self::Idx {
   15|  8.63k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  8.63k|            self.end - self.start
   19|       |        }
   20|  8.63k|    }

_RNvXs5_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCsbBucQyKleSJ_4core3fmt7Display3fmt:
    3|     43|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   81|    180|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    180|    where
   83|    180|        S: Serializer,
   84|    180|    {
   85|    180|        let bytes = self.to_bytes();
   86|    180|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    180|        }
   92|    180|        serde_bytes::serialize(&bytes, serializer)
   93|    180|    }
_RINvXs_NtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   97|    312|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    312|    where
   99|    312|        D: Deserializer<'de>,
  100|    312|    {
  101|    312|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    306|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    306|        }
  108|    306|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    312|    }
_RNvMs1_NtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    306|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    306|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    303|        let version = reader.read(2);
  160|    303|        if version != 0 {
  161|      1|            return Err(Error::UnsupportedVersion);
  162|    302|        }
  163|    302|
  164|    302|        let mut next_value = reader.read(1) == 1;
  165|    302|        let mut ranges = Vec::new();
  166|    302|        let mut index = 0u64;
  167|    302|        let mut total_len: u64 = 0;
  168|       |
  169|  29.9k|        while let Some(len) = reader.read_len()? {
  170|  29.6k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  29.6k|            if ovf {
  172|      1|                return Err(Error::RLEOverflow);
  173|  29.6k|            }
  174|  29.6k|            total_len = new_total_len;
  175|  29.6k|            let start = index;
  176|  29.6k|            index += len;
  177|  29.6k|            let end = index;
  178|  29.6k|
  179|  29.6k|            if next_value {
  180|  14.8k|                ranges.push(start..end);
  181|  14.8k|            }
  182|       |
  183|  29.6k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    270|        if next_value {
  189|      7|            return Err(Error::NotMinimal);
  190|    263|        }
  191|    263|
  192|    263|        Ok(Self {
  193|    263|            ranges,
  194|    263|            ..Default::default()
  195|    263|        })
  196|    306|    }
_RNvMs1_NtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    180|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    180|        let mut iter = self.ranges();
  201|       |
  202|    180|        let first_range = match iter.next() {
  203|    172|            Some(range) => range,
  204|      8|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    172|        let mut writer = BitWriter::new();
  208|    172|        writer.write(0, 2); // version 00
  209|    172|
  210|    172|        if first_range.start == 0 {
  211|     94|            writer.write(1, 1); // the first bit is a 1
  212|     94|        } else {
  213|     78|            writer.write(0, 1); // the first bit is a 0
  214|     78|            writer.write_len(first_range.start); // the number of leading 0s
  215|     78|        }
  216|       |
  217|    172|        writer.write_len(first_range.size());
  218|    172|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  8.63k|        for range in iter {
  223|  8.46k|            writer.write_len(range.start - index); // zeros
  224|  8.46k|            writer.write_len(range.size()); // ones
  225|  8.46k|            index = range.end;
  226|  8.46k|        }
  227|       |
  228|    172|        writer.finish()
  229|    180|    }

_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  11.8k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  11.8k|        let mut len = 0u64;
   94|       |
   95|  58.6k|        for i in 0..VARINT_MAX_BYTES {
   96|  58.6k|            let byte = self.read(8);
   97|  58.6k|
   98|  58.6k|            // strip off the most significant bit and add
   99|  58.6k|            // it to the output
  100|  58.6k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  58.6k|
  102|  58.6k|            // if the most significant bit is a 0, we've
  103|  58.6k|            // reached the end of the varint
  104|  58.6k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  11.8k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      4|                    break;
  109|  11.8k|                }
  110|  11.8k|                return Ok(len);
  111|  46.7k|            }
  112|       |        }
  113|       |
  114|     10|        Err(Error::InvalidVarint)
  115|  11.8k|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  88.9k|    pub fn drop(&mut self, num_bits: u32) {
   61|  88.9k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  88.9k|        self.bits >>= num_bits;
   65|  88.9k|        self.num_bits -= num_bits;
   66|  88.9k|
   67|  88.9k|        // not sure why this being outside of the if improves the performance
   68|  88.9k|        // bit it does, probably related to keeping caches warm
   69|  88.9k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  88.9k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  88.9k|
   72|  88.9k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  88.9k|        if self.num_bits < 8 {
   74|  65.7k|            self.num_bits += 8;
   75|  65.7k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  65.7k|        }
   77|  88.9k|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    306|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    306|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    306|        // data.
   28|    306|        if bytes.last() == Some(&0) {
   29|      3|            return Err(Error::NotMinimal);
   30|    303|        }
   31|    303|        let mut bits = 0u64;
   32|    909|        for i in 0..2 {
   33|    606|            let byte = bytes.get(i).unwrap_or(&0);
   34|    606|            bits |= (*byte as u64) << (8 * i);
   35|    606|        }
   36|       |
   37|    303|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    303|
   39|    303|        Ok(Self {
   40|    303|            bytes,
   41|    303|            bits,
   42|    303|            num_bits: 16,
   43|    303|        })
   44|    306|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  88.9k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  88.9k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  88.9k|        let mask = (1 << num_bits) - 1;
   55|  88.9k|        (self.bits & mask) as u8
   56|  88.9k|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  59.2k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  59.2k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  59.2k|        let res = self.peek(num_bits);
   85|  59.2k|        self.drop(num_bits);
   86|  59.2k|
   87|  59.2k|        res
   88|  59.2k|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  29.9k|    pub fn has_more(&self) -> bool {
  153|  29.9k|        self.bits != 0 || !self.bytes.is_empty()
  154|  29.9k|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  29.9k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  29.9k|        // We're done.
  120|  29.9k|        if !self.has_more() {
  121|    270|            return Ok(None);
  122|  29.6k|        }
  123|  29.6k|
  124|  29.6k|        let peek6 = self.peek(6);
  125|       |
  126|  29.6k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|  14.6k|            self.drop(1);
  129|  14.6k|            1
  130|  15.0k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  3.13k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  3.13k|            self.drop(6);
  134|  3.13k|            if val < 2 {
  135|      9|                return Err(Error::NotMinimal);
  136|  3.13k|            }
  137|  3.13k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  11.8k|            self.drop(2);
  141|  11.8k|            let val = self.read_varint()?;
  142|  11.8k|            if val < 16 {
  143|     12|                return Err(Error::NotMinimal);
  144|  11.8k|            }
  145|  11.8k|            val
  146|       |        };
  147|       |
  148|  29.6k|        Ok(Some(len))
  149|  29.9k|    }

_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  63.4k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  63.4k|        debug_assert!(num_bits <= 8);
   24|  63.4k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  63.4k|        self.bits |= (byte as u16) << self.num_bits;
   27|  63.4k|        self.num_bits += num_bits;
   28|  63.4k|
   29|  63.4k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  63.4k|        if self.num_bits >= 8 {
   31|  48.5k|            self.bytes.push(self.bits as u8);
   32|  48.5k|            self.bits >>= 8;
   33|  48.5k|            self.num_bits -= 8;
   34|  48.5k|        }
   35|  63.4k|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    172|    pub fn finish(mut self) -> Vec<u8> {
   61|    172|        if self.bits > 0 {
   62|     70|            self.bytes.push(self.bits as u8);
   63|    102|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    172|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    172|        self.bytes
   71|    172|    }
_RNvXs_NtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsbBucQyKleSJ_4core7default7Default7defaultB8_:
    4|    172|#[derive(Default, Clone, Debug)]
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    172|    pub fn new() -> Self {
   18|    172|        Default::default()
   19|    172|    }
_RNvMNtNtCs5my6oOLXmvY_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  17.1k|    pub fn write_len(&mut self, len: u64) {
   39|  17.1k|        debug_assert!(len > 0);
   40|       |
   41|  17.1k|        if len == 1 {
   42|  6.73k|            // Block Single (prefix 1)
   43|  6.73k|            self.write(1, 1);
   44|  10.4k|        } else if len < 16 {
   45|  1.51k|            // Block Short (prefix 01)
   46|  1.51k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  1.51k|            self.write(len as u8, 4);
   48|  1.51k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  8.93k|            self.write(0, 2);
   51|  8.93k|
   52|  8.93k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  44.4k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  44.4k|                self.write(byte, 8);
   55|  44.4k|            }
   56|       |        }
   57|  17.1k|    }

_RINvXNvXNvNtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   35|    180|#[derive(Debug, Serialize)]
_RINvXNvNtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   35|    180|#[derive(Debug, Serialize)]
_RINvXs4_NtCs5my6oOLXmvY_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   93|    263|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    263|    where
   95|    263|        D: Deserializer<'de>,
   96|    263|    {
   97|    263|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    246|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    246|        }
  104|    246|        Ok(Self::Unvalidated(bytes))
  105|    263|    }

_RNvXNtCsfapGQ7iM1zt_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCsbBucQyKleSJ_4core7convert4FromINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCskLEm2Dfx7Ph_11cbor_decode:
   22|    380|    fn from(err: DecodeError<T>) -> Self {
   23|    380|        Self {
   24|    380|            description: err.to_string(),
   25|    380|            protocol: CodecProtocol::Cbor,
   26|    380|        }
   27|    380|    }

_RINvCsfapGQ7iM1zt_17fvm_ipld_encoding10from_sliceNtNtCs1FxgGwPB4ZW_11common_fuzz4cbor7PayloadECskLEm2Dfx7Ph_11cbor_decode:
   50|    560|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    560|where
   52|    560|    T: de::Deserialize<'a>,
   53|    560|{
   54|    560|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    560|}
_RINvCsfapGQ7iM1zt_17fvm_ipld_encoding6to_vecNtNtCs1FxgGwPB4ZW_11common_fuzz4cbor7PayloadECskLEm2Dfx7Ph_11cbor_decode:
   33|    180|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    180|where
   35|    180|    T: ser::Serialize + ?Sized,
   36|    180|{
   37|    180|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    180|}

_RNvXs0_NtNtCs2JReJWUoxYc_10fvm_shared7address6errorsNtB5_5ErrorINtNtCsbBucQyKleSJ_4core7convert4FromNtNtCsi8uswdNwmYF_15unsigned_varint6decode5ErrorE4from:
   49|     16|    fn from(_: VarintError) -> Error {
   50|     16|        Error::InvalidPayload
   51|     16|    }
_RNvXs5_NtNtCs2JReJWUoxYc_10fvm_shared7address6errorsNtB5_5ErrorNtNtCsbBucQyKleSJ_4core3fmt7Display3fmt:
   13|     33|#[derive(Debug, PartialEq, Error)]

_RINvXs3_NtCs2JReJWUoxYc_10fvm_shared7addressNtB6_7AddressNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
  274|  1.65k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  1.65k|    where
  276|  1.65k|        D: Deserializer<'de>,
  277|  1.65k|    {
  278|  1.65k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  1.58k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  1.65k|    }
_RINvXs2_NtCs2JReJWUoxYc_10fvm_shared7addressNtB6_7AddressNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
  264|    396|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|    396|    where
  266|    396|        S: Serializer,
  267|    396|    {
  268|    396|        let address_bytes = self.to_bytes();
  269|    396|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|    396|    }
_RNvMs_NtCs2JReJWUoxYc_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|    396|    pub fn to_bytes(self) -> Vec<u8> {
  177|    396|        self.payload.to_bytes()
  178|    396|    }
_RNvMs_NtCs2JReJWUoxYc_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  1.58k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  1.58k|        if bz.len() < 2 {
   88|     10|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  1.57k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  1.57k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  1.58k|    }
_RNvMs_NtCs2JReJWUoxYc_10fvm_shared7addressNtB4_7Address3new:
   78|  1.57k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  1.57k|        Ok(Self {
   80|  1.57k|            network,
   81|  1.57k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  1.57k|    }
_RNvNtCs2JReJWUoxYc_10fvm_shared7address12to_leb_bytes:
  310|    140|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|    140|    // write id to buffer in leb128 format
  312|    140|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|    140|}
_RNvNtCs2JReJWUoxYc_10fvm_shared7address14from_leb_bytes:
  315|    455|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|    455|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|    439|    if !remaining.is_empty() {
  319|      3|        return Err(Error::InvalidPayload);
  320|    436|    }
  321|    436|    Ok(id)
  322|    455|}

_RNCNvMNtNtCs2JReJWUoxYc_10fvm_shared7address7payloadNtB4_7Payload3new0B8_:
   57|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMNtNtCs2JReJWUoxYc_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|    396|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|    396|        let mut bz = match self {
   40|    140|            ID(i) => to_leb_bytes(i).unwrap(),
   41|     86|            Secp256k1(arr) => arr.to_vec(),
   42|     80|            Actor(arr) => arr.to_vec(),
   43|     90|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|    396|        bz.insert(0, Protocol::from(self) as u8);
   47|    396|        bz
   48|    396|    }
_RNvMNtNtCs2JReJWUoxYc_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  1.57k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  1.57k|        let payload = match protocol {
   53|    455|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    317|                payload
   56|    317|                    .try_into()
   57|    317|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    527|                payload
   61|    527|                    .try_into()
   62|    527|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    274|                payload
   66|    274|                    .try_into()
   67|    274|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  1.55k|        Ok(payload)
   71|  1.57k|    }
_RNvXs_NtNtCs2JReJWUoxYc_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsbBucQyKleSJ_4core7convert4FromNtB4_7PayloadE4from:
   75|    396|    fn from(pl: Payload) -> Self {
   76|    396|        match pl {
   77|    140|            Payload::ID(_) => Self::ID,
   78|     86|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|     80|            Payload::Actor(_) => Self::Actor,
   80|     90|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|    396|    }
_RNCNvMNtNtCs2JReJWUoxYc_10fvm_shared7address7payloadNtB4_7Payload3news0_0B8_:
   67|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMNtNtCs2JReJWUoxYc_10fvm_shared7address7payloadNtB4_7Payload3news_0B8_:
   62|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,

_RNvXNvNtNtCs2JReJWUoxYc_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscMhtpJLCyCP_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  1.57k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs2JReJWUoxYc_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscMhtpJLCyCP_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  1.57k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCs2JReJWUoxYc_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  1.57k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  1.57k|        FromPrimitive::from_u8(b)
   28|  1.57k|    }

_RINvXNvNvXs_NtCs1FxgGwPB4ZW_11common_fuzz4cborNtBa_7PayloadNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCshmk5o4rLjib_11serde_tuple10SerializerQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEEECskLEm2Dfx7Ph_11cbor_decode:
   10|    180|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCs1FxgGwPB4ZW_11common_fuzz4cborNtB5_7PayloadNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   10|    180|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtBb_7PayloadNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   10|    108|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtBd_7PayloadNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de8AccessorNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEE0CskLEm2Dfx7Ph_11cbor_decode:
   10|    439|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCs1FxgGwPB4ZW_11common_fuzz4cborNtBd_7PayloadNtNtCsfeRzglKx8o0_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils9BufWriterEECskLEm2Dfx7Ph_11cbor_decode:
   10|    180|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtBe_7PayloadNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   10|    547|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB3_7PayloadNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserializeQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEECskLEm2Dfx7Ph_11cbor_decode:
   10|    934|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCs1FxgGwPB4ZW_11common_fuzz4cborNtB8_7PayloadNtNtCsfeRzglKx8o0_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCshmk5o4rLjib_11serde_tuple12DeserializerQINtNtCsdfxWOBmsVHA_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs8dP7NWGLpjb_7cbor4ii4core5utils11SliceReaderEEECskLEm2Dfx7Ph_11cbor_decode:
   10|    560|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

