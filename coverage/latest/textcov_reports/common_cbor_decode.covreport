_RNvNtNtCskOJHTXoxdkM_7cbor4ii4core3dec8if_majorCshUSNUS5j5SO_11cbor_decode:
  890|    258|pub fn if_major(byte: u8) -> u8 {
  891|    258|    byte >> 5
  892|    258|}
_RINvXss_NtNtCskOJHTXoxdkM_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  252|    461|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    461|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    461|                }
_RINvYNtNtNtCskOJHTXoxdkM_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
   73|    279|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    279|        let byte = pull_one(reader)?;
   75|    278|        Self::decode_with(byte, reader)
   76|    279|    }
_RINvNtNtCskOJHTXoxdkM_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  125|  13.3k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  13.3k|    let b = reader.fill(1)?
  127|  13.3k|        .as_ref()
  128|  13.3k|        .get(0)
  129|  13.3k|        .copied()
  130|  13.3k|        .ok_or(Error::Eof)?;
  131|  13.2k|    reader.advance(1);
  132|  13.2k|    Ok(b)
  133|  13.3k|}
_RNvMs0_NtNtCskOJHTXoxdkM_7cbor4ii4core3decNtB5_7TypeNum3newCshUSNUS5j5SO_11cbor_decode:
  175|  6.12k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  6.12k|        TypeNum { major_limit, byte }
  177|  6.12k|    }
_RNCINvNtNtCskOJHTXoxdkM_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0CshUSNUS5j5SO_11cbor_decode:
  471|  6.90k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvYyNtNtNtCskOJHTXoxdkM_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
   73|    467|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    467|        let byte = pull_one(reader)?;
   75|    461|        Self::decode_with(byte, reader)
   76|    467|    }
_RINvNtNtCskOJHTXoxdkM_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  427|  10.0k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  10.0k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  10.0k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  10.0k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  4.33k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  4.33k|            if buf.len() >= len {
  436|  4.27k|                reader.advance(len);
  437|  4.27k|                return Ok(Some(&buf[..len]));
  438|     57|            }
  439|      0|        }
  440|       |
  441|     57|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|     63|        while len != 0 {
  444|     63|            let readbuf = reader.fill(len)?;
  445|     63|            let readbuf = readbuf.as_ref();
  446|     63|
  447|     63|            if readbuf.is_empty() {
  448|     57|                return Err(Error::Eof);
  449|      6|            }
  450|      6|
  451|      6|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      6|
  453|      6|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      6|            reader.advance(readlen);
  455|      6|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|  7.31k|            let byte = pull_one(reader)?;
  463|       |
  464|  7.29k|            if byte == marker::BREAK {
  465|    383|                break
  466|  6.91k|            }
  467|  6.91k|
  468|  6.91k|            if !reader.step_in() {
  469|      1|                return Err(Error::DepthLimit);
  470|  6.90k|            }
  471|  6.90k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|  6.90k|            let reader = &mut *reader;
  473|       |
  474|  6.90k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|  1.39k|                buf.extend_from_slice(longbuf);
  476|  1.39k|            }
  477|       |        }
  478|       |
  479|    383|        Ok(None)
  480|       |    }
  481|  10.0k|}
_RINvNtNtCskOJHTXoxdkM_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  136|  1.32k|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  2.62k|    while !buf.is_empty() {
  138|  1.33k|        let readbuf = reader.fill(buf.len())?;
  139|  1.33k|        let readbuf = readbuf.as_ref();
  140|  1.33k|
  141|  1.33k|        if readbuf.is_empty() {
  142|     25|            return Err(Error::Eof);
  143|  1.30k|        }
  144|  1.30k|
  145|  1.30k|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|  1.30k|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|  1.30k|        reader.advance(len);
  148|  1.30k|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|  1.29k|    Ok(())
  152|  1.32k|}
_RINvXsc_NtNtCskOJHTXoxdkM_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  611|  1.00k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|  1.00k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|  1.00k|    }
_RINvMs0_NtNtCskOJHTXoxdkM_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  223|  6.12k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  6.12k|        match self.byte & self.major_limit {
  225|  6.12k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|  1.04k|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|    650|                let mut buf = [0; 2];
  229|    650|                pull_exact(reader, &mut buf)?;
  230|    640|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|    267|                let mut buf = [0; 4];
  234|    267|                pull_exact(reader, &mut buf)?;
  235|    259|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    403|                let mut buf = [0; 8];
  239|    403|                pull_exact(reader, &mut buf)?;
  240|    396|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|     63|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  6.12k|    }
_RINvXs5_NtNtCskOJHTXoxdkM_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs86fObnVHsxx_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  506|  3.14k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  3.14k|        use crate::alloc::borrow::Cow;
  508|  3.14k|
  509|  3.14k|        let mut buf = Vec::new();
  510|  3.14k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  2.88k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|    106|            Cow::Owned(buf)
  514|       |        }))
  515|  3.14k|    }
_RINvXsg_NtNtCskOJHTXoxdkM_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  703|    278|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    278|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    278|    }
_RINvYINtNtNtCskOJHTXoxdkM_7cbor4ii4core5types5BytesINtNtCs86fObnVHsxx_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
   73|  3.20k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  3.20k|        let byte = pull_one(reader)?;
   75|  3.14k|        Self::decode_with(byte, reader)
   76|  3.20k|    }
_RINvNtNtCskOJHTXoxdkM_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
  595|  11.0k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  11.0k|    -> Result<Option<usize>, Error<R::Error>>
  597|  11.0k|{
  598|  11.0k|    if byte != (marker::START | (major << 5)) {
  599|  5.38k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  5.30k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  5.30k|        Ok(Some(len))
  602|       |    } else {
  603|  5.67k|        Ok(None)
  604|       |    }
  605|  11.0k|}
_RINvYNtNtNtCskOJHTXoxdkM_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
   73|  1.01k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  1.01k|        let byte = pull_one(reader)?;
   75|  1.00k|        Self::decode_with(byte, reader)
   76|  1.01k|    }
_RNvMNtNtCskOJHTXoxdkM_7cbor4ii4core3decNtB2_9Reference6as_refCshUSNUS5j5SO_11cbor_decode:
   81|  14.7k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  14.7k|        match self {
   83|  14.7k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  14.7k|    }

_RINvXsd_NtNtCskOJHTXoxdkM_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
  270|    384|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    384|        Ok(())
  272|    384|    }
_RINvXs3_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
   84|  1.77k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  1.77k|        match u16::try_from(self.value) {
   86|  1.76k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      4|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      4|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  1.77k|        Ok(())
   93|  1.77k|    }
_RINvXs4_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
   98|  1.94k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  1.94k|        match u32::try_from(self.value) {
  100|  1.77k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    176|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    176|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  1.94k|        Ok(())
  107|  1.94k|    }
_RINvXs7_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
  209|  1.18k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.18k|        writer.push(self.0)?;
  211|  1.18k|        Ok(())
  212|  1.18k|    }
_RINvXsu_NtNtCskOJHTXoxdkM_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
  159|    192|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    192|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    192|                }
_RNvMs0_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB5_7TypeNumtE3newCshUSNUS5j5SO_11cbor_decode:
   52|  1.76k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.76k|        TypeNum { type_, value }
   54|  1.76k|    }
_RINvXs2_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
   70|  1.76k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  1.76k|        match u8::try_from(self.value) {
   72|  1.63k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    136|                let [x0, x1] = self.value.to_be_bytes();
   75|    136|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  1.76k|        Ok(())
   79|  1.76k|    }
_RNvMs0_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB5_7TypeNummE3newCshUSNUS5j5SO_11cbor_decode:
   52|  1.77k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.77k|        TypeNum { type_, value }
   54|  1.77k|    }
_RINvXs1_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
   59|  1.63k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  1.63k|        match self.value {
   61|  1.63k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    630|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  1.63k|        Ok(())
   65|  1.63k|    }
_RNvMs0_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB5_7TypeNumhE3newCshUSNUS5j5SO_11cbor_decode:
   52|  1.63k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.63k|        TypeNum { type_, value }
   54|  1.63k|    }
_RINvXsi_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECshUSNUS5j5SO_11cbor_decode:
  317|    192|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    192|        self.1.encode(writer)
  319|    192|    }
_RNvMs0_NtNtCskOJHTXoxdkM_7cbor4ii4core3encINtB5_7TypeNumyE3newCshUSNUS5j5SO_11cbor_decode:
   52|  1.94k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.94k|        TypeNum { type_, value }
   54|  1.94k|    }

_RNvXs1_NtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCshUSNUS5j5SO_11cbor_decode:
   84|  7.92k|    fn step_out(&mut self) {
   85|  7.92k|        self.limit += 1;
   86|  7.92k|    }
_RNvXs1_NtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCshUSNUS5j5SO_11cbor_decode:
   75|  7.92k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  7.92k|            self.limit = limit;
   77|  7.92k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  7.92k|    }
_RNvXs_NtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCshUSNUS5j5SO_11cbor_decode:
   40|  3.12k|        self.0.try_reserve(input.len())?;
   41|  3.12k|        self.0.extend_from_slice(input);
   42|  3.12k|        Ok(())
   43|  3.12k|    }
_RNvXs1_NtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCshUSNUS5j5SO_11cbor_decode:
   68|  18.8k|    fn advance(&mut self, n: usize) {
   69|  18.8k|        let len = core::cmp::min(self.buf.len(), n);
   70|  18.8k|        self.buf = &self.buf[len..];
   71|  18.8k|    }
_RNvXs1_NtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCshUSNUS5j5SO_11cbor_decode:
   62|  20.1k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  20.1k|        let len = core::cmp::min(self.buf.len(), want);
   64|  20.1k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  20.1k|    }
_RNvMNtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    192|    pub fn into_inner(self) -> Vec<u8> {
   25|    192|        self.0
   26|    192|    }
_RNvMs0_NtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    596|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    596|        SliceReader { buf, limit: 256 }
   55|    596|    }
_RNvMNtNtCskOJHTXoxdkM_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    192|    pub fn new(buf: Vec<u8>) -> Self {
   15|    192|       BufWriter(buf)
   16|    192|    }

_RNvMs1_NtCskOJHTXoxdkM_7cbor4ii5errorINtB5_11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleE8mismatchCshUSNUS5j5SO_11cbor_decode:
   93|     63|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     63|        DecodeError::Mismatch {
   95|     63|            expect_major: (!major_limit) >> 5,
   96|     63|            byte
   97|     63|        }
   98|     63|    }

_RNvXs0_NtCskOJHTXoxdkM_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCsisyCJ07Ahai_4core3ops4drop4Drop4dropCshUSNUS5j5SO_11cbor_decode:
   24|  6.90k|    fn drop(&mut self) {
   25|  6.90k|        (self.1)(self.0);
   26|  6.90k|    }
_RNvXs_NtCskOJHTXoxdkM_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCsisyCJ07Ahai_4core3ops5deref8DerefMut9deref_mutCshUSNUS5j5SO_11cbor_decode:
   17|  6.90k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  6.90k|        self.0
   19|  6.90k|    }

_RNvMNtCsfFhdSPSdA06_3cid3cidINtB2_3CidKj40_E6new_v1CshUSNUS5j5SO_11cbor_decode:
   90|    176|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    176|        Self {
   92|    176|            version: Version::V1,
   93|    176|            codec,
   94|    176|            hash,
   95|    176|        }
   96|    176|    }
_RNvMNtCsfFhdSPSdA06_3cid3cidINtB2_3CidKj40_E3newCshUSNUS5j5SO_11cbor_decode:
   99|    177|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    177|        match version {
  101|       |            Version::V0 => {
  102|      1|                if codec != DAG_PB {
  103|      1|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    176|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    177|    }
_RINvMNtCsfFhdSPSdA06_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECshUSNUS5j5SO_11cbor_decode:
  127|    243|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    243|        let version = varint_read_u64(&mut r)?;
  129|    242|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    235|        if [version, codec] == [0x12, 0x20] {
  132|     24|            let mut digest = [0u8; 32];
  133|     24|            r.read_exact(&mut digest)?;
  134|     23|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|     23|            Self::new_v0(mh)
  136|       |        } else {
  137|    211|            let version = Version::try_from(version)?;
  138|    206|            let mh = Multihash::read(r)?;
  139|    177|            Self::new(version, codec, mh)
  140|       |        }
  141|    243|    }
_RINvMNtCsfFhdSPSdA06_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
  157|    192|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    192|        match self.version {
  159|     22|            Version::V0 => self.hash.write(w)?,
  160|    170|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    192|        Ok(())
  163|    192|    }
_RNvMNtCsfFhdSPSdA06_3cid3cidINtB2_3CidKj40_E6new_v0CshUSNUS5j5SO_11cbor_decode:
   78|     23|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     23|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     23|        }
   82|     23|        Ok(Self {
   83|     23|            version: Version::V0,
   84|     23|            codec: DAG_PB,
   85|     23|            hash,
   86|     23|        })
   87|     23|    }
_RINvMNtCsfFhdSPSdA06_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
  143|    170|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    170|        let mut version_buf = varint_encode::u64_buffer();
  145|    170|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    170|
  147|    170|        let mut codec_buf = varint_encode::u64_buffer();
  148|    170|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    170|
  150|    170|        w.write_all(version)?;
  151|    170|        w.write_all(codec)?;
  152|    170|        self.hash.write(&mut w)?;
  153|    170|        Ok(())
  154|    170|    }
_RNvXs6_NtCsfFhdSPSdA06_3cid3cidINtB5_3CidKj40_EINtNtCsisyCJ07Ahai_4core7convert7TryFromRShE8try_fromCshUSNUS5j5SO_11cbor_decode:
  314|    243|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    243|        Self::read_bytes(&mut bytes)
  316|    243|    }
_RNvMNtCsfFhdSPSdA06_3cid3cidINtB2_3CidKj40_E8to_bytesCshUSNUS5j5SO_11cbor_decode:
  167|    192|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    192|        let mut bytes = Vec::new();
  169|    192|        self.write_bytes(&mut bytes).unwrap();
  170|    192|        bytes
  171|    192|    }

_RNvXs4_NtCsfFhdSPSdA06_3cid5errorNtB5_5ErrorINtNtCsisyCJ07Ahai_4core7convert4FromNtNtNtCsaMOVOMvWZ7F_3std2io5error5ErrorE4from:
   88|      1|    fn from(err: io::Error) -> Self {
   89|      1|        Self::Io(err)
   90|      1|    }
_RNvXs3_NtCsfFhdSPSdA06_3cid5errorNtB5_5ErrorINtNtCsisyCJ07Ahai_4core7convert4FromNtNtCs9uot4vS7CsG_15unsigned_varint2io9ReadErrorE4from:
   78|      8|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   79|      8|        use unsigned_varint::io::ReadError::*;
   80|      8|        match err {
   81|      1|            Io(err) => Self::Io(err),
   82|      7|            _ => Self::VarIntDecodeError,
   83|       |        }
   84|      8|    }
_RNvXs_NtCsfFhdSPSdA06_3cid5errorNtB4_5ErrorNtNtCsisyCJ07Ahai_4core3fmt7Display3fmt:
   39|     44|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   40|       |        use self::Error::*;
   41|     44|        let error = match self {
   42|      0|            UnknownCodec => "Unknown codec",
   43|      0|            InputTooShort => "Input too short",
   44|     29|            ParsingError => "Failed to parse multihash",
   45|      5|            InvalidCidVersion => "Unrecognized CID version",
   46|      1|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   47|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   48|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   49|      7|            VarIntDecodeError => "Failed to decode unsigned varint format",
   50|      2|            Io(err) => return write!(f, "{}", err),
   51|       |        };
   52|       |
   53|     42|        f.write_str(error)
   54|     44|    }
_RNvXs1_NtCsfFhdSPSdA06_3cid5errorNtB5_5ErrorINtNtCsisyCJ07Ahai_4core7convert4FromNtNtCs3SheMB1K797_9multihash5error5ErrorE4from:
   65|     29|    fn from(_: multihash::Error) -> Error {
   66|     29|        Error::ParsingError
   67|     29|    }

_RINvXs_NtCsfFhdSPSdA06_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor11visit_bytesINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
   48|    243|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    243|    where
   50|    243|        E: de::Error,
   51|    243|    {
   52|    243|        CidGeneric::<SIZE>::try_from(value)
   53|    243|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    243|    }
_RINvXs0_NtCsfFhdSPSdA06_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   79|    279|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    279|    where
   81|    279|        D: de::Deserializer<'de>,
   82|    279|    {
   83|    279|        /// Main visitor to deserialize a CID.
   84|    279|        ///
   85|    279|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    279|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    279|        /// to bytes.
   88|    279|        struct MainEntryVisitor<const SIZE: usize>;
   89|    279|
   90|    279|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    279|            type Value = CidGeneric<SIZE>;
   92|    279|
   93|    279|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    279|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    279|            }
   96|    279|
   97|    279|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    279|            where
   99|    279|                D: de::Deserializer<'de>,
  100|    279|            {
  101|    279|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    279|            }
  103|    279|        }
  104|    279|
  105|    279|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    279|    }
_RINvXNvXs0_NtCsfFhdSPSdA06_3cid5serdeINtNtBb_3cid3CidKpENtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   97|    259|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    259|            where
   99|    259|                D: de::Deserializer<'de>,
  100|    259|            {
  101|    259|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    259|            }
_RINvXNtCsfFhdSPSdA06_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs7fqClrIfz6j_5serde3ser9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   29|    192|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    192|    where
   31|    192|        S: ser::Serializer,
   32|    192|    {
   33|    192|        let value = ByteBuf::from(self.to_bytes());
   34|    192|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    192|    }
_RNCINvXs_NtCsfFhdSPSdA06_3cid5serdeNtB7_17BytesToCidVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor11visit_bytesINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEE0CshUSNUS5j5SO_11cbor_decode:
   53|     44|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))

_RNvXs_NtCsfFhdSPSdA06_3cid7versionNtB4_7VersionINtNtCsisyCJ07Ahai_4core7convert7TryFromyE8try_from:
   34|    211|    fn try_from(raw: u64) -> Result<Self> {
   35|    211|        match raw {
   36|      4|            0 => Ok(Self::V0),
   37|    202|            1 => Ok(Self::V1),
   38|      5|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    211|    }
_RNvXs0_NtCsfFhdSPSdA06_3cid7versionyINtNtCsisyCJ07Ahai_4core7convert4FromNtB5_7VersionE4from:
   44|    170|    fn from(ver: Version) -> u64 {
   45|    170|        match ver {
   46|      0|            Version::V0 => 0,
   47|    170|            Version::V1 => 1,
   48|       |        }
   49|    170|    }

_RINvXsd_NtCs5nJIgUfg6sx_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor11visit_bytesINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
  203|    732|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    732|    where
  205|    732|        E: Error,
  206|    732|    {
  207|    732|        Ok(ByteBuf::from(v))
  208|    732|    }
_RINvMNtCs5nJIgUfg6sx_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
   60|     14|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|     14|        ByteBuf {
   62|     14|            bytes: bytes.into(),
   63|     14|        }
   64|     14|    }
_RINvMNtCs5nJIgUfg6sx_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECshUSNUS5j5SO_11cbor_decode:
   60|    732|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    732|        ByteBuf {
   62|    732|            bytes: bytes.into(),
   63|    732|        }
   64|    732|    }
_RINvXse_NtCs5nJIgUfg6sx_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  219|    870|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    870|    where
  221|    870|        D: Deserializer<'de>,
  222|    870|    {
  223|    870|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    870|    }
_RINvXsd_NtCs5nJIgUfg6sx_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor14visit_byte_bufINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
  210|     14|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<ByteBuf, E>
  211|     14|    where
  212|     14|        E: Error,
  213|     14|    {
  214|     14|        Ok(ByteBuf::from(v))
  215|     14|    }
_RNvMNtCs5nJIgUfg6sx_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    746|    pub fn into_vec(self) -> Vec<u8> {
   68|    746|        self.bytes
   69|    746|    }

_RINvXs2_NtCs5nJIgUfg6sx_14cs_serde_bytes2deINtNtCs86fObnVHsxx_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   72|  2.07k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  2.07k|    where
   74|  2.07k|        D: Deserializer<'de>,
   75|  2.07k|    {
   76|  2.07k|        struct CowVisitor;
   77|  2.07k|
   78|  2.07k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  2.07k|            type Value = Cow<'de, [u8]>;
   80|  2.07k|
   81|  2.07k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  2.07k|                formatter.write_str("a byte array")
   83|  2.07k|            }
   84|  2.07k|
   85|  2.07k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  2.07k|            where
   87|  2.07k|                E: Error,
   88|  2.07k|            {
   89|  2.07k|                Ok(Cow::Borrowed(v))
   90|  2.07k|            }
   91|  2.07k|
   92|  2.07k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  2.07k|            where
   94|  2.07k|                E: Error,
   95|  2.07k|            {
   96|  2.07k|                Ok(Cow::Owned(v.to_vec()))
   97|  2.07k|            }
   98|  2.07k|
   99|  2.07k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  2.07k|            where
  101|  2.07k|                E: Error,
  102|  2.07k|            {
  103|  2.07k|                Ok(Cow::Owned(v))
  104|  2.07k|            }
  105|  2.07k|        }
  106|  2.07k|
  107|  2.07k|        deserializer.deserialize_bytes(CowVisitor)
  108|  2.07k|    }
_RINvXs1_NtCs5nJIgUfg6sx_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   61|    870|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    870|    where
   63|    870|        D: Deserializer<'de>,
   64|    870|    {
   65|    870|        // Via the serde::Deserialize impl for ByteBuf.
   66|    870|        serde::Deserialize::deserialize(deserializer)
   67|    870|    }
_RINvXNvXs2_NtCs5nJIgUfg6sx_14cs_serde_bytes2deINtNtCs86fObnVHsxx_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor20visit_borrowed_bytesINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
   85|  1.91k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  1.91k|            where
   87|  1.91k|                E: Error,
   88|  1.91k|            {
   89|  1.91k|                Ok(Cow::Borrowed(v))
   90|  1.91k|            }
_RINvXs_NtCs5nJIgUfg6sx_14cs_serde_bytes2deINtNtCs86fObnVHsxx_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   42|    870|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    870|    where
   44|    870|        D: Deserializer<'de>,
   45|    870|    {
   46|    870|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    870|    }
_RINvXNvXs2_NtCs5nJIgUfg6sx_14cs_serde_bytes2deINtNtCs86fObnVHsxx_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor14visit_byte_bufINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
   99|     83|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|     83|            where
  101|     83|                E: Error,
  102|     83|            {
  103|     83|                Ok(Cow::Owned(v))
  104|     83|            }

_RINvCs5nJIgUfg6sx_14cs_serde_bytes9serializeINtNtCs86fObnVHsxx_5alloc3vec3VechEQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   77|    384|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    384|where
   79|    384|    T: ?Sized + Serialize,
   80|    384|    S: Serializer,
   81|    384|{
   82|    384|    Serialize::serialize(bytes, serializer)
   83|    384|}
_RINvCs5nJIgUfg6sx_14cs_serde_bytes11deserializeINtNtCs86fObnVHsxx_5alloc6borrow3CowShEQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  103|    337|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    337|where
  105|    337|    T: Deserialize<'de>,
  106|    337|    D: Deserializer<'de>,
  107|    337|{
  108|    337|    Deserialize::deserialize(deserializer)
  109|    337|}
_RINvCs5nJIgUfg6sx_14cs_serde_bytes11deserializeINtNtCs86fObnVHsxx_5alloc3vec3VechEQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  103|    870|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    870|where
  105|    870|    T: Deserialize<'de>,
  106|    870|    D: Deserializer<'de>,
  107|    870|{
  108|    870|    Deserialize::deserialize(deserializer)
  109|    870|}
_RINvCs5nJIgUfg6sx_14cs_serde_bytes9serializeRINtNtCs86fObnVHsxx_5alloc3vec3VechEQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   77|    192|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    192|where
   79|    192|    T: ?Sized + Serialize,
   80|    192|    S: Serializer,
   81|    192|{
   82|    192|    Serialize::serialize(bytes, serializer)
   83|    192|}

_RINvXs_NtCs5nJIgUfg6sx_14cs_serde_bytes3serINtNtCs86fObnVHsxx_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   37|    988|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|    988|    where
   39|    988|        S: Serializer,
   40|    988|    {
   41|    988|        serializer.serialize_bytes(self)
   42|    988|    }
_RINvXs4_NtCs5nJIgUfg6sx_14cs_serde_bytes3serRINtNtCs86fObnVHsxx_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   88|    192|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    192|    where
   90|    192|        S: Serializer,
   91|    192|    {
   92|    192|        (**self).serialize(serializer)
   93|    192|    }

rust_fuzzer_test_input:
  141|    500|        pub extern "C" fn rust_fuzzer_test_input($bytes: &[u8]) {
  142|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  143|       |            // formatting of the input to that file. This is only intended for
  144|       |            // `cargo fuzz`'s use!
  145|       |
  146|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  147|    500|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  148|       |                use std::io::Write;
  149|      0|                let mut file = std::fs::File::create(path)
  150|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  151|      0|                writeln!(&mut file, "{:?}", $bytes)
  152|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  153|      0|                return;
  154|    500|            }
  155|       |
  156|       |            $body
  157|    500|        }
LLVMFuzzerTestOneInput:
   27|    500|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    500|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    500|    });
   32|    500|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    500|    }
   37|    500|    0
   38|    500|}
_RNCNvCs9RNGsGIEQwX_13libfuzzer_sys15test_input_wrap0B3_:
   28|    500|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    500|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    500|        rust_fuzzer_test_input(data_slice);
   31|    500|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs0_NtCs3SheMB1K797_9multihash5errorNtB5_5ErrorINtNtCsisyCJ07Ahai_4core7convert4FromNtNtNtCsaMOVOMvWZ7F_3std2io5error5ErrorE4from:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }
_RNvXs1_NtCs3SheMB1K797_9multihash5errorNtB5_5ErrorINtNtCsisyCJ07Ahai_4core7convert4FromNtNtCs9uot4vS7CsG_15unsigned_varint2io9ReadErrorE4from:
   44|     19|    fn from(err: ReadError) -> Self {
   45|     19|        match err {
   46|     15|            ReadError::Io(err) => Self::Io(err),
   47|      4|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     19|    }

_RINvNtCs3SheMB1K797_9multihash9multihash14read_multihashQRShKj40_ECshUSNUS5j5SO_11cbor_decode:
  298|    206|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    206|where
  300|    206|    R: io::Read,
  301|    206|{
  302|    206|    let code = read_u64(&mut r)?;
  303|    200|    let size = read_u64(&mut r)?;
  304|       |
  305|    187|    if size > S as u64 || size > u8::MAX as u64 {
  306|      9|        return Err(Error::InvalidSize(size));
  307|    178|    }
  308|    178|
  309|    178|    let mut digest = [0; S];
  310|    178|    r.read_exact(&mut digest[..size as usize])?;
  311|    177|    Ok((code, size as u8, digest))
  312|    206|}
_RNvMs_NtCs3SheMB1K797_9multihash9multihashINtB4_9MultihashKj40_E6digestCshUSNUS5j5SO_11cbor_decode:
  130|    192|    pub fn digest(&self) -> &[u8] {
  131|    192|        &self.digest[..self.size as usize]
  132|    192|    }
_RINvNtCs3SheMB1K797_9multihash9multihash15write_multihashQQINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
  276|    170|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    170|where
  278|    170|    W: io::Write,
  279|    170|{
  280|    170|    let mut code_buf = varint_encode::u64_buffer();
  281|    170|    let code = varint_encode::u64(code, &mut code_buf);
  282|    170|
  283|    170|    let mut size_buf = varint_encode::u8_buffer();
  284|    170|    let size = varint_encode::u8(size, &mut size_buf);
  285|    170|
  286|    170|    w.write_all(code)?;
  287|    170|    w.write_all(size)?;
  288|    170|    w.write_all(digest)?;
  289|    170|    Ok(())
  290|    170|}
_RNvMs_NtCs3SheMB1K797_9multihash9multihashINtB4_9MultihashKj40_E4codeCshUSNUS5j5SO_11cbor_decode:
  120|    215|    pub const fn code(&self) -> u64 {
  121|    215|        self.code
  122|    215|    }
_RNvMs_NtCs3SheMB1K797_9multihash9multihashINtB4_9MultihashKj40_E4wrapCshUSNUS5j5SO_11cbor_decode:
  101|     23|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     23|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     23|        }
  105|     23|        let size = input_digest.len();
  106|     23|        let mut digest = [0; S];
  107|     23|        let mut i = 0;
  108|    759|        while i < size {
  109|    736|            digest[i] = input_digest[i];
  110|    736|            i += 1;
  111|    736|        }
  112|     23|        Ok(Self {
  113|     23|            code,
  114|     23|            size: size as u8,
  115|     23|            digest,
  116|     23|        })
  117|     23|    }
_RINvMs_NtCs3SheMB1K797_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
  163|    170|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    170|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    170|    }
_RINvMs_NtCs3SheMB1K797_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECshUSNUS5j5SO_11cbor_decode:
  135|    206|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    206|    where
  137|    206|        Self: Sized,
  138|    206|    {
  139|    206|        let (code, size, digest) = read_multihash(r)?;
  140|    177|        Ok(Self { code, size, digest })
  141|    206|    }
_RINvNtCs3SheMB1K797_9multihash9multihash15write_multihashQINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
  276|     22|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     22|where
  278|     22|    W: io::Write,
  279|     22|{
  280|     22|    let mut code_buf = varint_encode::u64_buffer();
  281|     22|    let code = varint_encode::u64(code, &mut code_buf);
  282|     22|
  283|     22|    let mut size_buf = varint_encode::u8_buffer();
  284|     22|    let size = varint_encode::u8(size, &mut size_buf);
  285|     22|
  286|     22|    w.write_all(code)?;
  287|     22|    w.write_all(size)?;
  288|     22|    w.write_all(digest)?;
  289|     22|    Ok(())
  290|     22|}
_RINvMs_NtCs3SheMB1K797_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
  163|     22|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     22|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     22|    }
_RNvMs_NtCs3SheMB1K797_9multihash9multihashINtB4_9MultihashKj40_E4sizeCshUSNUS5j5SO_11cbor_decode:
  125|    192|    pub const fn size(&self) -> u8 {
  126|    192|        self.size
  127|    192|    }

_RNvYNtNtNtCsuUTXBYQQxg_10fvm_shared7address8protocol8ProtocolNtNtCs2CapEENv5cf_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  1.65k|    fn from_u8(n: u8) -> Option<Self> {
  468|  1.65k|        FromPrimitive::from_u64(From::from(n))
  469|  1.65k|    }

_RNvMs2_NtCs2rJdSAR1Diy_9once_cell3impINtB5_8OnceCellNtNtCs86fObnVHsxx_5alloc6string6StringE14is_initializedCshUSNUS5j5SO_11cbor_decode:
   62|    500|    pub(crate) fn is_initialized(&self) -> bool {
   63|    500|        // An `Acquire` load is enough because that makes all the initialization
   64|    500|        // operations visible to us, and, this being a fast path, weaker
   65|    500|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    500|        // `SeqCst` operations on the slow path.
   67|    500|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    500|    }

_RNvMs4_NtCs2rJdSAR1Diy_9once_cell4syncINtB5_8OnceCellNtNtCs86fObnVHsxx_5alloc6string6StringE3getCshUSNUS5j5SO_11cbor_decode:
  869|    500|        pub fn get(&self) -> Option<&T> {
  870|    500|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    500|                None
  875|       |            }
  876|    500|        }

_RNvXs4_Cs47OOJmsLi3k_10scopeguardINtB5_10ScopeGuardQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsisyCJ07Ahai_4core3ops5deref8DerefMut9deref_mutCshUSNUS5j5SO_11cbor_decode:
  443|  1.01k|    fn deref_mut(&mut self) -> &mut T {
  444|  1.01k|        &mut *self.value
  445|  1.01k|    }
_RNvXCs47OOJmsLi3k_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|  1.01k|    fn should_run() -> bool { true }
_RNvMs1_Cs47OOJmsLi3k_10scopeguardINtB5_10ScopeGuardQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCshUSNUS5j5SO_11cbor_decode:
  317|  1.01k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|  1.01k|        ScopeGuard {
  319|  1.01k|            value: ManuallyDrop::new(v),
  320|  1.01k|            dropfn: ManuallyDrop::new(dropfn),
  321|  1.01k|            strategy: PhantomData,
  322|  1.01k|        }
  323|  1.01k|    }
_RNvXs5_Cs47OOJmsLi3k_10scopeguardINtB5_10ScopeGuardQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsisyCJ07Ahai_4core3ops4drop4Drop4dropCshUSNUS5j5SO_11cbor_decode:
  452|  1.01k|    fn drop(&mut self) {
  453|  1.01k|        // This is OK because the fields are `ManuallyDrop`s
  454|  1.01k|        // which will not be dropped by the compiler.
  455|  1.01k|        let (value, dropfn) = unsafe {
  456|  1.01k|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|  1.01k|        };
  458|  1.01k|        if S::should_run() {
  459|  1.01k|            dropfn(value);
  460|  1.01k|        }
  461|  1.01k|    }
_RINvCs47OOJmsLi3k_10scopeguard5guardQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEFBy_EuECshUSNUS5j5SO_11cbor_decode:
  367|  1.01k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|  1.01k|    where F: FnOnce(T)
  369|  1.01k|{
  370|  1.01k|    ScopeGuard::with_strategy(v, dropfn)
  371|  1.01k|}

_RINvXsV_NtNtCs7fqClrIfz6j_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  113|    467|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    467|            where
  115|    467|                D: Deserializer<'de>,
  116|    467|            {
  117|    467|                struct PrimitiveVisitor;
  118|    467|
  119|    467|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    467|                    type Value = $primitive;
  121|    467|
  122|    467|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    467|                        formatter.write_str(stringify!($primitive))
  124|    467|                    }
  125|    467|
  126|    467|                    $($($method!($val : $visit);)*)*
  127|    467|                }
  128|    467|
  129|    467|                deserializer.$deserialize(PrimitiveVisitor)
  130|    467|            }
_RINvXNvXsV_NtNtCs7fqClrIfz6j_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
  138|    454|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    454|        where
  140|    454|            E: Error,
  141|    454|        {
  142|    454|            Ok(v)
  143|    454|        }
_RINvXsh_NtNtCs7fqClrIfz6j_5serde2de5implsINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
 1014|    415|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    415|    where
 1016|    415|        D: Deserializer<'de>,
 1017|    415|    {
 1018|    415|        struct VecVisitor<T> {
 1019|    415|            marker: PhantomData<T>,
 1020|    415|        }
 1021|    415|
 1022|    415|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    415|        where
 1024|    415|            T: Deserialize<'de>,
 1025|    415|        {
 1026|    415|            type Value = Vec<T>;
 1027|    415|
 1028|    415|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    415|                formatter.write_str("a sequence")
 1030|    415|            }
 1031|    415|
 1032|    415|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    415|            where
 1034|    415|                A: SeqAccess<'de>,
 1035|    415|            {
 1036|    415|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    415|
 1038|    415|                while let Some(value) = try!(seq.next_element()) {
 1039|    415|                    values.push(value);
 1040|    415|                }
 1041|    415|
 1042|    415|                Ok(values)
 1043|    415|            }
 1044|    415|        }
 1045|    415|
 1046|    415|        let visitor = VecVisitor {
 1047|    415|            marker: PhantomData,
 1048|    415|        };
 1049|    415|        deserializer.deserialize_seq(visitor)
 1050|    415|    }
_RINvXNvXsh_NtNtCs7fqClrIfz6j_5serde2de5implsINtNtCs86fObnVHsxx_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
 1032|    412|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    412|            where
 1034|    412|                A: SeqAccess<'de>,
 1035|    412|            {
 1036|    412|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  1.62k|                while let Some(value) = try!(seq.next_element()) {
 1039|  1.21k|                    values.push(value);
 1040|  1.21k|                }
 1041|       |
 1042|    337|                Ok(values)
 1043|    412|            }

_RINvYNtNtCsfFhdSPSdA06_3cid5serde17BytesToCidVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor20visit_borrowed_bytesINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
 1563|    238|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    238|    where
 1565|    238|        E: Error,
 1566|    238|    {
 1567|    238|        self.visit_bytes(v)
 1568|    238|    }
_RINvYINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess12next_elementINtNtCsfFhdSPSdA06_3cid3cid3CidKj40_EECshUSNUS5j5SO_11cbor_decode:
 1723|    279|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    279|    where
 1725|    279|        T: Deserialize<'de>,
 1726|    279|    {
 1727|    279|        self.next_element_seed(PhantomData)
 1728|    279|    }
_RINvXs3_NtCs7fqClrIfz6j_5serde2deINtNtCsisyCJ07Ahai_4core6marker11PhantomDataINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  783|    415|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    415|    where
  785|    415|        D: Deserializer<'de>,
  786|    415|    {
  787|    415|        T::deserialize(deserializer)
  788|    415|    }
_RINvXs3_NtCs7fqClrIfz6j_5serde2deINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtCs9tztuBNvEou_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  783|    337|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    337|    where
  785|    337|        D: Deserializer<'de>,
  786|    337|    {
  787|    337|        T::deserialize(deserializer)
  788|    337|    }
_RINvYINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess12next_elementNtNtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECshUSNUS5j5SO_11cbor_decode:
 1723|    295|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    295|    where
 1725|    295|        T: Deserialize<'de>,
 1726|    295|    {
 1727|    295|        self.next_element_seed(PhantomData)
 1728|    295|    }
_RINvYNtNtCsfFhdSPSdA06_3cid5serde17BytesToCidVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor14visit_byte_bufINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
 1587|      5|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1588|      5|    where
 1589|      5|        E: Error,
 1590|      5|    {
 1591|      5|        self.visit_bytes(&v)
 1592|      5|    }
_RINvXs3_NtCs7fqClrIfz6j_5serde2deINtNtCsisyCJ07Ahai_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  783|    467|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    467|    where
  785|    467|        D: Deserializer<'de>,
  786|    467|    {
  787|    467|        T::deserialize(deserializer)
  788|    467|    }
_RINvXs3_NtCs7fqClrIfz6j_5serde2deINtNtCsisyCJ07Ahai_4core6marker11PhantomDataINtNtCsfFhdSPSdA06_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  783|    279|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    279|    where
  785|    279|        D: Deserializer<'de>,
  786|    279|    {
  787|    279|        T::deserialize(deserializer)
  788|    279|    }
_RINvXs3_NtCs7fqClrIfz6j_5serde2deINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  783|    575|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    575|    where
  785|    575|        D: Deserializer<'de>,
  786|    575|    {
  787|    575|        T::deserialize(deserializer)
  788|    575|    }
_RINvYNtNtCs5nJIgUfg6sx_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs7fqClrIfz6j_5serde2de7Visitor20visit_borrowed_bytesINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEECshUSNUS5j5SO_11cbor_decode:
 1563|    732|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    732|    where
 1565|    732|        E: Error,
 1566|    732|    {
 1567|    732|        self.visit_bytes(v)
 1568|    732|    }
_RINvYINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess12next_elementNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressECshUSNUS5j5SO_11cbor_decode:
 1723|  2.08k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  2.08k|    where
 1725|  2.08k|        T: Deserialize<'de>,
 1726|  2.08k|    {
 1727|  2.08k|        self.next_element_seed(PhantomData)
 1728|  2.08k|    }
_RINvXs3_NtCs7fqClrIfz6j_5serde2deINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  783|  1.73k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  1.73k|    where
  785|  1.73k|        D: Deserializer<'de>,
  786|  1.73k|    {
  787|  1.73k|        T::deserialize(deserializer)
  788|  1.73k|    }
_RINvYINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess12next_elementyECshUSNUS5j5SO_11cbor_decode:
 1723|    467|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    467|    where
 1725|    467|        T: Deserialize<'de>,
 1726|    467|    {
 1727|    467|        self.next_element_seed(PhantomData)
 1728|    467|    }
_RINvYINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess12next_elementNtCs9tztuBNvEou_17fvm_ipld_bitfield8BitFieldECshUSNUS5j5SO_11cbor_decode:
 1723|    337|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    337|    where
 1725|    337|        T: Deserialize<'de>,
 1726|    337|    {
 1727|    337|        self.next_element_seed(PhantomData)
 1728|    337|    }
_RINvXs3_NtCs7fqClrIfz6j_5serde2deINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtNtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  783|    295|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    295|    where
  785|    295|        D: Deserializer<'de>,
  786|    295|    {
  787|    295|        T::deserialize(deserializer)
  788|    295|    }
_RINvYINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECshUSNUS5j5SO_11cbor_decode:
 1723|    575|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    575|    where
 1725|    575|        T: Deserialize<'de>,
 1726|    575|    {
 1727|    575|        self.next_element_seed(PhantomData)
 1728|    575|    }
_RINvYINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess12next_elementINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEECshUSNUS5j5SO_11cbor_decode:
 1723|    415|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    415|    where
 1725|    415|        T: Deserialize<'de>,
 1726|    415|    {
 1727|    415|        self.next_element_seed(PhantomData)
 1728|    415|    }

_RNvNtNtCs7fqClrIfz6j_5serde9___private9size_hint8cautiousCshUSNUS5j5SO_11cbor_decode:
   12|    412|pub fn cautious(hint: Option<usize>) -> usize {
   13|    412|    cmp::min(hint.unwrap_or(0), 4096)
   14|    412|}

_RINvXs1E_NtNtCs7fqClrIfz6j_5serde3ser5implsRNtNtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  386|    192|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    192|            where
  388|    192|                S: Serializer,
  389|    192|            {
  390|    192|                (**self).serialize(serializer)
  391|    192|            }
_RINvXs1k_NtNtCs7fqClrIfz6j_5serde3ser5implsINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  194|    192|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    192|            where
  196|    192|                S: Serializer,
  197|    192|            {
  198|    192|                serializer.collect_seq(self)
  199|    192|            }
_RINvXs1E_NtNtCs7fqClrIfz6j_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  386|    192|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    192|            where
  388|    192|                S: Serializer,
  389|    192|            {
  390|    192|                (**self).serialize(serializer)
  391|    192|            }
_RINvXs1E_NtNtCs7fqClrIfz6j_5serde3ser5implsRINtNtCsfFhdSPSdA06_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  386|    192|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    192|            where
  388|    192|                S: Serializer,
  389|    192|            {
  390|    192|                (**self).serialize(serializer)
  391|    192|            }
_RINvXs1E_NtNtCs7fqClrIfz6j_5serde3ser5implsRNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  386|    412|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    412|            where
  388|    412|                S: Serializer,
  389|    412|            {
  390|    412|                (**self).serialize(serializer)
  391|    412|            }
_RINvXsE_NtNtCs7fqClrIfz6j_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   11|    192|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    192|            where
   13|    192|                S: Serializer,
   14|    192|            {
   15|    192|                serializer.$method(*self $($cast)*)
   16|    192|            }
_RINvXs1E_NtNtCs7fqClrIfz6j_5serde3ser5implsRNtCs9tztuBNvEou_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  386|    192|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    192|            where
  388|    192|                S: Serializer,
  389|    192|            {
  390|    192|                (**self).serialize(serializer)
  391|    192|            }
_RINvXs1E_NtNtCs7fqClrIfz6j_5serde3ser5implsRINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  386|    192|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    192|            where
  388|    192|                S: Serializer,
  389|    192|            {
  390|    192|                (**self).serialize(serializer)
  391|    192|            }

_RNCINvYQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer11collect_seqRINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEE0CshUSNUS5j5SO_11cbor_decode:
 1286|    220|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer11collect_seqRINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEECshUSNUS5j5SO_11cbor_decode:
 1275|    192|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    192|    where
 1277|    192|        I: IntoIterator,
 1278|    192|        <I as IntoIterator>::Item: Serialize,
 1279|    192|    {
 1280|    192|        let iter = iter.into_iter();
 1281|    192|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    192|            let mut iter = iter;
 1286|    192|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    192|        serializer.end()
 1297|    192|    }
_RINvNtCs7fqClrIfz6j_5serde3ser17iterator_len_hintINtNtNtCsisyCJ07Ahai_4core5slice4iter4IterNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEECshUSNUS5j5SO_11cbor_decode:
 1982|    192|    match iter.size_hint() {
 1983|    192|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    192|}

_RINvMNtCsfPYYoIzcgWo_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs86fObnVHsxx_5alloc3vec3VechEECshUSNUS5j5SO_11cbor_decode:
   60|    192|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    192|        ByteBuf {
   62|    192|            bytes: bytes.into(),
   63|    192|        }
   64|    192|    }
_RINvXsc_NtCsfPYYoIzcgWo_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  186|    192|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    192|    where
  188|    192|        S: Serializer,
  189|    192|    {
  190|    192|        serializer.serialize_bytes(&self.bytes)
  191|    192|    }

_RINvNtCs5hsQu4hLbDD_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderECshUSNUS5j5SO_11cbor_decode:
   26|  1.10k|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|  1.10k|    let buf = match reader.fill(1)? {
   28|  1.10k|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|  1.10k|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    904|    Ok(byte)
   33|  1.10k|}

_RINvMs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCsfFhdSPSdA06_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECshUSNUS5j5SO_11cbor_decode:
  113|    279|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    279|    where
  115|    279|        V: Visitor<'de>,
  116|    279|    {
  117|    279|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    271|        match tag.0 {
  120|    259|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|     12|            _ => Err(DecodeError::TypeMismatch {
  122|     12|                name: "CBOR tag",
  123|     12|                byte: tag.0 as u8,
  124|     12|            }),
  125|       |        }
  126|    279|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess17next_element_seedINtNtCsisyCJ07Ahai_4core6marker11PhantomDataINtNtCsfFhdSPSdA06_3cid3cid3CidKj40_EEECshUSNUS5j5SO_11cbor_decode:
  484|    279|        if let Some(len) = self.len.as_mut() {
  485|    279|            if *len > 0 {
  486|    279|                *len -= 1;
  487|    279|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    279|    }
_RINvXs7_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer17deserialize_bytesNtNtCsfFhdSPSdA06_3cid5serde17BytesToCidVisitorECshUSNUS5j5SO_11cbor_decode:
  646|    259|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    259|        let byte = peek_one(&mut self.0.reader)?;
  648|    258|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    257|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    241|                    Cow::Borrowed(buf) => {
  653|    241|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      3|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    238|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      9|                    Cow::Owned(mut buf) => {
  660|      9|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      4|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      5|                            buf.remove(0);
  664|      5|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      1|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    259|    }
_RNCNvMs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderE8try_step0CshUSNUS5j5SO_11cbor_decode:
  106|  1.01k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RNvMs1_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderE5tupleCshUSNUS5j5SO_11cbor_decode:
  443|    596|    pub fn tuple(
  444|    596|        de: &'a mut Deserializer<R>,
  445|    596|        len: usize,
  446|    596|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    596|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    589|        if array_start.0 == Some(len) {
  450|    575|            Ok(Accessor {
  451|    575|                de,
  452|    575|                len: array_start.0,
  453|    575|            })
  454|       |        } else {
  455|     14|            Err(DecodeError::RequireLength {
  456|     14|                name: "tuple",
  457|     14|                expect: len,
  458|     14|                value: array_start.0.unwrap_or(0),
  459|     14|            })
  460|       |        }
  461|    596|    }
_RNvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess9size_hintCshUSNUS5j5SO_11cbor_decode:
  500|    412|    fn size_hint(&self) -> Option<usize> {
  501|    412|        self.len
  502|    412|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCsfFhdSPSdA06_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECshUSNUS5j5SO_11cbor_decode:
  318|    279|    fn deserialize_newtype_struct<V>(
  319|    279|        self,
  320|    279|        name: &'static str,
  321|    279|        visitor: V,
  322|    279|    ) -> Result<V::Value, Self::Error>
  323|    279|    where
  324|    279|        V: Visitor<'de>,
  325|    279|    {
  326|    279|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    279|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    279|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess17next_element_seedINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEECshUSNUS5j5SO_11cbor_decode:
  484|  2.08k|        if let Some(len) = self.len.as_mut() {
  485|  1.43k|            if *len > 0 {
  486|  1.10k|                *len -= 1;
  487|  1.10k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    336|                Ok(None)
  490|       |            }
  491|    647|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|    638|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      1|            self.de.reader.advance(1);
  495|      1|            Ok(None)
  496|       |        }
  497|  2.08k|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess17next_element_seedINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECshUSNUS5j5SO_11cbor_decode:
  484|    575|        if let Some(len) = self.len.as_mut() {
  485|    575|            if *len > 0 {
  486|    575|                *len -= 1;
  487|    575|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    575|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECshUSNUS5j5SO_11cbor_decode:
  354|    596|    fn deserialize_tuple_struct<V>(
  355|    596|        self,
  356|    596|        _name: &'static str,
  357|    596|        len: usize,
  358|    596|        visitor: V,
  359|    596|    ) -> Result<V::Value, Self::Error>
  360|    596|    where
  361|    596|        V: Visitor<'de>,
  362|    596|    {
  363|    596|        self.deserialize_tuple(len, visitor)
  364|    596|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCs86fObnVHsxx_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEECshUSNUS5j5SO_11cbor_decode:
  334|    415|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    415|    where
  336|    415|        V: Visitor<'de>,
  337|    415|    {
  338|    415|        let mut de = self.try_step()?;
  339|    415|        let seq = Accessor::array(&mut de)?;
  340|    412|        visitor.visit_seq(seq)
  341|    415|    }
_RINvNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de10from_sliceNtNtCs4lVXOPUBl9F_11common_fuzz4cbor7PayloadECshUSNUS5j5SO_11cbor_decode:
   40|    596|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    596|where
   42|    596|    T: de::Deserialize<'a>,
   43|    596|{
   44|    596|    let reader = SliceReader::new(buf);
   45|    596|    let mut deserializer = Deserializer::from_reader(reader);
   46|    596|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    199|    deserializer.end()?;
   48|    192|    Ok(value)
   49|    596|}
_RNvMs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderE8try_stepCshUSNUS5j5SO_11cbor_decode:
  101|  1.01k|    fn try_step<'a>(
  102|  1.01k|        &'a mut self,
  103|  1.01k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|  1.01k|    {
  105|  1.01k|        if self.reader.step_in() {
  106|  1.01k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|  1.01k|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer20deserialize_byte_bufNtNtCs5nJIgUfg6sx_14cs_serde_bytes7bytebuf14ByteBufVisitorECshUSNUS5j5SO_11cbor_decode:
  239|    870|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    870|    where
  241|    870|        V: Visitor<'de>,
  242|    870|    {
  243|    870|        self.deserialize_bytes(visitor)
  244|    870|    }
_RNvMNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderE11from_readerCshUSNUS5j5SO_11cbor_decode:
   93|    596|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    596|        Deserializer { reader }
   95|    596|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess17next_element_seedINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtNtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECshUSNUS5j5SO_11cbor_decode:
  484|    295|        if let Some(len) = self.len.as_mut() {
  485|    295|            if *len > 0 {
  486|    295|                *len -= 1;
  487|    295|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    295|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess17next_element_seedINtNtCsisyCJ07Ahai_4core6marker11PhantomDataNtCs9tztuBNvEou_17fvm_ipld_bitfield8BitFieldEECshUSNUS5j5SO_11cbor_decode:
  484|    337|        if let Some(len) = self.len.as_mut() {
  485|    337|            if *len > 0 {
  486|    337|                *len -= 1;
  487|    337|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    337|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess17next_element_seedINtNtCsisyCJ07Ahai_4core6marker11PhantomDataINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEEECshUSNUS5j5SO_11cbor_decode:
  484|    415|        if let Some(len) = self.len.as_mut() {
  485|    415|            if *len > 0 {
  486|    415|                *len -= 1;
  487|    415|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    415|    }
_RNvMs1_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderE5arrayCshUSNUS5j5SO_11cbor_decode:
  434|    415|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    415|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    412|        Ok(Accessor {
  437|    412|            de,
  438|    412|            len: array_start.0,
  439|    412|        })
  440|    415|    }
_RNvMs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderE3endCshUSNUS5j5SO_11cbor_decode:
  131|    199|        match peek_one(&mut self.reader) {
  132|      7|            Ok(_) => Err(DecodeError::TrailingData),
  133|    192|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    199|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECshUSNUS5j5SO_11cbor_decode:
  142|    467|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    467|        where V: Visitor<'de>
  144|    467|        {
  145|    467|            let value = <$t>::decode(&mut self.reader)?;
  146|    454|            visitor.$visit(value)
  147|    467|        }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs5nJIgUfg6sx_14cs_serde_bytes2deINtNtCs86fObnVHsxx_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECshUSNUS5j5SO_11cbor_decode:
  228|  2.07k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  2.07k|    where
  230|  2.07k|        V: Visitor<'de>,
  231|  2.07k|    {
  232|  2.07k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  1.91k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     83|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  2.07k|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECshUSNUS5j5SO_11cbor_decode:
  344|    596|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    596|    where
  346|    596|        V: Visitor<'de>,
  347|    596|    {
  348|    596|        let mut de = self.try_step()?;
  349|    596|        let seq = Accessor::tuple(&mut de, len)?;
  350|    575|        visitor.visit_seq(seq)
  351|    596|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de12Deserializer17deserialize_bytesNtNtCs5nJIgUfg6sx_14cs_serde_bytes7bytebuf14ByteBufVisitorECshUSNUS5j5SO_11cbor_decode:
  228|    870|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    870|    where
  230|    870|        V: Visitor<'de>,
  231|    870|    {
  232|    870|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    732|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     14|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    870|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderENtNtCs7fqClrIfz6j_5serde2de9SeqAccess17next_element_seedINtNtCsisyCJ07Ahai_4core6marker11PhantomDatayEECshUSNUS5j5SO_11cbor_decode:
  484|    467|        if let Some(len) = self.len.as_mut() {
  485|    467|            if *len > 0 {
  486|    467|                *len -= 1;
  487|    467|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    467|    }

_RINvXs4_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleENtNtCs7fqClrIfz6j_5serde2de5Error6customNtNtNtCsuUTXBYQQxg_10fvm_shared7address6errors5ErrorECshUSNUS5j5SO_11cbor_decode:
  134|     33|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     33|        DecodeError::Msg(msg.to_string())
  136|     33|    }
_RNvXs9_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCshUSNUS5j5SO_11cbor_decode:
   70|    404|#[derive(Debug)]
_RINvXs4_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleENtNtCs7fqClrIfz6j_5serde2de5Error6customNtNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus5error5ErrorECshUSNUS5j5SO_11cbor_decode:
  134|     36|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     36|        DecodeError::Msg(msg.to_string())
  136|     36|    }
_RINvXs4_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleENtNtCs7fqClrIfz6j_5serde2de5Error6customNtNtCs86fObnVHsxx_5alloc6string6StringECshUSNUS5j5SO_11cbor_decode:
  134|     44|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     44|        DecodeError::Msg(msg.to_string())
  136|     44|    }
_RNvXs6_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCshUSNUS5j5SO_11cbor_decode:
  161|    404|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  162|    404|        fmt::Debug::fmt(self, f)
  163|    404|    }
_RNvXs7_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsisyCJ07Ahai_4core7convert10InfallibleEINtB16_4FromINtNtCskOJHTXoxdkM_7cbor4ii5error11DecodeErrorB14_EE4fromCshUSNUS5j5SO_11cbor_decode:
  167|    241|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  168|    241|        match err {
  169|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  170|    177|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  171|     63|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  172|     63|                DecodeError::Mismatch { expect_major, byte }
  173|       |            }
  174|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  175|      0|                DecodeError::TypeMismatch { name, byte }
  176|       |            }
  177|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  178|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  179|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  180|       |            cbor4ii::DecodeError::RequireLength {
  181|      0|                name,
  182|      0|                expect,
  183|      0|                value,
  184|      0|            } => DecodeError::RequireLength {
  185|      0|                name,
  186|      0|                expect,
  187|      0|                value,
  188|      0|            },
  189|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  190|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  191|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  192|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  193|      0|            _ => DecodeError::Msg(err.to_string()),
  194|       |        }
  195|    241|    }

_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct15serialize_fieldRyECshUSNUS5j5SO_11cbor_decode:
  403|    192|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    192|        value.serialize(&mut *self.ser)
  405|    192|    }
_RNvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct3endCshUSNUS5j5SO_11cbor_decode:
  408|    192|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    192|        Ok(())
  410|    192|    }
_RNvXs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer15serialize_bytesCshUSNUS5j5SO_11cbor_decode:
  160|    988|        types::Bytes(v).encode(&mut self.writer)?;
  161|    988|        Ok(())
  162|    988|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressECshUSNUS5j5SO_11cbor_decode:
  403|    192|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    192|        value.serialize(&mut *self.ser)
  405|    192|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECshUSNUS5j5SO_11cbor_decode:
  403|    192|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    192|        value.serialize(&mut *self.ser)
  405|    192|    }
_RINvNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser6to_vecNtNtCs4lVXOPUBl9F_11common_fuzz4cbor7PayloadECshUSNUS5j5SO_11cbor_decode:
   23|    192|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    192|where
   25|    192|    T: Serialize + ?Sized,
   26|    192|{
   27|    192|    let writer = BufWriter::new(Vec::new());
   28|    192|    let mut serializer = Serializer::new(writer);
   29|    192|    value.serialize(&mut serializer)?;
   30|    192|    Ok(serializer.into_inner().into_inner())
   31|    192|}
_RNvXs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer13serialize_seqCshUSNUS5j5SO_11cbor_decode:
  226|    192|        if let Some(len) = len {
  227|    192|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    192|        Ok(Collect {
  232|    192|            bounded: len.is_some(),
  233|    192|            ser: self,
  234|    192|        })
  235|    192|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsfFhdSPSdA06_3cid3cid3CidKj40_EECshUSNUS5j5SO_11cbor_decode:
  403|    192|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    192|        value.serialize(&mut *self.ser)
  405|    192|    }
_RINvXs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer24serialize_newtype_structNtNtCsfPYYoIzcgWo_11serde_bytes7bytebuf7ByteBufECshUSNUS5j5SO_11cbor_decode:
  199|    192|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    192|        self,
  201|    192|        name: &'static str,
  202|    192|        value: &T,
  203|    192|    ) -> Result<Self::Ok, Self::Error> {
  204|    192|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    192|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    192|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs86fObnVHsxx_5alloc3vec3VecNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressEECshUSNUS5j5SO_11cbor_decode:
  403|    192|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    192|        value.serialize(&mut *self.ser)
  405|    192|    }
_RNvMNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterE10into_innerCshUSNUS5j5SO_11cbor_decode:
   56|    192|    pub fn into_inner(self) -> W {
   57|    192|        self.writer
   58|    192|    }
_RNvXs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer22serialize_tuple_structCshUSNUS5j5SO_11cbor_decode:
  244|    192|    fn serialize_tuple_struct(
  245|    192|        self,
  246|    192|        _name: &'static str,
  247|    192|        len: usize,
  248|    192|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    192|        self.serialize_tuple(len)
  250|    192|    }
_RNvMNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterE3newCshUSNUS5j5SO_11cbor_decode:
   51|    192|    pub fn new(writer: W) -> Serializer<W> {
   52|    192|        Serializer { writer }
   53|    192|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCs4lVXOPUBl9F_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECshUSNUS5j5SO_11cbor_decode:
  403|    192|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    192|        value.serialize(&mut *self.ser)
  405|    192|    }
_RNvXs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer13serialize_u64CshUSNUS5j5SO_11cbor_decode:
  123|    192|        v.encode(&mut self.writer)?;
  124|    192|        Ok(())
  125|    192|    }
_RNvXs7_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer15serialize_bytesCshUSNUS5j5SO_11cbor_decode:
  550|    192|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    192|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    192|        let prefixed = [&[0x00], value].concat();
  553|    192|        // CIDs are serialized with CBOR tag 42.
  554|    192|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    192|        Ok(())
  556|    192|    }
_RINvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser12SerializeSeq17serialize_elementRNtNtCsuUTXBYQQxg_10fvm_shared7address7AddressECshUSNUS5j5SO_11cbor_decode:
  369|    220|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    220|        value.serialize(&mut *self.ser)
  371|    220|    }
_RNvXs0_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser12SerializeSeq3endCshUSNUS5j5SO_11cbor_decode:
  374|    192|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    192|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    192|        }
  378|       |
  379|    192|        Ok(())
  380|    192|    }
_RINvXs2_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCs9tztuBNvEou_17fvm_ipld_bitfield8BitFieldECshUSNUS5j5SO_11cbor_decode:
  403|    192|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    192|        value.serialize(&mut *self.ser)
  405|    192|    }
_RNvXs_NtCs5hsQu4hLbDD_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterENtNtCs7fqClrIfz6j_5serde3ser10Serializer15serialize_tupleCshUSNUS5j5SO_11cbor_decode:
  239|    192|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    192|        Ok(BoundedCollect { ser: self })
  241|    192|    }

_RINvXs_Cs2Q8WwvXamKY_11serde_tupleINtB5_12DeserializerQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEENtNtCs7fqClrIfz6j_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECshUSNUS5j5SO_11cbor_decode:
  353|    596|    fn deserialize_tuple_struct<V>(
  354|    596|        self,
  355|    596|        name: &'static str,
  356|    596|        len: usize,
  357|    596|        visitor: V,
  358|    596|    ) -> Result<V::Value, Self::Error>
  359|    596|    where
  360|    596|        V: serde::de::Visitor<'de>,
  361|    596|    {
  362|    596|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    596|    }
_RNvXCs2Q8WwvXamKY_11serde_tupleINtB2_10SerializerQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEENtNtCs7fqClrIfz6j_5serde3ser10Serializer22serialize_tuple_structCshUSNUS5j5SO_11cbor_decode:
  158|    192|    fn serialize_tuple_struct(
  159|    192|        self,
  160|    192|        name: &'static str,
  161|    192|        len: usize,
  162|    192|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    192|        self.0.serialize_tuple_struct(name, len)
  164|    192|    }

_RNvXNtCsePpK0EFndyI_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCsuUTXBYQQxg_10fvm_shared:
    9|      3|    fn as_display(&self) -> Self {
   10|      3|        self
   11|      3|    }

_RNvNtCs9uot4vS7CsG_15unsigned_varint6decode3u64CshUSNUS5j5SO_11cbor_decode:
  122|    871|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    871|    decode!(buf, 9, u64)
  124|    871|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6decode7is_lastCshUSNUS5j5SO_11cbor_decode:
   90|  3.88k|pub fn is_last(b: u8) -> bool {
   91|  3.88k|    b & 0x80 == 0
   92|  3.88k|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6decode3u64CsuUTXBYQQxg_10fvm_shared:
  122|    413|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    413|    decode!(buf, 9, u64)
  124|    413|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6decode7is_lastCsuUTXBYQQxg_10fvm_shared:
   90|  2.42k|pub fn is_last(b: u8) -> bool {
   91|  2.42k|    b & 0x80 == 0
   92|  2.42k|}

_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode3u64CshUSNUS5j5SO_11cbor_decode:
   69|    532|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    532|    encode!(number, buf)
   71|    532|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode2u8CshUSNUS5j5SO_11cbor_decode:
   45|    192|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    192|    encode!(number, buf)
   47|    192|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode9u8_bufferCshUSNUS5j5SO_11cbor_decode:
  101|    192|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    192|    [0; U8_LEN]
  103|    192|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode10u64_bufferCshUSNUS5j5SO_11cbor_decode:
  119|  1.42k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.42k|    [0; U64_LEN]
  121|  1.42k|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode10u64_bufferCsuUTXBYQQxg_10fvm_shared:
  119|    142|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    142|    [0; U64_LEN]
  121|    142|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode3u64CsuUTXBYQQxg_10fvm_shared:
   69|    142|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    142|    encode!(number, buf)
   71|    142|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode3u64Cs9tztuBNvEou_17fvm_ipld_bitfield:
   69|  9.59k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  9.59k|    encode!(number, buf)
   71|  9.59k|}
_RNvNtCs9uot4vS7CsG_15unsigned_varint6encode10u64_bufferCs9tztuBNvEou_17fvm_ipld_bitfield:
  119|  9.59k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  9.59k|    [0; U64_LEN]
  121|  9.59k|}

_RINvNtCs9uot4vS7CsG_15unsigned_varint2io8read_u64QQRShECshUSNUS5j5SO_11cbor_decode:
   31|    891|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    891|                let mut b = encode::$b();
   33|  2.01k|                for i in 0 .. b.len() {
   34|  2.01k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  2.01k|                    if n == 0 {
   36|     16|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  2.00k|                    }
   38|  2.00k|                    if decode::is_last(b[i]) {
   39|    871|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.12k|                    }
   41|       |                }
   42|      4|                Err(decode::Error::Overflow.into())
   43|    891|            }
_RNvXs1_NtCs9uot4vS7CsG_15unsigned_varint2ioNtB5_9ReadErrorINtNtCsisyCJ07Ahai_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|     11|    fn from(e: decode::Error) -> Self {
   92|     11|        ReadError::Decode(e)
   93|     11|    }

_RNvMs8_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  9.74k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  9.74k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  9.55k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    192|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  9.55k|        if advance_lhs {
  370|  9.55k|            self.lhs.next();
  371|  9.55k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  9.55k|        range
  376|  9.74k|    }
_RNCNvXs9_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  9.55k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    192|    fn new(mut iter: I) -> Self {
  468|    192|        let next = iter.next();
  469|    192|        Self { iter, next }
  470|    192|    }
_RNvMsa_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    192|    pub fn new(iter: I) -> Self {
  425|    192|        Self {
  426|    192|            iter: Lookahead::new(iter),
  427|    192|        }
  428|    192|    }
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    192|    fn new(mut iter: I) -> Self {
  468|    192|        let next = iter.next();
  469|    192|        Self { iter, next }
  470|    192|    }
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|    384|    fn new(mut iter: I) -> Self {
  468|    384|        let next = iter.next();
  469|    384|        Self { iter, next }
  470|    384|    }
_RNvXsb_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  438|  9.74k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  9.55k|        while let Some(next) = self.iter.peek() {
  443|  9.37k|            if next.start > range.end {
  444|  9.37k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  9.55k|        Some(range)
  452|  9.74k|    }
_RNCNvXs9_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  9.74k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  9.55k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    192|    fn new(mut iter: I) -> Self {
  468|    192|        let next = iter.next();
  469|    192|        Self { iter, next }
  470|    192|    }
_RNvXse_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  9.74k|        let next = self.next.take()?;
  483|  9.55k|        self.next = self.iter.next();
  484|  9.55k|        Some(next)
  485|  9.74k|    }
_RNvXs6_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  311|  9.74k|        self.0.next()
  312|  9.74k|    }
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  9.74k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  9.74k|        self.next.as_mut()
  474|  9.74k|    }
_RNvXse_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  9.55k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  9.55k|        let next = self.next.take()?;
  483|  9.55k|        self.next = self.iter.next();
  484|  9.55k|        Some(next)
  485|  9.55k|    }
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  19.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  19.4k|        self.next.as_mut()
  474|  19.4k|    }
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  9.55k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  9.55k|        self.next.as_mut()
  474|  9.55k|    }
_RNvXs9_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  388|  9.74k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  9.74k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  9.74k|    }
_RNvMs8_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    192|    fn new(lhs: A, rhs: B) -> Self {
  343|    192|        Self {
  344|    192|            lhs: Lookahead::new(lhs),
  345|    192|            rhs: Lookahead::new(rhs),
  346|    192|            combinator: Default::default(),
  347|    192|        }
  348|    192|    }
_RNvXsh_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsisyCJ07Ahai_4core7default7Default7defaultB9_:
  151|    192|#[derive(Default)]
_RNvXse_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  9.74k|        let next = self.next.take()?;
  483|  9.55k|        self.next = self.iter.next();
  484|  9.55k|        Some(next)
  485|  9.74k|    }
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  9.74k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  9.74k|        self.next.as_mut()
  474|  9.74k|    }
_RNvXs9_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  388|  9.74k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  9.74k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  9.74k|    }
_RNvXse_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  9.55k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  9.55k|        let next = self.next.take()?;
  483|  9.55k|        self.next = self.iter.next();
  484|  9.55k|        Some(next)
  485|  9.55k|    }
_RNvMs8_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    192|    fn new(lhs: A, rhs: B) -> Self {
  343|    192|        Self {
  344|    192|            lhs: Lookahead::new(lhs),
  345|    192|            rhs: Lookahead::new(rhs),
  346|    192|            combinator: Default::default(),
  347|    192|        }
  348|    192|    }
_RNvXs6_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  311|  9.74k|        self.0.next()
  312|  9.74k|    }
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    192|    fn new(mut iter: I) -> Self {
  468|    192|        let next = iter.next();
  469|    192|        Self { iter, next }
  470|    192|    }
_RNvXs0_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  9.55k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  9.55k|        // the difference between a range and an empty range is just that range
  183|  9.55k|        Some(lhs)
  184|  9.55k|    }
_RNvMs5_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    192|    pub fn new(a: A, b: B) -> Self {
  298|    192|        Self(Merge::new(_Combine::new(a, b)))
  299|    192|    }
_RNvMs8_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  9.74k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  9.74k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  9.55k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    192|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  9.55k|        if advance_lhs {
  370|  9.55k|            self.lhs.next();
  371|  9.55k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  9.55k|        range
  376|  9.74k|    }
_RNvXNtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  9.55k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  9.55k|        // the union of a range and an empty range is just that range
  111|  9.55k|        Some(lhs)
  112|  9.55k|    }
_RNCNvXs9_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  9.74k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  9.55k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  9.55k|        self.next.as_mut()
  474|  9.55k|    }
_RNvXsb_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  438|  9.74k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  9.55k|        while let Some(next) = self.iter.peek() {
  443|  9.37k|            if next.start > range.end {
  444|  9.37k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  9.55k|        Some(range)
  452|  9.74k|    }
_RNvXsf_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsisyCJ07Ahai_4core7default7Default7defaultB9_:
   86|    192|#[derive(Default)]
_RNvMsa_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    192|    pub fn new(iter: I) -> Self {
  425|    192|        Self {
  426|    192|            iter: Lookahead::new(iter),
  427|    192|        }
  428|    192|    }
_RNvMs5_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    192|    pub fn new(a: A, b: B) -> Self {
  298|    192|        Self(Merge::new(_Combine::new(a, b)))
  299|    192|    }

_RINvMs2_NtCs9tztuBNvEou_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    192|    pub fn new<II>(iter: II) -> Self
  140|    192|    where
  141|    192|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    192|    {
  143|    192|        Self(iter.into_iter())
  144|    192|    }
_RNvXs3_NtCs9tztuBNvEou_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|    384|    fn next(&mut self) -> Option<Self::Item> {
  154|    384|        self.0.next()
  155|    384|    }
_RNvXs3_NtCs9tztuBNvEou_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  9.74k|    fn next(&mut self) -> Option<Self::Item> {
  154|  9.74k|        self.0.next()
  155|  9.74k|    }
_RNCINvNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0B6_:
  166|    384|    Ranges::new(iter::from_fn(move || {
  167|    384|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|    384|    }))
_RINvNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEEB4_:
  163|    384|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|    384|    let mut iter = bits.into_iter().peekable();
  165|    384|
  166|    384|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|    384|    }))
  180|    384|}
_RINvMs2_NtCs9tztuBNvEou_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|    384|    pub fn new<II>(iter: II) -> Self
  140|    384|    where
  141|    384|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    384|    {
  143|    384|        Self(iter.into_iter())
  144|    384|    }
_RINvYINtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    192|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    192|        Combine::new(self, other)
   23|    192|    }
_RINvYINtNtNtCs9tztuBNvEou_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsisyCJ07Ahai_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs86fObnVHsxx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    192|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    192|        Combine::new(self, other)
   33|    192|    }

_RNvXsi_Cs9tztuBNvEou_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsisyCJ07Ahai_4core7default7Default7defaultB5_:
   42|    295|#[derive(Debug, Default, Clone)]
_RNvMs4_Cs9tztuBNvEou_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    192|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    192|        self.inner_ranges()
  287|    192|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    192|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    192|    }
_RNvMs4_Cs9tztuBNvEou_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    192|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    192|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    192|    }

_RNvXNtCs9tztuBNvEou_17fvm_ipld_bitfield5rangeINtNtNtCsisyCJ07Ahai_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  9.55k|    fn size(&self) -> Self::Idx {
   15|  9.55k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  9.55k|            self.end - self.start
   19|       |        }
   20|  9.55k|    }

_RNvXs5_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCsisyCJ07Ahai_4core3fmt7Display3fmt:
    3|     36|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   81|    192|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    192|    where
   83|    192|        S: Serializer,
   84|    192|    {
   85|    192|        let bytes = self.to_bytes();
   86|    192|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    192|        }
   92|    192|        serde_bytes::serialize(&bytes, serializer)
   93|    192|    }
_RINvXs_NtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   97|    337|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    337|    where
   99|    337|        D: Deserializer<'de>,
  100|    337|    {
  101|    337|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    331|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    331|        }
  108|    331|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    337|    }
_RNvMs1_NtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    192|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    192|        let mut iter = self.ranges();
  201|       |
  202|    192|        let first_range = match iter.next() {
  203|    184|            Some(range) => range,
  204|      8|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    184|        let mut writer = BitWriter::new();
  208|    184|        writer.write(0, 2); // version 00
  209|    184|
  210|    184|        if first_range.start == 0 {
  211|    100|            writer.write(1, 1); // the first bit is a 1
  212|    100|        } else {
  213|     84|            writer.write(0, 1); // the first bit is a 0
  214|     84|            writer.write_len(first_range.start); // the number of leading 0s
  215|     84|        }
  216|       |
  217|    184|        writer.write_len(first_range.size());
  218|    184|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  9.55k|        for range in iter {
  223|  9.37k|            writer.write_len(range.start - index); // zeros
  224|  9.37k|            writer.write_len(range.size()); // ones
  225|  9.37k|            index = range.end;
  226|  9.37k|        }
  227|       |
  228|    184|        writer.finish()
  229|    192|    }
_RNvMs1_NtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    331|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    331|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    330|        let version = reader.read(2);
  160|    330|        if version != 0 {
  161|      1|            return Err(Error::UnsupportedVersion);
  162|    329|        }
  163|    329|
  164|    329|        let mut next_value = reader.read(1) == 1;
  165|    329|        let mut ranges = Vec::new();
  166|    329|        let mut index = 0u64;
  167|    329|        let mut total_len: u64 = 0;
  168|       |
  169|  29.2k|        while let Some(len) = reader.read_len()? {
  170|  28.9k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  28.9k|            if ovf {
  172|      1|                return Err(Error::RLEOverflow);
  173|  28.9k|            }
  174|  28.9k|            total_len = new_total_len;
  175|  28.9k|            let start = index;
  176|  28.9k|            index += len;
  177|  28.9k|            let end = index;
  178|  28.9k|
  179|  28.9k|            if next_value {
  180|  14.5k|                ranges.push(start..end);
  181|  14.5k|            }
  182|       |
  183|  28.9k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    301|        if next_value {
  189|      6|            return Err(Error::NotMinimal);
  190|    295|        }
  191|    295|
  192|    295|        Ok(Self {
  193|    295|            ranges,
  194|    295|            ..Default::default()
  195|    295|        })
  196|    331|    }

_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  12.9k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  12.9k|        let mut len = 0u64;
   94|       |
   95|  63.5k|        for i in 0..VARINT_MAX_BYTES {
   96|  63.5k|            let byte = self.read(8);
   97|  63.5k|
   98|  63.5k|            // strip off the most significant bit and add
   99|  63.5k|            // it to the output
  100|  63.5k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  63.5k|
  102|  63.5k|            // if the most significant bit is a 0, we've
  103|  63.5k|            // reached the end of the varint
  104|  63.5k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  12.9k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      4|                    break;
  109|  12.9k|                }
  110|  12.9k|                return Ok(len);
  111|  50.5k|            }
  112|       |        }
  113|       |
  114|      6|        Err(Error::InvalidVarint)
  115|  12.9k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  29.2k|    pub fn has_more(&self) -> bool {
  153|  29.2k|        self.bits != 0 || !self.bytes.is_empty()
  154|  29.2k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  93.1k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  93.1k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  93.1k|        let mask = (1 << num_bits) - 1;
   55|  93.1k|        (self.bits & mask) as u8
   56|  93.1k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  64.1k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  64.1k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  64.1k|        let res = self.peek(num_bits);
   85|  64.1k|        self.drop(num_bits);
   86|  64.1k|
   87|  64.1k|        res
   88|  64.1k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  29.2k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  29.2k|        // We're done.
  120|  29.2k|        if !self.has_more() {
  121|    301|            return Ok(None);
  122|  28.9k|        }
  123|  28.9k|
  124|  28.9k|        let peek6 = self.peek(6);
  125|       |
  126|  28.9k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|  13.3k|            self.drop(1);
  129|  13.3k|            1
  130|  15.6k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  2.66k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  2.66k|            self.drop(6);
  134|  2.66k|            if val < 2 {
  135|      9|                return Err(Error::NotMinimal);
  136|  2.65k|            }
  137|  2.65k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  12.9k|            self.drop(2);
  141|  12.9k|            let val = self.read_varint()?;
  142|  12.9k|            if val < 16 {
  143|     12|                return Err(Error::NotMinimal);
  144|  12.9k|            }
  145|  12.9k|            val
  146|       |        };
  147|       |
  148|  28.9k|        Ok(Some(len))
  149|  29.2k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  93.1k|    pub fn drop(&mut self, num_bits: u32) {
   61|  93.1k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  93.1k|        self.bits >>= num_bits;
   65|  93.1k|        self.num_bits -= num_bits;
   66|  93.1k|
   67|  93.1k|        // not sure why this being outside of the if improves the performance
   68|  93.1k|        // bit it does, probably related to keeping caches warm
   69|  93.1k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  93.1k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  93.1k|
   72|  93.1k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  93.1k|        if self.num_bits < 8 {
   74|  70.3k|            self.num_bits += 8;
   75|  70.3k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  70.3k|        }
   77|  93.1k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    331|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    331|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    331|        // data.
   28|    331|        if bytes.last() == Some(&0) {
   29|      1|            return Err(Error::NotMinimal);
   30|    330|        }
   31|    330|        let mut bits = 0u64;
   32|    990|        for i in 0..2 {
   33|    660|            let byte = bytes.get(i).unwrap_or(&0);
   34|    660|            bits |= (*byte as u64) << (8 * i);
   35|    660|        }
   36|       |
   37|    330|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    330|
   39|    330|        Ok(Self {
   40|    330|            bytes,
   41|    330|            bits,
   42|    330|            num_bits: 16,
   43|    330|        })
   44|    331|    }

_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  19.0k|    pub fn write_len(&mut self, len: u64) {
   39|  19.0k|        debug_assert!(len > 0);
   40|       |
   41|  19.0k|        if len == 1 {
   42|  7.83k|            // Block Single (prefix 1)
   43|  7.83k|            self.write(1, 1);
   44|  11.1k|        } else if len < 16 {
   45|  1.58k|            // Block Short (prefix 01)
   46|  1.58k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  1.58k|            self.write(len as u8, 4);
   48|  1.58k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  9.59k|            self.write(0, 2);
   51|  9.59k|
   52|  9.59k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  46.9k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  46.9k|                self.write(byte, 8);
   55|  46.9k|            }
   56|       |        }
   57|  19.0k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    184|    pub fn finish(mut self) -> Vec<u8> {
   61|    184|        if self.bits > 0 {
   62|     74|            self.bytes.push(self.bits as u8);
   63|    110|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    184|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    184|        self.bytes
   71|    184|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  67.9k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  67.9k|        debug_assert!(num_bits <= 8);
   24|  67.9k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  67.9k|        self.bits |= (byte as u16) << self.num_bits;
   27|  67.9k|        self.num_bits += num_bits;
   28|  67.9k|
   29|  67.9k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  67.9k|        if self.num_bits >= 8 {
   31|  51.5k|            self.bytes.push(self.bits as u8);
   32|  51.5k|            self.bits >>= 8;
   33|  51.5k|            self.num_bits -= 8;
   34|  51.5k|        }
   35|  67.9k|    }
_RNvMNtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    184|    pub fn new() -> Self {
   18|    184|        Default::default()
   19|    184|    }
_RNvXs_NtNtCs9tztuBNvEou_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsisyCJ07Ahai_4core7default7Default7defaultB8_:
    4|    184|#[derive(Default, Clone, Debug)]

_RINvXNvNtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   35|    192|#[derive(Debug, Serialize)]
_RINvXs4_NtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   93|    295|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    295|    where
   95|    295|        D: Deserializer<'de>,
   96|    295|    {
   97|    295|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    279|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    279|        }
  104|    279|        Ok(Self::Unvalidated(bytes))
  105|    295|    }
_RINvXNvXNvNtCs9tztuBNvEou_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   35|    192|#[derive(Debug, Serialize)]

_RNvXNtCscds9NomkyI5_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCsisyCJ07Ahai_4core7convert4FromINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCshUSNUS5j5SO_11cbor_decode:
   22|    404|    fn from(err: DecodeError<T>) -> Self {
   23|    404|        Self {
   24|    404|            description: err.to_string(),
   25|    404|            protocol: CodecProtocol::Cbor,
   26|    404|        }
   27|    404|    }

_RINvCscds9NomkyI5_17fvm_ipld_encoding6to_vecNtNtCs4lVXOPUBl9F_11common_fuzz4cbor7PayloadECshUSNUS5j5SO_11cbor_decode:
   33|    192|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    192|where
   35|    192|    T: ser::Serialize + ?Sized,
   36|    192|{
   37|    192|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    192|}
_RINvCscds9NomkyI5_17fvm_ipld_encoding10from_sliceNtNtCs4lVXOPUBl9F_11common_fuzz4cbor7PayloadECshUSNUS5j5SO_11cbor_decode:
   50|    596|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    596|where
   52|    596|    T: de::Deserialize<'a>,
   53|    596|{
   54|    596|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    596|}

_RNvXs5_NtNtCsuUTXBYQQxg_10fvm_shared7address6errorsNtB5_5ErrorNtNtCsisyCJ07Ahai_4core3fmt7Display3fmt:
   13|     33|#[derive(Debug, PartialEq, Error)]
_RNvXs0_NtNtCsuUTXBYQQxg_10fvm_shared7address6errorsNtB5_5ErrorINtNtCsisyCJ07Ahai_4core7convert4FromNtNtCs9uot4vS7CsG_15unsigned_varint6decode5ErrorE4from:
   49|     16|    fn from(_: VarintError) -> Error {
   50|     16|        Error::InvalidPayload
   51|     16|    }

_RINvXs2_NtCsuUTXBYQQxg_10fvm_shared7addressNtB6_7AddressNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
  264|    412|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|    412|    where
  266|    412|        S: Serializer,
  267|    412|    {
  268|    412|        let address_bytes = self.to_bytes();
  269|    412|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|    412|    }
_RINvXs3_NtCsuUTXBYQQxg_10fvm_shared7addressNtB6_7AddressNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
  274|  1.73k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  1.73k|    where
  276|  1.73k|        D: Deserializer<'de>,
  277|  1.73k|    {
  278|  1.73k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  1.66k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  1.73k|    }
_RNvNtCsuUTXBYQQxg_10fvm_shared7address14from_leb_bytes:
  315|    413|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|    413|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|    397|    if !remaining.is_empty() {
  319|      3|        return Err(Error::InvalidPayload);
  320|    394|    }
  321|    394|    Ok(id)
  322|    413|}
_RNvMs_NtCsuUTXBYQQxg_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  1.66k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  1.66k|        if bz.len() < 2 {
   88|     10|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  1.65k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  1.65k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  1.66k|    }
_RNvMs_NtCsuUTXBYQQxg_10fvm_shared7addressNtB4_7Address3new:
   78|  1.65k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  1.65k|        Ok(Self {
   80|  1.65k|            network,
   81|  1.65k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  1.65k|    }
_RNvNtCsuUTXBYQQxg_10fvm_shared7address12to_leb_bytes:
  310|    142|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|    142|    // write id to buffer in leb128 format
  312|    142|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|    142|}
_RNvMs_NtCsuUTXBYQQxg_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|    412|    pub fn to_bytes(self) -> Vec<u8> {
  177|    412|        self.payload.to_bytes()
  178|    412|    }

_RNvMNtNtCsuUTXBYQQxg_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|    412|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|    412|        let mut bz = match self {
   40|    142|            ID(i) => to_leb_bytes(i).unwrap(),
   41|     98|            Secp256k1(arr) => arr.to_vec(),
   42|     80|            Actor(arr) => arr.to_vec(),
   43|     92|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|    412|        bz.insert(0, Protocol::from(self) as u8);
   47|    412|        bz
   48|    412|    }
_RNCNvMNtNtCsuUTXBYQQxg_10fvm_shared7address7payloadNtB4_7Payload3new0B8_:
   57|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMNtNtCsuUTXBYQQxg_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  1.65k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  1.65k|        let payload = match protocol {
   53|    413|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    358|                payload
   56|    358|                    .try_into()
   57|    358|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    592|                payload
   61|    592|                    .try_into()
   62|    592|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    291|                payload
   66|    291|                    .try_into()
   67|    291|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  1.63k|        Ok(payload)
   71|  1.65k|    }
_RNCNvMNtNtCsuUTXBYQQxg_10fvm_shared7address7payloadNtB4_7Payload3news0_0B8_:
   67|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvXs_NtNtCsuUTXBYQQxg_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsisyCJ07Ahai_4core7convert4FromNtB4_7PayloadE4from:
   75|    412|    fn from(pl: Payload) -> Self {
   76|    412|        match pl {
   77|    142|            Payload::ID(_) => Self::ID,
   78|     98|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|     80|            Payload::Actor(_) => Self::Actor,
   80|     92|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|    412|    }
_RNCNvMNtNtCsuUTXBYQQxg_10fvm_shared7address7payloadNtB4_7Payload3news_0B8_:
   62|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,

_RNvXNvNtNtCsuUTXBYQQxg_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs2CapEENv5cf_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  1.65k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCsuUTXBYQQxg_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs2CapEENv5cf_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  1.65k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCsuUTXBYQQxg_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  1.65k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  1.65k|        FromPrimitive::from_u8(b)
   28|  1.65k|    }

_RINvXs_NtCs4lVXOPUBl9F_11common_fuzz4cborNtB5_7PayloadNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   10|    192|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCs4lVXOPUBl9F_11common_fuzz4cborNtBa_7PayloadNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs2Q8WwvXamKY_11serde_tuple10SerializerQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEEECshUSNUS5j5SO_11cbor_decode:
   10|    192|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCs4lVXOPUBl9F_11common_fuzz4cborNtBd_7PayloadNtNtCs7fqClrIfz6j_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor3ser10SerializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils9BufWriterEECshUSNUS5j5SO_11cbor_decode:
   10|    192|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtBd_7PayloadNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEE0CshUSNUS5j5SO_11cbor_decode:
   10|    467|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtBb_7PayloadNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de8AccessorNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   10|    108|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtBe_7PayloadNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   10|    575|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB3_7PayloadNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserializeQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEECshUSNUS5j5SO_11cbor_decode:
   10|    993|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCs4lVXOPUBl9F_11common_fuzz4cborNtB8_7PayloadNtNtCs7fqClrIfz6j_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs2Q8WwvXamKY_11serde_tuple12DeserializerQINtNtCs5hsQu4hLbDD_18serde_ipld_dagcbor2de12DeserializerNtNtNtCskOJHTXoxdkM_7cbor4ii4core5utils11SliceReaderEEECshUSNUS5j5SO_11cbor_decode:
   10|    596|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

