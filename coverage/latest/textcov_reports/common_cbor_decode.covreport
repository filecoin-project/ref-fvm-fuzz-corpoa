_RINvXs5_NtNtCsQ520hUvK91_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs2qTTZmpNTkr_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  506|  3.57k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  3.57k|        use crate::alloc::borrow::Cow;
  508|  3.57k|
  509|  3.57k|        let mut buf = Vec::new();
  510|  3.57k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  3.26k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|     92|            Cow::Owned(buf)
  514|       |        }))
  515|  3.57k|    }
_RINvXsg_NtNtCsQ520hUvK91_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  703|    259|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    259|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    259|    }
_RINvYyNtNtNtCsQ520hUvK91_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
   73|    504|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    504|        let byte = pull_one(reader)?;
   75|    498|        Self::decode_with(byte, reader)
   76|    504|    }
_RINvXsc_NtNtCsQ520hUvK91_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  611|  1.09k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|  1.09k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|  1.09k|    }
_RINvNtNtCsQ520hUvK91_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  595|  13.6k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  13.6k|    -> Result<Option<usize>, Error<R::Error>>
  597|  13.6k|{
  598|  13.6k|    if byte != (marker::START | (major << 5)) {
  599|  6.25k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  6.15k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  6.15k|        Ok(Some(len))
  602|       |    } else {
  603|  7.36k|        Ok(None)
  604|       |    }
  605|  13.6k|}
_RINvYNtNtNtCsQ520hUvK91_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
   73|    263|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    263|        let byte = pull_one(reader)?;
   75|    259|        Self::decode_with(byte, reader)
   76|    263|    }
_RINvXss_NtNtCsQ520hUvK91_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  252|    498|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    498|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    498|                }
_RNvMNtNtCsQ520hUvK91_7cbor4ii4core3decNtB2_9Reference6as_refCsgNBNhOtVwpa_11cbor_decode:
   81|  17.8k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  17.8k|        match self {
   83|  17.8k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  17.8k|    }
_RINvYINtNtNtCsQ520hUvK91_7cbor4ii4core5types5BytesINtNtCs2qTTZmpNTkr_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
   73|  3.63k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  3.63k|        let byte = pull_one(reader)?;
   75|  3.57k|        Self::decode_with(byte, reader)
   76|  3.63k|    }
_RINvYNtNtNtCsQ520hUvK91_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
   73|  1.09k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  1.09k|        let byte = pull_one(reader)?;
   75|  1.09k|        Self::decode_with(byte, reader)
   76|  1.09k|    }
_RINvNtNtCsQ520hUvK91_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  125|  16.2k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  16.2k|    let b = reader.fill(1)?
  127|  16.2k|        .as_ref()
  128|  16.2k|        .get(0)
  129|  16.2k|        .copied()
  130|  16.2k|        .ok_or(Error::Eof)?;
  131|  16.0k|    reader.advance(1);
  132|  16.0k|    Ok(b)
  133|  16.2k|}
_RINvNtNtCsQ520hUvK91_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  427|  12.5k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  12.5k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  12.5k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  12.5k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  5.12k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  5.12k|            if buf.len() >= len {
  436|  5.04k|                reader.advance(len);
  437|  5.04k|                return Ok(Some(&buf[..len]));
  438|     77|            }
  439|      0|        }
  440|       |
  441|     77|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|    100|        while len != 0 {
  444|    100|            let readbuf = reader.fill(len)?;
  445|    100|            let readbuf = readbuf.as_ref();
  446|    100|
  447|    100|            if readbuf.is_empty() {
  448|     77|                return Err(Error::Eof);
  449|     23|            }
  450|     23|
  451|     23|            let readlen = core::cmp::min(readbuf.len(), len);
  452|     23|
  453|     23|            buf.extend_from_slice(&readbuf[..readlen]);
  454|     23|            reader.advance(readlen);
  455|     23|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|  9.58k|            let byte = pull_one(reader)?;
  463|       |
  464|  9.54k|            if byte == marker::BREAK {
  465|    584|                break
  466|  8.96k|            }
  467|  8.96k|
  468|  8.96k|            if !reader.step_in() {
  469|      3|                return Err(Error::DepthLimit);
  470|  8.95k|            }
  471|  8.95k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|  8.95k|            let reader = &mut *reader;
  473|       |
  474|  8.95k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|  1.77k|                buf.extend_from_slice(longbuf);
  476|  1.77k|            }
  477|       |        }
  478|       |
  479|    584|        Ok(None)
  480|       |    }
  481|  12.5k|}
_RNvNtNtCsQ520hUvK91_7cbor4ii4core3dec8if_majorCsgNBNhOtVwpa_11cbor_decode:
  890|    244|pub fn if_major(byte: u8) -> u8 {
  891|    244|    byte >> 5
  892|    244|}
_RNCINvNtNtCsQ520hUvK91_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0CsgNBNhOtVwpa_11cbor_decode:
  471|  8.95k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvMs0_NtNtCsQ520hUvK91_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  223|  7.01k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  7.01k|        match self.byte & self.major_limit {
  225|  7.01k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|  1.12k|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|    789|                let mut buf = [0; 2];
  229|    789|                pull_exact(reader, &mut buf)?;
  230|    782|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|    249|                let mut buf = [0; 4];
  234|    249|                pull_exact(reader, &mut buf)?;
  235|    241|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    454|                let mut buf = [0; 8];
  239|    454|                pull_exact(reader, &mut buf)?;
  240|    445|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|     93|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  7.01k|    }
_RNvMs0_NtNtCsQ520hUvK91_7cbor4ii4core3decNtB5_7TypeNum3newCsgNBNhOtVwpa_11cbor_decode:
  175|  7.01k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  7.01k|        TypeNum { major_limit, byte }
  177|  7.01k|    }
_RINvNtNtCsQ520hUvK91_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
  136|  1.49k|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  2.97k|    while !buf.is_empty() {
  138|  1.50k|        let readbuf = reader.fill(buf.len())?;
  139|  1.50k|        let readbuf = readbuf.as_ref();
  140|  1.50k|
  141|  1.50k|        if readbuf.is_empty() {
  142|     24|            return Err(Error::Eof);
  143|  1.48k|        }
  144|  1.48k|
  145|  1.48k|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|  1.48k|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|  1.48k|        reader.advance(len);
  148|  1.48k|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|  1.46k|    Ok(())
  152|  1.49k|}

_RINvXsu_NtNtCsQ520hUvK91_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
  159|    184|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    184|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    184|                }
_RINvXs7_NtNtCsQ520hUvK91_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
  209|  1.13k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.13k|        writer.push(self.0)?;
  211|  1.13k|        Ok(())
  212|  1.13k|    }
_RINvXs3_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
   84|  1.70k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  1.70k|        match u16::try_from(self.value) {
   86|  1.69k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      6|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      6|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  1.70k|        Ok(())
   93|  1.70k|    }
_RINvXs1_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
   59|  1.56k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  1.56k|        match self.value {
   61|  1.56k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    608|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  1.56k|        Ok(())
   65|  1.56k|    }
_RNvMs0_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB5_7TypeNumyE3newCsgNBNhOtVwpa_11cbor_decode:
   52|  1.86k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.86k|        TypeNum { type_, value }
   54|  1.86k|    }
_RINvXsi_NtNtCsQ520hUvK91_7cbor4ii4core3encINtNtB8_5types3TagINtBH_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
  317|    184|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    184|        self.1.encode(writer)
  319|    184|    }
_RNvMs0_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB5_7TypeNummE3newCsgNBNhOtVwpa_11cbor_decode:
   52|  1.70k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.70k|        TypeNum { type_, value }
   54|  1.70k|    }
_RINvXs4_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
   98|  1.86k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  1.86k|        match u32::try_from(self.value) {
  100|  1.70k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    166|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    166|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  1.86k|        Ok(())
  107|  1.86k|    }
_RNvMs0_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB5_7TypeNumtE3newCsgNBNhOtVwpa_11cbor_decode:
   52|  1.69k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.69k|        TypeNum { type_, value }
   54|  1.69k|    }
_RINvXsd_NtNtCsQ520hUvK91_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
  270|    368|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    368|        Ok(())
  272|    368|    }
_RNvMs0_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB5_7TypeNumhE3newCsgNBNhOtVwpa_11cbor_decode:
   52|  1.56k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.56k|        TypeNum { type_, value }
   54|  1.56k|    }
_RINvXs2_NtNtCsQ520hUvK91_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgNBNhOtVwpa_11cbor_decode:
   70|  1.69k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  1.69k|        match u8::try_from(self.value) {
   72|  1.56k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    134|                let [x0, x1] = self.value.to_be_bytes();
   75|    134|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  1.69k|        Ok(())
   79|  1.69k|    }

_RNvXs_NtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsgNBNhOtVwpa_11cbor_decode:
   40|  3.00k|        self.0.try_reserve(input.len())?;
   41|  3.00k|        self.0.extend_from_slice(input);
   42|  3.00k|        Ok(())
   43|  3.00k|    }
_RNvXs1_NtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsgNBNhOtVwpa_11cbor_decode:
   68|  22.6k|    fn advance(&mut self, n: usize) {
   69|  22.6k|        let len = core::cmp::min(self.buf.len(), n);
   70|  22.6k|        self.buf = &self.buf[len..];
   71|  22.6k|    }
_RNvXs1_NtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsgNBNhOtVwpa_11cbor_decode:
   62|  24.3k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  24.3k|        let len = core::cmp::min(self.buf.len(), want);
   64|  24.3k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  24.3k|    }
_RNvXs1_NtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsgNBNhOtVwpa_11cbor_decode:
   75|  10.0k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  10.0k|            self.limit = limit;
   77|  10.0k|            true
   78|       |        } else {
   79|      3|            false
   80|       |        }
   81|  10.0k|    }
_RNvXs1_NtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsgNBNhOtVwpa_11cbor_decode:
   84|  10.0k|    fn step_out(&mut self) {
   85|  10.0k|        self.limit += 1;
   86|  10.0k|    }
_RNvMNtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    184|    pub fn new(buf: Vec<u8>) -> Self {
   15|    184|       BufWriter(buf)
   16|    184|    }
_RNvMs0_NtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    650|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    650|        SliceReader { buf, limit: 256 }
   55|    650|    }
_RNvMNtNtCsQ520hUvK91_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    184|    pub fn into_inner(self) -> Vec<u8> {
   25|    184|        self.0
   26|    184|    }

_RNvMs1_NtCsQ520hUvK91_7cbor4ii5errorINtB5_11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleE8mismatchCsgNBNhOtVwpa_11cbor_decode:
   93|     93|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     93|        DecodeError::Mismatch {
   95|     93|            expect_major: (!major_limit) >> 5,
   96|     93|            byte
   97|     93|        }
   98|     93|    }

_RNvXs_NtCsQ520hUvK91_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCsbrgIbB1zXuY_4core3ops5deref8DerefMut9deref_mutCsgNBNhOtVwpa_11cbor_decode:
   17|  8.95k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  8.95k|        self.0
   19|  8.95k|    }
_RNvXs0_NtCsQ520hUvK91_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCsbrgIbB1zXuY_4core3ops4drop4Drop4dropCsgNBNhOtVwpa_11cbor_decode:
   24|  8.95k|    fn drop(&mut self) {
   25|  8.95k|        (self.1)(self.0);
   26|  8.95k|    }

_RNvMNtCs7c6ON2qBBpr_3cid3cidINtB2_3CidKj40_E8to_bytesCsgNBNhOtVwpa_11cbor_decode:
  167|    184|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    184|        let mut bytes = Vec::new();
  169|    184|        self.write_bytes(&mut bytes).unwrap();
  170|    184|        bytes
  171|    184|    }
_RNvMNtCs7c6ON2qBBpr_3cid3cidINtB2_3CidKj40_E6new_v1CsgNBNhOtVwpa_11cbor_decode:
   90|    171|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    171|        Self {
   92|    171|            version: Version::V1,
   93|    171|            codec,
   94|    171|            hash,
   95|    171|        }
   96|    171|    }
_RINvMNtCs7c6ON2qBBpr_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
  143|    166|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    166|        let mut version_buf = varint_encode::u64_buffer();
  145|    166|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    166|
  147|    166|        let mut codec_buf = varint_encode::u64_buffer();
  148|    166|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    166|
  150|    166|        w.write_all(version)?;
  151|    166|        w.write_all(codec)?;
  152|    166|        self.hash.write(&mut w)?;
  153|    166|        Ok(())
  154|    166|    }
_RINvMNtCs7c6ON2qBBpr_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
  157|    184|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    184|        match self.version {
  159|     18|            Version::V0 => self.hash.write(w)?,
  160|    166|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    184|        Ok(())
  163|    184|    }
_RINvMNtCs7c6ON2qBBpr_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsgNBNhOtVwpa_11cbor_decode:
  127|    230|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    230|        let version = varint_read_u64(&mut r)?;
  129|    229|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    224|        if [version, codec] == [0x12, 0x20] {
  132|     20|            let mut digest = [0u8; 32];
  133|     20|            r.read_exact(&mut digest)?;
  134|     19|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|     19|            Self::new_v0(mh)
  136|       |        } else {
  137|    204|            let version = Version::try_from(version)?;
  138|    200|            let mh = Multihash::read(r)?;
  139|    172|            Self::new(version, codec, mh)
  140|       |        }
  141|    230|    }
_RNvMNtCs7c6ON2qBBpr_3cid3cidINtB2_3CidKj40_E3newCsgNBNhOtVwpa_11cbor_decode:
   99|    172|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    172|        match version {
  101|       |            Version::V0 => {
  102|      1|                if codec != DAG_PB {
  103|      1|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    171|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    172|    }
_RNvMNtCs7c6ON2qBBpr_3cid3cidINtB2_3CidKj40_E6new_v0CsgNBNhOtVwpa_11cbor_decode:
   78|     19|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     19|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     19|        }
   82|     19|        Ok(Self {
   83|     19|            version: Version::V0,
   84|     19|            codec: DAG_PB,
   85|     19|            hash,
   86|     19|        })
   87|     19|    }
_RNvXs6_NtCs7c6ON2qBBpr_3cid3cidINtB5_3CidKj40_EINtNtCsbrgIbB1zXuY_4core7convert7TryFromRShE8try_fromCsgNBNhOtVwpa_11cbor_decode:
  314|    230|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    230|        Self::read_bytes(&mut bytes)
  316|    230|    }

_RNvXs1_NtCs7c6ON2qBBpr_3cid5errorNtB5_5ErrorINtNtCsbrgIbB1zXuY_4core7convert4FromNtNtCs6Af5sNZwJcG_9multihash5error5ErrorE4from:
   65|     28|    fn from(_: multihash::Error) -> Error {
   66|     28|        Error::ParsingError
   67|     28|    }
_RNvXs4_NtCs7c6ON2qBBpr_3cid5errorNtB5_5ErrorINtNtCsbrgIbB1zXuY_4core7convert4FromNtNtNtCs6mvuhiyKVzk_3std2io5error5ErrorE4from:
   88|      1|    fn from(err: io::Error) -> Self {
   89|      1|        Self::Io(err)
   90|      1|    }
_RNvXs3_NtCs7c6ON2qBBpr_3cid5errorNtB5_5ErrorINtNtCsbrgIbB1zXuY_4core7convert4FromNtNtCsQcZ4kOoOT1_15unsigned_varint2io9ReadErrorE4from:
   78|      6|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   79|      6|        use unsigned_varint::io::ReadError::*;
   80|      6|        match err {
   81|      2|            Io(err) => Self::Io(err),
   82|      4|            _ => Self::VarIntDecodeError,
   83|       |        }
   84|      6|    }
_RNvXs_NtCs7c6ON2qBBpr_3cid5errorNtB4_5ErrorNtNtCsbrgIbB1zXuY_4core3fmt7Display3fmt:
   39|     40|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   40|       |        use self::Error::*;
   41|     40|        let error = match self {
   42|      0|            UnknownCodec => "Unknown codec",
   43|      0|            InputTooShort => "Input too short",
   44|     28|            ParsingError => "Failed to parse multihash",
   45|      4|            InvalidCidVersion => "Unrecognized CID version",
   46|      1|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   47|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   48|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   49|      4|            VarIntDecodeError => "Failed to decode unsigned varint format",
   50|      3|            Io(err) => return write!(f, "{}", err),
   51|       |        };
   52|       |
   53|     37|        f.write_str(error)
   54|     40|    }

_RINvXNvXs0_NtCs7c6ON2qBBpr_3cid5serdeINtNtBb_3cid3CidKpENtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   97|    245|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    245|            where
   99|    245|                D: de::Deserializer<'de>,
  100|    245|            {
  101|    245|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    245|            }
_RINvXNtCs7c6ON2qBBpr_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsa0AMLvew6nk_5serde3ser9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   29|    184|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    184|    where
   31|    184|        S: ser::Serializer,
   32|    184|    {
   33|    184|        let value = ByteBuf::from(self.to_bytes());
   34|    184|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    184|    }
_RNCINvXs_NtCs7c6ON2qBBpr_3cid5serdeNtB7_17BytesToCidVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor11visit_bytesINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEE0CsgNBNhOtVwpa_11cbor_decode:
   53|     40|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
_RINvXs_NtCs7c6ON2qBBpr_3cid5serdeNtB5_17BytesToCidVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor11visit_bytesINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
   48|    230|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    230|    where
   50|    230|        E: de::Error,
   51|    230|    {
   52|    230|        CidGeneric::<SIZE>::try_from(value)
   53|    230|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    230|    }
_RINvXs0_NtCs7c6ON2qBBpr_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   79|    263|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    263|    where
   81|    263|        D: de::Deserializer<'de>,
   82|    263|    {
   83|    263|        /// Main visitor to deserialize a CID.
   84|    263|        ///
   85|    263|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    263|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    263|        /// to bytes.
   88|    263|        struct MainEntryVisitor<const SIZE: usize>;
   89|    263|
   90|    263|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    263|            type Value = CidGeneric<SIZE>;
   92|    263|
   93|    263|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    263|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    263|            }
   96|    263|
   97|    263|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    263|            where
   99|    263|                D: de::Deserializer<'de>,
  100|    263|            {
  101|    263|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    263|            }
  103|    263|        }
  104|    263|
  105|    263|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    263|    }

_RNvXs0_NtCs7c6ON2qBBpr_3cid7versionyINtNtCsbrgIbB1zXuY_4core7convert4FromNtB5_7VersionE4from:
   44|    166|    fn from(ver: Version) -> u64 {
   45|    166|        match ver {
   46|      0|            Version::V0 => 0,
   47|    166|            Version::V1 => 1,
   48|       |        }
   49|    166|    }
_RNvXs_NtCs7c6ON2qBBpr_3cid7versionNtB4_7VersionINtNtCsbrgIbB1zXuY_4core7convert7TryFromyE8try_from:
   34|    204|    fn try_from(raw: u64) -> Result<Self> {
   35|    204|        match raw {
   36|      3|            0 => Ok(Self::V0),
   37|    197|            1 => Ok(Self::V1),
   38|      4|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    204|    }

_RINvXsd_NtCs13lQern29I2_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor11visit_bytesINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
  203|    755|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    755|    where
  205|    755|        E: Error,
  206|    755|    {
  207|    755|        Ok(ByteBuf::from(v))
  208|    755|    }
_RINvMNtCs13lQern29I2_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECsgNBNhOtVwpa_11cbor_decode:
   60|    755|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    755|        ByteBuf {
   62|    755|            bytes: bytes.into(),
   63|    755|        }
   64|    755|    }
_RINvXsd_NtCs13lQern29I2_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor14visit_byte_bufINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
  210|     12|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<ByteBuf, E>
  211|     12|    where
  212|     12|        E: Error,
  213|     12|    {
  214|     12|        Ok(ByteBuf::from(v))
  215|     12|    }
_RINvXse_NtCs13lQern29I2_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  219|    919|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    919|    where
  221|    919|        D: Deserializer<'de>,
  222|    919|    {
  223|    919|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    919|    }
_RINvMNtCs13lQern29I2_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
   60|     12|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|     12|        ByteBuf {
   62|     12|            bytes: bytes.into(),
   63|     12|        }
   64|     12|    }
_RNvMNtCs13lQern29I2_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    767|    pub fn into_vec(self) -> Vec<u8> {
   68|    767|        self.bytes
   69|    767|    }

_RINvXs2_NtCs13lQern29I2_14cs_serde_bytes2deINtNtCs2qTTZmpNTkr_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   72|  2.47k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  2.47k|    where
   74|  2.47k|        D: Deserializer<'de>,
   75|  2.47k|    {
   76|  2.47k|        struct CowVisitor;
   77|  2.47k|
   78|  2.47k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  2.47k|            type Value = Cow<'de, [u8]>;
   80|  2.47k|
   81|  2.47k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  2.47k|                formatter.write_str("a byte array")
   83|  2.47k|            }
   84|  2.47k|
   85|  2.47k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  2.47k|            where
   87|  2.47k|                E: Error,
   88|  2.47k|            {
   89|  2.47k|                Ok(Cow::Borrowed(v))
   90|  2.47k|            }
   91|  2.47k|
   92|  2.47k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  2.47k|            where
   94|  2.47k|                E: Error,
   95|  2.47k|            {
   96|  2.47k|                Ok(Cow::Owned(v.to_vec()))
   97|  2.47k|            }
   98|  2.47k|
   99|  2.47k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  2.47k|            where
  101|  2.47k|                E: Error,
  102|  2.47k|            {
  103|  2.47k|                Ok(Cow::Owned(v))
  104|  2.47k|            }
  105|  2.47k|        }
  106|  2.47k|
  107|  2.47k|        deserializer.deserialize_bytes(CowVisitor)
  108|  2.47k|    }
_RINvXs1_NtCs13lQern29I2_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   61|    919|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    919|    where
   63|    919|        D: Deserializer<'de>,
   64|    919|    {
   65|    919|        // Via the serde::Deserialize impl for ByteBuf.
   66|    919|        serde::Deserialize::deserialize(deserializer)
   67|    919|    }
_RINvXNvXs2_NtCs13lQern29I2_14cs_serde_bytes2deINtNtCs2qTTZmpNTkr_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor14visit_byte_bufINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
   99|     76|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|     76|            where
  101|     76|                E: Error,
  102|     76|            {
  103|     76|                Ok(Cow::Owned(v))
  104|     76|            }
_RINvXNvXs2_NtCs13lQern29I2_14cs_serde_bytes2deINtNtCs2qTTZmpNTkr_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor20visit_borrowed_bytesINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
   85|  2.27k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  2.27k|            where
   87|  2.27k|                E: Error,
   88|  2.27k|            {
   89|  2.27k|                Ok(Cow::Borrowed(v))
   90|  2.27k|            }
_RINvXs_NtCs13lQern29I2_14cs_serde_bytes2deINtNtCs2qTTZmpNTkr_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   42|    919|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    919|    where
   44|    919|        D: Deserializer<'de>,
   45|    919|    {
   46|    919|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    919|    }

_RINvCs13lQern29I2_14cs_serde_bytes11deserializeINtNtCs2qTTZmpNTkr_5alloc6borrow3CowShEQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  103|    338|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    338|where
  105|    338|    T: Deserialize<'de>,
  106|    338|    D: Deserializer<'de>,
  107|    338|{
  108|    338|    Deserialize::deserialize(deserializer)
  109|    338|}
_RINvCs13lQern29I2_14cs_serde_bytes11deserializeINtNtCs2qTTZmpNTkr_5alloc3vec3VechEQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  103|    919|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    919|where
  105|    919|    T: Deserialize<'de>,
  106|    919|    D: Deserializer<'de>,
  107|    919|{
  108|    919|    Deserialize::deserialize(deserializer)
  109|    919|}
_RINvCs13lQern29I2_14cs_serde_bytes9serializeINtNtCs2qTTZmpNTkr_5alloc3vec3VechEQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   77|    368|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    368|where
   79|    368|    T: ?Sized + Serialize,
   80|    368|    S: Serializer,
   81|    368|{
   82|    368|    Serialize::serialize(bytes, serializer)
   83|    368|}
_RINvCs13lQern29I2_14cs_serde_bytes9serializeRINtNtCs2qTTZmpNTkr_5alloc3vec3VechEQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   77|    184|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    184|where
   79|    184|    T: ?Sized + Serialize,
   80|    184|    S: Serializer,
   81|    184|{
   82|    184|    Serialize::serialize(bytes, serializer)
   83|    184|}

_RINvXs4_NtCs13lQern29I2_14cs_serde_bytes3serRINtNtCs2qTTZmpNTkr_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   88|    184|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    184|    where
   90|    184|        S: Serializer,
   91|    184|    {
   92|    184|        (**self).serialize(serializer)
   93|    184|    }
_RINvXs_NtCs13lQern29I2_14cs_serde_bytes3serINtNtCs2qTTZmpNTkr_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   37|    948|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|    948|    where
   39|    948|        S: Serializer,
   40|    948|    {
   41|    948|        serializer.serialize_bytes(self)
   42|    948|    }

rust_fuzzer_test_input:
  141|    558|        pub extern "C" fn rust_fuzzer_test_input($bytes: &[u8]) {
  142|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  143|       |            // formatting of the input to that file. This is only intended for
  144|       |            // `cargo fuzz`'s use!
  145|       |
  146|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  147|    558|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  148|       |                use std::io::Write;
  149|      0|                let mut file = std::fs::File::create(path)
  150|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  151|      0|                writeln!(&mut file, "{:?}", $bytes)
  152|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  153|      0|                return;
  154|    558|            }
  155|       |
  156|       |            $body
  157|    558|        }
LLVMFuzzerTestOneInput:
   27|    558|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    558|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    558|    });
   32|    558|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    558|    }
   37|    558|    0
   38|    558|}
_RNCNvCs7poiq5LqODO_13libfuzzer_sys15test_input_wrap0B3_:
   28|    558|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    558|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    558|        rust_fuzzer_test_input(data_slice);
   31|    558|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs1_NtCs6Af5sNZwJcG_9multihash5errorNtB5_5ErrorINtNtCsbrgIbB1zXuY_4core7convert4FromNtNtCsQcZ4kOoOT1_15unsigned_varint2io9ReadErrorE4from:
   44|     18|    fn from(err: ReadError) -> Self {
   45|     18|        match err {
   46|     12|            ReadError::Io(err) => Self::Io(err),
   47|      6|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     18|    }
_RNvXs0_NtCs6Af5sNZwJcG_9multihash5errorNtB5_5ErrorINtNtCsbrgIbB1zXuY_4core7convert4FromNtNtNtCs6mvuhiyKVzk_3std2io5error5ErrorE4from:
   37|      2|    fn from(err: IoError) -> Self {
   38|      2|        Self::Io(err)
   39|      2|    }

_RNvMs_NtCs6Af5sNZwJcG_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsgNBNhOtVwpa_11cbor_decode:
  125|    184|    pub const fn size(&self) -> u8 {
  126|    184|        self.size
  127|    184|    }
_RINvMs_NtCs6Af5sNZwJcG_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsgNBNhOtVwpa_11cbor_decode:
  135|    200|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    200|    where
  137|    200|        Self: Sized,
  138|    200|    {
  139|    200|        let (code, size, digest) = read_multihash(r)?;
  140|    172|        Ok(Self { code, size, digest })
  141|    200|    }
_RNvMs_NtCs6Af5sNZwJcG_9multihash9multihashINtB4_9MultihashKj40_E4codeCsgNBNhOtVwpa_11cbor_decode:
  120|    203|    pub const fn code(&self) -> u64 {
  121|    203|        self.code
  122|    203|    }
_RINvNtCs6Af5sNZwJcG_9multihash9multihash14read_multihashQRShKj40_ECsgNBNhOtVwpa_11cbor_decode:
  298|    200|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    200|where
  300|    200|    R: io::Read,
  301|    200|{
  302|    200|    let code = read_u64(&mut r)?;
  303|    195|    let size = read_u64(&mut r)?;
  304|       |
  305|    182|    if size > S as u64 || size > u8::MAX as u64 {
  306|      8|        return Err(Error::InvalidSize(size));
  307|    174|    }
  308|    174|
  309|    174|    let mut digest = [0; S];
  310|    174|    r.read_exact(&mut digest[..size as usize])?;
  311|    172|    Ok((code, size as u8, digest))
  312|    200|}
_RINvNtCs6Af5sNZwJcG_9multihash9multihash15write_multihashQQINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
  276|    166|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    166|where
  278|    166|    W: io::Write,
  279|    166|{
  280|    166|    let mut code_buf = varint_encode::u64_buffer();
  281|    166|    let code = varint_encode::u64(code, &mut code_buf);
  282|    166|
  283|    166|    let mut size_buf = varint_encode::u8_buffer();
  284|    166|    let size = varint_encode::u8(size, &mut size_buf);
  285|    166|
  286|    166|    w.write_all(code)?;
  287|    166|    w.write_all(size)?;
  288|    166|    w.write_all(digest)?;
  289|    166|    Ok(())
  290|    166|}
_RINvMs_NtCs6Af5sNZwJcG_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
  163|    166|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    166|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    166|    }
_RNvMs_NtCs6Af5sNZwJcG_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsgNBNhOtVwpa_11cbor_decode:
  101|     19|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     19|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     19|        }
  105|     19|        let size = input_digest.len();
  106|     19|        let mut digest = [0; S];
  107|     19|        let mut i = 0;
  108|    627|        while i < size {
  109|    608|            digest[i] = input_digest[i];
  110|    608|            i += 1;
  111|    608|        }
  112|     19|        Ok(Self {
  113|     19|            code,
  114|     19|            size: size as u8,
  115|     19|            digest,
  116|     19|        })
  117|     19|    }
_RINvNtCs6Af5sNZwJcG_9multihash9multihash15write_multihashQINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
  276|     18|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     18|where
  278|     18|    W: io::Write,
  279|     18|{
  280|     18|    let mut code_buf = varint_encode::u64_buffer();
  281|     18|    let code = varint_encode::u64(code, &mut code_buf);
  282|     18|
  283|     18|    let mut size_buf = varint_encode::u8_buffer();
  284|     18|    let size = varint_encode::u8(size, &mut size_buf);
  285|     18|
  286|     18|    w.write_all(code)?;
  287|     18|    w.write_all(size)?;
  288|     18|    w.write_all(digest)?;
  289|     18|    Ok(())
  290|     18|}
_RINvMs_NtCs6Af5sNZwJcG_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
  163|     18|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     18|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     18|    }
_RNvMs_NtCs6Af5sNZwJcG_9multihash9multihashINtB4_9MultihashKj40_E6digestCsgNBNhOtVwpa_11cbor_decode:
  130|    184|    pub fn digest(&self) -> &[u8] {
  131|    184|        &self.digest[..self.size as usize]
  132|    184|    }

_RNvYNtNtNtCs8QKBx8eKjI3_10fvm_shared7address8protocol8ProtocolNtNtCs2yu7KD7ROts_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  2.01k|    fn from_u8(n: u8) -> Option<Self> {
  468|  2.01k|        FromPrimitive::from_u64(From::from(n))
  469|  2.01k|    }

_RNvMs2_NtCs10JbAnIXufq_9once_cell3impINtB5_8OnceCellNtNtCs2qTTZmpNTkr_5alloc6string6StringE14is_initializedCsgNBNhOtVwpa_11cbor_decode:
   62|    558|    pub(crate) fn is_initialized(&self) -> bool {
   63|    558|        // An `Acquire` load is enough because that makes all the initialization
   64|    558|        // operations visible to us, and, this being a fast path, weaker
   65|    558|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    558|        // `SeqCst` operations on the slow path.
   67|    558|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    558|    }

_RNvMs4_NtCs10JbAnIXufq_9once_cell4syncINtB5_8OnceCellNtNtCs2qTTZmpNTkr_5alloc6string6StringE3getCsgNBNhOtVwpa_11cbor_decode:
  869|    558|        pub fn get(&self) -> Option<&T> {
  870|    558|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    558|                None
  875|       |            }
  876|    558|        }

_RINvCsj2YxVsNfS1E_10scopeguard5guardQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEFBy_EuECsgNBNhOtVwpa_11cbor_decode:
  367|  1.09k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|  1.09k|    where F: FnOnce(T)
  369|  1.09k|{
  370|  1.09k|    ScopeGuard::with_strategy(v, dropfn)
  371|  1.09k|}
_RNvMs1_Csj2YxVsNfS1E_10scopeguardINtB5_10ScopeGuardQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsgNBNhOtVwpa_11cbor_decode:
  317|  1.09k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|  1.09k|        ScopeGuard {
  319|  1.09k|            value: ManuallyDrop::new(v),
  320|  1.09k|            dropfn: ManuallyDrop::new(dropfn),
  321|  1.09k|            strategy: PhantomData,
  322|  1.09k|        }
  323|  1.09k|    }
_RNvXs5_Csj2YxVsNfS1E_10scopeguardINtB5_10ScopeGuardQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsbrgIbB1zXuY_4core3ops4drop4Drop4dropCsgNBNhOtVwpa_11cbor_decode:
  452|  1.09k|    fn drop(&mut self) {
  453|  1.09k|        // This is OK because the fields are `ManuallyDrop`s
  454|  1.09k|        // which will not be dropped by the compiler.
  455|  1.09k|        let (value, dropfn) = unsafe {
  456|  1.09k|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|  1.09k|        };
  458|  1.09k|        if S::should_run() {
  459|  1.09k|            dropfn(value);
  460|  1.09k|        }
  461|  1.09k|    }
_RNvXs4_Csj2YxVsNfS1E_10scopeguardINtB5_10ScopeGuardQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsbrgIbB1zXuY_4core3ops5deref8DerefMut9deref_mutCsgNBNhOtVwpa_11cbor_decode:
  443|  1.09k|    fn deref_mut(&mut self) -> &mut T {
  444|  1.09k|        &mut *self.value
  445|  1.09k|    }
_RNvXCsj2YxVsNfS1E_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|  1.09k|    fn should_run() -> bool { true }

_RINvXsV_NtNtCsa0AMLvew6nk_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  113|    504|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    504|            where
  115|    504|                D: Deserializer<'de>,
  116|    504|            {
  117|    504|                struct PrimitiveVisitor;
  118|    504|
  119|    504|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    504|                    type Value = $primitive;
  121|    504|
  122|    504|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    504|                        formatter.write_str(stringify!($primitive))
  124|    504|                    }
  125|    504|
  126|    504|                    $($($method!($val : $visit);)*)*
  127|    504|                }
  128|    504|
  129|    504|                deserializer.$deserialize(PrimitiveVisitor)
  130|    504|            }
_RINvXNvXsV_NtNtCsa0AMLvew6nk_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
  138|    491|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    491|        where
  140|    491|            E: Error,
  141|    491|        {
  142|    491|            Ok(v)
  143|    491|        }
_RINvXNvXsh_NtNtCsa0AMLvew6nk_5serde2de5implsINtNtCs2qTTZmpNTkr_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
 1032|    440|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    440|            where
 1034|    440|                A: SeqAccess<'de>,
 1035|    440|            {
 1036|    440|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  1.98k|                while let Some(value) = try!(seq.next_element()) {
 1039|  1.54k|                    values.push(value);
 1040|  1.54k|                }
 1041|       |
 1042|    338|                Ok(values)
 1043|    440|            }
_RINvXsh_NtNtCsa0AMLvew6nk_5serde2de5implsINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
 1014|    443|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    443|    where
 1016|    443|        D: Deserializer<'de>,
 1017|    443|    {
 1018|    443|        struct VecVisitor<T> {
 1019|    443|            marker: PhantomData<T>,
 1020|    443|        }
 1021|    443|
 1022|    443|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    443|        where
 1024|    443|            T: Deserialize<'de>,
 1025|    443|        {
 1026|    443|            type Value = Vec<T>;
 1027|    443|
 1028|    443|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    443|                formatter.write_str("a sequence")
 1030|    443|            }
 1031|    443|
 1032|    443|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    443|            where
 1034|    443|                A: SeqAccess<'de>,
 1035|    443|            {
 1036|    443|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    443|
 1038|    443|                while let Some(value) = try!(seq.next_element()) {
 1039|    443|                    values.push(value);
 1040|    443|                }
 1041|    443|
 1042|    443|                Ok(values)
 1043|    443|            }
 1044|    443|        }
 1045|    443|
 1046|    443|        let visitor = VecVisitor {
 1047|    443|            marker: PhantomData,
 1048|    443|        };
 1049|    443|        deserializer.deserialize_seq(visitor)
 1050|    443|    }

_RINvYINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess12next_elementNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressECsgNBNhOtVwpa_11cbor_decode:
 1723|  2.47k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  2.47k|    where
 1725|  2.47k|        T: Deserialize<'de>,
 1726|  2.47k|    {
 1727|  2.47k|        self.next_element_seed(PhantomData)
 1728|  2.47k|    }
_RINvXs3_NtCsa0AMLvew6nk_5serde2deINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  783|    443|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    443|    where
  785|    443|        D: Deserializer<'de>,
  786|    443|    {
  787|    443|        T::deserialize(deserializer)
  788|    443|    }
_RINvXs3_NtCsa0AMLvew6nk_5serde2deINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtCs7l8CF9kh7fx_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  783|    338|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    338|    where
  785|    338|        D: Deserializer<'de>,
  786|    338|    {
  787|    338|        T::deserialize(deserializer)
  788|    338|    }
_RINvYINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess12next_elementyECsgNBNhOtVwpa_11cbor_decode:
 1723|    504|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    504|    where
 1725|    504|        T: Deserialize<'de>,
 1726|    504|    {
 1727|    504|        self.next_element_seed(PhantomData)
 1728|    504|    }
_RINvYINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess12next_elementNtCs7l8CF9kh7fx_17fvm_ipld_bitfield8BitFieldECsgNBNhOtVwpa_11cbor_decode:
 1723|    338|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    338|    where
 1725|    338|        T: Deserialize<'de>,
 1726|    338|    {
 1727|    338|        self.next_element_seed(PhantomData)
 1728|    338|    }
_RINvXs3_NtCsa0AMLvew6nk_5serde2deINtNtCsbrgIbB1zXuY_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  783|    504|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    504|    where
  785|    504|        D: Deserializer<'de>,
  786|    504|    {
  787|    504|        T::deserialize(deserializer)
  788|    504|    }
_RINvXs3_NtCsa0AMLvew6nk_5serde2deINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataINtNtCs7c6ON2qBBpr_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  783|    263|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    263|    where
  785|    263|        D: Deserializer<'de>,
  786|    263|    {
  787|    263|        T::deserialize(deserializer)
  788|    263|    }
_RINvXs3_NtCsa0AMLvew6nk_5serde2deINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  783|    638|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    638|    where
  785|    638|        D: Deserializer<'de>,
  786|    638|    {
  787|    638|        T::deserialize(deserializer)
  788|    638|    }
_RINvYINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess12next_elementINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEECsgNBNhOtVwpa_11cbor_decode:
 1723|    443|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    443|    where
 1725|    443|        T: Deserialize<'de>,
 1726|    443|    {
 1727|    443|        self.next_element_seed(PhantomData)
 1728|    443|    }
_RINvYNtNtCs7c6ON2qBBpr_3cid5serde17BytesToCidVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor20visit_borrowed_bytesINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
 1563|    228|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    228|    where
 1565|    228|        E: Error,
 1566|    228|    {
 1567|    228|        self.visit_bytes(v)
 1568|    228|    }
_RINvYINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess12next_elementINtNtCs7c6ON2qBBpr_3cid3cid3CidKj40_EECsgNBNhOtVwpa_11cbor_decode:
 1723|    263|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    263|    where
 1725|    263|        T: Deserialize<'de>,
 1726|    263|    {
 1727|    263|        self.next_element_seed(PhantomData)
 1728|    263|    }
_RINvYNtNtCs7c6ON2qBBpr_3cid5serde17BytesToCidVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor14visit_byte_bufINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
 1587|      2|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1588|      2|    where
 1589|      2|        E: Error,
 1590|      2|    {
 1591|      2|        self.visit_bytes(&v)
 1592|      2|    }
_RINvXs3_NtCsa0AMLvew6nk_5serde2deINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  783|  2.13k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  2.13k|    where
  785|  2.13k|        D: Deserializer<'de>,
  786|  2.13k|    {
  787|  2.13k|        T::deserialize(deserializer)
  788|  2.13k|    }
_RINvYINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess12next_elementNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsgNBNhOtVwpa_11cbor_decode:
 1723|    281|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    281|    where
 1725|    281|        T: Deserialize<'de>,
 1726|    281|    {
 1727|    281|        self.next_element_seed(PhantomData)
 1728|    281|    }
_RINvYNtNtCs13lQern29I2_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCsa0AMLvew6nk_5serde2de7Visitor20visit_borrowed_bytesINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEECsgNBNhOtVwpa_11cbor_decode:
 1563|    755|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    755|    where
 1565|    755|        E: Error,
 1566|    755|    {
 1567|    755|        self.visit_bytes(v)
 1568|    755|    }
_RINvYINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB2K_7PayloadNtB1K_11Deserialize11deserialize1__NtB2H_5InnerB3w_11deserializeNtB2C_9___VisitorNtB1K_7Visitor9visit_seq17___DeserializeWithECsgNBNhOtVwpa_11cbor_decode:
 1723|    638|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    638|    where
 1725|    638|        T: Deserialize<'de>,
 1726|    638|    {
 1727|    638|        self.next_element_seed(PhantomData)
 1728|    638|    }
_RINvXs3_NtCsa0AMLvew6nk_5serde2deINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  783|    281|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    281|    where
  785|    281|        D: Deserializer<'de>,
  786|    281|    {
  787|    281|        T::deserialize(deserializer)
  788|    281|    }

_RNvNtNtCsa0AMLvew6nk_5serde9___private9size_hint8cautiousCsgNBNhOtVwpa_11cbor_decode:
   12|    440|pub fn cautious(hint: Option<usize>) -> usize {
   13|    440|    cmp::min(hint.unwrap_or(0), 4096)
   14|    440|}

_RINvXs1E_NtNtCsa0AMLvew6nk_5serde3ser5implsRNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  386|    396|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    396|            where
  388|    396|                S: Serializer,
  389|    396|            {
  390|    396|                (**self).serialize(serializer)
  391|    396|            }
_RINvXs1E_NtNtCsa0AMLvew6nk_5serde3ser5implsRNtCs7l8CF9kh7fx_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1E_NtNtCsa0AMLvew6nk_5serde3ser5implsRNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXsE_NtNtCsa0AMLvew6nk_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   11|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    184|            where
   13|    184|                S: Serializer,
   14|    184|            {
   15|    184|                serializer.$method(*self $($cast)*)
   16|    184|            }
_RINvXs1E_NtNtCsa0AMLvew6nk_5serde3ser5implsRINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1E_NtNtCsa0AMLvew6nk_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1E_NtNtCsa0AMLvew6nk_5serde3ser5implsRINtNtCs7c6ON2qBBpr_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1k_NtNtCsa0AMLvew6nk_5serde3ser5implsINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  194|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    184|            where
  196|    184|                S: Serializer,
  197|    184|            {
  198|    184|                serializer.collect_seq(self)
  199|    184|            }

_RINvNtCsa0AMLvew6nk_5serde3ser17iterator_len_hintINtNtNtCsbrgIbB1zXuY_4core5slice4iter4IterNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEECsgNBNhOtVwpa_11cbor_decode:
 1982|    184|    match iter.size_hint() {
 1983|    184|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    184|}
_RNCINvYQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer11collect_seqRINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEE0CsgNBNhOtVwpa_11cbor_decode:
 1286|    212|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer11collect_seqRINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEECsgNBNhOtVwpa_11cbor_decode:
 1275|    184|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    184|    where
 1277|    184|        I: IntoIterator,
 1278|    184|        <I as IntoIterator>::Item: Serialize,
 1279|    184|    {
 1280|    184|        let iter = iter.into_iter();
 1281|    184|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    184|            let mut iter = iter;
 1286|    184|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    184|        serializer.end()
 1297|    184|    }

_RINvXsc_NtCsjUBL1NXvhOw_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  186|    184|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    184|    where
  188|    184|        S: Serializer,
  189|    184|    {
  190|    184|        serializer.serialize_bytes(&self.bytes)
  191|    184|    }
_RINvMNtCsjUBL1NXvhOw_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs2qTTZmpNTkr_5alloc3vec3VechEECsgNBNhOtVwpa_11cbor_decode:
   60|    184|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    184|        ByteBuf {
   62|    184|            bytes: bytes.into(),
   63|    184|        }
   64|    184|    }

_RINvNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderECsgNBNhOtVwpa_11cbor_decode:
   26|  1.39k|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|  1.39k|    let buf = match reader.fill(1)? {
   28|  1.39k|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|  1.39k|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|  1.20k|    Ok(byte)
   33|  1.39k|}

_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess17next_element_seedINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEEECsgNBNhOtVwpa_11cbor_decode:
  484|    443|        if let Some(len) = self.len.as_mut() {
  485|    443|            if *len > 0 {
  486|    443|                *len -= 1;
  487|    443|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    443|    }
_RNvMs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderE8try_stepCsgNBNhOtVwpa_11cbor_decode:
  101|  1.09k|    fn try_step<'a>(
  102|  1.09k|        &'a mut self,
  103|  1.09k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|  1.09k|    {
  105|  1.09k|        if self.reader.step_in() {
  106|  1.09k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|  1.09k|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB32_7PayloadNtB1W_11Deserialize11deserialize1__NtB2Z_5InnerB3O_11deserialize9___VisitorECsgNBNhOtVwpa_11cbor_decode:
  344|    650|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    650|    where
  346|    650|        V: Visitor<'de>,
  347|    650|    {
  348|    650|        let mut de = self.try_step()?;
  349|    650|        let seq = Accessor::tuple(&mut de, len)?;
  350|    638|        visitor.visit_seq(seq)
  351|    650|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer20deserialize_byte_bufNtNtCs13lQern29I2_14cs_serde_bytes7bytebuf14ByteBufVisitorECsgNBNhOtVwpa_11cbor_decode:
  239|    919|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    919|    where
  241|    919|        V: Visitor<'de>,
  242|    919|    {
  243|    919|        self.deserialize_bytes(visitor)
  244|    919|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1W_5implsyNtB1W_11Deserialize11deserialize16PrimitiveVisitorECsgNBNhOtVwpa_11cbor_decode:
  142|    504|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    504|        where V: Visitor<'de>
  144|    504|        {
  145|    504|            let value = <$t>::decode(&mut self.reader)?;
  146|    491|            visitor.$visit(value)
  147|    504|        }
_RNvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess9size_hintCsgNBNhOtVwpa_11cbor_decode:
  500|    440|    fn size_hint(&self) -> Option<usize> {
  501|    440|        self.len
  502|    440|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess17next_element_seedINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtCs7l8CF9kh7fx_17fvm_ipld_bitfield8BitFieldEECsgNBNhOtVwpa_11cbor_decode:
  484|    338|        if let Some(len) = self.len.as_mut() {
  485|    338|            if *len > 0 {
  486|    338|                *len -= 1;
  487|    338|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    338|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB39_7PayloadNtB1W_11Deserialize11deserialize1__NtB36_5InnerB3V_11deserialize9___VisitorECsgNBNhOtVwpa_11cbor_decode:
  354|    650|    fn deserialize_tuple_struct<V>(
  355|    650|        self,
  356|    650|        _name: &'static str,
  357|    650|        len: usize,
  358|    650|        visitor: V,
  359|    650|    ) -> Result<V::Value, Self::Error>
  360|    650|    where
  361|    650|        V: Visitor<'de>,
  362|    650|    {
  363|    650|        self.deserialize_tuple(len, visitor)
  364|    650|    }
_RNvMNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderE11from_readerCsgNBNhOtVwpa_11cbor_decode:
   93|    650|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    650|        Deserializer { reader }
   95|    650|    }
_RINvMs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs7c6ON2qBBpr_3cid5serdeINtNtB2k_3cid3CidKpENtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsgNBNhOtVwpa_11cbor_decode:
  113|    263|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    263|    where
  115|    263|        V: Visitor<'de>,
  116|    263|    {
  117|    263|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    251|        match tag.0 {
  120|    245|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      6|            _ => Err(DecodeError::TypeMismatch {
  122|      6|                name: "CBOR tag",
  123|      6|                byte: tag.0 as u8,
  124|      6|            }),
  125|       |        }
  126|    263|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess17next_element_seedINtNtCsbrgIbB1zXuY_4core6marker11PhantomDatayEECsgNBNhOtVwpa_11cbor_decode:
  484|    504|        if let Some(len) = self.len.as_mut() {
  485|    504|            if *len > 0 {
  486|    504|                *len -= 1;
  487|    504|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    504|    }
_RINvXs7_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer17deserialize_bytesNtNtCs7c6ON2qBBpr_3cid5serde17BytesToCidVisitorECsgNBNhOtVwpa_11cbor_decode:
  646|    245|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    245|        let byte = peek_one(&mut self.0.reader)?;
  648|    244|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    243|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    231|                    Cow::Borrowed(buf) => {
  653|    231|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      3|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    228|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      4|                    Cow::Owned(mut buf) => {
  660|      4|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      2|                            buf.remove(0);
  664|      2|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      1|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    245|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess17next_element_seedINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB3D_7PayloadNtB1Q_11Deserialize11deserialize1__NtB3A_5InnerB4p_11deserializeNtB3v_9___VisitorNtB1Q_7Visitor9visit_seq17___DeserializeWithEECsgNBNhOtVwpa_11cbor_decode:
  484|    638|        if let Some(len) = self.len.as_mut() {
  485|    638|            if *len > 0 {
  486|    638|                *len -= 1;
  487|    638|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    638|    }
_RINvNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de10from_sliceNtNtCs8PR9ZXgEIa0_11common_fuzz4cbor7PayloadECsgNBNhOtVwpa_11cbor_decode:
   40|    650|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    650|where
   42|    650|    T: de::Deserialize<'a>,
   43|    650|{
   44|    650|    let reader = SliceReader::new(buf);
   45|    650|    let mut deserializer = Deserializer::from_reader(reader);
   46|    650|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    190|    deserializer.end()?;
   48|    184|    Ok(value)
   49|    650|}
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess17next_element_seedINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataINtNtCs7c6ON2qBBpr_3cid3cid3CidKj40_EEECsgNBNhOtVwpa_11cbor_decode:
  484|    263|        if let Some(len) = self.len.as_mut() {
  485|    263|            if *len > 0 {
  486|    263|                *len -= 1;
  487|    263|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    263|    }
_RNvMs1_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderE5arrayCsgNBNhOtVwpa_11cbor_decode:
  434|    443|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    443|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    440|        Ok(Accessor {
  437|    440|            de,
  438|    440|            len: array_start.0,
  439|    440|        })
  440|    443|    }
_RNvMs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderE3endCsgNBNhOtVwpa_11cbor_decode:
  131|    190|        match peek_one(&mut self.reader) {
  132|      6|            Ok(_) => Err(DecodeError::TrailingData),
  133|    184|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    190|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer17deserialize_bytesNtNtCs13lQern29I2_14cs_serde_bytes7bytebuf14ByteBufVisitorECsgNBNhOtVwpa_11cbor_decode:
  228|    919|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    919|    where
  230|    919|        V: Visitor<'de>,
  231|    919|    {
  232|    919|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    755|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     12|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    919|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs7c6ON2qBBpr_3cid5serdeINtNtB3c_3cid3CidKpENtB1W_11Deserialize11deserialize16MainEntryVisitorKj40_EECsgNBNhOtVwpa_11cbor_decode:
  318|    263|    fn deserialize_newtype_struct<V>(
  319|    263|        self,
  320|    263|        name: &'static str,
  321|    263|        visitor: V,
  322|    263|    ) -> Result<V::Value, Self::Error>
  323|    263|    where
  324|    263|        V: Visitor<'de>,
  325|    263|    {
  326|    263|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    263|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    263|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess17next_element_seedINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEECsgNBNhOtVwpa_11cbor_decode:
  484|  2.47k|        if let Some(len) = self.len.as_mut() {
  485|  1.51k|            if *len > 0 {
  486|  1.17k|                *len -= 1;
  487|  1.17k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    337|                Ok(None)
  490|       |            }
  491|    962|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|    955|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      1|            self.de.reader.advance(1);
  495|      1|            Ok(None)
  496|       |        }
  497|  2.47k|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs13lQern29I2_14cs_serde_bytes2deINtNtCs2qTTZmpNTkr_5alloc6borrow3CowShENtB30_11Deserialize11deserialize10CowVisitorECsgNBNhOtVwpa_11cbor_decode:
  228|  2.47k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  2.47k|    where
  230|  2.47k|        V: Visitor<'de>,
  231|  2.47k|    {
  232|  2.47k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  2.27k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     76|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  2.47k|    }
_RNvMs1_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderE5tupleCsgNBNhOtVwpa_11cbor_decode:
  443|    650|    pub fn tuple(
  444|    650|        de: &'a mut Deserializer<R>,
  445|    650|        len: usize,
  446|    650|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    650|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    643|        if array_start.0 == Some(len) {
  450|    638|            Ok(Accessor {
  451|    638|                de,
  452|    638|                len: array_start.0,
  453|    638|            })
  454|       |        } else {
  455|      5|            Err(DecodeError::RequireLength {
  456|      5|                name: "tuple",
  457|      5|                expect: len,
  458|      5|                value: array_start.0.unwrap_or(0),
  459|      5|            })
  460|       |        }
  461|    650|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de9SeqAccess17next_element_seedINtNtCsbrgIbB1zXuY_4core6marker11PhantomDataNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsgNBNhOtVwpa_11cbor_decode:
  484|    281|        if let Some(len) = self.len.as_mut() {
  485|    281|            if *len > 0 {
  486|    281|                *len -= 1;
  487|    281|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    281|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderENtNtCsa0AMLvew6nk_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1W_5implsINtNtCs2qTTZmpNTkr_5alloc3vec3VecpENtB1W_11Deserialize11deserialize10VecVisitorNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEECsgNBNhOtVwpa_11cbor_decode:
  334|    443|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    443|    where
  336|    443|        V: Visitor<'de>,
  337|    443|    {
  338|    443|        let mut de = self.try_step()?;
  339|    443|        let seq = Accessor::array(&mut de)?;
  340|    440|        visitor.visit_seq(seq)
  341|    443|    }
_RNCNvMs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderE8try_step0CsgNBNhOtVwpa_11cbor_decode:
  106|  1.09k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))

_RNvXs7_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleEINtB16_4FromINtNtCsQ520hUvK91_7cbor4ii5error11DecodeErrorB14_EE4fromCsgNBNhOtVwpa_11cbor_decode:
  167|    310|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  168|    310|        match err {
  169|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  170|    214|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  171|     93|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  172|     93|                DecodeError::Mismatch { expect_major, byte }
  173|       |            }
  174|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  175|      0|                DecodeError::TypeMismatch { name, byte }
  176|       |            }
  177|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  178|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  179|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  180|       |            cbor4ii::DecodeError::RequireLength {
  181|      0|                name,
  182|      0|                expect,
  183|      0|                value,
  184|      0|            } => DecodeError::RequireLength {
  185|      0|                name,
  186|      0|                expect,
  187|      0|                value,
  188|      0|            },
  189|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  190|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  191|      3|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  192|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  193|      0|            _ => DecodeError::Msg(err.to_string()),
  194|       |        }
  195|    310|    }
_RINvXs4_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleENtNtCsa0AMLvew6nk_5serde2de5Error6customNtNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus5error5ErrorECsgNBNhOtVwpa_11cbor_decode:
  134|     51|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     51|        DecodeError::Msg(msg.to_string())
  136|     51|    }
_RINvXs4_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleENtNtCsa0AMLvew6nk_5serde2de5Error6customNtNtCs2qTTZmpNTkr_5alloc6string6StringECsgNBNhOtVwpa_11cbor_decode:
  134|     40|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     40|        DecodeError::Msg(msg.to_string())
  136|     40|    }
_RINvXs4_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleENtNtCsa0AMLvew6nk_5serde2de5Error6customNtNtNtCs8QKBx8eKjI3_10fvm_shared7address6errors5ErrorECsgNBNhOtVwpa_11cbor_decode:
  134|     35|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     35|        DecodeError::Msg(msg.to_string())
  136|     35|    }
_RNvXs9_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCsgNBNhOtVwpa_11cbor_decode:
   70|    466|#[derive(Debug)]
_RNvXs6_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCsbrgIbB1zXuY_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCsgNBNhOtVwpa_11cbor_decode:
  161|    466|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  162|    466|        fmt::Debug::fmt(self, f)
  163|    466|    }

_RINvNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser6to_vecNtNtCs8PR9ZXgEIa0_11common_fuzz4cbor7PayloadECsgNBNhOtVwpa_11cbor_decode:
   23|    184|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    184|where
   25|    184|    T: Serialize + ?Sized,
   26|    184|{
   27|    184|    let writer = BufWriter::new(Vec::new());
   28|    184|    let mut serializer = Serializer::new(writer);
   29|    184|    value.serialize(&mut serializer)?;
   30|    184|    Ok(serializer.into_inner().into_inner())
   31|    184|}
_RNvMNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterE10into_innerCsgNBNhOtVwpa_11cbor_decode:
   56|    184|    pub fn into_inner(self) -> W {
   57|    184|        self.writer
   58|    184|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCs8PR9ZXgEIa0_11common_fuzz4cborNtB3a_7PayloadNtB1V_9Serialize9serialize1__NtB35_5InnerB3W_9serialize15___SerializeWithECsgNBNhOtVwpa_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer13serialize_seqCsgNBNhOtVwpa_11cbor_decode:
  226|    184|        if let Some(len) = len {
  227|    184|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    184|        Ok(Collect {
  232|    184|            bounded: len.is_some(),
  233|    184|            ser: self,
  234|    184|        })
  235|    184|    }
_RNvXs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer15serialize_bytesCsgNBNhOtVwpa_11cbor_decode:
  160|    948|        types::Bytes(v).encode(&mut self.writer)?;
  161|    948|        Ok(())
  162|    948|    }
_RNvXs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer22serialize_tuple_structCsgNBNhOtVwpa_11cbor_decode:
  244|    184|    fn serialize_tuple_struct(
  245|    184|        self,
  246|    184|        _name: &'static str,
  247|    184|        len: usize,
  248|    184|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    184|        self.serialize_tuple(len)
  250|    184|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCs7l8CF9kh7fx_17fvm_ipld_bitfield8BitFieldECsgNBNhOtVwpa_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RINvXs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer24serialize_newtype_structNtNtCsjUBL1NXvhOw_11serde_bytes7bytebuf7ByteBufECsgNBNhOtVwpa_11cbor_decode:
  199|    184|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    184|        self,
  201|    184|        name: &'static str,
  202|    184|        value: &T,
  203|    184|    ) -> Result<Self::Ok, Self::Error> {
  204|    184|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    184|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    184|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsgNBNhOtVwpa_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressECsgNBNhOtVwpa_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer13serialize_u64CsgNBNhOtVwpa_11cbor_decode:
  123|    184|        v.encode(&mut self.writer)?;
  124|    184|        Ok(())
  125|    184|    }
_RNvMNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterE3newCsgNBNhOtVwpa_11cbor_decode:
   51|    184|    pub fn new(writer: W) -> Serializer<W> {
   52|    184|        Serializer { writer }
   53|    184|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsgNBNhOtVwpa_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RINvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser12SerializeSeq17serialize_elementRNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressECsgNBNhOtVwpa_11cbor_decode:
  369|    212|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    212|        value.serialize(&mut *self.ser)
  371|    212|    }
_RNvXs0_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser12SerializeSeq3endCsgNBNhOtVwpa_11cbor_decode:
  374|    184|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    184|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    184|        }
  378|       |
  379|    184|        Ok(())
  380|    184|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs7c6ON2qBBpr_3cid3cid3CidKj40_EECsgNBNhOtVwpa_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct3endCsgNBNhOtVwpa_11cbor_decode:
  408|    184|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    184|        Ok(())
  410|    184|    }
_RNvXs_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer15serialize_tupleCsgNBNhOtVwpa_11cbor_decode:
  239|    184|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    184|        Ok(BoundedCollect { ser: self })
  241|    184|    }
_RINvXs2_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs2qTTZmpNTkr_5alloc3vec3VecNtNtCs8QKBx8eKjI3_10fvm_shared7address7AddressEECsgNBNhOtVwpa_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs7_NtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterENtNtCsa0AMLvew6nk_5serde3ser10Serializer15serialize_bytesCsgNBNhOtVwpa_11cbor_decode:
  550|    184|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    184|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    184|        let prefixed = [&[0x00], value].concat();
  553|    184|        // CIDs are serialized with CBOR tag 42.
  554|    184|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    184|        Ok(())
  556|    184|    }

_RINvXs_Cs6kirejK4Bku_11serde_tupleINtB5_12DeserializerQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEENtNtCsa0AMLvew6nk_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB3R_7PayloadNtB2E_11Deserialize11deserialize1__NtB3O_5InnerB4D_11deserialize9___VisitorECsgNBNhOtVwpa_11cbor_decode:
  353|    650|    fn deserialize_tuple_struct<V>(
  354|    650|        self,
  355|    650|        name: &'static str,
  356|    650|        len: usize,
  357|    650|        visitor: V,
  358|    650|    ) -> Result<V::Value, Self::Error>
  359|    650|    where
  360|    650|        V: serde::de::Visitor<'de>,
  361|    650|    {
  362|    650|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    650|    }
_RNvXCs6kirejK4Bku_11serde_tupleINtB2_10SerializerQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEENtNtCsa0AMLvew6nk_5serde3ser10Serializer22serialize_tuple_structCsgNBNhOtVwpa_11cbor_decode:
  158|    184|    fn serialize_tuple_struct(
  159|    184|        self,
  160|    184|        name: &'static str,
  161|    184|        len: usize,
  162|    184|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    184|        self.0.serialize_tuple_struct(name, len)
  164|    184|    }

_RNvXNtCs6ymixsbGlt_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCs8QKBx8eKjI3_10fvm_shared:
    9|      3|    fn as_display(&self) -> Self {
   10|      3|        self
   11|      3|    }

_RNvNtCsQcZ4kOoOT1_15unsigned_varint6decode3u64CsgNBNhOtVwpa_11cbor_decode:
  122|    837|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    837|    decode!(buf, 9, u64)
  124|    837|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6decode7is_lastCsgNBNhOtVwpa_11cbor_decode:
   90|  3.77k|pub fn is_last(b: u8) -> bool {
   91|  3.77k|    b & 0x80 == 0
   92|  3.77k|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6decode7is_lastCs8QKBx8eKjI3_10fvm_shared:
   90|  2.74k|pub fn is_last(b: u8) -> bool {
   91|  2.74k|    b & 0x80 == 0
   92|  2.74k|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6decode3u64Cs8QKBx8eKjI3_10fvm_shared:
  122|    453|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    453|    decode!(buf, 9, u64)
  124|    453|}

_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode9u8_bufferCsgNBNhOtVwpa_11cbor_decode:
  101|    184|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    184|    [0; U8_LEN]
  103|    184|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode10u64_bufferCsgNBNhOtVwpa_11cbor_decode:
  119|  1.37k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.37k|    [0; U64_LEN]
  121|  1.37k|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode2u8CsgNBNhOtVwpa_11cbor_decode:
   45|    184|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    184|    encode!(number, buf)
   47|    184|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode3u64CsgNBNhOtVwpa_11cbor_decode:
   69|    516|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    516|    encode!(number, buf)
   71|    516|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode3u64Cs8QKBx8eKjI3_10fvm_shared:
   69|    140|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    140|    encode!(number, buf)
   71|    140|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode10u64_bufferCs8QKBx8eKjI3_10fvm_shared:
  119|    140|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    140|    [0; U64_LEN]
  121|    140|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode3u64Cs7l8CF9kh7fx_17fvm_ipld_bitfield:
   69|  9.14k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  9.14k|    encode!(number, buf)
   71|  9.14k|}
_RNvNtCsQcZ4kOoOT1_15unsigned_varint6encode10u64_bufferCs7l8CF9kh7fx_17fvm_ipld_bitfield:
  119|  9.14k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  9.14k|    [0; U64_LEN]
  121|  9.14k|}

_RINvNtCsQcZ4kOoOT1_15unsigned_varint2io8read_u64QQRShECsgNBNhOtVwpa_11cbor_decode:
   31|    854|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    854|                let mut b = encode::$b();
   33|  1.95k|                for i in 0 .. b.len() {
   34|  1.95k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.95k|                    if n == 0 {
   36|     14|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.93k|                    }
   38|  1.93k|                    if decode::is_last(b[i]) {
   39|    837|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.10k|                    }
   41|       |                }
   42|      3|                Err(decode::Error::Overflow.into())
   43|    854|            }
_RNvXs1_NtCsQcZ4kOoOT1_15unsigned_varint2ioNtB5_9ReadErrorINtNtCsbrgIbB1zXuY_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|     10|    fn from(e: decode::Error) -> Self {
   92|     10|        ReadError::Decode(e)
   93|     10|    }

_RNvXs6_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.49k|        self.0.next()
  312|  7.49k|    }
_RNvXse_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  7.30k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.30k|        let next = self.next.take()?;
  483|  7.30k|        self.next = self.iter.next();
  484|  7.30k|        Some(next)
  485|  7.30k|    }
_RNvXs0_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  7.30k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  7.30k|        // the difference between a range and an empty range is just that range
  183|  7.30k|        Some(lhs)
  184|  7.30k|    }
_RNvMs8_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    184|    fn new(lhs: A, rhs: B) -> Self {
  343|    184|        Self {
  344|    184|            lhs: Lookahead::new(lhs),
  345|    184|            rhs: Lookahead::new(rhs),
  346|    184|            combinator: Default::default(),
  347|    184|        }
  348|    184|    }
_RNCNvXs9_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  7.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.49k|        let next = self.next.take()?;
  483|  7.30k|        self.next = self.iter.next();
  484|  7.30k|        Some(next)
  485|  7.49k|    }
_RNvMs8_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  7.49k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.49k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  7.30k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    184|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.30k|        if advance_lhs {
  370|  7.30k|            self.lhs.next();
  371|  7.30k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  7.30k|        range
  376|  7.49k|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  7.49k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.49k|        self.next.as_mut()
  474|  7.49k|    }
_RNCNvXs9_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  7.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    184|    fn new(lhs: A, rhs: B) -> Self {
  343|    184|        Self {
  344|    184|            lhs: Lookahead::new(lhs),
  345|    184|            rhs: Lookahead::new(rhs),
  346|    184|            combinator: Default::default(),
  347|    184|        }
  348|    184|    }
_RNvXs6_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.49k|        self.0.next()
  312|  7.49k|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.30k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.30k|        self.next.as_mut()
  474|  7.30k|    }
_RNvXsf_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsbrgIbB1zXuY_4core7default7Default7defaultB9_:
   86|    184|#[derive(Default)]
_RNvMs5_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    184|    pub fn new(a: A, b: B) -> Self {
  298|    184|        Self(Merge::new(_Combine::new(a, b)))
  299|    184|    }
_RNvXsb_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.49k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  7.30k|        while let Some(next) = self.iter.peek() {
  443|  7.13k|            if next.start > range.end {
  444|  7.13k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  7.30k|        Some(range)
  452|  7.49k|    }
_RNvMs8_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  7.49k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.49k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  7.30k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    184|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.30k|        if advance_lhs {
  370|  7.30k|            self.lhs.next();
  371|  7.30k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  7.30k|        range
  376|  7.49k|    }
_RNvXNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  7.30k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  7.30k|        // the union of a range and an empty range is just that range
  111|  7.30k|        Some(lhs)
  112|  7.30k|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNvXsb_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.49k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  7.30k|        while let Some(next) = self.iter.peek() {
  443|  7.13k|            if next.start > range.end {
  444|  7.13k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  7.30k|        Some(range)
  452|  7.49k|    }
_RNvMsa_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    184|    pub fn new(iter: I) -> Self {
  425|    184|        Self {
  426|    184|            iter: Lookahead::new(iter),
  427|    184|        }
  428|    184|    }
_RNvMs5_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    184|    pub fn new(a: A, b: B) -> Self {
  298|    184|        Self(Merge::new(_Combine::new(a, b)))
  299|    184|    }
_RNCNvXs9_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  7.30k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  7.30k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.49k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.49k|        self.next.as_mut()
  474|  7.49k|    }
_RNvMsa_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    184|    pub fn new(iter: I) -> Self {
  425|    184|        Self {
  426|    184|            iter: Lookahead::new(iter),
  427|    184|        }
  428|    184|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  14.9k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  14.9k|        self.next.as_mut()
  474|  14.9k|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  7.30k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.30k|        self.next.as_mut()
  474|  7.30k|    }
_RNvXs9_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.49k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.49k|    }
_RNvXsh_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsbrgIbB1zXuY_4core7default7Default7defaultB9_:
  151|    184|#[derive(Default)]
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|    368|    fn new(mut iter: I) -> Self {
  468|    368|        let next = iter.next();
  469|    368|        Self { iter, next }
  470|    368|    }
_RNvXs9_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.49k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.49k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.49k|    }
_RNvXse_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  7.30k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.30k|        let next = self.next.take()?;
  483|  7.30k|        self.next = self.iter.next();
  484|  7.30k|        Some(next)
  485|  7.30k|    }
_RNvMsd_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNvXse_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.49k|        let next = self.next.take()?;
  483|  7.30k|        self.next = self.iter.next();
  484|  7.30k|        Some(next)
  485|  7.49k|    }

_RINvMs2_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    184|    pub fn new<II>(iter: II) -> Self
  140|    184|    where
  141|    184|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    184|    {
  143|    184|        Self(iter.into_iter())
  144|    184|    }
_RNCINvNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0B6_:
  166|    368|    Ranges::new(iter::from_fn(move || {
  167|    368|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|    368|    }))
_RINvYINtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    184|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    184|        Combine::new(self, other)
   23|    184|    }
_RINvYINtNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    184|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    184|        Combine::new(self, other)
   33|    184|    }
_RNvXs3_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|    368|    fn next(&mut self) -> Option<Self::Item> {
  154|    368|        self.0.next()
  155|    368|    }
_RINvNtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEEB4_:
  163|    368|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|    368|    let mut iter = bits.into_iter().peekable();
  165|    368|
  166|    368|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|    368|    }))
  180|    368|}
_RINvMs2_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs2qTTZmpNTkr_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|    368|    pub fn new<II>(iter: II) -> Self
  140|    368|    where
  141|    368|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    368|    {
  143|    368|        Self(iter.into_iter())
  144|    368|    }
_RNvXs3_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsbrgIbB1zXuY_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  7.49k|    fn next(&mut self) -> Option<Self::Item> {
  154|  7.49k|        self.0.next()
  155|  7.49k|    }

_RNvMs4_Cs7l8CF9kh7fx_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    184|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    184|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    184|    }
_RNvXsi_Cs7l8CF9kh7fx_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsbrgIbB1zXuY_4core7default7Default7defaultB5_:
   42|    281|#[derive(Debug, Default, Clone)]
_RNvMs4_Cs7l8CF9kh7fx_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    184|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    184|        self.inner_ranges()
  287|    184|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    184|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    184|    }

_RNvXNtCs7l8CF9kh7fx_17fvm_ipld_bitfield5rangeINtNtNtCsbrgIbB1zXuY_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  7.30k|    fn size(&self) -> Self::Idx {
   15|  7.30k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  7.30k|            self.end - self.start
   19|       |        }
   20|  7.30k|    }

_RNvXs5_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCsbrgIbB1zXuY_4core3fmt7Display3fmt:
    3|     51|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   81|    184|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    184|    where
   83|    184|        S: Serializer,
   84|    184|    {
   85|    184|        let bytes = self.to_bytes();
   86|    184|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    184|        }
   92|    184|        serde_bytes::serialize(&bytes, serializer)
   93|    184|    }
_RINvXs_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   97|    338|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    338|    where
   99|    338|        D: Deserializer<'de>,
  100|    338|    {
  101|    338|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    332|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    332|        }
  108|    332|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    338|    }
_RNvMs1_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    184|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    184|        let mut iter = self.ranges();
  201|       |
  202|    184|        let first_range = match iter.next() {
  203|    176|            Some(range) => range,
  204|      8|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    176|        let mut writer = BitWriter::new();
  208|    176|        writer.write(0, 2); // version 00
  209|    176|
  210|    176|        if first_range.start == 0 {
  211|     96|            writer.write(1, 1); // the first bit is a 1
  212|     96|        } else {
  213|     80|            writer.write(0, 1); // the first bit is a 0
  214|     80|            writer.write_len(first_range.start); // the number of leading 0s
  215|     80|        }
  216|       |
  217|    176|        writer.write_len(first_range.size());
  218|    176|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  7.30k|        for range in iter {
  223|  7.13k|            writer.write_len(range.start - index); // zeros
  224|  7.13k|            writer.write_len(range.size()); // ones
  225|  7.13k|            index = range.end;
  226|  7.13k|        }
  227|       |
  228|    176|        writer.finish()
  229|    184|    }
_RNvMs1_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    332|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    332|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    331|        let version = reader.read(2);
  160|    331|        if version != 0 {
  161|      1|            return Err(Error::UnsupportedVersion);
  162|    330|        }
  163|    330|
  164|    330|        let mut next_value = reader.read(1) == 1;
  165|    330|        let mut ranges = Vec::new();
  166|    330|        let mut index = 0u64;
  167|    330|        let mut total_len: u64 = 0;
  168|       |
  169|  25.0k|        while let Some(len) = reader.read_len()? {
  170|  24.7k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  24.7k|            if ovf {
  172|      1|                return Err(Error::RLEOverflow);
  173|  24.7k|            }
  174|  24.7k|            total_len = new_total_len;
  175|  24.7k|            let start = index;
  176|  24.7k|            index += len;
  177|  24.7k|            let end = index;
  178|  24.7k|
  179|  24.7k|            if next_value {
  180|  12.4k|                ranges.push(start..end);
  181|  12.4k|            }
  182|       |
  183|  24.7k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    293|        if next_value {
  189|     12|            return Err(Error::NotMinimal);
  190|    281|        }
  191|    281|
  192|    281|        Ok(Self {
  193|    281|            ranges,
  194|    281|            ..Default::default()
  195|    281|        })
  196|    332|    }

_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  86.3k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  86.3k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  86.3k|        let mask = (1 << num_bits) - 1;
   55|  86.3k|        (self.bits & mask) as u8
   56|  86.3k|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  12.4k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  12.4k|        let mut len = 0u64;
   94|       |
   95|  60.8k|        for i in 0..VARINT_MAX_BYTES {
   96|  60.8k|            let byte = self.read(8);
   97|  60.8k|
   98|  60.8k|            // strip off the most significant bit and add
   99|  60.8k|            // it to the output
  100|  60.8k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  60.8k|
  102|  60.8k|            // if the most significant bit is a 0, we've
  103|  60.8k|            // reached the end of the varint
  104|  60.8k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  12.4k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      4|                    break;
  109|  12.4k|                }
  110|  12.4k|                return Ok(len);
  111|  48.4k|            }
  112|       |        }
  113|       |
  114|      6|        Err(Error::InvalidVarint)
  115|  12.4k|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  61.5k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  61.5k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  61.5k|        let res = self.peek(num_bits);
   85|  61.5k|        self.drop(num_bits);
   86|  61.5k|
   87|  61.5k|        res
   88|  61.5k|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  86.3k|    pub fn drop(&mut self, num_bits: u32) {
   61|  86.3k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  86.3k|        self.bits >>= num_bits;
   65|  86.3k|        self.num_bits -= num_bits;
   66|  86.3k|
   67|  86.3k|        // not sure why this being outside of the if improves the performance
   68|  86.3k|        // bit it does, probably related to keeping caches warm
   69|  86.3k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  86.3k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  86.3k|
   72|  86.3k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  86.3k|        if self.num_bits < 8 {
   74|  67.1k|            self.num_bits += 8;
   75|  67.1k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  67.1k|        }
   77|  86.3k|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    332|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    332|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    332|        // data.
   28|    332|        if bytes.last() == Some(&0) {
   29|      1|            return Err(Error::NotMinimal);
   30|    331|        }
   31|    331|        let mut bits = 0u64;
   32|    993|        for i in 0..2 {
   33|    662|            let byte = bytes.get(i).unwrap_or(&0);
   34|    662|            bits |= (*byte as u64) << (8 * i);
   35|    662|        }
   36|       |
   37|    331|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    331|
   39|    331|        Ok(Self {
   40|    331|            bytes,
   41|    331|            bits,
   42|    331|            num_bits: 16,
   43|    331|        })
   44|    332|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  25.0k|    pub fn has_more(&self) -> bool {
  153|  25.0k|        self.bits != 0 || !self.bytes.is_empty()
  154|  25.0k|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  25.0k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  25.0k|        // We're done.
  120|  25.0k|        if !self.has_more() {
  121|    293|            return Ok(None);
  122|  24.7k|        }
  123|  24.7k|
  124|  24.7k|        let peek6 = self.peek(6);
  125|       |
  126|  24.7k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|  9.73k|            self.drop(1);
  129|  9.73k|            1
  130|  15.0k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  2.60k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  2.60k|            self.drop(6);
  134|  2.60k|            if val < 2 {
  135|     14|                return Err(Error::NotMinimal);
  136|  2.58k|            }
  137|  2.58k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  12.4k|            self.drop(2);
  141|  12.4k|            let val = self.read_varint()?;
  142|  12.4k|            if val < 16 {
  143|     16|                return Err(Error::NotMinimal);
  144|  12.4k|            }
  145|  12.4k|            val
  146|       |        };
  147|       |
  148|  24.7k|        Ok(Some(len))
  149|  25.0k|    }

_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    176|    pub fn new() -> Self {
   18|    176|        Default::default()
   19|    176|    }
_RNvXs_NtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsbrgIbB1zXuY_4core7default7Default7defaultB8_:
    4|    176|#[derive(Default, Clone, Debug)]
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    176|    pub fn finish(mut self) -> Vec<u8> {
   61|    176|        if self.bits > 0 {
   62|     74|            self.bytes.push(self.bits as u8);
   63|    102|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    176|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    176|        self.bytes
   71|    176|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  14.5k|    pub fn write_len(&mut self, len: u64) {
   39|  14.5k|        debug_assert!(len > 0);
   40|       |
   41|  14.5k|        if len == 1 {
   42|  4.00k|            // Block Single (prefix 1)
   43|  4.00k|            self.write(1, 1);
   44|  10.5k|        } else if len < 16 {
   45|  1.37k|            // Block Short (prefix 01)
   46|  1.37k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  1.37k|            self.write(len as u8, 4);
   48|  1.37k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  9.14k|            self.write(0, 2);
   51|  9.14k|
   52|  9.14k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  46.2k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  46.2k|                self.write(byte, 8);
   55|  46.2k|            }
   56|       |        }
   57|  14.5k|    }
_RNvMNtNtCs7l8CF9kh7fx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  62.4k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  62.4k|        debug_assert!(num_bits <= 8);
   24|  62.4k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  62.4k|        self.bits |= (byte as u16) << self.num_bits;
   27|  62.4k|        self.num_bits += num_bits;
   28|  62.4k|
   29|  62.4k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  62.4k|        if self.num_bits >= 8 {
   31|  50.0k|            self.bytes.push(self.bits as u8);
   32|  50.0k|            self.bits >>= 8;
   33|  50.0k|            self.num_bits -= 8;
   34|  50.0k|        }
   35|  62.4k|    }

_RINvXNvXNvNtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   35|    184|#[derive(Debug, Serialize)]
_RINvXNvNtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   35|    184|#[derive(Debug, Serialize)]
_RINvXs4_NtCs7l8CF9kh7fx_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   93|    281|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    281|    where
   95|    281|        D: Deserializer<'de>,
   96|    281|    {
   97|    281|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    263|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    263|        }
  104|    263|        Ok(Self::Unvalidated(bytes))
  105|    281|    }

_RNvXNtCs9JYYQv87cix_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCsbrgIbB1zXuY_4core7convert4FromINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCsgNBNhOtVwpa_11cbor_decode:
   22|    466|    fn from(err: DecodeError<T>) -> Self {
   23|    466|        Self {
   24|    466|            description: err.to_string(),
   25|    466|            protocol: CodecProtocol::Cbor,
   26|    466|        }
   27|    466|    }

_RINvCs9JYYQv87cix_17fvm_ipld_encoding10from_sliceNtNtCs8PR9ZXgEIa0_11common_fuzz4cbor7PayloadECsgNBNhOtVwpa_11cbor_decode:
   50|    650|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    650|where
   52|    650|    T: de::Deserialize<'a>,
   53|    650|{
   54|    650|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    650|}
_RINvCs9JYYQv87cix_17fvm_ipld_encoding6to_vecNtNtCs8PR9ZXgEIa0_11common_fuzz4cbor7PayloadECsgNBNhOtVwpa_11cbor_decode:
   33|    184|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    184|where
   35|    184|    T: ser::Serialize + ?Sized,
   36|    184|{
   37|    184|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    184|}

_RNvXs5_NtNtCs8QKBx8eKjI3_10fvm_shared7address6errorsNtB5_5ErrorNtNtCsbrgIbB1zXuY_4core3fmt7Display3fmt:
   13|     35|#[derive(Debug, PartialEq, Error)]
_RNvXs0_NtNtCs8QKBx8eKjI3_10fvm_shared7address6errorsNtB5_5ErrorINtNtCsbrgIbB1zXuY_4core7convert4FromNtNtCsQcZ4kOoOT1_15unsigned_varint6decode5ErrorE4from:
   49|     17|    fn from(_: VarintError) -> Error {
   50|     17|        Error::InvalidPayload
   51|     17|    }

_RINvXs3_NtCs8QKBx8eKjI3_10fvm_shared7addressNtB6_7AddressNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
  274|  2.13k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  2.13k|    where
  276|  2.13k|        D: Deserializer<'de>,
  277|  2.13k|    {
  278|  2.13k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  2.02k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  2.13k|    }
_RINvXs2_NtCs8QKBx8eKjI3_10fvm_shared7addressNtB6_7AddressNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
  264|    396|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|    396|    where
  266|    396|        S: Serializer,
  267|    396|    {
  268|    396|        let address_bytes = self.to_bytes();
  269|    396|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|    396|    }
_RNvMs_NtCs8QKBx8eKjI3_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  2.02k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  2.02k|        if bz.len() < 2 {
   88|     10|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  2.01k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  2.01k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  2.02k|    }
_RNvNtCs8QKBx8eKjI3_10fvm_shared7address12to_leb_bytes:
  310|    140|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|    140|    // write id to buffer in leb128 format
  312|    140|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|    140|}
_RNvMs_NtCs8QKBx8eKjI3_10fvm_shared7addressNtB4_7Address3new:
   78|  2.01k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  2.01k|        Ok(Self {
   80|  2.01k|            network,
   81|  2.01k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  2.01k|    }
_RNvNtCs8QKBx8eKjI3_10fvm_shared7address14from_leb_bytes:
  315|    453|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|    453|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|    436|    if !remaining.is_empty() {
  319|      4|        return Err(Error::InvalidPayload);
  320|    432|    }
  321|    432|    Ok(id)
  322|    453|}
_RNvMs_NtCs8QKBx8eKjI3_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|    396|    pub fn to_bytes(self) -> Vec<u8> {
  177|    396|        self.payload.to_bytes()
  178|    396|    }

_RNvXs_NtNtCs8QKBx8eKjI3_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsbrgIbB1zXuY_4core7convert4FromNtB4_7PayloadE4from:
   75|    396|    fn from(pl: Payload) -> Self {
   76|    396|        match pl {
   77|    140|            Payload::ID(_) => Self::ID,
   78|     88|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|     76|            Payload::Actor(_) => Self::Actor,
   80|     92|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|    396|    }
_RNCNvMNtNtCs8QKBx8eKjI3_10fvm_shared7address7payloadNtB4_7Payload3new0B8_:
   57|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMNtNtCs8QKBx8eKjI3_10fvm_shared7address7payloadNtB4_7Payload3news_0B8_:
   62|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMNtNtCs8QKBx8eKjI3_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  2.01k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  2.01k|        let payload = match protocol {
   53|    453|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    429|                payload
   56|    429|                    .try_into()
   57|    429|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    774|                payload
   61|    774|                    .try_into()
   62|    774|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    356|                payload
   66|    356|                    .try_into()
   67|    356|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  1.98k|        Ok(payload)
   71|  2.01k|    }
_RNvMNtNtCs8QKBx8eKjI3_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|    396|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|    396|        let mut bz = match self {
   40|    140|            ID(i) => to_leb_bytes(i).unwrap(),
   41|     88|            Secp256k1(arr) => arr.to_vec(),
   42|     76|            Actor(arr) => arr.to_vec(),
   43|     92|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|    396|        bz.insert(0, Protocol::from(self) as u8);
   47|    396|        bz
   48|    396|    }
_RNCNvMNtNtCs8QKBx8eKjI3_10fvm_shared7address7payloadNtB4_7Payload3news0_0B8_:
   67|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,

_RNvMNtNtCs8QKBx8eKjI3_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  2.01k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  2.01k|        FromPrimitive::from_u8(b)
   28|  2.01k|    }
_RNvXNvNtNtCs8QKBx8eKjI3_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs2yu7KD7ROts_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  2.01k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs8QKBx8eKjI3_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs2yu7KD7ROts_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  2.01k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RINvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB3_7PayloadNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   10|  1.11k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtBb_7PayloadNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   10|    134|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCs8PR9ZXgEIa0_11common_fuzz4cborNtBa_7PayloadNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs6kirejK4Bku_11serde_tuple10SerializerQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEEECsgNBNhOtVwpa_11cbor_decode:
   10|    184|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCs8PR9ZXgEIa0_11common_fuzz4cborNtB5_7PayloadNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   10|    184|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCs8PR9ZXgEIa0_11common_fuzz4cborNtBd_7PayloadNtNtCsa0AMLvew6nk_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils9BufWriterEECsgNBNhOtVwpa_11cbor_decode:
   10|    184|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtBd_7PayloadNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de8AccessorNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEE0CsgNBNhOtVwpa_11cbor_decode:
   10|    504|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtB8_7PayloadNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs6kirejK4Bku_11serde_tuple12DeserializerQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEEECsgNBNhOtVwpa_11cbor_decode:
   10|    650|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCs8PR9ZXgEIa0_11common_fuzz4cborNtBe_7PayloadNtNtCsa0AMLvew6nk_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsdc0ZJSGU6mF_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsQ520hUvK91_7cbor4ii4core5utils11SliceReaderEECsgNBNhOtVwpa_11cbor_decode:
   10|    638|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

