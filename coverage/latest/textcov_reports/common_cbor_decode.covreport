_RINvXss_NtNtCsfeWXHkhNspW_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  256|    529|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    529|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    529|                }
_RINvXs5_NtNtCsfeWXHkhNspW_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsbJTWGl6dkHx_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  510|  3.88k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  3.88k|        use crate::alloc::borrow::Cow;
  512|  3.88k|
  513|  3.88k|        let mut buf = Vec::new();
  514|  3.88k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  3.54k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|    189|            Cow::Owned(buf)
  518|       |        }))
  519|  3.88k|    }
_RINvMs0_NtNtCsfeWXHkhNspW_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  227|  6.78k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  6.78k|        match self.byte & self.major_limit {
  229|  6.78k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|  1.17k|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|    331|                let mut buf = [0; 2];
  233|    331|                pull_exact(reader, &mut buf)?;
  234|    323|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|    243|                let mut buf = [0; 4];
  238|    243|                pull_exact(reader, &mut buf)?;
  239|    230|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    376|                let mut buf = [0; 8];
  243|    376|                pull_exact(reader, &mut buf)?;
  244|    365|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|     39|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  6.78k|    }
_RINvNtNtCsfeWXHkhNspW_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  431|  9.50k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  9.50k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  9.50k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  9.50k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  4.77k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  4.77k|            if buf.len() >= len {
  440|  4.71k|                reader.advance(len);
  441|  4.71k|                return Ok(Some(&buf[..len]));
  442|     66|            }
  443|      0|        }
  444|       |
  445|     66|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|     70|        while len != 0 {
  448|     70|            let readbuf = reader.fill(len)?;
  449|     70|            let readbuf = readbuf.as_ref();
  450|     70|
  451|     70|            if readbuf.is_empty() {
  452|     66|                return Err(Error::Eof);
  453|      4|            }
  454|      4|
  455|      4|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      4|
  457|      4|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      4|            reader.advance(readlen);
  459|      4|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|  6.08k|            let byte = pull_one(reader)?;
  467|       |
  468|  6.05k|            if byte == marker::BREAK {
  469|    436|                break
  470|  5.62k|            }
  471|  5.62k|
  472|  5.62k|            if !reader.step_in() {
  473|      1|                return Err(Error::DepthLimit);
  474|  5.62k|            }
  475|  5.62k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|  5.62k|            let reader = &mut *reader;
  477|       |
  478|  5.62k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|  1.16k|                buf.extend_from_slice(longbuf);
  480|  1.16k|            }
  481|       |        }
  482|       |
  483|    436|        Ok(None)
  484|       |    }
  485|  9.50k|}
_RINvXsc_NtNtCsfeWXHkhNspW_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  615|  1.14k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|  1.14k|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|  1.14k|    }
_RINvXsg_NtNtCsfeWXHkhNspW_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  707|    292|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    292|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    292|    }
_RINvNtNtCsfeWXHkhNspW_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  136|    950|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  1.88k|    while !buf.is_empty() {
  138|    966|        let readbuf = reader.fill(buf.len())?;
  139|    966|        let readbuf = readbuf.as_ref();
  140|    966|
  141|    966|        if readbuf.is_empty() {
  142|     32|            return Err(Error::Eof);
  143|    934|        }
  144|    934|
  145|    934|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    934|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    934|        reader.advance(len);
  148|    934|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    918|    Ok(())
  152|    950|}
_RINvNtNtCsfeWXHkhNspW_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  599|  10.6k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  10.6k|    -> Result<Option<usize>, Error<R::Error>>
  601|  10.6k|{
  602|  10.6k|    if byte != (marker::START | (major << 5)) {
  603|  5.96k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  5.90k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  5.90k|        Ok(Some(len))
  606|       |    } else {
  607|  4.68k|        Ok(None)
  608|       |    }
  609|  10.6k|}
_RNvMs0_NtNtCsfeWXHkhNspW_7cbor4ii4core3decNtB5_7TypeNum3newCs6iUbv6KjWLj_11cbor_decode:
  179|  6.78k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  6.78k|        TypeNum { major_limit, byte }
  181|  6.78k|    }
_RINvYINtNtNtCsfeWXHkhNspW_7cbor4ii4core5types5BytesINtNtCsbJTWGl6dkHx_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
   73|  3.96k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  3.96k|        let byte = pull_one(reader)?;
   75|  3.88k|        Self::decode_with(byte, reader)
   76|  3.96k|    }
_RINvYyNtNtNtCsfeWXHkhNspW_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
   73|    538|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    538|        let byte = pull_one(reader)?;
   75|    529|        Self::decode_with(byte, reader)
   76|    538|    }
_RINvYNtNtNtCsfeWXHkhNspW_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
   73|    295|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    295|        let byte = pull_one(reader)?;
   75|    292|        Self::decode_with(byte, reader)
   76|    295|    }
_RNCINvNtNtCsfeWXHkhNspW_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0Cs6iUbv6KjWLj_11cbor_decode:
  475|  5.62k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvNtNtCsfeWXHkhNspW_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
  125|  13.2k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  13.2k|    let b = reader.fill(1)?
  127|  13.2k|        .as_ref()
  128|  13.2k|        .get(0)
  129|  13.2k|        .copied()
  130|  13.2k|        .ok_or(Error::Eof)?;
  131|  13.0k|    reader.advance(1);
  132|  13.0k|    Ok(b)
  133|  13.2k|}
_RNvMNtNtCsfeWXHkhNspW_7cbor4ii4core3decNtB2_9Reference6as_refCs6iUbv6KjWLj_11cbor_decode:
   81|  14.2k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  14.2k|        match self {
   83|  14.2k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  14.2k|    }
_RNvNtNtCsfeWXHkhNspW_7cbor4ii4core3dec8if_majorCs6iUbv6KjWLj_11cbor_decode:
  894|    279|pub fn if_major(byte: u8) -> u8 {
  895|    279|    byte >> 5
  896|    279|}
_RINvYNtNtNtCsfeWXHkhNspW_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
   73|  1.15k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  1.15k|        let byte = pull_one(reader)?;
   75|  1.14k|        Self::decode_with(byte, reader)
   76|  1.15k|    }

_RINvXs3_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
   84|  2.39k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  2.39k|        match u16::try_from(self.value) {
   86|  2.38k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      6|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      6|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  2.39k|        Ok(())
   93|  2.39k|    }
_RINvXs4_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
   98|  2.51k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  2.51k|        match u32::try_from(self.value) {
  100|  2.39k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    126|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    126|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  2.51k|        Ok(())
  107|  2.51k|    }
_RNvMs0_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB5_7TypeNumtE3newCs6iUbv6KjWLj_11cbor_decode:
   52|  2.38k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.38k|        TypeNum { type_, value }
   54|  2.38k|    }
_RINvXsd_NtNtCsfeWXHkhNspW_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
  269|    464|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  270|    464|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    464|        Ok(())
  272|    464|    }
_RINvXsi_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
  316|    232|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  317|    232|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    232|        self.1.encode(writer)
  319|    232|    }
_RNvMs0_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB5_7TypeNumyE3newCs6iUbv6KjWLj_11cbor_decode:
   52|  2.51k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.51k|        TypeNum { type_, value }
   54|  2.51k|    }
_RNvMs0_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB5_7TypeNumhE3newCs6iUbv6KjWLj_11cbor_decode:
   52|  2.29k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.29k|        TypeNum { type_, value }
   54|  2.29k|    }
_RINvXs7_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
  208|  1.59k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  209|  1.59k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.59k|        writer.push(self.0)?;
  211|  1.59k|        Ok(())
  212|  1.59k|    }
_RNvMs0_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB5_7TypeNummE3newCs6iUbv6KjWLj_11cbor_decode:
   52|  2.39k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  2.39k|        TypeNum { type_, value }
   54|  2.39k|    }
_RINvXs1_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
   59|  2.29k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  2.29k|        match self.value {
   61|  2.29k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    610|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  2.29k|        Ok(())
   65|  2.29k|    }
_RINvXs2_NtNtCsfeWXHkhNspW_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
   70|  2.38k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  2.38k|        match u8::try_from(self.value) {
   72|  2.29k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     90|                let [x0, x1] = self.value.to_be_bytes();
   75|     90|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  2.38k|        Ok(())
   79|  2.38k|    }
_RINvXsu_NtNtCsfeWXHkhNspW_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs6iUbv6KjWLj_11cbor_decode:
  159|    232|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    232|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    232|                }

_RNvXs1_NtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCs6iUbv6KjWLj_11cbor_decode:
   84|  6.77k|    fn step_out(&mut self) {
   85|  6.77k|        self.limit += 1;
   86|  6.77k|    }
_RNvMNtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB2_9BufWriter3newCs6iUbv6KjWLj_11cbor_decode:
   14|    232|    pub fn new(buf: Vec<u8>) -> Self {
   15|    232|       BufWriter(buf)
   16|    232|    }
_RNvXs_NtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCs6iUbv6KjWLj_11cbor_decode:
   39|  4.10k|    fn push(&mut self, input: &[u8]) -> Result<(), Self::Error> {
   40|  4.10k|        self.0.try_reserve(input.len())?;
   41|  4.10k|        self.0.extend_from_slice(input);
   42|  4.10k|        Ok(())
   43|  4.10k|    }
_RNvMs0_NtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB5_11SliceReader3newCs6iUbv6KjWLj_11cbor_decode:
   53|    667|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    667|        SliceReader { buf, limit: 256 }
   55|    667|    }
_RNvXs1_NtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCs6iUbv6KjWLj_11cbor_decode:
   68|  18.7k|    fn advance(&mut self, n: usize) {
   69|  18.7k|        let len = core::cmp::min(self.buf.len(), n);
   70|  18.7k|        self.buf = &self.buf[len..];
   71|  18.7k|    }
_RNvXs1_NtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCs6iUbv6KjWLj_11cbor_decode:
   62|  19.5k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  19.5k|        let len = core::cmp::min(self.buf.len(), want);
   64|  19.5k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  19.5k|    }
_RNvMNtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB2_9BufWriter10into_innerCs6iUbv6KjWLj_11cbor_decode:
   24|    232|    pub fn into_inner(self) -> Vec<u8> {
   25|    232|        self.0
   26|    232|    }
_RNvXs1_NtNtCsfeWXHkhNspW_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCs6iUbv6KjWLj_11cbor_decode:
   74|  6.77k|    fn step_in(&mut self) -> bool {
   75|  6.77k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  6.77k|            self.limit = limit;
   77|  6.77k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  6.77k|    }

_RNvMs1_NtCsfeWXHkhNspW_7cbor4ii5errorINtB5_11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleE8mismatchCs6iUbv6KjWLj_11cbor_decode:
   93|     39|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     39|        DecodeError::Mismatch {
   95|     39|            expect_major: (!major_limit) >> 5,
   96|     39|            byte
   97|     39|        }
   98|     39|    }

_RNvXs0_NtCsfeWXHkhNspW_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCskiyb6Qz9mfK_4core3ops4drop4Drop4dropCs6iUbv6KjWLj_11cbor_decode:
   24|  5.62k|    fn drop(&mut self) {
   25|  5.62k|        (self.1)(self.0);
   26|  5.62k|    }
_RNvXs_NtCsfeWXHkhNspW_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCskiyb6Qz9mfK_4core3ops5deref8DerefMut9deref_mutCs6iUbv6KjWLj_11cbor_decode:
   17|  5.62k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  5.62k|        self.0
   19|  5.62k|    }

_RNvMNtCs8fFY8S8unBo_3cid3cidINtB2_3CidKj40_E6new_v0Cs6iUbv6KjWLj_11cbor_decode:
   78|     23|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     23|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     23|        }
   82|     23|        Ok(Self {
   83|     23|            version: Version::V0,
   84|     23|            codec: DAG_PB,
   85|     23|            hash,
   86|     23|        })
   87|     23|    }
_RINvMNtCs8fFY8S8unBo_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsbJTWGl6dkHx_5alloc3vec3VechEECs6iUbv6KjWLj_11cbor_decode:
  162|    210|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    210|        let mut version_buf = varint_encode::u64_buffer();
  164|    210|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    210|
  166|    210|        let mut codec_buf = varint_encode::u64_buffer();
  167|    210|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    210|
  169|    210|        let mut written = version.len() + codec.len();
  170|    210|
  171|    210|        w.write_all(version)?;
  172|    210|        w.write_all(codec)?;
  173|    210|        written += self.hash.write(&mut w)?;
  174|       |
  175|    210|        Ok(written)
  176|    210|    }
_RNvMNtCs8fFY8S8unBo_3cid3cidINtB2_3CidKj40_E6new_v1Cs6iUbv6KjWLj_11cbor_decode:
   90|    214|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    214|        Self {
   92|    214|            version: Version::V1,
   93|    214|            codec,
   94|    214|            hash,
   95|    214|        }
   96|    214|    }
_RINvMNtCs8fFY8S8unBo_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECs6iUbv6KjWLj_11cbor_decode:
  140|    272|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    272|        let version = varint_read_u64(&mut r)?;
  142|    266|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    259|        if [version, codec] == [0x12, 0x20] {
  146|     24|            let mut digest = [0u8; 32];
  147|     24|            r.read_exact(&mut digest)?;
  148|     23|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|     23|            return Self::new_v0(mh);
  150|    235|        }
  151|       |
  152|    235|        let version = Version::try_from(version)?;
  153|    231|        match version {
  154|      1|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    230|                let mh = Multihash::read(r)?;
  157|    214|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    272|    }
_RINvMNtCs8fFY8S8unBo_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsbJTWGl6dkHx_5alloc3vec3VechEECs6iUbv6KjWLj_11cbor_decode:
  179|    232|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    232|        let written = match self.version {
  181|     22|            Version::V0 => self.hash.write(w)?,
  182|    210|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    232|        Ok(written)
  185|    232|    }
_RNvMNtCs8fFY8S8unBo_3cid3cidINtB2_3CidKj40_E3newCs6iUbv6KjWLj_11cbor_decode:
   99|    214|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    214|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    214|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    214|    }
_RNvXs6_NtCs8fFY8S8unBo_3cid3cidINtB5_3CidKj40_EINtNtCskiyb6Qz9mfK_4core7convert7TryFromRShE8try_fromCs6iUbv6KjWLj_11cbor_decode:
  353|    272|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    272|        Self::read_bytes(&mut bytes)
  355|    272|    }
_RNvMNtCs8fFY8S8unBo_3cid3cidINtB2_3CidKj40_E8to_bytesCs6iUbv6KjWLj_11cbor_decode:
  205|    232|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    232|        let mut bytes = Vec::new();
  207|    232|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    232|        debug_assert_eq!(written, bytes.len());
  209|    232|        bytes
  210|    232|    }

_RNvXs4_NtCs8fFY8S8unBo_3cid5errorNtB5_5ErrorINtNtCskiyb6Qz9mfK_4core7convert4FromNtNtNtCsbtymz8dSV8Z_3std2io5error5ErrorE4fromCs6iUbv6KjWLj_11cbor_decode:
   91|      1|    fn from(err: io::Error) -> Self {
   92|      1|        Self::Io(err)
   93|      1|    }
_RNvXs_NtCs8fFY8S8unBo_3cid5errorNtB4_5ErrorNtNtCskiyb6Qz9mfK_4core3fmt7Display3fmt:
   41|     35|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   42|       |        use self::Error::*;
   43|     35|        let error = match self {
   44|      0|            UnknownCodec => "Unknown codec",
   45|      0|            InputTooShort => "Input too short",
   46|     16|            ParsingError => "Failed to parse multihash",
   47|      4|            InvalidCidVersion => "Unrecognized CID version",
   48|      0|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   49|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   50|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   51|      3|            VarIntDecodeError => "Failed to decode unsigned varint format",
   52|     11|            Io(err) => return write!(f, "{}", err),
   53|      1|            InvalidExplicitCidV0 => "CIDv0 cannot be specified in CIDv1 format",
   54|       |        };
   55|       |
   56|     24|        f.write_str(error)
   57|     35|    }
_RNvXs1_NtCs8fFY8S8unBo_3cid5errorNtB5_5ErrorINtNtCskiyb6Qz9mfK_4core7convert4FromNtNtCs1XPUkcJzatL_9multihash5error5ErrorE4from:
   68|     16|    fn from(_: multihash::Error) -> Error {
   69|     16|        Error::ParsingError
   70|     16|    }
_RNvXs3_NtCs8fFY8S8unBo_3cid5errorNtB5_5ErrorINtNtCskiyb6Qz9mfK_4core7convert4FromNtNtCsj7Om4Xk8cLR_15unsigned_varint2io9ReadErrorE4from:
   81|     13|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   82|     13|        use unsigned_varint::io::ReadError::*;
   83|     13|        match err {
   84|     10|            Io(err) => Self::Io(err),
   85|      3|            _ => Self::VarIntDecodeError,
   86|       |        }
   87|     13|    }

_RINvXNvXs0_NtCs8fFY8S8unBo_3cid5serdeINtNtBb_3cid3CidKpENtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   97|    280|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    280|            where
   99|    280|                D: de::Deserializer<'de>,
  100|    280|            {
  101|    280|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    280|            }
_RINvXs0_NtCs8fFY8S8unBo_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   79|    295|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    295|    where
   81|    295|        D: de::Deserializer<'de>,
   82|    295|    {
   83|    295|        /// Main visitor to deserialize a CID.
   84|    295|        ///
   85|    295|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    295|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    295|        /// to bytes.
   88|    295|        struct MainEntryVisitor<const SIZE: usize>;
   89|    295|
   90|    295|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    295|            type Value = CidGeneric<SIZE>;
   92|    295|
   93|    295|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    295|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    295|            }
   96|    295|
   97|    295|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    295|            where
   99|    295|                D: de::Deserializer<'de>,
  100|    295|            {
  101|    295|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    295|            }
  103|    295|        }
  104|    295|
  105|    295|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    295|    }
_RINvXs_NtCs8fFY8S8unBo_3cid5serdeNtB5_17BytesToCidVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor11visit_bytesINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
   48|    272|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    272|    where
   50|    272|        E: de::Error,
   51|    272|    {
   52|    272|        CidGeneric::<SIZE>::try_from(value)
   53|    272|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    272|    }
_RINvXNtCs8fFY8S8unBo_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   29|    232|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    232|    where
   31|    232|        S: ser::Serializer,
   32|    232|    {
   33|    232|        let value = ByteBuf::from(self.to_bytes());
   34|    232|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    232|    }
_RNCINvXs_NtCs8fFY8S8unBo_3cid5serdeNtB7_17BytesToCidVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor11visit_bytesINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEE0Cs6iUbv6KjWLj_11cbor_decode:
   53|     35|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))

_RNvXs_NtCs8fFY8S8unBo_3cid7versionNtB4_7VersionINtNtCskiyb6Qz9mfK_4core7convert7TryFromyE8try_fromCs6iUbv6KjWLj_11cbor_decode:
   34|    235|    fn try_from(raw: u64) -> Result<Self> {
   35|    235|        match raw {
   36|      1|            0 => Ok(Self::V0),
   37|    230|            1 => Ok(Self::V1),
   38|      4|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    235|    }
_RNvXs0_NtCs8fFY8S8unBo_3cid7versionyINtNtCskiyb6Qz9mfK_4core7convert4FromNtB5_7VersionE4fromCs6iUbv6KjWLj_11cbor_decode:
   44|    210|    fn from(ver: Version) -> u64 {
   45|    210|        match ver {
   46|      0|            Version::V0 => 0,
   47|    210|            Version::V1 => 1,
   48|       |        }
   49|    210|    }

_RNvNvCs6iUbv6KjWLj_11cbor_decode1__19___libfuzzer_sys_run:
  241|    551|            fn __libfuzzer_sys_run($bytes: &[u8]) {
  242|    116|                $body
  243|    551|            }
rust_fuzzer_test_input:
  209|    551|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  210|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  211|       |                // formatting of the input to that file. This is only intended for
  212|       |                // `cargo fuzz`'s use!
  213|       |
  214|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  215|    551|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  216|       |                    use std::io::Write;
  217|      0|                    let mut file = std::fs::File::create(path)
  218|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  219|      0|                    writeln!(&mut file, "{:?}", bytes)
  220|      0|                        .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  221|      0|                    return 0;
  222|    551|                }
  223|    551|
  224|    551|                __libfuzzer_sys_run(bytes);
  225|    551|                0
  226|    551|            }
LLVMFuzzerTestOneInput:
   58|    551|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    551|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    551|    });
   63|    551|
   64|    551|    match test_input {
   65|    551|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    551|}
_RNCNvCsiMb3OhXOi17_13libfuzzer_sys15test_input_wrap0B3_:
   59|    551|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    551|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    551|        rust_fuzzer_test_input(data_slice)
   62|    551|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs1_NtCs1XPUkcJzatL_9multihash5errorNtB5_5ErrorINtNtCskiyb6Qz9mfK_4core7convert4FromNtNtCsj7Om4Xk8cLR_15unsigned_varint2io9ReadErrorE4fromCs6iUbv6KjWLj_11cbor_decode:
   44|      8|    fn from(err: ReadError) -> Self {
   45|      8|        match err {
   46|      3|            ReadError::Io(err) => Self::Io(err),
   47|      5|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|      8|    }
_RNvXs0_NtCs1XPUkcJzatL_9multihash5errorNtB5_5ErrorINtNtCskiyb6Qz9mfK_4core7convert4FromNtNtNtCsbtymz8dSV8Z_3std2io5error5ErrorE4fromCs6iUbv6KjWLj_11cbor_decode:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }

_RNvMs_NtCs1XPUkcJzatL_9multihash9multihashINtB4_9MultihashKj40_E4wrapCs6iUbv6KjWLj_11cbor_decode:
  101|     23|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     23|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     23|        }
  105|     23|        let size = input_digest.len();
  106|     23|        let mut digest = [0; S];
  107|     23|        let mut i = 0;
  108|    759|        while i < size {
  109|    736|            digest[i] = input_digest[i];
  110|    736|            i += 1;
  111|    736|        }
  112|     23|        Ok(Self {
  113|     23|            code,
  114|     23|            size: size as u8,
  115|     23|            digest,
  116|     23|        })
  117|     23|    }
_RINvMs_NtCs1XPUkcJzatL_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsbJTWGl6dkHx_5alloc3vec3VechEECs6iUbv6KjWLj_11cbor_decode:
  163|    210|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    210|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    210|    }
_RNvMs_NtCs1XPUkcJzatL_9multihash9multihashINtB4_9MultihashKj40_E6digestCs6iUbv6KjWLj_11cbor_decode:
  130|    232|    pub fn digest(&self) -> &[u8] {
  131|    232|        &self.digest[..self.size as usize]
  132|    232|    }
_RINvNtCs1XPUkcJzatL_9multihash9multihash15write_multihashQINtNtCsbJTWGl6dkHx_5alloc3vec3VechEECs6iUbv6KjWLj_11cbor_decode:
  310|     22|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     22|where
  312|     22|    W: io::Write,
  313|     22|{
  314|     22|    let mut code_buf = varint_encode::u64_buffer();
  315|     22|    let code = varint_encode::u64(code, &mut code_buf);
  316|     22|
  317|     22|    let mut size_buf = varint_encode::u8_buffer();
  318|     22|    let size = varint_encode::u8(size, &mut size_buf);
  319|     22|
  320|     22|    let written = code.len() + size.len() + digest.len();
  321|     22|
  322|     22|    w.write_all(code)?;
  323|     22|    w.write_all(size)?;
  324|     22|    w.write_all(digest)?;
  325|       |
  326|     22|    Ok(written)
  327|     22|}
_RINvMs_NtCs1XPUkcJzatL_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsbJTWGl6dkHx_5alloc3vec3VechEECs6iUbv6KjWLj_11cbor_decode:
  163|     22|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     22|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     22|    }
_RINvNtCs1XPUkcJzatL_9multihash9multihash15write_multihashQQINtNtCsbJTWGl6dkHx_5alloc3vec3VechEECs6iUbv6KjWLj_11cbor_decode:
  310|    210|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    210|where
  312|    210|    W: io::Write,
  313|    210|{
  314|    210|    let mut code_buf = varint_encode::u64_buffer();
  315|    210|    let code = varint_encode::u64(code, &mut code_buf);
  316|    210|
  317|    210|    let mut size_buf = varint_encode::u8_buffer();
  318|    210|    let size = varint_encode::u8(size, &mut size_buf);
  319|    210|
  320|    210|    let written = code.len() + size.len() + digest.len();
  321|    210|
  322|    210|    w.write_all(code)?;
  323|    210|    w.write_all(size)?;
  324|    210|    w.write_all(digest)?;
  325|       |
  326|    210|    Ok(written)
  327|    210|}
_RINvNtCs1XPUkcJzatL_9multihash9multihash14read_multihashQRShKj40_ECs6iUbv6KjWLj_11cbor_decode:
  335|    230|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    230|where
  337|    230|    R: io::Read,
  338|    230|{
  339|    230|    let code = read_u64(&mut r)?;
  340|    228|    let size = read_u64(&mut r)?;
  341|       |
  342|    222|    if size > S as u64 || size > u8::MAX as u64 {
  343|      7|        return Err(Error::InvalidSize(size));
  344|    215|    }
  345|    215|
  346|    215|    let mut digest = [0; S];
  347|    215|    r.read_exact(&mut digest[..size as usize])?;
  348|    214|    Ok((code, size as u8, digest))
  349|    230|}
_RINvMs_NtCs1XPUkcJzatL_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECs6iUbv6KjWLj_11cbor_decode:
  135|    230|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    230|    where
  137|    230|        Self: Sized,
  138|    230|    {
  139|    230|        let (code, size, digest) = read_multihash(r)?;
  140|    214|        Ok(Self { code, size, digest })
  141|    230|    }
_RNvMs_NtCs1XPUkcJzatL_9multihash9multihashINtB4_9MultihashKj40_E4codeCs6iUbv6KjWLj_11cbor_decode:
  120|    255|    pub const fn code(&self) -> u64 {
  121|    255|        self.code
  122|    255|    }
_RNvMs_NtCs1XPUkcJzatL_9multihash9multihashINtB4_9MultihashKj40_E4sizeCs6iUbv6KjWLj_11cbor_decode:
  125|    255|    pub const fn size(&self) -> u8 {
  126|    255|        self.size
  127|    255|    }

_RNvYNtNtNtCscb7jhypFJyL_10fvm_shared7address8protocol8ProtocolNtNtCsjmKjBQg3mw2_10num_traits4cast13FromPrimitive7from_u8B8_:
  448|  2.25k|    fn from_u8(n: u8) -> Option<Self> {
  449|  2.25k|        FromPrimitive::from_u64(From::from(n))
  450|  2.25k|    }

_RNvMs2_NtCsew1LUT3qeEx_9once_cell3impINtB5_8OnceCellNtNtCsbJTWGl6dkHx_5alloc6string6StringE14is_initializedCs6iUbv6KjWLj_11cbor_decode:
   49|    551|    pub(crate) fn is_initialized(&self) -> bool {
   50|    551|        // An `Acquire` load is enough because that makes all the initialization
   51|    551|        // operations visible to us, and, this being a fast path, weaker
   52|    551|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    551|        // `SeqCst` operations on the slow path.
   54|    551|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    551|    }

_RNvMs4_NtCsew1LUT3qeEx_9once_cell4syncINtB5_8OnceCellNtNtCsbJTWGl6dkHx_5alloc6string6StringE3getCs6iUbv6KjWLj_11cbor_decode:
  965|    551|        pub fn get(&self) -> Option<&T> {
  966|    551|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    551|                None
  971|       |            }
  972|    551|        }

_RNvXs5_Csd78cBGRc2m6_10scopeguardINtB5_10ScopeGuardQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCskiyb6Qz9mfK_4core3ops4drop4Drop4dropCs6iUbv6KjWLj_11cbor_decode:
  470|  1.15k|    fn drop(&mut self) {
  471|  1.15k|        // This is OK because the fields are `ManuallyDrop`s
  472|  1.15k|        // which will not be dropped by the compiler.
  473|  1.15k|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|  1.15k|        if S::should_run() {
  475|  1.15k|            dropfn(value);
  476|  1.15k|        }
  477|  1.15k|    }
_RNvXs4_Csd78cBGRc2m6_10scopeguardINtB5_10ScopeGuardQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCskiyb6Qz9mfK_4core3ops5deref8DerefMut9deref_mutCs6iUbv6KjWLj_11cbor_decode:
  460|  1.15k|    fn deref_mut(&mut self) -> &mut T {
  461|  1.15k|        &mut *self.value
  462|  1.15k|    }
_RNvXCsd78cBGRc2m6_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|  1.15k|    fn should_run() -> bool {
  232|  1.15k|        true
  233|  1.15k|    }
_RINvCsd78cBGRc2m6_10scopeguard5guardQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEFBy_EuECs6iUbv6KjWLj_11cbor_decode:
  375|  1.15k|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|  1.15k|where
  377|  1.15k|    F: FnOnce(T),
  378|  1.15k|{
  379|  1.15k|    ScopeGuard::with_strategy(v, dropfn)
  380|  1.15k|}
_RNvMs1_Csd78cBGRc2m6_10scopeguardINtB5_10ScopeGuardQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCs6iUbv6KjWLj_11cbor_decode:
  326|  1.15k|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|  1.15k|        ScopeGuard {
  328|  1.15k|            value: ManuallyDrop::new(v),
  329|  1.15k|            dropfn: ManuallyDrop::new(dropfn),
  330|  1.15k|            strategy: PhantomData,
  331|  1.15k|        }
  332|  1.15k|    }

_RINvXNvXsh_NtNtCsezOp8ZBXjtd_5serde2de5implsINtNtCsbJTWGl6dkHx_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCscb7jhypFJyL_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
 1049|    465|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1050|    465|            where
 1051|    465|                A: SeqAccess<'de>,
 1052|    465|            {
 1053|    465|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1054|    465|                let mut values = Vec::<T>::with_capacity(capacity);
 1055|       |
 1056|  2.20k|                while let Some(value) = tri!(seq.next_element()) {
 1057|  1.73k|                    values.push(value);
 1058|  1.73k|                }
 1059|       |
 1060|    371|                Ok(values)
 1061|    465|            }
_RINvXNvXsX_NtNtCsezOp8ZBXjtd_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
  136|    522|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  137|    522|        where
  138|    522|            E: Error,
  139|    522|        {
  140|    522|            Ok(v)
  141|    522|        }
_RINvXsX_NtNtCsezOp8ZBXjtd_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  111|    538|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  112|    538|            where
  113|    538|                D: Deserializer<'de>,
  114|    538|            {
  115|    538|                struct PrimitiveVisitor;
  116|    538|
  117|    538|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  118|    538|                    type Value = $primitive;
  119|    538|
  120|    538|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  121|    538|                        formatter.write_str(stringify!($primitive))
  122|    538|                    }
  123|    538|
  124|    538|                    $($($method!($val : $visit);)*)*
  125|    538|                }
  126|    538|
  127|    538|                deserializer.$deserialize(PrimitiveVisitor)
  128|    538|            }
_RINvXsh_NtNtCsezOp8ZBXjtd_5serde2de5implsINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
 1031|    489|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1032|    489|    where
 1033|    489|        D: Deserializer<'de>,
 1034|    489|    {
 1035|    489|        struct VecVisitor<T> {
 1036|    489|            marker: PhantomData<T>,
 1037|    489|        }
 1038|    489|
 1039|    489|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1040|    489|        where
 1041|    489|            T: Deserialize<'de>,
 1042|    489|        {
 1043|    489|            type Value = Vec<T>;
 1044|    489|
 1045|    489|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1046|    489|                formatter.write_str("a sequence")
 1047|    489|            }
 1048|    489|
 1049|    489|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1050|    489|            where
 1051|    489|                A: SeqAccess<'de>,
 1052|    489|            {
 1053|    489|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1054|    489|                let mut values = Vec::<T>::with_capacity(capacity);
 1055|    489|
 1056|    489|                while let Some(value) = tri!(seq.next_element()) {
 1057|    489|                    values.push(value);
 1058|    489|                }
 1059|    489|
 1060|    489|                Ok(values)
 1061|    489|            }
 1062|    489|        }
 1063|    489|
 1064|    489|        let visitor = VecVisitor {
 1065|    489|            marker: PhantomData,
 1066|    489|        };
 1067|    489|        deserializer.deserialize_seq(visitor)
 1068|    489|    }

_RINvYNtNtCs8fFY8S8unBo_3cid5serde17BytesToCidVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor14visit_byte_bufINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
 1586|      8|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1587|      8|    where
 1588|      8|        E: Error,
 1589|      8|    {
 1590|      8|        self.visit_bytes(&v)
 1591|      8|    }
_RINvYINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess12next_elementINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEECs6iUbv6KjWLj_11cbor_decode:
 1722|    489|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    489|    where
 1724|    489|        T: Deserialize<'de>,
 1725|    489|    {
 1726|    489|        self.next_element_seed(PhantomData)
 1727|    489|    }
_RINvXs3_NtCsezOp8ZBXjtd_5serde2deINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  790|    653|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    653|    where
  792|    653|        D: Deserializer<'de>,
  793|    653|    {
  794|    653|        T::deserialize(deserializer)
  795|    653|    }
_RINvXs3_NtCsezOp8ZBXjtd_5serde2deINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  790|    489|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    489|    where
  792|    489|        D: Deserializer<'de>,
  793|    489|    {
  794|    489|        T::deserialize(deserializer)
  795|    489|    }
_RINvYINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess12next_elementNtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldECs6iUbv6KjWLj_11cbor_decode:
 1722|    371|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    371|    where
 1724|    371|        T: Deserialize<'de>,
 1725|    371|    {
 1726|    371|        self.next_element_seed(PhantomData)
 1727|    371|    }
_RINvYNtNvXs_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor20visit_borrowed_bytesINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
 1562|    821|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    821|    where
 1564|    821|        E: Error,
 1565|    821|    {
 1566|    821|        self.visit_bytes(v)
 1567|    821|    }
_RINvYINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess12next_elementNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECs6iUbv6KjWLj_11cbor_decode:
 1722|    315|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    315|    where
 1724|    315|        T: Deserialize<'de>,
 1725|    315|    {
 1726|    315|        self.next_element_seed(PhantomData)
 1727|    315|    }
_RINvYINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess12next_elementyECs6iUbv6KjWLj_11cbor_decode:
 1722|    538|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    538|    where
 1724|    538|        T: Deserialize<'de>,
 1725|    538|    {
 1726|    538|        self.next_element_seed(PhantomData)
 1727|    538|    }
_RINvXs3_NtCsezOp8ZBXjtd_5serde2deINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtNtCscb7jhypFJyL_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  790|  2.35k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  2.35k|    where
  792|  2.35k|        D: Deserializer<'de>,
  793|  2.35k|    {
  794|  2.35k|        T::deserialize(deserializer)
  795|  2.35k|    }
_RINvYINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECs6iUbv6KjWLj_11cbor_decode:
 1722|    653|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    653|    where
 1724|    653|        T: Deserialize<'de>,
 1725|    653|    {
 1726|    653|        self.next_element_seed(PhantomData)
 1727|    653|    }
_RINvXs3_NtCsezOp8ZBXjtd_5serde2deINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  790|    315|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    315|    where
  792|    315|        D: Deserializer<'de>,
  793|    315|    {
  794|    315|        T::deserialize(deserializer)
  795|    315|    }
_RINvYNtNtCs8fFY8S8unBo_3cid5serde17BytesToCidVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor20visit_borrowed_bytesINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
 1562|    264|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    264|    where
 1564|    264|        E: Error,
 1565|    264|    {
 1566|    264|        self.visit_bytes(v)
 1567|    264|    }
_RINvXs3_NtCsezOp8ZBXjtd_5serde2deINtNtCskiyb6Qz9mfK_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  790|    538|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    538|    where
  792|    538|        D: Deserializer<'de>,
  793|    538|    {
  794|    538|        T::deserialize(deserializer)
  795|    538|    }
_RINvXs3_NtCsezOp8ZBXjtd_5serde2deINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  790|    371|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    371|    where
  792|    371|        D: Deserializer<'de>,
  793|    371|    {
  794|    371|        T::deserialize(deserializer)
  795|    371|    }
_RINvYINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess12next_elementINtNtCs8fFY8S8unBo_3cid3cid3CidKj40_EECs6iUbv6KjWLj_11cbor_decode:
 1722|    295|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    295|    where
 1724|    295|        T: Deserialize<'de>,
 1725|    295|    {
 1726|    295|        self.next_element_seed(PhantomData)
 1727|    295|    }
_RINvYINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess12next_elementNtNtCscb7jhypFJyL_10fvm_shared7address7AddressECs6iUbv6KjWLj_11cbor_decode:
 1722|  2.72k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  2.72k|    where
 1724|  2.72k|        T: Deserialize<'de>,
 1725|  2.72k|    {
 1726|  2.72k|        self.next_element_seed(PhantomData)
 1727|  2.72k|    }
_RINvXs3_NtCsezOp8ZBXjtd_5serde2deINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataINtNtCs8fFY8S8unBo_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  790|    295|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    295|    where
  792|    295|        D: Deserializer<'de>,
  793|    295|    {
  794|    295|        T::deserialize(deserializer)
  795|    295|    }

_RINvNtNtCsezOp8ZBXjtd_5serde2de9size_hint8cautiousNtNtCscb7jhypFJyL_10fvm_shared7address7AddressECs6iUbv6KjWLj_11cbor_decode:
   11|    465|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|    465|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|    465|
   14|    465|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|    465|        cmp::min(
   18|    465|            hint.unwrap_or(0),
   19|    465|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|    465|        )
   21|       |    }
   22|    465|}

_RINvXs1m_NtNtCsezOp8ZBXjtd_5serde3ser5implsINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  190|    232|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|    232|            where
  192|    232|                S: Serializer,
  193|    232|            {
  194|    232|                serializer.collect_seq(self)
  195|    232|            }
_RINvXs1G_NtNtCsezOp8ZBXjtd_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  452|    232|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    232|            where
  454|    232|                S: Serializer,
  455|    232|            {
  456|    232|                (**self).serialize(serializer)
  457|    232|            }
_RINvXs1G_NtNtCsezOp8ZBXjtd_5serde3ser5implsRINtNtCs8fFY8S8unBo_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  452|    232|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    232|            where
  454|    232|                S: Serializer,
  455|    232|            {
  456|    232|                (**self).serialize(serializer)
  457|    232|            }
_RINvXsH_NtNtCsezOp8ZBXjtd_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   11|    232|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    232|            where
   13|    232|                S: Serializer,
   14|    232|            {
   15|    232|                serializer.$method(*self $($cast)*)
   16|    232|            }
_RINvXs1G_NtNtCsezOp8ZBXjtd_5serde3ser5implsRNtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  452|    232|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    232|            where
  454|    232|                S: Serializer,
  455|    232|            {
  456|    232|                (**self).serialize(serializer)
  457|    232|            }
_RINvXs1G_NtNtCsezOp8ZBXjtd_5serde3ser5implsRINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  452|    232|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    232|            where
  454|    232|                S: Serializer,
  455|    232|            {
  456|    232|                (**self).serialize(serializer)
  457|    232|            }
_RINvXs1G_NtNtCsezOp8ZBXjtd_5serde3ser5implsRNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  452|    232|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    232|            where
  454|    232|                S: Serializer,
  455|    232|            {
  456|    232|                (**self).serialize(serializer)
  457|    232|            }
_RINvXs1G_NtNtCsezOp8ZBXjtd_5serde3ser5implsRNtNtCscb7jhypFJyL_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  452|    662|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    662|            where
  454|    662|                S: Serializer,
  455|    662|            {
  456|    662|                (**self).serialize(serializer)
  457|    662|            }

_RNCINvYQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer11collect_seqRINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEE0Cs6iUbv6KjWLj_11cbor_decode:
 1278|    430|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCsezOp8ZBXjtd_5serde3ser17iterator_len_hintINtNtNtCskiyb6Qz9mfK_4core5slice4iter4IterNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEECs6iUbv6KjWLj_11cbor_decode:
 1944|    232|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|    232|where
 1946|    232|    I: Iterator,
 1947|    232|{
 1948|    232|    match iter.size_hint() {
 1949|    232|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|    232|}
_RINvYQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer11collect_seqRINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEECs6iUbv6KjWLj_11cbor_decode:
 1271|    232|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|    232|    where
 1273|    232|        I: IntoIterator,
 1274|    232|        <I as IntoIterator>::Item: Serialize,
 1275|    232|    {
 1276|    232|        let mut iter = iter.into_iter();
 1277|    232|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|    232|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|    232|        serializer.end()
 1280|    232|    }

_RINvXsc_NtCshDWjTnPaj3B_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  186|    232|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    232|    where
  188|    232|        S: Serializer,
  189|    232|    {
  190|    232|        serializer.serialize_bytes(&self.bytes)
  191|    232|    }
_RINvMNtCshDWjTnPaj3B_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsbJTWGl6dkHx_5alloc3vec3VechEECs6iUbv6KjWLj_11cbor_decode:
   60|    232|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    232|        ByteBuf {
   62|    232|            bytes: bytes.into(),
   63|    232|        }
   64|    232|    }

_RINvNtCsglxO6ZjC3K9_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderECs6iUbv6KjWLj_11cbor_decode:
   26|    517|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    517|    let buf = match reader.fill(1)? {
   28|    517|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    517|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|    284|    Ok(byte)
   33|    517|}

_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECs6iUbv6KjWLj_11cbor_decode:
  239|    968|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    968|    where
  241|    968|        V: Visitor<'de>,
  242|    968|    {
  243|    968|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|    821|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|     12|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|    968|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess17next_element_seedINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldEECs6iUbv6KjWLj_11cbor_decode:
  476|    371|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    371|    where
  478|    371|        T: de::DeserializeSeed<'de>,
  479|    371|    {
  480|    371|        if self.len > 0 {
  481|    371|            self.len -= 1;
  482|    371|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    371|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess17next_element_seedINtNtCskiyb6Qz9mfK_4core6marker11PhantomDatayEECs6iUbv6KjWLj_11cbor_decode:
  476|    538|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    538|    where
  478|    538|        T: de::DeserializeSeed<'de>,
  479|    538|    {
  480|    538|        if self.len > 0 {
  481|    538|            self.len -= 1;
  482|    538|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    538|    }
_RNCNvMs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE8try_step0Cs6iUbv6KjWLj_11cbor_decode:
  106|  1.15k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RNCNvMs1_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE5array0Cs6iUbv6KjWLj_11cbor_decode:
  436|      1|            || Err(DecodeError::IndefiniteSize),
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess17next_element_seedINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECs6iUbv6KjWLj_11cbor_decode:
  476|    653|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    653|    where
  478|    653|        T: de::DeserializeSeed<'de>,
  479|    653|    {
  480|    653|        if self.len > 0 {
  481|    653|            self.len -= 1;
  482|    653|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    653|    }
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECs6iUbv6KjWLj_11cbor_decode:
  239|  2.72k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  2.72k|    where
  241|  2.72k|        V: Visitor<'de>,
  242|  2.72k|    {
  243|  2.72k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|  2.46k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|    167|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  2.72k|    }
_RNvMs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE3endCs6iUbv6KjWLj_11cbor_decode:
  130|    237|    pub fn end(&mut self) -> Result<(), DecodeError<R::Error>> {
  131|    237|        match peek_one(&mut self.reader) {
  132|      5|            Ok(_) => Err(DecodeError::TrailingData),
  133|    232|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    237|    }
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECs6iUbv6KjWLj_11cbor_decode:
  353|    667|    fn deserialize_tuple_struct<V>(
  354|    667|        self,
  355|    667|        _name: &'static str,
  356|    667|        len: usize,
  357|    667|        visitor: V,
  358|    667|    ) -> Result<V::Value, Self::Error>
  359|    667|    where
  360|    667|        V: Visitor<'de>,
  361|    667|    {
  362|    667|        self.deserialize_tuple(len, visitor)
  363|    667|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess17next_element_seedINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEECs6iUbv6KjWLj_11cbor_decode:
  476|  2.72k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  2.72k|    where
  478|  2.72k|        T: de::DeserializeSeed<'de>,
  479|  2.72k|    {
  480|  2.72k|        if self.len > 0 {
  481|  2.35k|            self.len -= 1;
  482|  2.35k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|    371|            Ok(None)
  485|       |        }
  486|  2.72k|    }
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECs6iUbv6KjWLj_11cbor_decode:
  142|    538|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    538|        where V: Visitor<'de>
  144|    538|        {
  145|    538|            let value = <$t>::decode(&mut self.reader)?;
  146|    522|            visitor.$visit(value)
  147|    538|        }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess17next_element_seedINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataINtNtCs8fFY8S8unBo_3cid3cid3CidKj40_EEECs6iUbv6KjWLj_11cbor_decode:
  476|    295|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    295|    where
  478|    295|        T: de::DeserializeSeed<'de>,
  479|    295|    {
  480|    295|        if self.len > 0 {
  481|    295|            self.len -= 1;
  482|    295|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    295|    }
_RNvMs1_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE5tupleCs6iUbv6KjWLj_11cbor_decode:
  442|    667|    pub fn tuple(
  443|    667|        de: &'a mut Deserializer<R>,
  444|    667|        len: usize,
  445|    667|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  446|    667|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  447|       |
  448|    660|        if array_start.0 == Some(len) {
  449|    653|            Ok(Accessor { de, len })
  450|       |        } else {
  451|      7|            Err(DecodeError::RequireLength {
  452|      7|                name: "tuple",
  453|      7|                expect: len,
  454|      7|                value: array_start.0.unwrap_or(0),
  455|      7|            })
  456|       |        }
  457|    667|    }
_RINvNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de10from_sliceNtNtCsbhjcNy0iRWY_11common_fuzz4cbor7PayloadECs6iUbv6KjWLj_11cbor_decode:
   40|    667|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    667|where
   42|    667|    T: de::Deserialize<'a>,
   43|    667|{
   44|    667|    let reader = SliceReader::new(buf);
   45|    667|    let mut deserializer = Deserializer::from_reader(reader);
   46|    667|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    237|    deserializer.end()?;
   48|    232|    Ok(value)
   49|    667|}
_RINvXs7_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer17deserialize_bytesNtNtCs8fFY8S8unBo_3cid5serde17BytesToCidVisitorECs6iUbv6KjWLj_11cbor_decode:
  628|    280|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  629|    280|        let byte = peek_one(&mut self.0.reader)?;
  630|    279|        match dec::if_major(byte) {
  631|       |            major::BYTES => {
  632|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  633|    278|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  634|    266|                    Cow::Borrowed(buf) => {
  635|    266|                        if buf.len() <= 1 || buf[0] != 0 {
  636|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  637|       |                        } else {
  638|    264|                            visitor.visit_borrowed_bytes(&buf[1..])
  639|       |                        }
  640|       |                    }
  641|     10|                    Cow::Owned(mut buf) => {
  642|     10|                        if buf.len() <= 1 || buf[0] != 0 {
  643|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  644|       |                        } else {
  645|      8|                            buf.remove(0);
  646|      8|                            visitor.visit_byte_buf(buf)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |            }
  651|      1|            _ => Err(DecodeError::Unsupported { byte }),
  652|       |        }
  653|    280|    }
_RNCNvMs1_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE5arrays_0Cs6iUbv6KjWLj_11cbor_decode:
  437|    465|            move |len| Ok(Accessor { de, len }),
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsbJTWGl6dkHx_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEECs6iUbv6KjWLj_11cbor_decode:
  333|    489|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|    489|    where
  335|    489|        V: Visitor<'de>,
  336|    489|    {
  337|    489|        let mut de = self.try_step()?;
  338|    489|        let seq = Accessor::array(&mut de)?;
  339|    465|        visitor.visit_seq(seq)
  340|    489|    }
_RNvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess9size_hintCs6iUbv6KjWLj_11cbor_decode:
  489|    465|    fn size_hint(&self) -> Option<usize> {
  490|    465|        Some(self.len)
  491|    465|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess17next_element_seedINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECs6iUbv6KjWLj_11cbor_decode:
  476|    315|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    315|    where
  478|    315|        T: de::DeserializeSeed<'de>,
  479|    315|    {
  480|    315|        if self.len > 0 {
  481|    315|            self.len -= 1;
  482|    315|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    315|    }
_RNvMs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE8try_stepCs6iUbv6KjWLj_11cbor_decode:
  101|  1.15k|    fn try_step<'a>(
  102|  1.15k|        &'a mut self,
  103|  1.15k|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|  1.15k|    {
  105|  1.15k|        if self.reader.step_in() {
  106|  1.15k|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|  1.15k|    }
_RNvMs1_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE5arrayCs6iUbv6KjWLj_11cbor_decode:
  433|    489|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  434|    489|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  435|    466|        array_start.0.map_or_else(
  436|    466|            || Err(DecodeError::IndefiniteSize),
  437|    466|            move |len| Ok(Accessor { de, len }),
  438|    466|        )
  439|    489|    }
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECs6iUbv6KjWLj_11cbor_decode:
  250|    968|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  251|    968|    where
  252|    968|        V: Visitor<'de>,
  253|    968|    {
  254|    968|        self.deserialize_bytes(visitor)
  255|    968|    }
_RNvMNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE11from_readerCs6iUbv6KjWLj_11cbor_decode:
   93|    667|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    667|        Deserializer { reader }
   95|    667|    }
_RINvMs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs8fFY8S8unBo_3cid5serdeINtNtB2l_3cid3CidKpENtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECs6iUbv6KjWLj_11cbor_decode:
  113|    295|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    295|    where
  115|    295|        V: Visitor<'de>,
  116|    295|    {
  117|    295|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    285|        match tag.0 {
  120|    280|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      5|            _ => Err(DecodeError::TypeMismatch {
  122|      5|                name: "CBOR tag",
  123|      5|                byte: tag.0 as u8,
  124|      5|            }),
  125|       |        }
  126|    295|    }
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECs6iUbv6KjWLj_11cbor_decode:
  343|    667|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|    667|    where
  345|    667|        V: Visitor<'de>,
  346|    667|    {
  347|    667|        let mut de = self.try_step()?;
  348|    667|        let seq = Accessor::tuple(&mut de, len)?;
  349|    653|        visitor.visit_seq(seq)
  350|    667|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de9SeqAccess17next_element_seedINtNtCskiyb6Qz9mfK_4core6marker11PhantomDataINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEEECs6iUbv6KjWLj_11cbor_decode:
  476|    489|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    489|    where
  478|    489|        T: de::DeserializeSeed<'de>,
  479|    489|    {
  480|    489|        if self.len > 0 {
  481|    489|            self.len -= 1;
  482|    489|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    489|    }
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderENtNtCsezOp8ZBXjtd_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs8fFY8S8unBo_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECs6iUbv6KjWLj_11cbor_decode:
  317|    295|    fn deserialize_newtype_struct<V>(
  318|    295|        self,
  319|    295|        name: &'static str,
  320|    295|        visitor: V,
  321|    295|    ) -> Result<V::Value, Self::Error>
  322|    295|    where
  323|    295|        V: Visitor<'de>,
  324|    295|    {
  325|    295|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  326|    295|            self.deserialize_cid(visitor)
  327|       |        } else {
  328|      0|            visitor.visit_newtype_struct(self)
  329|       |        }
  330|    295|    }

_RINvXs4_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleENtNtCsezOp8ZBXjtd_5serde2de5Error6customNtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus5error5ErrorECs6iUbv6KjWLj_11cbor_decode:
  136|     49|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     49|        DecodeError::Msg(msg.to_string())
  138|     49|    }
_RINvXs4_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleENtNtCsezOp8ZBXjtd_5serde2de5Error6customNtNtCsbJTWGl6dkHx_5alloc6string6StringECs6iUbv6KjWLj_11cbor_decode:
  136|     35|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     35|        DecodeError::Msg(msg.to_string())
  138|     35|    }
_RNvXs7_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEINtB16_4FromINtNtCsfeWXHkhNspW_7cbor4ii5error11DecodeErrorB14_EE4fromCs6iUbv6KjWLj_11cbor_decode:
  169|    288|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  170|    288|        match err {
  171|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  172|    248|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  173|     39|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  174|     39|                DecodeError::Mismatch { expect_major, byte }
  175|       |            }
  176|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  177|      0|                DecodeError::TypeMismatch { name, byte }
  178|       |            }
  179|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  180|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  181|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  182|       |            cbor4ii::DecodeError::RequireLength {
  183|      0|                name,
  184|      0|                expect,
  185|      0|                value,
  186|      0|            } => DecodeError::RequireLength {
  187|      0|                name,
  188|      0|                expect,
  189|      0|                value,
  190|      0|            },
  191|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  192|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  193|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  194|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  195|      0|            _ => DecodeError::Msg(err.to_string()),
  196|       |        }
  197|    288|    }
_RNvXs9_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCs6iUbv6KjWLj_11cbor_decode:
   70|    435|#[derive(Debug)]
_RNvXs6_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCs6iUbv6KjWLj_11cbor_decode:
  163|    435|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  164|    435|        fmt::Debug::fmt(self, f)
  165|    435|    }
_RINvXs4_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleENtNtCsezOp8ZBXjtd_5serde2de5Error6customNtNtNtCscb7jhypFJyL_10fvm_shared7address6errors5ErrorECs6iUbv6KjWLj_11cbor_decode:
  136|     39|    fn custom<T: fmt::Display>(msg: T) -> Self {
  137|     39|        DecodeError::Msg(msg.to_string())
  138|     39|    }

_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs8fFY8S8unBo_3cid3cid3CidKj40_EECs6iUbv6KjWLj_11cbor_decode:
  414|    232|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    232|        value.serialize(&mut *self.ser)
  416|    232|    }
_RNvXs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer13serialize_u64Cs6iUbv6KjWLj_11cbor_decode:
  122|    232|    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
  123|    232|        v.encode(&mut self.writer)?;
  124|    232|        Ok(())
  125|    232|    }
_RINvNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser6to_vecNtNtCsbhjcNy0iRWY_11common_fuzz4cbor7PayloadECs6iUbv6KjWLj_11cbor_decode:
   23|    232|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    232|where
   25|    232|    T: Serialize + ?Sized,
   26|    232|{
   27|    232|    let writer = BufWriter::new(Vec::new());
   28|    232|    let mut serializer = Serializer::new(writer);
   29|    232|    value.serialize(&mut serializer)?;
   30|    232|    Ok(serializer.into_inner().into_inner())
   31|    232|}
_RNvXs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer15serialize_tupleCs6iUbv6KjWLj_11cbor_decode:
  238|    232|    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
  239|    232|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    232|        Ok(BoundedCollect { ser: self })
  241|    232|    }
_RNvXs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer13serialize_seqCs6iUbv6KjWLj_11cbor_decode:
  225|    232|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
  226|    232|        if let Some(len) = len {
  227|    232|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    232|        Ok(Collect {
  232|    232|            bounded: len.is_some(),
  233|    232|            ser: self,
  234|    232|        })
  235|    232|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsbhjcNy0iRWY_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECs6iUbv6KjWLj_11cbor_decode:
  414|    232|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    232|        value.serialize(&mut *self.ser)
  416|    232|    }
_RINvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser12SerializeSeq17serialize_elementRNtNtCscb7jhypFJyL_10fvm_shared7address7AddressECs6iUbv6KjWLj_11cbor_decode:
  380|    430|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|    430|        value.serialize(&mut *self.ser)
  382|    430|    }
_RNvXs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer22serialize_tuple_structCs6iUbv6KjWLj_11cbor_decode:
  244|    232|    fn serialize_tuple_struct(
  245|    232|        self,
  246|    232|        _name: &'static str,
  247|    232|        len: usize,
  248|    232|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    232|        self.serialize_tuple(len)
  250|    232|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct15serialize_fieldRyECs6iUbv6KjWLj_11cbor_decode:
  414|    232|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    232|        value.serialize(&mut *self.ser)
  416|    232|    }
_RNvXs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer15serialize_bytesCs6iUbv6KjWLj_11cbor_decode:
  159|  1.35k|    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
  160|  1.35k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  1.35k|        Ok(())
  162|  1.35k|    }
_RNvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct3endCs6iUbv6KjWLj_11cbor_decode:
  419|    232|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|    232|        Ok(())
  421|    232|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCscb7jhypFJyL_10fvm_shared7address7AddressECs6iUbv6KjWLj_11cbor_decode:
  414|    232|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    232|        value.serialize(&mut *self.ser)
  416|    232|    }
_RNvMNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterE3newCs6iUbv6KjWLj_11cbor_decode:
   51|    232|    pub fn new(writer: W) -> Serializer<W> {
   52|    232|        Serializer { writer }
   53|    232|    }
_RINvXs_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer24serialize_newtype_structNtNtCshDWjTnPaj3B_11serde_bytes7bytebuf7ByteBufECs6iUbv6KjWLj_11cbor_decode:
  199|    232|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    232|        self,
  201|    232|        name: &'static str,
  202|    232|        value: &T,
  203|    232|    ) -> Result<Self::Ok, Self::Error> {
  204|    232|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    232|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    232|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsbJTWGl6dkHx_5alloc3vec3VecNtNtCscb7jhypFJyL_10fvm_shared7address7AddressEECs6iUbv6KjWLj_11cbor_decode:
  414|    232|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    232|        value.serialize(&mut *self.ser)
  416|    232|    }
_RNvMNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterE10into_innerCs6iUbv6KjWLj_11cbor_decode:
   56|    232|    pub fn into_inner(self) -> W {
   57|    232|        self.writer
   58|    232|    }
_RNvXs0_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser12SerializeSeq3endCs6iUbv6KjWLj_11cbor_decode:
  385|    232|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|    232|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|    232|        }
  389|       |
  390|    232|        Ok(())
  391|    232|    }
_RNvXs7_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser10Serializer15serialize_bytesCs6iUbv6KjWLj_11cbor_decode:
  561|    232|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|    232|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|    232|        let prefixed = [&[0x00], value].concat();
  564|    232|        // CIDs are serialized with CBOR tag 42.
  565|    232|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|    232|        Ok(())
  567|    232|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldECs6iUbv6KjWLj_11cbor_decode:
  414|    232|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    232|        value.serialize(&mut *self.ser)
  416|    232|    }
_RINvXs2_NtCsglxO6ZjC3K9_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterENtNtCsezOp8ZBXjtd_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECs6iUbv6KjWLj_11cbor_decode:
  414|    232|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    232|        value.serialize(&mut *self.ser)
  416|    232|    }

_RNvXCs89Z2apPvesD_11serde_tupleINtB2_10SerializerQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEENtNtCsezOp8ZBXjtd_5serde3ser10Serializer22serialize_tuple_structCs6iUbv6KjWLj_11cbor_decode:
  158|    232|    fn serialize_tuple_struct(
  159|    232|        self,
  160|    232|        name: &'static str,
  161|    232|        len: usize,
  162|    232|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    232|        self.0.serialize_tuple_struct(name, len)
  164|    232|    }
_RINvXs_Cs89Z2apPvesD_11serde_tupleINtB5_12DeserializerQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEENtNtCsezOp8ZBXjtd_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECs6iUbv6KjWLj_11cbor_decode:
  353|    667|    fn deserialize_tuple_struct<V>(
  354|    667|        self,
  355|    667|        name: &'static str,
  356|    667|        len: usize,
  357|    667|        visitor: V,
  358|    667|    ) -> Result<V::Value, Self::Error>
  359|    667|    where
  360|    667|        V: serde::de::Visitor<'de>,
  361|    667|    {
  362|    667|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    667|    }

_RNvXNtCsfgwRvqE183p_9thiserror7displayRjNtB2_9AsDisplay10as_displayCscb7jhypFJyL_10fvm_shared:
   19|      4|    fn as_display(&'a self) -> Self::Target {
   20|      4|        *self
   21|      4|    }

_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6decode7is_lastCs6iUbv6KjWLj_11cbor_decode:
   90|  4.45k|pub fn is_last(b: u8) -> bool {
   91|  4.45k|    b & 0x80 == 0
   92|  4.45k|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6decode3u64Cs6iUbv6KjWLj_11cbor_decode:
  122|    982|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    982|    decode!(buf, 9, u64)
  124|    982|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6decode3u64Cscb7jhypFJyL_10fvm_shared:
  122|  1.61k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.61k|    decode!(buf, 9, u64)
  124|  1.61k|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6decode7is_lastCscb7jhypFJyL_10fvm_shared:
   90|  5.88k|pub fn is_last(b: u8) -> bool {
   91|  5.88k|    b & 0x80 == 0
   92|  5.88k|}

_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode10u64_bufferCs6iUbv6KjWLj_11cbor_decode:
  119|  1.64k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.64k|    [0; U64_LEN]
  121|  1.64k|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode3u64Cs6iUbv6KjWLj_11cbor_decode:
   69|    652|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    652|    encode!(number, buf)
   71|    652|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode9u8_bufferCs6iUbv6KjWLj_11cbor_decode:
  101|    232|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    232|    [0; U8_LEN]
  103|    232|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode2u8Cs6iUbv6KjWLj_11cbor_decode:
   45|    232|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    232|    encode!(number, buf)
   47|    232|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode10u64_bufferCscb7jhypFJyL_10fvm_shared:
  119|    330|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    330|    [0; U64_LEN]
  121|    330|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode3u64Cscb7jhypFJyL_10fvm_shared:
   69|    330|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    330|    encode!(number, buf)
   71|    330|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode3u64CsbsVpavNDNjO_17fvm_ipld_bitfield:
   69|  7.70k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  7.70k|    encode!(number, buf)
   71|  7.70k|}
_RNvNtCsj7Om4Xk8cLR_15unsigned_varint6encode10u64_bufferCsbsVpavNDNjO_17fvm_ipld_bitfield:
  119|  7.70k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  7.70k|    [0; U64_LEN]
  121|  7.70k|}

_RINvNtCsj7Om4Xk8cLR_15unsigned_varint2io8read_u64QQRShECs6iUbv6KjWLj_11cbor_decode:
   31|    996|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    996|                let mut b = encode::$b();
   33|  2.27k|                for i in 0 .. b.len() {
   34|  2.27k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  2.27k|                    if n == 0 {
   36|     13|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  2.25k|                    }
   38|  2.25k|                    if decode::is_last(b[i]) {
   39|    982|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.27k|                    }
   41|       |                }
   42|      1|                Err(decode::Error::Overflow.into())
   43|    996|            }
_RNvXs1_NtCsj7Om4Xk8cLR_15unsigned_varint2ioNtB5_9ReadErrorINtNtCskiyb6Qz9mfK_4core7convert4FromNtNtB7_6decode5ErrorE4fromCs6iUbv6KjWLj_11cbor_decode:
   91|      8|    fn from(e: decode::Error) -> Self {
   92|      8|        ReadError::Decode(e)
   93|      8|    }

_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  8.47k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  8.47k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  8.24k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    232|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  8.24k|        if advance_lhs {
  371|  8.24k|            self.lhs.next();
  372|  8.24k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  8.24k|        range
  377|  8.47k|    }
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    232|    pub fn new(a: A, b: B) -> Self {
  299|    232|        Self(Merge::new(_Combine::new(a, b)))
  300|    232|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    232|    fn new(mut iter: I) -> Self {
  469|    232|        let next = iter.next();
  470|    232|        Self { iter, next }
  471|    232|    }
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    232|    pub fn new(a: A, b: B) -> Self {
  299|    232|        Self(Merge::new(_Combine::new(a, b)))
  300|    232|    }
_RNvXs0_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tailB9_:
  182|  8.24k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  8.24k|        // the difference between a range and an empty range is just that range
  184|  8.24k|        Some(lhs)
  185|  8.24k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  439|  8.47k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  8.24k|        while let Some(next) = self.iter.peek() {
  444|  8.09k|            if next.start > range.end {
  445|  8.09k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  8.24k|        Some(range)
  453|  8.47k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  8.47k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.47k|        self.next.as_mut()
  475|  8.47k|    }
_RNvXNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tailB6_:
  110|  8.24k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  8.24k|        // the union of a range and an empty range is just that range
  112|  8.24k|        Some(lhs)
  113|  8.24k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    232|    fn new(mut iter: I) -> Self {
  469|    232|        let next = iter.next();
  470|    232|        Self { iter, next }
  471|    232|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|    464|    fn new(mut iter: I) -> Self {
  469|    464|        let next = iter.next();
  470|    464|        Self { iter, next }
  471|    464|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  8.47k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.47k|        self.next.as_mut()
  475|  8.47k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.47k|        let next = self.next.take()?;
  484|  8.24k|        self.next = self.iter.next();
  485|  8.24k|        Some(next)
  486|  8.47k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  8.47k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  8.24k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.24k|        let next = self.next.take()?;
  484|  8.24k|        self.next = self.iter.next();
  485|  8.24k|        Some(next)
  486|  8.24k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.47k|        let next = self.next.take()?;
  484|  8.24k|        self.next = self.iter.next();
  485|  8.24k|        Some(next)
  486|  8.47k|    }
_RNvXsh_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB9_:
  152|    232|#[derive(Default)]
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    232|    pub fn new(iter: I) -> Self {
  426|    232|        Self {
  427|    232|            iter: Lookahead::new(iter),
  428|    232|        }
  429|    232|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  8.47k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  8.47k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  8.24k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    232|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  8.24k|        if advance_lhs {
  371|  8.24k|            self.lhs.next();
  372|  8.24k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  8.24k|        range
  377|  8.47k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    232|    fn new(lhs: A, rhs: B) -> Self {
  344|    232|        Self {
  345|    232|            lhs: Lookahead::new(lhs),
  346|    232|            rhs: Lookahead::new(rhs),
  347|    232|            combinator: Default::default(),
  348|    232|        }
  349|    232|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  8.24k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.24k|        self.next.as_mut()
  475|  8.24k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  8.24k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.24k|        let next = self.next.take()?;
  484|  8.24k|        self.next = self.iter.next();
  485|  8.24k|        Some(next)
  486|  8.24k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  312|  8.47k|        self.0.next()
  313|  8.47k|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  389|  8.47k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  8.47k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  8.47k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  8.47k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  312|  8.47k|        self.0.next()
  313|  8.47k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    232|    fn new(mut iter: I) -> Self {
  469|    232|        let next = iter.next();
  470|    232|        Self { iter, next }
  471|    232|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    232|    fn new(lhs: A, rhs: B) -> Self {
  344|    232|        Self {
  345|    232|            lhs: Lookahead::new(lhs),
  346|    232|            rhs: Lookahead::new(rhs),
  347|    232|            combinator: Default::default(),
  348|    232|        }
  349|    232|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  8.24k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  389|  8.47k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  8.47k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  8.47k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  439|  8.47k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  8.24k|        while let Some(next) = self.iter.peek() {
  444|  8.09k|            if next.start > range.end {
  445|  8.09k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  8.24k|        Some(range)
  453|  8.47k|    }
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    232|    pub fn new(iter: I) -> Self {
  426|    232|        Self {
  427|    232|            iter: Lookahead::new(iter),
  428|    232|        }
  429|    232|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  8.24k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    232|    fn new(mut iter: I) -> Self {
  469|    232|        let next = iter.next();
  470|    232|        Self { iter, next }
  471|    232|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  16.9k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  16.9k|        self.next.as_mut()
  475|  16.9k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  8.24k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  8.24k|        self.next.as_mut()
  475|  8.24k|    }
_RNvXsf_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB9_:
   87|    232|#[derive(Default)]

_RINvYINtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    232|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    232|        Combine::new(self, other)
   34|    232|    }
_RINvMs2_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    232|    pub fn new<II>(iter: II) -> Self
  141|    232|    where
  142|    232|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    232|    {
  144|    232|        Self(iter.into_iter())
  145|    232|    }
_RNCINvNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0B6_:
  167|    464|    Ranges::new(iter::from_fn(move || {
  168|    464|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|    464|    }))
_RINvNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEEB4_:
  164|    464|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|    464|    let mut iter = bits.into_iter().peekable();
  166|    464|
  167|    464|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|    464|    }))
  181|    464|}
_RNvXs3_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|    464|    fn next(&mut self) -> Option<Self::Item> {
  155|    464|        self.0.next()
  156|    464|    }
_RINvMs2_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|    464|    pub fn new<II>(iter: II) -> Self
  141|    464|    where
  142|    464|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    464|    {
  144|    464|        Self(iter.into_iter())
  145|    464|    }
_RINvYINtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    232|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    232|        Combine::new(self, other)
   24|    232|    }
_RNvXs3_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  8.47k|    fn next(&mut self) -> Option<Self::Item> {
  155|  8.47k|        self.0.next()
  156|  8.47k|    }

_RNvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|    232|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|    232|        self.inner_ranges()
  291|    232|            .union(ranges_from_bits(self.set.iter().copied()))
  292|    232|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|    232|    }
_RNvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitField12inner_rangesB5_:
  283|    232|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|    232|        iter::Ranges::new(self.ranges.iter().cloned())
  285|    232|    }
_RNvXsa_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB5_:
   42|    315|#[derive(Debug, Default, Clone)]

_RNvXNtCsbsVpavNDNjO_17fvm_ipld_bitfield5rangeINtNtNtCskiyb6Qz9mfK_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  8.24k|    fn size(&self) -> Self::Idx {
   17|  8.24k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  8.24k|            self.end - self.start
   21|       |        }
   22|  8.24k|    }

_RNvXs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCskiyb6Qz9mfK_4core3fmt7Display3fmt:
    5|     49|#[derive(PartialEq, Eq, Clone, Debug, Error)]
    6|      8|pub enum Error {

_RINvXs_NtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   99|    371|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    371|    where
  101|    371|        D: Deserializer<'de>,
  102|    371|    {
  103|    371|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    364|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    364|        }
  110|    364|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    371|    }
_RINvXNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   83|    232|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    232|    where
   85|    232|        S: Serializer,
   86|    232|    {
   87|    232|        let bytes = self.to_bytes();
   88|    232|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    232|        }
   94|    232|        strict_bytes::serialize(&bytes, serializer)
   95|    232|    }
_RNvMs1_NtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    364|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    364|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    363|        let version = reader.read(2);
  162|    363|        if version != 0 {
  163|      3|            return Err(Error::UnsupportedVersion);
  164|    360|        }
  165|    360|
  166|    360|        let mut next_value = reader.read(1) == 1;
  167|    360|        let mut ranges = Vec::new();
  168|    360|        let mut index = 0u64;
  169|    360|        let mut total_len: u64 = 0;
  170|       |
  171|  22.6k|        while let Some(len) = reader.read_len()? {
  172|  22.3k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  22.3k|            if ovf {
  174|      1|                return Err(Error::RLEOverflow);
  175|  22.3k|            }
  176|  22.3k|            total_len = new_total_len;
  177|  22.3k|            let start = index;
  178|  22.3k|            index += len;
  179|  22.3k|            let end = index;
  180|  22.3k|
  181|  22.3k|            if next_value {
  182|  11.2k|                ranges.push(start..end);
  183|  11.2k|            }
  184|       |
  185|  22.3k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    329|        if next_value {
  191|     14|            return Err(Error::NotMinimal);
  192|    315|        }
  193|    315|
  194|    315|        Ok(Self {
  195|    315|            ranges,
  196|    315|            ..Default::default()
  197|    315|        })
  198|    364|    }
_RNvMs1_NtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    232|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    232|        let mut iter = self.ranges();
  203|       |
  204|    232|        let first_range = match iter.next() {
  205|    144|            Some(range) => range,
  206|     88|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    144|        let mut writer = BitWriter::new();
  210|    144|        writer.write(0, 2); // version 00
  211|    144|
  212|    144|        if first_range.start == 0 {
  213|     70|            writer.write(1, 1); // the first bit is a 1
  214|     74|        } else {
  215|     74|            writer.write(0, 1); // the first bit is a 0
  216|     74|            writer.write_len(first_range.start); // the number of leading 0s
  217|     74|        }
  218|       |
  219|    144|        writer.write_len(first_range.size());
  220|    144|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  8.24k|        for range in iter {
  225|  8.09k|            writer.write_len(range.start - index); // zeros
  226|  8.09k|            writer.write_len(range.size()); // ones
  227|  8.09k|            index = range.end;
  228|  8.09k|        }
  229|       |
  230|    144|        writer.finish()
  231|    232|    }

_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    364|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    364|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    364|        // data.
   29|    364|        if bytes.last() == Some(&0) {
   30|      1|            return Err(Error::NotMinimal);
   31|    363|        }
   32|    363|        let mut bits = 0u64;
   33|  1.08k|        for i in 0..2 {
   34|    726|            let byte = bytes.get(i).unwrap_or(&0);
   35|    726|            bits |= (*byte as u64) << (8 * i);
   36|    726|        }
   37|       |
   38|    363|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    363|
   40|    363|        Ok(Self {
   41|    363|            bytes,
   42|    363|            bits,
   43|    363|            num_bits: 16,
   44|    363|        })
   45|    364|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  64.0k|    pub fn drop(&mut self, num_bits: u32) {
   62|  64.0k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  64.0k|        self.bits >>= num_bits;
   66|  64.0k|        self.num_bits -= num_bits;
   67|  64.0k|
   68|  64.0k|        // not sure why this being outside of the if improves the performance
   69|  64.0k|        // bit it does, probably related to keeping caches warm
   70|  64.0k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  64.0k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  64.0k|
   73|  64.0k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  64.0k|        if self.num_bits < 8 {
   75|  46.2k|            self.num_bits += 8;
   76|  46.2k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  46.2k|        }
   78|  64.0k|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  22.6k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  22.6k|        // We're done.
  121|  22.6k|        if !self.has_more() {
  122|    329|            return Ok(None);
  123|  22.3k|        }
  124|  22.3k|
  125|  22.3k|        let peek6 = self.peek(6);
  126|       |
  127|  22.3k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|  11.4k|            self.drop(1);
  130|  11.4k|            1
  131|  10.9k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|  2.27k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|  2.27k|            self.drop(6);
  135|  2.27k|            if val < 2 {
  136|      7|                return Err(Error::NotMinimal);
  137|  2.26k|            }
  138|  2.26k|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  8.68k|            self.drop(2);
  142|  8.68k|            let val = self.read_varint()?;
  143|  8.67k|            if val < 16 {
  144|     15|                return Err(Error::NotMinimal);
  145|  8.65k|            }
  146|  8.65k|            val
  147|       |        };
  148|       |
  149|  22.3k|        Ok(Some(len))
  150|  22.6k|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_moreB6_:
  153|  22.6k|    pub fn has_more(&self) -> bool {
  154|  22.6k|        self.bits != 0 || !self.bytes.is_empty()
  155|  22.6k|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  41.7k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  41.7k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  41.7k|        let res = self.peek(num_bits);
   86|  41.7k|        self.drop(num_bits);
   87|  41.7k|
   88|  41.7k|        res
   89|  41.7k|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  64.0k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  64.0k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  64.0k|        let mask = (1 << num_bits) - 1;
   56|  64.0k|        (self.bits & mask) as u8
   57|  64.0k|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  8.68k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  8.68k|        let mut len = 0u64;
   95|       |
   96|  40.9k|        for i in 0..VARINT_MAX_BYTES {
   97|  40.9k|            let byte = self.read(8);
   98|  40.9k|
   99|  40.9k|            // strip off the most significant bit and add
  100|  40.9k|            // it to the output
  101|  40.9k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  40.9k|
  103|  40.9k|            // if the most significant bit is a 0, we've
  104|  40.9k|            // reached the end of the varint
  105|  40.9k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  8.67k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      5|                    break;
  110|  8.67k|                }
  111|  8.67k|                return Ok(len);
  112|  32.3k|            }
  113|       |        }
  114|       |
  115|      8|        Err(Error::InvalidVarint)
  116|  8.68k|    }

_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    144|    pub fn finish(mut self) -> Vec<u8> {
   62|    144|        if self.bits > 0 {
   63|     60|            self.bytes.push(self.bits as u8);
   64|     84|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    144|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    144|        self.bytes
   72|    144|    }
_RNvXs_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB8_:
    5|    144|#[derive(Default, Clone, Debug)]
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  16.4k|    pub fn write_len(&mut self, len: u64) {
   40|  16.4k|        debug_assert!(len > 0);
   41|       |
   42|  16.4k|        if len == 1 {
   43|  7.11k|            // Block Single (prefix 1)
   44|  7.11k|            self.write(1, 1);
   45|  9.29k|        } else if len < 16 {
   46|  1.58k|            // Block Short (prefix 01)
   47|  1.58k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.58k|            self.write(len as u8, 4);
   49|  1.58k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  7.70k|            self.write(0, 2);
   52|  7.70k|
   53|  7.70k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  37.4k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  37.4k|                self.write(byte, 8);
   56|  37.4k|            }
   57|       |        }
   58|  16.4k|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  55.7k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  55.7k|        debug_assert!(num_bits <= 8);
   25|  55.7k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  55.7k|        self.bits |= (byte as u16) << self.num_bits;
   28|  55.7k|        self.num_bits += num_bits;
   29|  55.7k|
   30|  55.7k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  55.7k|        if self.num_bits >= 8 {
   32|  41.4k|            self.bytes.push(self.bits as u8);
   33|  41.4k|            self.bits >>= 8;
   34|  41.4k|            self.num_bits -= 8;
   35|  41.4k|        }
   36|  55.7k|    }
_RNvMNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3newB6_:
   18|    144|    pub fn new() -> Self {
   19|    144|        Default::default()
   20|    144|    }

_RINvXs4_NtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   94|    315|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    315|    where
   96|    315|        D: Deserializer<'de>,
   97|    315|    {
   98|    315|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    295|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    295|        }
  105|    295|        Ok(Self::Unvalidated(bytes))
  106|    315|    }
_RINvXNvNtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   36|    232|#[derive(Debug, Serialize)]
_RINvXNvXNvNtCsbsVpavNDNjO_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   36|    232|#[derive(Debug, Serialize)]

_RINvXNvXs0_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor14visit_byte_bufINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
  103|    167|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|    167|                where
  105|    167|                    E: Error,
  106|    167|                {
  107|    167|                    Ok(Cow::Owned(v))
  108|    167|                }
_RINvXNvXs_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor14visit_byte_bufINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
   64|     12|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|     12|                where
   66|     12|                    E: Error,
   67|     12|                {
   68|     12|                    Ok(v)
   69|     12|                }
_RINvNtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsbJTWGl6dkHx_5alloc6borrow3CowShEQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  162|    371|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    371|    where
  164|    371|        T: Deserialize<'de>,
  165|    371|        D: Deserializer<'de>,
  166|    371|    {
  167|    371|        Deserialize::deserialize(deserializer)
  168|    371|    }
_RINvXs0_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   76|  2.72k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  2.72k|        where
   78|  2.72k|            D: Deserializer<'de>,
   79|  2.72k|        {
   80|  2.72k|            struct CowVisitor;
   81|  2.72k|
   82|  2.72k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  2.72k|                type Value = Cow<'de, [u8]>;
   84|  2.72k|
   85|  2.72k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  2.72k|                    formatter.write_str("a byte array")
   87|  2.72k|                }
   88|  2.72k|
   89|  2.72k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  2.72k|                where
   91|  2.72k|                    E: Error,
   92|  2.72k|                {
   93|  2.72k|                    Ok(Cow::Borrowed(v))
   94|  2.72k|                }
   95|  2.72k|
   96|  2.72k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  2.72k|                where
   98|  2.72k|                    E: Error,
   99|  2.72k|                {
  100|  2.72k|                    Ok(Cow::Owned(v.to_vec()))
  101|  2.72k|                }
  102|  2.72k|
  103|  2.72k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  2.72k|                where
  105|  2.72k|                    E: Error,
  106|  2.72k|                {
  107|  2.72k|                    Ok(Cow::Owned(v))
  108|  2.72k|                }
  109|  2.72k|            }
  110|  2.72k|            deserializer.deserialize_bytes(CowVisitor)
  111|  2.72k|        }
_RINvXNvXs0_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor20visit_borrowed_bytesINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
   89|  2.46k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  2.46k|                where
   91|  2.46k|                    E: Error,
   92|  2.46k|                {
   93|  2.46k|                    Ok(Cow::Borrowed(v))
   94|  2.46k|                }
_RINvXNvXs_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCsezOp8ZBXjtd_5serde2de7Visitor11visit_bytesINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtNtCskiyb6Qz9mfK_4core7convert10InfallibleEECs6iUbv6KjWLj_11cbor_decode:
   57|    821|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    821|                where
   59|    821|                    E: Error,
   60|    821|                {
   61|    821|                    Ok(v.into())
   62|    821|                }
_RINvNtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCsbJTWGl6dkHx_5alloc3vec3VechEQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  154|    464|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    464|    where
  156|    464|        T: ?Sized + AsRef<[u8]>,
  157|    464|        S: Serializer,
  158|    464|    {
  159|    464|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    464|    }
_RINvXs_NtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   44|    968|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    968|        where
   46|    968|            D: Deserializer<'de>,
   47|    968|        {
   48|    968|            struct VecVisitor;
   49|    968|
   50|    968|            impl<'de> Visitor<'de> for VecVisitor {
   51|    968|                type Value = Vec<u8>;
   52|    968|
   53|    968|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    968|                    formatter.write_str("byte array")
   55|    968|                }
   56|    968|
   57|    968|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    968|                where
   59|    968|                    E: Error,
   60|    968|                {
   61|    968|                    Ok(v.into())
   62|    968|                }
   63|    968|
   64|    968|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    968|                where
   66|    968|                    E: Error,
   67|    968|                {
   68|    968|                    Ok(v)
   69|    968|                }
   70|    968|            }
   71|    968|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    968|        }
_RINvXNtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   35|    696|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    696|        where
   37|    696|            S: Serializer,
   38|    696|        {
   39|    696|            serializer.serialize_bytes(self.as_ref())
   40|    696|        }
_RINvNtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsbJTWGl6dkHx_5alloc3vec3VechEQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  162|    968|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    968|    where
  164|    968|        T: Deserialize<'de>,
  165|    968|        D: Deserializer<'de>,
  166|    968|    {
  167|    968|        Deserialize::deserialize(deserializer)
  168|    968|    }
_RINvNtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCsbJTWGl6dkHx_5alloc3vec3VechEQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  154|    232|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    232|    where
  156|    232|        T: ?Sized + AsRef<[u8]>,
  157|    232|        S: Serializer,
  158|    232|    {
  159|    232|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    232|    }
_RINvXNtNtCsbtaOZLYBl0Z_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsbJTWGl6dkHx_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   35|    662|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|    662|        where
   37|    662|            S: Serializer,
   38|    662|        {
   39|    662|            serializer.serialize_bytes(self.as_ref())
   40|    662|        }

_RNvXNtCsbtaOZLYBl0Z_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCskiyb6Qz9mfK_4core7convert4FromINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCs6iUbv6KjWLj_11cbor_decode:
   23|    435|    fn from(err: DecodeError<T>) -> Self {
   24|    435|        Self {
   25|    435|            description: err.to_string(),
   26|    435|            protocol: CodecProtocol::Cbor,
   27|    435|        }
   28|    435|    }

_RINvCsbtaOZLYBl0Z_17fvm_ipld_encoding10from_sliceNtNtCsbhjcNy0iRWY_11common_fuzz4cbor7PayloadECs6iUbv6KjWLj_11cbor_decode:
   61|    667|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    667|where
   63|    667|    T: de::Deserialize<'a>,
   64|    667|{
   65|    667|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    667|}
_RINvCsbtaOZLYBl0Z_17fvm_ipld_encoding6to_vecNtNtCsbhjcNy0iRWY_11common_fuzz4cbor7PayloadECs6iUbv6KjWLj_11cbor_decode:
   44|    232|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    232|where
   46|    232|    T: ser::Serialize + ?Sized,
   47|    232|{
   48|    232|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    232|}

_RNvXs7_NtNtCscb7jhypFJyL_10fvm_shared7address6errorsNtB5_5ErrorNtNtCskiyb6Qz9mfK_4core3fmt7Display3fmt:
   14|     39|#[derive(Debug, PartialEq, Eq, Error)]
   15|      0|pub enum Error {
_RNvXs0_NtNtCscb7jhypFJyL_10fvm_shared7address6errorsNtB5_5ErrorINtNtCskiyb6Qz9mfK_4core7convert4FromNtNtCsj7Om4Xk8cLR_15unsigned_varint6decode5ErrorE4fromB9_:
   52|     22|    fn from(_: VarintError) -> Error {
   53|     22|        Error::InvalidPayload
   54|     22|    }

_RINvXs3_NtCscb7jhypFJyL_10fvm_shared7addressNtB6_7AddressNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
  358|  2.35k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  359|  2.35k|    where
  360|  2.35k|        D: Deserializer<'de>,
  361|  2.35k|    {
  362|  2.35k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  363|       |
  364|       |        // Create and return created address of unmarshalled bytes
  365|  2.26k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  366|  2.35k|    }
_RINvXs2_NtCscb7jhypFJyL_10fvm_shared7addressNtB6_7AddressNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
  348|    662|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  349|    662|    where
  350|    662|        S: Serializer,
  351|    662|    {
  352|    662|        let address_bytes = self.to_bytes();
  353|    662|        strict_bytes::Serialize::serialize(&address_bytes, s)
  354|    662|    }
_RNvNtCscb7jhypFJyL_10fvm_shared7address12to_leb_bytes:
  369|    330|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  370|    330|    // write id to buffer in leb128 format
  371|    330|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  372|    330|}
_RNvMNtCscb7jhypFJyL_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|    662|    pub fn to_bytes(self) -> Vec<u8> {
  169|    662|        self.payload.to_bytes()
  170|    662|    }
_RNvNtCscb7jhypFJyL_10fvm_shared7address14from_leb_bytes:
  374|    598|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  375|       |    // write id to buffer in leb128 format
  376|    598|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  377|    580|    if !remaining.is_empty() {
  378|      2|        return Err(Error::InvalidPayload);
  379|    578|    }
  380|    578|    Ok(id)
  381|    598|}
_RNvMNtCscb7jhypFJyL_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  2.26k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  2.26k|        if bz.len() < 2 {
   88|     10|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  2.25k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  2.25k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  2.26k|    }
_RNvMNtCscb7jhypFJyL_10fvm_shared7addressNtB2_7Address3new:
   79|  2.25k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  2.25k|        Ok(Self {
   81|  2.25k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  2.25k|    }

_RNvMs0_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|    102|    pub fn subaddress(&self) -> &[u8] {
   80|    102|        &self.buffer[..self.length]
   81|    102|    }
_RNvMs0_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|    102|    pub fn namespace(&self) -> ActorID {
   74|    102|        self.namespace
   75|    102|    }
_RNvMs0_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|  1.01k|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|  1.01k|        let length = subaddress.len();
   59|  1.01k|        if length > MAX_SUBADDRESS_LEN {
   60|      1|            return Err(Error::InvalidPayloadLength(length));
   61|  1.01k|        }
   62|  1.01k|        let mut addr = DelegatedAddress {
   63|  1.01k|            namespace,
   64|  1.01k|            length,
   65|  1.01k|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|  1.01k|        };
   67|  1.01k|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|  1.01k|        Ok(addr)
   69|  1.01k|    }
_RNvMs2_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|    662|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|    662|        use Payload::*;
  117|    662|        match self {
  118|    228|            ID(i) => to_leb_bytes(i),
  119|    112|            Secp256k1(arr) => arr.to_vec(),
  120|    124|            Actor(arr) => arr.to_vec(),
  121|     96|            BLS(arr) => arr.to_vec(),
  122|    102|            Delegated(addr) => {
  123|    102|                let mut buf = to_leb_bytes(addr.namespace());
  124|    102|                buf.extend(addr.subaddress());
  125|    102|                buf
  126|       |            }
  127|       |        }
  128|    662|    }
_RNvMs2_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|    662|    pub fn to_bytes(self) -> Vec<u8> {
  132|    662|        let mut bz = self.to_raw_bytes();
  133|    662|        bz.insert(0, Protocol::from(self) as u8);
  134|    662|        bz
  135|    662|    }
_RNvXs3_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCskiyb6Qz9mfK_4core7convert4FromNtB5_7PayloadE4fromB9_:
  166|    662|    fn from(pl: Payload) -> Self {
  167|    662|        match pl {
  168|    228|            Payload::ID(_) => Self::ID,
  169|    112|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    124|            Payload::Actor(_) => Self::Actor,
  171|     96|            Payload::BLS(_) => Self::BLS,
  172|    102|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|    662|    }
_RNCNvMs2_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB7_7Payload3news0_0Bb_:
  154|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMs2_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB7_7Payload3news_0Bb_:
  149|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMs2_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  2.25k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  2.25k|        let payload = match protocol {
  140|    598|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    227|                payload
  143|    227|                    .try_into()
  144|    227|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    235|                payload
  148|    235|                    .try_into()
  149|    235|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    172|                payload
  153|    172|                    .try_into()
  154|    172|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|  1.02k|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|  1.01k|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  2.22k|        Ok(payload)
  162|  2.25k|    }
_RNCNvMs2_NtNtCscb7jhypFJyL_10fvm_shared7address7payloadNtB7_7Payload3new0Bb_:
  144|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,

_RNvMNtNtCscb7jhypFJyL_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  2.25k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  2.25k|        FromPrimitive::from_u8(b)
   31|  2.25k|    }
_RNvXNvNtNtCscb7jhypFJyL_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsjmKjBQg3mw2_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  2.25k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCscb7jhypFJyL_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsjmKjBQg3mw2_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  2.25k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RNCINvXNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtBd_7PayloadNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEE0Cs6iUbv6KjWLj_11cbor_decode:
   12|    538|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCsbhjcNy0iRWY_11common_fuzz4cborNtBd_7PayloadNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   12|    232|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB8_7PayloadNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs89Z2apPvesD_11serde_tuple12DeserializerQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEEECs6iUbv6KjWLj_11cbor_decode:
   12|    667|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCsbhjcNy0iRWY_11common_fuzz4cborNtB5_7PayloadNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEECs6iUbv6KjWLj_11cbor_decode:
   12|    232|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtB3_7PayloadNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   12|  1.09k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtBb_7PayloadNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   12|    115|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsbhjcNy0iRWY_11common_fuzz4cborNtBa_7PayloadNtNtCsezOp8ZBXjtd_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs89Z2apPvesD_11serde_tuple10SerializerQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils9BufWriterEEECs6iUbv6KjWLj_11cbor_decode:
   12|    232|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCsbhjcNy0iRWY_11common_fuzz4cborNtBe_7PayloadNtNtCsezOp8ZBXjtd_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsglxO6ZjC3K9_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfeWXHkhNspW_7cbor4ii4core5utils11SliceReaderEECs6iUbv6KjWLj_11cbor_decode:
   12|    768|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

