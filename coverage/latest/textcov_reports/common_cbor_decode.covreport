_RNvNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec8if_majorCsfYPlYAe3Msi_11cbor_decode:
  890|    232|pub fn if_major(byte: u8) -> u8 {
  891|    232|    byte >> 5
  892|    232|}
_RNvMNtNtCs1RCcsGMxX1f_7cbor4ii4core3decNtB2_9Reference6as_refCsfYPlYAe3Msi_11cbor_decode:
   81|  12.5k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  12.5k|        match self {
   83|  12.5k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  12.5k|    }
_RNvMs0_NtNtCs1RCcsGMxX1f_7cbor4ii4core3decNtB5_7TypeNum3newCsfYPlYAe3Msi_11cbor_decode:
  175|  5.44k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  5.44k|        TypeNum { major_limit, byte }
  177|  5.44k|    }
_RINvXsg_NtNtCs1RCcsGMxX1f_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  703|    245|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    245|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    245|    }
_RINvMs0_NtNtCs1RCcsGMxX1f_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  223|  5.44k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  5.44k|        match self.byte & self.major_limit {
  225|  5.44k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|    969|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|    367|                let mut buf = [0; 2];
  229|    367|                pull_exact(reader, &mut buf)?;
  230|    360|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|    214|                let mut buf = [0; 4];
  234|    214|                pull_exact(reader, &mut buf)?;
  235|    206|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    403|                let mut buf = [0; 8];
  239|    403|                pull_exact(reader, &mut buf)?;
  240|    395|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|     56|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  5.44k|    }
_RINvNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  125|  11.5k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  11.5k|    let b = reader.fill(1)?
  127|  11.5k|        .as_ref()
  128|  11.5k|        .get(0)
  129|  11.5k|        .copied()
  130|  11.5k|        .ok_or(Error::Eof)?;
  131|  11.4k|    reader.advance(1);
  132|  11.4k|    Ok(b)
  133|  11.5k|}
_RINvYINtNtNtCs1RCcsGMxX1f_7cbor4ii4core5types5BytesINtNtCskiapchPz3s2_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
   73|  2.79k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  2.79k|        let byte = pull_one(reader)?;
   75|  2.75k|        Self::decode_with(byte, reader)
   76|  2.79k|    }
_RINvYNtNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
   73|    247|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    247|        let byte = pull_one(reader)?;
   75|    245|        Self::decode_with(byte, reader)
   76|    247|    }
_RINvXss_NtNtCs1RCcsGMxX1f_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  252|    431|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    431|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    431|                }
_RNCINvNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec10decode_bufNtNtB6_5utils11SliceReaderE0CsfYPlYAe3Msi_11cbor_decode:
  471|  5.74k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
_RINvNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  427|  8.49k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  8.49k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  8.49k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  8.49k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  3.81k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  3.81k|            if buf.len() >= len {
  436|  3.75k|                reader.advance(len);
  437|  3.75k|                return Ok(Some(&buf[..len]));
  438|     61|            }
  439|      0|        }
  440|       |
  441|     61|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|     78|        while len != 0 {
  444|     78|            let readbuf = reader.fill(len)?;
  445|     78|            let readbuf = readbuf.as_ref();
  446|     78|
  447|     78|            if readbuf.is_empty() {
  448|     61|                return Err(Error::Eof);
  449|     17|            }
  450|     17|
  451|     17|            let readlen = core::cmp::min(readbuf.len(), len);
  452|     17|
  453|     17|            buf.extend_from_slice(&readbuf[..readlen]);
  454|     17|            reader.advance(readlen);
  455|     17|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|  6.13k|            let byte = pull_one(reader)?;
  463|       |
  464|  6.11k|            if byte == marker::BREAK {
  465|    364|                break
  466|  5.74k|            }
  467|  5.74k|
  468|  5.74k|            if !reader.step_in() {
  469|      1|                return Err(Error::DepthLimit);
  470|  5.74k|            }
  471|  5.74k|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|  5.74k|            let reader = &mut *reader;
  473|       |
  474|  5.74k|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|  1.24k|                buf.extend_from_slice(longbuf);
  476|  1.24k|            }
  477|       |        }
  478|       |
  479|    364|        Ok(None)
  480|       |    }
  481|  8.49k|}
_RINvNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  595|  9.41k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  9.41k|    -> Result<Option<usize>, Error<R::Error>>
  597|  9.41k|{
  598|  9.41k|    if byte != (marker::START | (major << 5)) {
  599|  4.77k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  4.70k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  4.70k|        Ok(Some(len))
  602|       |    } else {
  603|  4.64k|        Ok(None)
  604|       |    }
  605|  9.41k|}
_RINvXs5_NtNtCs1RCcsGMxX1f_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCskiapchPz3s2_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  506|  2.75k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  2.75k|        use crate::alloc::borrow::Cow;
  508|  2.75k|
  509|  2.75k|        let mut buf = Vec::new();
  510|  2.75k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  2.50k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|     91|            Cow::Owned(buf)
  514|       |        }))
  515|  2.75k|    }
_RINvYNtNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
   73|    917|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    917|        let byte = pull_one(reader)?;
   75|    914|        Self::decode_with(byte, reader)
   76|    917|    }
_RINvXsc_NtNtCs1RCcsGMxX1f_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  611|    914|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|    914|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|    914|    }
_RINvYyNtNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
   73|    437|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    437|        let byte = pull_one(reader)?;
   75|    431|        Self::decode_with(byte, reader)
   76|    437|    }
_RINvNtNtCs1RCcsGMxX1f_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
  136|    984|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|  1.95k|    while !buf.is_empty() {
  138|    997|        let readbuf = reader.fill(buf.len())?;
  139|    997|        let readbuf = readbuf.as_ref();
  140|    997|
  141|    997|        if readbuf.is_empty() {
  142|     23|            return Err(Error::Eof);
  143|    974|        }
  144|    974|
  145|    974|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    974|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    974|        reader.advance(len);
  148|    974|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    961|    Ok(())
  152|    984|}

_RINvXsd_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
  270|    368|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|    368|        Ok(())
  272|    368|    }
_RINvXs3_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
   84|  1.71k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  1.71k|        match u16::try_from(self.value) {
   86|  1.70k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|      4|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|      4|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  1.71k|        Ok(())
   93|  1.71k|    }
_RINvXs4_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
   98|  1.87k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  1.87k|        match u32::try_from(self.value) {
  100|  1.71k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    168|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    168|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  1.87k|        Ok(())
  107|  1.87k|    }
_RINvXs7_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
  209|  1.14k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  1.14k|        writer.push(self.0)?;
  211|  1.14k|        Ok(())
  212|  1.14k|    }
_RNvMs0_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB5_7TypeNumyE3newCsfYPlYAe3Msi_11cbor_decode:
   52|  1.87k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.87k|        TypeNum { type_, value }
   54|  1.87k|    }
_RINvXsu_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
  159|    184|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    184|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    184|                }
_RNvMs0_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB5_7TypeNumtE3newCsfYPlYAe3Msi_11cbor_decode:
   52|  1.70k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.70k|        TypeNum { type_, value }
   54|  1.70k|    }
_RINvXs2_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
   70|  1.70k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  1.70k|        match u8::try_from(self.value) {
   72|  1.57k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    130|                let [x0, x1] = self.value.to_be_bytes();
   75|    130|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  1.70k|        Ok(())
   79|  1.70k|    }
_RINvXs1_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
   59|  1.57k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  1.57k|        match self.value {
   61|  1.57k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|    620|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  1.57k|        Ok(())
   65|  1.57k|    }
_RNvMs0_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB5_7TypeNummE3newCsfYPlYAe3Msi_11cbor_decode:
   52|  1.71k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.71k|        TypeNum { type_, value }
   54|  1.71k|    }
_RNvMs0_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtB5_7TypeNumhE3newCsfYPlYAe3Msi_11cbor_decode:
   52|  1.57k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  1.57k|        TypeNum { type_, value }
   54|  1.57k|    }
_RINvXsi_NtNtCs1RCcsGMxX1f_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsfYPlYAe3Msi_11cbor_decode:
  317|    184|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    184|        self.1.encode(writer)
  319|    184|    }

_RNvXs1_NtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsfYPlYAe3Msi_11cbor_decode:
   84|  6.66k|    fn step_out(&mut self) {
   85|  6.66k|        self.limit += 1;
   86|  6.66k|    }
_RNvXs1_NtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsfYPlYAe3Msi_11cbor_decode:
   75|  6.66k|        if let Some(limit) = self.limit.checked_sub(1) {
   76|  6.66k|            self.limit = limit;
   77|  6.66k|            true
   78|       |        } else {
   79|      1|            false
   80|       |        }
   81|  6.66k|    }
_RNvXs_NtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsfYPlYAe3Msi_11cbor_decode:
   40|  3.02k|        self.0.try_reserve(input.len())?;
   41|  3.02k|        self.0.extend_from_slice(input);
   42|  3.02k|        Ok(())
   43|  3.02k|    }
_RNvXs1_NtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsfYPlYAe3Msi_11cbor_decode:
   68|  16.1k|    fn advance(&mut self, n: usize) {
   69|  16.1k|        let len = core::cmp::min(self.buf.len(), n);
   70|  16.1k|        self.buf = &self.buf[len..];
   71|  16.1k|    }
_RNvXs1_NtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsfYPlYAe3Msi_11cbor_decode:
   62|  17.3k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  17.3k|        let len = core::cmp::min(self.buf.len(), want);
   64|  17.3k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  17.3k|    }
_RNvMNtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    184|    pub fn into_inner(self) -> Vec<u8> {
   25|    184|        self.0
   26|    184|    }
_RNvMs0_NtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    541|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    541|        SliceReader { buf, limit: 256 }
   55|    541|    }
_RNvMNtNtCs1RCcsGMxX1f_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    184|    pub fn new(buf: Vec<u8>) -> Self {
   15|    184|       BufWriter(buf)
   16|    184|    }

_RNvMs1_NtCs1RCcsGMxX1f_7cbor4ii5errorINtB5_11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleE8mismatchCsfYPlYAe3Msi_11cbor_decode:
   93|     56|    pub(crate) const fn mismatch(major_limit: u8, byte: u8) -> Self {
   94|     56|        DecodeError::Mismatch {
   95|     56|            expect_major: (!major_limit) >> 5,
   96|     56|            byte
   97|     56|        }
   98|     56|    }

_RNvXs0_NtCs1RCcsGMxX1f_7cbor4ii4utilINtB5_10ScopeGuardNtNtNtB7_4core5utils11SliceReaderENtNtNtCs6CYv2AEEwPl_4core3ops4drop4Drop4dropCsfYPlYAe3Msi_11cbor_decode:
   24|  5.74k|    fn drop(&mut self) {
   25|  5.74k|        (self.1)(self.0);
   26|  5.74k|    }
_RNvXs_NtCs1RCcsGMxX1f_7cbor4ii4utilINtB4_10ScopeGuardNtNtNtB6_4core5utils11SliceReaderENtNtNtCs6CYv2AEEwPl_4core3ops5deref8DerefMut9deref_mutCsfYPlYAe3Msi_11cbor_decode:
   17|  5.74k|    fn deref_mut(&mut self) -> &mut Self::Target {
   18|  5.74k|        self.0
   19|  5.74k|    }

_RNvMNtCs4r8FFkJRi2d_3cid3cidINtB2_3CidKj40_E6new_v1CsfYPlYAe3Msi_11cbor_decode:
   90|    170|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    170|        Self {
   92|    170|            version: Version::V1,
   93|    170|            codec,
   94|    170|            hash,
   95|    170|        }
   96|    170|    }
_RINvMNtCs4r8FFkJRi2d_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
  143|    166|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    166|        let mut version_buf = varint_encode::u64_buffer();
  145|    166|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    166|
  147|    166|        let mut codec_buf = varint_encode::u64_buffer();
  148|    166|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    166|
  150|    166|        w.write_all(version)?;
  151|    166|        w.write_all(codec)?;
  152|    166|        self.hash.write(&mut w)?;
  153|    166|        Ok(())
  154|    166|    }
_RNvMNtCs4r8FFkJRi2d_3cid3cidINtB2_3CidKj40_E3newCsfYPlYAe3Msi_11cbor_decode:
   99|    171|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    171|        match version {
  101|       |            Version::V0 => {
  102|      1|                if codec != DAG_PB {
  103|      1|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    170|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    171|    }
_RNvMNtCs4r8FFkJRi2d_3cid3cidINtB2_3CidKj40_E6new_v0CsfYPlYAe3Msi_11cbor_decode:
   78|     19|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     19|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     19|        }
   82|     19|        Ok(Self {
   83|     19|            version: Version::V0,
   84|     19|            codec: DAG_PB,
   85|     19|            hash,
   86|     19|        })
   87|     19|    }
_RNvXs6_NtCs4r8FFkJRi2d_3cid3cidINtB5_3CidKj40_EINtNtCs6CYv2AEEwPl_4core7convert7TryFromRShE8try_fromCsfYPlYAe3Msi_11cbor_decode:
  314|    223|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    223|        Self::read_bytes(&mut bytes)
  316|    223|    }
_RINvMNtCs4r8FFkJRi2d_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsfYPlYAe3Msi_11cbor_decode:
  127|    223|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    223|        let version = varint_read_u64(&mut r)?;
  129|    222|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    218|        if [version, codec] == [0x12, 0x20] {
  132|     20|            let mut digest = [0u8; 32];
  133|     20|            r.read_exact(&mut digest)?;
  134|     19|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|     19|            Self::new_v0(mh)
  136|       |        } else {
  137|    198|            let version = Version::try_from(version)?;
  138|    196|            let mh = Multihash::read(r)?;
  139|    171|            Self::new(version, codec, mh)
  140|       |        }
  141|    223|    }
_RINvMNtCs4r8FFkJRi2d_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
  157|    184|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    184|        match self.version {
  159|     18|            Version::V0 => self.hash.write(w)?,
  160|    166|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    184|        Ok(())
  163|    184|    }
_RNvMNtCs4r8FFkJRi2d_3cid3cidINtB2_3CidKj40_E8to_bytesCsfYPlYAe3Msi_11cbor_decode:
  167|    184|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    184|        let mut bytes = Vec::new();
  169|    184|        self.write_bytes(&mut bytes).unwrap();
  170|    184|        bytes
  171|    184|    }

_RNvXs4_NtCs4r8FFkJRi2d_3cid5errorNtB5_5ErrorINtNtCs6CYv2AEEwPl_4core7convert4FromNtNtNtCs7mqN1sNiYkO_3std2io5error5ErrorE4from:
   88|      1|    fn from(err: io::Error) -> Self {
   89|      1|        Self::Io(err)
   90|      1|    }
_RNvXs3_NtCs4r8FFkJRi2d_3cid5errorNtB5_5ErrorINtNtCs6CYv2AEEwPl_4core7convert4FromNtNtCs5wtbx4MMp54_15unsigned_varint2io9ReadErrorE4from:
   78|      5|    fn from(err: unsigned_varint::io::ReadError) -> Self {
   79|      5|        use unsigned_varint::io::ReadError::*;
   80|      5|        match err {
   81|      1|            Io(err) => Self::Io(err),
   82|      4|            _ => Self::VarIntDecodeError,
   83|       |        }
   84|      5|    }
_RNvXs_NtCs4r8FFkJRi2d_3cid5errorNtB4_5ErrorNtNtCs6CYv2AEEwPl_4core3fmt7Display3fmt:
   39|     34|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
   40|       |        use self::Error::*;
   41|     34|        let error = match self {
   42|      0|            UnknownCodec => "Unknown codec",
   43|      0|            InputTooShort => "Input too short",
   44|     25|            ParsingError => "Failed to parse multihash",
   45|      2|            InvalidCidVersion => "Unrecognized CID version",
   46|      1|            InvalidCidV0Codec => "CIDv0 requires a DagPB codec",
   47|      0|            InvalidCidV0Multihash => "CIDv0 requires a Sha-256 multihash",
   48|      0|            InvalidCidV0Base => "CIDv0 requires a Base58 base",
   49|      4|            VarIntDecodeError => "Failed to decode unsigned varint format",
   50|      2|            Io(err) => return write!(f, "{}", err),
   51|       |        };
   52|       |
   53|     32|        f.write_str(error)
   54|     34|    }
_RNvXs1_NtCs4r8FFkJRi2d_3cid5errorNtB5_5ErrorINtNtCs6CYv2AEEwPl_4core7convert4FromNtNtCs6rWVBvS6R9C_9multihash5error5ErrorE4from:
   65|     25|    fn from(_: multihash::Error) -> Error {
   66|     25|        Error::ParsingError
   67|     25|    }

_RINvXs0_NtCs4r8FFkJRi2d_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   79|    247|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    247|    where
   81|    247|        D: de::Deserializer<'de>,
   82|    247|    {
   83|    247|        /// Main visitor to deserialize a CID.
   84|    247|        ///
   85|    247|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    247|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    247|        /// to bytes.
   88|    247|        struct MainEntryVisitor<const SIZE: usize>;
   89|    247|
   90|    247|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    247|            type Value = CidGeneric<SIZE>;
   92|    247|
   93|    247|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    247|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    247|            }
   96|    247|
   97|    247|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    247|            where
   99|    247|                D: de::Deserializer<'de>,
  100|    247|            {
  101|    247|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    247|            }
  103|    247|        }
  104|    247|
  105|    247|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    247|    }
_RINvXNtCs4r8FFkJRi2d_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   29|    184|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    184|    where
   31|    184|        S: ser::Serializer,
   32|    184|    {
   33|    184|        let value = ByteBuf::from(self.to_bytes());
   34|    184|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    184|    }
_RNCINvXs_NtCs4r8FFkJRi2d_3cid5serdeNtB7_17BytesToCidVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor11visit_bytesINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEE0CsfYPlYAe3Msi_11cbor_decode:
   53|     34|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
_RINvXs_NtCs4r8FFkJRi2d_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor11visit_bytesINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
   48|    223|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    223|    where
   50|    223|        E: de::Error,
   51|    223|    {
   52|    223|        CidGeneric::<SIZE>::try_from(value)
   53|    223|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    223|    }
_RINvXNvXs0_NtCs4r8FFkJRi2d_3cid5serdeINtNtBb_3cid3CidKpENtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   97|    233|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    233|            where
   99|    233|                D: de::Deserializer<'de>,
  100|    233|            {
  101|    233|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    233|            }

_RNvXs_NtCs4r8FFkJRi2d_3cid7versionNtB4_7VersionINtNtCs6CYv2AEEwPl_4core7convert7TryFromyE8try_from:
   34|    198|    fn try_from(raw: u64) -> Result<Self> {
   35|    198|        match raw {
   36|      3|            0 => Ok(Self::V0),
   37|    193|            1 => Ok(Self::V1),
   38|      2|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    198|    }
_RNvXs0_NtCs4r8FFkJRi2d_3cid7versionyINtNtCs6CYv2AEEwPl_4core7convert4FromNtB5_7VersionE4from:
   44|    166|    fn from(ver: Version) -> u64 {
   45|    166|        match ver {
   46|      0|            Version::V0 => 0,
   47|    166|            Version::V1 => 1,
   48|       |        }
   49|    166|    }

_RINvXsd_NtCs4IFx7jetauH_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor11visit_bytesINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
  203|    671|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    671|    where
  205|    671|        E: Error,
  206|    671|    {
  207|    671|        Ok(ByteBuf::from(v))
  208|    671|    }
_RINvXse_NtCs4IFx7jetauH_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  219|    791|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    791|    where
  221|    791|        D: Deserializer<'de>,
  222|    791|    {
  223|    791|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    791|    }
_RINvMNtCs4IFx7jetauH_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
   60|     13|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|     13|        ByteBuf {
   62|     13|            bytes: bytes.into(),
   63|     13|        }
   64|     13|    }
_RINvMNtCs4IFx7jetauH_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECsfYPlYAe3Msi_11cbor_decode:
   60|    671|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    671|        ByteBuf {
   62|    671|            bytes: bytes.into(),
   63|    671|        }
   64|    671|    }
_RINvXsd_NtCs4IFx7jetauH_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor14visit_byte_bufINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
  210|     13|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<ByteBuf, E>
  211|     13|    where
  212|     13|        E: Error,
  213|     13|    {
  214|     13|        Ok(ByteBuf::from(v))
  215|     13|    }
_RNvMNtCs4IFx7jetauH_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    684|    pub fn into_vec(self) -> Vec<u8> {
   68|    684|        self.bytes
   69|    684|    }

_RINvXNvXs2_NtCs4IFx7jetauH_14cs_serde_bytes2deINtNtCskiapchPz3s2_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
   85|  1.61k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  1.61k|            where
   87|  1.61k|                E: Error,
   88|  1.61k|            {
   89|  1.61k|                Ok(Cow::Borrowed(v))
   90|  1.61k|            }
_RINvXs2_NtCs4IFx7jetauH_14cs_serde_bytes2deINtNtCskiapchPz3s2_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   72|  1.77k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  1.77k|    where
   74|  1.77k|        D: Deserializer<'de>,
   75|  1.77k|    {
   76|  1.77k|        struct CowVisitor;
   77|  1.77k|
   78|  1.77k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  1.77k|            type Value = Cow<'de, [u8]>;
   80|  1.77k|
   81|  1.77k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  1.77k|                formatter.write_str("a byte array")
   83|  1.77k|            }
   84|  1.77k|
   85|  1.77k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  1.77k|            where
   87|  1.77k|                E: Error,
   88|  1.77k|            {
   89|  1.77k|                Ok(Cow::Borrowed(v))
   90|  1.77k|            }
   91|  1.77k|
   92|  1.77k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  1.77k|            where
   94|  1.77k|                E: Error,
   95|  1.77k|            {
   96|  1.77k|                Ok(Cow::Owned(v.to_vec()))
   97|  1.77k|            }
   98|  1.77k|
   99|  1.77k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  1.77k|            where
  101|  1.77k|                E: Error,
  102|  1.77k|            {
  103|  1.77k|                Ok(Cow::Owned(v))
  104|  1.77k|            }
  105|  1.77k|        }
  106|  1.77k|
  107|  1.77k|        deserializer.deserialize_bytes(CowVisitor)
  108|  1.77k|    }
_RINvXs1_NtCs4IFx7jetauH_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   61|    791|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    791|    where
   63|    791|        D: Deserializer<'de>,
   64|    791|    {
   65|    791|        // Via the serde::Deserialize impl for ByteBuf.
   66|    791|        serde::Deserialize::deserialize(deserializer)
   67|    791|    }
_RINvXs_NtCs4IFx7jetauH_14cs_serde_bytes2deINtNtCskiapchPz3s2_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   42|    791|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    791|    where
   44|    791|        D: Deserializer<'de>,
   45|    791|    {
   46|    791|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    791|    }
_RINvXNvXs2_NtCs4IFx7jetauH_14cs_serde_bytes2deINtNtCskiapchPz3s2_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor14visit_byte_bufINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
   99|     74|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|     74|            where
  101|     74|                E: Error,
  102|     74|            {
  103|     74|                Ok(Cow::Owned(v))
  104|     74|            }

_RINvCs4IFx7jetauH_14cs_serde_bytes11deserializeINtNtCskiapchPz3s2_5alloc3vec3VechEQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  103|    791|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    791|where
  105|    791|    T: Deserialize<'de>,
  106|    791|    D: Deserializer<'de>,
  107|    791|{
  108|    791|    Deserialize::deserialize(deserializer)
  109|    791|}
_RINvCs4IFx7jetauH_14cs_serde_bytes9serializeINtNtCskiapchPz3s2_5alloc3vec3VechEQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   77|    368|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    368|where
   79|    368|    T: ?Sized + Serialize,
   80|    368|    S: Serializer,
   81|    368|{
   82|    368|    Serialize::serialize(bytes, serializer)
   83|    368|}
_RINvCs4IFx7jetauH_14cs_serde_bytes9serializeRINtNtCskiapchPz3s2_5alloc3vec3VechEQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   77|    184|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    184|where
   79|    184|    T: ?Sized + Serialize,
   80|    184|    S: Serializer,
   81|    184|{
   82|    184|    Serialize::serialize(bytes, serializer)
   83|    184|}
_RINvCs4IFx7jetauH_14cs_serde_bytes11deserializeINtNtCskiapchPz3s2_5alloc6borrow3CowShEQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  103|    305|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    305|where
  105|    305|    T: Deserialize<'de>,
  106|    305|    D: Deserializer<'de>,
  107|    305|{
  108|    305|    Deserialize::deserialize(deserializer)
  109|    305|}

_RINvXs_NtCs4IFx7jetauH_14cs_serde_bytes3serINtNtCskiapchPz3s2_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   37|    958|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|    958|    where
   39|    958|        S: Serializer,
   40|    958|    {
   41|    958|        serializer.serialize_bytes(self)
   42|    958|    }
_RINvXs4_NtCs4IFx7jetauH_14cs_serde_bytes3serRINtNtCskiapchPz3s2_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   88|    184|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    184|    where
   90|    184|        S: Serializer,
   91|    184|    {
   92|    184|        (**self).serialize(serializer)
   93|    184|    }

rust_fuzzer_test_input:
  141|    449|        pub extern "C" fn rust_fuzzer_test_input($bytes: &[u8]) {
  142|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  143|       |            // formatting of the input to that file. This is only intended for
  144|       |            // `cargo fuzz`'s use!
  145|       |
  146|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  147|    449|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  148|       |                use std::io::Write;
  149|      0|                let mut file = std::fs::File::create(path)
  150|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  151|      0|                writeln!(&mut file, "{:?}", $bytes)
  152|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  153|      0|                return;
  154|    449|            }
  155|       |
  156|       |            $body
  157|    449|        }
LLVMFuzzerTestOneInput:
   27|    449|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    449|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    449|    });
   32|    449|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    449|    }
   37|    449|    0
   38|    449|}
_RNCNvCsjhNkPXQ8kgS_13libfuzzer_sys15test_input_wrap0B3_:
   28|    449|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    449|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    449|        rust_fuzzer_test_input(data_slice);
   31|    449|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs0_NtCs6rWVBvS6R9C_9multihash5errorNtB5_5ErrorINtNtCs6CYv2AEEwPl_4core7convert4FromNtNtNtCs7mqN1sNiYkO_3std2io5error5ErrorE4from:
   37|      1|    fn from(err: IoError) -> Self {
   38|      1|        Self::Io(err)
   39|      1|    }
_RNvXs1_NtCs6rWVBvS6R9C_9multihash5errorNtB5_5ErrorINtNtCs6CYv2AEEwPl_4core7convert4FromNtNtCs5wtbx4MMp54_15unsigned_varint2io9ReadErrorE4from:
   44|     15|    fn from(err: ReadError) -> Self {
   45|     15|        match err {
   46|     11|            ReadError::Io(err) => Self::Io(err),
   47|      4|            ReadError::Decode(err) => Self::Varint(err),
   48|      0|            _ => unreachable!(),
   49|       |        }
   50|     15|    }

_RNvMs_NtCs6rWVBvS6R9C_9multihash9multihashINtB4_9MultihashKj40_E6digestCsfYPlYAe3Msi_11cbor_decode:
  130|    184|    pub fn digest(&self) -> &[u8] {
  131|    184|        &self.digest[..self.size as usize]
  132|    184|    }
_RINvMs_NtCs6rWVBvS6R9C_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsfYPlYAe3Msi_11cbor_decode:
  135|    196|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    196|    where
  137|    196|        Self: Sized,
  138|    196|    {
  139|    196|        let (code, size, digest) = read_multihash(r)?;
  140|    171|        Ok(Self { code, size, digest })
  141|    196|    }
_RINvMs_NtCs6rWVBvS6R9C_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
  163|    166|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    166|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    166|    }
_RINvNtCs6rWVBvS6R9C_9multihash9multihash14read_multihashQRShKj40_ECsfYPlYAe3Msi_11cbor_decode:
  298|    196|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    196|where
  300|    196|    R: io::Read,
  301|    196|{
  302|    196|    let code = read_u64(&mut r)?;
  303|    192|    let size = read_u64(&mut r)?;
  304|       |
  305|    181|    if size > S as u64 || size > u8::MAX as u64 {
  306|      9|        return Err(Error::InvalidSize(size));
  307|    172|    }
  308|    172|
  309|    172|    let mut digest = [0; S];
  310|    172|    r.read_exact(&mut digest[..size as usize])?;
  311|    171|    Ok((code, size as u8, digest))
  312|    196|}
_RNvMs_NtCs6rWVBvS6R9C_9multihash9multihashINtB4_9MultihashKj40_E4codeCsfYPlYAe3Msi_11cbor_decode:
  120|    203|    pub const fn code(&self) -> u64 {
  121|    203|        self.code
  122|    203|    }
_RNvMs_NtCs6rWVBvS6R9C_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsfYPlYAe3Msi_11cbor_decode:
  101|     19|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     19|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     19|        }
  105|     19|        let size = input_digest.len();
  106|     19|        let mut digest = [0; S];
  107|     19|        let mut i = 0;
  108|    627|        while i < size {
  109|    608|            digest[i] = input_digest[i];
  110|    608|            i += 1;
  111|    608|        }
  112|     19|        Ok(Self {
  113|     19|            code,
  114|     19|            size: size as u8,
  115|     19|            digest,
  116|     19|        })
  117|     19|    }
_RINvNtCs6rWVBvS6R9C_9multihash9multihash15write_multihashQINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
  276|     18|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     18|where
  278|     18|    W: io::Write,
  279|     18|{
  280|     18|    let mut code_buf = varint_encode::u64_buffer();
  281|     18|    let code = varint_encode::u64(code, &mut code_buf);
  282|     18|
  283|     18|    let mut size_buf = varint_encode::u8_buffer();
  284|     18|    let size = varint_encode::u8(size, &mut size_buf);
  285|     18|
  286|     18|    w.write_all(code)?;
  287|     18|    w.write_all(size)?;
  288|     18|    w.write_all(digest)?;
  289|     18|    Ok(())
  290|     18|}
_RINvNtCs6rWVBvS6R9C_9multihash9multihash15write_multihashQQINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
  276|    166|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    166|where
  278|    166|    W: io::Write,
  279|    166|{
  280|    166|    let mut code_buf = varint_encode::u64_buffer();
  281|    166|    let code = varint_encode::u64(code, &mut code_buf);
  282|    166|
  283|    166|    let mut size_buf = varint_encode::u8_buffer();
  284|    166|    let size = varint_encode::u8(size, &mut size_buf);
  285|    166|
  286|    166|    w.write_all(code)?;
  287|    166|    w.write_all(size)?;
  288|    166|    w.write_all(digest)?;
  289|    166|    Ok(())
  290|    166|}
_RINvMs_NtCs6rWVBvS6R9C_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
  163|     18|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     18|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     18|    }
_RNvMs_NtCs6rWVBvS6R9C_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsfYPlYAe3Msi_11cbor_decode:
  125|    184|    pub const fn size(&self) -> u8 {
  126|    184|        self.size
  127|    184|    }

_RNvYNtNtNtCs69ZxKDRhaCe_10fvm_shared7address8protocol8ProtocolNtNtCsebO9pH15eAA_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  1.38k|    fn from_u8(n: u8) -> Option<Self> {
  468|  1.38k|        FromPrimitive::from_u64(From::from(n))
  469|  1.38k|    }

_RNvMs2_NtCsdvlfzAjfgRs_9once_cell3impINtB5_8OnceCellNtNtCskiapchPz3s2_5alloc6string6StringE14is_initializedCsfYPlYAe3Msi_11cbor_decode:
   62|    449|    pub(crate) fn is_initialized(&self) -> bool {
   63|    449|        // An `Acquire` load is enough because that makes all the initialization
   64|    449|        // operations visible to us, and, this being a fast path, weaker
   65|    449|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    449|        // `SeqCst` operations on the slow path.
   67|    449|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    449|    }

_RNvMs4_NtCsdvlfzAjfgRs_9once_cell4syncINtB5_8OnceCellNtNtCskiapchPz3s2_5alloc6string6StringE3getCsfYPlYAe3Msi_11cbor_decode:
  869|    449|        pub fn get(&self) -> Option<&T> {
  870|    449|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    449|                None
  875|       |            }
  876|    449|        }

_RNvXs5_Cs60QLay655sM_10scopeguardINtB5_10ScopeGuardQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs6CYv2AEEwPl_4core3ops4drop4Drop4dropCsfYPlYAe3Msi_11cbor_decode:
  452|    917|    fn drop(&mut self) {
  453|    917|        // This is OK because the fields are `ManuallyDrop`s
  454|    917|        // which will not be dropped by the compiler.
  455|    917|        let (value, dropfn) = unsafe {
  456|    917|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    917|        };
  458|    917|        if S::should_run() {
  459|    917|            dropfn(value);
  460|    917|        }
  461|    917|    }
_RINvCs60QLay655sM_10scopeguard5guardQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEFBy_EuECsfYPlYAe3Msi_11cbor_decode:
  367|    917|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    917|    where F: FnOnce(T)
  369|    917|{
  370|    917|    ScopeGuard::with_strategy(v, dropfn)
  371|    917|}
_RNvMs1_Cs60QLay655sM_10scopeguardINtB5_10ScopeGuardQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsfYPlYAe3Msi_11cbor_decode:
  317|    917|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    917|        ScopeGuard {
  319|    917|            value: ManuallyDrop::new(v),
  320|    917|            dropfn: ManuallyDrop::new(dropfn),
  321|    917|            strategy: PhantomData,
  322|    917|        }
  323|    917|    }
_RNvXCs60QLay655sM_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    917|    fn should_run() -> bool { true }
_RNvXs4_Cs60QLay655sM_10scopeguardINtB5_10ScopeGuardQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs6CYv2AEEwPl_4core3ops5deref8DerefMut9deref_mutCsfYPlYAe3Msi_11cbor_decode:
  443|    917|    fn deref_mut(&mut self) -> &mut T {
  444|    917|        &mut *self.value
  445|    917|    }

_RINvXNvXsV_NtNtCs5tJLM6yUDwv_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
  138|    424|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    424|        where
  140|    424|            E: Error,
  141|    424|        {
  142|    424|            Ok(v)
  143|    424|        }
_RINvXsh_NtNtCs5tJLM6yUDwv_5serde2de5implsINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
 1014|    376|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    376|    where
 1016|    376|        D: Deserializer<'de>,
 1017|    376|    {
 1018|    376|        struct VecVisitor<T> {
 1019|    376|            marker: PhantomData<T>,
 1020|    376|        }
 1021|    376|
 1022|    376|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    376|        where
 1024|    376|            T: Deserialize<'de>,
 1025|    376|        {
 1026|    376|            type Value = Vec<T>;
 1027|    376|
 1028|    376|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    376|                formatter.write_str("a sequence")
 1030|    376|            }
 1031|    376|
 1032|    376|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    376|            where
 1034|    376|                A: SeqAccess<'de>,
 1035|    376|            {
 1036|    376|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    376|
 1038|    376|                while let Some(value) = try!(seq.next_element()) {
 1039|    376|                    values.push(value);
 1040|    376|                }
 1041|    376|
 1042|    376|                Ok(values)
 1043|    376|            }
 1044|    376|        }
 1045|    376|
 1046|    376|        let visitor = VecVisitor {
 1047|    376|            marker: PhantomData,
 1048|    376|        };
 1049|    376|        deserializer.deserialize_seq(visitor)
 1050|    376|    }
_RINvXsV_NtNtCs5tJLM6yUDwv_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  113|    437|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    437|            where
  115|    437|                D: Deserializer<'de>,
  116|    437|            {
  117|    437|                struct PrimitiveVisitor;
  118|    437|
  119|    437|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    437|                    type Value = $primitive;
  121|    437|
  122|    437|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    437|                        formatter.write_str(stringify!($primitive))
  124|    437|                    }
  125|    437|
  126|    437|                    $($($method!($val : $visit);)*)*
  127|    437|                }
  128|    437|
  129|    437|                deserializer.$deserialize(PrimitiveVisitor)
  130|    437|            }
_RINvXNvXsh_NtNtCs5tJLM6yUDwv_5serde2de5implsINtNtCskiapchPz3s2_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
 1032|    373|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    373|            where
 1034|    373|                A: SeqAccess<'de>,
 1035|    373|            {
 1036|    373|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  1.35k|                while let Some(value) = try!(seq.next_element()) {
 1039|    982|                    values.push(value);
 1040|    982|                }
 1041|       |
 1042|    305|                Ok(values)
 1043|    373|            }

_RINvXs3_NtCs5tJLM6yUDwv_5serde2deINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  783|    376|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    376|    where
  785|    376|        D: Deserializer<'de>,
  786|    376|    {
  787|    376|        T::deserialize(deserializer)
  788|    376|    }
_RINvYNtNtCs4IFx7jetauH_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
 1563|    671|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    671|    where
 1565|    671|        E: Error,
 1566|    671|    {
 1567|    671|        self.visit_bytes(v)
 1568|    671|    }
_RINvXs3_NtCs5tJLM6yUDwv_5serde2deINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  783|  1.46k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  1.46k|    where
  785|  1.46k|        D: Deserializer<'de>,
  786|  1.46k|    {
  787|  1.46k|        T::deserialize(deserializer)
  788|  1.46k|    }
_RINvXs3_NtCs5tJLM6yUDwv_5serde2deINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtCs4mAVrD8DtL1_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  783|    305|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    305|    where
  785|    305|        D: Deserializer<'de>,
  786|    305|    {
  787|    305|        T::deserialize(deserializer)
  788|    305|    }
_RINvYINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess12next_elementINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEECsfYPlYAe3Msi_11cbor_decode:
 1723|    376|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    376|    where
 1725|    376|        T: Deserialize<'de>,
 1726|    376|    {
 1727|    376|        self.next_element_seed(PhantomData)
 1728|    376|    }
_RINvYINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess12next_elementNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressECsfYPlYAe3Msi_11cbor_decode:
 1723|  1.77k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  1.77k|    where
 1725|  1.77k|        T: Deserialize<'de>,
 1726|  1.77k|    {
 1727|  1.77k|        self.next_element_seed(PhantomData)
 1728|  1.77k|    }
_RINvYNtNtCs4r8FFkJRi2d_3cid5serde17BytesToCidVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor14visit_byte_bufINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
 1587|      1|    fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
 1588|      1|    where
 1589|      1|        E: Error,
 1590|      1|    {
 1591|      1|        self.visit_bytes(&v)
 1592|      1|    }
_RINvXs3_NtCs5tJLM6yUDwv_5serde2deINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataINtNtCs4r8FFkJRi2d_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  783|    247|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    247|    where
  785|    247|        D: Deserializer<'de>,
  786|    247|    {
  787|    247|        T::deserialize(deserializer)
  788|    247|    }
_RINvYINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess12next_elementNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsfYPlYAe3Msi_11cbor_decode:
 1723|    262|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    262|    where
 1725|    262|        T: Deserialize<'de>,
 1726|    262|    {
 1727|    262|        self.next_element_seed(PhantomData)
 1728|    262|    }
_RINvXs3_NtCs5tJLM6yUDwv_5serde2deINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  783|    529|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    529|    where
  785|    529|        D: Deserializer<'de>,
  786|    529|    {
  787|    529|        T::deserialize(deserializer)
  788|    529|    }
_RINvYNtNtCs4r8FFkJRi2d_3cid5serde17BytesToCidVisitorNtNtCs5tJLM6yUDwv_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEECsfYPlYAe3Msi_11cbor_decode:
 1563|    222|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    222|    where
 1565|    222|        E: Error,
 1566|    222|    {
 1567|    222|        self.visit_bytes(v)
 1568|    222|    }
_RINvYINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess12next_elementNtCs4mAVrD8DtL1_17fvm_ipld_bitfield8BitFieldECsfYPlYAe3Msi_11cbor_decode:
 1723|    305|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    305|    where
 1725|    305|        T: Deserialize<'de>,
 1726|    305|    {
 1727|    305|        self.next_element_seed(PhantomData)
 1728|    305|    }
_RINvYINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsfYPlYAe3Msi_11cbor_decode:
 1723|    529|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    529|    where
 1725|    529|        T: Deserialize<'de>,
 1726|    529|    {
 1727|    529|        self.next_element_seed(PhantomData)
 1728|    529|    }
_RINvXs3_NtCs5tJLM6yUDwv_5serde2deINtNtCs6CYv2AEEwPl_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  783|    437|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    437|    where
  785|    437|        D: Deserializer<'de>,
  786|    437|    {
  787|    437|        T::deserialize(deserializer)
  788|    437|    }
_RINvYINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess12next_elementINtNtCs4r8FFkJRi2d_3cid3cid3CidKj40_EECsfYPlYAe3Msi_11cbor_decode:
 1723|    247|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    247|    where
 1725|    247|        T: Deserialize<'de>,
 1726|    247|    {
 1727|    247|        self.next_element_seed(PhantomData)
 1728|    247|    }
_RINvXs3_NtCs5tJLM6yUDwv_5serde2deINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  783|    262|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    262|    where
  785|    262|        D: Deserializer<'de>,
  786|    262|    {
  787|    262|        T::deserialize(deserializer)
  788|    262|    }
_RINvYINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess12next_elementyECsfYPlYAe3Msi_11cbor_decode:
 1723|    437|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    437|    where
 1725|    437|        T: Deserialize<'de>,
 1726|    437|    {
 1727|    437|        self.next_element_seed(PhantomData)
 1728|    437|    }

_RNvNtNtCs5tJLM6yUDwv_5serde9___private9size_hint8cautiousCsfYPlYAe3Msi_11cbor_decode:
   12|    373|pub fn cautious(hint: Option<usize>) -> usize {
   13|    373|    cmp::min(hint.unwrap_or(0), 4096)
   14|    373|}

_RINvXs1E_NtNtCs5tJLM6yUDwv_5serde3ser5implsRINtNtCs4r8FFkJRi2d_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1k_NtNtCs5tJLM6yUDwv_5serde3ser5implsINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  194|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    184|            where
  196|    184|                S: Serializer,
  197|    184|            {
  198|    184|                serializer.collect_seq(self)
  199|    184|            }
_RINvXs1E_NtNtCs5tJLM6yUDwv_5serde3ser5implsRINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1E_NtNtCs5tJLM6yUDwv_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1E_NtNtCs5tJLM6yUDwv_5serde3ser5implsRNtCs4mAVrD8DtL1_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXsE_NtNtCs5tJLM6yUDwv_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   11|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    184|            where
   13|    184|                S: Serializer,
   14|    184|            {
   15|    184|                serializer.$method(*self $($cast)*)
   16|    184|            }
_RINvXs1E_NtNtCs5tJLM6yUDwv_5serde3ser5implsRNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  386|    184|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    184|            where
  388|    184|                S: Serializer,
  389|    184|            {
  390|    184|                (**self).serialize(serializer)
  391|    184|            }
_RINvXs1E_NtNtCs5tJLM6yUDwv_5serde3ser5implsRNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  386|    406|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    406|            where
  388|    406|                S: Serializer,
  389|    406|            {
  390|    406|                (**self).serialize(serializer)
  391|    406|            }

_RINvYQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer11collect_seqRINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEECsfYPlYAe3Msi_11cbor_decode:
 1275|    184|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    184|    where
 1277|    184|        I: IntoIterator,
 1278|    184|        <I as IntoIterator>::Item: Serialize,
 1279|    184|    {
 1280|    184|        let iter = iter.into_iter();
 1281|    184|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    184|            let mut iter = iter;
 1286|    184|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    184|        serializer.end()
 1297|    184|    }
_RINvNtCs5tJLM6yUDwv_5serde3ser17iterator_len_hintINtNtNtCs6CYv2AEEwPl_4core5slice4iter4IterNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEECsfYPlYAe3Msi_11cbor_decode:
 1982|    184|    match iter.size_hint() {
 1983|    184|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    184|}
_RNCINvYQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer11collect_seqRINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEE0CsfYPlYAe3Msi_11cbor_decode:
 1286|    222|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXsc_NtCsfwgLlCfP04r_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  186|    184|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    184|    where
  188|    184|        S: Serializer,
  189|    184|    {
  190|    184|        serializer.serialize_bytes(&self.bytes)
  191|    184|    }
_RINvMNtCsfwgLlCfP04r_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCskiapchPz3s2_5alloc3vec3VechEECsfYPlYAe3Msi_11cbor_decode:
   60|    184|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    184|        ByteBuf {
   62|    184|            bytes: bytes.into(),
   63|    184|        }
   64|    184|    }

_RINvNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderECsfYPlYAe3Msi_11cbor_decode:
   26|    955|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    955|    let buf = match reader.fill(1)? {
   28|    955|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    955|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    765|    Ok(byte)
   33|    955|}

_RNCNvMs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderE8try_step0CsfYPlYAe3Msi_11cbor_decode:
  106|    917|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvMs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs4r8FFkJRi2d_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsfYPlYAe3Msi_11cbor_decode:
  113|    247|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    247|    where
  115|    247|        V: Visitor<'de>,
  116|    247|    {
  117|    247|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    239|        match tag.0 {
  120|    233|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      6|            _ => Err(DecodeError::TypeMismatch {
  122|      6|                name: "CBOR tag",
  123|      6|                byte: tag.0 as u8,
  124|      6|            }),
  125|       |        }
  126|    247|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCskiapchPz3s2_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEECsfYPlYAe3Msi_11cbor_decode:
  334|    376|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    376|    where
  336|    376|        V: Visitor<'de>,
  337|    376|    {
  338|    376|        let mut de = self.try_step()?;
  339|    376|        let seq = Accessor::array(&mut de)?;
  340|    373|        visitor.visit_seq(seq)
  341|    376|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess17next_element_seedINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataINtNtCs4r8FFkJRi2d_3cid3cid3CidKj40_EEECsfYPlYAe3Msi_11cbor_decode:
  484|    247|        if let Some(len) = self.len.as_mut() {
  485|    247|            if *len > 0 {
  486|    247|                *len -= 1;
  487|    247|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    247|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsfYPlYAe3Msi_11cbor_decode:
  344|    541|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    541|    where
  346|    541|        V: Visitor<'de>,
  347|    541|    {
  348|    541|        let mut de = self.try_step()?;
  349|    541|        let seq = Accessor::tuple(&mut de, len)?;
  350|    529|        visitor.visit_seq(seq)
  351|    541|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess17next_element_seedINtNtCs6CYv2AEEwPl_4core6marker11PhantomDatayEECsfYPlYAe3Msi_11cbor_decode:
  484|    437|        if let Some(len) = self.len.as_mut() {
  485|    437|            if *len > 0 {
  486|    437|                *len -= 1;
  487|    437|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    437|    }
_RNvMNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderE11from_readerCsfYPlYAe3Msi_11cbor_decode:
   93|    541|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    541|        Deserializer { reader }
   95|    541|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess17next_element_seedINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsfYPlYAe3Msi_11cbor_decode:
  484|    529|        if let Some(len) = self.len.as_mut() {
  485|    529|            if *len > 0 {
  486|    529|                *len -= 1;
  487|    529|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    529|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer20deserialize_byte_bufNtNtCs4IFx7jetauH_14cs_serde_bytes7bytebuf14ByteBufVisitorECsfYPlYAe3Msi_11cbor_decode:
  239|    791|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    791|    where
  241|    791|        V: Visitor<'de>,
  242|    791|    {
  243|    791|        self.deserialize_bytes(visitor)
  244|    791|    }
_RNvMs1_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderE5tupleCsfYPlYAe3Msi_11cbor_decode:
  443|    541|    pub fn tuple(
  444|    541|        de: &'a mut Deserializer<R>,
  445|    541|        len: usize,
  446|    541|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    541|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    534|        if array_start.0 == Some(len) {
  450|    529|            Ok(Accessor {
  451|    529|                de,
  452|    529|                len: array_start.0,
  453|    529|            })
  454|       |        } else {
  455|      5|            Err(DecodeError::RequireLength {
  456|      5|                name: "tuple",
  457|      5|                expect: len,
  458|      5|                value: array_start.0.unwrap_or(0),
  459|      5|            })
  460|       |        }
  461|    541|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess17next_element_seedINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtCs4mAVrD8DtL1_17fvm_ipld_bitfield8BitFieldEECsfYPlYAe3Msi_11cbor_decode:
  484|    305|        if let Some(len) = self.len.as_mut() {
  485|    305|            if *len > 0 {
  486|    305|                *len -= 1;
  487|    305|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    305|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess17next_element_seedINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEECsfYPlYAe3Msi_11cbor_decode:
  484|  1.77k|        if let Some(len) = self.len.as_mut() {
  485|  1.24k|            if *len > 0 {
  486|    942|                *len -= 1;
  487|    942|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    304|                Ok(None)
  490|       |            }
  491|    533|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|    527|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      1|            self.de.reader.advance(1);
  495|      1|            Ok(None)
  496|       |        }
  497|  1.77k|    }
_RINvNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de10from_sliceNtNtCsj58f2xVeAR5_11common_fuzz4cbor7PayloadECsfYPlYAe3Msi_11cbor_decode:
   40|    541|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    541|where
   42|    541|    T: de::Deserialize<'a>,
   43|    541|{
   44|    541|    let reader = SliceReader::new(buf);
   45|    541|    let mut deserializer = Deserializer::from_reader(reader);
   46|    541|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    189|    deserializer.end()?;
   48|    184|    Ok(value)
   49|    541|}
_RNvMs1_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderE5arrayCsfYPlYAe3Msi_11cbor_decode:
  434|    376|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    376|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    373|        Ok(Accessor {
  437|    373|            de,
  438|    373|            len: array_start.0,
  439|    373|        })
  440|    376|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsfYPlYAe3Msi_11cbor_decode:
  142|    437|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    437|        where V: Visitor<'de>
  144|    437|        {
  145|    437|            let value = <$t>::decode(&mut self.reader)?;
  146|    424|            visitor.$visit(value)
  147|    437|        }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess17next_element_seedINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsfYPlYAe3Msi_11cbor_decode:
  484|    262|        if let Some(len) = self.len.as_mut() {
  485|    262|            if *len > 0 {
  486|    262|                *len -= 1;
  487|    262|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    262|    }
_RNvMs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderE3endCsfYPlYAe3Msi_11cbor_decode:
  131|    189|        match peek_one(&mut self.reader) {
  132|      5|            Ok(_) => Err(DecodeError::TrailingData),
  133|    184|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    189|    }
_RNvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess9size_hintCsfYPlYAe3Msi_11cbor_decode:
  500|    373|    fn size_hint(&self) -> Option<usize> {
  501|    373|        self.len
  502|    373|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer17deserialize_bytesNtNtCs4IFx7jetauH_14cs_serde_bytes7bytebuf14ByteBufVisitorECsfYPlYAe3Msi_11cbor_decode:
  228|    791|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    791|    where
  230|    791|        V: Visitor<'de>,
  231|    791|    {
  232|    791|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    671|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     13|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    791|    }
_RNvMs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderE8try_stepCsfYPlYAe3Msi_11cbor_decode:
  101|    917|    fn try_step<'a>(
  102|    917|        &'a mut self,
  103|    917|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    917|    {
  105|    917|        if self.reader.step_in() {
  106|    917|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    917|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de9SeqAccess17next_element_seedINtNtCs6CYv2AEEwPl_4core6marker11PhantomDataINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEEECsfYPlYAe3Msi_11cbor_decode:
  484|    376|        if let Some(len) = self.len.as_mut() {
  485|    376|            if *len > 0 {
  486|    376|                *len -= 1;
  487|    376|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    376|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs4IFx7jetauH_14cs_serde_bytes2deINtNtCskiapchPz3s2_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsfYPlYAe3Msi_11cbor_decode:
  228|  1.77k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  1.77k|    where
  230|  1.77k|        V: Visitor<'de>,
  231|  1.77k|    {
  232|  1.77k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  1.61k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|     74|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  1.77k|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs4r8FFkJRi2d_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsfYPlYAe3Msi_11cbor_decode:
  318|    247|    fn deserialize_newtype_struct<V>(
  319|    247|        self,
  320|    247|        name: &'static str,
  321|    247|        visitor: V,
  322|    247|    ) -> Result<V::Value, Self::Error>
  323|    247|    where
  324|    247|        V: Visitor<'de>,
  325|    247|    {
  326|    247|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    247|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    247|    }
_RINvXs7_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer17deserialize_bytesNtNtCs4r8FFkJRi2d_3cid5serde17BytesToCidVisitorECsfYPlYAe3Msi_11cbor_decode:
  646|    233|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    233|        let byte = peek_one(&mut self.0.reader)?;
  648|    232|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    231|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    224|                    Cow::Borrowed(buf) => {
  653|    224|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      2|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    222|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      4|                    Cow::Owned(mut buf) => {
  660|      4|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      3|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      1|                            buf.remove(0);
  664|      1|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      1|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    233|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderENtNtCs5tJLM6yUDwv_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsfYPlYAe3Msi_11cbor_decode:
  354|    541|    fn deserialize_tuple_struct<V>(
  355|    541|        self,
  356|    541|        _name: &'static str,
  357|    541|        len: usize,
  358|    541|        visitor: V,
  359|    541|    ) -> Result<V::Value, Self::Error>
  360|    541|    where
  361|    541|        V: Visitor<'de>,
  362|    541|    {
  363|    541|        self.deserialize_tuple(len, visitor)
  364|    541|    }

_RINvXs4_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleENtNtCs5tJLM6yUDwv_5serde2de5Error6customNtNtNtCs69ZxKDRhaCe_10fvm_shared7address6errors5ErrorECsfYPlYAe3Msi_11cbor_decode:
  134|     31|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     31|        DecodeError::Msg(msg.to_string())
  136|     31|    }
_RINvXs4_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleENtNtCs5tJLM6yUDwv_5serde2de5Error6customNtNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus5error5ErrorECsfYPlYAe3Msi_11cbor_decode:
  134|     37|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     37|        DecodeError::Msg(msg.to_string())
  136|     37|    }
_RNvXs6_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleENtNtB18_3fmt7Display3fmtCsfYPlYAe3Msi_11cbor_decode:
  161|    357|    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
  162|    357|        fmt::Debug::fmt(self, f)
  163|    357|    }
_RNvXs7_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleEINtB16_4FromINtNtCs1RCcsGMxX1f_7cbor4ii5error11DecodeErrorB14_EE4fromCsfYPlYAe3Msi_11cbor_decode:
  167|    227|    fn from(err: cbor4ii::DecodeError<E>) -> DecodeError<E> {
  168|    227|        match err {
  169|      0|            cbor4ii::DecodeError::Read(read) => DecodeError::Read(read),
  170|    170|            cbor4ii::DecodeError::Eof => DecodeError::Eof,
  171|     56|            cbor4ii::DecodeError::Mismatch { expect_major, byte } => {
  172|     56|                DecodeError::Mismatch { expect_major, byte }
  173|       |            }
  174|      0|            cbor4ii::DecodeError::TypeMismatch { name, byte } => {
  175|      0|                DecodeError::TypeMismatch { name, byte }
  176|       |            }
  177|      0|            cbor4ii::DecodeError::CastOverflow(overflow) => DecodeError::CastOverflow(overflow),
  178|      0|            cbor4ii::DecodeError::Overflow { name } => DecodeError::Overflow { name },
  179|      0|            cbor4ii::DecodeError::RequireBorrowed { name } => DecodeError::RequireBorrowed { name },
  180|       |            cbor4ii::DecodeError::RequireLength {
  181|      0|                name,
  182|      0|                expect,
  183|      0|                value,
  184|      0|            } => DecodeError::RequireLength {
  185|      0|                name,
  186|      0|                expect,
  187|      0|                value,
  188|      0|            },
  189|      0|            cbor4ii::DecodeError::InvalidUtf8(invalid) => DecodeError::InvalidUtf8(invalid),
  190|      0|            cbor4ii::DecodeError::Unsupported { byte } => DecodeError::Unsupported { byte },
  191|      1|            cbor4ii::DecodeError::DepthLimit => DecodeError::DepthLimit,
  192|       |            // Needed as `cbor4ii::EncodeError` is markes as non_exhaustive
  193|      0|            _ => DecodeError::Msg(err.to_string()),
  194|       |        }
  195|    227|    }
_RNvXs9_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5errorINtB5_11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleENtNtB18_3fmt5Debug3fmtCsfYPlYAe3Msi_11cbor_decode:
   70|    357|#[derive(Debug)]
_RINvXs4_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5errorINtB6_11DecodeErrorNtNtCs6CYv2AEEwPl_4core7convert10InfallibleENtNtCs5tJLM6yUDwv_5serde2de5Error6customNtNtCskiapchPz3s2_5alloc6string6StringECsfYPlYAe3Msi_11cbor_decode:
  134|     34|    fn custom<T: fmt::Display>(msg: T) -> Self {
  135|     34|        DecodeError::Msg(msg.to_string())
  136|     34|    }

_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsfYPlYAe3Msi_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct3endCsfYPlYAe3Msi_11cbor_decode:
  408|    184|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    184|        Ok(())
  410|    184|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressECsfYPlYAe3Msi_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsfYPlYAe3Msi_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RINvNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser6to_vecNtNtCsj58f2xVeAR5_11common_fuzz4cbor7PayloadECsfYPlYAe3Msi_11cbor_decode:
   23|    184|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    184|where
   25|    184|    T: Serialize + ?Sized,
   26|    184|{
   27|    184|    let writer = BufWriter::new(Vec::new());
   28|    184|    let mut serializer = Serializer::new(writer);
   29|    184|    value.serialize(&mut serializer)?;
   30|    184|    Ok(serializer.into_inner().into_inner())
   31|    184|}
_RNvXs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer13serialize_seqCsfYPlYAe3Msi_11cbor_decode:
  226|    184|        if let Some(len) = len {
  227|    184|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    184|        Ok(Collect {
  232|    184|            bounded: len.is_some(),
  233|    184|            ser: self,
  234|    184|        })
  235|    184|    }
_RNvXs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer15serialize_bytesCsfYPlYAe3Msi_11cbor_decode:
  160|    958|        types::Bytes(v).encode(&mut self.writer)?;
  161|    958|        Ok(())
  162|    958|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs4r8FFkJRi2d_3cid3cid3CidKj40_EECsfYPlYAe3Msi_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer22serialize_tuple_structCsfYPlYAe3Msi_11cbor_decode:
  244|    184|    fn serialize_tuple_struct(
  245|    184|        self,
  246|    184|        _name: &'static str,
  247|    184|        len: usize,
  248|    184|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    184|        self.serialize_tuple(len)
  250|    184|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCskiapchPz3s2_5alloc3vec3VecNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressEECsfYPlYAe3Msi_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvMNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterE10into_innerCsfYPlYAe3Msi_11cbor_decode:
   56|    184|    pub fn into_inner(self) -> W {
   57|    184|        self.writer
   58|    184|    }
_RNvMNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterE3newCsfYPlYAe3Msi_11cbor_decode:
   51|    184|    pub fn new(writer: W) -> Serializer<W> {
   52|    184|        Serializer { writer }
   53|    184|    }
_RNvXs7_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer15serialize_bytesCsfYPlYAe3Msi_11cbor_decode:
  550|    184|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    184|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    184|        let prefixed = [&[0x00], value].concat();
  553|    184|        // CIDs are serialized with CBOR tag 42.
  554|    184|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    184|        Ok(())
  556|    184|    }
_RINvXs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer24serialize_newtype_structNtNtCsfwgLlCfP04r_11serde_bytes7bytebuf7ByteBufECsfYPlYAe3Msi_11cbor_decode:
  199|    184|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    184|        self,
  201|    184|        name: &'static str,
  202|    184|        value: &T,
  203|    184|    ) -> Result<Self::Ok, Self::Error> {
  204|    184|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    184|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    184|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsj58f2xVeAR5_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsfYPlYAe3Msi_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer13serialize_u64CsfYPlYAe3Msi_11cbor_decode:
  123|    184|        v.encode(&mut self.writer)?;
  124|    184|        Ok(())
  125|    184|    }
_RINvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser12SerializeSeq17serialize_elementRNtNtCs69ZxKDRhaCe_10fvm_shared7address7AddressECsfYPlYAe3Msi_11cbor_decode:
  369|    222|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|    222|        value.serialize(&mut *self.ser)
  371|    222|    }
_RNvXs0_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser12SerializeSeq3endCsfYPlYAe3Msi_11cbor_decode:
  374|    184|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    184|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    184|        }
  378|       |
  379|    184|        Ok(())
  380|    184|    }
_RINvXs2_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCs4mAVrD8DtL1_17fvm_ipld_bitfield8BitFieldECsfYPlYAe3Msi_11cbor_decode:
  403|    184|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    184|        value.serialize(&mut *self.ser)
  405|    184|    }
_RNvXs_NtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterENtNtCs5tJLM6yUDwv_5serde3ser10Serializer15serialize_tupleCsfYPlYAe3Msi_11cbor_decode:
  239|    184|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    184|        Ok(BoundedCollect { ser: self })
  241|    184|    }

_RNvXCsfdQHMqD3J3s_11serde_tupleINtB2_10SerializerQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEENtNtCs5tJLM6yUDwv_5serde3ser10Serializer22serialize_tuple_structCsfYPlYAe3Msi_11cbor_decode:
  158|    184|    fn serialize_tuple_struct(
  159|    184|        self,
  160|    184|        name: &'static str,
  161|    184|        len: usize,
  162|    184|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    184|        self.0.serialize_tuple_struct(name, len)
  164|    184|    }
_RINvXs_CsfdQHMqD3J3s_11serde_tupleINtB5_12DeserializerQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEENtNtCs5tJLM6yUDwv_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsfYPlYAe3Msi_11cbor_decode:
  353|    541|    fn deserialize_tuple_struct<V>(
  354|    541|        self,
  355|    541|        name: &'static str,
  356|    541|        len: usize,
  357|    541|        visitor: V,
  358|    541|    ) -> Result<V::Value, Self::Error>
  359|    541|    where
  360|    541|        V: serde::de::Visitor<'de>,
  361|    541|    {
  362|    541|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    541|    }

_RNvXNtCsgB3vszZUu1x_9thiserror7displayRjNtB2_16DisplayAsDisplay10as_displayCs69ZxKDRhaCe_10fvm_shared:
    9|      3|    fn as_display(&self) -> Self {
   10|      3|        self
   11|      3|    }

_RNvNtCs5wtbx4MMp54_15unsigned_varint6decode3u64CsfYPlYAe3Msi_11cbor_decode:
  122|    818|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    818|    decode!(buf, 9, u64)
  124|    818|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6decode7is_lastCsfYPlYAe3Msi_11cbor_decode:
   90|  3.62k|pub fn is_last(b: u8) -> bool {
   91|  3.62k|    b & 0x80 == 0
   92|  3.62k|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6decode7is_lastCs69ZxKDRhaCe_10fvm_shared:
   90|  2.48k|pub fn is_last(b: u8) -> bool {
   91|  2.48k|    b & 0x80 == 0
   92|  2.48k|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6decode3u64Cs69ZxKDRhaCe_10fvm_shared:
  122|    395|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|    395|    decode!(buf, 9, u64)
  124|    395|}

_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode3u64CsfYPlYAe3Msi_11cbor_decode:
   69|    516|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    516|    encode!(number, buf)
   71|    516|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode2u8CsfYPlYAe3Msi_11cbor_decode:
   45|    184|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    184|    encode!(number, buf)
   47|    184|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode9u8_bufferCsfYPlYAe3Msi_11cbor_decode:
  101|    184|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    184|    [0; U8_LEN]
  103|    184|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode10u64_bufferCsfYPlYAe3Msi_11cbor_decode:
  119|  1.34k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  1.34k|    [0; U64_LEN]
  121|  1.34k|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode10u64_bufferCs69ZxKDRhaCe_10fvm_shared:
  119|    146|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|    146|    [0; U64_LEN]
  121|    146|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode3u64Cs69ZxKDRhaCe_10fvm_shared:
   69|    146|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|    146|    encode!(number, buf)
   71|    146|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode3u64Cs4mAVrD8DtL1_17fvm_ipld_bitfield:
   69|  9.20k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  9.20k|    encode!(number, buf)
   71|  9.20k|}
_RNvNtCs5wtbx4MMp54_15unsigned_varint6encode10u64_bufferCs4mAVrD8DtL1_17fvm_ipld_bitfield:
  119|  9.20k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  9.20k|    [0; U64_LEN]
  121|  9.20k|}

_RINvNtCs5wtbx4MMp54_15unsigned_varint2io8read_u64QQRShECsfYPlYAe3Msi_11cbor_decode:
   31|    833|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|    833|                let mut b = encode::$b();
   33|  1.86k|                for i in 0 .. b.len() {
   34|  1.86k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.86k|                    if n == 0 {
   36|     12|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.85k|                    }
   38|  1.85k|                    if decode::is_last(b[i]) {
   39|    818|                        return Ok(decode::$t(&b[..= i])?.0)
   40|  1.03k|                    }
   41|       |                }
   42|      3|                Err(decode::Error::Overflow.into())
   43|    833|            }
_RNvXs1_NtCs5wtbx4MMp54_15unsigned_varint2ioNtB5_9ReadErrorINtNtCs6CYv2AEEwPl_4core7convert4FromNtNtB7_6decode5ErrorE4from:
   91|      8|    fn from(e: decode::Error) -> Self {
   92|      8|        ReadError::Decode(e)
   93|      8|    }

_RNvMs5_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    184|    pub fn new(a: A, b: B) -> Self {
  298|    184|        Self(Merge::new(_Combine::new(a, b)))
  299|    184|    }
_RNvMs8_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  7.53k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.53k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  7.34k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    184|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.34k|        if advance_lhs {
  370|  7.34k|            self.lhs.next();
  371|  7.34k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  7.34k|        range
  376|  7.53k|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNvXs9_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.53k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.53k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.53k|    }
_RNvMsa_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    184|    pub fn new(iter: I) -> Self {
  425|    184|        Self {
  426|    184|            iter: Lookahead::new(iter),
  427|    184|        }
  428|    184|    }
_RNvXsb_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.53k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  7.34k|        while let Some(next) = self.iter.peek() {
  443|  7.16k|            if next.start > range.end {
  444|  7.16k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  7.34k|        Some(range)
  452|  7.53k|    }
_RNvMsa_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    184|    pub fn new(iter: I) -> Self {
  425|    184|        Self {
  426|    184|            iter: Lookahead::new(iter),
  427|    184|        }
  428|    184|    }
_RNvMs5_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    184|    pub fn new(a: A, b: B) -> Self {
  298|    184|        Self(Merge::new(_Combine::new(a, b)))
  299|    184|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|    368|    fn new(mut iter: I) -> Self {
  468|    368|        let next = iter.next();
  469|    368|        Self { iter, next }
  470|    368|    }
_RNvXs9_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.53k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.53k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.53k|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNCNvXs9_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  7.53k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.53k|        self.0.next()
  312|  7.53k|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.53k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.53k|        self.next.as_mut()
  474|  7.53k|    }
_RNvMs8_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    184|    fn new(lhs: A, rhs: B) -> Self {
  343|    184|        Self {
  344|    184|            lhs: Lookahead::new(lhs),
  345|    184|            rhs: Lookahead::new(rhs),
  346|    184|            combinator: Default::default(),
  347|    184|        }
  348|    184|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  15.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  15.0k|        self.next.as_mut()
  474|  15.0k|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  7.34k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.34k|        self.next.as_mut()
  474|  7.34k|    }
_RNvXsh_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs6CYv2AEEwPl_4core7default7Default7defaultB9_:
  151|    184|#[derive(Default)]
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  7.53k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.53k|        self.next.as_mut()
  474|  7.53k|    }
_RNCNvXs9_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  7.34k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.34k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.34k|        self.next.as_mut()
  474|  7.34k|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNvXse_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.53k|        let next = self.next.take()?;
  483|  7.34k|        self.next = self.iter.next();
  484|  7.34k|        Some(next)
  485|  7.53k|    }
_RNvMs8_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    184|    fn new(lhs: A, rhs: B) -> Self {
  343|    184|        Self {
  344|    184|            lhs: Lookahead::new(lhs),
  345|    184|            rhs: Lookahead::new(rhs),
  346|    184|            combinator: Default::default(),
  347|    184|        }
  348|    184|    }
_RNCNvXs9_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  7.34k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.53k|        self.0.next()
  312|  7.53k|    }
_RNvMsd_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    184|    fn new(mut iter: I) -> Self {
  468|    184|        let next = iter.next();
  469|    184|        Self { iter, next }
  470|    184|    }
_RNvXse_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.53k|        let next = self.next.take()?;
  483|  7.34k|        self.next = self.iter.next();
  484|  7.34k|        Some(next)
  485|  7.53k|    }
_RNvXs0_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  7.34k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  7.34k|        // the difference between a range and an empty range is just that range
  183|  7.34k|        Some(lhs)
  184|  7.34k|    }
_RNvXse_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  7.34k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.34k|        let next = self.next.take()?;
  483|  7.34k|        self.next = self.iter.next();
  484|  7.34k|        Some(next)
  485|  7.34k|    }
_RNCNvXs9_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  7.53k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  7.53k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.53k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  7.34k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    184|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.34k|        if advance_lhs {
  370|  7.34k|            self.lhs.next();
  371|  7.34k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  7.34k|        range
  376|  7.53k|    }
_RNvXNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  7.34k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  7.34k|        // the union of a range and an empty range is just that range
  111|  7.34k|        Some(lhs)
  112|  7.34k|    }
_RNvXse_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  7.34k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.34k|        let next = self.next.take()?;
  483|  7.34k|        self.next = self.iter.next();
  484|  7.34k|        Some(next)
  485|  7.34k|    }
_RNvXsf_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs6CYv2AEEwPl_4core7default7Default7defaultB9_:
   86|    184|#[derive(Default)]
_RNvXsb_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.53k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  7.34k|        while let Some(next) = self.iter.peek() {
  443|  7.16k|            if next.start > range.end {
  444|  7.16k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  7.34k|        Some(range)
  452|  7.53k|    }

_RINvYINtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    184|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    184|        Combine::new(self, other)
   23|    184|    }
_RINvMs2_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|    368|    pub fn new<II>(iter: II) -> Self
  140|    368|    where
  141|    368|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    368|    {
  143|    368|        Self(iter.into_iter())
  144|    368|    }
_RNvXs3_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  7.53k|    fn next(&mut self) -> Option<Self::Item> {
  154|  7.53k|        self.0.next()
  155|  7.53k|    }
_RINvYINtNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    184|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    184|        Combine::new(self, other)
   33|    184|    }
_RINvMs2_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    184|    pub fn new<II>(iter: II) -> Self
  140|    184|    where
  141|    184|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    184|    {
  143|    184|        Self(iter.into_iter())
  144|    184|    }
_RNCINvNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0B6_:
  166|    368|    Ranges::new(iter::from_fn(move || {
  167|    368|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|    368|    }))
_RNvXs3_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs6CYv2AEEwPl_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|    368|    fn next(&mut self) -> Option<Self::Item> {
  154|    368|        self.0.next()
  155|    368|    }
_RINvNtCs4mAVrD8DtL1_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs6CYv2AEEwPl_4core4iter8adapters6copied6CopiedINtNtNtNtCskiapchPz3s2_5alloc11collections5btree3set4IteryEEEB4_:
  163|    368|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|    368|    let mut iter = bits.into_iter().peekable();
  165|    368|
  166|    368|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|    368|    }))
  180|    368|}

_RNvXsi_Cs4mAVrD8DtL1_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs6CYv2AEEwPl_4core7default7Default7defaultB5_:
   42|    262|#[derive(Debug, Default, Clone)]
_RNvMs4_Cs4mAVrD8DtL1_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    184|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    184|        self.inner_ranges()
  287|    184|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    184|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    184|    }
_RNvMs4_Cs4mAVrD8DtL1_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    184|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    184|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    184|    }

_RNvXNtCs4mAVrD8DtL1_17fvm_ipld_bitfield5rangeINtNtNtCs6CYv2AEEwPl_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  7.34k|    fn size(&self) -> Self::Idx {
   15|  7.34k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  7.34k|            self.end - self.start
   19|       |        }
   20|  7.34k|    }

_RNvXs5_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus5errorNtB5_5ErrorNtNtCs6CYv2AEEwPl_4core3fmt7Display3fmt:
    3|     37|#[derive(PartialEq, Eq, Clone, Debug, Error)]

_RINvXNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   81|    184|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    184|    where
   83|    184|        S: Serializer,
   84|    184|    {
   85|    184|        let bytes = self.to_bytes();
   86|    184|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    184|        }
   92|    184|        serde_bytes::serialize(&bytes, serializer)
   93|    184|    }
_RINvXs_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   97|    305|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    305|    where
   99|    305|        D: Deserializer<'de>,
  100|    305|    {
  101|    305|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    299|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    299|        }
  108|    299|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    305|    }
_RNvMs1_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    184|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    184|        let mut iter = self.ranges();
  201|       |
  202|    184|        let first_range = match iter.next() {
  203|    178|            Some(range) => range,
  204|      6|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    178|        let mut writer = BitWriter::new();
  208|    178|        writer.write(0, 2); // version 00
  209|    178|
  210|    178|        if first_range.start == 0 {
  211|    100|            writer.write(1, 1); // the first bit is a 1
  212|    100|        } else {
  213|     78|            writer.write(0, 1); // the first bit is a 0
  214|     78|            writer.write_len(first_range.start); // the number of leading 0s
  215|     78|        }
  216|       |
  217|    178|        writer.write_len(first_range.size());
  218|    178|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  7.34k|        for range in iter {
  223|  7.16k|            writer.write_len(range.start - index); // zeros
  224|  7.16k|            writer.write_len(range.size()); // ones
  225|  7.16k|            index = range.end;
  226|  7.16k|        }
  227|       |
  228|    178|        writer.finish()
  229|    184|    }
_RNvMs1_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    299|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    299|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    298|        let version = reader.read(2);
  160|    298|        if version != 0 {
  161|      1|            return Err(Error::UnsupportedVersion);
  162|    297|        }
  163|    297|
  164|    297|        let mut next_value = reader.read(1) == 1;
  165|    297|        let mut ranges = Vec::new();
  166|    297|        let mut index = 0u64;
  167|    297|        let mut total_len: u64 = 0;
  168|       |
  169|  23.0k|        while let Some(len) = reader.read_len()? {
  170|  22.7k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  22.7k|            if ovf {
  172|      1|                return Err(Error::RLEOverflow);
  173|  22.7k|            }
  174|  22.7k|            total_len = new_total_len;
  175|  22.7k|            let start = index;
  176|  22.7k|            index += len;
  177|  22.7k|            let end = index;
  178|  22.7k|
  179|  22.7k|            if next_value {
  180|  11.4k|                ranges.push(start..end);
  181|  11.4k|            }
  182|       |
  183|  22.7k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    268|        if next_value {
  189|      6|            return Err(Error::NotMinimal);
  190|    262|        }
  191|    262|
  192|    262|        Ok(Self {
  193|    262|            ranges,
  194|    262|            ..Default::default()
  195|    262|        })
  196|    299|    }

_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  23.0k|    pub fn has_more(&self) -> bool {
  153|  23.0k|        self.bits != 0 || !self.bytes.is_empty()
  154|  23.0k|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  82.7k|    pub fn drop(&mut self, num_bits: u32) {
   61|  82.7k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  82.7k|        self.bits >>= num_bits;
   65|  82.7k|        self.num_bits -= num_bits;
   66|  82.7k|
   67|  82.7k|        // not sure why this being outside of the if improves the performance
   68|  82.7k|        // bit it does, probably related to keeping caches warm
   69|  82.7k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  82.7k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  82.7k|
   72|  82.7k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  82.7k|        if self.num_bits < 8 {
   74|  65.1k|            self.num_bits += 8;
   75|  65.1k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  65.1k|        }
   77|  82.7k|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    299|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    299|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    299|        // data.
   28|    299|        if bytes.last() == Some(&0) {
   29|      1|            return Err(Error::NotMinimal);
   30|    298|        }
   31|    298|        let mut bits = 0u64;
   32|    894|        for i in 0..2 {
   33|    596|            let byte = bytes.get(i).unwrap_or(&0);
   34|    596|            bits |= (*byte as u64) << (8 * i);
   35|    596|        }
   36|       |
   37|    298|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    298|
   39|    298|        Ok(Self {
   40|    298|            bytes,
   41|    298|            bits,
   42|    298|            num_bits: 16,
   43|    298|        })
   44|    299|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  11.8k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  11.8k|        let mut len = 0u64;
   94|       |
   95|  59.3k|        for i in 0..VARINT_MAX_BYTES {
   96|  59.3k|            let byte = self.read(8);
   97|  59.3k|
   98|  59.3k|            // strip off the most significant bit and add
   99|  59.3k|            // it to the output
  100|  59.3k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  59.3k|
  102|  59.3k|            // if the most significant bit is a 0, we've
  103|  59.3k|            // reached the end of the varint
  104|  59.3k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  11.8k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      5|                    break;
  109|  11.8k|                }
  110|  11.8k|                return Ok(len);
  111|  47.4k|            }
  112|       |        }
  113|       |
  114|      7|        Err(Error::InvalidVarint)
  115|  11.8k|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  59.9k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  59.9k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  59.9k|        let res = self.peek(num_bits);
   85|  59.9k|        self.drop(num_bits);
   86|  59.9k|
   87|  59.9k|        res
   88|  59.9k|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  23.0k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  23.0k|        // We're done.
  120|  23.0k|        if !self.has_more() {
  121|    268|            return Ok(None);
  122|  22.8k|        }
  123|  22.8k|
  124|  22.8k|        let peek6 = self.peek(6);
  125|       |
  126|  22.8k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|  8.51k|            self.drop(1);
  129|  8.51k|            1
  130|  14.2k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  2.43k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  2.43k|            self.drop(6);
  134|  2.43k|            if val < 2 {
  135|     10|                return Err(Error::NotMinimal);
  136|  2.42k|            }
  137|  2.42k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  11.8k|            self.drop(2);
  141|  11.8k|            let val = self.read_varint()?;
  142|  11.8k|            if val < 16 {
  143|     11|                return Err(Error::NotMinimal);
  144|  11.8k|            }
  145|  11.8k|            val
  146|       |        };
  147|       |
  148|  22.7k|        Ok(Some(len))
  149|  23.0k|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  82.7k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  82.7k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  82.7k|        let mask = (1 << num_bits) - 1;
   55|  82.7k|        (self.bits & mask) as u8
   56|  82.7k|    }

_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  14.5k|    pub fn write_len(&mut self, len: u64) {
   39|  14.5k|        debug_assert!(len > 0);
   40|       |
   41|  14.5k|        if len == 1 {
   42|  4.00k|            // Block Single (prefix 1)
   43|  4.00k|            self.write(1, 1);
   44|  10.5k|        } else if len < 16 {
   45|  1.38k|            // Block Short (prefix 01)
   46|  1.38k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  1.38k|            self.write(len as u8, 4);
   48|  1.38k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  9.20k|            self.write(0, 2);
   51|  9.20k|
   52|  9.20k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  46.5k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  46.5k|                self.write(byte, 8);
   55|  46.5k|            }
   56|       |        }
   57|  14.5k|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    178|    pub fn finish(mut self) -> Vec<u8> {
   61|    178|        if self.bits > 0 {
   62|     76|            self.bytes.push(self.bits as u8);
   63|    102|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    178|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    178|        self.bytes
   71|    178|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  62.8k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  62.8k|        debug_assert!(num_bits <= 8);
   24|  62.8k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  62.8k|        self.bits |= (byte as u16) << self.num_bits;
   27|  62.8k|        self.num_bits += num_bits;
   28|  62.8k|
   29|  62.8k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  62.8k|        if self.num_bits >= 8 {
   31|  50.3k|            self.bytes.push(self.bits as u8);
   32|  50.3k|            self.bits >>= 8;
   33|  50.3k|            self.num_bits -= 8;
   34|  50.3k|        }
   35|  62.8k|    }
_RNvMNtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    178|    pub fn new() -> Self {
   18|    178|        Default::default()
   19|    178|    }
_RNvXs_NtNtCs4mAVrD8DtL1_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs6CYv2AEEwPl_4core7default7Default7defaultB8_:
    4|    178|#[derive(Default, Clone, Debug)]

_RINvXNvNtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   35|    184|#[derive(Debug, Serialize)]
_RINvXs4_NtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   93|    262|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    262|    where
   95|    262|        D: Deserializer<'de>,
   96|    262|    {
   97|    262|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    247|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    247|        }
  104|    247|        Ok(Self::Unvalidated(bytes))
  105|    262|    }
_RINvXNvXNvNtCs4mAVrD8DtL1_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   35|    184|#[derive(Debug, Serialize)]

_RNvXNtCs7Tv0YSsEZHz_17fvm_ipld_encoding6errorsNtB2_5ErrorINtNtCs6CYv2AEEwPl_4core7convert4FromINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor5error11DecodeErrorNtBW_10InfallibleEE4fromCsfYPlYAe3Msi_11cbor_decode:
   22|    357|    fn from(err: DecodeError<T>) -> Self {
   23|    357|        Self {
   24|    357|            description: err.to_string(),
   25|    357|            protocol: CodecProtocol::Cbor,
   26|    357|        }
   27|    357|    }

_RINvCs7Tv0YSsEZHz_17fvm_ipld_encoding6to_vecNtNtCsj58f2xVeAR5_11common_fuzz4cbor7PayloadECsfYPlYAe3Msi_11cbor_decode:
   33|    184|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    184|where
   35|    184|    T: ser::Serialize + ?Sized,
   36|    184|{
   37|    184|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    184|}
_RINvCs7Tv0YSsEZHz_17fvm_ipld_encoding10from_sliceNtNtCsj58f2xVeAR5_11common_fuzz4cbor7PayloadECsfYPlYAe3Msi_11cbor_decode:
   50|    541|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    541|where
   52|    541|    T: de::Deserialize<'a>,
   53|    541|{
   54|    541|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    541|}

_RNvXs5_NtNtCs69ZxKDRhaCe_10fvm_shared7address6errorsNtB5_5ErrorNtNtCs6CYv2AEEwPl_4core3fmt7Display3fmt:
   13|     31|#[derive(Debug, PartialEq, Error)]
_RNvXs0_NtNtCs69ZxKDRhaCe_10fvm_shared7address6errorsNtB5_5ErrorINtNtCs6CYv2AEEwPl_4core7convert4FromNtNtCs5wtbx4MMp54_15unsigned_varint6decode5ErrorE4from:
   49|     13|    fn from(_: VarintError) -> Error {
   50|     13|        Error::InvalidPayload
   51|     13|    }

_RINvXs3_NtCs69ZxKDRhaCe_10fvm_shared7addressNtB6_7AddressNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
  274|  1.46k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  1.46k|    where
  276|  1.46k|        D: Deserializer<'de>,
  277|  1.46k|    {
  278|  1.46k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  1.38k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  1.46k|    }
_RINvXs2_NtCs69ZxKDRhaCe_10fvm_shared7addressNtB6_7AddressNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
  264|    406|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|    406|    where
  266|    406|        S: Serializer,
  267|    406|    {
  268|    406|        let address_bytes = self.to_bytes();
  269|    406|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|    406|    }
_RNvMs_NtCs69ZxKDRhaCe_10fvm_shared7addressNtB4_7Address3new:
   78|  1.37k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  1.37k|        Ok(Self {
   80|  1.37k|            network,
   81|  1.37k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  1.37k|    }
_RNvNtCs69ZxKDRhaCe_10fvm_shared7address12to_leb_bytes:
  310|    146|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|    146|    // write id to buffer in leb128 format
  312|    146|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|    146|}
_RNvMs_NtCs69ZxKDRhaCe_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|    406|    pub fn to_bytes(self) -> Vec<u8> {
  177|    406|        self.payload.to_bytes()
  178|    406|    }
_RNvNtCs69ZxKDRhaCe_10fvm_shared7address14from_leb_bytes:
  315|    395|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|    395|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|    382|    if !remaining.is_empty() {
  319|      5|        return Err(Error::InvalidPayload);
  320|    377|    }
  321|    377|    Ok(id)
  322|    395|}
_RNvMs_NtCs69ZxKDRhaCe_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  1.38k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  1.38k|        if bz.len() < 2 {
   88|      9|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  1.38k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  1.37k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  1.38k|    }

_RNCNvMNtNtCs69ZxKDRhaCe_10fvm_shared7address7payloadNtB4_7Payload3new0B8_:
   57|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvXs_NtNtCs69ZxKDRhaCe_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCs6CYv2AEEwPl_4core7convert4FromNtB4_7PayloadE4from:
   75|    406|    fn from(pl: Payload) -> Self {
   76|    406|        match pl {
   77|    146|            Payload::ID(_) => Self::ID,
   78|     88|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|     78|            Payload::Actor(_) => Self::Actor,
   80|     94|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|    406|    }
_RNCNvMNtNtCs69ZxKDRhaCe_10fvm_shared7address7payloadNtB4_7Payload3news0_0B8_:
   67|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNCNvMNtNtCs69ZxKDRhaCe_10fvm_shared7address7payloadNtB4_7Payload3news_0B8_:
   62|      1|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
_RNvMNtNtCs69ZxKDRhaCe_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|    406|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|    406|        let mut bz = match self {
   40|    146|            ID(i) => to_leb_bytes(i).unwrap(),
   41|     88|            Secp256k1(arr) => arr.to_vec(),
   42|     78|            Actor(arr) => arr.to_vec(),
   43|     94|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|    406|        bz.insert(0, Protocol::from(self) as u8);
   47|    406|        bz
   48|    406|    }
_RNvMNtNtCs69ZxKDRhaCe_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  1.37k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  1.37k|        let payload = match protocol {
   53|    395|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    273|                payload
   56|    273|                    .try_into()
   57|    273|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    456|                payload
   61|    456|                    .try_into()
   62|    456|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    255|                payload
   66|    255|                    .try_into()
   67|    255|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  1.35k|        Ok(payload)
   71|  1.37k|    }

_RNvXNvNtNtCs69ZxKDRhaCe_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsebO9pH15eAA_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  1.38k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs69ZxKDRhaCe_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsebO9pH15eAA_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  1.38k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCs69ZxKDRhaCe_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  1.38k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  1.38k|        FromPrimitive::from_u8(b)
   28|  1.38k|    }

_RINvXs_NtCsj58f2xVeAR5_11common_fuzz4cborNtB5_7PayloadNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   10|    184|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsj58f2xVeAR5_11common_fuzz4cborNtBa_7PayloadNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCsfdQHMqD3J3s_11serde_tuple10SerializerQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEEECsfYPlYAe3Msi_11cbor_decode:
   10|    184|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCsj58f2xVeAR5_11common_fuzz4cborNtBd_7PayloadNtNtCs5tJLM6yUDwv_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils9BufWriterEECsfYPlYAe3Msi_11cbor_decode:
   10|    184|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtBe_7PayloadNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   10|    529|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtBd_7PayloadNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEE0CsfYPlYAe3Msi_11cbor_decode:
   10|    437|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB3_7PayloadNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserializeQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   10|    893|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtB8_7PayloadNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCsfdQHMqD3J3s_11serde_tuple12DeserializerQINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEEECsfYPlYAe3Msi_11cbor_decode:
   10|    541|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCsj58f2xVeAR5_11common_fuzz4cborNtBb_7PayloadNtNtCs5tJLM6yUDwv_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsfTnaJnKhQ9C_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1RCcsGMxX1f_7cbor4ii4core5utils11SliceReaderEECsfYPlYAe3Msi_11cbor_decode:
   10|     92|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

