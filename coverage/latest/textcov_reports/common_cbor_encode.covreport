_RNvXsC_CsjBcml9vA1Kd_9arbitraryhNtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  302|  36.4k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  36.4k|                    let n = mem::size_of::<$ty>();
  304|  36.4k|                    (n, Some(n))
  305|  36.4k|                }
_RNvXsa_CsjBcml9vA1Kd_9arbitraryINtNtCs343odjcBp0F_5alloc3vec3VechENtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  690|    388|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    388|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    388|    }
_RINvCsjBcml9vA1Kd_9arbitrary12create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9size_hint0TjINtNtCsgn2LvMKFZQq_4core6option6OptionjEEKBR_ECszSBfr06AIl_11cbor_encode:
  596|    776|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    776|where
  598|    776|    F: FnMut(usize) -> T,
  599|    776|{
  600|    776|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    776|    let array_ptr = array.as_mut_ptr();
  602|    776|    let dst = array_ptr as _;
  603|    776|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    776|        dst,
  605|    776|        initialized: 0,
  606|    776|    };
  607|       |    unsafe {
  608|  15.5k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  15.5k|            core::ptr::write(value_ptr, cb(idx));
  610|  15.5k|            guard.initialized += 1;
  611|  15.5k|        }
  612|    776|        mem::forget(guard);
  613|    776|        array.assume_init()
  614|    776|    }
  615|    776|}
_RNCNvXs8_CsjBcml9vA1Kd_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
  658|  15.5k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  15.5k|            <T as Arbitrary>::size_hint(d)
  660|  15.5k|        }))
_RINvCsjBcml9vA1Kd_9arbitrary12create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9size_hint0TjINtNtCsgn2LvMKFZQq_4core6option6OptionjEEKBR_ECszSBfr06AIl_11cbor_encode:
  596|    388|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    388|where
  598|    388|    F: FnMut(usize) -> T,
  599|    388|{
  600|    388|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    388|    let array_ptr = array.as_mut_ptr();
  602|    388|    let dst = array_ptr as _;
  603|    388|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    388|        dst,
  605|    388|        initialized: 0,
  606|    388|    };
  607|       |    unsafe {
  608|  18.6k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  18.6k|            core::ptr::write(value_ptr, cb(idx));
  610|  18.6k|            guard.initialized += 1;
  611|  18.6k|        }
  612|    388|        mem::forget(guard);
  613|    388|        array.assume_init()
  614|    388|    }
  615|    388|}
_RNCNvXs8_CsjBcml9vA1Kd_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
  658|  1.16k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  1.16k|            <T as Arbitrary>::size_hint(d)
  660|  1.16k|        }))
_RNvXs8_CsjBcml9vA1Kd_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  657|    388|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    388|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    388|        }))
  661|    388|    }
_RINvCsjBcml9vA1Kd_9arbitrary12create_arrayNCNvXs8_B2_Ahj2_NtB2_9Arbitrary9size_hint0TjINtNtCsgn2LvMKFZQq_4core6option6OptionjEEKBR_ECszSBfr06AIl_11cbor_encode:
  596|    388|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    388|where
  598|    388|    F: FnMut(usize) -> T,
  599|    388|{
  600|    388|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    388|    let array_ptr = array.as_mut_ptr();
  602|    388|    let dst = array_ptr as _;
  603|    388|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    388|        dst,
  605|    388|        initialized: 0,
  606|    388|    };
  607|       |    unsafe {
  608|    776|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|    776|            core::ptr::write(value_ptr, cb(idx));
  610|    776|            guard.initialized += 1;
  611|    776|        }
  612|    388|        mem::forget(guard);
  613|    388|        array.assume_init()
  614|    388|    }
  615|    388|}
_RNCNvXs8_CsjBcml9vA1Kd_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
  658|    776|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|    776|            <T as Arbitrary>::size_hint(d)
  660|    776|        }))
_RNvXs8_CsjBcml9vA1Kd_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  657|    388|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    388|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    388|        }))
  661|    388|    }
_RNCNvXs8_CsjBcml9vA1Kd_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
  658|  18.6k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  18.6k|            <T as Arbitrary>::size_hint(d)
  660|  18.6k|        }))
_RNvXsH_CsjBcml9vA1Kd_9arbitraryjNtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  302|    776|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    776|                    let n = mem::size_of::<$ty>();
  304|    776|                    (n, Some(n))
  305|    776|                }
_RNvXsa_CsjBcml9vA1Kd_9arbitraryINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  690|    388|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    388|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    388|    }
_RNvXsE_CsjBcml9vA1Kd_9arbitrarymNtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  302|    776|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    776|                    let n = mem::size_of::<$ty>();
  304|    776|                    (n, Some(n))
  305|    776|                }
_RNvXsF_CsjBcml9vA1Kd_9arbitraryyNtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  302|    776|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    776|                    let n = mem::size_of::<$ty>();
  304|    776|                    (n, Some(n))
  305|    776|                }
_RNvXs8_CsjBcml9vA1Kd_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  657|    388|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    388|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    388|        }))
  661|    388|    }
_RNvXs8_CsjBcml9vA1Kd_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
  657|    776|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    776|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    776|        }))
  661|    776|    }
_RINvCsjBcml9vA1Kd_9arbitrary12create_arrayNCNvXs8_B2_Ahj3_NtB2_9Arbitrary9size_hint0TjINtNtCsgn2LvMKFZQq_4core6option6OptionjEEKBR_ECszSBfr06AIl_11cbor_encode:
  596|    388|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    388|where
  598|    388|    F: FnMut(usize) -> T,
  599|    388|{
  600|    388|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    388|    let array_ptr = array.as_mut_ptr();
  602|    388|    let dst = array_ptr as _;
  603|    388|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    388|        dst,
  605|    388|        initialized: 0,
  606|    388|    };
  607|       |    unsafe {
  608|  1.16k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  1.16k|            core::ptr::write(value_ptr, cb(idx));
  610|  1.16k|            guard.initialized += 1;
  611|  1.16k|        }
  612|    388|        mem::forget(guard);
  613|    388|        array.assume_init()
  614|    388|    }
  615|    388|}
_RNvYINtNtCslD4YlW8dPJX_3cid3cid3CidKj40_ENtCsjBcml9vA1Kd_9arbitrary9Arbitrary19arbitrary_take_restCs4CKPQBR6N6O_11common_fuzz:
  182|    347|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    347|        Self::arbitrary(&mut u)
  184|    347|    }
_RNvXsa_CsjBcml9vA1Kd_9arbitraryINtNtCs343odjcBp0F_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCs4CKPQBR6N6O_11common_fuzz:
  682|    387|        u.arbitrary_iter()?.collect()
  683|    387|    }
_RNvXsa_CsjBcml9vA1Kd_9arbitraryINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCs4CKPQBR6N6O_11common_fuzz:
  682|    387|        u.arbitrary_iter()?.collect()
  683|    387|    }
_RNCNvXs8_CsjBcml9vA1Kd_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Cs9ff7F6wMzAG_10fvm_shared:
  644|  23.1k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs8_CsjBcml9vA1Kd_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCs9ff7F6wMzAG_10fvm_shared:
  643|  1.15k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|  1.15k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|  1.15k|    }
_RNvXs8_CsjBcml9vA1Kd_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCs9ff7F6wMzAG_10fvm_shared:
  643|    364|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    364|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    364|    }
_RINvCsjBcml9vA1Kd_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECs9ff7F6wMzAG_10fvm_shared:
  617|  1.15k|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|  1.15k|where
  619|  1.15k|    F: FnMut(usize) -> Result<T>,
  620|  1.15k|{
  621|  1.15k|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|  1.15k|    let array_ptr = array.as_mut_ptr();
  623|  1.15k|    let dst = array_ptr as _;
  624|  1.15k|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|  1.15k|        dst,
  626|  1.15k|        initialized: 0,
  627|  1.15k|    };
  628|       |    unsafe {
  629|  23.1k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  23.1k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  23.1k|            guard.initialized += 1;
  632|       |        }
  633|  1.15k|        mem::forget(guard);
  634|  1.15k|        Ok(array.assume_init())
  635|       |    }
  636|  1.15k|}
_RINvCsjBcml9vA1Kd_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECs9ff7F6wMzAG_10fvm_shared:
  617|    364|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    364|where
  619|    364|    F: FnMut(usize) -> Result<T>,
  620|    364|{
  621|    364|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    364|    let array_ptr = array.as_mut_ptr();
  623|    364|    let dst = array_ptr as _;
  624|    364|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    364|        dst,
  626|    364|        initialized: 0,
  627|    364|    };
  628|       |    unsafe {
  629|  17.4k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  17.4k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  17.4k|            guard.initialized += 1;
  632|       |        }
  633|    364|        mem::forget(guard);
  634|    364|        Ok(array.assume_init())
  635|       |    }
  636|    364|}
_RNCNvXs8_CsjBcml9vA1Kd_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Cs9ff7F6wMzAG_10fvm_shared:
  644|  17.4k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXsC_CsjBcml9vA1Kd_9arbitraryhNtB5_9Arbitrary9size_hintCsdDqph7764Ox_17fvm_ipld_bitfield:
  302|    774|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    774|                    let n = mem::size_of::<$ty>();
  304|    774|                    (n, Some(n))
  305|    774|                }
_RNvXsF_CsjBcml9vA1Kd_9arbitraryyNtB5_9Arbitrary9size_hintCsdDqph7764Ox_17fvm_ipld_bitfield:
  302|    774|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    774|                    let n = mem::size_of::<$ty>();
  304|    774|                    (n, Some(n))
  305|    774|                }
_RNvXsH_CsjBcml9vA1Kd_9arbitraryjNtB5_9Arbitrary9size_hintCsdDqph7764Ox_17fvm_ipld_bitfield:
  302|    776|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    776|                    let n = mem::size_of::<$ty>();
  304|    776|                    (n, Some(n))
  305|    776|                }
_RNvXs1j_CsjBcml9vA1Kd_9arbitraryTyhENtB6_9Arbitrary9size_hintCsdDqph7764Ox_17fvm_ipld_bitfield:
  568|    774|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|    774|                crate::size_hint::and_all(&[
  570|    774|                    <$last as Arbitrary>::size_hint(depth),
  571|    774|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|    774|                ])
  573|    774|            }
_RNvXsF_CsjBcml9vA1Kd_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  10.7k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  10.7k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  10.7k|                    u.fill_buffer(&mut buf)?;
  294|  10.7k|                    let mut x: $unsigned = 0;
  295|  85.7k|                    for i in 0..mem::size_of::<$ty>() {
  296|  85.7k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  85.7k|                    }
  298|  10.7k|                    Ok(x as $ty)
  299|  10.7k|                }
_RNvXsE_CsjBcml9vA1Kd_9arbitrarymNtB5_9Arbitrary9arbitrary:
  291|  7.27k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  7.27k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  7.27k|                    u.fill_buffer(&mut buf)?;
  294|  7.27k|                    let mut x: $unsigned = 0;
  295|  29.0k|                    for i in 0..mem::size_of::<$ty>() {
  296|  29.0k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  29.0k|                    }
  298|  7.27k|                    Ok(x as $ty)
  299|  7.27k|                }
_RNvXsC_CsjBcml9vA1Kd_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  53.6k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  53.6k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  53.6k|                    u.fill_buffer(&mut buf)?;
  294|  53.6k|                    let mut x: $unsigned = 0;
  295|  53.6k|                    for i in 0..mem::size_of::<$ty>() {
  296|  53.6k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  53.6k|                    }
  298|  53.6k|                    Ok(x as $ty)
  299|  53.6k|                }
_RNvXs_CsjBcml9vA1Kd_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  8.03k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  8.03k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  8.03k|    }

_RINvNtCsjBcml9vA1Kd_9arbitrary9size_hint15recursion_guardNCNvXse_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB11_7AddressNtB4_9Arbitrary9size_hint0ECszSBfr06AIl_11cbor_encode:
   12|    388|pub fn recursion_guard(
   13|    388|    depth: usize,
   14|    388|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    388|) -> (usize, Option<usize>) {
   16|    388|    const MAX_DEPTH: usize = 20;
   17|    388|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    388|        f(depth + 1)
   21|       |    }
   22|    388|}
_RNvNtCsjBcml9vA1Kd_9arbitrary9size_hint7and_allCszSBfr06AIl_11cbor_encode:
   37|  5.43k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.43k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.43k|}
_RNvNtCsjBcml9vA1Kd_9arbitrary9size_hint2orCszSBfr06AIl_11cbor_encode:
   44|  1.94k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.94k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.94k|    let upper = lhs
   47|  1.94k|        .1
   48|  1.94k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.94k|    (lower, upper)
   50|  1.94k|}
_RINvNtCsjBcml9vA1Kd_9arbitrary9size_hint15recursion_guardNCNvXs8_NtNtCs9ff7F6wMzAG_10fvm_shared7address7networkNtB11_7NetworkNtB4_9Arbitrary9size_hint0ECszSBfr06AIl_11cbor_encode:
   12|    388|pub fn recursion_guard(
   13|    388|    depth: usize,
   14|    388|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    388|) -> (usize, Option<usize>) {
   16|    388|    const MAX_DEPTH: usize = 20;
   17|    388|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    388|        f(depth + 1)
   21|       |    }
   22|    388|}
_RINvNtCsjBcml9vA1Kd_9arbitrary9size_hint15recursion_guardNCNvXs0_NtCs4CKPQBR6N6O_11common_fuzz4cborNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECszSBfr06AIl_11cbor_encode:
   12|    388|pub fn recursion_guard(
   13|    388|    depth: usize,
   14|    388|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    388|) -> (usize, Option<usize>) {
   16|    388|    const MAX_DEPTH: usize = 20;
   17|    388|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    388|        f(depth + 1)
   21|       |    }
   22|    388|}
_RNvNtCsjBcml9vA1Kd_9arbitrary9size_hint3andCszSBfr06AIl_11cbor_encode:
   26|  44.6k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  44.6k|    let lower = lhs.0 + rhs.0;
   28|  44.6k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  44.6k|    (lower, upper)
   30|  44.6k|}
_RNCNCNvNtCsjBcml9vA1Kd_9arbitrary9size_hint2or00CszSBfr06AIl_11cbor_encode:
   48|  1.94k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RINvNtCsjBcml9vA1Kd_9arbitrary9size_hint15recursion_guardNCNvXs9_NtNtCs9ff7F6wMzAG_10fvm_shared7address7payloadNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECszSBfr06AIl_11cbor_encode:
   12|    388|pub fn recursion_guard(
   13|    388|    depth: usize,
   14|    388|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    388|) -> (usize, Option<usize>) {
   16|    388|    const MAX_DEPTH: usize = 20;
   17|    388|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    388|        f(depth + 1)
   21|       |    }
   22|    388|}
_RNCNvNtCsjBcml9vA1Kd_9arbitrary9size_hint2or0CszSBfr06AIl_11cbor_encode:
   48|  1.94k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCsjBcml9vA1Kd_9arbitrary9size_hint3and0CszSBfr06AIl_11cbor_encode:
   28|  42.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCsjBcml9vA1Kd_9arbitrary9size_hint3and00CszSBfr06AIl_11cbor_encode:
   28|  41.1k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsjBcml9vA1Kd_9arbitrary9size_hint6or_allCszSBfr06AIl_11cbor_encode:
   58|    776|    if let Some(head) = hints.first().copied() {
   59|    776|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    776|}
_RNvNtCsjBcml9vA1Kd_9arbitrary9size_hint7and_allCsdDqph7764Ox_17fvm_ipld_bitfield:
   37|    774|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    774|    hints.iter().copied().fold((0, Some(0)), and)
   39|    774|}
_RNvNtCsjBcml9vA1Kd_9arbitrary9size_hint3andCsdDqph7764Ox_17fvm_ipld_bitfield:
   26|  2.71k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.71k|    let lower = lhs.0 + rhs.0;
   28|  2.71k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.71k|    (lower, upper)
   30|  2.71k|}
_RNCNCNvNtCsjBcml9vA1Kd_9arbitrary9size_hint3and00CsdDqph7764Ox_17fvm_ipld_bitfield:
   28|  1.54k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCsjBcml9vA1Kd_9arbitrary9size_hint3and0CsdDqph7764Ox_17fvm_ipld_bitfield:
   28|  2.32k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECs4CKPQBR6N6O_11common_fuzz:
  167|  1.77k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.77k|    where
  169|  1.77k|        A: Arbitrary<'a>,
  170|  1.77k|    {
  171|  1.77k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.77k|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECs4CKPQBR6N6O_11common_fuzz:
  167|  7.25k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  7.25k|    where
  169|  7.25k|        A: Arbitrary<'a>,
  170|  7.25k|    {
  171|  7.25k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  7.25k|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressECs4CKPQBR6N6O_11common_fuzz:
  534|    387|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    387|        &'b mut self,
  536|    387|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    387|        Ok(ArbitraryIter {
  538|    387|            u: &mut *self,
  539|    387|            _marker: PhantomData,
  540|    387|        })
  541|    387|    }
_RNvXs_NtCsjBcml9vA1Kd_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtNtNtNtCsgn2LvMKFZQq_4core4iter6traits8iterator8Iterator4nextCs4CKPQBR6N6O_11common_fuzz:
  666|  3.63k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  3.63k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  3.63k|        if keep_going {
  669|  3.24k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    387|            None
  672|       |        }
  673|  3.63k|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECs4CKPQBR6N6O_11common_fuzz:
  534|    387|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    387|        &'b mut self,
  536|    387|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    387|        Ok(ArbitraryIter {
  538|    387|            u: &mut *self,
  539|    387|            _marker: PhantomData,
  540|    387|        })
  541|    387|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECs4CKPQBR6N6O_11common_fuzz:
  292|    347|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    347|    where
  294|    347|        T: Int,
  295|    347|    {
  296|    347|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    341|        self.data = &self.data[bytes_consumed..];
  298|    341|        Ok(result)
  299|    347|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECs4CKPQBR6N6O_11common_fuzz:
  292|    322|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    322|    where
  294|    322|        T: Int,
  295|    322|    {
  296|    322|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    299|        self.data = &self.data[bytes_consumed..];
  298|    299|        Ok(result)
  299|    322|    }
_RNvXs_NtCsjBcml9vA1Kd_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCsgn2LvMKFZQq_4core4iter6traits8iterator8Iterator4nextCs4CKPQBR6N6O_11common_fuzz:
  666|  3.62k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  3.62k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  3.62k|        if keep_going {
  669|  3.23k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    387|            None
  672|       |        }
  673|  3.62k|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs4CKPQBR6N6O_11common_fuzz:
  301|    322|    fn int_in_range_impl<T>(
  302|    322|        range: ops::RangeInclusive<T>,
  303|    322|        mut bytes: impl Iterator<Item = u8>,
  304|    322|    ) -> Result<(T, usize)>
  305|    322|    where
  306|    322|        T: Int,
  307|    322|    {
  308|    322|        let start = range.start();
  309|    322|        let end = range.end();
  310|    322|        assert!(
  311|    322|            start <= end,
  312|    322|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    322|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    322|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    322|        }
  320|    322|
  321|    322|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    322|        let mut result = T::Widest::ZERO;
  323|    322|        let mut offset: usize = 0;
  324|       |
  325|    621|        while offset < mem::size_of::<T>()
  326|    621|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    299|        {
  328|    322|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    299|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    299|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    299|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    299|            result = result % range;
  336|    299|        }
  337|       |
  338|    299|        Ok((
  339|    299|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    299|            offset,
  341|    299|        ))
  342|    322|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECs4CKPQBR6N6O_11common_fuzz:
  411|    347|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  412|    347|    where
  413|    347|        T: Int,
  414|    347|    {
  415|    347|        assert!(T::ZERO < numerator);
  416|    347|        assert!(numerator <= denominator);
  417|    347|        let x = self.int_in_range(T::ONE..=denominator)?;
  418|    341|        Ok(x <= numerator)
  419|    347|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs4CKPQBR6N6O_11common_fuzz:
  301|    347|    fn int_in_range_impl<T>(
  302|    347|        range: ops::RangeInclusive<T>,
  303|    347|        mut bytes: impl Iterator<Item = u8>,
  304|    347|    ) -> Result<(T, usize)>
  305|    347|    where
  306|    347|        T: Int,
  307|    347|    {
  308|    347|        let start = range.start();
  309|    347|        let end = range.end();
  310|    347|        assert!(
  311|    347|            start <= end,
  312|    347|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    347|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    347|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    347|        }
  320|    347|
  321|    347|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    347|        let mut result = T::Widest::ZERO;
  323|    347|        let mut offset: usize = 0;
  324|       |
  325|    688|        while offset < mem::size_of::<T>()
  326|    688|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    341|        {
  328|    347|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    341|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    341|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    341|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    341|            result = result % range;
  336|    341|        }
  337|       |
  338|    341|        Ok((
  339|    341|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    341|            offset,
  341|    341|        ))
  342|    347|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCsch9srQypNA8_9multihash9multihash9MultihashKj40_EECs4CKPQBR6N6O_11common_fuzz:
  167|    322|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    322|    where
  169|    322|        A: Arbitrary<'a>,
  170|    322|    {
  171|    322|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    322|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured6choosebECsdDqph7764Ox_17fvm_ipld_bitfield:
  378|    387|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  379|    387|        if choices.is_empty() {
  380|      0|            return Err(Error::EmptyChoose);
  381|    387|        }
  382|    387|        let idx = self.int_in_range(0..=choices.len() - 1)?;
  383|    347|        Ok(&choices[idx])
  384|    387|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsdDqph7764Ox_17fvm_ipld_bitfield:
  213|    774|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    774|    where
  215|    774|        ElementType: Arbitrary<'a>,
  216|    774|    {
  217|    774|        let byte_size = self.arbitrary_byte_size()?;
  218|    774|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    774|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|    774|        let elem_size = std::cmp::max(1, elem_size);
  221|    774|        Ok(byte_size / elem_size)
  222|    774|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdDqph7764Ox_17fvm_ipld_bitfield:
  301|  8.21k|    fn int_in_range_impl<T>(
  302|  8.21k|        range: ops::RangeInclusive<T>,
  303|  8.21k|        mut bytes: impl Iterator<Item = u8>,
  304|  8.21k|    ) -> Result<(T, usize)>
  305|  8.21k|    where
  306|  8.21k|        T: Int,
  307|  8.21k|    {
  308|  8.21k|        let start = range.start();
  309|  8.21k|        let end = range.end();
  310|  8.21k|        assert!(
  311|  8.21k|            start <= end,
  312|  8.21k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  8.21k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  8.21k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  8.21k|        }
  320|  8.21k|
  321|  8.21k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  8.21k|        let mut result = T::Widest::ZERO;
  323|  8.21k|        let mut offset: usize = 0;
  324|       |
  325|  16.4k|        while offset < mem::size_of::<T>()
  326|  16.4k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  8.21k|        {
  328|  8.21k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  8.21k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  8.21k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  8.21k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  8.21k|            result = result % range;
  336|  8.21k|        }
  337|       |
  338|  8.21k|        Ok((
  339|  8.21k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  8.21k|            offset,
  341|  8.21k|        ))
  342|  8.21k|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsdDqph7764Ox_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    387|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    387|    where
  169|    387|        A: Arbitrary<'a>,
  170|    387|    {
  171|    387|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    387|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdDqph7764Ox_17fvm_ipld_bitfield:
  301|    387|    fn int_in_range_impl<T>(
  302|    387|        range: ops::RangeInclusive<T>,
  303|    387|        mut bytes: impl Iterator<Item = u8>,
  304|    387|    ) -> Result<(T, usize)>
  305|    387|    where
  306|    387|        T: Int,
  307|    387|    {
  308|    387|        let start = range.start();
  309|    387|        let end = range.end();
  310|    387|        assert!(
  311|    387|            start <= end,
  312|    387|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    387|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    387|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    387|        }
  320|    387|
  321|    387|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    387|        let mut result = T::Widest::ZERO;
  323|    387|        let mut offset: usize = 0;
  324|       |
  325|    734|        while offset < mem::size_of::<T>()
  326|    734|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    347|        {
  328|    387|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    347|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    347|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    347|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    347|            result = result % range;
  336|    347|        }
  337|       |
  338|    347|        Ok((
  339|    347|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    347|            offset,
  341|    347|        ))
  342|    387|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsdDqph7764Ox_17fvm_ipld_bitfield:
  292|  8.21k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  8.21k|    where
  294|  8.21k|        T: Int,
  295|  8.21k|    {
  296|  8.21k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  8.21k|        self.data = &self.data[bytes_consumed..];
  298|  8.21k|        Ok(result)
  299|  8.21k|    }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsdDqph7764Ox_17fvm_ipld_bitfield:
  292|    387|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    387|    where
  294|    387|        T: Int,
  295|    387|    {
  296|    387|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    347|        self.data = &self.data[bytes_consumed..];
  298|    347|        Ok(result)
  299|    387|    }
_RNvXs5_NtCsjBcml9vA1Kd_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.43k|                fn from_u8(b: u8) -> Self {
  777|  1.43k|                    b as Self
  778|  1.43k|                }
_RNvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    774|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    774|        if self.data.is_empty() {
  226|     76|            Ok(0)
  227|    698|        } else if self.data.len() == 1 {
  228|      2|            self.data = &[];
  229|      2|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    696|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    605|                let bytes = 1;
  241|    605|                let max_size = self.data.len() - bytes;
  242|    605|                let (rest, for_size) = self.data.split_at(max_size);
  243|    605|                self.data = rest;
  244|    605|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|     91|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|     91|                let bytes = 2;
  247|     91|                let max_size = self.data.len() - bytes;
  248|     91|                let (rest, for_size) = self.data.split_at(max_size);
  249|     91|                self.data = rest;
  250|     91|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    696|            Ok(len)
  266|       |        }
  267|    774|    }
_RNvXs1_NtCsjBcml9vA1Kd_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    605|                fn from_widest(w: Self::Widest) -> Self {
  772|    605|                    let x = <$ty>::max_value().as_widest();
  773|    605|                    (w % x) as Self
  774|    605|                }
_RNvXs2_NtCsjBcml9vA1Kd_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    364|                fn as_widest(self) -> Self::Widest {
  768|    364|                    self as $widest
  769|    364|                }
_RNvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  476|    318|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  477|    318|        if self.data.len() < size {
  478|     18|            return Err(Error::NotEnoughData);
  479|    300|        }
  480|    300|
  481|    300|        let (for_buf, rest) = self.data.split_at(size);
  482|    300|        self.data = rest;
  483|    300|        Ok(for_buf)
  484|    318|    }
_RNvXsb_NtCsjBcml9vA1Kd_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  8.56k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  8.56k|                    <$ty>::checked_add(self, rhs)
  786|  8.56k|                }
_RNvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  71.6k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  71.6k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  71.6k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  71.6k|        for byte in buffer[n..].iter_mut() {
  453|    982|            *byte = 0;
  454|    982|        }
  455|  71.6k|        self.data = &self.data[n..];
  456|  71.6k|        Ok(())
  457|  71.6k|    }
_RNvXs6_NtCsjBcml9vA1Kd_9arbitrary12unstructuredjNtB5_3Int9as_widest:
  767|  2.71k|                fn as_widest(self) -> Self::Widest {
  768|  2.71k|                    self as $widest
  769|  2.71k|                }
_RNvXs9_NtCsjBcml9vA1Kd_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  8.56k|                fn from_widest(w: Self::Widest) -> Self {
  772|  8.56k|                    let x = <$ty>::max_value().as_widest();
  773|  8.56k|                    (w % x) as Self
  774|  8.56k|                }
_RNvXs9_NtCsjBcml9vA1Kd_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  34.2k|                fn as_widest(self) -> Self::Widest {
  768|  34.2k|                    self as $widest
  769|  34.2k|                }
_RNvXsb_NtCsjBcml9vA1Kd_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  8.56k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  8.56k|                    <$ty>::wrapping_add(self, rhs)
  790|  8.56k|                }
_RNvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    387|    pub fn new(data: &'a [u8]) -> Self {
   86|    387|        Unstructured { data }
   87|    387|    }
_RNvXs6_NtCsjBcml9vA1Kd_9arbitrary12unstructuredjNtB5_3Int11from_widest:
  771|    646|                fn from_widest(w: Self::Widest) -> Self {
  772|    646|                    let x = <$ty>::max_value().as_widest();
  773|    646|                    (w % x) as Self
  774|    646|                }
_RNvXsb_NtCsjBcml9vA1Kd_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  17.1k|                fn from_usize(u: usize) -> Self {
  781|  17.1k|                    u as Self
  782|  17.1k|                }
_RNvXsb_NtCsjBcml9vA1Kd_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  8.56k|                fn from_u8(b: u8) -> Self {
  777|  8.56k|                    b as Self
  778|  8.56k|                }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|     91|    fn int_in_range_impl<T>(
  302|     91|        range: ops::RangeInclusive<T>,
  303|     91|        mut bytes: impl Iterator<Item = u8>,
  304|     91|    ) -> Result<(T, usize)>
  305|     91|    where
  306|     91|        T: Int,
  307|     91|    {
  308|     91|        let start = range.start();
  309|     91|        let end = range.end();
  310|     91|        assert!(
  311|     91|            start <= end,
  312|     91|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|     91|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|     91|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|     91|        }
  320|     91|
  321|     91|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|     91|        let mut result = T::Widest::ZERO;
  323|     91|        let mut offset: usize = 0;
  324|       |
  325|    270|        while offset < mem::size_of::<T>()
  326|    182|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    179|        {
  328|    179|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    179|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    179|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|     91|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|     91|            result = result % range;
  336|     91|        }
  337|       |
  338|     91|        Ok((
  339|     91|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|     91|            offset,
  341|     91|        ))
  342|     91|    }
_RNvXs5_NtCsjBcml9vA1Kd_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|  1.34k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  1.34k|                    <$ty>::wrapping_add(self, rhs)
  790|  1.34k|                }
_RNvXs1_NtCsjBcml9vA1Kd_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  2.42k|                fn as_widest(self) -> Self::Widest {
  768|  2.42k|                    self as $widest
  769|  2.42k|                }
_RINvMNtCsjBcml9vA1Kd_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    605|    fn int_in_range_impl<T>(
  302|    605|        range: ops::RangeInclusive<T>,
  303|    605|        mut bytes: impl Iterator<Item = u8>,
  304|    605|    ) -> Result<(T, usize)>
  305|    605|    where
  306|    605|        T: Int,
  307|    605|    {
  308|    605|        let start = range.start();
  309|    605|        let end = range.end();
  310|    605|        assert!(
  311|    605|            start <= end,
  312|    605|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    605|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    605|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    605|        }
  320|    605|
  321|    605|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    605|        let mut result = T::Widest::ZERO;
  323|    605|        let mut offset: usize = 0;
  324|       |
  325|  1.21k|        while offset < mem::size_of::<T>()
  326|    605|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    605|        {
  328|    605|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    605|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    605|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    605|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    605|            result = result % range;
  336|    605|        }
  337|       |
  338|    605|        Ok((
  339|    605|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    605|            offset,
  341|    605|        ))
  342|    605|    }
_RNvXs5_NtCsjBcml9vA1Kd_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|  1.34k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  1.34k|                    <$ty>::checked_add(self, rhs)
  786|  1.34k|                }
_RNvXs2_NtCsjBcml9vA1Kd_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|     91|                fn from_widest(w: Self::Widest) -> Self {
  772|     91|                    let x = <$ty>::max_value().as_widest();
  773|     91|                    (w % x) as Self
  774|     91|                }
_RNvXs5_NtCsjBcml9vA1Kd_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  2.14k|                fn from_usize(u: usize) -> Self {
  781|  2.14k|                    u as Self
  782|  2.14k|                }

_RNvMNtNtCsfms0KnAOgQz_7cbor4ii4core3decNtB2_9Reference6as_refCszSBfr06AIl_11cbor_encode:
   81|  6.54k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  6.54k|        match self {
   83|  6.54k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  6.54k|    }
_RNvMs0_NtNtCsfms0KnAOgQz_7cbor4ii4core3decNtB5_7TypeNum3newCszSBfr06AIl_11cbor_encode:
  175|  5.48k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  5.48k|        TypeNum { major_limit, byte }
  177|  5.48k|    }
_RINvMs0_NtNtCsfms0KnAOgQz_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  223|  5.48k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  5.48k|        match self.byte & self.major_limit {
  225|  5.48k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|    737|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|     48|                let mut buf = [0; 2];
  229|     48|                pull_exact(reader, &mut buf)?;
  230|     48|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|     14|                let mut buf = [0; 4];
  234|     14|                pull_exact(reader, &mut buf)?;
  235|     14|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    266|                let mut buf = [0; 8];
  239|    266|                pull_exact(reader, &mut buf)?;
  240|    266|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  5.48k|    }
_RINvYyNtNtNtCsfms0KnAOgQz_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
   73|    300|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    300|        let byte = pull_one(reader)?;
   75|    300|        Self::decode_with(byte, reader)
   76|    300|    }
_RINvXsg_NtNtCsfms0KnAOgQz_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  703|    300|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    300|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    300|    }
_RINvYNtNtNtCsfms0KnAOgQz_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
   73|    600|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    600|        let byte = pull_one(reader)?;
   75|    600|        Self::decode_with(byte, reader)
   76|    600|    }
_RINvYINtNtNtCsfms0KnAOgQz_7cbor4ii4core5types5BytesINtNtCs343odjcBp0F_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
   73|  4.28k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  4.28k|        let byte = pull_one(reader)?;
   75|  4.28k|        Self::decode_with(byte, reader)
   76|  4.28k|    }
_RINvYNtNtNtCsfms0KnAOgQz_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
   73|    300|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    300|        let byte = pull_one(reader)?;
   75|    300|        Self::decode_with(byte, reader)
   76|    300|    }
_RNvNtNtCsfms0KnAOgQz_7cbor4ii4core3dec8if_majorCszSBfr06AIl_11cbor_encode:
  890|    300|pub fn if_major(byte: u8) -> u8 {
  891|    300|    byte >> 5
  892|    300|}
_RINvNtNtCsfms0KnAOgQz_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  136|    328|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    656|    while !buf.is_empty() {
  138|    328|        let readbuf = reader.fill(buf.len())?;
  139|    328|        let readbuf = readbuf.as_ref();
  140|    328|
  141|    328|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    328|        }
  144|    328|
  145|    328|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    328|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    328|        reader.advance(len);
  148|    328|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    328|    Ok(())
  152|    328|}
_RINvXss_NtNtCsfms0KnAOgQz_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  252|    300|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    300|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    300|                }
_RINvNtNtCsfms0KnAOgQz_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  125|  6.21k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  6.21k|    let b = reader.fill(1)?
  127|  6.21k|        .as_ref()
  128|  6.21k|        .get(0)
  129|  6.21k|        .copied()
  130|  6.21k|        .ok_or(Error::Eof)?;
  131|  6.21k|    reader.advance(1);
  132|  6.21k|    Ok(b)
  133|  6.21k|}
_RINvNtNtCsfms0KnAOgQz_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  427|  4.28k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  4.28k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  4.28k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  4.28k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  4.28k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  4.28k|            if buf.len() >= len {
  436|  4.28k|                reader.advance(len);
  437|  4.28k|                return Ok(Some(&buf[..len]));
  438|      0|            }
  439|      0|        }
  440|       |
  441|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|      0|        while len != 0 {
  444|      0|            let readbuf = reader.fill(len)?;
  445|      0|            let readbuf = readbuf.as_ref();
  446|      0|
  447|      0|            if readbuf.is_empty() {
  448|      0|                return Err(Error::Eof);
  449|      0|            }
  450|      0|
  451|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      0|
  453|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      0|            reader.advance(readlen);
  455|      0|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|      0|            let byte = pull_one(reader)?;
  463|       |
  464|      0|            if byte == marker::BREAK {
  465|      0|                break
  466|      0|            }
  467|      0|
  468|      0|            if !reader.step_in() {
  469|      0|                return Err(Error::DepthLimit);
  470|      0|            }
  471|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|      0|            let reader = &mut *reader;
  473|       |
  474|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|      0|                buf.extend_from_slice(longbuf);
  476|      0|            }
  477|       |        }
  478|       |
  479|      0|        Ok(None)
  480|       |    }
  481|  4.28k|}
_RINvNtNtCsfms0KnAOgQz_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  595|  4.88k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  4.88k|    -> Result<Option<usize>, Error<R::Error>>
  597|  4.88k|{
  598|  4.88k|    if byte != (marker::START | (major << 5)) {
  599|  4.88k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  4.88k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  4.88k|        Ok(Some(len))
  602|       |    } else {
  603|      0|        Ok(None)
  604|       |    }
  605|  4.88k|}
_RINvXs5_NtNtCsfms0KnAOgQz_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs343odjcBp0F_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  506|  4.28k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  4.28k|        use crate::alloc::borrow::Cow;
  508|  4.28k|
  509|  4.28k|        let mut buf = Vec::new();
  510|  4.28k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  4.28k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|      0|            Cow::Owned(buf)
  514|       |        }))
  515|  4.28k|    }
_RINvXsc_NtNtCsfms0KnAOgQz_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
  611|    600|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|    600|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|    600|    }

_RNvMs0_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB5_7TypeNummE3newCszSBfr06AIl_11cbor_encode:
   52|  10.4k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.4k|        TypeNum { type_, value }
   54|  10.4k|    }
_RINvXsu_NtNtCsfms0KnAOgQz_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
  159|    600|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    600|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    600|                }
_RINvXs3_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
   84|  10.4k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  10.4k|        match u16::try_from(self.value) {
   86|  10.4k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     28|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     28|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  10.4k|        Ok(())
   93|  10.4k|    }
_RNvMs0_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB5_7TypeNumhE3newCszSBfr06AIl_11cbor_encode:
   52|  10.3k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.3k|        TypeNum { type_, value }
   54|  10.3k|    }
_RINvXs4_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
   98|  10.9k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  10.9k|        match u32::try_from(self.value) {
  100|  10.4k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    532|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    532|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  10.9k|        Ok(())
  107|  10.9k|    }
_RINvXs7_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
  209|  8.56k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  8.56k|        writer.push(self.0)?;
  211|  8.56k|        Ok(())
  212|  8.56k|    }
_RINvXs2_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
   70|  10.4k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  10.4k|        match u8::try_from(self.value) {
   72|  10.3k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     96|                let [x0, x1] = self.value.to_be_bytes();
   75|     96|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  10.4k|        Ok(())
   79|  10.4k|    }
_RINvXsd_NtNtCsfms0KnAOgQz_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
  270|  1.20k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.20k|        Ok(())
  272|  1.20k|    }
_RINvXs1_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
   59|  10.3k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  10.3k|        match self.value {
   61|  10.3k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.47k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  10.3k|        Ok(())
   65|  10.3k|    }
_RINvXsi_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECszSBfr06AIl_11cbor_encode:
  317|    600|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    600|        self.1.encode(writer)
  319|    600|    }
_RNvMs0_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB5_7TypeNumtE3newCszSBfr06AIl_11cbor_encode:
   52|  10.4k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.4k|        TypeNum { type_, value }
   54|  10.4k|    }
_RNvMs0_NtNtCsfms0KnAOgQz_7cbor4ii4core3encINtB5_7TypeNumyE3newCszSBfr06AIl_11cbor_encode:
   52|  10.9k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.9k|        TypeNum { type_, value }
   54|  10.9k|    }

_RNvXs1_NtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCszSBfr06AIl_11cbor_encode:
   75|    600|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    600|            self.limit = limit;
   77|    600|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    600|    }
_RNvXs1_NtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCszSBfr06AIl_11cbor_encode:
   68|  10.8k|    fn advance(&mut self, n: usize) {
   69|  10.8k|        let len = core::cmp::min(self.buf.len(), n);
   70|  10.8k|        self.buf = &self.buf[len..];
   71|  10.8k|    }
_RNvXs_NtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCszSBfr06AIl_11cbor_encode:
   40|  19.5k|        self.0.try_reserve(input.len())?;
   41|  19.5k|        self.0.extend_from_slice(input);
   42|  19.5k|        Ok(())
   43|  19.5k|    }
_RNvXs1_NtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCszSBfr06AIl_11cbor_encode:
   84|    600|    fn step_out(&mut self) {
   85|    600|        self.limit += 1;
   86|    600|    }
_RNvXs1_NtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCszSBfr06AIl_11cbor_encode:
   62|  11.4k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  11.4k|        let len = core::cmp::min(self.buf.len(), want);
   64|  11.4k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  11.4k|    }
_RNvMs0_NtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    300|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    300|        SliceReader { buf, limit: 256 }
   55|    300|    }
_RNvMNtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    600|    pub fn into_inner(self) -> Vec<u8> {
   25|    600|        self.0
   26|    600|    }
_RNvMNtNtCsfms0KnAOgQz_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    600|    pub fn new(buf: Vec<u8>) -> Self {
   15|    600|       BufWriter(buf)
   16|    600|    }

_RNvXs0_NtCslD4YlW8dPJX_3cid3arbINtNtB7_3cid3CidKj40_ENtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
   83|    388|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   84|    388|        let v1 = size_hint::and_all(&[
   85|    388|            <[u8; 2]>::size_hint(depth),
   86|    388|            (0, Some(8)),
   87|    388|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   88|    388|        ]);
   89|    388|        if S >= 32 {
   90|    388|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   91|       |        } else {
   92|      0|            v1
   93|       |        }
   94|    388|    }
_RNvXs0_NtCslD4YlW8dPJX_3cid3arbINtNtB7_3cid3CidKj40_ENtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitraryCs4CKPQBR6N6O_11common_fuzz:
   56|    347|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   57|    347|        if S >= 32 && u.ratio(1, 10)? {
   58|     19|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   59|     12|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   60|    322|        }
   61|    322|
   62|    322|        let mut codec = 0u64;
   63|    322|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   64|       |
   65|    935|        while len_choice & 1 == 1 {
   66|    613|            len_choice >>= 1;
   67|    613|
   68|    613|            let x = u.arbitrary::<u8>();
   69|    613|            let next = codec
   70|    613|                .checked_shl(8)
   71|    613|                .zip(x.ok())
   72|    613|                .map(|(next, x)| next.saturating_add(x as u64));
   73|    613|
   74|    613|            match next {
   75|      0|                None => break,
   76|    613|                Some(next) => codec = next,
   77|       |            }
   78|       |        }
   79|       |
   80|    322|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   81|    347|    }
_RNCNvXs0_NtCslD4YlW8dPJX_3cid3arbINtNtB9_3cid3CidKj40_ENtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitrary0Cs4CKPQBR6N6O_11common_fuzz:
   72|    613|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvMNtCslD4YlW8dPJX_3cid3cidINtB2_3CidKj40_E3newCszSBfr06AIl_11cbor_encode:
   99|    288|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    288|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    288|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    288|    }
_RINvMNtCslD4YlW8dPJX_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs343odjcBp0F_5alloc3vec3VechEECszSBfr06AIl_11cbor_encode:
  157|    600|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    600|        match self.version {
  159|     24|            Version::V0 => self.hash.write(w)?,
  160|    576|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    600|        Ok(())
  163|    600|    }
_RINvMNtCslD4YlW8dPJX_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECszSBfr06AIl_11cbor_encode:
  127|    300|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    300|        let version = varint_read_u64(&mut r)?;
  129|    300|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    300|        if [version, codec] == [0x12, 0x20] {
  132|     12|            let mut digest = [0u8; 32];
  133|     12|            r.read_exact(&mut digest)?;
  134|     12|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|     12|            Self::new_v0(mh)
  136|       |        } else {
  137|    288|            let version = Version::try_from(version)?;
  138|    288|            let mh = Multihash::read(r)?;
  139|    288|            Self::new(version, codec, mh)
  140|       |        }
  141|    300|    }
_RINvMNtCslD4YlW8dPJX_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs343odjcBp0F_5alloc3vec3VechEECszSBfr06AIl_11cbor_encode:
  143|    576|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    576|        let mut version_buf = varint_encode::u64_buffer();
  145|    576|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    576|
  147|    576|        let mut codec_buf = varint_encode::u64_buffer();
  148|    576|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    576|
  150|    576|        w.write_all(version)?;
  151|    576|        w.write_all(codec)?;
  152|    576|        self.hash.write(&mut w)?;
  153|    576|        Ok(())
  154|    576|    }
_RNvXs6_NtCslD4YlW8dPJX_3cid3cidINtB5_3CidKj40_EINtNtCsgn2LvMKFZQq_4core7convert7TryFromRShE8try_fromCszSBfr06AIl_11cbor_encode:
  314|    300|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    300|        Self::read_bytes(&mut bytes)
  316|    300|    }
_RNvMNtCslD4YlW8dPJX_3cid3cidINtB2_3CidKj40_E6new_v1CszSBfr06AIl_11cbor_encode:
   90|    288|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    288|        Self {
   92|    288|            version: Version::V1,
   93|    288|            codec,
   94|    288|            hash,
   95|    288|        }
   96|    288|    }
_RNvMNtCslD4YlW8dPJX_3cid3cidINtB2_3CidKj40_E6new_v0CszSBfr06AIl_11cbor_encode:
   78|     12|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     12|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     12|        }
   82|     12|        Ok(Self {
   83|     12|            version: Version::V0,
   84|     12|            codec: DAG_PB,
   85|     12|            hash,
   86|     12|        })
   87|     12|    }
_RNvMNtCslD4YlW8dPJX_3cid3cidINtB2_3CidKj40_E8to_bytesCszSBfr06AIl_11cbor_encode:
  167|    600|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    600|        let mut bytes = Vec::new();
  169|    600|        self.write_bytes(&mut bytes).unwrap();
  170|    600|        bytes
  171|    600|    }
_RNvMNtCslD4YlW8dPJX_3cid3cidINtB2_3CidKj40_E6new_v1Cs4CKPQBR6N6O_11common_fuzz:
   90|    288|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    288|        Self {
   92|    288|            version: Version::V1,
   93|    288|            codec,
   94|    288|            hash,
   95|    288|        }
   96|    288|    }
_RNvMNtCslD4YlW8dPJX_3cid3cidINtB2_3CidKj40_E6new_v0Cs4CKPQBR6N6O_11common_fuzz:
   78|     12|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     12|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     12|        }
   82|     12|        Ok(Self {
   83|     12|            version: Version::V0,
   84|     12|            codec: DAG_PB,
   85|     12|            hash,
   86|     12|        })
   87|     12|    }

_RINvXNtCslD4YlW8dPJX_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   29|    600|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    600|    where
   31|    600|        S: ser::Serializer,
   32|    600|    {
   33|    600|        let value = ByteBuf::from(self.to_bytes());
   34|    600|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    600|    }
_RINvXNvXs0_NtCslD4YlW8dPJX_3cid5serdeINtNtBb_3cid3CidKpENtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   97|    300|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    300|            where
   99|    300|                D: de::Deserializer<'de>,
  100|    300|            {
  101|    300|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    300|            }
_RINvXs0_NtCslD4YlW8dPJX_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   79|    300|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    300|    where
   81|    300|        D: de::Deserializer<'de>,
   82|    300|    {
   83|    300|        /// Main visitor to deserialize a CID.
   84|    300|        ///
   85|    300|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    300|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    300|        /// to bytes.
   88|    300|        struct MainEntryVisitor<const SIZE: usize>;
   89|    300|
   90|    300|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    300|            type Value = CidGeneric<SIZE>;
   92|    300|
   93|    300|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    300|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    300|            }
   96|    300|
   97|    300|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    300|            where
   99|    300|                D: de::Deserializer<'de>,
  100|    300|            {
  101|    300|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    300|            }
  103|    300|        }
  104|    300|
  105|    300|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    300|    }
_RINvXs_NtCslD4YlW8dPJX_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs8xsbAZ3I3jM_5serde2de7Visitor11visit_bytesINtNtCscMfELGN0GKV_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsgn2LvMKFZQq_4core7convert10InfallibleEECszSBfr06AIl_11cbor_encode:
   48|    300|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    300|    where
   50|    300|        E: de::Error,
   51|    300|    {
   52|    300|        CidGeneric::<SIZE>::try_from(value)
   53|    300|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    300|    }

_RNvXs_NtCslD4YlW8dPJX_3cid7versionNtB4_7VersionINtNtCsgn2LvMKFZQq_4core7convert7TryFromyE8try_from:
   34|    288|    fn try_from(raw: u64) -> Result<Self> {
   35|    288|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    288|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    288|    }
_RNvXs0_NtCslD4YlW8dPJX_3cid7versionyINtNtCsgn2LvMKFZQq_4core7convert4FromNtB5_7VersionE4from:
   44|    576|    fn from(ver: Version) -> u64 {
   45|    576|        match ver {
   46|      0|            Version::V0 => 0,
   47|    576|            Version::V1 => 1,
   48|       |        }
   49|    576|    }

_RINvMNtCs5rtjZW4UNDL_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECszSBfr06AIl_11cbor_encode:
   60|    600|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    600|        ByteBuf {
   62|    600|            bytes: bytes.into(),
   63|    600|        }
   64|    600|    }
_RINvXsd_NtCs5rtjZW4UNDL_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs8xsbAZ3I3jM_5serde2de7Visitor11visit_bytesINtNtCscMfELGN0GKV_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsgn2LvMKFZQq_4core7convert10InfallibleEECszSBfr06AIl_11cbor_encode:
  203|    600|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    600|    where
  205|    600|        E: Error,
  206|    600|    {
  207|    600|        Ok(ByteBuf::from(v))
  208|    600|    }
_RINvXse_NtCs5rtjZW4UNDL_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  219|    600|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    600|    where
  221|    600|        D: Deserializer<'de>,
  222|    600|    {
  223|    600|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    600|    }
_RNvMNtCs5rtjZW4UNDL_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    600|    pub fn into_vec(self) -> Vec<u8> {
   68|    600|        self.bytes
   69|    600|    }

_RINvXs1_NtCs5rtjZW4UNDL_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   61|    600|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    600|    where
   63|    600|        D: Deserializer<'de>,
   64|    600|    {
   65|    600|        // Via the serde::Deserialize impl for ByteBuf.
   66|    600|        serde::Deserialize::deserialize(deserializer)
   67|    600|    }
_RINvXs2_NtCs5rtjZW4UNDL_14cs_serde_bytes2deINtNtCs343odjcBp0F_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   72|  3.38k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  3.38k|    where
   74|  3.38k|        D: Deserializer<'de>,
   75|  3.38k|    {
   76|  3.38k|        struct CowVisitor;
   77|  3.38k|
   78|  3.38k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  3.38k|            type Value = Cow<'de, [u8]>;
   80|  3.38k|
   81|  3.38k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  3.38k|                formatter.write_str("a byte array")
   83|  3.38k|            }
   84|  3.38k|
   85|  3.38k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.38k|            where
   87|  3.38k|                E: Error,
   88|  3.38k|            {
   89|  3.38k|                Ok(Cow::Borrowed(v))
   90|  3.38k|            }
   91|  3.38k|
   92|  3.38k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  3.38k|            where
   94|  3.38k|                E: Error,
   95|  3.38k|            {
   96|  3.38k|                Ok(Cow::Owned(v.to_vec()))
   97|  3.38k|            }
   98|  3.38k|
   99|  3.38k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  3.38k|            where
  101|  3.38k|                E: Error,
  102|  3.38k|            {
  103|  3.38k|                Ok(Cow::Owned(v))
  104|  3.38k|            }
  105|  3.38k|        }
  106|  3.38k|
  107|  3.38k|        deserializer.deserialize_bytes(CowVisitor)
  108|  3.38k|    }
_RINvXs_NtCs5rtjZW4UNDL_14cs_serde_bytes2deINtNtCs343odjcBp0F_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   42|    600|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    600|    where
   44|    600|        D: Deserializer<'de>,
   45|    600|    {
   46|    600|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    600|    }
_RINvXNvXs2_NtCs5rtjZW4UNDL_14cs_serde_bytes2deINtNtCs343odjcBp0F_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs8xsbAZ3I3jM_5serde2de7Visitor20visit_borrowed_bytesINtNtCscMfELGN0GKV_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsgn2LvMKFZQq_4core7convert10InfallibleEECszSBfr06AIl_11cbor_encode:
   85|  3.38k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.38k|            where
   87|  3.38k|                E: Error,
   88|  3.38k|            {
   89|  3.38k|                Ok(Cow::Borrowed(v))
   90|  3.38k|            }

_RINvCs5rtjZW4UNDL_14cs_serde_bytes11deserializeINtNtCs343odjcBp0F_5alloc6borrow3CowShEQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  103|    300|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    300|where
  105|    300|    T: Deserialize<'de>,
  106|    300|    D: Deserializer<'de>,
  107|    300|{
  108|    300|    Deserialize::deserialize(deserializer)
  109|    300|}
_RINvCs5rtjZW4UNDL_14cs_serde_bytes11deserializeINtNtCs343odjcBp0F_5alloc3vec3VechEQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  103|    600|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    600|where
  105|    600|    T: Deserialize<'de>,
  106|    600|    D: Deserializer<'de>,
  107|    600|{
  108|    600|    Deserialize::deserialize(deserializer)
  109|    600|}
_RINvCs5rtjZW4UNDL_14cs_serde_bytes9serializeRINtNtCs343odjcBp0F_5alloc3vec3VechEQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   77|    600|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    600|where
   79|    600|    T: ?Sized + Serialize,
   80|    600|    S: Serializer,
   81|    600|{
   82|    600|    Serialize::serialize(bytes, serializer)
   83|    600|}
_RINvCs5rtjZW4UNDL_14cs_serde_bytes9serializeINtNtCs343odjcBp0F_5alloc3vec3VechEQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   77|  1.20k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|  1.20k|where
   79|  1.20k|    T: ?Sized + Serialize,
   80|  1.20k|    S: Serializer,
   81|  1.20k|{
   82|  1.20k|    Serialize::serialize(bytes, serializer)
   83|  1.20k|}

_RINvXs4_NtCs5rtjZW4UNDL_14cs_serde_bytes3serRINtNtCs343odjcBp0F_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   88|    600|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    600|    where
   90|    600|        S: Serializer,
   91|    600|    {
   92|    600|        (**self).serialize(serializer)
   93|    600|    }
_RINvXs_NtCs5rtjZW4UNDL_14cs_serde_bytes3serINtNtCs343odjcBp0F_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   37|  7.96k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|  7.96k|    where
   39|  7.96k|        S: Serializer,
   40|  7.96k|    {
   41|  7.96k|        serializer.serialize_bytes(self)
   42|  7.96k|    }

rust_fuzzer_test_input:
  167|    388|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    388|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    388|
  170|    388|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    388|            // implementation. This helps the fuzzer avoid exploring all the
  172|    388|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    388|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    388|            // get to longer inputs that actually lead to interesting executions
  175|    388|            // quicker.
  176|    388|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    387|            }
  179|    387|
  180|    387|            let mut u = Unstructured::new(bytes);
  181|    387|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    387|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    387|            }
  199|       |
  200|    387|            let $data = match data {
  201|    300|                Ok(d) => d,
  202|     87|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    388|        }
LLVMFuzzerTestOneInput:
   27|    388|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    388|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    388|    });
   32|    388|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    388|    }
   37|    388|    0
   38|    388|}
_RNCNvCs7vLiuiKbIDx_13libfuzzer_sys15test_input_wrap0B3_:
   28|    388|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    388|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    388|        rust_fuzzer_test_input(data_slice);
   31|    388|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs_NtCsch9srQypNA8_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
   64|    388|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   65|    388|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   66|    388|    }
_RNvXs_NtCsch9srQypNA8_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitraryCs4CKPQBR6N6O_11common_fuzz:
   39|    322|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   40|    322|        let mut code = 0u64;
   41|    322|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   42|       |
   43|    837|        while len_choice & 1 == 1 {
   44|    515|            len_choice >>= 1;
   45|    515|
   46|    515|            let x = u.arbitrary::<u8>();
   47|    515|            let next = code
   48|    515|                .checked_shl(8)
   49|    515|                .zip(x.ok())
   50|    515|                .map(|(next, x)| next.saturating_add(x as u64));
   51|    515|
   52|    515|            match next {
   53|      0|                None => break,
   54|    515|                Some(next) => code = next,
   55|       |            }
   56|       |        }
   57|       |
   58|    322|        let size = u.int_in_range(0..=S)?;
   59|    299|        let data = u.bytes(size)?;
   60|       |
   61|    288|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   62|    322|    }
_RNCNvXs_NtCsch9srQypNA8_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitrary0Cs4CKPQBR6N6O_11common_fuzz:
   50|    515|                .map(|(next, x)| next.saturating_add(x as u64));

_RINvNtCsch9srQypNA8_9multihash9multihash15write_multihashQINtNtCs343odjcBp0F_5alloc3vec3VechEECszSBfr06AIl_11cbor_encode:
  276|     24|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     24|where
  278|     24|    W: io::Write,
  279|     24|{
  280|     24|    let mut code_buf = varint_encode::u64_buffer();
  281|     24|    let code = varint_encode::u64(code, &mut code_buf);
  282|     24|
  283|     24|    let mut size_buf = varint_encode::u8_buffer();
  284|     24|    let size = varint_encode::u8(size, &mut size_buf);
  285|     24|
  286|     24|    w.write_all(code)?;
  287|     24|    w.write_all(size)?;
  288|     24|    w.write_all(digest)?;
  289|     24|    Ok(())
  290|     24|}
_RINvMs_NtCsch9srQypNA8_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs343odjcBp0F_5alloc3vec3VechEECszSBfr06AIl_11cbor_encode:
  163|    576|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    576|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    576|    }
_RINvMs_NtCsch9srQypNA8_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECszSBfr06AIl_11cbor_encode:
  135|    288|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    288|    where
  137|    288|        Self: Sized,
  138|    288|    {
  139|    288|        let (code, size, digest) = read_multihash(r)?;
  140|    288|        Ok(Self { code, size, digest })
  141|    288|    }
_RINvMs_NtCsch9srQypNA8_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs343odjcBp0F_5alloc3vec3VechEECszSBfr06AIl_11cbor_encode:
  163|     24|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     24|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     24|    }
_RNvMs_NtCsch9srQypNA8_9multihash9multihashINtB4_9MultihashKj40_E4codeCszSBfr06AIl_11cbor_encode:
  120|    612|    pub const fn code(&self) -> u64 {
  121|    612|        self.code
  122|    612|    }
_RNvMs_NtCsch9srQypNA8_9multihash9multihashINtB4_9MultihashKj40_E4sizeCszSBfr06AIl_11cbor_encode:
  125|    600|    pub const fn size(&self) -> u8 {
  126|    600|        self.size
  127|    600|    }
_RNvMs_NtCsch9srQypNA8_9multihash9multihashINtB4_9MultihashKj40_E4wrapCszSBfr06AIl_11cbor_encode:
  101|     12|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     12|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     12|        }
  105|     12|        let size = input_digest.len();
  106|     12|        let mut digest = [0; S];
  107|     12|        let mut i = 0;
  108|    396|        while i < size {
  109|    384|            digest[i] = input_digest[i];
  110|    384|            i += 1;
  111|    384|        }
  112|     12|        Ok(Self {
  113|     12|            code,
  114|     12|            size: size as u8,
  115|     12|            digest,
  116|     12|        })
  117|     12|    }
_RINvNtCsch9srQypNA8_9multihash9multihash14read_multihashQRShKj40_ECszSBfr06AIl_11cbor_encode:
  298|    288|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    288|where
  300|    288|    R: io::Read,
  301|    288|{
  302|    288|    let code = read_u64(&mut r)?;
  303|    288|    let size = read_u64(&mut r)?;
  304|       |
  305|    288|    if size > S as u64 || size > u8::MAX as u64 {
  306|      0|        return Err(Error::InvalidSize(size));
  307|    288|    }
  308|    288|
  309|    288|    let mut digest = [0; S];
  310|    288|    r.read_exact(&mut digest[..size as usize])?;
  311|    288|    Ok((code, size as u8, digest))
  312|    288|}
_RNvMs_NtCsch9srQypNA8_9multihash9multihashINtB4_9MultihashKj40_E6digestCszSBfr06AIl_11cbor_encode:
  130|    600|    pub fn digest(&self) -> &[u8] {
  131|    600|        &self.digest[..self.size as usize]
  132|    600|    }
_RINvNtCsch9srQypNA8_9multihash9multihash15write_multihashQQINtNtCs343odjcBp0F_5alloc3vec3VechEECszSBfr06AIl_11cbor_encode:
  276|    576|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    576|where
  278|    576|    W: io::Write,
  279|    576|{
  280|    576|    let mut code_buf = varint_encode::u64_buffer();
  281|    576|    let code = varint_encode::u64(code, &mut code_buf);
  282|    576|
  283|    576|    let mut size_buf = varint_encode::u8_buffer();
  284|    576|    let size = varint_encode::u8(size, &mut size_buf);
  285|    576|
  286|    576|    w.write_all(code)?;
  287|    576|    w.write_all(size)?;
  288|    576|    w.write_all(digest)?;
  289|    576|    Ok(())
  290|    576|}
_RNvMs_NtCsch9srQypNA8_9multihash9multihashINtB4_9MultihashKj40_E4wrapCs4CKPQBR6N6O_11common_fuzz:
  101|    300|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    300|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    300|        }
  105|    300|        let size = input_digest.len();
  106|    300|        let mut digest = [0; S];
  107|    300|        let mut i = 0;
  108|  1.60k|        while i < size {
  109|  1.30k|            digest[i] = input_digest[i];
  110|  1.30k|            i += 1;
  111|  1.30k|        }
  112|    300|        Ok(Self {
  113|    300|            code,
  114|    300|            size: size as u8,
  115|    300|            digest,
  116|    300|        })
  117|    300|    }
_RNvMs_NtCsch9srQypNA8_9multihash9multihashINtB4_9MultihashKj40_E4codeCs4CKPQBR6N6O_11common_fuzz:
  120|     12|    pub const fn code(&self) -> u64 {
  121|     12|        self.code
  122|     12|    }

_RNvXs4_NtCsch9srQypNA8_9multihash14multihash_implyINtNtCsgn2LvMKFZQq_4core7convert4FromNtB5_4CodeE4from:
   11|     19|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCs9ff7F6wMzAG_10fvm_shared7address8protocol8ProtocolNtNtCs4WPkokWIg9T_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  3.08k|    fn from_u8(n: u8) -> Option<Self> {
  468|  3.08k|        FromPrimitive::from_u64(From::from(n))
  469|  3.08k|    }

_RNvMs2_NtCsljJg4StkJxX_9once_cell3impINtB5_8OnceCellNtNtCs343odjcBp0F_5alloc6string6StringE14is_initializedCszSBfr06AIl_11cbor_encode:
   62|    387|    pub(crate) fn is_initialized(&self) -> bool {
   63|    387|        // An `Acquire` load is enough because that makes all the initialization
   64|    387|        // operations visible to us, and, this being a fast path, weaker
   65|    387|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    387|        // `SeqCst` operations on the slow path.
   67|    387|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    387|    }

_RNvMs4_NtCsljJg4StkJxX_9once_cell4syncINtB5_8OnceCellNtNtCs343odjcBp0F_5alloc6string6StringE3getCszSBfr06AIl_11cbor_encode:
  869|    387|        pub fn get(&self) -> Option<&T> {
  870|    387|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    387|                None
  875|       |            }
  876|    387|        }

_RNvXCsbMCUoyKC7KI_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    600|    fn should_run() -> bool { true }
_RNvMs1_CsbMCUoyKC7KI_10scopeguardINtB5_10ScopeGuardQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCszSBfr06AIl_11cbor_encode:
  317|    600|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    600|        ScopeGuard {
  319|    600|            value: ManuallyDrop::new(v),
  320|    600|            dropfn: ManuallyDrop::new(dropfn),
  321|    600|            strategy: PhantomData,
  322|    600|        }
  323|    600|    }
_RNvXs5_CsbMCUoyKC7KI_10scopeguardINtB5_10ScopeGuardQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsgn2LvMKFZQq_4core3ops4drop4Drop4dropCszSBfr06AIl_11cbor_encode:
  452|    600|    fn drop(&mut self) {
  453|    600|        // This is OK because the fields are `ManuallyDrop`s
  454|    600|        // which will not be dropped by the compiler.
  455|    600|        let (value, dropfn) = unsafe {
  456|    600|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    600|        };
  458|    600|        if S::should_run() {
  459|    600|            dropfn(value);
  460|    600|        }
  461|    600|    }
_RNvXs4_CsbMCUoyKC7KI_10scopeguardINtB5_10ScopeGuardQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsgn2LvMKFZQq_4core3ops5deref8DerefMut9deref_mutCszSBfr06AIl_11cbor_encode:
  443|    600|    fn deref_mut(&mut self) -> &mut T {
  444|    600|        &mut *self.value
  445|    600|    }
_RINvCsbMCUoyKC7KI_10scopeguard5guardQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEFBy_EuECszSBfr06AIl_11cbor_encode:
  367|    600|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    600|    where F: FnOnce(T)
  369|    600|{
  370|    600|    ScopeGuard::with_strategy(v, dropfn)
  371|    600|}

_RINvXNvXsh_NtNtCs8xsbAZ3I3jM_5serde2de5implsINtNtCs343odjcBp0F_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
 1032|    300|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    300|            where
 1034|    300|                A: SeqAccess<'de>,
 1035|    300|            {
 1036|    300|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  3.08k|                while let Some(value) = try!(seq.next_element()) {
 1039|  2.78k|                    values.push(value);
 1040|  2.78k|                }
 1041|       |
 1042|    300|                Ok(values)
 1043|    300|            }
_RINvXNvXsV_NtNtCs8xsbAZ3I3jM_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCscMfELGN0GKV_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsgn2LvMKFZQq_4core7convert10InfallibleEECszSBfr06AIl_11cbor_encode:
  138|    300|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    300|        where
  140|    300|            E: Error,
  141|    300|        {
  142|    300|            Ok(v)
  143|    300|        }
_RINvXsh_NtNtCs8xsbAZ3I3jM_5serde2de5implsINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
 1014|    300|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    300|    where
 1016|    300|        D: Deserializer<'de>,
 1017|    300|    {
 1018|    300|        struct VecVisitor<T> {
 1019|    300|            marker: PhantomData<T>,
 1020|    300|        }
 1021|    300|
 1022|    300|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    300|        where
 1024|    300|            T: Deserialize<'de>,
 1025|    300|        {
 1026|    300|            type Value = Vec<T>;
 1027|    300|
 1028|    300|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    300|                formatter.write_str("a sequence")
 1030|    300|            }
 1031|    300|
 1032|    300|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    300|            where
 1034|    300|                A: SeqAccess<'de>,
 1035|    300|            {
 1036|    300|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    300|
 1038|    300|                while let Some(value) = try!(seq.next_element()) {
 1039|    300|                    values.push(value);
 1040|    300|                }
 1041|    300|
 1042|    300|                Ok(values)
 1043|    300|            }
 1044|    300|        }
 1045|    300|
 1046|    300|        let visitor = VecVisitor {
 1047|    300|            marker: PhantomData,
 1048|    300|        };
 1049|    300|        deserializer.deserialize_seq(visitor)
 1050|    300|    }
_RINvXsV_NtNtCs8xsbAZ3I3jM_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  113|    300|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    300|            where
  115|    300|                D: Deserializer<'de>,
  116|    300|            {
  117|    300|                struct PrimitiveVisitor;
  118|    300|
  119|    300|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    300|                    type Value = $primitive;
  121|    300|
  122|    300|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    300|                        formatter.write_str(stringify!($primitive))
  124|    300|                    }
  125|    300|
  126|    300|                    $($($method!($val : $visit);)*)*
  127|    300|                }
  128|    300|
  129|    300|                deserializer.$deserialize(PrimitiveVisitor)
  130|    300|            }

_RINvYINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess12next_elementNtCsdDqph7764Ox_17fvm_ipld_bitfield8BitFieldECszSBfr06AIl_11cbor_encode:
 1723|    300|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    300|    where
 1725|    300|        T: Deserialize<'de>,
 1726|    300|    {
 1727|    300|        self.next_element_seed(PhantomData)
 1728|    300|    }
_RINvYNtNtCs5rtjZW4UNDL_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs8xsbAZ3I3jM_5serde2de7Visitor20visit_borrowed_bytesINtNtCscMfELGN0GKV_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsgn2LvMKFZQq_4core7convert10InfallibleEECszSBfr06AIl_11cbor_encode:
 1563|    600|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    600|    where
 1565|    600|        E: Error,
 1566|    600|    {
 1567|    600|        self.visit_bytes(v)
 1568|    600|    }
_RINvYINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess12next_elementINtNtCslD4YlW8dPJX_3cid3cid3CidKj40_EECszSBfr06AIl_11cbor_encode:
 1723|    300|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    300|    where
 1725|    300|        T: Deserialize<'de>,
 1726|    300|    {
 1727|    300|        self.next_element_seed(PhantomData)
 1728|    300|    }
_RINvYINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess12next_elementyECszSBfr06AIl_11cbor_encode:
 1723|    300|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    300|    where
 1725|    300|        T: Deserialize<'de>,
 1726|    300|    {
 1727|    300|        self.next_element_seed(PhantomData)
 1728|    300|    }
_RINvXs3_NtCs8xsbAZ3I3jM_5serde2deINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  783|  3.08k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  3.08k|    where
  785|  3.08k|        D: Deserializer<'de>,
  786|  3.08k|    {
  787|  3.08k|        T::deserialize(deserializer)
  788|  3.08k|    }
_RINvXs3_NtCs8xsbAZ3I3jM_5serde2deINtNtCsgn2LvMKFZQq_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  783|    300|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    300|    where
  785|    300|        D: Deserializer<'de>,
  786|    300|    {
  787|    300|        T::deserialize(deserializer)
  788|    300|    }
_RINvXs3_NtCs8xsbAZ3I3jM_5serde2deINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataINtNtCslD4YlW8dPJX_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  783|    300|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    300|    where
  785|    300|        D: Deserializer<'de>,
  786|    300|    {
  787|    300|        T::deserialize(deserializer)
  788|    300|    }
_RINvXs3_NtCs8xsbAZ3I3jM_5serde2deINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtNtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  783|    300|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    300|    where
  785|    300|        D: Deserializer<'de>,
  786|    300|    {
  787|    300|        T::deserialize(deserializer)
  788|    300|    }
_RINvYNtNtCslD4YlW8dPJX_3cid5serde17BytesToCidVisitorNtNtCs8xsbAZ3I3jM_5serde2de7Visitor20visit_borrowed_bytesINtNtCscMfELGN0GKV_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsgn2LvMKFZQq_4core7convert10InfallibleEECszSBfr06AIl_11cbor_encode:
 1563|    300|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    300|    where
 1565|    300|        E: Error,
 1566|    300|    {
 1567|    300|        self.visit_bytes(v)
 1568|    300|    }
_RINvXs3_NtCs8xsbAZ3I3jM_5serde2deINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  783|    300|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    300|    where
  785|    300|        D: Deserializer<'de>,
  786|    300|    {
  787|    300|        T::deserialize(deserializer)
  788|    300|    }
_RINvYINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess12next_elementNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressECszSBfr06AIl_11cbor_encode:
 1723|  3.38k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  3.38k|    where
 1725|  3.38k|        T: Deserialize<'de>,
 1726|  3.38k|    {
 1727|  3.38k|        self.next_element_seed(PhantomData)
 1728|  3.38k|    }
_RINvYINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECszSBfr06AIl_11cbor_encode:
 1723|    300|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    300|    where
 1725|    300|        T: Deserialize<'de>,
 1726|    300|    {
 1727|    300|        self.next_element_seed(PhantomData)
 1728|    300|    }
_RINvXs3_NtCs8xsbAZ3I3jM_5serde2deINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  783|    300|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    300|    where
  785|    300|        D: Deserializer<'de>,
  786|    300|    {
  787|    300|        T::deserialize(deserializer)
  788|    300|    }
_RINvYINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess12next_elementINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEECszSBfr06AIl_11cbor_encode:
 1723|    300|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    300|    where
 1725|    300|        T: Deserialize<'de>,
 1726|    300|    {
 1727|    300|        self.next_element_seed(PhantomData)
 1728|    300|    }
_RINvYINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess12next_elementNtNtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECszSBfr06AIl_11cbor_encode:
 1723|    300|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    300|    where
 1725|    300|        T: Deserialize<'de>,
 1726|    300|    {
 1727|    300|        self.next_element_seed(PhantomData)
 1728|    300|    }
_RINvXs3_NtCs8xsbAZ3I3jM_5serde2deINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtCsdDqph7764Ox_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  783|    300|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    300|    where
  785|    300|        D: Deserializer<'de>,
  786|    300|    {
  787|    300|        T::deserialize(deserializer)
  788|    300|    }

_RNvNtNtCs8xsbAZ3I3jM_5serde9___private9size_hint8cautiousCszSBfr06AIl_11cbor_encode:
   12|    300|pub fn cautious(hint: Option<usize>) -> usize {
   13|    300|    cmp::min(hint.unwrap_or(0), 4096)
   14|    300|}

_RINvXsE_NtNtCs8xsbAZ3I3jM_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   11|    600|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    600|            where
   13|    600|                S: Serializer,
   14|    600|            {
   15|    600|                serializer.$method(*self $($cast)*)
   16|    600|            }
_RINvXs1E_NtNtCs8xsbAZ3I3jM_5serde3ser5implsRNtNtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  386|    600|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    600|            where
  388|    600|                S: Serializer,
  389|    600|            {
  390|    600|                (**self).serialize(serializer)
  391|    600|            }
_RINvXs1k_NtNtCs8xsbAZ3I3jM_5serde3ser5implsINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  194|    600|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    600|            where
  196|    600|                S: Serializer,
  197|    600|            {
  198|    600|                serializer.collect_seq(self)
  199|    600|            }
_RINvXs1E_NtNtCs8xsbAZ3I3jM_5serde3ser5implsRNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  386|  6.16k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  6.16k|            where
  388|  6.16k|                S: Serializer,
  389|  6.16k|            {
  390|  6.16k|                (**self).serialize(serializer)
  391|  6.16k|            }
_RINvXs1E_NtNtCs8xsbAZ3I3jM_5serde3ser5implsRINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  386|    600|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    600|            where
  388|    600|                S: Serializer,
  389|    600|            {
  390|    600|                (**self).serialize(serializer)
  391|    600|            }
_RINvXs1E_NtNtCs8xsbAZ3I3jM_5serde3ser5implsRNtCsdDqph7764Ox_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  386|    600|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    600|            where
  388|    600|                S: Serializer,
  389|    600|            {
  390|    600|                (**self).serialize(serializer)
  391|    600|            }
_RINvXs1E_NtNtCs8xsbAZ3I3jM_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  386|    600|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    600|            where
  388|    600|                S: Serializer,
  389|    600|            {
  390|    600|                (**self).serialize(serializer)
  391|    600|            }
_RINvXs1E_NtNtCs8xsbAZ3I3jM_5serde3ser5implsRINtNtCslD4YlW8dPJX_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  386|    600|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    600|            where
  388|    600|                S: Serializer,
  389|    600|            {
  390|    600|                (**self).serialize(serializer)
  391|    600|            }

_RINvNtCs8xsbAZ3I3jM_5serde3ser17iterator_len_hintINtNtNtCsgn2LvMKFZQq_4core5slice4iter4IterNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEECszSBfr06AIl_11cbor_encode:
 1982|    600|    match iter.size_hint() {
 1983|    600|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    600|}
_RNCINvYQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer11collect_seqRINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEE0CszSBfr06AIl_11cbor_encode:
 1286|  5.56k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer11collect_seqRINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEECszSBfr06AIl_11cbor_encode:
 1275|    600|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    600|    where
 1277|    600|        I: IntoIterator,
 1278|    600|        <I as IntoIterator>::Item: Serialize,
 1279|    600|    {
 1280|    600|        let iter = iter.into_iter();
 1281|    600|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    600|            let mut iter = iter;
 1286|    600|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    600|        serializer.end()
 1297|    600|    }

_RINvXsc_NtCs1owG3mNzcPR_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  186|    600|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    600|    where
  188|    600|        S: Serializer,
  189|    600|    {
  190|    600|        serializer.serialize_bytes(&self.bytes)
  191|    600|    }
_RINvMNtCs1owG3mNzcPR_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs343odjcBp0F_5alloc3vec3VechEECszSBfr06AIl_11cbor_encode:
   60|    600|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    600|        ByteBuf {
   62|    600|            bytes: bytes.into(),
   63|    600|        }
   64|    600|    }

_RINvNtCscMfELGN0GKV_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderECszSBfr06AIl_11cbor_encode:
   26|    600|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    600|    let buf = match reader.fill(1)? {
   28|    600|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    600|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    300|    Ok(byte)
   33|    600|}

_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs5rtjZW4UNDL_14cs_serde_bytes2deINtNtCs343odjcBp0F_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECszSBfr06AIl_11cbor_encode:
  228|  3.38k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  3.38k|    where
  230|  3.38k|        V: Visitor<'de>,
  231|  3.38k|    {
  232|  3.38k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  3.38k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  3.38k|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess17next_element_seedINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataINtNtCslD4YlW8dPJX_3cid3cid3CidKj40_EEECszSBfr06AIl_11cbor_encode:
  484|    300|        if let Some(len) = self.len.as_mut() {
  485|    300|            if *len > 0 {
  486|    300|                *len -= 1;
  487|    300|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    300|    }
_RNvMNtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderE11from_readerCszSBfr06AIl_11cbor_encode:
   93|    300|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    300|        Deserializer { reader }
   95|    300|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess17next_element_seedINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEEECszSBfr06AIl_11cbor_encode:
  484|    300|        if let Some(len) = self.len.as_mut() {
  485|    300|            if *len > 0 {
  486|    300|                *len -= 1;
  487|    300|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    300|    }
_RINvMs_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCslD4YlW8dPJX_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECszSBfr06AIl_11cbor_encode:
  113|    300|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    300|    where
  115|    300|        V: Visitor<'de>,
  116|    300|    {
  117|    300|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    300|        match tag.0 {
  120|    300|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    300|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess17next_element_seedINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECszSBfr06AIl_11cbor_encode:
  484|    300|        if let Some(len) = self.len.as_mut() {
  485|    300|            if *len > 0 {
  486|    300|                *len -= 1;
  487|    300|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    300|    }
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer20deserialize_byte_bufNtNtCs5rtjZW4UNDL_14cs_serde_bytes7bytebuf14ByteBufVisitorECszSBfr06AIl_11cbor_encode:
  239|    600|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    600|    where
  241|    600|        V: Visitor<'de>,
  242|    600|    {
  243|    600|        self.deserialize_bytes(visitor)
  244|    600|    }
_RNvMs1_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderE5tupleCszSBfr06AIl_11cbor_encode:
  443|    300|    pub fn tuple(
  444|    300|        de: &'a mut Deserializer<R>,
  445|    300|        len: usize,
  446|    300|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    300|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    300|        if array_start.0 == Some(len) {
  450|    300|            Ok(Accessor {
  451|    300|                de,
  452|    300|                len: array_start.0,
  453|    300|            })
  454|       |        } else {
  455|      0|            Err(DecodeError::RequireLength {
  456|      0|                name: "tuple",
  457|      0|                expect: len,
  458|      0|                value: array_start.0.unwrap_or(0),
  459|      0|            })
  460|       |        }
  461|    300|    }
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCs343odjcBp0F_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEECszSBfr06AIl_11cbor_encode:
  334|    300|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    300|    where
  336|    300|        V: Visitor<'de>,
  337|    300|    {
  338|    300|        let mut de = self.try_step()?;
  339|    300|        let seq = Accessor::array(&mut de)?;
  340|    300|        visitor.visit_seq(seq)
  341|    300|    }
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer17deserialize_bytesNtNtCs5rtjZW4UNDL_14cs_serde_bytes7bytebuf14ByteBufVisitorECszSBfr06AIl_11cbor_encode:
  228|    600|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    600|    where
  230|    600|        V: Visitor<'de>,
  231|    600|    {
  232|    600|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    600|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    600|    }
_RNvMs_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderE8try_stepCszSBfr06AIl_11cbor_encode:
  101|    600|    fn try_step<'a>(
  102|    600|        &'a mut self,
  103|    600|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    600|    {
  105|    600|        if self.reader.step_in() {
  106|    600|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    600|    }
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECszSBfr06AIl_11cbor_encode:
  142|    300|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    300|        where V: Visitor<'de>
  144|    300|        {
  145|    300|            let value = <$t>::decode(&mut self.reader)?;
  146|    300|            visitor.$visit(value)
  147|    300|        }
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECszSBfr06AIl_11cbor_encode:
  344|    300|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    300|    where
  346|    300|        V: Visitor<'de>,
  347|    300|    {
  348|    300|        let mut de = self.try_step()?;
  349|    300|        let seq = Accessor::tuple(&mut de, len)?;
  350|    300|        visitor.visit_seq(seq)
  351|    300|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess17next_element_seedINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtNtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECszSBfr06AIl_11cbor_encode:
  484|    300|        if let Some(len) = self.len.as_mut() {
  485|    300|            if *len > 0 {
  486|    300|                *len -= 1;
  487|    300|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    300|    }
_RNvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess9size_hintCszSBfr06AIl_11cbor_encode:
  500|    300|    fn size_hint(&self) -> Option<usize> {
  501|    300|        self.len
  502|    300|    }
_RNCNvMs_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderE8try_step0CszSBfr06AIl_11cbor_encode:
  106|    600|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCslD4YlW8dPJX_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECszSBfr06AIl_11cbor_encode:
  318|    300|    fn deserialize_newtype_struct<V>(
  319|    300|        self,
  320|    300|        name: &'static str,
  321|    300|        visitor: V,
  322|    300|    ) -> Result<V::Value, Self::Error>
  323|    300|    where
  324|    300|        V: Visitor<'de>,
  325|    300|    {
  326|    300|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    300|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    300|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess17next_element_seedINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtCsdDqph7764Ox_17fvm_ipld_bitfield8BitFieldEECszSBfr06AIl_11cbor_encode:
  484|    300|        if let Some(len) = self.len.as_mut() {
  485|    300|            if *len > 0 {
  486|    300|                *len -= 1;
  487|    300|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    300|    }
_RINvNtCscMfELGN0GKV_18serde_ipld_dagcbor2de10from_sliceNtNtCs4CKPQBR6N6O_11common_fuzz4cbor7PayloadECszSBfr06AIl_11cbor_encode:
   40|    300|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    300|where
   42|    300|    T: de::Deserialize<'a>,
   43|    300|{
   44|    300|    let reader = SliceReader::new(buf);
   45|    300|    let mut deserializer = Deserializer::from_reader(reader);
   46|    300|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    300|    deserializer.end()?;
   48|    300|    Ok(value)
   49|    300|}
_RINvXs7_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer17deserialize_bytesNtNtCslD4YlW8dPJX_3cid5serde17BytesToCidVisitorECszSBfr06AIl_11cbor_encode:
  646|    300|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    300|        let byte = peek_one(&mut self.0.reader)?;
  648|    300|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    300|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    300|                    Cow::Borrowed(buf) => {
  653|    300|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    300|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      0|                    Cow::Owned(mut buf) => {
  660|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      0|                            buf.remove(0);
  664|      0|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      0|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    300|    }
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECszSBfr06AIl_11cbor_encode:
  354|    300|    fn deserialize_tuple_struct<V>(
  355|    300|        self,
  356|    300|        _name: &'static str,
  357|    300|        len: usize,
  358|    300|        visitor: V,
  359|    300|    ) -> Result<V::Value, Self::Error>
  360|    300|    where
  361|    300|        V: Visitor<'de>,
  362|    300|    {
  363|    300|        self.deserialize_tuple(len, visitor)
  364|    300|    }
_RNvMs_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderE3endCszSBfr06AIl_11cbor_encode:
  131|    300|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    300|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    300|    }
_RNvMs1_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderE5arrayCszSBfr06AIl_11cbor_encode:
  434|    300|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    300|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    300|        Ok(Accessor {
  437|    300|            de,
  438|    300|            len: array_start.0,
  439|    300|        })
  440|    300|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess17next_element_seedINtNtCsgn2LvMKFZQq_4core6marker11PhantomDatayEECszSBfr06AIl_11cbor_encode:
  484|    300|        if let Some(len) = self.len.as_mut() {
  485|    300|            if *len > 0 {
  486|    300|                *len -= 1;
  487|    300|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    300|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderENtNtCs8xsbAZ3I3jM_5serde2de9SeqAccess17next_element_seedINtNtCsgn2LvMKFZQq_4core6marker11PhantomDataNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEECszSBfr06AIl_11cbor_encode:
  484|  3.38k|        if let Some(len) = self.len.as_mut() {
  485|  3.38k|            if *len > 0 {
  486|  3.08k|                *len -= 1;
  487|  3.08k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    300|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  3.38k|    }

_RNvXs_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer22serialize_tuple_structCszSBfr06AIl_11cbor_encode:
  244|    600|    fn serialize_tuple_struct(
  245|    600|        self,
  246|    600|        _name: &'static str,
  247|    600|        len: usize,
  248|    600|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    600|        self.serialize_tuple(len)
  250|    600|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct15serialize_fieldRyECszSBfr06AIl_11cbor_encode:
  403|    600|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    600|        value.serialize(&mut *self.ser)
  405|    600|    }
_RNvMNtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterE10into_innerCszSBfr06AIl_11cbor_encode:
   56|    600|    pub fn into_inner(self) -> W {
   57|    600|        self.writer
   58|    600|    }
_RNvXs_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer13serialize_seqCszSBfr06AIl_11cbor_encode:
  226|    600|        if let Some(len) = len {
  227|    600|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    600|        Ok(Collect {
  232|    600|            bounded: len.is_some(),
  233|    600|            ser: self,
  234|    600|        })
  235|    600|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressECszSBfr06AIl_11cbor_encode:
  403|    600|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    600|        value.serialize(&mut *self.ser)
  405|    600|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCs4CKPQBR6N6O_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECszSBfr06AIl_11cbor_encode:
  403|    600|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    600|        value.serialize(&mut *self.ser)
  405|    600|    }
_RNvXs_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer15serialize_bytesCszSBfr06AIl_11cbor_encode:
  160|  7.96k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  7.96k|        Ok(())
  162|  7.96k|    }
_RNvXs_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer15serialize_tupleCszSBfr06AIl_11cbor_encode:
  239|    600|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    600|        Ok(BoundedCollect { ser: self })
  241|    600|    }
_RNvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct3endCszSBfr06AIl_11cbor_encode:
  408|    600|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    600|        Ok(())
  410|    600|    }
_RINvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser12SerializeSeq17serialize_elementRNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressECszSBfr06AIl_11cbor_encode:
  369|  5.56k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  5.56k|        value.serialize(&mut *self.ser)
  371|  5.56k|    }
_RNvXs0_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser12SerializeSeq3endCszSBfr06AIl_11cbor_encode:
  374|    600|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    600|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    600|        }
  378|       |
  379|    600|        Ok(())
  380|    600|    }
_RNvXs7_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer15serialize_bytesCszSBfr06AIl_11cbor_encode:
  550|    600|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    600|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    600|        let prefixed = [&[0x00], value].concat();
  553|    600|        // CIDs are serialized with CBOR tag 42.
  554|    600|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    600|        Ok(())
  556|    600|    }
_RNvXs_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer13serialize_u64CszSBfr06AIl_11cbor_encode:
  123|    600|        v.encode(&mut self.writer)?;
  124|    600|        Ok(())
  125|    600|    }
_RNvMNtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterE3newCszSBfr06AIl_11cbor_encode:
   51|    600|    pub fn new(writer: W) -> Serializer<W> {
   52|    600|        Serializer { writer }
   53|    600|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECszSBfr06AIl_11cbor_encode:
  403|    600|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    600|        value.serialize(&mut *self.ser)
  405|    600|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs343odjcBp0F_5alloc3vec3VecNtNtCs9ff7F6wMzAG_10fvm_shared7address7AddressEECszSBfr06AIl_11cbor_encode:
  403|    600|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    600|        value.serialize(&mut *self.ser)
  405|    600|    }
_RINvXs_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer24serialize_newtype_structNtNtCs1owG3mNzcPR_11serde_bytes7bytebuf7ByteBufECszSBfr06AIl_11cbor_encode:
  199|    600|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    600|        self,
  201|    600|        name: &'static str,
  202|    600|        value: &T,
  203|    600|    ) -> Result<Self::Ok, Self::Error> {
  204|    600|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    600|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    600|    }
_RINvNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser6to_vecNtNtCs4CKPQBR6N6O_11common_fuzz4cbor7PayloadECszSBfr06AIl_11cbor_encode:
   23|    600|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    600|where
   25|    600|    T: Serialize + ?Sized,
   26|    600|{
   27|    600|    let writer = BufWriter::new(Vec::new());
   28|    600|    let mut serializer = Serializer::new(writer);
   29|    600|    value.serialize(&mut serializer)?;
   30|    600|    Ok(serializer.into_inner().into_inner())
   31|    600|}
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCslD4YlW8dPJX_3cid3cid3CidKj40_EECszSBfr06AIl_11cbor_encode:
  403|    600|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    600|        value.serialize(&mut *self.ser)
  405|    600|    }
_RINvXs2_NtCscMfELGN0GKV_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterENtNtCs8xsbAZ3I3jM_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsdDqph7764Ox_17fvm_ipld_bitfield8BitFieldECszSBfr06AIl_11cbor_encode:
  403|    600|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    600|        value.serialize(&mut *self.ser)
  405|    600|    }

_RNvXCsdfXPLf7iWxv_11serde_tupleINtB2_10SerializerQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEENtNtCs8xsbAZ3I3jM_5serde3ser10Serializer22serialize_tuple_structCszSBfr06AIl_11cbor_encode:
  158|    600|    fn serialize_tuple_struct(
  159|    600|        self,
  160|    600|        name: &'static str,
  161|    600|        len: usize,
  162|    600|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    600|        self.0.serialize_tuple_struct(name, len)
  164|    600|    }
_RINvXs_CsdfXPLf7iWxv_11serde_tupleINtB5_12DeserializerQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEENtNtCs8xsbAZ3I3jM_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECszSBfr06AIl_11cbor_encode:
  353|    300|    fn deserialize_tuple_struct<V>(
  354|    300|        self,
  355|    300|        name: &'static str,
  356|    300|        len: usize,
  357|    300|        visitor: V,
  358|    300|    ) -> Result<V::Value, Self::Error>
  359|    300|    where
  360|    300|        V: serde::de::Visitor<'de>,
  361|    300|    {
  362|    300|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    300|    }

_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6decode7is_lastCszSBfr06AIl_11cbor_encode:
   90|  3.62k|pub fn is_last(b: u8) -> bool {
   91|  3.62k|    b & 0x80 == 0
   92|  3.62k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6decode3u64CszSBfr06AIl_11cbor_encode:
  122|  1.17k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.17k|    decode!(buf, 9, u64)
  124|  1.17k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6decode3u64Cs9ff7F6wMzAG_10fvm_shared:
  122|  1.86k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.86k|    decode!(buf, 9, u64)
  124|  1.86k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6decode7is_lastCs9ff7F6wMzAG_10fvm_shared:
   90|  14.5k|pub fn is_last(b: u8) -> bool {
   91|  14.5k|    b & 0x80 == 0
   92|  14.5k|}

_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode2u8CszSBfr06AIl_11cbor_encode:
   45|    600|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    600|    encode!(number, buf)
   47|    600|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode9u8_bufferCszSBfr06AIl_11cbor_encode:
  101|    600|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    600|    [0; U8_LEN]
  103|    600|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode10u64_bufferCszSBfr06AIl_11cbor_encode:
  119|  2.92k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  2.92k|    [0; U64_LEN]
  121|  2.92k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode3u64CszSBfr06AIl_11cbor_encode:
   69|  1.75k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.75k|    encode!(number, buf)
   71|  1.75k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode3u64Cs9ff7F6wMzAG_10fvm_shared:
   69|  3.72k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  3.72k|    encode!(number, buf)
   71|  3.72k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode10u64_bufferCs9ff7F6wMzAG_10fvm_shared:
  119|  3.72k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.72k|    [0; U64_LEN]
  121|  3.72k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode3u64CsdDqph7764Ox_17fvm_ipld_bitfield:
   69|  7.95k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  7.95k|    encode!(number, buf)
   71|  7.95k|}
_RNvNtCs2E8Eyk3zSdB_15unsigned_varint6encode10u64_bufferCsdDqph7764Ox_17fvm_ipld_bitfield:
  119|  7.95k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  7.95k|    [0; U64_LEN]
  121|  7.95k|}

_RINvNtCs2E8Eyk3zSdB_15unsigned_varint2io8read_u64QQRShECszSBfr06AIl_11cbor_encode:
   31|  1.17k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.17k|                let mut b = encode::$b();
   33|  1.81k|                for i in 0 .. b.len() {
   34|  1.81k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.81k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.81k|                    }
   38|  1.81k|                    if decode::is_last(b[i]) {
   39|  1.17k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    634|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.17k|            }

_RNvMsa_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    933|    pub fn new(iter: I) -> Self {
  425|    933|        Self {
  426|    933|            iter: Lookahead::new(iter),
  427|    933|        }
  428|    933|    }
_RNvMs5_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    933|    pub fn new(a: A, b: B) -> Self {
  298|    933|        Self(Merge::new(_Combine::new(a, b)))
  299|    933|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|  1.86k|    fn new(mut iter: I) -> Self {
  468|  1.86k|        let next = iter.next();
  469|  1.86k|        Self { iter, next }
  470|  1.86k|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    933|    fn new(mut iter: I) -> Self {
  468|    933|        let next = iter.next();
  469|    933|        Self { iter, next }
  470|    933|    }
_RNvMs8_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  7.65k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.65k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  6.72k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    933|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  6.72k|        if advance_lhs {
  370|  6.72k|            self.lhs.next();
  371|  6.72k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  6.72k|        range
  376|  7.65k|    }
_RNvXs6_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.65k|        self.0.next()
  312|  7.65k|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  7.65k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.65k|        self.next.as_mut()
  474|  7.65k|    }
_RNCNvXs9_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  7.65k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsb_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.65k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  6.72k|        while let Some(next) = self.iter.peek() {
  443|  6.25k|            if next.start > range.end {
  444|  6.25k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  6.72k|        Some(range)
  452|  7.65k|    }
_RNvMs8_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    933|    fn new(lhs: A, rhs: B) -> Self {
  343|    933|        Self {
  344|    933|            lhs: Lookahead::new(lhs),
  345|    933|            rhs: Lookahead::new(rhs),
  346|    933|            combinator: Default::default(),
  347|    933|        }
  348|    933|    }
_RNCNvXs9_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  7.65k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  6.72k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.72k|        let next = self.next.take()?;
  483|  6.72k|        self.next = self.iter.next();
  484|  6.72k|        Some(next)
  485|  6.72k|    }
_RNvXse_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.65k|        let next = self.next.take()?;
  483|  6.72k|        self.next = self.iter.next();
  484|  6.72k|        Some(next)
  485|  7.65k|    }
_RNvMs8_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    933|    fn new(lhs: A, rhs: B) -> Self {
  343|    933|        Self {
  344|    933|            lhs: Lookahead::new(lhs),
  345|    933|            rhs: Lookahead::new(rhs),
  346|    933|            combinator: Default::default(),
  347|    933|        }
  348|    933|    }
_RNvMs8_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  7.65k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.65k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  6.72k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    933|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  6.72k|        if advance_lhs {
  370|  6.72k|            self.lhs.next();
  371|  6.72k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  6.72k|        range
  376|  7.65k|    }
_RNvXs6_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.65k|        self.0.next()
  312|  7.65k|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    933|    fn new(mut iter: I) -> Self {
  468|    933|        let next = iter.next();
  469|    933|        Self { iter, next }
  470|    933|    }
_RNvXse_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.65k|        let next = self.next.take()?;
  483|  6.72k|        self.next = self.iter.next();
  484|  6.72k|        Some(next)
  485|  7.65k|    }
_RNvXs9_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.65k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.65k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.65k|    }
_RNCNvXs9_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  6.72k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  6.72k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.72k|        let next = self.next.take()?;
  483|  6.72k|        self.next = self.iter.next();
  484|  6.72k|        Some(next)
  485|  6.72k|    }
_RNvXsb_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.65k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  6.72k|        while let Some(next) = self.iter.peek() {
  443|  6.25k|            if next.start > range.end {
  444|  6.25k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  6.72k|        Some(range)
  452|  7.65k|    }
_RNvXsh_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsgn2LvMKFZQq_4core7default7Default7defaultB9_:
  151|    933|#[derive(Default)]
_RNvXs9_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.65k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.65k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.65k|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.65k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.65k|        self.next.as_mut()
  474|  7.65k|    }
_RNvXs0_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  6.72k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  6.72k|        // the difference between a range and an empty range is just that range
  183|  6.72k|        Some(lhs)
  184|  6.72k|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  15.3k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  15.3k|        self.next.as_mut()
  474|  15.3k|    }
_RNCNvXs9_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  6.72k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  6.72k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.72k|        self.next.as_mut()
  474|  6.72k|    }
_RNvMs5_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    933|    pub fn new(a: A, b: B) -> Self {
  298|    933|        Self(Merge::new(_Combine::new(a, b)))
  299|    933|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  6.72k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.72k|        self.next.as_mut()
  474|  6.72k|    }
_RNvXNtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  6.72k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  6.72k|        // the union of a range and an empty range is just that range
  111|  6.72k|        Some(lhs)
  112|  6.72k|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    933|    fn new(mut iter: I) -> Self {
  468|    933|        let next = iter.next();
  469|    933|        Self { iter, next }
  470|    933|    }
_RNvMsd_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    933|    fn new(mut iter: I) -> Self {
  468|    933|        let next = iter.next();
  469|    933|        Self { iter, next }
  470|    933|    }
_RNvXsf_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsgn2LvMKFZQq_4core7default7Default7defaultB9_:
   86|    933|#[derive(Default)]
_RNvMsa_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    933|    pub fn new(iter: I) -> Self {
  425|    933|        Self {
  426|    933|            iter: Lookahead::new(iter),
  427|    933|        }
  428|    933|    }

_RNCINvNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  1.86k|    Ranges::new(iter::from_fn(move || {
  167|  1.86k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  1.86k|    }))
_RINvYINtNtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    933|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    933|        Combine::new(self, other)
   33|    933|    }
_RNvXs3_NtCsdDqph7764Ox_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  1.86k|    fn next(&mut self) -> Option<Self::Item> {
  154|  1.86k|        self.0.next()
  155|  1.86k|    }
_RINvMs2_NtCsdDqph7764Ox_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    933|    pub fn new<II>(iter: II) -> Self
  140|    933|    where
  141|    933|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    933|    {
  143|    933|        Self(iter.into_iter())
  144|    933|    }
_RINvNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEEB4_:
  163|  1.86k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  1.86k|    let mut iter = bits.into_iter().peekable();
  165|  1.86k|
  166|  1.86k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  1.86k|    }))
  180|  1.86k|}
_RINvMs2_NtCsdDqph7764Ox_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  1.86k|    pub fn new<II>(iter: II) -> Self
  140|  1.86k|    where
  141|  1.86k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  1.86k|    {
  143|  1.86k|        Self(iter.into_iter())
  144|  1.86k|    }
_RINvYINtNtCsdDqph7764Ox_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs343odjcBp0F_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    933|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    933|        Combine::new(self, other)
   23|    933|    }
_RNvXs3_NtCsdDqph7764Ox_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsgn2LvMKFZQq_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  7.65k|    fn next(&mut self) -> Option<Self::Item> {
  154|  7.65k|        self.0.next()
  155|  7.65k|    }

_RNvXsi_CsdDqph7764Ox_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsgn2LvMKFZQq_4core7default7Default7defaultB5_:
   42|  1.07k|#[derive(Debug, Default, Clone)]
_RNvMs4_CsdDqph7764Ox_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    933|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    933|        self.inner_ranges()
  287|    933|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    933|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    933|    }
_RNvMs4_CsdDqph7764Ox_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    933|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    933|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    933|    }

_RNvXNtCsdDqph7764Ox_17fvm_ipld_bitfield5rangeINtNtNtCsgn2LvMKFZQq_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  6.72k|    fn size(&self) -> Self::Idx {
   15|  6.72k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  6.72k|            self.end - self.start
   19|       |        }
   20|  6.72k|    }

_RINvXs_NtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   97|    300|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    300|    where
   99|    300|        D: Deserializer<'de>,
  100|    300|    {
  101|    300|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    300|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    300|        }
  108|    300|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    300|    }
_RINvXNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   81|    760|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    760|    where
   83|    760|        S: Serializer,
   84|    760|    {
   85|    760|        let bytes = self.to_bytes();
   86|    760|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    760|        }
   92|    760|        serde_bytes::serialize(&bytes, serializer)
   93|    760|    }
_RNvMs1_NtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    933|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    933|        let mut iter = self.ranges();
  201|       |
  202|    933|        let first_range = match iter.next() {
  203|    467|            Some(range) => range,
  204|    466|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    467|        let mut writer = BitWriter::new();
  208|    467|        writer.write(0, 2); // version 00
  209|    467|
  210|    467|        if first_range.start == 0 {
  211|    205|            writer.write(1, 1); // the first bit is a 1
  212|    262|        } else {
  213|    262|            writer.write(0, 1); // the first bit is a 0
  214|    262|            writer.write_len(first_range.start); // the number of leading 0s
  215|    262|        }
  216|       |
  217|    467|        writer.write_len(first_range.size());
  218|    467|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  6.72k|        for range in iter {
  223|  6.25k|            writer.write_len(range.start - index); // zeros
  224|  6.25k|            writer.write_len(range.size()); // ones
  225|  6.25k|            index = range.end;
  226|  6.25k|        }
  227|       |
  228|    467|        writer.finish()
  229|    933|    }
_RNvMs1_NtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    300|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    300|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    300|        let version = reader.read(2);
  160|    300|        if version != 0 {
  161|      0|            return Err(Error::UnsupportedVersion);
  162|    300|        }
  163|    300|
  164|    300|        let mut next_value = reader.read(1) == 1;
  165|    300|        let mut ranges = Vec::new();
  166|    300|        let mut index = 0u64;
  167|    300|        let mut total_len: u64 = 0;
  168|       |
  169|  6.49k|        while let Some(len) = reader.read_len()? {
  170|  6.19k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  6.19k|            if ovf {
  172|      0|                return Err(Error::RLEOverflow);
  173|  6.19k|            }
  174|  6.19k|            total_len = new_total_len;
  175|  6.19k|            let start = index;
  176|  6.19k|            index += len;
  177|  6.19k|            let end = index;
  178|  6.19k|
  179|  6.19k|            if next_value {
  180|  3.13k|                ranges.push(start..end);
  181|  3.13k|            }
  182|       |
  183|  6.19k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    300|        if next_value {
  189|      0|            return Err(Error::NotMinimal);
  190|    300|        }
  191|    300|
  192|    300|        Ok(Self {
  193|    300|            ranges,
  194|    300|            ..Default::default()
  195|    300|        })
  196|    300|    }
_RNvXs0_NtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hint:
  149|    776|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    776|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    776|    }
_RNvXs0_NtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitrary:
  113|    774|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|    774|        let mut next_value: bool = bool::arbitrary(u)?;
  115|    774|        let mut ranges = Vec::new();
  116|    774|        let mut index = 0u64;
  117|    774|        let mut total_len: u64 = 0;
  118|       |
  119|    774|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|    774|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  8.21k|            let len = u64::arbitrary(u)?;
  124|  8.21k|            let shift = u.int_in_range(0..=63)?;
  125|  8.21k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  8.21k|
  127|  8.21k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  8.21k|            if ovf {
  129|     28|                break;
  130|  8.19k|            }
  131|  8.19k|            total_len = new_total_len;
  132|  8.19k|            let start = index;
  133|  8.19k|            index += len;
  134|  8.19k|            let end = index;
  135|  8.19k|
  136|  8.19k|            if next_value {
  137|  4.11k|                ranges.push(start..end);
  138|  4.11k|            }
  139|       |
  140|  8.19k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|    774|        Ok(Self {
  144|    774|            ranges,
  145|    774|            ..Default::default()
  146|    774|        })
  147|    774|    }

_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    300|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    300|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    300|        // data.
   28|    300|        if bytes.last() == Some(&0) {
   29|      0|            return Err(Error::NotMinimal);
   30|    300|        }
   31|    300|        let mut bits = 0u64;
   32|    900|        for i in 0..2 {
   33|    600|            let byte = bytes.get(i).unwrap_or(&0);
   34|    600|            bits |= (*byte as u64) << (8 * i);
   35|    600|        }
   36|       |
   37|    300|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    300|
   39|    300|        Ok(Self {
   40|    300|            bytes,
   41|    300|            bits,
   42|    300|            num_bits: 16,
   43|    300|        })
   44|    300|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  3.66k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  3.66k|        let mut len = 0u64;
   94|       |
   95|  19.5k|        for i in 0..VARINT_MAX_BYTES {
   96|  19.5k|            let byte = self.read(8);
   97|  19.5k|
   98|  19.5k|            // strip off the most significant bit and add
   99|  19.5k|            // it to the output
  100|  19.5k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  19.5k|
  102|  19.5k|            // if the most significant bit is a 0, we've
  103|  19.5k|            // reached the end of the varint
  104|  19.5k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  3.66k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      0|                    break;
  109|  3.66k|                }
  110|  3.66k|                return Ok(len);
  111|  15.9k|            }
  112|       |        }
  113|       |
  114|      0|        Err(Error::InvalidVarint)
  115|  3.66k|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  6.49k|    pub fn has_more(&self) -> bool {
  153|  6.49k|        self.bits != 0 || !self.bytes.is_empty()
  154|  6.49k|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  20.1k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  20.1k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  20.1k|        let res = self.peek(num_bits);
   85|  20.1k|        self.drop(num_bits);
   86|  20.1k|
   87|  20.1k|        res
   88|  20.1k|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  6.49k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  6.49k|        // We're done.
  120|  6.49k|        if !self.has_more() {
  121|    300|            return Ok(None);
  122|  6.19k|        }
  123|  6.19k|
  124|  6.19k|        let peek6 = self.peek(6);
  125|       |
  126|  6.19k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|    871|            self.drop(1);
  129|    871|            1
  130|  5.32k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  1.66k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  1.66k|            self.drop(6);
  134|  1.66k|            if val < 2 {
  135|      0|                return Err(Error::NotMinimal);
  136|  1.66k|            }
  137|  1.66k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  3.66k|            self.drop(2);
  141|  3.66k|            let val = self.read_varint()?;
  142|  3.66k|            if val < 16 {
  143|      0|                return Err(Error::NotMinimal);
  144|  3.66k|            }
  145|  3.66k|            val
  146|       |        };
  147|       |
  148|  6.19k|        Ok(Some(len))
  149|  6.49k|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  26.3k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  26.3k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  26.3k|        let mask = (1 << num_bits) - 1;
   55|  26.3k|        (self.bits & mask) as u8
   56|  26.3k|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  26.3k|    pub fn drop(&mut self, num_bits: u32) {
   61|  26.3k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  26.3k|        self.bits >>= num_bits;
   65|  26.3k|        self.num_bits -= num_bits;
   66|  26.3k|
   67|  26.3k|        // not sure why this being outside of the if improves the performance
   68|  26.3k|        // bit it does, probably related to keeping caches warm
   69|  26.3k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  26.3k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  26.3k|
   72|  26.3k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  26.3k|        if self.num_bits < 8 {
   74|  21.8k|            self.num_bits += 8;
   75|  21.8k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  21.8k|        }
   77|  26.3k|    }

_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  13.2k|    pub fn write_len(&mut self, len: u64) {
   39|  13.2k|        debug_assert!(len > 0);
   40|       |
   41|  13.2k|        if len == 1 {
   42|  1.81k|            // Block Single (prefix 1)
   43|  1.81k|            self.write(1, 1);
   44|  11.4k|        } else if len < 16 {
   45|  3.48k|            // Block Short (prefix 01)
   46|  3.48k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  3.48k|            self.write(len as u8, 4);
   48|  3.48k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  7.95k|            self.write(0, 2);
   51|  7.95k|
   52|  7.95k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  43.1k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  43.1k|                self.write(byte, 8);
   55|  43.1k|            }
   56|       |        }
   57|  13.2k|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    467|    pub fn finish(mut self) -> Vec<u8> {
   61|    467|        if self.bits > 0 {
   62|    228|            self.bytes.push(self.bits as u8);
   63|    239|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    467|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    467|        self.bytes
   71|    467|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  60.8k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  60.8k|        debug_assert!(num_bits <= 8);
   24|  60.8k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  60.8k|        self.bits |= (byte as u16) << self.num_bits;
   27|  60.8k|        self.num_bits += num_bits;
   28|  60.8k|
   29|  60.8k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  60.8k|        if self.num_bits >= 8 {
   31|  47.9k|            self.bytes.push(self.bits as u8);
   32|  47.9k|            self.bits >>= 8;
   33|  47.9k|            self.num_bits -= 8;
   34|  47.9k|        }
   35|  60.8k|    }
_RNvMNtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    467|    pub fn new() -> Self {
   18|    467|        Default::default()
   19|    467|    }
_RNvXs_NtNtCsdDqph7764Ox_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsgn2LvMKFZQq_4core7default7Default7defaultB8_:
    4|    467|#[derive(Default, Clone, Debug)]

_RINvXs4_NtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   93|    300|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    300|    where
   95|    300|        D: Deserializer<'de>,
   96|    300|    {
   97|    300|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    300|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    300|        }
  104|    300|        Ok(Self::Unvalidated(bytes))
  105|    300|    }
_RINvXNvNtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   35|    600|#[derive(Debug, Serialize)]
_RINvXNvXNvNtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   35|    440|#[derive(Debug, Serialize)]
_RNvXs1_NtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hint:
   70|    388|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   71|    388|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   72|    388|    }
_RNvXs1_NtCsdDqph7764Ox_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitrary:
   61|    387|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   62|    387|        let bf: BitField = u.arbitrary()?;
   63|    387|        Ok(if *u.choose(&[true, false])? {
   64|    174|            Self::Validated(bf)
   65|       |        } else {
   66|    173|            Self::Unvalidated(bf.to_bytes())
   67|       |        })
   68|    387|    }

_RINvCslwKsiToc5CE_17fvm_ipld_encoding10from_sliceNtNtCs4CKPQBR6N6O_11common_fuzz4cbor7PayloadECszSBfr06AIl_11cbor_encode:
   50|    300|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    300|where
   52|    300|    T: de::Deserialize<'a>,
   53|    300|{
   54|    300|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    300|}
_RINvCslwKsiToc5CE_17fvm_ipld_encoding6to_vecNtNtCs4CKPQBR6N6O_11common_fuzz4cbor7PayloadECszSBfr06AIl_11cbor_encode:
   33|    600|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    600|where
   35|    600|    T: ser::Serialize + ?Sized,
   36|    600|{
   37|    600|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    600|}

_RNCNvXse_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB7_7AddressNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
   68|    388|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXse_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB5_7AddressNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
   68|    388|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs3_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB6_7AddressNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
  274|  3.08k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  3.08k|    where
  276|  3.08k|        D: Deserializer<'de>,
  277|  3.08k|    {
  278|  3.08k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  3.08k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  3.08k|    }
_RINvXs2_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB6_7AddressNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
  264|  6.16k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|  6.16k|    where
  266|  6.16k|        S: Serializer,
  267|  6.16k|    {
  268|  6.16k|        let address_bytes = self.to_bytes();
  269|  6.16k|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|  6.16k|    }
_RNvMs_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  3.08k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  3.08k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  3.08k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  3.08k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  3.08k|    }
_RNvMs_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|  6.16k|    pub fn to_bytes(self) -> Vec<u8> {
  177|  6.16k|        self.payload.to_bytes()
  178|  6.16k|    }
_RNvXse_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB5_7AddressNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitrary:
   68|  3.63k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvNtCs9ff7F6wMzAG_10fvm_shared7address14from_leb_bytes:
  315|  1.86k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|  1.86k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|  1.86k|    if !remaining.is_empty() {
  319|      0|        return Err(Error::InvalidPayload);
  320|  1.86k|    }
  321|  1.86k|    Ok(id)
  322|  1.86k|}
_RNvNtCs9ff7F6wMzAG_10fvm_shared7address12to_leb_bytes:
  310|  3.72k|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|  3.72k|    // write id to buffer in leb128 format
  312|  3.72k|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|  3.72k|}
_RNvMs_NtCs9ff7F6wMzAG_10fvm_shared7addressNtB4_7Address3new:
   78|  3.08k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  3.08k|        Ok(Self {
   80|  3.08k|            network,
   81|  3.08k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  3.08k|    }

_RNvXs8_NtNtCs9ff7F6wMzAG_10fvm_shared7address7networkNtB5_7NetworkNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
    8|    388|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXs8_NtNtCs9ff7F6wMzAG_10fvm_shared7address7networkNtB7_7NetworkNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
    8|    388|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs8_NtNtCs9ff7F6wMzAG_10fvm_shared7address7networkNtB5_7NetworkNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitrary:
    8|  3.63k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNCNvXs9_NtNtCs9ff7F6wMzAG_10fvm_shared7address7payloadNtB7_7PayloadNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
   12|    388|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs9_NtNtCs9ff7F6wMzAG_10fvm_shared7address7payloadNtB5_7PayloadNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
   12|    388|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtNtCs9ff7F6wMzAG_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|  6.16k|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|  6.16k|        let mut bz = match self {
   40|  3.72k|            ID(i) => to_leb_bytes(i).unwrap(),
   41|  1.42k|            Secp256k1(arr) => arr.to_vec(),
   42|    488|            Actor(arr) => arr.to_vec(),
   43|    534|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|  6.16k|        bz.insert(0, Protocol::from(self) as u8);
   47|  6.16k|        bz
   48|  6.16k|    }
_RNvXs_NtNtCs9ff7F6wMzAG_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsgn2LvMKFZQq_4core7convert4FromNtB4_7PayloadE4from:
   75|  6.16k|    fn from(pl: Payload) -> Self {
   76|  6.16k|        match pl {
   77|  3.72k|            Payload::ID(_) => Self::ID,
   78|  1.42k|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|    488|            Payload::Actor(_) => Self::Actor,
   80|    534|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|  6.16k|    }
_RNvXs9_NtNtCs9ff7F6wMzAG_10fvm_shared7address7payloadNtB5_7PayloadNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9arbitrary:
   12|  3.63k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtNtCs9ff7F6wMzAG_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  3.08k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  3.08k|        let payload = match protocol {
   53|  1.86k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    710|                payload
   56|    710|                    .try_into()
   57|    710|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    244|                payload
   61|    244|                    .try_into()
   62|    244|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    267|                payload
   66|    267|                    .try_into()
   67|    267|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  3.08k|        Ok(payload)
   71|  3.08k|    }

_RNvMNtNtCs9ff7F6wMzAG_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  3.08k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  3.08k|        FromPrimitive::from_u8(b)
   28|  3.08k|    }
_RNvXNvNtNtCs9ff7F6wMzAG_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs4WPkokWIg9T_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  3.08k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs9ff7F6wMzAG_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs4WPkokWIg9T_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  3.08k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RNCINvXNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtBd_7PayloadNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de8AccessorNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEE0CszSBfr06AIl_11cbor_encode:
   10|    300|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtBe_7PayloadNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   10|    300|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCs4CKPQBR6N6O_11common_fuzz4cborNtB5_7PayloadNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hintCszSBfr06AIl_11cbor_encode:
   10|    388|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCs4CKPQBR6N6O_11common_fuzz4cborNtB5_7PayloadNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   10|    600|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXs0_NtCs4CKPQBR6N6O_11common_fuzz4cborNtB7_7PayloadNtCsjBcml9vA1Kd_9arbitrary9Arbitrary9size_hint0CszSBfr06AIl_11cbor_encode:
   10|    388|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB3_7PayloadNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEECszSBfr06AIl_11cbor_encode:
   10|    300|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCs4CKPQBR6N6O_11common_fuzz4cborNtBd_7PayloadNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEECszSBfr06AIl_11cbor_encode:
   10|    600|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCs4CKPQBR6N6O_11common_fuzz4cborNtBa_7PayloadNtNtCs8xsbAZ3I3jM_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCsdfXPLf7iWxv_11serde_tuple10SerializerQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils9BufWriterEEECszSBfr06AIl_11cbor_encode:
   10|    600|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCs4CKPQBR6N6O_11common_fuzz4cborNtB8_7PayloadNtNtCs8xsbAZ3I3jM_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCsdfXPLf7iWxv_11serde_tuple12DeserializerQINtNtCscMfELGN0GKV_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsfms0KnAOgQz_7cbor4ii4core5utils11SliceReaderEEECszSBfr06AIl_11cbor_encode:
   10|    300|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCs4CKPQBR6N6O_11common_fuzz4cborNtB5_7PayloadNtCsjBcml9vA1Kd_9arbitrary9Arbitrary19arbitrary_take_rest:
   10|    474|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

