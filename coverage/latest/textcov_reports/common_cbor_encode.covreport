_RNvXsC_Cs32eqjyNRx4W_9arbitraryhNtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  302|  35.6k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  35.6k|                    let n = mem::size_of::<$ty>();
  304|  35.6k|                    (n, Some(n))
  305|  35.6k|                }
_RINvCs32eqjyNRx4W_9arbitrary12create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9size_hint0TjINtNtCsdfvWPs5hvoc_4core6option6OptionjEEKBR_ECsk3tAPBwF8ov_11cbor_encode:
  596|    379|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    379|where
  598|    379|    F: FnMut(usize) -> T,
  599|    379|{
  600|    379|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    379|    let array_ptr = array.as_mut_ptr();
  602|    379|    let dst = array_ptr as _;
  603|    379|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    379|        dst,
  605|    379|        initialized: 0,
  606|    379|    };
  607|       |    unsafe {
  608|  18.1k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  18.1k|            core::ptr::write(value_ptr, cb(idx));
  610|  18.1k|            guard.initialized += 1;
  611|  18.1k|        }
  612|    379|        mem::forget(guard);
  613|    379|        array.assume_init()
  614|    379|    }
  615|    379|}
_RINvCs32eqjyNRx4W_9arbitrary12create_arrayNCNvXs8_B2_Ahj3_NtB2_9Arbitrary9size_hint0TjINtNtCsdfvWPs5hvoc_4core6option6OptionjEEKBR_ECsk3tAPBwF8ov_11cbor_encode:
  596|    379|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    379|where
  598|    379|    F: FnMut(usize) -> T,
  599|    379|{
  600|    379|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    379|    let array_ptr = array.as_mut_ptr();
  602|    379|    let dst = array_ptr as _;
  603|    379|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    379|        dst,
  605|    379|        initialized: 0,
  606|    379|    };
  607|       |    unsafe {
  608|  1.13k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  1.13k|            core::ptr::write(value_ptr, cb(idx));
  610|  1.13k|            guard.initialized += 1;
  611|  1.13k|        }
  612|    379|        mem::forget(guard);
  613|    379|        array.assume_init()
  614|    379|    }
  615|    379|}
_RNCNvXs8_Cs32eqjyNRx4W_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
  658|  1.13k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  1.13k|            <T as Arbitrary>::size_hint(d)
  660|  1.13k|        }))
_RNCNvXs8_Cs32eqjyNRx4W_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
  658|  15.1k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  15.1k|            <T as Arbitrary>::size_hint(d)
  660|  15.1k|        }))
_RINvCs32eqjyNRx4W_9arbitrary12create_arrayNCNvXs8_B2_Ahj2_NtB2_9Arbitrary9size_hint0TjINtNtCsdfvWPs5hvoc_4core6option6OptionjEEKBR_ECsk3tAPBwF8ov_11cbor_encode:
  596|    379|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    379|where
  598|    379|    F: FnMut(usize) -> T,
  599|    379|{
  600|    379|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    379|    let array_ptr = array.as_mut_ptr();
  602|    379|    let dst = array_ptr as _;
  603|    379|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    379|        dst,
  605|    379|        initialized: 0,
  606|    379|    };
  607|       |    unsafe {
  608|    758|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|    758|            core::ptr::write(value_ptr, cb(idx));
  610|    758|            guard.initialized += 1;
  611|    758|        }
  612|    379|        mem::forget(guard);
  613|    379|        array.assume_init()
  614|    379|    }
  615|    379|}
_RNvXs8_Cs32eqjyNRx4W_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  657|    379|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    379|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    379|        }))
  661|    379|    }
_RNvXsE_Cs32eqjyNRx4W_9arbitrarymNtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  302|    758|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    758|                    let n = mem::size_of::<$ty>();
  304|    758|                    (n, Some(n))
  305|    758|                }
_RNvXsa_Cs32eqjyNRx4W_9arbitraryINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  690|    379|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    379|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    379|    }
_RNCNvXs8_Cs32eqjyNRx4W_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
  658|    758|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|    758|            <T as Arbitrary>::size_hint(d)
  660|    758|        }))
_RNvXs8_Cs32eqjyNRx4W_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  657|    379|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    379|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    379|        }))
  661|    379|    }
_RNCNvXs8_Cs32eqjyNRx4W_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
  658|  18.1k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  18.1k|            <T as Arbitrary>::size_hint(d)
  660|  18.1k|        }))
_RNvXsF_Cs32eqjyNRx4W_9arbitraryyNtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  302|    758|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    758|                    let n = mem::size_of::<$ty>();
  304|    758|                    (n, Some(n))
  305|    758|                }
_RNvXsH_Cs32eqjyNRx4W_9arbitraryjNtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  302|    758|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    758|                    let n = mem::size_of::<$ty>();
  304|    758|                    (n, Some(n))
  305|    758|                }
_RINvCs32eqjyNRx4W_9arbitrary12create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9size_hint0TjINtNtCsdfvWPs5hvoc_4core6option6OptionjEEKBR_ECsk3tAPBwF8ov_11cbor_encode:
  596|    758|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    758|where
  598|    758|    F: FnMut(usize) -> T,
  599|    758|{
  600|    758|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    758|    let array_ptr = array.as_mut_ptr();
  602|    758|    let dst = array_ptr as _;
  603|    758|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    758|        dst,
  605|    758|        initialized: 0,
  606|    758|    };
  607|       |    unsafe {
  608|  15.1k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  15.1k|            core::ptr::write(value_ptr, cb(idx));
  610|  15.1k|            guard.initialized += 1;
  611|  15.1k|        }
  612|    758|        mem::forget(guard);
  613|    758|        array.assume_init()
  614|    758|    }
  615|    758|}
_RNvXs8_Cs32eqjyNRx4W_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  657|    758|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    758|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    758|        }))
  661|    758|    }
_RNvXsa_Cs32eqjyNRx4W_9arbitraryINtNtCsgQSQvYPv5Lh_5alloc3vec3VechENtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  690|    379|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    379|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    379|    }
_RNvXs8_Cs32eqjyNRx4W_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
  657|    379|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    379|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    379|        }))
  661|    379|    }
_RNvXsa_Cs32eqjyNRx4W_9arbitraryINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCsk41howMPpCY_11common_fuzz:
  682|    378|        u.arbitrary_iter()?.collect()
  683|    378|    }
_RNvYINtNtCs3YCk2P3iCxf_3cid3cid3CidKj40_ENtCs32eqjyNRx4W_9arbitrary9Arbitrary19arbitrary_take_restCsk41howMPpCY_11common_fuzz:
  182|    335|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    335|        Self::arbitrary(&mut u)
  184|    335|    }
_RNvXsa_Cs32eqjyNRx4W_9arbitraryINtNtCsgQSQvYPv5Lh_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCsk41howMPpCY_11common_fuzz:
  682|    378|        u.arbitrary_iter()?.collect()
  683|    378|    }
_RNvXs8_Cs32eqjyNRx4W_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCs2JEVZ2c23HI_10fvm_shared:
  643|  1.12k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|  1.12k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|  1.12k|    }
_RNvXs8_Cs32eqjyNRx4W_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCs2JEVZ2c23HI_10fvm_shared:
  643|    357|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    357|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    357|    }
_RINvCs32eqjyNRx4W_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECs2JEVZ2c23HI_10fvm_shared:
  617|  1.12k|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|  1.12k|where
  619|  1.12k|    F: FnMut(usize) -> Result<T>,
  620|  1.12k|{
  621|  1.12k|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|  1.12k|    let array_ptr = array.as_mut_ptr();
  623|  1.12k|    let dst = array_ptr as _;
  624|  1.12k|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|  1.12k|        dst,
  626|  1.12k|        initialized: 0,
  627|  1.12k|    };
  628|       |    unsafe {
  629|  22.4k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  22.4k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  22.4k|            guard.initialized += 1;
  632|       |        }
  633|  1.12k|        mem::forget(guard);
  634|  1.12k|        Ok(array.assume_init())
  635|       |    }
  636|  1.12k|}
_RINvCs32eqjyNRx4W_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECs2JEVZ2c23HI_10fvm_shared:
  617|    357|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    357|where
  619|    357|    F: FnMut(usize) -> Result<T>,
  620|    357|{
  621|    357|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    357|    let array_ptr = array.as_mut_ptr();
  623|    357|    let dst = array_ptr as _;
  624|    357|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    357|        dst,
  626|    357|        initialized: 0,
  627|    357|    };
  628|       |    unsafe {
  629|  17.1k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  17.1k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  17.1k|            guard.initialized += 1;
  632|       |        }
  633|    357|        mem::forget(guard);
  634|    357|        Ok(array.assume_init())
  635|       |    }
  636|    357|}
_RNCNvXs8_Cs32eqjyNRx4W_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Cs2JEVZ2c23HI_10fvm_shared:
  644|  22.4k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNCNvXs8_Cs32eqjyNRx4W_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Cs2JEVZ2c23HI_10fvm_shared:
  644|  17.1k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXsH_Cs32eqjyNRx4W_9arbitraryjNtB5_9Arbitrary9size_hintCsdd4ud1RNgLx_17fvm_ipld_bitfield:
  302|    758|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    758|                    let n = mem::size_of::<$ty>();
  304|    758|                    (n, Some(n))
  305|    758|                }
_RNvXsC_Cs32eqjyNRx4W_9arbitraryhNtB5_9Arbitrary9size_hintCsdd4ud1RNgLx_17fvm_ipld_bitfield:
  302|    756|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    756|                    let n = mem::size_of::<$ty>();
  304|    756|                    (n, Some(n))
  305|    756|                }
_RNvXs1j_Cs32eqjyNRx4W_9arbitraryTyhENtB6_9Arbitrary9size_hintCsdd4ud1RNgLx_17fvm_ipld_bitfield:
  568|    756|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|    756|                crate::size_hint::and_all(&[
  570|    756|                    <$last as Arbitrary>::size_hint(depth),
  571|    756|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|    756|                ])
  573|    756|            }
_RNvXsF_Cs32eqjyNRx4W_9arbitraryyNtB5_9Arbitrary9size_hintCsdd4ud1RNgLx_17fvm_ipld_bitfield:
  302|    756|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    756|                    let n = mem::size_of::<$ty>();
  304|    756|                    (n, Some(n))
  305|    756|                }
_RNvXsE_Cs32eqjyNRx4W_9arbitrarymNtB5_9Arbitrary9arbitrary:
  291|  7.84k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  7.84k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  7.84k|                    u.fill_buffer(&mut buf)?;
  294|  7.84k|                    let mut x: $unsigned = 0;
  295|  31.3k|                    for i in 0..mem::size_of::<$ty>() {
  296|  31.3k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  31.3k|                    }
  298|  7.84k|                    Ok(x as $ty)
  299|  7.84k|                }
_RNvXsF_Cs32eqjyNRx4W_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  10.8k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  10.8k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  10.8k|                    u.fill_buffer(&mut buf)?;
  294|  10.8k|                    let mut x: $unsigned = 0;
  295|  86.9k|                    for i in 0..mem::size_of::<$ty>() {
  296|  86.9k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  86.9k|                    }
  298|  10.8k|                    Ok(x as $ty)
  299|  10.8k|                }
_RNvXsC_Cs32eqjyNRx4W_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  52.5k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  52.5k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  52.5k|                    u.fill_buffer(&mut buf)?;
  294|  52.5k|                    let mut x: $unsigned = 0;
  295|  52.5k|                    for i in 0..mem::size_of::<$ty>() {
  296|  52.5k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  52.5k|                    }
  298|  52.5k|                    Ok(x as $ty)
  299|  52.5k|                }
_RNvXs_Cs32eqjyNRx4W_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  8.17k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  8.17k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  8.17k|    }

_RINvNtCs32eqjyNRx4W_9arbitrary9size_hint15recursion_guardNCNvXs9_NtNtCs2JEVZ2c23HI_10fvm_shared7address7payloadNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECsk3tAPBwF8ov_11cbor_encode:
   12|    379|pub fn recursion_guard(
   13|    379|    depth: usize,
   14|    379|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    379|) -> (usize, Option<usize>) {
   16|    379|    const MAX_DEPTH: usize = 20;
   17|    379|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    379|        f(depth + 1)
   21|       |    }
   22|    379|}
_RNCNCNvNtCs32eqjyNRx4W_9arbitrary9size_hint2or00Csk3tAPBwF8ov_11cbor_encode:
   48|  1.89k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCs32eqjyNRx4W_9arbitrary9size_hint3and00Csk3tAPBwF8ov_11cbor_encode:
   28|  40.1k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs32eqjyNRx4W_9arbitrary9size_hint3andCsk3tAPBwF8ov_11cbor_encode:
   26|  43.5k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  43.5k|    let lower = lhs.0 + rhs.0;
   28|  43.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  43.5k|    (lower, upper)
   30|  43.5k|}
_RNCNvNtCs32eqjyNRx4W_9arbitrary9size_hint2or0Csk3tAPBwF8ov_11cbor_encode:
   48|  1.89k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCs32eqjyNRx4W_9arbitrary9size_hint3and0Csk3tAPBwF8ov_11cbor_encode:
   28|  41.3k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs32eqjyNRx4W_9arbitrary9size_hint2orCsk3tAPBwF8ov_11cbor_encode:
   44|  1.89k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.89k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.89k|    let upper = lhs
   47|  1.89k|        .1
   48|  1.89k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.89k|    (lower, upper)
   50|  1.89k|}
_RINvNtCs32eqjyNRx4W_9arbitrary9size_hint15recursion_guardNCNvXs8_NtNtCs2JEVZ2c23HI_10fvm_shared7address7networkNtB11_7NetworkNtB4_9Arbitrary9size_hint0ECsk3tAPBwF8ov_11cbor_encode:
   12|    379|pub fn recursion_guard(
   13|    379|    depth: usize,
   14|    379|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    379|) -> (usize, Option<usize>) {
   16|    379|    const MAX_DEPTH: usize = 20;
   17|    379|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    379|        f(depth + 1)
   21|       |    }
   22|    379|}
_RINvNtCs32eqjyNRx4W_9arbitrary9size_hint15recursion_guardNCNvXse_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB11_7AddressNtB4_9Arbitrary9size_hint0ECsk3tAPBwF8ov_11cbor_encode:
   12|    379|pub fn recursion_guard(
   13|    379|    depth: usize,
   14|    379|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    379|) -> (usize, Option<usize>) {
   16|    379|    const MAX_DEPTH: usize = 20;
   17|    379|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    379|        f(depth + 1)
   21|       |    }
   22|    379|}
_RINvNtCs32eqjyNRx4W_9arbitrary9size_hint15recursion_guardNCNvXs0_NtCsk41howMPpCY_11common_fuzz4cborNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECsk3tAPBwF8ov_11cbor_encode:
   12|    379|pub fn recursion_guard(
   13|    379|    depth: usize,
   14|    379|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    379|) -> (usize, Option<usize>) {
   16|    379|    const MAX_DEPTH: usize = 20;
   17|    379|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    379|        f(depth + 1)
   21|       |    }
   22|    379|}
_RNvNtCs32eqjyNRx4W_9arbitrary9size_hint6or_allCsk3tAPBwF8ov_11cbor_encode:
   58|    758|    if let Some(head) = hints.first().copied() {
   59|    758|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    758|}
_RNvNtCs32eqjyNRx4W_9arbitrary9size_hint7and_allCsk3tAPBwF8ov_11cbor_encode:
   37|  5.30k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.30k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.30k|}
_RNvNtCs32eqjyNRx4W_9arbitrary9size_hint3andCsdd4ud1RNgLx_17fvm_ipld_bitfield:
   26|  2.64k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.64k|    let lower = lhs.0 + rhs.0;
   28|  2.64k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.64k|    (lower, upper)
   30|  2.64k|}
_RNvNtCs32eqjyNRx4W_9arbitrary9size_hint7and_allCsdd4ud1RNgLx_17fvm_ipld_bitfield:
   37|    756|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    756|    hints.iter().copied().fold((0, Some(0)), and)
   39|    756|}
_RNCNvNtCs32eqjyNRx4W_9arbitrary9size_hint3and0Csdd4ud1RNgLx_17fvm_ipld_bitfield:
   28|  2.27k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCs32eqjyNRx4W_9arbitrary9size_hint3and00Csdd4ud1RNgLx_17fvm_ipld_bitfield:
   28|  1.51k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsk41howMPpCY_11common_fuzz:
  292|    335|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    335|    where
  294|    335|        T: Int,
  295|    335|    {
  296|    335|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    330|        self.data = &self.data[bytes_consumed..];
  298|    330|        Ok(result)
  299|    335|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECsk41howMPpCY_11common_fuzz:
  167|  1.68k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.68k|    where
  169|  1.68k|        A: Arbitrary<'a>,
  170|  1.68k|    {
  171|  1.68k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.68k|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECsk41howMPpCY_11common_fuzz:
  411|    335|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  412|    335|    where
  413|    335|        T: Int,
  414|    335|    {
  415|    335|        assert!(T::ZERO < numerator);
  416|    335|        assert!(numerator <= denominator);
  417|    335|        let x = self.int_in_range(T::ONE..=denominator)?;
  418|    330|        Ok(x <= numerator)
  419|    335|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECsk41howMPpCY_11common_fuzz:
  534|    378|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    378|        &'b mut self,
  536|    378|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    378|        Ok(ArbitraryIter {
  538|    378|            u: &mut *self,
  539|    378|            _marker: PhantomData,
  540|    378|        })
  541|    378|    }
_RNvXs_NtCs32eqjyNRx4W_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCsdfvWPs5hvoc_4core4iter6traits8iterator8Iterator4nextCsk41howMPpCY_11common_fuzz:
  666|  3.50k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  3.50k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  3.50k|        if keep_going {
  669|  3.12k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    378|            None
  672|       |        }
  673|  3.50k|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsk41howMPpCY_11common_fuzz:
  292|    315|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    315|    where
  294|    315|        T: Int,
  295|    315|    {
  296|    315|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    298|        self.data = &self.data[bytes_consumed..];
  298|    298|        Ok(result)
  299|    315|    }
_RNvXs_NtCs32eqjyNRx4W_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtNtNtNtCsdfvWPs5hvoc_4core4iter6traits8iterator8Iterator4nextCsk41howMPpCY_11common_fuzz:
  666|  3.92k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  3.92k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  3.92k|        if keep_going {
  669|  3.54k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    378|            None
  672|       |        }
  673|  3.92k|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsk41howMPpCY_11common_fuzz:
  167|  7.42k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  7.42k|    where
  169|  7.42k|        A: Arbitrary<'a>,
  170|  7.42k|    {
  171|  7.42k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  7.42k|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsk41howMPpCY_11common_fuzz:
  301|    335|    fn int_in_range_impl<T>(
  302|    335|        range: ops::RangeInclusive<T>,
  303|    335|        mut bytes: impl Iterator<Item = u8>,
  304|    335|    ) -> Result<(T, usize)>
  305|    335|    where
  306|    335|        T: Int,
  307|    335|    {
  308|    335|        let start = range.start();
  309|    335|        let end = range.end();
  310|    335|        assert!(
  311|    335|            start <= end,
  312|    335|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    335|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    335|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    335|        }
  320|    335|
  321|    335|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    335|        let mut result = T::Widest::ZERO;
  323|    335|        let mut offset: usize = 0;
  324|       |
  325|    665|        while offset < mem::size_of::<T>()
  326|    665|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    330|        {
  328|    335|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    330|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    330|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    330|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    330|            result = result % range;
  336|    330|        }
  337|       |
  338|    330|        Ok((
  339|    330|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    330|            offset,
  341|    330|        ))
  342|    335|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsk41howMPpCY_11common_fuzz:
  301|    315|    fn int_in_range_impl<T>(
  302|    315|        range: ops::RangeInclusive<T>,
  303|    315|        mut bytes: impl Iterator<Item = u8>,
  304|    315|    ) -> Result<(T, usize)>
  305|    315|    where
  306|    315|        T: Int,
  307|    315|    {
  308|    315|        let start = range.start();
  309|    315|        let end = range.end();
  310|    315|        assert!(
  311|    315|            start <= end,
  312|    315|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    315|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    315|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    315|        }
  320|    315|
  321|    315|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    315|        let mut result = T::Widest::ZERO;
  323|    315|        let mut offset: usize = 0;
  324|       |
  325|    613|        while offset < mem::size_of::<T>()
  326|    613|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    298|        {
  328|    315|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    298|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    298|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    298|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    298|            result = result % range;
  336|    298|        }
  337|       |
  338|    298|        Ok((
  339|    298|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    298|            offset,
  341|    298|        ))
  342|    315|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCs3IMyUBTY95C_9multihash9multihash9MultihashKj40_EECsk41howMPpCY_11common_fuzz:
  167|    315|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    315|    where
  169|    315|        A: Arbitrary<'a>,
  170|    315|    {
  171|    315|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    315|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressECsk41howMPpCY_11common_fuzz:
  534|    378|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    378|        &'b mut self,
  536|    378|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    378|        Ok(ArbitraryIter {
  538|    378|            u: &mut *self,
  539|    378|            _marker: PhantomData,
  540|    378|        })
  541|    378|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsdd4ud1RNgLx_17fvm_ipld_bitfield:
  292|  8.05k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  8.05k|    where
  294|  8.05k|        T: Int,
  295|  8.05k|    {
  296|  8.05k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  8.05k|        self.data = &self.data[bytes_consumed..];
  298|  8.05k|        Ok(result)
  299|  8.05k|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsdd4ud1RNgLx_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    378|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    378|    where
  169|    378|        A: Arbitrary<'a>,
  170|    378|    {
  171|    378|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    378|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsdd4ud1RNgLx_17fvm_ipld_bitfield:
  292|    378|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    378|    where
  294|    378|        T: Int,
  295|    378|    {
  296|    378|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    335|        self.data = &self.data[bytes_consumed..];
  298|    335|        Ok(result)
  299|    378|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdd4ud1RNgLx_17fvm_ipld_bitfield:
  301|    378|    fn int_in_range_impl<T>(
  302|    378|        range: ops::RangeInclusive<T>,
  303|    378|        mut bytes: impl Iterator<Item = u8>,
  304|    378|    ) -> Result<(T, usize)>
  305|    378|    where
  306|    378|        T: Int,
  307|    378|    {
  308|    378|        let start = range.start();
  309|    378|        let end = range.end();
  310|    378|        assert!(
  311|    378|            start <= end,
  312|    378|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    378|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    378|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    378|        }
  320|    378|
  321|    378|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    378|        let mut result = T::Widest::ZERO;
  323|    378|        let mut offset: usize = 0;
  324|       |
  325|    713|        while offset < mem::size_of::<T>()
  326|    713|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    335|        {
  328|    378|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    335|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    335|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    335|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    335|            result = result % range;
  336|    335|        }
  337|       |
  338|    335|        Ok((
  339|    335|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    335|            offset,
  341|    335|        ))
  342|    378|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdd4ud1RNgLx_17fvm_ipld_bitfield:
  301|  8.05k|    fn int_in_range_impl<T>(
  302|  8.05k|        range: ops::RangeInclusive<T>,
  303|  8.05k|        mut bytes: impl Iterator<Item = u8>,
  304|  8.05k|    ) -> Result<(T, usize)>
  305|  8.05k|    where
  306|  8.05k|        T: Int,
  307|  8.05k|    {
  308|  8.05k|        let start = range.start();
  309|  8.05k|        let end = range.end();
  310|  8.05k|        assert!(
  311|  8.05k|            start <= end,
  312|  8.05k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  8.05k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  8.05k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  8.05k|        }
  320|  8.05k|
  321|  8.05k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  8.05k|        let mut result = T::Widest::ZERO;
  323|  8.05k|        let mut offset: usize = 0;
  324|       |
  325|  16.1k|        while offset < mem::size_of::<T>()
  326|  16.1k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  8.05k|        {
  328|  8.05k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  8.05k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  8.05k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  8.05k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  8.05k|            result = result % range;
  336|  8.05k|        }
  337|       |
  338|  8.05k|        Ok((
  339|  8.05k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  8.05k|            offset,
  341|  8.05k|        ))
  342|  8.05k|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsdd4ud1RNgLx_17fvm_ipld_bitfield:
  213|    756|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    756|    where
  215|    756|        ElementType: Arbitrary<'a>,
  216|    756|    {
  217|    756|        let byte_size = self.arbitrary_byte_size()?;
  218|    756|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    756|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|    756|        let elem_size = std::cmp::max(1, elem_size);
  221|    756|        Ok(byte_size / elem_size)
  222|    756|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured6choosebECsdd4ud1RNgLx_17fvm_ipld_bitfield:
  378|    378|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  379|    378|        if choices.is_empty() {
  380|      0|            return Err(Error::EmptyChoose);
  381|    378|        }
  382|    378|        let idx = self.int_in_range(0..=choices.len() - 1)?;
  383|    335|        Ok(&choices[idx])
  384|    378|    }
_RNvXs1_NtCs32eqjyNRx4W_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  2.34k|                fn as_widest(self) -> Self::Widest {
  768|  2.34k|                    self as $widest
  769|  2.34k|                }
_RNvXs9_NtCs32eqjyNRx4W_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  33.5k|                fn as_widest(self) -> Self::Widest {
  768|  33.5k|                    self as $widest
  769|  33.5k|                }
_RNvXs5_NtCs32eqjyNRx4W_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|  1.30k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  1.30k|                    <$ty>::checked_add(self, rhs)
  786|  1.30k|                }
_RNvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  476|    313|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  477|    313|        if self.data.len() < size {
  478|     17|            return Err(Error::NotEnoughData);
  479|    296|        }
  480|    296|
  481|    296|        let (for_buf, rest) = self.data.split_at(size);
  482|    296|        self.data = rest;
  483|    296|        Ok(for_buf)
  484|    313|    }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|     91|    fn int_in_range_impl<T>(
  302|     91|        range: ops::RangeInclusive<T>,
  303|     91|        mut bytes: impl Iterator<Item = u8>,
  304|     91|    ) -> Result<(T, usize)>
  305|     91|    where
  306|     91|        T: Int,
  307|     91|    {
  308|     91|        let start = range.start();
  309|     91|        let end = range.end();
  310|     91|        assert!(
  311|     91|            start <= end,
  312|     91|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|     91|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|     91|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|     91|        }
  320|     91|
  321|     91|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|     91|        let mut result = T::Widest::ZERO;
  323|     91|        let mut offset: usize = 0;
  324|       |
  325|    270|        while offset < mem::size_of::<T>()
  326|    182|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    179|        {
  328|    179|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    179|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    179|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|     91|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|     91|            result = result % range;
  336|     91|        }
  337|       |
  338|     91|        Ok((
  339|     91|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|     91|            offset,
  341|     91|        ))
  342|     91|    }
_RNvXs2_NtCs32eqjyNRx4W_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|     91|                fn from_widest(w: Self::Widest) -> Self {
  772|     91|                    let x = <$ty>::max_value().as_widest();
  773|     91|                    (w % x) as Self
  774|     91|                }
_RNvXs6_NtCs32eqjyNRx4W_9arbitrary12unstructuredjNtB5_3Int11from_widest:
  771|    633|                fn from_widest(w: Self::Widest) -> Self {
  772|    633|                    let x = <$ty>::max_value().as_widest();
  773|    633|                    (w % x) as Self
  774|    633|                }
_RINvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    585|    fn int_in_range_impl<T>(
  302|    585|        range: ops::RangeInclusive<T>,
  303|    585|        mut bytes: impl Iterator<Item = u8>,
  304|    585|    ) -> Result<(T, usize)>
  305|    585|    where
  306|    585|        T: Int,
  307|    585|    {
  308|    585|        let start = range.start();
  309|    585|        let end = range.end();
  310|    585|        assert!(
  311|    585|            start <= end,
  312|    585|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    585|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    585|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    585|        }
  320|    585|
  321|    585|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    585|        let mut result = T::Widest::ZERO;
  323|    585|        let mut offset: usize = 0;
  324|       |
  325|  1.17k|        while offset < mem::size_of::<T>()
  326|    585|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    585|        {
  328|    585|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    585|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    585|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    585|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    585|            result = result % range;
  336|    585|        }
  337|       |
  338|    585|        Ok((
  339|    585|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    585|            offset,
  341|    585|        ))
  342|    585|    }
_RNvXs2_NtCs32eqjyNRx4W_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    364|                fn as_widest(self) -> Self::Widest {
  768|    364|                    self as $widest
  769|    364|                }
_RNvXsb_NtCs32eqjyNRx4W_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  8.38k|                fn from_u8(b: u8) -> Self {
  777|  8.38k|                    b as Self
  778|  8.38k|                }
_RNvXs5_NtCs32eqjyNRx4W_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|  1.30k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  1.30k|                    <$ty>::wrapping_add(self, rhs)
  790|  1.30k|                }
_RNvXs9_NtCs32eqjyNRx4W_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  8.38k|                fn from_widest(w: Self::Widest) -> Self {
  772|  8.38k|                    let x = <$ty>::max_value().as_widest();
  773|  8.38k|                    (w % x) as Self
  774|  8.38k|                }
_RNvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    378|    pub fn new(data: &'a [u8]) -> Self {
   86|    378|        Unstructured { data }
   87|    378|    }
_RNvXsb_NtCs32eqjyNRx4W_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  8.38k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  8.38k|                    <$ty>::checked_add(self, rhs)
  786|  8.38k|                }
_RNvXsb_NtCs32eqjyNRx4W_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  16.7k|                fn from_usize(u: usize) -> Self {
  781|  16.7k|                    u as Self
  782|  16.7k|                }
_RNvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    756|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    756|        if self.data.is_empty() {
  226|     79|            Ok(0)
  227|    677|        } else if self.data.len() == 1 {
  228|      1|            self.data = &[];
  229|      1|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    676|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    585|                let bytes = 1;
  241|    585|                let max_size = self.data.len() - bytes;
  242|    585|                let (rest, for_size) = self.data.split_at(max_size);
  243|    585|                self.data = rest;
  244|    585|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|     91|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|     91|                let bytes = 2;
  247|     91|                let max_size = self.data.len() - bytes;
  248|     91|                let (rest, for_size) = self.data.split_at(max_size);
  249|     91|                self.data = rest;
  250|     91|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    676|            Ok(len)
  266|       |        }
  267|    756|    }
_RNvXs1_NtCs32eqjyNRx4W_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    585|                fn from_widest(w: Self::Widest) -> Self {
  772|    585|                    let x = <$ty>::max_value().as_widest();
  773|    585|                    (w % x) as Self
  774|    585|                }
_RNvXs5_NtCs32eqjyNRx4W_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.39k|                fn from_u8(b: u8) -> Self {
  777|  1.39k|                    b as Self
  778|  1.39k|                }
_RNvXs6_NtCs32eqjyNRx4W_9arbitrary12unstructuredjNtB5_3Int9as_widest:
  767|  2.65k|                fn as_widest(self) -> Self::Widest {
  768|  2.65k|                    self as $widest
  769|  2.65k|                }
_RNvXsb_NtCs32eqjyNRx4W_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  8.38k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  8.38k|                    <$ty>::wrapping_add(self, rhs)
  790|  8.38k|                }
_RNvXs5_NtCs32eqjyNRx4W_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  2.09k|                fn from_usize(u: usize) -> Self {
  781|  2.09k|                    u as Self
  782|  2.09k|                }
_RNvMNtCs32eqjyNRx4W_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  71.2k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  71.2k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  71.2k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  71.2k|        for byte in buffer[n..].iter_mut() {
  453|    995|            *byte = 0;
  454|    995|        }
  455|  71.2k|        self.data = &self.data[n..];
  456|  71.2k|        Ok(())
  457|  71.2k|    }

_RNvNtNtCs2erWxDXuPdI_7cbor4ii4core3dec8if_majorCsk3tAPBwF8ov_11cbor_encode:
  890|    296|pub fn if_major(byte: u8) -> u8 {
  891|    296|    byte >> 5
  892|    296|}
_RNvMs0_NtNtCs2erWxDXuPdI_7cbor4ii4core3decNtB5_7TypeNum3newCsk3tAPBwF8ov_11cbor_encode:
  175|  5.73k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  5.73k|        TypeNum { major_limit, byte }
  177|  5.73k|    }
_RINvNtNtCs2erWxDXuPdI_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  125|  6.46k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  6.46k|    let b = reader.fill(1)?
  127|  6.46k|        .as_ref()
  128|  6.46k|        .get(0)
  129|  6.46k|        .copied()
  130|  6.46k|        .ok_or(Error::Eof)?;
  131|  6.46k|    reader.advance(1);
  132|  6.46k|    Ok(b)
  133|  6.46k|}
_RINvMs0_NtNtCs2erWxDXuPdI_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  223|  5.73k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  5.73k|        match self.byte & self.major_limit {
  225|  5.73k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|    721|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|     51|                let mut buf = [0; 2];
  229|     51|                pull_exact(reader, &mut buf)?;
  230|     51|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|     16|                let mut buf = [0; 4];
  234|     16|                pull_exact(reader, &mut buf)?;
  235|     16|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    256|                let mut buf = [0; 8];
  239|    256|                pull_exact(reader, &mut buf)?;
  240|    256|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  5.73k|    }
_RINvYINtNtNtCs2erWxDXuPdI_7cbor4ii4core5types5BytesINtNtCsgQSQvYPv5Lh_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
   73|  4.55k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  4.55k|        let byte = pull_one(reader)?;
   75|  4.55k|        Self::decode_with(byte, reader)
   76|  4.55k|    }
_RINvYNtNtNtCs2erWxDXuPdI_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
   73|    592|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    592|        let byte = pull_one(reader)?;
   75|    592|        Self::decode_with(byte, reader)
   76|    592|    }
_RINvXsc_NtNtCs2erWxDXuPdI_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  611|    592|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|    592|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|    592|    }
_RINvXss_NtNtCs2erWxDXuPdI_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  252|    296|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    296|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    296|                }
_RNvMNtNtCs2erWxDXuPdI_7cbor4ii4core3decNtB2_9Reference6as_refCsk3tAPBwF8ov_11cbor_encode:
   81|  6.78k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  6.78k|        match self {
   83|  6.78k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  6.78k|    }
_RINvYNtNtNtCs2erWxDXuPdI_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
   73|    296|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    296|        let byte = pull_one(reader)?;
   75|    296|        Self::decode_with(byte, reader)
   76|    296|    }
_RINvNtNtCs2erWxDXuPdI_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  427|  4.55k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  4.55k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  4.55k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  4.55k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  4.55k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  4.55k|            if buf.len() >= len {
  436|  4.55k|                reader.advance(len);
  437|  4.55k|                return Ok(Some(&buf[..len]));
  438|      0|            }
  439|      0|        }
  440|       |
  441|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|      0|        while len != 0 {
  444|      0|            let readbuf = reader.fill(len)?;
  445|      0|            let readbuf = readbuf.as_ref();
  446|      0|
  447|      0|            if readbuf.is_empty() {
  448|      0|                return Err(Error::Eof);
  449|      0|            }
  450|      0|
  451|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      0|
  453|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      0|            reader.advance(readlen);
  455|      0|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|      0|            let byte = pull_one(reader)?;
  463|       |
  464|      0|            if byte == marker::BREAK {
  465|      0|                break
  466|      0|            }
  467|      0|
  468|      0|            if !reader.step_in() {
  469|      0|                return Err(Error::DepthLimit);
  470|      0|            }
  471|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|      0|            let reader = &mut *reader;
  473|       |
  474|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|      0|                buf.extend_from_slice(longbuf);
  476|      0|            }
  477|       |        }
  478|       |
  479|      0|        Ok(None)
  480|       |    }
  481|  4.55k|}
_RINvXs5_NtNtCs2erWxDXuPdI_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsgQSQvYPv5Lh_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  506|  4.55k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  4.55k|        use crate::alloc::borrow::Cow;
  508|  4.55k|
  509|  4.55k|        let mut buf = Vec::new();
  510|  4.55k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  4.55k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|      0|            Cow::Owned(buf)
  514|       |        }))
  515|  4.55k|    }
_RINvXsg_NtNtCs2erWxDXuPdI_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  703|    296|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    296|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    296|    }
_RINvNtNtCs2erWxDXuPdI_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  136|    323|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    646|    while !buf.is_empty() {
  138|    323|        let readbuf = reader.fill(buf.len())?;
  139|    323|        let readbuf = readbuf.as_ref();
  140|    323|
  141|    323|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    323|        }
  144|    323|
  145|    323|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    323|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    323|        reader.advance(len);
  148|    323|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    323|    Ok(())
  152|    323|}
_RINvYyNtNtNtCs2erWxDXuPdI_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
   73|    296|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    296|        let byte = pull_one(reader)?;
   75|    296|        Self::decode_with(byte, reader)
   76|    296|    }
_RINvNtNtCs2erWxDXuPdI_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
  595|  5.14k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  5.14k|    -> Result<Option<usize>, Error<R::Error>>
  597|  5.14k|{
  598|  5.14k|    if byte != (marker::START | (major << 5)) {
  599|  5.14k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  5.14k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  5.14k|        Ok(Some(len))
  602|       |    } else {
  603|      0|        Ok(None)
  604|       |    }
  605|  5.14k|}

_RNvMs0_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB5_7TypeNumyE3newCsk3tAPBwF8ov_11cbor_encode:
   52|  11.4k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  11.4k|        TypeNum { type_, value }
   54|  11.4k|    }
_RINvXs7_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
  209|  9.11k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  9.11k|        writer.push(self.0)?;
  211|  9.11k|        Ok(())
  212|  9.11k|    }
_RINvXsi_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
  317|    592|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    592|        self.1.encode(writer)
  319|    592|    }
_RNvMs0_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB5_7TypeNumtE3newCsk3tAPBwF8ov_11cbor_encode:
   52|  10.9k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.9k|        TypeNum { type_, value }
   54|  10.9k|    }
_RINvXsd_NtNtCs2erWxDXuPdI_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
  270|  1.18k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.18k|        Ok(())
  272|  1.18k|    }
_RINvXsu_NtNtCs2erWxDXuPdI_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
  159|    592|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    592|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    592|                }
_RNvMs0_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB5_7TypeNumhE3newCsk3tAPBwF8ov_11cbor_encode:
   52|  10.8k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.8k|        TypeNum { type_, value }
   54|  10.8k|    }
_RNvMs0_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB5_7TypeNummE3newCsk3tAPBwF8ov_11cbor_encode:
   52|  10.9k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.9k|        TypeNum { type_, value }
   54|  10.9k|    }
_RINvXs1_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
   59|  10.8k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  10.8k|        match self.value {
   61|  10.8k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.44k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  10.8k|        Ok(())
   65|  10.8k|    }
_RINvXs2_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
   70|  10.9k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  10.9k|        match u8::try_from(self.value) {
   72|  10.8k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    102|                let [x0, x1] = self.value.to_be_bytes();
   75|    102|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  10.9k|        Ok(())
   79|  10.9k|    }
_RINvXs3_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
   84|  10.9k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  10.9k|        match u16::try_from(self.value) {
   86|  10.9k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     32|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     32|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  10.9k|        Ok(())
   93|  10.9k|    }
_RINvXs4_NtNtCs2erWxDXuPdI_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk3tAPBwF8ov_11cbor_encode:
   98|  11.4k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  11.4k|        match u32::try_from(self.value) {
  100|  10.9k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    512|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    512|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  11.4k|        Ok(())
  107|  11.4k|    }

_RNvXs1_NtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsk3tAPBwF8ov_11cbor_encode:
   68|  11.3k|    fn advance(&mut self, n: usize) {
   69|  11.3k|        let len = core::cmp::min(self.buf.len(), n);
   70|  11.3k|        self.buf = &self.buf[len..];
   71|  11.3k|    }
_RNvXs_NtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsk3tAPBwF8ov_11cbor_encode:
   40|  20.5k|        self.0.try_reserve(input.len())?;
   41|  20.5k|        self.0.extend_from_slice(input);
   42|  20.5k|        Ok(())
   43|  20.5k|    }
_RNvXs1_NtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsk3tAPBwF8ov_11cbor_encode:
   84|    592|    fn step_out(&mut self) {
   85|    592|        self.limit += 1;
   86|    592|    }
_RNvXs1_NtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsk3tAPBwF8ov_11cbor_encode:
   62|  11.9k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  11.9k|        let len = core::cmp::min(self.buf.len(), want);
   64|  11.9k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  11.9k|    }
_RNvXs1_NtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsk3tAPBwF8ov_11cbor_encode:
   75|    592|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    592|            self.limit = limit;
   77|    592|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    592|    }
_RNvMNtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    592|    pub fn new(buf: Vec<u8>) -> Self {
   15|    592|       BufWriter(buf)
   16|    592|    }
_RNvMs0_NtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    296|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    296|        SliceReader { buf, limit: 256 }
   55|    296|    }
_RNvMNtNtCs2erWxDXuPdI_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    592|    pub fn into_inner(self) -> Vec<u8> {
   25|    592|        self.0
   26|    592|    }

_RNvXs0_NtCs3YCk2P3iCxf_3cid3arbINtNtB7_3cid3CidKj40_ENtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
   83|    379|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   84|    379|        let v1 = size_hint::and_all(&[
   85|    379|            <[u8; 2]>::size_hint(depth),
   86|    379|            (0, Some(8)),
   87|    379|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   88|    379|        ]);
   89|    379|        if S >= 32 {
   90|    379|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   91|       |        } else {
   92|      0|            v1
   93|       |        }
   94|    379|    }
_RNvXs0_NtCs3YCk2P3iCxf_3cid3arbINtNtB7_3cid3CidKj40_ENtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitraryCsk41howMPpCY_11common_fuzz:
   56|    335|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   57|    335|        if S >= 32 && u.ratio(1, 10)? {
   58|     15|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   59|      7|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   60|    315|        }
   61|    315|
   62|    315|        let mut codec = 0u64;
   63|    315|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   64|       |
   65|    874|        while len_choice & 1 == 1 {
   66|    559|            len_choice >>= 1;
   67|    559|
   68|    559|            let x = u.arbitrary::<u8>();
   69|    559|            let next = codec
   70|    559|                .checked_shl(8)
   71|    559|                .zip(x.ok())
   72|    559|                .map(|(next, x)| next.saturating_add(x as u64));
   73|    559|
   74|    559|            match next {
   75|      0|                None => break,
   76|    559|                Some(next) => codec = next,
   77|       |            }
   78|       |        }
   79|       |
   80|    315|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   81|    335|    }
_RNCNvXs0_NtCs3YCk2P3iCxf_3cid3arbINtNtB9_3cid3CidKj40_ENtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitrary0Csk41howMPpCY_11common_fuzz:
   72|    559|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvXs6_NtCs3YCk2P3iCxf_3cid3cidINtB5_3CidKj40_EINtNtCsdfvWPs5hvoc_4core7convert7TryFromRShE8try_fromCsk3tAPBwF8ov_11cbor_encode:
  314|    296|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    296|        Self::read_bytes(&mut bytes)
  316|    296|    }
_RNvMNtCs3YCk2P3iCxf_3cid3cidINtB2_3CidKj40_E8to_bytesCsk3tAPBwF8ov_11cbor_encode:
  167|    592|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    592|        let mut bytes = Vec::new();
  169|    592|        self.write_bytes(&mut bytes).unwrap();
  170|    592|        bytes
  171|    592|    }
_RINvMNtCs3YCk2P3iCxf_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEECsk3tAPBwF8ov_11cbor_encode:
  157|    592|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    592|        match self.version {
  159|     14|            Version::V0 => self.hash.write(w)?,
  160|    578|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    592|        Ok(())
  163|    592|    }
_RNvMNtCs3YCk2P3iCxf_3cid3cidINtB2_3CidKj40_E6new_v0Csk3tAPBwF8ov_11cbor_encode:
   78|      7|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      7|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      7|        }
   82|      7|        Ok(Self {
   83|      7|            version: Version::V0,
   84|      7|            codec: DAG_PB,
   85|      7|            hash,
   86|      7|        })
   87|      7|    }
_RINvMNtCs3YCk2P3iCxf_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEECsk3tAPBwF8ov_11cbor_encode:
  143|    578|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    578|        let mut version_buf = varint_encode::u64_buffer();
  145|    578|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    578|
  147|    578|        let mut codec_buf = varint_encode::u64_buffer();
  148|    578|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    578|
  150|    578|        w.write_all(version)?;
  151|    578|        w.write_all(codec)?;
  152|    578|        self.hash.write(&mut w)?;
  153|    578|        Ok(())
  154|    578|    }
_RNvMNtCs3YCk2P3iCxf_3cid3cidINtB2_3CidKj40_E6new_v1Csk3tAPBwF8ov_11cbor_encode:
   90|    289|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    289|        Self {
   92|    289|            version: Version::V1,
   93|    289|            codec,
   94|    289|            hash,
   95|    289|        }
   96|    289|    }
_RNvMNtCs3YCk2P3iCxf_3cid3cidINtB2_3CidKj40_E3newCsk3tAPBwF8ov_11cbor_encode:
   99|    289|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    289|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    289|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    289|    }
_RINvMNtCs3YCk2P3iCxf_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsk3tAPBwF8ov_11cbor_encode:
  127|    296|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    296|        let version = varint_read_u64(&mut r)?;
  129|    296|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    296|        if [version, codec] == [0x12, 0x20] {
  132|      7|            let mut digest = [0u8; 32];
  133|      7|            r.read_exact(&mut digest)?;
  134|      7|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|      7|            Self::new_v0(mh)
  136|       |        } else {
  137|    289|            let version = Version::try_from(version)?;
  138|    289|            let mh = Multihash::read(r)?;
  139|    289|            Self::new(version, codec, mh)
  140|       |        }
  141|    296|    }
_RNvMNtCs3YCk2P3iCxf_3cid3cidINtB2_3CidKj40_E6new_v1Csk41howMPpCY_11common_fuzz:
   90|    289|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    289|        Self {
   92|    289|            version: Version::V1,
   93|    289|            codec,
   94|    289|            hash,
   95|    289|        }
   96|    289|    }
_RNvMNtCs3YCk2P3iCxf_3cid3cidINtB2_3CidKj40_E6new_v0Csk41howMPpCY_11common_fuzz:
   78|      7|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      7|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      7|        }
   82|      7|        Ok(Self {
   83|      7|            version: Version::V0,
   84|      7|            codec: DAG_PB,
   85|      7|            hash,
   86|      7|        })
   87|      7|    }

_RINvXs0_NtCs3YCk2P3iCxf_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs1JyMc58alDV_5serde2de11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   79|    296|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    296|    where
   81|    296|        D: de::Deserializer<'de>,
   82|    296|    {
   83|    296|        /// Main visitor to deserialize a CID.
   84|    296|        ///
   85|    296|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    296|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    296|        /// to bytes.
   88|    296|        struct MainEntryVisitor<const SIZE: usize>;
   89|    296|
   90|    296|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    296|            type Value = CidGeneric<SIZE>;
   92|    296|
   93|    296|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    296|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    296|            }
   96|    296|
   97|    296|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    296|            where
   99|    296|                D: de::Deserializer<'de>,
  100|    296|            {
  101|    296|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    296|            }
  103|    296|        }
  104|    296|
  105|    296|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    296|    }
_RINvXs_NtCs3YCk2P3iCxf_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs1JyMc58alDV_5serde2de7Visitor11visit_bytesINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsdfvWPs5hvoc_4core7convert10InfallibleEECsk3tAPBwF8ov_11cbor_encode:
   48|    296|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    296|    where
   50|    296|        E: de::Error,
   51|    296|    {
   52|    296|        CidGeneric::<SIZE>::try_from(value)
   53|    296|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    296|    }
_RINvXNvXs0_NtCs3YCk2P3iCxf_3cid5serdeINtNtBb_3cid3CidKpENtNtCs1JyMc58alDV_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   97|    296|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    296|            where
   99|    296|                D: de::Deserializer<'de>,
  100|    296|            {
  101|    296|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    296|            }
_RINvXNtCs3YCk2P3iCxf_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs1JyMc58alDV_5serde3ser9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   29|    592|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    592|    where
   31|    592|        S: ser::Serializer,
   32|    592|    {
   33|    592|        let value = ByteBuf::from(self.to_bytes());
   34|    592|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    592|    }

_RNvXs0_NtCs3YCk2P3iCxf_3cid7versionyINtNtCsdfvWPs5hvoc_4core7convert4FromNtB5_7VersionE4from:
   44|    578|    fn from(ver: Version) -> u64 {
   45|    578|        match ver {
   46|      0|            Version::V0 => 0,
   47|    578|            Version::V1 => 1,
   48|       |        }
   49|    578|    }
_RNvXs_NtCs3YCk2P3iCxf_3cid7versionNtB4_7VersionINtNtCsdfvWPs5hvoc_4core7convert7TryFromyE8try_from:
   34|    289|    fn try_from(raw: u64) -> Result<Self> {
   35|    289|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    289|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    289|    }

_RINvXsd_NtCsikcyvSO3uAV_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs1JyMc58alDV_5serde2de7Visitor11visit_bytesINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsdfvWPs5hvoc_4core7convert10InfallibleEECsk3tAPBwF8ov_11cbor_encode:
  203|    592|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    592|    where
  205|    592|        E: Error,
  206|    592|    {
  207|    592|        Ok(ByteBuf::from(v))
  208|    592|    }
_RINvXse_NtCsikcyvSO3uAV_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  219|    592|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    592|    where
  221|    592|        D: Deserializer<'de>,
  222|    592|    {
  223|    592|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    592|    }
_RINvMNtCsikcyvSO3uAV_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECsk3tAPBwF8ov_11cbor_encode:
   60|    592|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    592|        ByteBuf {
   62|    592|            bytes: bytes.into(),
   63|    592|        }
   64|    592|    }
_RNvMNtCsikcyvSO3uAV_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    592|    pub fn into_vec(self) -> Vec<u8> {
   68|    592|        self.bytes
   69|    592|    }

_RINvXs2_NtCsikcyvSO3uAV_14cs_serde_bytes2deINtNtCsgQSQvYPv5Lh_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   72|  3.66k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  3.66k|    where
   74|  3.66k|        D: Deserializer<'de>,
   75|  3.66k|    {
   76|  3.66k|        struct CowVisitor;
   77|  3.66k|
   78|  3.66k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  3.66k|            type Value = Cow<'de, [u8]>;
   80|  3.66k|
   81|  3.66k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  3.66k|                formatter.write_str("a byte array")
   83|  3.66k|            }
   84|  3.66k|
   85|  3.66k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.66k|            where
   87|  3.66k|                E: Error,
   88|  3.66k|            {
   89|  3.66k|                Ok(Cow::Borrowed(v))
   90|  3.66k|            }
   91|  3.66k|
   92|  3.66k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  3.66k|            where
   94|  3.66k|                E: Error,
   95|  3.66k|            {
   96|  3.66k|                Ok(Cow::Owned(v.to_vec()))
   97|  3.66k|            }
   98|  3.66k|
   99|  3.66k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  3.66k|            where
  101|  3.66k|                E: Error,
  102|  3.66k|            {
  103|  3.66k|                Ok(Cow::Owned(v))
  104|  3.66k|            }
  105|  3.66k|        }
  106|  3.66k|
  107|  3.66k|        deserializer.deserialize_bytes(CowVisitor)
  108|  3.66k|    }
_RINvXNvXs2_NtCsikcyvSO3uAV_14cs_serde_bytes2deINtNtCsgQSQvYPv5Lh_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs1JyMc58alDV_5serde2de7Visitor20visit_borrowed_bytesINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsdfvWPs5hvoc_4core7convert10InfallibleEECsk3tAPBwF8ov_11cbor_encode:
   85|  3.66k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.66k|            where
   87|  3.66k|                E: Error,
   88|  3.66k|            {
   89|  3.66k|                Ok(Cow::Borrowed(v))
   90|  3.66k|            }
_RINvXs_NtCsikcyvSO3uAV_14cs_serde_bytes2deINtNtCsgQSQvYPv5Lh_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   42|    592|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    592|    where
   44|    592|        D: Deserializer<'de>,
   45|    592|    {
   46|    592|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    592|    }
_RINvXs1_NtCsikcyvSO3uAV_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   61|    592|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    592|    where
   63|    592|        D: Deserializer<'de>,
   64|    592|    {
   65|    592|        // Via the serde::Deserialize impl for ByteBuf.
   66|    592|        serde::Deserialize::deserialize(deserializer)
   67|    592|    }

_RINvCsikcyvSO3uAV_14cs_serde_bytes9serializeRINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   77|    592|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    592|where
   79|    592|    T: ?Sized + Serialize,
   80|    592|    S: Serializer,
   81|    592|{
   82|    592|    Serialize::serialize(bytes, serializer)
   83|    592|}
_RINvCsikcyvSO3uAV_14cs_serde_bytes9serializeINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   77|  1.18k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|  1.18k|where
   79|  1.18k|    T: ?Sized + Serialize,
   80|  1.18k|    S: Serializer,
   81|  1.18k|{
   82|  1.18k|    Serialize::serialize(bytes, serializer)
   83|  1.18k|}
_RINvCsikcyvSO3uAV_14cs_serde_bytes11deserializeINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  103|    592|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    592|where
  105|    592|    T: Deserialize<'de>,
  106|    592|    D: Deserializer<'de>,
  107|    592|{
  108|    592|    Deserialize::deserialize(deserializer)
  109|    592|}
_RINvCsikcyvSO3uAV_14cs_serde_bytes11deserializeINtNtCsgQSQvYPv5Lh_5alloc6borrow3CowShEQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  103|    296|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    296|where
  105|    296|    T: Deserialize<'de>,
  106|    296|    D: Deserializer<'de>,
  107|    296|{
  108|    296|    Deserialize::deserialize(deserializer)
  109|    296|}

_RINvXs4_NtCsikcyvSO3uAV_14cs_serde_bytes3serRINtNtCsgQSQvYPv5Lh_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   88|    592|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    592|    where
   90|    592|        S: Serializer,
   91|    592|    {
   92|    592|        (**self).serialize(serializer)
   93|    592|    }
_RINvXs_NtCsikcyvSO3uAV_14cs_serde_bytes3serINtNtCsgQSQvYPv5Lh_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   37|  8.51k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|  8.51k|    where
   39|  8.51k|        S: Serializer,
   40|  8.51k|    {
   41|  8.51k|        serializer.serialize_bytes(self)
   42|  8.51k|    }

rust_fuzzer_test_input:
  167|    379|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    379|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    379|
  170|    379|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    379|            // implementation. This helps the fuzzer avoid exploring all the
  172|    379|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    379|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    379|            // get to longer inputs that actually lead to interesting executions
  175|    379|            // quicker.
  176|    379|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    378|            }
  179|    378|
  180|    378|            let mut u = Unstructured::new(bytes);
  181|    378|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    378|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    378|            }
  199|       |
  200|    378|            let $data = match data {
  201|    296|                Ok(d) => d,
  202|     82|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    379|        }
_RNCNvCs4bcMqr7pSEf_13libfuzzer_sys15test_input_wrap0B3_:
   28|    379|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    379|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    379|        rust_fuzzer_test_input(data_slice);
   31|    379|    });
LLVMFuzzerTestOneInput:
   27|    379|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    379|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    379|    });
   32|    379|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    379|    }
   37|    379|    0
   38|    379|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs_NtCs3IMyUBTY95C_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
   64|    379|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   65|    379|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   66|    379|    }
_RNCNvXs_NtCs3IMyUBTY95C_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitrary0Csk41howMPpCY_11common_fuzz:
   50|    498|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs_NtCs3IMyUBTY95C_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitraryCsk41howMPpCY_11common_fuzz:
   39|    315|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   40|    315|        let mut code = 0u64;
   41|    315|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   42|       |
   43|    813|        while len_choice & 1 == 1 {
   44|    498|            len_choice >>= 1;
   45|    498|
   46|    498|            let x = u.arbitrary::<u8>();
   47|    498|            let next = code
   48|    498|                .checked_shl(8)
   49|    498|                .zip(x.ok())
   50|    498|                .map(|(next, x)| next.saturating_add(x as u64));
   51|    498|
   52|    498|            match next {
   53|      0|                None => break,
   54|    498|                Some(next) => code = next,
   55|       |            }
   56|       |        }
   57|       |
   58|    315|        let size = u.int_in_range(0..=S)?;
   59|    298|        let data = u.bytes(size)?;
   60|       |
   61|    289|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   62|    315|    }

_RINvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEECsk3tAPBwF8ov_11cbor_encode:
  163|    578|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    578|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    578|    }
_RINvNtCs3IMyUBTY95C_9multihash9multihash15write_multihashQINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEECsk3tAPBwF8ov_11cbor_encode:
  276|     14|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     14|where
  278|     14|    W: io::Write,
  279|     14|{
  280|     14|    let mut code_buf = varint_encode::u64_buffer();
  281|     14|    let code = varint_encode::u64(code, &mut code_buf);
  282|     14|
  283|     14|    let mut size_buf = varint_encode::u8_buffer();
  284|     14|    let size = varint_encode::u8(size, &mut size_buf);
  285|     14|
  286|     14|    w.write_all(code)?;
  287|     14|    w.write_all(size)?;
  288|     14|    w.write_all(digest)?;
  289|     14|    Ok(())
  290|     14|}
_RINvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEECsk3tAPBwF8ov_11cbor_encode:
  163|     14|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     14|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     14|    }
_RNvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB4_9MultihashKj40_E6digestCsk3tAPBwF8ov_11cbor_encode:
  130|    592|    pub fn digest(&self) -> &[u8] {
  131|    592|        &self.digest[..self.size as usize]
  132|    592|    }
_RNvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsk3tAPBwF8ov_11cbor_encode:
  101|      7|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|      7|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|      7|        }
  105|      7|        let size = input_digest.len();
  106|      7|        let mut digest = [0; S];
  107|      7|        let mut i = 0;
  108|    231|        while i < size {
  109|    224|            digest[i] = input_digest[i];
  110|    224|            i += 1;
  111|    224|        }
  112|      7|        Ok(Self {
  113|      7|            code,
  114|      7|            size: size as u8,
  115|      7|            digest,
  116|      7|        })
  117|      7|    }
_RNvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB4_9MultihashKj40_E4codeCsk3tAPBwF8ov_11cbor_encode:
  120|    599|    pub const fn code(&self) -> u64 {
  121|    599|        self.code
  122|    599|    }
_RINvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsk3tAPBwF8ov_11cbor_encode:
  135|    289|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    289|    where
  137|    289|        Self: Sized,
  138|    289|    {
  139|    289|        let (code, size, digest) = read_multihash(r)?;
  140|    289|        Ok(Self { code, size, digest })
  141|    289|    }
_RINvNtCs3IMyUBTY95C_9multihash9multihash14read_multihashQRShKj40_ECsk3tAPBwF8ov_11cbor_encode:
  298|    289|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    289|where
  300|    289|    R: io::Read,
  301|    289|{
  302|    289|    let code = read_u64(&mut r)?;
  303|    289|    let size = read_u64(&mut r)?;
  304|       |
  305|    289|    if size > S as u64 || size > u8::MAX as u64 {
  306|      0|        return Err(Error::InvalidSize(size));
  307|    289|    }
  308|    289|
  309|    289|    let mut digest = [0; S];
  310|    289|    r.read_exact(&mut digest[..size as usize])?;
  311|    289|    Ok((code, size as u8, digest))
  312|    289|}
_RNvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsk3tAPBwF8ov_11cbor_encode:
  125|    592|    pub const fn size(&self) -> u8 {
  126|    592|        self.size
  127|    592|    }
_RINvNtCs3IMyUBTY95C_9multihash9multihash15write_multihashQQINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEECsk3tAPBwF8ov_11cbor_encode:
  276|    578|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    578|where
  278|    578|    W: io::Write,
  279|    578|{
  280|    578|    let mut code_buf = varint_encode::u64_buffer();
  281|    578|    let code = varint_encode::u64(code, &mut code_buf);
  282|    578|
  283|    578|    let mut size_buf = varint_encode::u8_buffer();
  284|    578|    let size = varint_encode::u8(size, &mut size_buf);
  285|    578|
  286|    578|    w.write_all(code)?;
  287|    578|    w.write_all(size)?;
  288|    578|    w.write_all(digest)?;
  289|    578|    Ok(())
  290|    578|}
_RNvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB4_9MultihashKj40_E4codeCsk41howMPpCY_11common_fuzz:
  120|      7|    pub const fn code(&self) -> u64 {
  121|      7|        self.code
  122|      7|    }
_RNvMs_NtCs3IMyUBTY95C_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsk41howMPpCY_11common_fuzz:
  101|    296|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    296|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    296|        }
  105|    296|        let size = input_digest.len();
  106|    296|        let mut digest = [0; S];
  107|    296|        let mut i = 0;
  108|  1.42k|        while i < size {
  109|  1.12k|            digest[i] = input_digest[i];
  110|  1.12k|            i += 1;
  111|  1.12k|        }
  112|    296|        Ok(Self {
  113|    296|            code,
  114|    296|            size: size as u8,
  115|    296|            digest,
  116|    296|        })
  117|    296|    }

_RNvXs4_NtCs3IMyUBTY95C_9multihash14multihash_implyINtNtCsdfvWPs5hvoc_4core7convert4FromNtB5_4CodeE4from:
   11|     15|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCs2JEVZ2c23HI_10fvm_shared7address8protocol8ProtocolNtNtCs89pdHcbYCz3_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  3.37k|    fn from_u8(n: u8) -> Option<Self> {
  468|  3.37k|        FromPrimitive::from_u64(From::from(n))
  469|  3.37k|    }

_RNvMs2_NtCs7QydCRwzeH9_9once_cell3impINtB5_8OnceCellNtNtCsgQSQvYPv5Lh_5alloc6string6StringE14is_initializedCsk3tAPBwF8ov_11cbor_encode:
   62|    378|    pub(crate) fn is_initialized(&self) -> bool {
   63|    378|        // An `Acquire` load is enough because that makes all the initialization
   64|    378|        // operations visible to us, and, this being a fast path, weaker
   65|    378|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    378|        // `SeqCst` operations on the slow path.
   67|    378|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    378|    }

_RNvMs4_NtCs7QydCRwzeH9_9once_cell4syncINtB5_8OnceCellNtNtCsgQSQvYPv5Lh_5alloc6string6StringE3getCsk3tAPBwF8ov_11cbor_encode:
  869|    378|        pub fn get(&self) -> Option<&T> {
  870|    378|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    378|                None
  875|       |            }
  876|    378|        }

_RNvXCshjWXpCne60M_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    592|    fn should_run() -> bool { true }
_RNvXs5_CshjWXpCne60M_10scopeguardINtB5_10ScopeGuardQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsdfvWPs5hvoc_4core3ops4drop4Drop4dropCsk3tAPBwF8ov_11cbor_encode:
  452|    592|    fn drop(&mut self) {
  453|    592|        // This is OK because the fields are `ManuallyDrop`s
  454|    592|        // which will not be dropped by the compiler.
  455|    592|        let (value, dropfn) = unsafe {
  456|    592|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    592|        };
  458|    592|        if S::should_run() {
  459|    592|            dropfn(value);
  460|    592|        }
  461|    592|    }
_RINvCshjWXpCne60M_10scopeguard5guardQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEFBy_EuECsk3tAPBwF8ov_11cbor_encode:
  367|    592|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    592|    where F: FnOnce(T)
  369|    592|{
  370|    592|    ScopeGuard::with_strategy(v, dropfn)
  371|    592|}
_RNvMs1_CshjWXpCne60M_10scopeguardINtB5_10ScopeGuardQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsk3tAPBwF8ov_11cbor_encode:
  317|    592|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    592|        ScopeGuard {
  319|    592|            value: ManuallyDrop::new(v),
  320|    592|            dropfn: ManuallyDrop::new(dropfn),
  321|    592|            strategy: PhantomData,
  322|    592|        }
  323|    592|    }
_RNvXs4_CshjWXpCne60M_10scopeguardINtB5_10ScopeGuardQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsdfvWPs5hvoc_4core3ops5deref8DerefMut9deref_mutCsk3tAPBwF8ov_11cbor_encode:
  443|    592|    fn deref_mut(&mut self) -> &mut T {
  444|    592|        &mut *self.value
  445|    592|    }

_RINvXNvXsV_NtNtCs1JyMc58alDV_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCs528lgf0Rmjh_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsdfvWPs5hvoc_4core7convert10InfallibleEECsk3tAPBwF8ov_11cbor_encode:
  138|    296|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    296|        where
  140|    296|            E: Error,
  141|    296|        {
  142|    296|            Ok(v)
  143|    296|        }
_RINvXsV_NtNtCs1JyMc58alDV_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  113|    296|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    296|            where
  115|    296|                D: Deserializer<'de>,
  116|    296|            {
  117|    296|                struct PrimitiveVisitor;
  118|    296|
  119|    296|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    296|                    type Value = $primitive;
  121|    296|
  122|    296|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    296|                        formatter.write_str(stringify!($primitive))
  124|    296|                    }
  125|    296|
  126|    296|                    $($($method!($val : $visit);)*)*
  127|    296|                }
  128|    296|
  129|    296|                deserializer.$deserialize(PrimitiveVisitor)
  130|    296|            }
_RINvXNvXsh_NtNtCs1JyMc58alDV_5serde2de5implsINtNtCsgQSQvYPv5Lh_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
 1032|    296|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    296|            where
 1034|    296|                A: SeqAccess<'de>,
 1035|    296|            {
 1036|    296|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  3.37k|                while let Some(value) = try!(seq.next_element()) {
 1039|  3.07k|                    values.push(value);
 1040|  3.07k|                }
 1041|       |
 1042|    296|                Ok(values)
 1043|    296|            }
_RINvXsh_NtNtCs1JyMc58alDV_5serde2de5implsINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
 1014|    296|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    296|    where
 1016|    296|        D: Deserializer<'de>,
 1017|    296|    {
 1018|    296|        struct VecVisitor<T> {
 1019|    296|            marker: PhantomData<T>,
 1020|    296|        }
 1021|    296|
 1022|    296|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    296|        where
 1024|    296|            T: Deserialize<'de>,
 1025|    296|        {
 1026|    296|            type Value = Vec<T>;
 1027|    296|
 1028|    296|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    296|                formatter.write_str("a sequence")
 1030|    296|            }
 1031|    296|
 1032|    296|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    296|            where
 1034|    296|                A: SeqAccess<'de>,
 1035|    296|            {
 1036|    296|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    296|
 1038|    296|                while let Some(value) = try!(seq.next_element()) {
 1039|    296|                    values.push(value);
 1040|    296|                }
 1041|    296|
 1042|    296|                Ok(values)
 1043|    296|            }
 1044|    296|        }
 1045|    296|
 1046|    296|        let visitor = VecVisitor {
 1047|    296|            marker: PhantomData,
 1048|    296|        };
 1049|    296|        deserializer.deserialize_seq(visitor)
 1050|    296|    }

_RINvXs3_NtCs1JyMc58alDV_5serde2deINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  783|  3.37k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  3.37k|    where
  785|  3.37k|        D: Deserializer<'de>,
  786|  3.37k|    {
  787|  3.37k|        T::deserialize(deserializer)
  788|  3.37k|    }
_RINvXs3_NtCs1JyMc58alDV_5serde2deINtNtCsdfvWPs5hvoc_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  783|    296|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    296|    where
  785|    296|        D: Deserializer<'de>,
  786|    296|    {
  787|    296|        T::deserialize(deserializer)
  788|    296|    }
_RINvYNtNtCsikcyvSO3uAV_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs1JyMc58alDV_5serde2de7Visitor20visit_borrowed_bytesINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsdfvWPs5hvoc_4core7convert10InfallibleEECsk3tAPBwF8ov_11cbor_encode:
 1563|    592|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    592|    where
 1565|    592|        E: Error,
 1566|    592|    {
 1567|    592|        self.visit_bytes(v)
 1568|    592|    }
_RINvYNtNtCs3YCk2P3iCxf_3cid5serde17BytesToCidVisitorNtNtCs1JyMc58alDV_5serde2de7Visitor20visit_borrowed_bytesINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsdfvWPs5hvoc_4core7convert10InfallibleEECsk3tAPBwF8ov_11cbor_encode:
 1563|    296|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    296|    where
 1565|    296|        E: Error,
 1566|    296|    {
 1567|    296|        self.visit_bytes(v)
 1568|    296|    }
_RINvYINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsk3tAPBwF8ov_11cbor_encode:
 1723|    296|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    296|    where
 1725|    296|        T: Deserialize<'de>,
 1726|    296|    {
 1727|    296|        self.next_element_seed(PhantomData)
 1728|    296|    }
_RINvYINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess12next_elementyECsk3tAPBwF8ov_11cbor_encode:
 1723|    296|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    296|    where
 1725|    296|        T: Deserialize<'de>,
 1726|    296|    {
 1727|    296|        self.next_element_seed(PhantomData)
 1728|    296|    }
_RINvXs3_NtCs1JyMc58alDV_5serde2deINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataINtNtCs3YCk2P3iCxf_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  783|    296|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    296|    where
  785|    296|        D: Deserializer<'de>,
  786|    296|    {
  787|    296|        T::deserialize(deserializer)
  788|    296|    }
_RINvXs3_NtCs1JyMc58alDV_5serde2deINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  783|    296|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    296|    where
  785|    296|        D: Deserializer<'de>,
  786|    296|    {
  787|    296|        T::deserialize(deserializer)
  788|    296|    }
_RINvXs3_NtCs1JyMc58alDV_5serde2deINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  783|    296|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    296|    where
  785|    296|        D: Deserializer<'de>,
  786|    296|    {
  787|    296|        T::deserialize(deserializer)
  788|    296|    }
_RINvYINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess12next_elementINtNtCs3YCk2P3iCxf_3cid3cid3CidKj40_EECsk3tAPBwF8ov_11cbor_encode:
 1723|    296|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    296|    where
 1725|    296|        T: Deserialize<'de>,
 1726|    296|    {
 1727|    296|        self.next_element_seed(PhantomData)
 1728|    296|    }
_RINvYINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess12next_elementNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressECsk3tAPBwF8ov_11cbor_encode:
 1723|  3.66k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  3.66k|    where
 1725|  3.66k|        T: Deserialize<'de>,
 1726|  3.66k|    {
 1727|  3.66k|        self.next_element_seed(PhantomData)
 1728|  3.66k|    }
_RINvYINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess12next_elementNtCsdd4ud1RNgLx_17fvm_ipld_bitfield8BitFieldECsk3tAPBwF8ov_11cbor_encode:
 1723|    296|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    296|    where
 1725|    296|        T: Deserialize<'de>,
 1726|    296|    {
 1727|    296|        self.next_element_seed(PhantomData)
 1728|    296|    }
_RINvYINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess12next_elementINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEECsk3tAPBwF8ov_11cbor_encode:
 1723|    296|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    296|    where
 1725|    296|        T: Deserialize<'de>,
 1726|    296|    {
 1727|    296|        self.next_element_seed(PhantomData)
 1728|    296|    }
_RINvXs3_NtCs1JyMc58alDV_5serde2deINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  783|    296|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    296|    where
  785|    296|        D: Deserializer<'de>,
  786|    296|    {
  787|    296|        T::deserialize(deserializer)
  788|    296|    }
_RINvXs3_NtCs1JyMc58alDV_5serde2deINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtCsdd4ud1RNgLx_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  783|    296|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    296|    where
  785|    296|        D: Deserializer<'de>,
  786|    296|    {
  787|    296|        T::deserialize(deserializer)
  788|    296|    }
_RINvYINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess12next_elementNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsk3tAPBwF8ov_11cbor_encode:
 1723|    296|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    296|    where
 1725|    296|        T: Deserialize<'de>,
 1726|    296|    {
 1727|    296|        self.next_element_seed(PhantomData)
 1728|    296|    }

_RNvNtNtCs1JyMc58alDV_5serde9___private9size_hint8cautiousCsk3tAPBwF8ov_11cbor_encode:
   12|    296|pub fn cautious(hint: Option<usize>) -> usize {
   13|    296|    cmp::min(hint.unwrap_or(0), 4096)
   14|    296|}

_RINvXs1E_NtNtCs1JyMc58alDV_5serde3ser5implsRINtNtCs3YCk2P3iCxf_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  386|    592|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    592|            where
  388|    592|                S: Serializer,
  389|    592|            {
  390|    592|                (**self).serialize(serializer)
  391|    592|            }
_RINvXs1E_NtNtCs1JyMc58alDV_5serde3ser5implsRNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  386|    592|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    592|            where
  388|    592|                S: Serializer,
  389|    592|            {
  390|    592|                (**self).serialize(serializer)
  391|    592|            }
_RINvXs1E_NtNtCs1JyMc58alDV_5serde3ser5implsRNtCsdd4ud1RNgLx_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  386|    592|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    592|            where
  388|    592|                S: Serializer,
  389|    592|            {
  390|    592|                (**self).serialize(serializer)
  391|    592|            }
_RINvXs1k_NtNtCs1JyMc58alDV_5serde3ser5implsINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  194|    592|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    592|            where
  196|    592|                S: Serializer,
  197|    592|            {
  198|    592|                serializer.collect_seq(self)
  199|    592|            }
_RINvXs1E_NtNtCs1JyMc58alDV_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  386|    592|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    592|            where
  388|    592|                S: Serializer,
  389|    592|            {
  390|    592|                (**self).serialize(serializer)
  391|    592|            }
_RINvXs1E_NtNtCs1JyMc58alDV_5serde3ser5implsRINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  386|    592|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    592|            where
  388|    592|                S: Serializer,
  389|    592|            {
  390|    592|                (**self).serialize(serializer)
  391|    592|            }
_RINvXs1E_NtNtCs1JyMc58alDV_5serde3ser5implsRNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  386|  6.74k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  6.74k|            where
  388|  6.74k|                S: Serializer,
  389|  6.74k|            {
  390|  6.74k|                (**self).serialize(serializer)
  391|  6.74k|            }
_RINvXsE_NtNtCs1JyMc58alDV_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   11|    592|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    592|            where
   13|    592|                S: Serializer,
   14|    592|            {
   15|    592|                serializer.$method(*self $($cast)*)
   16|    592|            }

_RINvNtCs1JyMc58alDV_5serde3ser17iterator_len_hintINtNtNtCsdfvWPs5hvoc_4core5slice4iter4IterNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEECsk3tAPBwF8ov_11cbor_encode:
 1982|    592|    match iter.size_hint() {
 1983|    592|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    592|}
_RINvYQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer11collect_seqRINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEECsk3tAPBwF8ov_11cbor_encode:
 1275|    592|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    592|    where
 1277|    592|        I: IntoIterator,
 1278|    592|        <I as IntoIterator>::Item: Serialize,
 1279|    592|    {
 1280|    592|        let iter = iter.into_iter();
 1281|    592|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    592|            let mut iter = iter;
 1286|    592|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    592|        serializer.end()
 1297|    592|    }
_RNCINvYQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer11collect_seqRINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEE0Csk3tAPBwF8ov_11cbor_encode:
 1286|  6.15k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvMNtCsddA29rq09KB_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsgQSQvYPv5Lh_5alloc3vec3VechEECsk3tAPBwF8ov_11cbor_encode:
   60|    592|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    592|        ByteBuf {
   62|    592|            bytes: bytes.into(),
   63|    592|        }
   64|    592|    }
_RINvXsc_NtCsddA29rq09KB_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs1JyMc58alDV_5serde3ser9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  186|    592|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    592|    where
  188|    592|        S: Serializer,
  189|    592|    {
  190|    592|        serializer.serialize_bytes(&self.bytes)
  191|    592|    }

_RINvNtCs528lgf0Rmjh_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderECsk3tAPBwF8ov_11cbor_encode:
   26|    592|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    592|    let buf = match reader.fill(1)? {
   28|    592|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    592|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    296|    Ok(byte)
   33|    592|}

_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCsikcyvSO3uAV_14cs_serde_bytes2deINtNtCsgQSQvYPv5Lh_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsk3tAPBwF8ov_11cbor_encode:
  228|  3.66k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  3.66k|    where
  230|  3.66k|        V: Visitor<'de>,
  231|  3.66k|    {
  232|  3.66k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  3.66k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  3.66k|    }
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer17deserialize_bytesNtNtCsikcyvSO3uAV_14cs_serde_bytes7bytebuf14ByteBufVisitorECsk3tAPBwF8ov_11cbor_encode:
  228|    592|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    592|    where
  230|    592|        V: Visitor<'de>,
  231|    592|    {
  232|    592|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    592|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    592|    }
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs3YCk2P3iCxf_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsk3tAPBwF8ov_11cbor_encode:
  318|    296|    fn deserialize_newtype_struct<V>(
  319|    296|        self,
  320|    296|        name: &'static str,
  321|    296|        visitor: V,
  322|    296|    ) -> Result<V::Value, Self::Error>
  323|    296|    where
  324|    296|        V: Visitor<'de>,
  325|    296|    {
  326|    296|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    296|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    296|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess17next_element_seedINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataINtNtCs3YCk2P3iCxf_3cid3cid3CidKj40_EEECsk3tAPBwF8ov_11cbor_encode:
  484|    296|        if let Some(len) = self.len.as_mut() {
  485|    296|            if *len > 0 {
  486|    296|                *len -= 1;
  487|    296|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    296|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess17next_element_seedINtNtCsdfvWPs5hvoc_4core6marker11PhantomDatayEECsk3tAPBwF8ov_11cbor_encode:
  484|    296|        if let Some(len) = self.len.as_mut() {
  485|    296|            if *len > 0 {
  486|    296|                *len -= 1;
  487|    296|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    296|    }
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsk3tAPBwF8ov_11cbor_encode:
  354|    296|    fn deserialize_tuple_struct<V>(
  355|    296|        self,
  356|    296|        _name: &'static str,
  357|    296|        len: usize,
  358|    296|        visitor: V,
  359|    296|    ) -> Result<V::Value, Self::Error>
  360|    296|    where
  361|    296|        V: Visitor<'de>,
  362|    296|    {
  363|    296|        self.deserialize_tuple(len, visitor)
  364|    296|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess17next_element_seedINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEEECsk3tAPBwF8ov_11cbor_encode:
  484|    296|        if let Some(len) = self.len.as_mut() {
  485|    296|            if *len > 0 {
  486|    296|                *len -= 1;
  487|    296|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    296|    }
_RINvMs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs3YCk2P3iCxf_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs1JyMc58alDV_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsk3tAPBwF8ov_11cbor_encode:
  113|    296|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    296|    where
  115|    296|        V: Visitor<'de>,
  116|    296|    {
  117|    296|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    296|        match tag.0 {
  120|    296|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    296|    }
_RNvMs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderE8try_stepCsk3tAPBwF8ov_11cbor_encode:
  101|    592|    fn try_step<'a>(
  102|    592|        &'a mut self,
  103|    592|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    592|    {
  105|    592|        if self.reader.step_in() {
  106|    592|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    592|    }
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsgQSQvYPv5Lh_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEECsk3tAPBwF8ov_11cbor_encode:
  334|    296|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    296|    where
  336|    296|        V: Visitor<'de>,
  337|    296|    {
  338|    296|        let mut de = self.try_step()?;
  339|    296|        let seq = Accessor::array(&mut de)?;
  340|    296|        visitor.visit_seq(seq)
  341|    296|    }
_RNvMs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderE3endCsk3tAPBwF8ov_11cbor_encode:
  131|    296|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    296|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    296|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess17next_element_seedINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEECsk3tAPBwF8ov_11cbor_encode:
  484|  3.66k|        if let Some(len) = self.len.as_mut() {
  485|  3.66k|            if *len > 0 {
  486|  3.37k|                *len -= 1;
  487|  3.37k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    296|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  3.66k|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess17next_element_seedINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsk3tAPBwF8ov_11cbor_encode:
  484|    296|        if let Some(len) = self.len.as_mut() {
  485|    296|            if *len > 0 {
  486|    296|                *len -= 1;
  487|    296|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    296|    }
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsk3tAPBwF8ov_11cbor_encode:
  344|    296|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    296|    where
  346|    296|        V: Visitor<'de>,
  347|    296|    {
  348|    296|        let mut de = self.try_step()?;
  349|    296|        let seq = Accessor::tuple(&mut de, len)?;
  350|    296|        visitor.visit_seq(seq)
  351|    296|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess17next_element_seedINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtCsdd4ud1RNgLx_17fvm_ipld_bitfield8BitFieldEECsk3tAPBwF8ov_11cbor_encode:
  484|    296|        if let Some(len) = self.len.as_mut() {
  485|    296|            if *len > 0 {
  486|    296|                *len -= 1;
  487|    296|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    296|    }
_RNCNvMs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderE8try_step0Csk3tAPBwF8ov_11cbor_encode:
  106|    592|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de10from_sliceNtNtCsk41howMPpCY_11common_fuzz4cbor7PayloadECsk3tAPBwF8ov_11cbor_encode:
   40|    296|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    296|where
   42|    296|    T: de::Deserialize<'a>,
   43|    296|{
   44|    296|    let reader = SliceReader::new(buf);
   45|    296|    let mut deserializer = Deserializer::from_reader(reader);
   46|    296|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    296|    deserializer.end()?;
   48|    296|    Ok(value)
   49|    296|}
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer20deserialize_byte_bufNtNtCsikcyvSO3uAV_14cs_serde_bytes7bytebuf14ByteBufVisitorECsk3tAPBwF8ov_11cbor_encode:
  239|    592|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    592|    where
  241|    592|        V: Visitor<'de>,
  242|    592|    {
  243|    592|        self.deserialize_bytes(visitor)
  244|    592|    }
_RNvMs1_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderE5arrayCsk3tAPBwF8ov_11cbor_encode:
  434|    296|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    296|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    296|        Ok(Accessor {
  437|    296|            de,
  438|    296|            len: array_start.0,
  439|    296|        })
  440|    296|    }
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsk3tAPBwF8ov_11cbor_encode:
  142|    296|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    296|        where V: Visitor<'de>
  144|    296|        {
  145|    296|            let value = <$t>::decode(&mut self.reader)?;
  146|    296|            visitor.$visit(value)
  147|    296|        }
_RNvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess9size_hintCsk3tAPBwF8ov_11cbor_encode:
  500|    296|    fn size_hint(&self) -> Option<usize> {
  501|    296|        self.len
  502|    296|    }
_RNvMs1_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderE5tupleCsk3tAPBwF8ov_11cbor_encode:
  443|    296|    pub fn tuple(
  444|    296|        de: &'a mut Deserializer<R>,
  445|    296|        len: usize,
  446|    296|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    296|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    296|        if array_start.0 == Some(len) {
  450|    296|            Ok(Accessor {
  451|    296|                de,
  452|    296|                len: array_start.0,
  453|    296|            })
  454|       |        } else {
  455|      0|            Err(DecodeError::RequireLength {
  456|      0|                name: "tuple",
  457|      0|                expect: len,
  458|      0|                value: array_start.0.unwrap_or(0),
  459|      0|            })
  460|       |        }
  461|    296|    }
_RNvMNtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderE11from_readerCsk3tAPBwF8ov_11cbor_encode:
   93|    296|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    296|        Deserializer { reader }
   95|    296|    }
_RINvXs7_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de12Deserializer17deserialize_bytesNtNtCs3YCk2P3iCxf_3cid5serde17BytesToCidVisitorECsk3tAPBwF8ov_11cbor_encode:
  646|    296|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    296|        let byte = peek_one(&mut self.0.reader)?;
  648|    296|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    296|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    296|                    Cow::Borrowed(buf) => {
  653|    296|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    296|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      0|                    Cow::Owned(mut buf) => {
  660|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      0|                            buf.remove(0);
  664|      0|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      0|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    296|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderENtNtCs1JyMc58alDV_5serde2de9SeqAccess17next_element_seedINtNtCsdfvWPs5hvoc_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsk3tAPBwF8ov_11cbor_encode:
  484|    296|        if let Some(len) = self.len.as_mut() {
  485|    296|            if *len > 0 {
  486|    296|                *len -= 1;
  487|    296|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    296|    }

_RNvXs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer13serialize_seqCsk3tAPBwF8ov_11cbor_encode:
  226|    592|        if let Some(len) = len {
  227|    592|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    592|        Ok(Collect {
  232|    592|            bounded: len.is_some(),
  233|    592|            ser: self,
  234|    592|        })
  235|    592|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsk41howMPpCY_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsk3tAPBwF8ov_11cbor_encode:
  403|    592|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    592|        value.serialize(&mut *self.ser)
  405|    592|    }
_RINvNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser6to_vecNtNtCsk41howMPpCY_11common_fuzz4cbor7PayloadECsk3tAPBwF8ov_11cbor_encode:
   23|    592|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    592|where
   25|    592|    T: Serialize + ?Sized,
   26|    592|{
   27|    592|    let writer = BufWriter::new(Vec::new());
   28|    592|    let mut serializer = Serializer::new(writer);
   29|    592|    value.serialize(&mut serializer)?;
   30|    592|    Ok(serializer.into_inner().into_inner())
   31|    592|}
_RNvXs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer15serialize_bytesCsk3tAPBwF8ov_11cbor_encode:
  160|  8.51k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  8.51k|        Ok(())
  162|  8.51k|    }
_RINvXs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer24serialize_newtype_structNtNtCsddA29rq09KB_11serde_bytes7bytebuf7ByteBufECsk3tAPBwF8ov_11cbor_encode:
  199|    592|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    592|        self,
  201|    592|        name: &'static str,
  202|    592|        value: &T,
  203|    592|    ) -> Result<Self::Ok, Self::Error> {
  204|    592|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    592|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    592|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsk3tAPBwF8ov_11cbor_encode:
  403|    592|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    592|        value.serialize(&mut *self.ser)
  405|    592|    }
_RINvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser12SerializeSeq17serialize_elementRNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressECsk3tAPBwF8ov_11cbor_encode:
  369|  6.15k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  6.15k|        value.serialize(&mut *self.ser)
  371|  6.15k|    }
_RNvXs0_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser12SerializeSeq3endCsk3tAPBwF8ov_11cbor_encode:
  374|    592|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    592|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    592|        }
  378|       |
  379|    592|        Ok(())
  380|    592|    }
_RNvXs7_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer15serialize_bytesCsk3tAPBwF8ov_11cbor_encode:
  550|    592|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    592|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    592|        let prefixed = [&[0x00], value].concat();
  553|    592|        // CIDs are serialized with CBOR tag 42.
  554|    592|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    592|        Ok(())
  556|    592|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs3YCk2P3iCxf_3cid3cid3CidKj40_EECsk3tAPBwF8ov_11cbor_encode:
  403|    592|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    592|        value.serialize(&mut *self.ser)
  405|    592|    }
_RNvXs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer22serialize_tuple_structCsk3tAPBwF8ov_11cbor_encode:
  244|    592|    fn serialize_tuple_struct(
  245|    592|        self,
  246|    592|        _name: &'static str,
  247|    592|        len: usize,
  248|    592|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    592|        self.serialize_tuple(len)
  250|    592|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsgQSQvYPv5Lh_5alloc3vec3VecNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressEECsk3tAPBwF8ov_11cbor_encode:
  403|    592|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    592|        value.serialize(&mut *self.ser)
  405|    592|    }
_RNvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct3endCsk3tAPBwF8ov_11cbor_encode:
  408|    592|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    592|        Ok(())
  410|    592|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsk3tAPBwF8ov_11cbor_encode:
  403|    592|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    592|        value.serialize(&mut *self.ser)
  405|    592|    }
_RNvMNtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterE10into_innerCsk3tAPBwF8ov_11cbor_encode:
   56|    592|    pub fn into_inner(self) -> W {
   57|    592|        self.writer
   58|    592|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsdd4ud1RNgLx_17fvm_ipld_bitfield8BitFieldECsk3tAPBwF8ov_11cbor_encode:
  403|    592|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    592|        value.serialize(&mut *self.ser)
  405|    592|    }
_RNvXs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer13serialize_u64Csk3tAPBwF8ov_11cbor_encode:
  123|    592|        v.encode(&mut self.writer)?;
  124|    592|        Ok(())
  125|    592|    }
_RNvMNtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterE3newCsk3tAPBwF8ov_11cbor_encode:
   51|    592|    pub fn new(writer: W) -> Serializer<W> {
   52|    592|        Serializer { writer }
   53|    592|    }
_RINvXs2_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs2JEVZ2c23HI_10fvm_shared7address7AddressECsk3tAPBwF8ov_11cbor_encode:
  403|    592|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    592|        value.serialize(&mut *self.ser)
  405|    592|    }
_RNvXs_NtCs528lgf0Rmjh_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterENtNtCs1JyMc58alDV_5serde3ser10Serializer15serialize_tupleCsk3tAPBwF8ov_11cbor_encode:
  239|    592|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    592|        Ok(BoundedCollect { ser: self })
  241|    592|    }

_RNvXCsjKjv8cSXvkT_11serde_tupleINtB2_10SerializerQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEENtNtCs1JyMc58alDV_5serde3ser10Serializer22serialize_tuple_structCsk3tAPBwF8ov_11cbor_encode:
  158|    592|    fn serialize_tuple_struct(
  159|    592|        self,
  160|    592|        name: &'static str,
  161|    592|        len: usize,
  162|    592|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    592|        self.0.serialize_tuple_struct(name, len)
  164|    592|    }
_RINvXs_CsjKjv8cSXvkT_11serde_tupleINtB5_12DeserializerQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEENtNtCs1JyMc58alDV_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsk3tAPBwF8ov_11cbor_encode:
  353|    296|    fn deserialize_tuple_struct<V>(
  354|    296|        self,
  355|    296|        name: &'static str,
  356|    296|        len: usize,
  357|    296|        visitor: V,
  358|    296|    ) -> Result<V::Value, Self::Error>
  359|    296|    where
  360|    296|        V: serde::de::Visitor<'de>,
  361|    296|    {
  362|    296|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    296|    }

_RNvNtCsf2blHvhm10P_15unsigned_varint6decode3u64Csk3tAPBwF8ov_11cbor_encode:
  122|  1.17k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.17k|    decode!(buf, 9, u64)
  124|  1.17k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6decode7is_lastCsk3tAPBwF8ov_11cbor_encode:
   90|  3.52k|pub fn is_last(b: u8) -> bool {
   91|  3.52k|    b & 0x80 == 0
   92|  3.52k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6decode3u64Cs2JEVZ2c23HI_10fvm_shared:
  122|  2.17k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  2.17k|    decode!(buf, 9, u64)
  124|  2.17k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6decode7is_lastCs2JEVZ2c23HI_10fvm_shared:
   90|  16.9k|pub fn is_last(b: u8) -> bool {
   91|  16.9k|    b & 0x80 == 0
   92|  16.9k|}

_RNvNtCsf2blHvhm10P_15unsigned_varint6encode2u8Csk3tAPBwF8ov_11cbor_encode:
   45|    592|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    592|    encode!(number, buf)
   47|    592|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6encode9u8_bufferCsk3tAPBwF8ov_11cbor_encode:
  101|    592|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    592|    [0; U8_LEN]
  103|    592|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6encode3u64Csk3tAPBwF8ov_11cbor_encode:
   69|  1.74k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.74k|    encode!(number, buf)
   71|  1.74k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6encode10u64_bufferCsk3tAPBwF8ov_11cbor_encode:
  119|  2.91k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  2.91k|    [0; U64_LEN]
  121|  2.91k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6encode10u64_bufferCs2JEVZ2c23HI_10fvm_shared:
  119|  4.35k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  4.35k|    [0; U64_LEN]
  121|  4.35k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6encode3u64Cs2JEVZ2c23HI_10fvm_shared:
   69|  4.35k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  4.35k|    encode!(number, buf)
   71|  4.35k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6encode3u64Csdd4ud1RNgLx_17fvm_ipld_bitfield:
   69|  7.80k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  7.80k|    encode!(number, buf)
   71|  7.80k|}
_RNvNtCsf2blHvhm10P_15unsigned_varint6encode10u64_bufferCsdd4ud1RNgLx_17fvm_ipld_bitfield:
  119|  7.80k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  7.80k|    [0; U64_LEN]
  121|  7.80k|}

_RINvNtCsf2blHvhm10P_15unsigned_varint2io8read_u64QQRShECsk3tAPBwF8ov_11cbor_encode:
   31|  1.17k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.17k|                let mut b = encode::$b();
   33|  1.76k|                for i in 0 .. b.len() {
   34|  1.76k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.76k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.76k|                    }
   38|  1.76k|                    if decode::is_last(b[i]) {
   39|  1.17k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    592|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.17k|            }

_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    916|    fn new(mut iter: I) -> Self {
  468|    916|        let next = iter.next();
  469|    916|        Self { iter, next }
  470|    916|    }
_RNCNvXs9_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  7.54k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsf_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsdfvWPs5hvoc_4core7default7Default7defaultB9_:
   86|    916|#[derive(Default)]
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    916|    fn new(mut iter: I) -> Self {
  468|    916|        let next = iter.next();
  469|    916|        Self { iter, next }
  470|    916|    }
_RNvXse_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.54k|        let next = self.next.take()?;
  483|  6.63k|        self.next = self.iter.next();
  484|  6.63k|        Some(next)
  485|  7.54k|    }
_RNvXsh_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsdfvWPs5hvoc_4core7default7Default7defaultB9_:
  151|    916|#[derive(Default)]
_RNvMs8_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    916|    fn new(lhs: A, rhs: B) -> Self {
  343|    916|        Self {
  344|    916|            lhs: Lookahead::new(lhs),
  345|    916|            rhs: Lookahead::new(rhs),
  346|    916|            combinator: Default::default(),
  347|    916|        }
  348|    916|    }
_RNvMs5_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    916|    pub fn new(a: A, b: B) -> Self {
  298|    916|        Self(Merge::new(_Combine::new(a, b)))
  299|    916|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|  1.83k|    fn new(mut iter: I) -> Self {
  468|  1.83k|        let next = iter.next();
  469|  1.83k|        Self { iter, next }
  470|  1.83k|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    916|    fn new(mut iter: I) -> Self {
  468|    916|        let next = iter.next();
  469|    916|        Self { iter, next }
  470|    916|    }
_RNCNvXs9_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  6.63k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs0_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  6.63k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  6.63k|        // the difference between a range and an empty range is just that range
  183|  6.63k|        Some(lhs)
  184|  6.63k|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.54k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.54k|        self.next.as_mut()
  474|  7.54k|    }
_RNCNvXs9_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  6.63k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  7.54k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  7.54k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.54k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  6.63k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    916|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  6.63k|        if advance_lhs {
  370|  6.63k|            self.lhs.next();
  371|  6.63k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  6.63k|        range
  376|  7.54k|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  15.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  15.0k|        self.next.as_mut()
  474|  15.0k|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  6.63k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.63k|        self.next.as_mut()
  474|  6.63k|    }
_RNvMs8_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  7.54k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.54k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  6.63k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    916|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  6.63k|        if advance_lhs {
  370|  6.63k|            self.lhs.next();
  371|  6.63k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  6.63k|        range
  376|  7.54k|    }
_RNvMsa_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    916|    pub fn new(iter: I) -> Self {
  425|    916|        Self {
  426|    916|            iter: Lookahead::new(iter),
  427|    916|        }
  428|    916|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    916|    fn new(mut iter: I) -> Self {
  468|    916|        let next = iter.next();
  469|    916|        Self { iter, next }
  470|    916|    }
_RNvMs5_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    916|    pub fn new(a: A, b: B) -> Self {
  298|    916|        Self(Merge::new(_Combine::new(a, b)))
  299|    916|    }
_RNvXsb_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.54k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  6.63k|        while let Some(next) = self.iter.peek() {
  443|  6.18k|            if next.start > range.end {
  444|  6.18k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  6.63k|        Some(range)
  452|  7.54k|    }
_RNvXNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  6.63k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  6.63k|        // the union of a range and an empty range is just that range
  111|  6.63k|        Some(lhs)
  112|  6.63k|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  7.54k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.54k|        self.next.as_mut()
  474|  7.54k|    }
_RNvXsb_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.54k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  6.63k|        while let Some(next) = self.iter.peek() {
  443|  6.18k|            if next.start > range.end {
  444|  6.18k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  6.63k|        Some(range)
  452|  7.54k|    }
_RNvXse_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  6.63k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.63k|        let next = self.next.take()?;
  483|  6.63k|        self.next = self.iter.next();
  484|  6.63k|        Some(next)
  485|  6.63k|    }
_RNvMsa_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    916|    pub fn new(iter: I) -> Self {
  425|    916|        Self {
  426|    916|            iter: Lookahead::new(iter),
  427|    916|        }
  428|    916|    }
_RNvMs8_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    916|    fn new(lhs: A, rhs: B) -> Self {
  343|    916|        Self {
  344|    916|            lhs: Lookahead::new(lhs),
  345|    916|            rhs: Lookahead::new(rhs),
  346|    916|            combinator: Default::default(),
  347|    916|        }
  348|    916|    }
_RNvXs9_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.54k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.54k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.54k|    }
_RNvXs6_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.54k|        self.0.next()
  312|  7.54k|    }
_RNvXse_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.54k|        let next = self.next.take()?;
  483|  6.63k|        self.next = self.iter.next();
  484|  6.63k|        Some(next)
  485|  7.54k|    }
_RNvXs6_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.54k|        self.0.next()
  312|  7.54k|    }
_RNvMsd_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  6.63k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.63k|        self.next.as_mut()
  474|  6.63k|    }
_RNvXse_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  6.63k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.63k|        let next = self.next.take()?;
  483|  6.63k|        self.next = self.iter.next();
  484|  6.63k|        Some(next)
  485|  6.63k|    }
_RNvXs9_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.54k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.54k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.54k|    }

_RINvMs2_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    916|    pub fn new<II>(iter: II) -> Self
  140|    916|    where
  141|    916|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    916|    {
  143|    916|        Self(iter.into_iter())
  144|    916|    }
_RNvXs3_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  7.54k|    fn next(&mut self) -> Option<Self::Item> {
  154|  7.54k|        self.0.next()
  155|  7.54k|    }
_RINvMs2_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  1.83k|    pub fn new<II>(iter: II) -> Self
  140|  1.83k|    where
  141|  1.83k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  1.83k|    {
  143|  1.83k|        Self(iter.into_iter())
  144|  1.83k|    }
_RINvYINtNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    916|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    916|        Combine::new(self, other)
   33|    916|    }
_RNCINvNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  1.83k|    Ranges::new(iter::from_fn(move || {
  167|  1.83k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  1.83k|    }))
_RNvXs3_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  1.83k|    fn next(&mut self) -> Option<Self::Item> {
  154|  1.83k|        self.0.next()
  155|  1.83k|    }
_RINvYINtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    916|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    916|        Combine::new(self, other)
   23|    916|    }
_RINvNtCsdd4ud1RNgLx_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsdfvWPs5hvoc_4core4iter8adapters6copied6CopiedINtNtNtNtCsgQSQvYPv5Lh_5alloc11collections5btree3set4IteryEEEB4_:
  163|  1.83k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  1.83k|    let mut iter = bits.into_iter().peekable();
  165|  1.83k|
  166|  1.83k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  1.83k|    }))
  180|  1.83k|}

_RNvXsi_Csdd4ud1RNgLx_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsdfvWPs5hvoc_4core7default7Default7defaultB5_:
   42|  1.05k|#[derive(Debug, Default, Clone)]
_RNvMs4_Csdd4ud1RNgLx_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    916|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    916|        self.inner_ranges()
  287|    916|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    916|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    916|    }
_RNvMs4_Csdd4ud1RNgLx_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    916|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    916|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    916|    }

_RNvXNtCsdd4ud1RNgLx_17fvm_ipld_bitfield5rangeINtNtNtCsdfvWPs5hvoc_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  6.63k|    fn size(&self) -> Self::Idx {
   15|  6.63k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  6.63k|            self.end - self.start
   19|       |        }
   20|  6.63k|    }

_RINvXs_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   97|    296|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    296|    where
   99|    296|        D: Deserializer<'de>,
  100|    296|    {
  101|    296|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    296|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    296|        }
  108|    296|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    296|    }
_RINvXNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs1JyMc58alDV_5serde3ser9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   81|    746|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    746|    where
   83|    746|        S: Serializer,
   84|    746|    {
   85|    746|        let bytes = self.to_bytes();
   86|    746|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    746|        }
   92|    746|        serde_bytes::serialize(&bytes, serializer)
   93|    746|    }
_RNvMs1_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    916|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    916|        let mut iter = self.ranges();
  201|       |
  202|    916|        let first_range = match iter.next() {
  203|    445|            Some(range) => range,
  204|    471|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    445|        let mut writer = BitWriter::new();
  208|    445|        writer.write(0, 2); // version 00
  209|    445|
  210|    445|        if first_range.start == 0 {
  211|    203|            writer.write(1, 1); // the first bit is a 1
  212|    242|        } else {
  213|    242|            writer.write(0, 1); // the first bit is a 0
  214|    242|            writer.write_len(first_range.start); // the number of leading 0s
  215|    242|        }
  216|       |
  217|    445|        writer.write_len(first_range.size());
  218|    445|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  6.63k|        for range in iter {
  223|  6.18k|            writer.write_len(range.start - index); // zeros
  224|  6.18k|            writer.write_len(range.size()); // ones
  225|  6.18k|            index = range.end;
  226|  6.18k|        }
  227|       |
  228|    445|        writer.finish()
  229|    916|    }
_RNvXs0_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hint:
  149|    758|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    758|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    758|    }
_RNvXs0_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitrary:
  113|    756|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|    756|        let mut next_value: bool = bool::arbitrary(u)?;
  115|    756|        let mut ranges = Vec::new();
  116|    756|        let mut index = 0u64;
  117|    756|        let mut total_len: u64 = 0;
  118|       |
  119|    756|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|    756|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  8.05k|            let len = u64::arbitrary(u)?;
  124|  8.05k|            let shift = u.int_in_range(0..=63)?;
  125|  8.05k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  8.05k|
  127|  8.05k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  8.05k|            if ovf {
  129|     30|                break;
  130|  8.02k|            }
  131|  8.02k|            total_len = new_total_len;
  132|  8.02k|            let start = index;
  133|  8.02k|            index += len;
  134|  8.02k|            let end = index;
  135|  8.02k|
  136|  8.02k|            if next_value {
  137|  4.03k|                ranges.push(start..end);
  138|  4.03k|            }
  139|       |
  140|  8.02k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|    756|        Ok(Self {
  144|    756|            ranges,
  145|    756|            ..Default::default()
  146|    756|        })
  147|    756|    }
_RNvMs1_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    296|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    296|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    296|        let version = reader.read(2);
  160|    296|        if version != 0 {
  161|      0|            return Err(Error::UnsupportedVersion);
  162|    296|        }
  163|    296|
  164|    296|        let mut next_value = reader.read(1) == 1;
  165|    296|        let mut ranges = Vec::new();
  166|    296|        let mut index = 0u64;
  167|    296|        let mut total_len: u64 = 0;
  168|       |
  169|  6.42k|        while let Some(len) = reader.read_len()? {
  170|  6.13k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  6.13k|            if ovf {
  172|      0|                return Err(Error::RLEOverflow);
  173|  6.13k|            }
  174|  6.13k|            total_len = new_total_len;
  175|  6.13k|            let start = index;
  176|  6.13k|            index += len;
  177|  6.13k|            let end = index;
  178|  6.13k|
  179|  6.13k|            if next_value {
  180|  3.10k|                ranges.push(start..end);
  181|  3.10k|            }
  182|       |
  183|  6.13k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    296|        if next_value {
  189|      0|            return Err(Error::NotMinimal);
  190|    296|        }
  191|    296|
  192|    296|        Ok(Self {
  193|    296|            ranges,
  194|    296|            ..Default::default()
  195|    296|        })
  196|    296|    }

_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    296|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    296|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    296|        // data.
   28|    296|        if bytes.last() == Some(&0) {
   29|      0|            return Err(Error::NotMinimal);
   30|    296|        }
   31|    296|        let mut bits = 0u64;
   32|    888|        for i in 0..2 {
   33|    592|            let byte = bytes.get(i).unwrap_or(&0);
   34|    592|            bits |= (*byte as u64) << (8 * i);
   35|    592|        }
   36|       |
   37|    296|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    296|
   39|    296|        Ok(Self {
   40|    296|            bytes,
   41|    296|            bits,
   42|    296|            num_bits: 16,
   43|    296|        })
   44|    296|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  6.42k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  6.42k|        // We're done.
  120|  6.42k|        if !self.has_more() {
  121|    296|            return Ok(None);
  122|  6.13k|        }
  123|  6.13k|
  124|  6.13k|        let peek6 = self.peek(6);
  125|       |
  126|  6.13k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|    868|            self.drop(1);
  129|    868|            1
  130|  5.26k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  1.64k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  1.64k|            self.drop(6);
  134|  1.64k|            if val < 2 {
  135|      0|                return Err(Error::NotMinimal);
  136|  1.64k|            }
  137|  1.64k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  3.61k|            self.drop(2);
  141|  3.61k|            let val = self.read_varint()?;
  142|  3.61k|            if val < 16 {
  143|      0|                return Err(Error::NotMinimal);
  144|  3.61k|            }
  145|  3.61k|            val
  146|       |        };
  147|       |
  148|  6.13k|        Ok(Some(len))
  149|  6.42k|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  3.61k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  3.61k|        let mut len = 0u64;
   94|       |
   95|  19.8k|        for i in 0..VARINT_MAX_BYTES {
   96|  19.8k|            let byte = self.read(8);
   97|  19.8k|
   98|  19.8k|            // strip off the most significant bit and add
   99|  19.8k|            // it to the output
  100|  19.8k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  19.8k|
  102|  19.8k|            // if the most significant bit is a 0, we've
  103|  19.8k|            // reached the end of the varint
  104|  19.8k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  3.61k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      0|                    break;
  109|  3.61k|                }
  110|  3.61k|                return Ok(len);
  111|  16.2k|            }
  112|       |        }
  113|       |
  114|      0|        Err(Error::InvalidVarint)
  115|  3.61k|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  26.5k|    pub fn drop(&mut self, num_bits: u32) {
   61|  26.5k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  26.5k|        self.bits >>= num_bits;
   65|  26.5k|        self.num_bits -= num_bits;
   66|  26.5k|
   67|  26.5k|        // not sure why this being outside of the if improves the performance
   68|  26.5k|        // bit it does, probably related to keeping caches warm
   69|  26.5k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  26.5k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  26.5k|
   72|  26.5k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  26.5k|        if self.num_bits < 8 {
   74|  22.0k|            self.num_bits += 8;
   75|  22.0k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  22.0k|        }
   77|  26.5k|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  6.42k|    pub fn has_more(&self) -> bool {
  153|  6.42k|        self.bits != 0 || !self.bytes.is_empty()
  154|  6.42k|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  26.5k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  26.5k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  26.5k|        let mask = (1 << num_bits) - 1;
   55|  26.5k|        (self.bits & mask) as u8
   56|  26.5k|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  20.4k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  20.4k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  20.4k|        let res = self.peek(num_bits);
   85|  20.4k|        self.drop(num_bits);
   86|  20.4k|
   87|  20.4k|        res
   88|  20.4k|    }

_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    445|    pub fn finish(mut self) -> Vec<u8> {
   61|    445|        if self.bits > 0 {
   62|    228|            self.bytes.push(self.bits as u8);
   63|    228|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    445|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    445|        self.bytes
   71|    445|    }
_RNvXs_NtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsdfvWPs5hvoc_4core7default7Default7defaultB8_:
    4|    445|#[derive(Default, Clone, Debug)]
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    445|    pub fn new() -> Self {
   18|    445|        Default::default()
   19|    445|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  13.0k|    pub fn write_len(&mut self, len: u64) {
   39|  13.0k|        debug_assert!(len > 0);
   40|       |
   41|  13.0k|        if len == 1 {
   42|  1.80k|            // Block Single (prefix 1)
   43|  1.80k|            self.write(1, 1);
   44|  11.2k|        } else if len < 16 {
   45|  3.44k|            // Block Short (prefix 01)
   46|  3.44k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  3.44k|            self.write(len as u8, 4);
   48|  3.44k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  7.80k|            self.write(0, 2);
   51|  7.80k|
   52|  7.80k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  43.4k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  43.4k|                self.write(byte, 8);
   55|  43.4k|            }
   56|       |        }
   57|  13.0k|    }
_RNvMNtNtCsdd4ud1RNgLx_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  60.7k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  60.7k|        debug_assert!(num_bits <= 8);
   24|  60.7k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  60.7k|        self.bits |= (byte as u16) << self.num_bits;
   27|  60.7k|        self.num_bits += num_bits;
   28|  60.7k|
   29|  60.7k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  60.7k|        if self.num_bits >= 8 {
   31|  48.1k|            self.bytes.push(self.bits as u8);
   32|  48.1k|            self.bits >>= 8;
   33|  48.1k|            self.num_bits -= 8;
   34|  48.1k|        }
   35|  60.7k|    }

_RINvXNvXNvNtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs1JyMc58alDV_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   35|    438|#[derive(Debug, Serialize)]
_RINvXNvNtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs1JyMc58alDV_5serde3ser9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   35|    592|#[derive(Debug, Serialize)]
_RINvXs4_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   93|    296|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    296|    where
   95|    296|        D: Deserializer<'de>,
   96|    296|    {
   97|    296|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    296|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    296|        }
  104|    296|        Ok(Self::Unvalidated(bytes))
  105|    296|    }
_RNvXs1_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitrary:
   61|    378|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   62|    378|        let bf: BitField = u.arbitrary()?;
   63|    378|        Ok(if *u.choose(&[true, false])? {
   64|    165|            Self::Validated(bf)
   65|       |        } else {
   66|    170|            Self::Unvalidated(bf.to_bytes())
   67|       |        })
   68|    378|    }
_RNvXs1_NtCsdd4ud1RNgLx_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hint:
   70|    379|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   71|    379|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   72|    379|    }

_RINvCs6zFBGn0ecSZ_17fvm_ipld_encoding6to_vecNtNtCsk41howMPpCY_11common_fuzz4cbor7PayloadECsk3tAPBwF8ov_11cbor_encode:
   33|    592|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    592|where
   35|    592|    T: ser::Serialize + ?Sized,
   36|    592|{
   37|    592|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    592|}
_RINvCs6zFBGn0ecSZ_17fvm_ipld_encoding10from_sliceNtNtCsk41howMPpCY_11common_fuzz4cbor7PayloadECsk3tAPBwF8ov_11cbor_encode:
   50|    296|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    296|where
   52|    296|    T: de::Deserialize<'a>,
   53|    296|{
   54|    296|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    296|}

_RINvXs2_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB6_7AddressNtNtCs1JyMc58alDV_5serde3ser9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
  264|  6.74k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|  6.74k|    where
  266|  6.74k|        S: Serializer,
  267|  6.74k|    {
  268|  6.74k|        let address_bytes = self.to_bytes();
  269|  6.74k|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|  6.74k|    }
_RNvXse_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB5_7AddressNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
   68|    379|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXse_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB7_7AddressNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
   68|    379|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs3_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB6_7AddressNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
  274|  3.37k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  3.37k|    where
  276|  3.37k|        D: Deserializer<'de>,
  277|  3.37k|    {
  278|  3.37k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  3.37k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  3.37k|    }
_RNvMs_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB4_7Address3new:
   78|  3.37k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  3.37k|        Ok(Self {
   80|  3.37k|            network,
   81|  3.37k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  3.37k|    }
_RNvXse_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB5_7AddressNtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitrary:
   68|  3.92k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvNtCs2JEVZ2c23HI_10fvm_shared7address12to_leb_bytes:
  310|  4.35k|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|  4.35k|    // write id to buffer in leb128 format
  312|  4.35k|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|  4.35k|}
_RNvMs_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  3.37k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  3.37k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  3.37k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  3.37k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  3.37k|    }
_RNvMs_NtCs2JEVZ2c23HI_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|  6.74k|    pub fn to_bytes(self) -> Vec<u8> {
  177|  6.74k|        self.payload.to_bytes()
  178|  6.74k|    }
_RNvNtCs2JEVZ2c23HI_10fvm_shared7address14from_leb_bytes:
  315|  2.17k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|  2.17k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|  2.17k|    if !remaining.is_empty() {
  319|      0|        return Err(Error::InvalidPayload);
  320|  2.17k|    }
  321|  2.17k|    Ok(id)
  322|  2.17k|}

_RNCNvXs8_NtNtCs2JEVZ2c23HI_10fvm_shared7address7networkNtB7_7NetworkNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
    8|    379|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs8_NtNtCs2JEVZ2c23HI_10fvm_shared7address7networkNtB5_7NetworkNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
    8|    379|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs8_NtNtCs2JEVZ2c23HI_10fvm_shared7address7networkNtB5_7NetworkNtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitrary:
    8|  3.92k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNCNvXs9_NtNtCs2JEVZ2c23HI_10fvm_shared7address7payloadNtB7_7PayloadNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
   12|    379|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs9_NtNtCs2JEVZ2c23HI_10fvm_shared7address7payloadNtB5_7PayloadNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
   12|    379|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtNtCs2JEVZ2c23HI_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  3.37k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  3.37k|        let payload = match protocol {
   53|  2.17k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    701|                payload
   56|    701|                    .try_into()
   57|    701|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    235|                payload
   61|    235|                    .try_into()
   62|    235|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    260|                payload
   66|    260|                    .try_into()
   67|    260|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  3.37k|        Ok(payload)
   71|  3.37k|    }
_RNvMNtNtCs2JEVZ2c23HI_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|  6.74k|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|  6.74k|        let mut bz = match self {
   40|  4.35k|            ID(i) => to_leb_bytes(i).unwrap(),
   41|  1.40k|            Secp256k1(arr) => arr.to_vec(),
   42|    470|            Actor(arr) => arr.to_vec(),
   43|    520|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|  6.74k|        bz.insert(0, Protocol::from(self) as u8);
   47|  6.74k|        bz
   48|  6.74k|    }
_RNvXs_NtNtCs2JEVZ2c23HI_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsdfvWPs5hvoc_4core7convert4FromNtB4_7PayloadE4from:
   75|  6.74k|    fn from(pl: Payload) -> Self {
   76|  6.74k|        match pl {
   77|  4.35k|            Payload::ID(_) => Self::ID,
   78|  1.40k|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|    470|            Payload::Actor(_) => Self::Actor,
   80|    520|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|  6.74k|    }
_RNvXs9_NtNtCs2JEVZ2c23HI_10fvm_shared7address7payloadNtB5_7PayloadNtCs32eqjyNRx4W_9arbitrary9Arbitrary9arbitrary:
   12|  3.92k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNvMNtNtCs2JEVZ2c23HI_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  3.37k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  3.37k|        FromPrimitive::from_u8(b)
   28|  3.37k|    }
_RNvXNvNtNtCs2JEVZ2c23HI_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs89pdHcbYCz3_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  3.37k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs2JEVZ2c23HI_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs89pdHcbYCz3_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  3.37k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RNCNvXs0_NtCsk41howMPpCY_11common_fuzz4cborNtB7_7PayloadNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hint0Csk3tAPBwF8ov_11cbor_encode:
   10|    379|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsk41howMPpCY_11common_fuzz4cborNtBa_7PayloadNtNtCs1JyMc58alDV_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCsjKjv8cSXvkT_11serde_tuple10SerializerQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEEECsk3tAPBwF8ov_11cbor_encode:
   10|    592|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsk41howMPpCY_11common_fuzz4cborNtB3_7PayloadNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   10|    296|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCsk41howMPpCY_11common_fuzz4cborNtB5_7PayloadNtCs32eqjyNRx4W_9arbitrary9Arbitrary9size_hintCsk3tAPBwF8ov_11cbor_encode:
   10|    379|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCsk41howMPpCY_11common_fuzz4cborNtB5_7PayloadNtNtCs1JyMc58alDV_5serde3ser9Serialize9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   10|    592|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtB8_7PayloadNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCsjKjv8cSXvkT_11serde_tuple12DeserializerQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEEECsk3tAPBwF8ov_11cbor_encode:
   10|    296|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtBd_7PayloadNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEE0Csk3tAPBwF8ov_11cbor_encode:
   10|    296|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCsk41howMPpCY_11common_fuzz4cborNtBd_7PayloadNtNtCs1JyMc58alDV_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils9BufWriterEECsk3tAPBwF8ov_11cbor_encode:
   10|    592|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCsk41howMPpCY_11common_fuzz4cborNtBe_7PayloadNtNtCs1JyMc58alDV_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCs528lgf0Rmjh_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2erWxDXuPdI_7cbor4ii4core5utils11SliceReaderEECsk3tAPBwF8ov_11cbor_encode:
   10|    296|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCsk41howMPpCY_11common_fuzz4cborNtB5_7PayloadNtCs32eqjyNRx4W_9arbitrary9Arbitrary19arbitrary_take_rest:
   10|    460|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

