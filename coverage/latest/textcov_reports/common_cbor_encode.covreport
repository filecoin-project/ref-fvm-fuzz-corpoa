_RNCNvXs8_Cs9fCioswQzwR_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0Cslhj6TOXVrem_11cbor_encode:
  656|    778|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|    778|            <T as Arbitrary>::size_hint(d)
  658|    778|        }))
_RNCNvXs8_Cs9fCioswQzwR_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0Cslhj6TOXVrem_11cbor_encode:
  656|  1.16k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  1.16k|            <T as Arbitrary>::size_hint(d)
  658|  1.16k|        }))
_RNvXs8_Cs9fCioswQzwR_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  655|    389|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    389|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    389|        }))
  659|    389|    }
_RNCNvXs8_Cs9fCioswQzwR_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0Cslhj6TOXVrem_11cbor_encode:
  656|  18.6k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  18.6k|            <T as Arbitrary>::size_hint(d)
  658|  18.6k|        }))
_RNCNvXs8_Cs9fCioswQzwR_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0Cslhj6TOXVrem_11cbor_encode:
  656|  15.5k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  15.5k|            <T as Arbitrary>::size_hint(d)
  658|  15.5k|        }))
_RNvXsK_Cs9fCioswQzwR_9arbitrarymNtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  320|    389|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    389|                    let n = mem::size_of::<$ty>();
  322|    389|                    (n, Some(n))
  323|    389|                }
_RNvXsa_Cs9fCioswQzwR_9arbitraryINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  688|    389|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|    389|        (0, None)
  690|    389|    }
_RNvXs8_Cs9fCioswQzwR_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  655|    389|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    389|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    389|        }))
  659|    389|    }
_RNvXs8_Cs9fCioswQzwR_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  655|    389|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    389|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    389|        }))
  659|    389|    }
_RNvXs8_Cs9fCioswQzwR_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  655|    778|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    778|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    778|        }))
  659|    778|    }
_RNvXsI_Cs9fCioswQzwR_9arbitraryhNtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  320|  36.5k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  36.5k|                    let n = mem::size_of::<$ty>();
  322|  36.5k|                    (n, Some(n))
  323|  36.5k|                }
_RNvXsa_Cs9fCioswQzwR_9arbitraryINtNtCsdriq9yqlPVC_5alloc3vec3VechENtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  688|    389|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|    389|        (0, None)
  690|    389|    }
_RNvXsL_Cs9fCioswQzwR_9arbitraryyNtB5_9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  320|    778|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    778|                    let n = mem::size_of::<$ty>();
  322|    778|                    (n, Some(n))
  323|    778|                }
_RNvYNtNtNtCs4SHI63ivlID_10fvm_shared7address7payload16DelegatedAddressNtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
  277|    389|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|    389|        let _ = depth;
  279|    389|        (0, None)
  280|    389|    }
_RNvXsa_Cs9fCioswQzwR_9arbitraryINtNtCsdriq9yqlPVC_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCsdfcctoTlxUU_11common_fuzz:
  679|    388|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    388|        u.arbitrary_iter()?.collect()
  681|    388|    }
_RNvXsa_Cs9fCioswQzwR_9arbitraryINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCsdfcctoTlxUU_11common_fuzz:
  679|    388|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    388|        u.arbitrary_iter()?.collect()
  681|    388|    }
_RNvYINtNtCsb854q0c99uP_3cid3cid3CidKj40_ENtCs9fCioswQzwR_9arbitrary9Arbitrary19arbitrary_take_restCsdfcctoTlxUU_11common_fuzz:
  189|    388|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    388|        Self::arbitrary(&mut u)
  191|    388|    }
_RINvCs9fCioswQzwR_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECs4SHI63ivlID_10fvm_shared:
  615|    195|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  616|    195|where
  617|    195|    F: FnMut(usize) -> Result<T>,
  618|    195|{
  619|    195|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  620|    195|    let array_ptr = array.as_mut_ptr();
  621|    195|    let dst = array_ptr as _;
  622|    195|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  623|    195|        dst,
  624|    195|        initialized: 0,
  625|    195|    };
  626|       |    unsafe {
  627|  9.36k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  628|  9.36k|            core::ptr::write(value_ptr, cb(idx)?);
  629|  9.36k|            guard.initialized += 1;
  630|       |        }
  631|    195|        mem::forget(guard);
  632|    195|        Ok(array.assume_init())
  633|       |    }
  634|    195|}
_RNCNvXs8_Cs9fCioswQzwR_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Cs4SHI63ivlID_10fvm_shared:
  642|  18.1k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNCNvXs8_Cs9fCioswQzwR_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Cs4SHI63ivlID_10fvm_shared:
  642|  9.36k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs8_Cs9fCioswQzwR_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCs4SHI63ivlID_10fvm_shared:
  641|    195|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  642|    195|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  643|    195|    }
_RNvXs8_Cs9fCioswQzwR_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCs4SHI63ivlID_10fvm_shared:
  641|    905|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  642|    905|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  643|    905|    }
_RINvCs9fCioswQzwR_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECs4SHI63ivlID_10fvm_shared:
  615|    905|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  616|    905|where
  617|    905|    F: FnMut(usize) -> Result<T>,
  618|    905|{
  619|    905|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  620|    905|    let array_ptr = array.as_mut_ptr();
  621|    905|    let dst = array_ptr as _;
  622|    905|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  623|    905|        dst,
  624|    905|        initialized: 0,
  625|    905|    };
  626|       |    unsafe {
  627|  18.1k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  628|  18.1k|            core::ptr::write(value_ptr, cb(idx)?);
  629|  18.1k|            guard.initialized += 1;
  630|       |        }
  631|    905|        mem::forget(guard);
  632|    905|        Ok(array.assume_init())
  633|       |    }
  634|    905|}
_RNvXsL_Cs9fCioswQzwR_9arbitraryyNtB5_9Arbitrary9size_hintCskHqonDxAqFH_17fvm_ipld_bitfield:
  320|    776|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    776|                    let n = mem::size_of::<$ty>();
  322|    776|                    (n, Some(n))
  323|    776|                }
_RNvXsN_Cs9fCioswQzwR_9arbitraryjNtB5_9Arbitrary9size_hintCskHqonDxAqFH_17fvm_ipld_bitfield:
  320|    778|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    778|                    let n = mem::size_of::<$ty>();
  322|    778|                    (n, Some(n))
  323|    778|                }
_RNvXs1p_Cs9fCioswQzwR_9arbitraryTyhENtB6_9Arbitrary9size_hintCskHqonDxAqFH_17fvm_ipld_bitfield:
  587|    776|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  588|    776|                crate::size_hint::and_all(&[
  589|    776|                    <$last as Arbitrary>::size_hint(depth),
  590|    776|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  591|    776|                ])
  592|    776|            }
_RNvXsI_Cs9fCioswQzwR_9arbitraryhNtB5_9Arbitrary9size_hintCskHqonDxAqFH_17fvm_ipld_bitfield:
  320|    776|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    776|                    let n = mem::size_of::<$ty>();
  322|    776|                    (n, Some(n))
  323|    776|                }
_RNvXs_Cs9fCioswQzwR_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|  9.65k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|  9.65k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|  9.65k|    }
_RNvXsL_Cs9fCioswQzwR_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  9.47k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  9.47k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  9.47k|                    u.fill_buffer(&mut buf)?;
  312|  9.47k|                    let mut x: $unsigned = 0;
  313|  75.7k|                    for i in 0..mem::size_of::<$ty>() {
  314|  75.7k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  75.7k|                    }
  316|  9.47k|                    Ok(x as $ty)
  317|  9.47k|                }
_RNvXsI_Cs9fCioswQzwR_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  50.6k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  50.6k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  50.6k|                    u.fill_buffer(&mut buf)?;
  312|  50.6k|                    let mut x: $unsigned = 0;
  313|  50.6k|                    for i in 0..mem::size_of::<$ty>() {
  314|  50.6k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  50.6k|                    }
  316|  50.6k|                    Ok(x as $ty)
  317|  50.6k|                }
_RNvXsK_Cs9fCioswQzwR_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  5.72k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  5.72k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  5.72k|                    u.fill_buffer(&mut buf)?;
  312|  5.72k|                    let mut x: $unsigned = 0;
  313|  22.9k|                    for i in 0..mem::size_of::<$ty>() {
  314|  22.9k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  22.9k|                    }
  316|  5.72k|                    Ok(x as $ty)
  317|  5.72k|                }

_RNvNtCs9fCioswQzwR_9arbitrary9size_hint2orCslhj6TOXVrem_11cbor_encode:
   44|  1.94k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.94k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.94k|    let upper = lhs
   47|  1.94k|        .1
   48|  1.94k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.94k|    (lower, upper)
   50|  1.94k|}
_RNCNvNtCs9fCioswQzwR_9arbitrary9size_hint2or0Cslhj6TOXVrem_11cbor_encode:
   48|  1.94k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCs9fCioswQzwR_9arbitrary9size_hint3andCslhj6TOXVrem_11cbor_encode:
   26|  43.5k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  43.5k|    let lower = lhs.0 + rhs.0;
   28|  43.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  43.5k|    (lower, upper)
   30|  43.5k|}
_RINvNtCs9fCioswQzwR_9arbitrary9size_hint15recursion_guardNCNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address7payload1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECslhj6TOXVrem_11cbor_encode:
   12|    389|pub fn recursion_guard(
   13|    389|    depth: usize,
   14|    389|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    389|) -> (usize, Option<usize>) {
   16|    389|    const MAX_DEPTH: usize = 20;
   17|    389|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    389|        f(depth + 1)
   21|       |    }
   22|    389|}
_RINvNtCs9fCioswQzwR_9arbitrary9size_hint15recursion_guardNCNvXNvNtCsdfcctoTlxUU_11common_fuzz4cbor1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECslhj6TOXVrem_11cbor_encode:
   12|    389|pub fn recursion_guard(
   13|    389|    depth: usize,
   14|    389|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    389|) -> (usize, Option<usize>) {
   16|    389|    const MAX_DEPTH: usize = 20;
   17|    389|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    389|        f(depth + 1)
   21|       |    }
   22|    389|}
_RNvNtCs9fCioswQzwR_9arbitrary9size_hint6or_allCslhj6TOXVrem_11cbor_encode:
   57|    389|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   58|    389|    if let Some(head) = hints.first().copied() {
   59|    389|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    389|}
_RNCNvNtCs9fCioswQzwR_9arbitrary9size_hint3and0Cslhj6TOXVrem_11cbor_encode:
   28|  41.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs9fCioswQzwR_9arbitrary9size_hint15recursion_guardNCNvXNvNtCs4SHI63ivlID_10fvm_shared7address1__NtB10_7AddressNtB4_9Arbitrary9size_hint0ECslhj6TOXVrem_11cbor_encode:
   12|    389|pub fn recursion_guard(
   13|    389|    depth: usize,
   14|    389|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    389|) -> (usize, Option<usize>) {
   16|    389|    const MAX_DEPTH: usize = 20;
   17|    389|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    389|        f(depth + 1)
   21|       |    }
   22|    389|}
_RNCNCNvNtCs9fCioswQzwR_9arbitrary9size_hint2or00Cslhj6TOXVrem_11cbor_encode:
   48|  1.55k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCs9fCioswQzwR_9arbitrary9size_hint7and_allCslhj6TOXVrem_11cbor_encode:
   37|  5.05k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.05k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.05k|}
_RNCNCNvNtCs9fCioswQzwR_9arbitrary9size_hint3and00Cslhj6TOXVrem_11cbor_encode:
   28|  39.6k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCs9fCioswQzwR_9arbitrary9size_hint3and00CskHqonDxAqFH_17fvm_ipld_bitfield:
   28|  1.55k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs9fCioswQzwR_9arbitrary9size_hint3andCskHqonDxAqFH_17fvm_ipld_bitfield:
   26|  2.71k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.71k|    let lower = lhs.0 + rhs.0;
   28|  2.71k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.71k|    (lower, upper)
   30|  2.71k|}
_RNvNtCs9fCioswQzwR_9arbitrary9size_hint7and_allCskHqonDxAqFH_17fvm_ipld_bitfield:
   37|    776|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    776|    hints.iter().copied().fold((0, Some(0)), and)
   39|    776|}
_RNCNvNtCs9fCioswQzwR_9arbitrary9size_hint3and0CskHqonDxAqFH_17fvm_ipld_bitfield:
   28|  2.33k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured3newCslhj6TOXVrem_11cbor_encode:
   85|    388|    pub fn new(data: &'a [u8]) -> Self {
   86|    388|        Unstructured { data }
   87|    388|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsdfcctoTlxUU_11common_fuzz:
  293|    296|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    296|    where
  295|    296|        T: Int,
  296|    296|    {
  297|    296|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    296|        self.data = &self.data[bytes_consumed..];
  299|    296|        Ok(result)
  300|    296|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int12wrapping_subCsdfcctoTlxUU_11common_fuzz:
  837|    296|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    296|                    <$ty>::wrapping_sub(self, rhs)
  839|    296|                }
_RNvXs9_NtCs9fCioswQzwR_9arbitrary12unstructuredlNtB5_3Int13from_unsignedCsdfcctoTlxUU_11common_fuzz:
  845|    388|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    388|                    unsigned as Self
  847|    388|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int7from_u8CsdfcctoTlxUU_11common_fuzz:
  821|     35|                fn from_u8(b: u8) -> Self {
  822|     35|                    b as Self
  823|     35|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECsdfcctoTlxUU_11common_fuzz:
  606|    388|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    388|        &'b mut self,
  608|    388|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    388|        Ok(ArbitraryIter {
  610|    388|            u: &mut *self,
  611|    388|            _marker: PhantomData,
  612|    388|        })
  613|    388|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCs4SHI63ivlID_10fvm_shared7address7AddressECsdfcctoTlxUU_11common_fuzz:
  606|    388|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    388|        &'b mut self,
  608|    388|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    388|        Ok(ArbitraryIter {
  610|    388|            u: &mut *self,
  611|    388|            _marker: PhantomData,
  612|    388|        })
  613|    388|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdfcctoTlxUU_11common_fuzz:
  302|    296|    fn int_in_range_impl<T>(
  303|    296|        range: ops::RangeInclusive<T>,
  304|    296|        mut bytes: impl Iterator<Item = u8>,
  305|    296|    ) -> Result<(T, usize)>
  306|    296|    where
  307|    296|        T: Int,
  308|    296|    {
  309|    296|        let start = *range.start();
  310|    296|        let end = *range.end();
  311|    296|        assert!(
  312|    296|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    296|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    296|        }
  321|    296|
  322|    296|        // From here on out we work with the unsigned representation. All of the
  323|    296|        // operations performed below work out just as well whether or not `T`
  324|    296|        // is a signed or unsigned integer.
  325|    296|        let start = start.to_unsigned();
  326|    296|        let end = end.to_unsigned();
  327|    296|
  328|    296|        let delta = end.wrapping_sub(start);
  329|    296|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    296|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    296|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    331|        while (bytes_consumed < mem::size_of::<T>())
  339|    331|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    296|            let byte = match bytes.next() {
  342|    261|                None => break,
  343|     35|                Some(b) => b,
  344|     35|            };
  345|     35|            bytes_consumed += 1;
  346|     35|
  347|     35|            // Combine this byte into our arbitrary integer, but avoid
  348|     35|            // overflowing the shift for `u8` and `i8`.
  349|     35|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|     35|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    296|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    296|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    296|        let result = start.wrapping_add(offset);
  365|    296|
  366|    296|        // And convert back to our maybe-signed representation.
  367|    296|        let result = T::from_unsigned(result);
  368|    296|        debug_assert!(*range.start() <= result);
  369|    296|        debug_assert!(result <= *range.end());
  370|       |
  371|    296|        Ok((result, bytes_consumed))
  372|    296|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECsdfcctoTlxUU_11common_fuzz:
  483|    388|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  484|    388|    where
  485|    388|        T: Int,
  486|    388|    {
  487|    388|        assert!(T::ZERO < numerator);
  488|    388|        assert!(numerator <= denominator);
  489|    388|        let x = self.int_in_range(T::ONE..=denominator)?;
  490|    388|        Ok(x <= numerator)
  491|    388|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsdfcctoTlxUU_11common_fuzz:
  167|  8.87k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  8.87k|    where
  169|  8.87k|        A: Arbitrary<'a>,
  170|  8.87k|    {
  171|  8.87k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  8.87k|    }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int12wrapping_addCsdfcctoTlxUU_11common_fuzz:
  833|    388|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    388|                    <$ty>::wrapping_add(self, rhs)
  835|    388|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int11to_unsignedCsdfcctoTlxUU_11common_fuzz:
  841|    592|                fn to_unsigned(self) -> Self::Unsigned {
  842|    592|                    self as $unsigned_ty
  843|    592|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECsdfcctoTlxUU_11common_fuzz:
  167|  1.56k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.56k|    where
  169|  1.56k|        A: Arbitrary<'a>,
  170|  1.56k|    {
  171|  1.56k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.56k|    }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int10from_usizeCsdfcctoTlxUU_11common_fuzz:
  825|    697|                fn from_usize(u: usize) -> Self {
  826|    697|                    u as Self
  827|    697|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int12wrapping_addCsdfcctoTlxUU_11common_fuzz:
  833|    296|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    296|                    <$ty>::wrapping_add(self, rhs)
  835|    296|                }
_RNvXs9_NtCs9fCioswQzwR_9arbitrary12unstructuredlNtB5_3Int11to_unsignedCsdfcctoTlxUU_11common_fuzz:
  841|    776|                fn to_unsigned(self) -> Self::Unsigned {
  842|    776|                    self as $unsigned_ty
  843|    776|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdfcctoTlxUU_11common_fuzz:
  302|    388|    fn int_in_range_impl<T>(
  303|    388|        range: ops::RangeInclusive<T>,
  304|    388|        mut bytes: impl Iterator<Item = u8>,
  305|    388|    ) -> Result<(T, usize)>
  306|    388|    where
  307|    388|        T: Int,
  308|    388|    {
  309|    388|        let start = *range.start();
  310|    388|        let end = *range.end();
  311|    388|        assert!(
  312|    388|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    388|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    388|        }
  321|    388|
  322|    388|        // From here on out we work with the unsigned representation. All of the
  323|    388|        // operations performed below work out just as well whether or not `T`
  324|    388|        // is a signed or unsigned integer.
  325|    388|        let start = start.to_unsigned();
  326|    388|        let end = end.to_unsigned();
  327|    388|
  328|    388|        let delta = end.wrapping_sub(start);
  329|    388|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    388|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    388|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    697|        while (bytes_consumed < mem::size_of::<T>())
  339|    697|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    388|            let byte = match bytes.next() {
  342|     79|                None => break,
  343|    309|                Some(b) => b,
  344|    309|            };
  345|    309|            bytes_consumed += 1;
  346|    309|
  347|    309|            // Combine this byte into our arbitrary integer, but avoid
  348|    309|            // overflowing the shift for `u8` and `i8`.
  349|    309|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    309|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    388|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    388|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    388|        let result = start.wrapping_add(offset);
  365|    388|
  366|    388|        // And convert back to our maybe-signed representation.
  367|    388|        let result = T::from_unsigned(result);
  368|    388|        debug_assert!(*range.start() <= result);
  369|    388|        debug_assert!(result <= *range.end());
  370|       |
  371|    388|        Ok((result, bytes_consumed))
  372|    388|    }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int7from_u8CsdfcctoTlxUU_11common_fuzz:
  821|    309|                fn from_u8(b: u8) -> Self {
  822|    309|                    b as Self
  823|    309|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int10from_usizeCsdfcctoTlxUU_11common_fuzz:
  825|    331|                fn from_usize(u: usize) -> Self {
  826|    331|                    u as Self
  827|    331|                }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int12wrapping_subCsdfcctoTlxUU_11common_fuzz:
  837|    388|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    388|                    <$ty>::wrapping_sub(self, rhs)
  839|    388|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int13from_unsignedCsdfcctoTlxUU_11common_fuzz:
  845|    296|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    296|                    unsigned as Self
  847|    296|                }
_RNvXs_NtCs9fCioswQzwR_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtNtNtNtCsjU8j9Adh1pR_4core4iter6traits8iterator8Iterator4nextCsdfcctoTlxUU_11common_fuzz:
  720|  5.72k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  5.72k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  5.72k|        if keep_going {
  723|  5.33k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    388|            None
  726|       |        }
  727|  5.72k|    }
_RNvXs_NtCs9fCioswQzwR_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCsjU8j9Adh1pR_4core4iter6traits8iterator8Iterator4nextCsdfcctoTlxUU_11common_fuzz:
  720|  3.15k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  3.15k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  3.15k|        if keep_going {
  723|  2.76k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    388|            None
  726|       |        }
  727|  3.15k|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCs4oDG9vsSFaP_9multihash9multihash9MultihashKj40_EECsdfcctoTlxUU_11common_fuzz:
  167|    296|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    296|    where
  169|    296|        A: Arbitrary<'a>,
  170|    296|    {
  171|    296|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    296|    }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsdfcctoTlxUU_11common_fuzz:
  132|    388|    pub fn is_empty(&self) -> bool {
  133|    388|        self.len() == 0
  134|    388|    }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured3lenCsdfcctoTlxUU_11common_fuzz:
  108|    388|    pub fn len(&self) -> usize {
  109|    388|        self.data.len()
  110|    388|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsdfcctoTlxUU_11common_fuzz:
  293|    388|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    388|    where
  295|    388|        T: Int,
  296|    388|    {
  297|    388|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    388|        self.data = &self.data[bytes_consumed..];
  299|    388|        Ok(result)
  300|    388|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int13from_unsignedCs4SHI63ivlID_10fvm_shared:
  845|  1.36k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  1.36k|                    unsigned as Self
  847|  1.36k|                }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs4SHI63ivlID_10fvm_shared:
  132|  11.4k|    pub fn is_empty(&self) -> bool {
  133|  11.4k|        self.len() == 0
  134|  11.4k|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int7from_u8Cs4SHI63ivlID_10fvm_shared:
  821|  1.36k|                fn from_u8(b: u8) -> Self {
  822|  1.36k|                    b as Self
  823|  1.36k|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECs4SHI63ivlID_10fvm_shared:
  293|  1.36k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  1.36k|    where
  295|  1.36k|        T: Int,
  296|  1.36k|    {
  297|  1.36k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  1.36k|        self.data = &self.data[bytes_consumed..];
  299|  1.36k|        Ok(result)
  300|  1.36k|    }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured3lenCs4SHI63ivlID_10fvm_shared:
  108|  11.4k|    pub fn len(&self) -> usize {
  109|  11.4k|        self.data.len()
  110|  11.4k|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int11to_unsignedCs4SHI63ivlID_10fvm_shared:
  841|  2.73k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  2.73k|                    self as $unsigned_ty
  843|  2.73k|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs4SHI63ivlID_10fvm_shared:
  302|  1.36k|    fn int_in_range_impl<T>(
  303|  1.36k|        range: ops::RangeInclusive<T>,
  304|  1.36k|        mut bytes: impl Iterator<Item = u8>,
  305|  1.36k|    ) -> Result<(T, usize)>
  306|  1.36k|    where
  307|  1.36k|        T: Int,
  308|  1.36k|    {
  309|  1.36k|        let start = *range.start();
  310|  1.36k|        let end = *range.end();
  311|  1.36k|        assert!(
  312|  1.36k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  1.36k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  1.36k|        }
  321|  1.36k|
  322|  1.36k|        // From here on out we work with the unsigned representation. All of the
  323|  1.36k|        // operations performed below work out just as well whether or not `T`
  324|  1.36k|        // is a signed or unsigned integer.
  325|  1.36k|        let start = start.to_unsigned();
  326|  1.36k|        let end = end.to_unsigned();
  327|  1.36k|
  328|  1.36k|        let delta = end.wrapping_sub(start);
  329|  1.36k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  1.36k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  1.36k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  2.73k|        while (bytes_consumed < mem::size_of::<T>())
  339|  2.73k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  1.36k|            let byte = match bytes.next() {
  342|      2|                None => break,
  343|  1.36k|                Some(b) => b,
  344|  1.36k|            };
  345|  1.36k|            bytes_consumed += 1;
  346|  1.36k|
  347|  1.36k|            // Combine this byte into our arbitrary integer, but avoid
  348|  1.36k|            // overflowing the shift for `u8` and `i8`.
  349|  1.36k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  1.36k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  1.36k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  1.36k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  1.36k|        let result = start.wrapping_add(offset);
  365|  1.36k|
  366|  1.36k|        // And convert back to our maybe-signed representation.
  367|  1.36k|        let result = T::from_unsigned(result);
  368|  1.36k|        debug_assert!(*range.start() <= result);
  369|  1.36k|        debug_assert!(result <= *range.end());
  370|       |
  371|  1.36k|        Ok((result, bytes_consumed))
  372|  1.36k|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int12wrapping_addCs4SHI63ivlID_10fvm_shared:
  833|  1.36k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  1.36k|                    <$ty>::wrapping_add(self, rhs)
  835|  1.36k|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int10from_usizeCs4SHI63ivlID_10fvm_shared:
  825|  2.73k|                fn from_usize(u: usize) -> Self {
  826|  2.73k|                    u as Self
  827|  2.73k|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int12wrapping_subCs4SHI63ivlID_10fvm_shared:
  837|  1.36k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  1.36k|                    <$ty>::wrapping_sub(self, rhs)
  839|  1.36k|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured6choosebECskHqonDxAqFH_17fvm_ipld_bitfield:
  408|    388|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  409|    388|        let idx = self.choose_index(choices.len())?;
  410|    388|        Ok(&choices[idx])
  411|    388|    }
_RNvXs9_NtCs9fCioswQzwR_9arbitrary12unstructuredlNtB5_3Int11to_unsignedCskHqonDxAqFH_17fvm_ipld_bitfield:
  841|  8.92k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  8.92k|                    self as $unsigned_ty
  843|  8.92k|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCskHqonDxAqFH_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    388|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    388|    where
  169|    388|        A: Arbitrary<'a>,
  170|    388|    {
  171|    388|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    388|    }
_RNvXs9_NtCs9fCioswQzwR_9arbitrary12unstructuredlNtB5_3Int13from_unsignedCskHqonDxAqFH_17fvm_ipld_bitfield:
  845|  4.46k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  4.46k|                    unsigned as Self
  847|  4.46k|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECskHqonDxAqFH_17fvm_ipld_bitfield:
  293|  4.46k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  4.46k|    where
  295|  4.46k|        T: Int,
  296|  4.46k|    {
  297|  4.46k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  4.46k|        self.data = &self.data[bytes_consumed..];
  299|  4.46k|        Ok(result)
  300|  4.46k|    }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECskHqonDxAqFH_17fvm_ipld_bitfield:
  213|    776|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    776|    where
  215|    776|        ElementType: Arbitrary<'a>,
  216|    776|    {
  217|    776|        let byte_size = self.arbitrary_byte_size()?;
  218|    776|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    776|        let elem_size = upper.unwrap_or(lower * 2);
  220|    776|        let elem_size = std::cmp::max(1, elem_size);
  221|    776|        Ok(byte_size / elem_size)
  222|    776|    }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int10from_usizeCskHqonDxAqFH_17fvm_ipld_bitfield:
  825|  8.92k|                fn from_usize(u: usize) -> Self {
  826|  8.92k|                    u as Self
  827|  8.92k|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECskHqonDxAqFH_17fvm_ipld_bitfield:
  302|  4.46k|    fn int_in_range_impl<T>(
  303|  4.46k|        range: ops::RangeInclusive<T>,
  304|  4.46k|        mut bytes: impl Iterator<Item = u8>,
  305|  4.46k|    ) -> Result<(T, usize)>
  306|  4.46k|    where
  307|  4.46k|        T: Int,
  308|  4.46k|    {
  309|  4.46k|        let start = *range.start();
  310|  4.46k|        let end = *range.end();
  311|  4.46k|        assert!(
  312|  4.46k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  4.46k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  4.46k|        }
  321|  4.46k|
  322|  4.46k|        // From here on out we work with the unsigned representation. All of the
  323|  4.46k|        // operations performed below work out just as well whether or not `T`
  324|  4.46k|        // is a signed or unsigned integer.
  325|  4.46k|        let start = start.to_unsigned();
  326|  4.46k|        let end = end.to_unsigned();
  327|  4.46k|
  328|  4.46k|        let delta = end.wrapping_sub(start);
  329|  4.46k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  4.46k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  4.46k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  8.92k|        while (bytes_consumed < mem::size_of::<T>())
  339|  8.92k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  4.46k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  4.46k|                Some(b) => b,
  344|  4.46k|            };
  345|  4.46k|            bytes_consumed += 1;
  346|  4.46k|
  347|  4.46k|            // Combine this byte into our arbitrary integer, but avoid
  348|  4.46k|            // overflowing the shift for `u8` and `i8`.
  349|  4.46k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  4.46k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  4.46k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  4.46k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  4.46k|        let result = start.wrapping_add(offset);
  365|  4.46k|
  366|  4.46k|        // And convert back to our maybe-signed representation.
  367|  4.46k|        let result = T::from_unsigned(result);
  368|  4.46k|        debug_assert!(*range.start() <= result);
  369|  4.46k|        debug_assert!(result <= *range.end());
  370|       |
  371|  4.46k|        Ok((result, bytes_consumed))
  372|  4.46k|    }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int12wrapping_subCskHqonDxAqFH_17fvm_ipld_bitfield:
  837|  4.46k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  4.46k|                    <$ty>::wrapping_sub(self, rhs)
  839|  4.46k|                }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int7from_u8CskHqonDxAqFH_17fvm_ipld_bitfield:
  821|  4.46k|                fn from_u8(b: u8) -> Self {
  822|  4.46k|                    b as Self
  823|  4.46k|                }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int12wrapping_addCskHqonDxAqFH_17fvm_ipld_bitfield:
  833|  4.46k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  4.46k|                    <$ty>::wrapping_add(self, rhs)
  835|  4.46k|                }
_RNvXs2_NtCs9fCioswQzwR_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  845|     54|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|     54|                    unsigned as Self
  847|     54|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    598|    fn int_in_range_impl<T>(
  303|    598|        range: ops::RangeInclusive<T>,
  304|    598|        mut bytes: impl Iterator<Item = u8>,
  305|    598|    ) -> Result<(T, usize)>
  306|    598|    where
  307|    598|        T: Int,
  308|    598|    {
  309|    598|        let start = *range.start();
  310|    598|        let end = *range.end();
  311|    598|        assert!(
  312|    598|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    598|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    598|        }
  321|    598|
  322|    598|        // From here on out we work with the unsigned representation. All of the
  323|    598|        // operations performed below work out just as well whether or not `T`
  324|    598|        // is a signed or unsigned integer.
  325|    598|        let start = start.to_unsigned();
  326|    598|        let end = end.to_unsigned();
  327|    598|
  328|    598|        let delta = end.wrapping_sub(start);
  329|    598|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    598|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    598|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  1.19k|        while (bytes_consumed < mem::size_of::<T>())
  339|    598|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    598|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    598|                Some(b) => b,
  344|    598|            };
  345|    598|            bytes_consumed += 1;
  346|    598|
  347|    598|            // Combine this byte into our arbitrary integer, but avoid
  348|    598|            // overflowing the shift for `u8` and `i8`.
  349|    598|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|    598|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    598|        let offset = if delta == T::Unsigned::MAX {
  357|      1|            arbitrary_int
  358|       |        } else {
  359|    597|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    598|        let result = start.wrapping_add(offset);
  365|    598|
  366|    598|        // And convert back to our maybe-signed representation.
  367|    598|        let result = T::from_unsigned(result);
  368|    598|        debug_assert!(*range.start() <= result);
  369|    598|        debug_assert!(result <= *range.end());
  370|       |
  371|    598|        Ok((result, bytes_consumed))
  372|    598|    }
_RNvXs1_NtCs9fCioswQzwR_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  833|    598|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    598|                    <$ty>::wrapping_add(self, rhs)
  835|    598|                }
_RNvXs1_NtCs9fCioswQzwR_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|    597|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|    597|                    <$ty>::checked_add(self, rhs)
  831|    597|                }
_RNvXs2_NtCs9fCioswQzwR_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  829|     54|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|     54|                    <$ty>::checked_add(self, rhs)
  831|     54|                }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  65.8k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  65.8k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  65.8k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  65.8k|        for byte in buffer[n..].iter_mut() {
  525|  2.58k|            *byte = 0;
  526|  2.58k|        }
  527|  65.8k|        self.data = &self.data[n..];
  528|  65.8k|        Ok(())
  529|  65.8k|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int11to_unsignedB7_:
  841|    776|                fn to_unsigned(self) -> Self::Unsigned {
  842|    776|                    self as $unsigned_ty
  843|    776|                }
_RNvXs2_NtCs9fCioswQzwR_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  821|    107|                fn from_u8(b: u8) -> Self {
  822|    107|                    b as Self
  823|    107|                }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|    388|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|    388|        if self.data.len() < size {
  550|     82|            return Err(Error::NotEnoughData);
  551|    306|        }
  552|    306|
  553|    306|        let (for_buf, rest) = self.data.split_at(size);
  554|    306|        self.data = rest;
  555|    306|        Ok(for_buf)
  556|    388|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int10from_usizeB7_:
  825|    705|                fn from_usize(u: usize) -> Self {
  826|    705|                    u as Self
  827|    705|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int13from_unsignedB7_:
  845|    388|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    388|                    unsigned as Self
  847|    388|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|    388|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    388|    where
  295|    388|        T: Int,
  296|    388|    {
  297|    388|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    388|        self.data = &self.data[bytes_consumed..];
  299|    388|        Ok(result)
  300|    388|    }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|    388|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|    388|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|    388|        }
  454|    388|        let idx = self.int_in_range(0..=len - 1)?;
  455|    388|        Ok(idx)
  456|    388|    }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int12wrapping_subB7_:
  837|    388|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    388|                    <$ty>::wrapping_sub(self, rhs)
  839|    388|                }
_RNvXs3_NtCs9fCioswQzwR_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  829|  4.84k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  4.84k|                    <$ty>::checked_add(self, rhs)
  831|  4.84k|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|     54|    fn int_in_range_impl<T>(
  303|     54|        range: ops::RangeInclusive<T>,
  304|     54|        mut bytes: impl Iterator<Item = u8>,
  305|     54|    ) -> Result<(T, usize)>
  306|     54|    where
  307|     54|        T: Int,
  308|     54|    {
  309|     54|        let start = *range.start();
  310|     54|        let end = *range.end();
  311|     54|        assert!(
  312|     54|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|     54|        if start == end {
  319|      0|            return Ok((start, 0));
  320|     54|        }
  321|     54|
  322|     54|        // From here on out we work with the unsigned representation. All of the
  323|     54|        // operations performed below work out just as well whether or not `T`
  324|     54|        // is a signed or unsigned integer.
  325|     54|        let start = start.to_unsigned();
  326|     54|        let end = end.to_unsigned();
  327|     54|
  328|     54|        let delta = end.wrapping_sub(start);
  329|     54|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|     54|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|     54|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    161|        while (bytes_consumed < mem::size_of::<T>())
  339|    108|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    107|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    107|                Some(b) => b,
  344|    107|            };
  345|    107|            bytes_consumed += 1;
  346|    107|
  347|    107|            // Combine this byte into our arbitrary integer, but avoid
  348|    107|            // overflowing the shift for `u8` and `i8`.
  349|    107|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    107|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|     54|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|     54|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|     54|        let result = start.wrapping_add(offset);
  365|     54|
  366|     54|        // And convert back to our maybe-signed representation.
  367|     54|        let result = T::from_unsigned(result);
  368|     54|        debug_assert!(*range.start() <= result);
  369|     54|        debug_assert!(result <= *range.end());
  370|       |
  371|     54|        Ok((result, bytes_consumed))
  372|     54|    }
_RNvXs1_NtCs9fCioswQzwR_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  841|  1.19k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  1.19k|                    self as $unsigned_ty
  843|  1.19k|                }
_RNvXs2_NtCs9fCioswQzwR_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  841|    108|                fn to_unsigned(self) -> Self::Unsigned {
  842|    108|                    self as $unsigned_ty
  843|    108|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int7from_u8B7_:
  821|    317|                fn from_u8(b: u8) -> Self {
  822|    317|                    b as Self
  823|    317|                }
_RINvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    388|    fn int_in_range_impl<T>(
  303|    388|        range: ops::RangeInclusive<T>,
  304|    388|        mut bytes: impl Iterator<Item = u8>,
  305|    388|    ) -> Result<(T, usize)>
  306|    388|    where
  307|    388|        T: Int,
  308|    388|    {
  309|    388|        let start = *range.start();
  310|    388|        let end = *range.end();
  311|    388|        assert!(
  312|    388|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    388|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    388|        }
  321|    388|
  322|    388|        // From here on out we work with the unsigned representation. All of the
  323|    388|        // operations performed below work out just as well whether or not `T`
  324|    388|        // is a signed or unsigned integer.
  325|    388|        let start = start.to_unsigned();
  326|    388|        let end = end.to_unsigned();
  327|    388|
  328|    388|        let delta = end.wrapping_sub(start);
  329|    388|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    388|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    388|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    705|        while (bytes_consumed < mem::size_of::<T>())
  339|    705|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    388|            let byte = match bytes.next() {
  342|     71|                None => break,
  343|    317|                Some(b) => b,
  344|    317|            };
  345|    317|            bytes_consumed += 1;
  346|    317|
  347|    317|            // Combine this byte into our arbitrary integer, but avoid
  348|    317|            // overflowing the shift for `u8` and `i8`.
  349|    317|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    317|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    388|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    388|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    388|        let result = start.wrapping_add(offset);
  365|    388|
  366|    388|        // And convert back to our maybe-signed representation.
  367|    388|        let result = T::from_unsigned(result);
  368|    388|        debug_assert!(*range.start() <= result);
  369|    388|        debug_assert!(result <= *range.end());
  370|       |
  371|    388|        Ok((result, bytes_consumed))
  372|    388|    }
_RNvXs2_NtCs9fCioswQzwR_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  833|     54|                fn wrapping_add(self, rhs: Self) -> Self {
  834|     54|                    <$ty>::wrapping_add(self, rhs)
  835|     54|                }
_RNvXs1_NtCs9fCioswQzwR_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  825|    598|                fn from_usize(u: usize) -> Self {
  826|    598|                    u as Self
  827|    598|                }
_RNvXs2_NtCs9fCioswQzwR_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  825|    108|                fn from_usize(u: usize) -> Self {
  826|    108|                    u as Self
  827|    108|                }
_RNvXs1_NtCs9fCioswQzwR_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  845|    598|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    598|                    unsigned as Self
  847|    598|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  829|  2.05k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  2.05k|                    <$ty>::checked_add(self, rhs)
  831|  2.05k|                }
_RNvXs1_NtCs9fCioswQzwR_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  837|    598|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    598|                    <$ty>::wrapping_sub(self, rhs)
  839|    598|                }
_RNvXs2_NtCs9fCioswQzwR_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  837|     54|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|     54|                    <$ty>::wrapping_sub(self, rhs)
  839|     54|                }
_RNvXs1_NtCs9fCioswQzwR_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  821|    598|                fn from_u8(b: u8) -> Self {
  822|    598|                    b as Self
  823|    598|                }
_RNvXs6_NtCs9fCioswQzwR_9arbitrary12unstructuredjNtB5_3Int12wrapping_addB7_:
  833|    388|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    388|                    <$ty>::wrapping_add(self, rhs)
  835|    388|                }
_RNvMNtCs9fCioswQzwR_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    776|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    776|        if self.data.is_empty() {
  226|    122|            Ok(0)
  227|    654|        } else if self.data.len() == 1 {
  228|      2|            self.data = &[];
  229|      2|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    652|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    598|                let bytes = 1;
  242|    598|                let max_size = self.data.len() - bytes;
  243|    598|                let (rest, for_size) = self.data.split_at(max_size);
  244|    598|                self.data = rest;
  245|    598|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|     54|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|     54|                let bytes = 2;
  248|     54|                let max_size = self.data.len() - bytes;
  249|     54|                let (rest, for_size) = self.data.split_at(max_size);
  250|     54|                self.data = rest;
  251|     54|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    652|            Ok(len)
  267|       |        }
  268|    776|    }

_RINvNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  125|  8.35k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  8.35k|    let b = reader.fill(1)?
  127|  8.35k|        .as_ref()
  128|  8.35k|        .get(0)
  129|  8.35k|        .copied()
  130|  8.35k|        .ok_or(Error::Eof)?;
  131|  8.35k|    reader.advance(1);
  132|  8.35k|    Ok(b)
  133|  8.35k|}
_RNvNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec8if_majorCslhj6TOXVrem_11cbor_encode:
  894|    306|pub fn if_major(byte: u8) -> u8 {
  895|    306|    byte >> 5
  896|    306|}
_RINvXss_NtNtCsibAuZ6S2WHi_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  256|    306|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    306|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    306|                }
_RINvXs5_NtNtCsibAuZ6S2WHi_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsdriq9yqlPVC_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  510|  6.37k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  6.37k|        use crate::alloc::borrow::Cow;
  512|  6.37k|
  513|  6.37k|        let mut buf = Vec::new();
  514|  6.37k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  6.37k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|      0|            Cow::Owned(buf)
  518|       |        }))
  519|  6.37k|    }
_RINvYINtNtNtCsibAuZ6S2WHi_7cbor4ii4core5types5BytesINtNtCsdriq9yqlPVC_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
   73|  6.37k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  6.37k|        let byte = pull_one(reader)?;
   75|  6.37k|        Self::decode_with(byte, reader)
   76|  6.37k|    }
_RINvXsc_NtNtCsibAuZ6S2WHi_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  615|    612|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|    612|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|    612|    }
_RINvMs0_NtNtCsibAuZ6S2WHi_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  227|  7.59k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  7.59k|        match self.byte & self.major_limit {
  229|  7.59k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|    757|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|     32|                let mut buf = [0; 2];
  233|     32|                pull_exact(reader, &mut buf)?;
  234|     32|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|     26|                let mut buf = [0; 4];
  238|     26|                pull_exact(reader, &mut buf)?;
  239|     26|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    252|                let mut buf = [0; 8];
  243|    252|                pull_exact(reader, &mut buf)?;
  244|    252|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  7.59k|    }
_RINvYyNtNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
   73|    306|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    306|        let byte = pull_one(reader)?;
   75|    306|        Self::decode_with(byte, reader)
   76|    306|    }
_RNvMs0_NtNtCsibAuZ6S2WHi_7cbor4ii4core3decNtB5_7TypeNum3newCslhj6TOXVrem_11cbor_encode:
  179|  7.59k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  7.59k|        TypeNum { major_limit, byte }
  181|  7.59k|    }
_RINvNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  431|  6.37k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  6.37k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  6.37k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  6.37k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  6.37k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  6.37k|            if buf.len() >= len {
  440|  6.37k|                reader.advance(len);
  441|  6.37k|                return Ok(Some(&buf[..len]));
  442|      0|            }
  443|      0|        }
  444|       |
  445|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|      0|        while len != 0 {
  448|      0|            let readbuf = reader.fill(len)?;
  449|      0|            let readbuf = readbuf.as_ref();
  450|      0|
  451|      0|            if readbuf.is_empty() {
  452|      0|                return Err(Error::Eof);
  453|      0|            }
  454|      0|
  455|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      0|
  457|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      0|            reader.advance(readlen);
  459|      0|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|      0|            let byte = pull_one(reader)?;
  467|       |
  468|      0|            if byte == marker::BREAK {
  469|      0|                break
  470|      0|            }
  471|      0|
  472|      0|            if !reader.step_in() {
  473|      0|                return Err(Error::DepthLimit);
  474|      0|            }
  475|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|      0|            let reader = &mut *reader;
  477|       |
  478|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|      0|                buf.extend_from_slice(longbuf);
  480|      0|            }
  481|       |        }
  482|       |
  483|      0|        Ok(None)
  484|       |    }
  485|  6.37k|}
_RNvMNtNtCsibAuZ6S2WHi_7cbor4ii4core3decNtB2_9Reference6as_refCslhj6TOXVrem_11cbor_encode:
   81|  8.66k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  8.66k|        match self {
   83|  8.66k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  8.66k|    }
_RINvXsg_NtNtCsibAuZ6S2WHi_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  707|    306|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    306|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    306|    }
_RINvYNtNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
   73|    306|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    306|        let byte = pull_one(reader)?;
   75|    306|        Self::decode_with(byte, reader)
   76|    306|    }
_RINvYNtNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
   73|    612|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    612|        let byte = pull_one(reader)?;
   75|    612|        Self::decode_with(byte, reader)
   76|    612|    }
_RINvNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  136|    310|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    620|    while !buf.is_empty() {
  138|    310|        let readbuf = reader.fill(buf.len())?;
  139|    310|        let readbuf = readbuf.as_ref();
  140|    310|
  141|    310|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    310|        }
  144|    310|
  145|    310|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    310|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    310|        reader.advance(len);
  148|    310|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    310|    Ok(())
  152|    310|}
_RINvNtNtCsibAuZ6S2WHi_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
  599|  6.98k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  6.98k|    -> Result<Option<usize>, Error<R::Error>>
  601|  6.98k|{
  602|  6.98k|    if byte != (marker::START | (major << 5)) {
  603|  6.98k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  6.98k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  6.98k|        Ok(Some(len))
  606|       |    } else {
  607|      0|        Ok(None)
  608|       |    }
  609|  6.98k|}

_RNvMs0_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB5_7TypeNumyE3newCslhj6TOXVrem_11cbor_encode:
   52|  15.1k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  15.1k|        TypeNum { type_, value }
   54|  15.1k|    }
_RNvMs0_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB5_7TypeNumhE3newCslhj6TOXVrem_11cbor_encode:
   52|  14.5k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  14.5k|        TypeNum { type_, value }
   54|  14.5k|    }
_RINvXsi_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
  316|    612|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  317|    612|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    612|        self.1.encode(writer)
  319|    612|    }
_RINvXs1_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
   59|  14.5k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  14.5k|        match self.value {
   61|  14.5k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.51k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  14.5k|        Ok(())
   65|  14.5k|    }
_RINvXs7_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
  208|  12.7k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  209|  12.7k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  12.7k|        writer.push(self.0)?;
  211|  12.7k|        Ok(())
  212|  12.7k|    }
_RINvXsd_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
  269|  1.22k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  270|  1.22k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.22k|        Ok(())
  272|  1.22k|    }
_RINvXs2_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
   70|  14.6k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  14.6k|        match u8::try_from(self.value) {
   72|  14.5k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     64|                let [x0, x1] = self.value.to_be_bytes();
   75|     64|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  14.6k|        Ok(())
   79|  14.6k|    }
_RINvXs3_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
   84|  14.6k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  14.6k|        match u16::try_from(self.value) {
   86|  14.6k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     52|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     52|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  14.6k|        Ok(())
   93|  14.6k|    }
_RINvXsu_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
  159|    612|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    612|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    612|                }
_RNvMs0_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB5_7TypeNumtE3newCslhj6TOXVrem_11cbor_encode:
   52|  14.6k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  14.6k|        TypeNum { type_, value }
   54|  14.6k|    }
_RNvMs0_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB5_7TypeNummE3newCslhj6TOXVrem_11cbor_encode:
   52|  14.6k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  14.6k|        TypeNum { type_, value }
   54|  14.6k|    }
_RINvXs4_NtNtCsibAuZ6S2WHi_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECslhj6TOXVrem_11cbor_encode:
   98|  15.1k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  15.1k|        match u32::try_from(self.value) {
  100|  14.6k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    504|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    504|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  15.1k|        Ok(())
  107|  15.1k|    }

_RNvXs1_NtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCslhj6TOXVrem_11cbor_encode:
   68|  15.0k|    fn advance(&mut self, n: usize) {
   69|  15.0k|        let len = core::cmp::min(self.buf.len(), n);
   70|  15.0k|        self.buf = &self.buf[len..];
   71|  15.0k|    }
_RNvXs1_NtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCslhj6TOXVrem_11cbor_encode:
   84|    612|    fn step_out(&mut self) {
   85|    612|        self.limit += 1;
   86|    612|    }
_RNvMs0_NtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB5_11SliceReader3newCslhj6TOXVrem_11cbor_encode:
   53|    306|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    306|        SliceReader { buf, limit: 256 }
   55|    306|    }
_RNvMNtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB2_9BufWriter3newCslhj6TOXVrem_11cbor_encode:
   14|    612|    pub fn new(buf: Vec<u8>) -> Self {
   15|    612|       BufWriter(buf)
   16|    612|    }
_RNvXs1_NtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCslhj6TOXVrem_11cbor_encode:
   62|  15.6k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  15.6k|        let len = core::cmp::min(self.buf.len(), want);
   64|  15.6k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  15.6k|    }
_RNvXs1_NtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCslhj6TOXVrem_11cbor_encode:
   74|    612|    fn step_in(&mut self) -> bool {
   75|    612|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    612|            self.limit = limit;
   77|    612|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    612|    }
_RNvXs_NtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCslhj6TOXVrem_11cbor_encode:
   39|  27.9k|    fn push(&mut self, input: &[u8]) -> Result<(), Self::Error> {
   40|  27.9k|        self.0.try_reserve(input.len())?;
   41|  27.9k|        self.0.extend_from_slice(input);
   42|  27.9k|        Ok(())
   43|  27.9k|    }
_RNvMNtNtCsibAuZ6S2WHi_7cbor4ii4core5utilsNtB2_9BufWriter10into_innerCslhj6TOXVrem_11cbor_encode:
   24|    612|    pub fn into_inner(self) -> Vec<u8> {
   25|    612|        self.0
   26|    612|    }

_RNvXs0_NtCsb854q0c99uP_3cid3arbINtNtB7_3cid3CidKj40_ENtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
   85|    389|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   86|    389|        let v1 = size_hint::and_all(&[
   87|    389|            <[u8; 2]>::size_hint(depth),
   88|    389|            (0, Some(8)),
   89|    389|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   90|    389|        ]);
   91|    389|        if S >= 32 {
   92|    389|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   93|       |        } else {
   94|      0|            v1
   95|       |        }
   96|    389|    }
_RNCNvXs0_NtCsb854q0c99uP_3cid3arbINtNtB9_3cid3CidKj40_ENtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary0CsdfcctoTlxUU_11common_fuzz:
   74|    545|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs0_NtCsb854q0c99uP_3cid3arbINtNtB7_3cid3CidKj40_ENtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitraryCsdfcctoTlxUU_11common_fuzz:
   58|    388|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   59|    388|        if S >= 32 && u.ratio(1, 10)? {
   60|     92|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   61|     11|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   62|    296|        }
   63|    296|
   64|    296|        let mut codec = 0u64;
   65|    296|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   66|       |
   67|    841|        while len_choice & 1 == 1 {
   68|    545|            len_choice >>= 1;
   69|    545|
   70|    545|            let x = u.arbitrary::<u8>();
   71|    545|            let next = codec
   72|    545|                .checked_shl(8)
   73|    545|                .zip(x.ok())
   74|    545|                .map(|(next, x)| next.saturating_add(x as u64));
   75|    545|
   76|    545|            match next {
   77|      0|                None => break,
   78|    545|                Some(next) => codec = next,
   79|       |            }
   80|       |        }
   81|       |
   82|    296|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   83|    388|    }

_RNvMNtCsb854q0c99uP_3cid3cidINtB2_3CidKj40_E3newCslhj6TOXVrem_11cbor_encode:
   99|    295|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    295|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    295|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    295|    }
_RINvMNtCsb854q0c99uP_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsdriq9yqlPVC_5alloc3vec3VechEECslhj6TOXVrem_11cbor_encode:
  179|    612|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    612|        let written = match self.version {
  181|     22|            Version::V0 => self.hash.write(w)?,
  182|    590|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    612|        Ok(written)
  185|    612|    }
_RNvMNtCsb854q0c99uP_3cid3cidINtB2_3CidKj40_E6new_v0Cslhj6TOXVrem_11cbor_encode:
   78|     11|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     11|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     11|        }
   82|     11|        Ok(Self {
   83|     11|            version: Version::V0,
   84|     11|            codec: DAG_PB,
   85|     11|            hash,
   86|     11|        })
   87|     11|    }
_RNvMNtCsb854q0c99uP_3cid3cidINtB2_3CidKj40_E8to_bytesCslhj6TOXVrem_11cbor_encode:
  205|    612|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    612|        let mut bytes = Vec::new();
  207|    612|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    612|        debug_assert_eq!(written, bytes.len());
  209|    612|        bytes
  210|    612|    }
_RNvMNtCsb854q0c99uP_3cid3cidINtB2_3CidKj40_E6new_v1Cslhj6TOXVrem_11cbor_encode:
   90|    295|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    295|        Self {
   92|    295|            version: Version::V1,
   93|    295|            codec,
   94|    295|            hash,
   95|    295|        }
   96|    295|    }
_RINvMNtCsb854q0c99uP_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECslhj6TOXVrem_11cbor_encode:
  140|    306|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    306|        let version = varint_read_u64(&mut r)?;
  142|    306|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    306|        if [version, codec] == [0x12, 0x20] {
  146|     11|            let mut digest = [0u8; 32];
  147|     11|            r.read_exact(&mut digest)?;
  148|     11|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|     11|            return Self::new_v0(mh);
  150|    295|        }
  151|       |
  152|    295|        let version = Version::try_from(version)?;
  153|    295|        match version {
  154|      0|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    295|                let mh = Multihash::read(r)?;
  157|    295|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    306|    }
_RNvXs6_NtCsb854q0c99uP_3cid3cidINtB5_3CidKj40_EINtNtCsjU8j9Adh1pR_4core7convert7TryFromRShE8try_fromCslhj6TOXVrem_11cbor_encode:
  353|    306|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    306|        Self::read_bytes(&mut bytes)
  355|    306|    }
_RINvMNtCsb854q0c99uP_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsdriq9yqlPVC_5alloc3vec3VechEECslhj6TOXVrem_11cbor_encode:
  162|    590|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    590|        let mut version_buf = varint_encode::u64_buffer();
  164|    590|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    590|
  166|    590|        let mut codec_buf = varint_encode::u64_buffer();
  167|    590|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    590|
  169|    590|        let mut written = version.len() + codec.len();
  170|    590|
  171|    590|        w.write_all(version)?;
  172|    590|        w.write_all(codec)?;
  173|    590|        written += self.hash.write(&mut w)?;
  174|       |
  175|    590|        Ok(written)
  176|    590|    }
_RNvMNtCsb854q0c99uP_3cid3cidINtB2_3CidKj40_E6new_v1CsdfcctoTlxUU_11common_fuzz:
   90|    295|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    295|        Self {
   92|    295|            version: Version::V1,
   93|    295|            codec,
   94|    295|            hash,
   95|    295|        }
   96|    295|    }
_RNvMNtCsb854q0c99uP_3cid3cidINtB2_3CidKj40_E6new_v0CsdfcctoTlxUU_11common_fuzz:
   78|     11|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     11|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     11|        }
   82|     11|        Ok(Self {
   83|     11|            version: Version::V0,
   84|     11|            codec: DAG_PB,
   85|     11|            hash,
   86|     11|        })
   87|     11|    }

_RINvXs_NtCsb854q0c99uP_3cid5serdeNtB5_17BytesToCidVisitorNtNtCsb075exAdOJr_5serde2de7Visitor11visit_bytesINtNtCs1STDibvQdG3_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjU8j9Adh1pR_4core7convert10InfallibleEECslhj6TOXVrem_11cbor_encode:
   48|    306|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    306|    where
   50|    306|        E: de::Error,
   51|    306|    {
   52|    306|        CidGeneric::<SIZE>::try_from(value)
   53|    306|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    306|    }
_RINvXNtCsb854q0c99uP_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsb075exAdOJr_5serde3ser9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   29|    612|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    612|    where
   31|    612|        S: ser::Serializer,
   32|    612|    {
   33|    612|        let value = ByteBuf::from(self.to_bytes());
   34|    612|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    612|    }
_RINvXNvXs0_NtCsb854q0c99uP_3cid5serdeINtNtBb_3cid3CidKpENtNtCsb075exAdOJr_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   97|    306|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    306|            where
   99|    306|                D: de::Deserializer<'de>,
  100|    306|            {
  101|    306|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    306|            }
_RINvXs0_NtCsb854q0c99uP_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCsb075exAdOJr_5serde2de11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   79|    306|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    306|    where
   81|    306|        D: de::Deserializer<'de>,
   82|    306|    {
   83|    306|        /// Main visitor to deserialize a CID.
   84|    306|        ///
   85|    306|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    306|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    306|        /// to bytes.
   88|    306|        struct MainEntryVisitor<const SIZE: usize>;
   89|    306|
   90|    306|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    306|            type Value = CidGeneric<SIZE>;
   92|    306|
   93|    306|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    306|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    306|            }
   96|    306|
   97|    306|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    306|            where
   99|    306|                D: de::Deserializer<'de>,
  100|    306|            {
  101|    306|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    306|            }
  103|    306|        }
  104|    306|
  105|    306|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    306|    }

_RNvXs0_NtCsb854q0c99uP_3cid7versionyINtNtCsjU8j9Adh1pR_4core7convert4FromNtB5_7VersionE4fromCslhj6TOXVrem_11cbor_encode:
   44|    590|    fn from(ver: Version) -> u64 {
   45|    590|        match ver {
   46|      0|            Version::V0 => 0,
   47|    590|            Version::V1 => 1,
   48|       |        }
   49|    590|    }
_RNvXs_NtCsb854q0c99uP_3cid7versionNtB4_7VersionINtNtCsjU8j9Adh1pR_4core7convert7TryFromyE8try_fromCslhj6TOXVrem_11cbor_encode:
   34|    295|    fn try_from(raw: u64) -> Result<Self> {
   35|    295|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    295|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    295|    }

_RNvMs_Csadc9gB42cT5_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCslhj6TOXVrem_11cbor_encode:
   40|    306|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    306|        match self {
   42|    306|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    306|    }
_RNvNvCslhj6TOXVrem_11cbor_encode1__19___libfuzzer_sys_run:
  303|    306|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    306|                $body
  305|    306|            }
_RNvXCsadc9gB42cT5_13libfuzzer_sysNtB2_6CorpusINtNtCsjU8j9Adh1pR_4core7convert4FromuE4fromCslhj6TOXVrem_11cbor_encode:
   30|    306|    fn from(_: ()) -> Self {
   31|    306|        Self::Keep
   32|    306|    }
rust_fuzzer_test_input:
  259|    389|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    389|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    389|
  262|    389|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    389|                // implementation. This helps the fuzzer avoid exploring all the
  264|    389|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    389|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    389|                // get to longer inputs that actually lead to interesting executions
  267|    389|                // quicker.
  268|    389|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    388|                }
  271|    388|
  272|    388|                let mut u = Unstructured::new(bytes);
  273|    388|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    388|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    388|                }
  291|       |
  292|    388|                let data = match data {
  293|    306|                    Ok(d) => d,
  294|     82|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    306|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    306|                result.to_libfuzzer_code()
  299|    389|            }
LLVMFuzzerTestOneInput:
   58|    389|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    389|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    389|    });
   63|    389|
   64|    389|    match test_input {
   65|    389|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    389|}
_RNCNvCsadc9gB42cT5_13libfuzzer_sys15test_input_wrap0B3_:
   59|    389|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    389|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    389|        rust_fuzzer_test_input(data_slice)
   62|    389|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtCs4oDG9vsSFaP_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hintCslhj6TOXVrem_11cbor_encode:
   65|    389|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   66|    389|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   67|    389|    }
_RNCNvXs_NtCs4oDG9vsSFaP_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary0CsdfcctoTlxUU_11common_fuzz:
   51|    426|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs_NtCs4oDG9vsSFaP_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitraryCsdfcctoTlxUU_11common_fuzz:
   40|    296|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   41|    296|        let mut code = 0u64;
   42|    296|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   43|       |
   44|    722|        while len_choice & 1 == 1 {
   45|    426|            len_choice >>= 1;
   46|    426|
   47|    426|            let x = u.arbitrary::<u8>();
   48|    426|            let next = code
   49|    426|                .checked_shl(8)
   50|    426|                .zip(x.ok())
   51|    426|                .map(|(next, x)| next.saturating_add(x as u64));
   52|    426|
   53|    426|            match next {
   54|      0|                None => break,
   55|    426|                Some(next) => code = next,
   56|       |            }
   57|       |        }
   58|       |
   59|    296|        let size = u.int_in_range(0..=S)?;
   60|    296|        let data = u.bytes(size)?;
   61|       |
   62|    295|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   63|    296|    }

_RNvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB4_9MultihashKj40_E4codeCslhj6TOXVrem_11cbor_encode:
  120|    623|    pub const fn code(&self) -> u64 {
  121|    623|        self.code
  122|    623|    }
_RINvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsdriq9yqlPVC_5alloc3vec3VechEECslhj6TOXVrem_11cbor_encode:
  163|    590|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    590|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    590|    }
_RINvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsdriq9yqlPVC_5alloc3vec3VechEECslhj6TOXVrem_11cbor_encode:
  163|     22|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     22|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     22|    }
_RINvNtCs4oDG9vsSFaP_9multihash9multihash15write_multihashQINtNtCsdriq9yqlPVC_5alloc3vec3VechEECslhj6TOXVrem_11cbor_encode:
  310|     22|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     22|where
  312|     22|    W: io::Write,
  313|     22|{
  314|     22|    let mut code_buf = varint_encode::u64_buffer();
  315|     22|    let code = varint_encode::u64(code, &mut code_buf);
  316|     22|
  317|     22|    let mut size_buf = varint_encode::u8_buffer();
  318|     22|    let size = varint_encode::u8(size, &mut size_buf);
  319|     22|
  320|     22|    let written = code.len() + size.len() + digest.len();
  321|     22|
  322|     22|    w.write_all(code)?;
  323|     22|    w.write_all(size)?;
  324|     22|    w.write_all(digest)?;
  325|       |
  326|     22|    Ok(written)
  327|     22|}
_RNvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB4_9MultihashKj40_E6digestCslhj6TOXVrem_11cbor_encode:
  130|    612|    pub fn digest(&self) -> &[u8] {
  131|    612|        &self.digest[..self.size as usize]
  132|    612|    }
_RINvNtCs4oDG9vsSFaP_9multihash9multihash15write_multihashQQINtNtCsdriq9yqlPVC_5alloc3vec3VechEECslhj6TOXVrem_11cbor_encode:
  310|    590|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    590|where
  312|    590|    W: io::Write,
  313|    590|{
  314|    590|    let mut code_buf = varint_encode::u64_buffer();
  315|    590|    let code = varint_encode::u64(code, &mut code_buf);
  316|    590|
  317|    590|    let mut size_buf = varint_encode::u8_buffer();
  318|    590|    let size = varint_encode::u8(size, &mut size_buf);
  319|    590|
  320|    590|    let written = code.len() + size.len() + digest.len();
  321|    590|
  322|    590|    w.write_all(code)?;
  323|    590|    w.write_all(size)?;
  324|    590|    w.write_all(digest)?;
  325|       |
  326|    590|    Ok(written)
  327|    590|}
_RINvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECslhj6TOXVrem_11cbor_encode:
  135|    295|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    295|    where
  137|    295|        Self: Sized,
  138|    295|    {
  139|    295|        let (code, size, digest) = read_multihash(r)?;
  140|    295|        Ok(Self { code, size, digest })
  141|    295|    }
_RNvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB4_9MultihashKj40_E4wrapCslhj6TOXVrem_11cbor_encode:
  101|     11|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     11|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     11|        }
  105|     11|        let size = input_digest.len();
  106|     11|        let mut digest = [0; S];
  107|     11|        let mut i = 0;
  108|    363|        while i < size {
  109|    352|            digest[i] = input_digest[i];
  110|    352|            i += 1;
  111|    352|        }
  112|     11|        Ok(Self {
  113|     11|            code,
  114|     11|            size: size as u8,
  115|     11|            digest,
  116|     11|        })
  117|     11|    }
_RNvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB4_9MultihashKj40_E4sizeCslhj6TOXVrem_11cbor_encode:
  125|    623|    pub const fn size(&self) -> u8 {
  126|    623|        self.size
  127|    623|    }
_RINvNtCs4oDG9vsSFaP_9multihash9multihash14read_multihashQRShKj40_ECslhj6TOXVrem_11cbor_encode:
  335|    295|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    295|where
  337|    295|    R: io::Read,
  338|    295|{
  339|    295|    let code = read_u64(&mut r)?;
  340|    295|    let size = read_u64(&mut r)?;
  341|       |
  342|    295|    if size > S as u64 || size > u8::MAX as u64 {
  343|      0|        return Err(Error::InvalidSize(size));
  344|    295|    }
  345|    295|
  346|    295|    let mut digest = [0; S];
  347|    295|    r.read_exact(&mut digest[..size as usize])?;
  348|    295|    Ok((code, size as u8, digest))
  349|    295|}
_RNvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsdfcctoTlxUU_11common_fuzz:
  125|     11|    pub const fn size(&self) -> u8 {
  126|     11|        self.size
  127|     11|    }
_RNvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB4_9MultihashKj40_E4codeCsdfcctoTlxUU_11common_fuzz:
  120|     11|    pub const fn code(&self) -> u64 {
  121|     11|        self.code
  122|     11|    }
_RNvMs_NtCs4oDG9vsSFaP_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsdfcctoTlxUU_11common_fuzz:
  101|    306|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    306|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    306|        }
  105|    306|        let size = input_digest.len();
  106|    306|        let mut digest = [0; S];
  107|    306|        let mut i = 0;
  108|    868|        while i < size {
  109|    562|            digest[i] = input_digest[i];
  110|    562|            i += 1;
  111|    562|        }
  112|    306|        Ok(Self {
  113|    306|            code,
  114|    306|            size: size as u8,
  115|    306|            digest,
  116|    306|        })
  117|    306|    }

_RNvXs4_NtCs4oDG9vsSFaP_9multihash14multihash_implyINtNtCsjU8j9Adh1pR_4core7convert4FromNtB5_4CodeE4fromCsdfcctoTlxUU_11common_fuzz:
   11|     92|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCs4SHI63ivlID_10fvm_shared7address8protocol8ProtocolNtNtCsl1LO3hdC5B7_10num_traits4cast13FromPrimitive7from_u8B8_:
  448|  5.14k|    fn from_u8(n: u8) -> Option<Self> {
  449|  5.14k|        FromPrimitive::from_u64(From::from(n))
  450|  5.14k|    }

_RNvMs2_NtCsigujZW0bqkV_9once_cell3impINtB5_8OnceCellNtNtCsdriq9yqlPVC_5alloc6string6StringE14is_initializedCslhj6TOXVrem_11cbor_encode:
   49|    388|    pub(crate) fn is_initialized(&self) -> bool {
   50|    388|        // An `Acquire` load is enough because that makes all the initialization
   51|    388|        // operations visible to us, and, this being a fast path, weaker
   52|    388|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    388|        // `SeqCst` operations on the slow path.
   54|    388|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    388|    }

_RNvMs4_NtCsigujZW0bqkV_9once_cell4syncINtB5_8OnceCellNtNtCsdriq9yqlPVC_5alloc6string6StringE3getCslhj6TOXVrem_11cbor_encode:
  965|    388|        pub fn get(&self) -> Option<&T> {
  966|    388|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    388|                None
  971|       |            }
  972|    388|        }

_RINvCsgvGrqbVl5Y8_10scopeguard5guardQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEFBy_EuECslhj6TOXVrem_11cbor_encode:
  375|    612|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|    612|where
  377|    612|    F: FnOnce(T),
  378|    612|{
  379|    612|    ScopeGuard::with_strategy(v, dropfn)
  380|    612|}
_RNvXs4_CsgvGrqbVl5Y8_10scopeguardINtB5_10ScopeGuardQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsjU8j9Adh1pR_4core3ops5deref8DerefMut9deref_mutCslhj6TOXVrem_11cbor_encode:
  460|    612|    fn deref_mut(&mut self) -> &mut T {
  461|    612|        &mut *self.value
  462|    612|    }
_RNvXs5_CsgvGrqbVl5Y8_10scopeguardINtB5_10ScopeGuardQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsjU8j9Adh1pR_4core3ops4drop4Drop4dropCslhj6TOXVrem_11cbor_encode:
  470|    612|    fn drop(&mut self) {
  471|    612|        // This is OK because the fields are `ManuallyDrop`s
  472|    612|        // which will not be dropped by the compiler.
  473|    612|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|    612|        if S::should_run() {
  475|    612|            dropfn(value);
  476|    612|        }
  477|    612|    }
_RNvMs1_CsgvGrqbVl5Y8_10scopeguardINtB5_10ScopeGuardQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCslhj6TOXVrem_11cbor_encode:
  326|    612|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|    612|        ScopeGuard {
  328|    612|            value: ManuallyDrop::new(v),
  329|    612|            dropfn: ManuallyDrop::new(dropfn),
  330|    612|            strategy: PhantomData,
  331|    612|        }
  332|    612|    }
_RNvXCsgvGrqbVl5Y8_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    612|    fn should_run() -> bool {
  232|    612|        true
  233|    612|    }

_RINvXsX_NtNtCsb075exAdOJr_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  112|    306|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  113|    306|            where
  114|    306|                D: Deserializer<'de>,
  115|    306|            {
  116|    306|                struct PrimitiveVisitor;
  117|    306|
  118|    306|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  119|    306|                    type Value = $primitive;
  120|    306|
  121|    306|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  122|    306|                        formatter.write_str(stringify!($primitive))
  123|    306|                    }
  124|    306|
  125|    306|                    $($($method!($val : $visit);)*)*
  126|    306|                }
  127|    306|
  128|    306|                deserializer.$deserialize(PrimitiveVisitor)
  129|    306|            }
_RINvXNvXsX_NtNtCsb075exAdOJr_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCs1STDibvQdG3_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjU8j9Adh1pR_4core7convert10InfallibleEECslhj6TOXVrem_11cbor_encode:
  137|    306|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  138|    306|        where
  139|    306|            E: Error,
  140|    306|        {
  141|    306|            Ok(v)
  142|    306|        }
_RINvXsh_NtNtCsb075exAdOJr_5serde2de5implsINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
 1046|    306|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1047|    306|    where
 1048|    306|        D: Deserializer<'de>,
 1049|    306|    {
 1050|    306|        struct VecVisitor<T> {
 1051|    306|            marker: PhantomData<T>,
 1052|    306|        }
 1053|    306|
 1054|    306|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1055|    306|        where
 1056|    306|            T: Deserialize<'de>,
 1057|    306|        {
 1058|    306|            type Value = Vec<T>;
 1059|    306|
 1060|    306|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1061|    306|                formatter.write_str("a sequence")
 1062|    306|            }
 1063|    306|
 1064|    306|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1065|    306|            where
 1066|    306|                A: SeqAccess<'de>,
 1067|    306|            {
 1068|    306|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1069|    306|                let mut values = Vec::<T>::with_capacity(capacity);
 1070|    306|
 1071|    306|                while let Some(value) = tri!(seq.next_element()) {
 1072|    306|                    values.push(value);
 1073|    306|                }
 1074|    306|
 1075|    306|                Ok(values)
 1076|    306|            }
 1077|    306|        }
 1078|    306|
 1079|    306|        let visitor = VecVisitor {
 1080|    306|            marker: PhantomData,
 1081|    306|        };
 1082|    306|        deserializer.deserialize_seq(visitor)
 1083|    306|    }
_RINvXNvXsh_NtNtCsb075exAdOJr_5serde2de5implsINtNtCsdriq9yqlPVC_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
 1064|    306|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1065|    306|            where
 1066|    306|                A: SeqAccess<'de>,
 1067|    306|            {
 1068|    306|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1069|    306|                let mut values = Vec::<T>::with_capacity(capacity);
 1070|       |
 1071|  5.14k|                while let Some(value) = tri!(seq.next_element()) {
 1072|  4.84k|                    values.push(value);
 1073|  4.84k|                }
 1074|       |
 1075|    306|                Ok(values)
 1076|    306|            }

_RINvYINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess12next_elementINtNtCsb854q0c99uP_3cid3cid3CidKj40_EECslhj6TOXVrem_11cbor_encode:
 1724|    306|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    306|    where
 1726|    306|        T: Deserialize<'de>,
 1727|    306|    {
 1728|    306|        self.next_element_seed(PhantomData)
 1729|    306|    }
_RINvYINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess12next_elementNtNtCs4SHI63ivlID_10fvm_shared7address7AddressECslhj6TOXVrem_11cbor_encode:
 1724|  5.45k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|  5.45k|    where
 1726|  5.45k|        T: Deserialize<'de>,
 1727|  5.45k|    {
 1728|  5.45k|        self.next_element_seed(PhantomData)
 1729|  5.45k|    }
_RINvXs3_NtCsb075exAdOJr_5serde2deINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  790|  5.14k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  5.14k|    where
  792|  5.14k|        D: Deserializer<'de>,
  793|  5.14k|    {
  794|  5.14k|        T::deserialize(deserializer)
  795|  5.14k|    }
_RINvXs3_NtCsb075exAdOJr_5serde2deINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  790|    306|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    306|    where
  792|    306|        D: Deserializer<'de>,
  793|    306|    {
  794|    306|        T::deserialize(deserializer)
  795|    306|    }
_RINvYINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess12next_elementNtNtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECslhj6TOXVrem_11cbor_encode:
 1724|    306|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    306|    where
 1726|    306|        T: Deserialize<'de>,
 1727|    306|    {
 1728|    306|        self.next_element_seed(PhantomData)
 1729|    306|    }
_RINvXs3_NtCsb075exAdOJr_5serde2deINtNtCsjU8j9Adh1pR_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  790|    306|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    306|    where
  792|    306|        D: Deserializer<'de>,
  793|    306|    {
  794|    306|        T::deserialize(deserializer)
  795|    306|    }
_RINvYINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess12next_elementyECslhj6TOXVrem_11cbor_encode:
 1724|    306|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    306|    where
 1726|    306|        T: Deserialize<'de>,
 1727|    306|    {
 1728|    306|        self.next_element_seed(PhantomData)
 1729|    306|    }
_RINvXs3_NtCsb075exAdOJr_5serde2deINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataINtNtCsb854q0c99uP_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  790|    306|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    306|    where
  792|    306|        D: Deserializer<'de>,
  793|    306|    {
  794|    306|        T::deserialize(deserializer)
  795|    306|    }
_RINvYNtNtCsb854q0c99uP_3cid5serde17BytesToCidVisitorNtNtCsb075exAdOJr_5serde2de7Visitor20visit_borrowed_bytesINtNtCs1STDibvQdG3_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjU8j9Adh1pR_4core7convert10InfallibleEECslhj6TOXVrem_11cbor_encode:
 1563|    306|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    306|    where
 1565|    306|        E: Error,
 1566|    306|    {
 1567|    306|        self.visit_bytes(v)
 1568|    306|    }
_RINvYNtNvXs_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCsb075exAdOJr_5serde2de7Visitor20visit_borrowed_bytesINtNtCs1STDibvQdG3_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjU8j9Adh1pR_4core7convert10InfallibleEECslhj6TOXVrem_11cbor_encode:
 1563|    612|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    612|    where
 1565|    612|        E: Error,
 1566|    612|    {
 1567|    612|        self.visit_bytes(v)
 1568|    612|    }
_RINvYINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECslhj6TOXVrem_11cbor_encode:
 1724|    306|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    306|    where
 1726|    306|        T: Deserialize<'de>,
 1727|    306|    {
 1728|    306|        self.next_element_seed(PhantomData)
 1729|    306|    }
_RINvYINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess12next_elementNtCskHqonDxAqFH_17fvm_ipld_bitfield8BitFieldECslhj6TOXVrem_11cbor_encode:
 1724|    306|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    306|    where
 1726|    306|        T: Deserialize<'de>,
 1727|    306|    {
 1728|    306|        self.next_element_seed(PhantomData)
 1729|    306|    }
_RINvXs3_NtCsb075exAdOJr_5serde2deINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtNtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  790|    306|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    306|    where
  792|    306|        D: Deserializer<'de>,
  793|    306|    {
  794|    306|        T::deserialize(deserializer)
  795|    306|    }
_RINvXs3_NtCsb075exAdOJr_5serde2deINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  790|    306|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    306|    where
  792|    306|        D: Deserializer<'de>,
  793|    306|    {
  794|    306|        T::deserialize(deserializer)
  795|    306|    }
_RINvXs3_NtCsb075exAdOJr_5serde2deINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtCskHqonDxAqFH_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  790|    306|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    306|    where
  792|    306|        D: Deserializer<'de>,
  793|    306|    {
  794|    306|        T::deserialize(deserializer)
  795|    306|    }
_RINvYINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess12next_elementINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEECslhj6TOXVrem_11cbor_encode:
 1724|    306|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    306|    where
 1726|    306|        T: Deserialize<'de>,
 1727|    306|    {
 1728|    306|        self.next_element_seed(PhantomData)
 1729|    306|    }

_RINvNtNtCsb075exAdOJr_5serde2de9size_hint8cautiousNtNtCs4SHI63ivlID_10fvm_shared7address7AddressECslhj6TOXVrem_11cbor_encode:
   11|    306|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|    306|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|    306|
   14|    306|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|    306|        cmp::min(
   18|    306|            hint.unwrap_or(0),
   19|    306|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|    306|        )
   21|       |    }
   22|    306|}

_RINvXs1G_NtNtCsb075exAdOJr_5serde3ser5implsRINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  496|    612|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    612|            where
  498|    612|                S: Serializer,
  499|    612|            {
  500|    612|                (**self).serialize(serializer)
  501|    612|            }
_RINvXs1G_NtNtCsb075exAdOJr_5serde3ser5implsRNtCskHqonDxAqFH_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  496|    612|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    612|            where
  498|    612|                S: Serializer,
  499|    612|            {
  500|    612|                (**self).serialize(serializer)
  501|    612|            }
_RINvXs1G_NtNtCsb075exAdOJr_5serde3ser5implsRINtNtCsb854q0c99uP_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  496|    612|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    612|            where
  498|    612|                S: Serializer,
  499|    612|            {
  500|    612|                (**self).serialize(serializer)
  501|    612|            }
_RINvXs1G_NtNtCsb075exAdOJr_5serde3ser5implsRNtNtCs4SHI63ivlID_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  496|  10.2k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|  10.2k|            where
  498|  10.2k|                S: Serializer,
  499|  10.2k|            {
  500|  10.2k|                (**self).serialize(serializer)
  501|  10.2k|            }
_RINvXs1G_NtNtCsb075exAdOJr_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  496|    612|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    612|            where
  498|    612|                S: Serializer,
  499|    612|            {
  500|    612|                (**self).serialize(serializer)
  501|    612|            }
_RINvXsH_NtNtCsb075exAdOJr_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   11|    612|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    612|            where
   13|    612|                S: Serializer,
   14|    612|            {
   15|    612|                serializer.$method(*self $($cast)*)
   16|    612|            }
_RINvXs1m_NtNtCsb075exAdOJr_5serde3ser5implsINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  197|    612|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  198|    612|            where
  199|    612|                S: Serializer,
  200|    612|            {
  201|    612|                serializer.collect_seq(self)
  202|    612|            }
_RINvXs1G_NtNtCsb075exAdOJr_5serde3ser5implsRNtNtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  496|    612|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    612|            where
  498|    612|                S: Serializer,
  499|    612|            {
  500|    612|                (**self).serialize(serializer)
  501|    612|            }

_RINvYQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer11collect_seqRINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEECslhj6TOXVrem_11cbor_encode:
 1271|    612|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|    612|    where
 1273|    612|        I: IntoIterator,
 1274|    612|        <I as IntoIterator>::Item: Serialize,
 1275|    612|    {
 1276|    612|        let mut iter = iter.into_iter();
 1277|    612|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|    612|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|    612|        serializer.end()
 1280|    612|    }
_RNCINvYQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer11collect_seqRINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEE0Cslhj6TOXVrem_11cbor_encode:
 1278|  9.68k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCsb075exAdOJr_5serde3ser17iterator_len_hintINtNtNtCsjU8j9Adh1pR_4core5slice4iter4IterNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEECslhj6TOXVrem_11cbor_encode:
 1944|    612|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|    612|where
 1946|    612|    I: Iterator,
 1947|    612|{
 1948|    612|    match iter.size_hint() {
 1949|    612|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|    612|}

_RINvMNtCs3ZMUTCdUuTX_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsdriq9yqlPVC_5alloc3vec3VechEECslhj6TOXVrem_11cbor_encode:
   60|    612|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    612|        ByteBuf {
   62|    612|            bytes: bytes.into(),
   63|    612|        }
   64|    612|    }
_RINvXsc_NtCs3ZMUTCdUuTX_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsb075exAdOJr_5serde3ser9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  186|    612|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    612|    where
  188|    612|        S: Serializer,
  189|    612|    {
  190|    612|        serializer.serialize_bytes(&self.bytes)
  191|    612|    }

_RINvNtCs1STDibvQdG3_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderECslhj6TOXVrem_11cbor_encode:
   26|    612|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    612|    let buf = match reader.fill(1)? {
   28|    612|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    612|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|    306|    Ok(byte)
   33|    612|}

_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCsb854q0c99uP_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECslhj6TOXVrem_11cbor_encode:
  317|    306|    fn deserialize_newtype_struct<V>(
  318|    306|        self,
  319|    306|        name: &'static str,
  320|    306|        visitor: V,
  321|    306|    ) -> Result<V::Value, Self::Error>
  322|    306|    where
  323|    306|        V: Visitor<'de>,
  324|    306|    {
  325|    306|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  326|    306|            self.deserialize_cid(visitor)
  327|       |        } else {
  328|      0|            visitor.visit_newtype_struct(self)
  329|       |        }
  330|    306|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess17next_element_seedINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataINtNtCsb854q0c99uP_3cid3cid3CidKj40_EEECslhj6TOXVrem_11cbor_encode:
  476|    306|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    306|    where
  478|    306|        T: de::DeserializeSeed<'de>,
  479|    306|    {
  480|    306|        if self.len > 0 {
  481|    306|            self.len -= 1;
  482|    306|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    306|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess17next_element_seedINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECslhj6TOXVrem_11cbor_encode:
  476|    306|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    306|    where
  478|    306|        T: de::DeserializeSeed<'de>,
  479|    306|    {
  480|    306|        if self.len > 0 {
  481|    306|            self.len -= 1;
  482|    306|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    306|    }
_RINvNtCs1STDibvQdG3_18serde_ipld_dagcbor2de10from_sliceNtNtCsdfcctoTlxUU_11common_fuzz4cbor7PayloadECslhj6TOXVrem_11cbor_encode:
   40|    306|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    306|where
   42|    306|    T: de::Deserialize<'a>,
   43|    306|{
   44|    306|    let reader = SliceReader::new(buf);
   45|    306|    let mut deserializer = Deserializer::from_reader(reader);
   46|    306|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    306|    deserializer.end()?;
   48|    306|    Ok(value)
   49|    306|}
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECslhj6TOXVrem_11cbor_encode:
  239|  5.45k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  5.45k|    where
  241|  5.45k|        V: Visitor<'de>,
  242|  5.45k|    {
  243|  5.45k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|  5.45k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  5.45k|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess17next_element_seedINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtNtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECslhj6TOXVrem_11cbor_encode:
  476|    306|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    306|    where
  478|    306|        T: de::DeserializeSeed<'de>,
  479|    306|    {
  480|    306|        if self.len > 0 {
  481|    306|            self.len -= 1;
  482|    306|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    306|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess17next_element_seedINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEEECslhj6TOXVrem_11cbor_encode:
  476|    306|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    306|    where
  478|    306|        T: de::DeserializeSeed<'de>,
  479|    306|    {
  480|    306|        if self.len > 0 {
  481|    306|            self.len -= 1;
  482|    306|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    306|    }
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECslhj6TOXVrem_11cbor_encode:
  250|    612|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  251|    612|    where
  252|    612|        V: Visitor<'de>,
  253|    612|    {
  254|    612|        self.deserialize_bytes(visitor)
  255|    612|    }
_RNvMs_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE3endCslhj6TOXVrem_11cbor_encode:
  130|    306|    pub fn end(&mut self) -> Result<(), DecodeError<R::Error>> {
  131|    306|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    306|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    306|    }
_RNvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess9size_hintCslhj6TOXVrem_11cbor_encode:
  489|    306|    fn size_hint(&self) -> Option<usize> {
  490|    306|        Some(self.len)
  491|    306|    }
_RNvMs_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE8try_stepCslhj6TOXVrem_11cbor_encode:
  101|    612|    fn try_step<'a>(
  102|    612|        &'a mut self,
  103|    612|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    612|    {
  105|    612|        if self.reader.step_in() {
  106|    612|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    612|    }
_RNvMs1_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE5arrayCslhj6TOXVrem_11cbor_encode:
  433|    306|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  434|    306|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  435|    306|        array_start.0.map_or_else(
  436|    306|            || Err(DecodeError::IndefiniteSize),
  437|    306|            move |len| Ok(Accessor { de, len }),
  438|    306|        )
  439|    306|    }
_RINvXs7_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer17deserialize_bytesNtNtCsb854q0c99uP_3cid5serde17BytesToCidVisitorECslhj6TOXVrem_11cbor_encode:
  628|    306|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  629|    306|        let byte = peek_one(&mut self.0.reader)?;
  630|    306|        match dec::if_major(byte) {
  631|       |            major::BYTES => {
  632|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  633|    306|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  634|    306|                    Cow::Borrowed(buf) => {
  635|    306|                        if buf.len() <= 1 || buf[0] != 0 {
  636|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  637|       |                        } else {
  638|    306|                            visitor.visit_borrowed_bytes(&buf[1..])
  639|       |                        }
  640|       |                    }
  641|      0|                    Cow::Owned(mut buf) => {
  642|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  643|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  644|       |                        } else {
  645|      0|                            buf.remove(0);
  646|      0|                            visitor.visit_byte_buf(buf)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |            }
  651|      0|            _ => Err(DecodeError::Unsupported { byte }),
  652|       |        }
  653|    306|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess17next_element_seedINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtCskHqonDxAqFH_17fvm_ipld_bitfield8BitFieldEECslhj6TOXVrem_11cbor_encode:
  476|    306|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    306|    where
  478|    306|        T: de::DeserializeSeed<'de>,
  479|    306|    {
  480|    306|        if self.len > 0 {
  481|    306|            self.len -= 1;
  482|    306|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    306|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess17next_element_seedINtNtCsjU8j9Adh1pR_4core6marker11PhantomDatayEECslhj6TOXVrem_11cbor_encode:
  476|    306|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    306|    where
  478|    306|        T: de::DeserializeSeed<'de>,
  479|    306|    {
  480|    306|        if self.len > 0 {
  481|    306|            self.len -= 1;
  482|    306|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    306|    }
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECslhj6TOXVrem_11cbor_encode:
  239|    612|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    612|    where
  241|    612|        V: Visitor<'de>,
  242|    612|    {
  243|    612|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|    612|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|    612|    }
_RINvMs_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCsb854q0c99uP_3cid5serdeINtNtB2l_3cid3CidKpENtNtCsb075exAdOJr_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECslhj6TOXVrem_11cbor_encode:
  113|    306|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    306|    where
  115|    306|        V: Visitor<'de>,
  116|    306|    {
  117|    306|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    306|        match tag.0 {
  120|    306|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    306|    }
_RNCNvMs_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE8try_step0Cslhj6TOXVrem_11cbor_encode:
  106|    612|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECslhj6TOXVrem_11cbor_encode:
  353|    306|    fn deserialize_tuple_struct<V>(
  354|    306|        self,
  355|    306|        _name: &'static str,
  356|    306|        len: usize,
  357|    306|        visitor: V,
  358|    306|    ) -> Result<V::Value, Self::Error>
  359|    306|    where
  360|    306|        V: Visitor<'de>,
  361|    306|    {
  362|    306|        self.deserialize_tuple(len, visitor)
  363|    306|    }
_RNCNvMs1_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE5arrays_0Cslhj6TOXVrem_11cbor_encode:
  437|    306|            move |len| Ok(Accessor { de, len }),
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de9SeqAccess17next_element_seedINtNtCsjU8j9Adh1pR_4core6marker11PhantomDataNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEECslhj6TOXVrem_11cbor_encode:
  476|  5.45k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  5.45k|    where
  478|  5.45k|        T: de::DeserializeSeed<'de>,
  479|  5.45k|    {
  480|  5.45k|        if self.len > 0 {
  481|  5.14k|            self.len -= 1;
  482|  5.14k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|    306|            Ok(None)
  485|       |        }
  486|  5.45k|    }
_RNvMs1_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE5tupleCslhj6TOXVrem_11cbor_encode:
  442|    306|    pub fn tuple(
  443|    306|        de: &'a mut Deserializer<R>,
  444|    306|        len: usize,
  445|    306|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  446|    306|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  447|       |
  448|    306|        if array_start.0 == Some(len) {
  449|    306|            Ok(Accessor { de, len })
  450|       |        } else {
  451|      0|            Err(DecodeError::RequireLength {
  452|      0|                name: "tuple",
  453|      0|                expect: len,
  454|      0|                value: array_start.0.unwrap_or(0),
  455|      0|            })
  456|       |        }
  457|    306|    }
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECslhj6TOXVrem_11cbor_encode:
  142|    306|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    306|        where V: Visitor<'de>
  144|    306|        {
  145|    306|            let value = <$t>::decode(&mut self.reader)?;
  146|    306|            visitor.$visit(value)
  147|    306|        }
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECslhj6TOXVrem_11cbor_encode:
  343|    306|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|    306|    where
  345|    306|        V: Visitor<'de>,
  346|    306|    {
  347|    306|        let mut de = self.try_step()?;
  348|    306|        let seq = Accessor::tuple(&mut de, len)?;
  349|    306|        visitor.visit_seq(seq)
  350|    306|    }
_RNvMNtCs1STDibvQdG3_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderE11from_readerCslhj6TOXVrem_11cbor_encode:
   93|    306|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    306|        Deserializer { reader }
   95|    306|    }
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderENtNtCsb075exAdOJr_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsdriq9yqlPVC_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEECslhj6TOXVrem_11cbor_encode:
  333|    306|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|    306|    where
  335|    306|        V: Visitor<'de>,
  336|    306|    {
  337|    306|        let mut de = self.try_step()?;
  338|    306|        let seq = Accessor::array(&mut de)?;
  339|    306|        visitor.visit_seq(seq)
  340|    306|    }

_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsdriq9yqlPVC_5alloc3vec3VecNtNtCs4SHI63ivlID_10fvm_shared7address7AddressEECslhj6TOXVrem_11cbor_encode:
  414|    612|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    612|        value.serialize(&mut *self.ser)
  416|    612|    }
_RNvMNtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterE10into_innerCslhj6TOXVrem_11cbor_encode:
   56|    612|    pub fn into_inner(self) -> W {
   57|    612|        self.writer
   58|    612|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCskHqonDxAqFH_17fvm_ipld_bitfield8BitFieldECslhj6TOXVrem_11cbor_encode:
  414|    612|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    612|        value.serialize(&mut *self.ser)
  416|    612|    }
_RNvXs_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer15serialize_bytesCslhj6TOXVrem_11cbor_encode:
  159|  12.1k|    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
  160|  12.1k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  12.1k|        Ok(())
  162|  12.1k|    }
_RNvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct3endCslhj6TOXVrem_11cbor_encode:
  419|    612|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|    612|        Ok(())
  421|    612|    }
_RNvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser12SerializeSeq3endCslhj6TOXVrem_11cbor_encode:
  385|    612|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|    612|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|    612|        }
  389|       |
  390|    612|        Ok(())
  391|    612|    }
_RNvMNtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterE3newCslhj6TOXVrem_11cbor_encode:
   51|    612|    pub fn new(writer: W) -> Serializer<W> {
   52|    612|        Serializer { writer }
   53|    612|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECslhj6TOXVrem_11cbor_encode:
  414|    612|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    612|        value.serialize(&mut *self.ser)
  416|    612|    }
_RINvXs_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer24serialize_newtype_structNtNtCs3ZMUTCdUuTX_11serde_bytes7bytebuf7ByteBufECslhj6TOXVrem_11cbor_encode:
  199|    612|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    612|        self,
  201|    612|        name: &'static str,
  202|    612|        value: &T,
  203|    612|    ) -> Result<Self::Ok, Self::Error> {
  204|    612|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    612|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    612|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsb854q0c99uP_3cid3cid3CidKj40_EECslhj6TOXVrem_11cbor_encode:
  414|    612|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    612|        value.serialize(&mut *self.ser)
  416|    612|    }
_RINvNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser6to_vecNtNtCsdfcctoTlxUU_11common_fuzz4cbor7PayloadECslhj6TOXVrem_11cbor_encode:
   23|    612|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    612|where
   25|    612|    T: Serialize + ?Sized,
   26|    612|{
   27|    612|    let writer = BufWriter::new(Vec::new());
   28|    612|    let mut serializer = Serializer::new(writer);
   29|    612|    value.serialize(&mut serializer)?;
   30|    612|    Ok(serializer.into_inner().into_inner())
   31|    612|}
_RNvXs_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer15serialize_tupleCslhj6TOXVrem_11cbor_encode:
  238|    612|    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
  239|    612|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    612|        Ok(BoundedCollect { ser: self })
  241|    612|    }
_RNvXs_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer22serialize_tuple_structCslhj6TOXVrem_11cbor_encode:
  244|    612|    fn serialize_tuple_struct(
  245|    612|        self,
  246|    612|        _name: &'static str,
  247|    612|        len: usize,
  248|    612|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    612|        self.serialize_tuple(len)
  250|    612|    }
_RNvXs_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer13serialize_u64Cslhj6TOXVrem_11cbor_encode:
  122|    612|    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
  123|    612|        v.encode(&mut self.writer)?;
  124|    612|        Ok(())
  125|    612|    }
_RNvXs_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer13serialize_seqCslhj6TOXVrem_11cbor_encode:
  225|    612|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
  226|    612|        if let Some(len) = len {
  227|    612|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    612|        Ok(Collect {
  232|    612|            bounded: len.is_some(),
  233|    612|            ser: self,
  234|    612|        })
  235|    612|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsdfcctoTlxUU_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECslhj6TOXVrem_11cbor_encode:
  414|    612|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    612|        value.serialize(&mut *self.ser)
  416|    612|    }
_RINvXs0_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser12SerializeSeq17serialize_elementRNtNtCs4SHI63ivlID_10fvm_shared7address7AddressECslhj6TOXVrem_11cbor_encode:
  380|  9.68k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  9.68k|        value.serialize(&mut *self.ser)
  382|  9.68k|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct15serialize_fieldRyECslhj6TOXVrem_11cbor_encode:
  414|    612|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    612|        value.serialize(&mut *self.ser)
  416|    612|    }
_RNvXs7_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser10Serializer15serialize_bytesCslhj6TOXVrem_11cbor_encode:
  561|    612|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|    612|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|    612|        let prefixed = [&[0x00], value].concat();
  564|    612|        // CIDs are serialized with CBOR tag 42.
  565|    612|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|    612|        Ok(())
  567|    612|    }
_RINvXs2_NtCs1STDibvQdG3_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterENtNtCsb075exAdOJr_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs4SHI63ivlID_10fvm_shared7address7AddressECslhj6TOXVrem_11cbor_encode:
  414|    612|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    612|        value.serialize(&mut *self.ser)
  416|    612|    }

_RINvXs_CsfRWDCLQL0H2_11serde_tupleINtB5_12DeserializerQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEENtNtCsb075exAdOJr_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECslhj6TOXVrem_11cbor_encode:
  353|    306|    fn deserialize_tuple_struct<V>(
  354|    306|        self,
  355|    306|        name: &'static str,
  356|    306|        len: usize,
  357|    306|        visitor: V,
  358|    306|    ) -> Result<V::Value, Self::Error>
  359|    306|    where
  360|    306|        V: serde::de::Visitor<'de>,
  361|    306|    {
  362|    306|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    306|    }
_RNvXCsfRWDCLQL0H2_11serde_tupleINtB2_10SerializerQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEENtNtCsb075exAdOJr_5serde3ser10Serializer22serialize_tuple_structCslhj6TOXVrem_11cbor_encode:
  158|    612|    fn serialize_tuple_struct(
  159|    612|        self,
  160|    612|        name: &'static str,
  161|    612|        len: usize,
  162|    612|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    612|        self.0.serialize_tuple_struct(name, len)
  164|    612|    }

_RNvNtCsdEfv1JaVkdW_15unsigned_varint6decode3u64Cslhj6TOXVrem_11cbor_encode:
  122|  1.20k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.20k|    decode!(buf, 9, u64)
  124|  1.20k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6decode7is_lastCslhj6TOXVrem_11cbor_encode:
   90|  3.31k|pub fn is_last(b: u8) -> bool {
   91|  3.31k|    b & 0x80 == 0
   92|  3.31k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6decode3u64Cs4SHI63ivlID_10fvm_shared:
  122|  4.27k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  4.27k|    decode!(buf, 9, u64)
  124|  4.27k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6decode7is_lastCs4SHI63ivlID_10fvm_shared:
   90|  35.7k|pub fn is_last(b: u8) -> bool {
   91|  35.7k|    b & 0x80 == 0
   92|  35.7k|}

_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode2u8Cslhj6TOXVrem_11cbor_encode:
   45|    612|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    612|    encode!(number, buf)
   47|    612|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode9u8_bufferCslhj6TOXVrem_11cbor_encode:
  101|    612|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    612|    [0; U8_LEN]
  103|    612|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode10u64_bufferCslhj6TOXVrem_11cbor_encode:
  119|  2.99k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  2.99k|    [0; U64_LEN]
  121|  2.99k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode3u64Cslhj6TOXVrem_11cbor_encode:
   69|  1.79k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.79k|    encode!(number, buf)
   71|  1.79k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode10u64_bufferCs4SHI63ivlID_10fvm_shared:
  119|  8.54k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  8.54k|    [0; U64_LEN]
  121|  8.54k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode3u64Cs4SHI63ivlID_10fvm_shared:
   69|  8.54k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  8.54k|    encode!(number, buf)
   71|  8.54k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode10u64_bufferCskHqonDxAqFH_17fvm_ipld_bitfield:
  119|  5.12k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  5.12k|    [0; U64_LEN]
  121|  5.12k|}
_RNvNtCsdEfv1JaVkdW_15unsigned_varint6encode3u64CskHqonDxAqFH_17fvm_ipld_bitfield:
   69|  5.12k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  5.12k|    encode!(number, buf)
   71|  5.12k|}

_RINvNtCsdEfv1JaVkdW_15unsigned_varint2io8read_u64QQRShECslhj6TOXVrem_11cbor_encode:
   31|  1.20k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.20k|                let mut b = encode::$b();
   33|  1.65k|                for i in 0 .. b.len() {
   34|  1.65k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.65k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.65k|                    }
   38|  1.65k|                    if decode::is_last(b[i]) {
   39|  1.20k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    456|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.20k|            }


_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    926|    fn new(mut iter: I) -> Self {
  469|    926|        let next = iter.next();
  470|    926|        Self { iter, next }
  471|    926|    }
_RNCNvXs9_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.13k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  5.06k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  389|  5.06k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  5.06k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  5.06k|    }
_RNvXsf_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsjU8j9Adh1pR_4core7default7Default7defaultB9_:
   87|    926|#[derive(Default)]
_RNvMs5_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    926|    pub fn new(a: A, b: B) -> Self {
  299|    926|        Self(Merge::new(_Combine::new(a, b)))
  300|    926|    }
_RNvXs6_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  312|  5.06k|        self.0.next()
  313|  5.06k|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  4.13k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.13k|        self.next.as_mut()
  475|  4.13k|    }
_RNvXs9_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  389|  5.06k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  5.06k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  5.06k|    }
_RNvXsb_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  439|  5.06k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.13k|        while let Some(next) = self.iter.peek() {
  444|  3.79k|            if next.start > range.end {
  445|  3.79k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.13k|        Some(range)
  453|  5.06k|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  5.06k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  5.06k|        self.next.as_mut()
  475|  5.06k|    }
_RNvXs6_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  312|  5.06k|        self.0.next()
  313|  5.06k|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  4.13k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.13k|        self.next.as_mut()
  475|  4.13k|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  10.1k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  10.1k|        self.next.as_mut()
  475|  10.1k|    }
_RNvMsa_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    926|    pub fn new(iter: I) -> Self {
  426|    926|        Self {
  427|    926|            iter: Lookahead::new(iter),
  428|    926|        }
  429|    926|    }
_RNvMs8_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  5.06k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  5.06k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.13k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    926|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.13k|        if advance_lhs {
  371|  4.13k|            self.lhs.next();
  372|  4.13k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.13k|        range
  377|  5.06k|    }
_RNvMs8_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    926|    fn new(lhs: A, rhs: B) -> Self {
  344|    926|        Self {
  345|    926|            lhs: Lookahead::new(lhs),
  346|    926|            rhs: Lookahead::new(rhs),
  347|    926|            combinator: Default::default(),
  348|    926|        }
  349|    926|    }
_RNvXs0_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tailB9_:
  182|  4.13k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  4.13k|        // the difference between a range and an empty range is just that range
  184|  4.13k|        Some(lhs)
  185|  4.13k|    }
_RNvXsh_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsjU8j9Adh1pR_4core7default7Default7defaultB9_:
  152|    926|#[derive(Default)]
_RNvMsa_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    926|    pub fn new(iter: I) -> Self {
  426|    926|        Self {
  427|    926|            iter: Lookahead::new(iter),
  428|    926|        }
  429|    926|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  5.06k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  5.06k|        self.next.as_mut()
  475|  5.06k|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    926|    fn new(mut iter: I) -> Self {
  469|    926|        let next = iter.next();
  470|    926|        Self { iter, next }
  471|    926|    }
_RNvMs8_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  5.06k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  5.06k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.13k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    926|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.13k|        if advance_lhs {
  371|  4.13k|            self.lhs.next();
  372|  4.13k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.13k|        range
  377|  5.06k|    }
_RNvXse_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  5.06k|        let next = self.next.take()?;
  484|  4.13k|        self.next = self.iter.next();
  485|  4.13k|        Some(next)
  486|  5.06k|    }
_RNvMs8_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    926|    fn new(lhs: A, rhs: B) -> Self {
  344|    926|        Self {
  345|    926|            lhs: Lookahead::new(lhs),
  346|    926|            rhs: Lookahead::new(rhs),
  347|    926|            combinator: Default::default(),
  348|    926|        }
  349|    926|    }
_RNvXse_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  5.06k|        let next = self.next.take()?;
  484|  4.13k|        self.next = self.iter.next();
  485|  4.13k|        Some(next)
  486|  5.06k|    }
_RNvXse_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  4.13k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.13k|        let next = self.next.take()?;
  484|  4.13k|        self.next = self.iter.next();
  485|  4.13k|        Some(next)
  486|  4.13k|    }
_RNvXsb_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  439|  5.06k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.13k|        while let Some(next) = self.iter.peek() {
  444|  3.79k|            if next.start > range.end {
  445|  3.79k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.13k|        Some(range)
  453|  5.06k|    }
_RNvMs5_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    926|    pub fn new(a: A, b: B) -> Self {
  299|    926|        Self(Merge::new(_Combine::new(a, b)))
  300|    926|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  1.85k|    fn new(mut iter: I) -> Self {
  469|  1.85k|        let next = iter.next();
  470|  1.85k|        Self { iter, next }
  471|  1.85k|    }
_RNvXNtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tailB6_:
  110|  4.13k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  4.13k|        // the union of a range and an empty range is just that range
  112|  4.13k|        Some(lhs)
  113|  4.13k|    }
_RNCNvXs9_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.13k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  5.06k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    926|    fn new(mut iter: I) -> Self {
  469|    926|        let next = iter.next();
  470|    926|        Self { iter, next }
  471|    926|    }
_RNvXse_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  4.13k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.13k|        let next = self.next.take()?;
  484|  4.13k|        self.next = self.iter.next();
  485|  4.13k|        Some(next)
  486|  4.13k|    }
_RNvMsd_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    926|    fn new(mut iter: I) -> Self {
  469|    926|        let next = iter.next();
  470|    926|        Self { iter, next }
  471|    926|    }

_RINvMs2_NtCskHqonDxAqFH_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    926|    pub fn new<II>(iter: II) -> Self
  141|    926|    where
  142|    926|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    926|    {
  144|    926|        Self(iter.into_iter())
  145|    926|    }
_RINvMs2_NtCskHqonDxAqFH_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|  1.85k|    pub fn new<II>(iter: II) -> Self
  141|  1.85k|    where
  142|  1.85k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  1.85k|    {
  144|  1.85k|        Self(iter.into_iter())
  145|  1.85k|    }
_RNvXs3_NtCskHqonDxAqFH_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  1.85k|    fn next(&mut self) -> Option<Self::Item> {
  155|  1.85k|        self.0.next()
  156|  1.85k|    }
_RINvNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEEB4_:
  164|  1.85k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|  1.85k|    let mut iter = bits.into_iter().peekable();
  166|  1.85k|
  167|  1.85k|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|  1.85k|    }))
  181|  1.85k|}
_RNvXs3_NtCskHqonDxAqFH_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  5.06k|    fn next(&mut self) -> Option<Self::Item> {
  155|  5.06k|        self.0.next()
  156|  5.06k|    }
_RINvYINtNtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    926|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    926|        Combine::new(self, other)
   34|    926|    }
_RNCINvNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0B6_:
  167|  1.85k|    Ranges::new(iter::from_fn(move || {
  168|  1.85k|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|  1.85k|    }))
_RINvYINtNtCskHqonDxAqFH_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsjU8j9Adh1pR_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsdriq9yqlPVC_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    926|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    926|        Combine::new(self, other)
   24|    926|    }

_RNvXsa_CskHqonDxAqFH_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsjU8j9Adh1pR_4core7default7Default7defaultB5_:
   42|  1.08k|#[derive(Debug, Default, Clone)]
_RNvMs4_CskHqonDxAqFH_17fvm_ipld_bitfieldNtB5_8BitField12inner_rangesB5_:
  283|    926|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|    926|        iter::Ranges::new(self.ranges.iter().cloned())
  285|    926|    }
_RNvMs4_CskHqonDxAqFH_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|    926|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|    926|        self.inner_ranges()
  291|    926|            .union(ranges_from_bits(self.set.iter().copied()))
  292|    926|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|    926|    }

_RNvXNtCskHqonDxAqFH_17fvm_ipld_bitfield5rangeINtNtNtCsjU8j9Adh1pR_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  4.13k|    fn size(&self) -> Self::Idx {
   17|  4.13k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  4.13k|            self.end - self.start
   21|       |        }
   22|  4.13k|    }

_RINvXs_NtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCsb075exAdOJr_5serde2de11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   99|    306|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    306|    where
  101|    306|        D: Deserializer<'de>,
  102|    306|    {
  103|    306|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    306|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    306|        }
  110|    306|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    306|    }
_RINvXNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCsb075exAdOJr_5serde3ser9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   83|    765|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    765|    where
   85|    765|        S: Serializer,
   86|    765|    {
   87|    765|        let bytes = self.to_bytes();
   88|    765|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    765|        }
   94|    765|        strict_bytes::serialize(&bytes, serializer)
   95|    765|    }
_RNvMs1_NtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    306|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    306|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    306|        let version = reader.read(2);
  162|    306|        if version != 0 {
  163|      0|            return Err(Error::UnsupportedVersion);
  164|    306|        }
  165|    306|
  166|    306|        let mut next_value = reader.read(1) == 1;
  167|    306|        let mut ranges = Vec::new();
  168|    306|        let mut index = 0u64;
  169|    306|        let mut total_len: u64 = 0;
  170|       |
  171|  4.11k|        while let Some(len) = reader.read_len()? {
  172|  3.81k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  3.81k|            if ovf {
  174|      0|                return Err(Error::RLEOverflow);
  175|  3.81k|            }
  176|  3.81k|            total_len = new_total_len;
  177|  3.81k|            let start = index;
  178|  3.81k|            index += len;
  179|  3.81k|            let end = index;
  180|  3.81k|
  181|  3.81k|            if next_value {
  182|  1.93k|                ranges.push(start..end);
  183|  1.93k|            }
  184|       |
  185|  3.81k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    306|        if next_value {
  191|      0|            return Err(Error::NotMinimal);
  192|    306|        }
  193|    306|
  194|    306|        Ok(Self {
  195|    306|            ranges,
  196|    306|            ..Default::default()
  197|    306|        })
  198|    306|    }
_RNvMs1_NtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    926|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    926|        let mut iter = self.ranges();
  203|       |
  204|    926|        let first_range = match iter.next() {
  205|    340|            Some(range) => range,
  206|    586|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    340|        let mut writer = BitWriter::new();
  210|    340|        writer.write(0, 2); // version 00
  211|    340|
  212|    340|        if first_range.start == 0 {
  213|    153|            writer.write(1, 1); // the first bit is a 1
  214|    187|        } else {
  215|    187|            writer.write(0, 1); // the first bit is a 0
  216|    187|            writer.write_len(first_range.start); // the number of leading 0s
  217|    187|        }
  218|       |
  219|    340|        writer.write_len(first_range.size());
  220|    340|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  4.13k|        for range in iter {
  225|  3.79k|            writer.write_len(range.start - index); // zeros
  226|  3.79k|            writer.write_len(range.size()); // ones
  227|  3.79k|            index = range.end;
  228|  3.79k|        }
  229|       |
  230|    340|        writer.finish()
  231|    926|    }
_RNvXs0_NtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary:
  115|    776|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  116|    776|        let mut next_value: bool = bool::arbitrary(u)?;
  117|    776|        let mut ranges = Vec::new();
  118|    776|        let mut index = 0u64;
  119|    776|        let mut total_len: u64 = 0;
  120|       |
  121|    776|        let size = u.arbitrary_len::<(u64, u8)>()?;
  122|       |
  123|    776|        for _ in 0..size {
  124|       |            // 3 line crappy "power-law" distribution
  125|  4.46k|            let len = u64::arbitrary(u)?;
  126|  4.46k|            let shift = u.int_in_range(0..=63)?;
  127|  4.46k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  128|  4.46k|
  129|  4.46k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  130|  4.46k|            if ovf {
  131|     16|                break;
  132|  4.44k|            }
  133|  4.44k|            total_len = new_total_len;
  134|  4.44k|            let start = index;
  135|  4.44k|            index += len;
  136|  4.44k|            let end = index;
  137|  4.44k|
  138|  4.44k|            if next_value {
  139|  2.26k|                ranges.push(start..end);
  140|  2.26k|            }
  141|       |
  142|  4.44k|            next_value = !next_value;
  143|       |        }
  144|       |
  145|    776|        Ok(Self {
  146|    776|            ranges,
  147|    776|            ..Default::default()
  148|    776|        })
  149|    776|    }
_RNvXs0_NtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hint:
  151|    778|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  152|    778|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  153|    778|    }

_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  4.11k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  4.11k|        // We're done.
  121|  4.11k|        if !self.has_more() {
  122|    306|            return Ok(None);
  123|  3.81k|        }
  124|  3.81k|
  125|  3.81k|        let peek6 = self.peek(6);
  126|       |
  127|  3.81k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|    725|            self.drop(1);
  130|    725|            1
  131|  3.08k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|    731|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|    731|            self.drop(6);
  135|    731|            if val < 2 {
  136|      0|                return Err(Error::NotMinimal);
  137|    731|            }
  138|    731|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  2.35k|            self.drop(2);
  142|  2.35k|            let val = self.read_varint()?;
  143|  2.35k|            if val < 16 {
  144|      0|                return Err(Error::NotMinimal);
  145|  2.35k|            }
  146|  2.35k|            val
  147|       |        };
  148|       |
  149|  3.81k|        Ok(Some(len))
  150|  4.11k|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  16.3k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  16.3k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  16.3k|        let mask = (1 << num_bits) - 1;
   56|  16.3k|        (self.bits & mask) as u8
   57|  16.3k|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  2.35k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  2.35k|        let mut len = 0u64;
   95|       |
   96|  11.9k|        for i in 0..VARINT_MAX_BYTES {
   97|  11.9k|            let byte = self.read(8);
   98|  11.9k|
   99|  11.9k|            // strip off the most significant bit and add
  100|  11.9k|            // it to the output
  101|  11.9k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  11.9k|
  103|  11.9k|            // if the most significant bit is a 0, we've
  104|  11.9k|            // reached the end of the varint
  105|  11.9k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  2.35k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      0|                    break;
  110|  2.35k|                }
  111|  2.35k|                return Ok(len);
  112|  9.58k|            }
  113|       |        }
  114|       |
  115|      0|        Err(Error::InvalidVarint)
  116|  2.35k|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_moreB6_:
  153|  4.11k|    pub fn has_more(&self) -> bool {
  154|  4.11k|        self.bits != 0 || !self.bytes.is_empty()
  155|  4.11k|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  16.3k|    pub fn drop(&mut self, num_bits: u32) {
   62|  16.3k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  16.3k|        self.bits >>= num_bits;
   66|  16.3k|        self.num_bits -= num_bits;
   67|  16.3k|
   68|  16.3k|        // not sure why this being outside of the if improves the performance
   69|  16.3k|        // bit it does, probably related to keeping caches warm
   70|  16.3k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  16.3k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  16.3k|
   73|  16.3k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  16.3k|        if self.num_bits < 8 {
   75|  13.1k|            self.num_bits += 8;
   76|  13.1k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  13.1k|        }
   78|  16.3k|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    306|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    306|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    306|        // data.
   29|    306|        if bytes.last() == Some(&0) {
   30|      0|            return Err(Error::NotMinimal);
   31|    306|        }
   32|    306|        let mut bits = 0u64;
   33|    918|        for i in 0..2 {
   34|    612|            let byte = bytes.get(i).unwrap_or(&0);
   35|    612|            bits |= (*byte as u64) << (8 * i);
   36|    612|        }
   37|       |
   38|    306|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    306|
   40|    306|        Ok(Self {
   41|    306|            bytes,
   42|    306|            bits,
   43|    306|            num_bits: 16,
   44|    306|        })
   45|    306|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  12.5k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  12.5k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  12.5k|        let res = self.peek(num_bits);
   86|  12.5k|        self.drop(num_bits);
   87|  12.5k|
   88|  12.5k|        res
   89|  12.5k|    }

_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  36.9k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  36.9k|        debug_assert!(num_bits <= 8);
   25|  36.9k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  36.9k|        self.bits |= (byte as u16) << self.num_bits;
   28|  36.9k|        self.num_bits += num_bits;
   29|  36.9k|
   30|  36.9k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  36.9k|        if self.num_bits >= 8 {
   32|  29.2k|            self.bytes.push(self.bits as u8);
   33|  29.2k|            self.bits >>= 8;
   34|  29.2k|            self.num_bits -= 8;
   35|  29.2k|        }
   36|  36.9k|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  8.11k|    pub fn write_len(&mut self, len: u64) {
   40|  8.11k|        debug_assert!(len > 0);
   41|       |
   42|  8.11k|        if len == 1 {
   43|  1.47k|            // Block Single (prefix 1)
   44|  1.47k|            self.write(1, 1);
   45|  6.63k|        } else if len < 16 {
   46|  1.51k|            // Block Short (prefix 01)
   47|  1.51k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.51k|            self.write(len as u8, 4);
   49|  1.51k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  5.12k|            self.write(0, 2);
   52|  5.12k|
   53|  5.12k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  26.6k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  26.6k|                self.write(byte, 8);
   56|  26.6k|            }
   57|       |        }
   58|  8.11k|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    340|    pub fn finish(mut self) -> Vec<u8> {
   62|    340|        if self.bits > 0 {
   63|    180|            self.bytes.push(self.bits as u8);
   64|    180|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    340|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    340|        self.bytes
   72|    340|    }
_RNvMNtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3newB6_:
   18|    340|    pub fn new() -> Self {
   19|    340|        Default::default()
   20|    340|    }
_RNvXs_NtNtCskHqonDxAqFH_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsjU8j9Adh1pR_4core7default7Default7defaultB8_:
    5|    340|#[derive(Default, Clone, Debug)]

_RINvXNvXNvNtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCsb075exAdOJr_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   36|    459|#[derive(Debug, Serialize)]
_RINvXs4_NtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCsb075exAdOJr_5serde2de11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   94|    306|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    306|    where
   96|    306|        D: Deserializer<'de>,
   97|    306|    {
   98|    306|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    306|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    306|        }
  105|    306|        Ok(Self::Unvalidated(bytes))
  106|    306|    }
_RINvXNvNtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCsb075exAdOJr_5serde3ser9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   36|    612|#[derive(Debug, Serialize)]
_RNvXs1_NtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary:
   62|    388|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   63|    388|        let bf: BitField = u.arbitrary()?;
   64|    388|        Ok(if *u.choose(&[true, false])? {
   65|    227|            Self::Validated(bf)
   66|       |        } else {
   67|    161|            Self::Unvalidated(bf.to_bytes())
   68|       |        })
   69|    388|    }
_RNvXs1_NtCskHqonDxAqFH_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hint:
   71|    389|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   72|    389|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   73|    389|    }

_RINvXNvXs0_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsb075exAdOJr_5serde2de7Visitor20visit_borrowed_bytesINtNtCs1STDibvQdG3_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjU8j9Adh1pR_4core7convert10InfallibleEECslhj6TOXVrem_11cbor_encode:
   89|  5.45k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  5.45k|                where
   91|  5.45k|                    E: Error,
   92|  5.45k|                {
   93|  5.45k|                    Ok(Cow::Borrowed(v))
   94|  5.45k|                }
_RINvNtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsdriq9yqlPVC_5alloc6borrow3CowShEQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  162|    306|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    306|    where
  164|    306|        T: Deserialize<'de>,
  165|    306|        D: Deserializer<'de>,
  166|    306|    {
  167|    306|        Deserialize::deserialize(deserializer)
  168|    306|    }
_RINvXNtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   35|  10.2k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  10.2k|        where
   37|  10.2k|            S: Serializer,
   38|  10.2k|        {
   39|  10.2k|            serializer.serialize_bytes(self.as_ref())
   40|  10.2k|        }
_RINvXs0_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   76|  5.45k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  5.45k|        where
   78|  5.45k|            D: Deserializer<'de>,
   79|  5.45k|        {
   80|  5.45k|            struct CowVisitor;
   81|  5.45k|
   82|  5.45k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  5.45k|                type Value = Cow<'de, [u8]>;
   84|  5.45k|
   85|  5.45k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  5.45k|                    formatter.write_str("a byte array")
   87|  5.45k|                }
   88|  5.45k|
   89|  5.45k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  5.45k|                where
   91|  5.45k|                    E: Error,
   92|  5.45k|                {
   93|  5.45k|                    Ok(Cow::Borrowed(v))
   94|  5.45k|                }
   95|  5.45k|
   96|  5.45k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  5.45k|                where
   98|  5.45k|                    E: Error,
   99|  5.45k|                {
  100|  5.45k|                    Ok(Cow::Owned(v.to_vec()))
  101|  5.45k|                }
  102|  5.45k|
  103|  5.45k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  5.45k|                where
  105|  5.45k|                    E: Error,
  106|  5.45k|                {
  107|  5.45k|                    Ok(Cow::Owned(v))
  108|  5.45k|                }
  109|  5.45k|            }
  110|  5.45k|            deserializer.deserialize_bytes(CowVisitor)
  111|  5.45k|        }
_RINvNtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsdriq9yqlPVC_5alloc3vec3VechEQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  162|    612|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    612|    where
  164|    612|        T: Deserialize<'de>,
  165|    612|        D: Deserializer<'de>,
  166|    612|    {
  167|    612|        Deserialize::deserialize(deserializer)
  168|    612|    }
_RINvNtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCsdriq9yqlPVC_5alloc3vec3VechEQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  154|    612|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    612|    where
  156|    612|        T: ?Sized + AsRef<[u8]>,
  157|    612|        S: Serializer,
  158|    612|    {
  159|    612|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    612|    }
_RINvXs_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   44|    612|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    612|        where
   46|    612|            D: Deserializer<'de>,
   47|    612|        {
   48|    612|            struct VecVisitor;
   49|    612|
   50|    612|            impl<'de> Visitor<'de> for VecVisitor {
   51|    612|                type Value = Vec<u8>;
   52|    612|
   53|    612|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    612|                    formatter.write_str("byte array")
   55|    612|                }
   56|    612|
   57|    612|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    612|                where
   59|    612|                    E: Error,
   60|    612|                {
   61|    612|                    Ok(v.into())
   62|    612|                }
   63|    612|
   64|    612|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    612|                where
   66|    612|                    E: Error,
   67|    612|                {
   68|    612|                    Ok(v)
   69|    612|                }
   70|    612|            }
   71|    612|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    612|        }
_RINvNtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCsdriq9yqlPVC_5alloc3vec3VechEQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  154|  1.22k|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|  1.22k|    where
  156|  1.22k|        T: ?Sized + AsRef<[u8]>,
  157|  1.22k|        S: Serializer,
  158|  1.22k|    {
  159|  1.22k|        Serialize::serialize(bytes.as_ref(), serializer)
  160|  1.22k|    }
_RINvXNtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   35|  1.83k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  1.83k|        where
   37|  1.83k|            S: Serializer,
   38|  1.83k|        {
   39|  1.83k|            serializer.serialize_bytes(self.as_ref())
   40|  1.83k|        }
_RINvXNvXs_NtNtCs5tZxyW5xWFJ_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsdriq9yqlPVC_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCsb075exAdOJr_5serde2de7Visitor11visit_bytesINtNtCs1STDibvQdG3_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjU8j9Adh1pR_4core7convert10InfallibleEECslhj6TOXVrem_11cbor_encode:
   57|    612|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    612|                where
   59|    612|                    E: Error,
   60|    612|                {
   61|    612|                    Ok(v.into())
   62|    612|                }

_RINvCs5tZxyW5xWFJ_17fvm_ipld_encoding6to_vecNtNtCsdfcctoTlxUU_11common_fuzz4cbor7PayloadECslhj6TOXVrem_11cbor_encode:
   44|    612|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    612|where
   46|    612|    T: ser::Serialize + ?Sized,
   47|    612|{
   48|    612|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    612|}
_RINvCs5tZxyW5xWFJ_17fvm_ipld_encoding10from_sliceNtNtCsdfcctoTlxUU_11common_fuzz4cbor7PayloadECslhj6TOXVrem_11cbor_encode:
   61|    306|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    306|where
   63|    306|    T: de::Deserialize<'a>,
   64|    306|{
   65|    306|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    306|}

_RINvXs2_NtCs4SHI63ivlID_10fvm_shared7addressNtB6_7AddressNtNtCsb075exAdOJr_5serde3ser9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
  348|  10.2k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  349|  10.2k|    where
  350|  10.2k|        S: Serializer,
  351|  10.2k|    {
  352|  10.2k|        let address_bytes = self.to_bytes();
  353|  10.2k|        strict_bytes::Serialize::serialize(&address_bytes, s)
  354|  10.2k|    }
_RNCNvXNvNtCs4SHI63ivlID_10fvm_shared7address1__NtB6_7AddressNtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hint0Cslhj6TOXVrem_11cbor_encode:
   72|    389|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs3_NtCs4SHI63ivlID_10fvm_shared7addressNtB6_7AddressNtNtCsb075exAdOJr_5serde2de11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
  358|  5.14k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  359|  5.14k|    where
  360|  5.14k|        D: Deserializer<'de>,
  361|  5.14k|    {
  362|  5.14k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  363|       |
  364|       |        // Create and return created address of unmarshalled bytes
  365|  5.14k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  366|  5.14k|    }
_RNCNvXNvNtCs4SHI63ivlID_10fvm_shared7address1__NtB6_7AddressNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrarys_0B8_:
   72|  5.72k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXNvNtCs4SHI63ivlID_10fvm_shared7address1__NtB4_7AddressNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary:
   72|  17.1k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtCs4SHI63ivlID_10fvm_shared7address1__NtB6_7AddressNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrarys0_0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNvNtCs4SHI63ivlID_10fvm_shared7address1__23RECURSIVE_COUNT_Address7___getit0B9_:
   72|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCs4SHI63ivlID_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  5.14k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  5.14k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  5.14k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  5.14k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  5.14k|    }
_RNvMNtCs4SHI63ivlID_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|  10.2k|    pub fn to_bytes(self) -> Vec<u8> {
  169|  10.2k|        self.payload.to_bytes()
  170|  10.2k|    }
_RNvNtCs4SHI63ivlID_10fvm_shared7address14from_leb_bytes:
  374|  3.15k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  375|       |    // write id to buffer in leb128 format
  376|  3.15k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  377|  3.15k|    if !remaining.is_empty() {
  378|      0|        return Err(Error::InvalidPayload);
  379|  3.15k|    }
  380|  3.15k|    Ok(id)
  381|  3.15k|}
_RNvNtCs4SHI63ivlID_10fvm_shared7address12to_leb_bytes:
  369|  8.54k|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  370|  8.54k|    // write id to buffer in leb128 format
  371|  8.54k|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  372|  8.54k|}
_RNCNvXNvNtCs4SHI63ivlID_10fvm_shared7address1__NtB6_7AddressNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCs4SHI63ivlID_10fvm_shared7addressNtB2_7Address3new:
   79|  5.14k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  5.14k|        Ok(Self {
   81|  5.14k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  5.14k|    }

_RNCNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address7payload1__NtB6_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hint0Cslhj6TOXVrem_11cbor_encode:
   86|    389|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|  1.11k|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|  1.11k|        let length = subaddress.len();
   59|  1.11k|        if length > MAX_SUBADDRESS_LEN {
   60|      0|            return Err(Error::InvalidPayloadLength(length));
   61|  1.11k|        }
   62|  1.11k|        let mut addr = DelegatedAddress {
   63|  1.11k|            namespace,
   64|  1.11k|            length,
   65|  1.11k|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|  1.11k|        };
   67|  1.11k|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|  1.11k|        Ok(addr)
   69|  1.11k|    }
_RNvMs2_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|  10.2k|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|  10.2k|        use Payload::*;
  117|  10.2k|        match self {
  118|  6.31k|            ID(i) => to_leb_bytes(i),
  119|    756|            Secp256k1(arr) => arr.to_vec(),
  120|    716|            Actor(arr) => arr.to_vec(),
  121|    274|            BLS(arr) => arr.to_vec(),
  122|  2.23k|            Delegated(addr) => {
  123|  2.23k|                let mut buf = to_leb_bytes(addr.namespace());
  124|  2.23k|                buf.extend(addr.subaddress());
  125|  2.23k|                buf
  126|       |            }
  127|       |        }
  128|  10.2k|    }
_RNvMs0_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|  2.23k|    pub fn subaddress(&self) -> &[u8] {
   80|  2.23k|        &self.buffer[..self.length]
   81|  2.23k|    }
_RNvXs3_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCsjU8j9Adh1pR_4core7convert4FromNtB5_7PayloadE4fromB9_:
  166|  10.2k|    fn from(pl: Payload) -> Self {
  167|  10.2k|        match pl {
  168|  6.31k|            Payload::ID(_) => Self::ID,
  169|    756|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    716|            Payload::Actor(_) => Self::Actor,
  171|    274|            Payload::BLS(_) => Self::BLS,
  172|  2.23k|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|  10.2k|    }
_RNvXs_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtB4_16DelegatedAddressNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary:
   40|  1.36k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   41|  1.36k|        let length = u.int_in_range(0usize..=MAX_SUBADDRESS_LEN)?;
   42|  1.36k|        let mut buffer = [0u8; MAX_SUBADDRESS_LEN];
   43|  9.18k|        for b in buffer.iter_mut().take(length) {
   44|  9.18k|            *b = arbitrary::Arbitrary::arbitrary(u)?;
   45|       |        }
   46|  1.36k|        let addr = DelegatedAddress {
   47|  1.36k|            namespace: arbitrary::Arbitrary::arbitrary(u)?,
   48|  1.36k|            length,
   49|  1.36k|            buffer,
   50|  1.36k|        };
   51|  1.36k|        Ok(addr)
   52|  1.36k|    }
_RNCNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address7payload1__NtB6_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrarys0_0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNvNtNtCs4SHI63ivlID_10fvm_shared7address7payload1__23RECURSIVE_COUNT_Payload7___getit0Bb_:
   86|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|  2.23k|    pub fn namespace(&self) -> ActorID {
   74|  2.23k|        self.namespace
   75|  2.23k|    }
_RNvMs2_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  5.14k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  5.14k|        let payload = match protocol {
  140|  3.15k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    378|                payload
  143|    378|                    .try_into()
  144|    378|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    358|                payload
  148|    358|                    .try_into()
  149|    358|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    137|                payload
  153|    137|                    .try_into()
  154|    137|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|  1.11k|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|  1.11k|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  5.14k|        Ok(payload)
  162|  5.14k|    }
_RNvMs2_NtNtCs4SHI63ivlID_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|  10.2k|    pub fn to_bytes(self) -> Vec<u8> {
  132|  10.2k|        let mut bz = self.to_raw_bytes();
  133|  10.2k|        bz.insert(0, Protocol::from(self) as u8);
  134|  10.2k|        bz
  135|  10.2k|    }
_RNCNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address7payload1__NtB6_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address7payload1__NtB4_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrary:
   86|  17.1k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address7payload1__NtB6_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary9arbitrarys_0Ba_:
   86|  5.72k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsl1LO3hdC5B7_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  5.14k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCs4SHI63ivlID_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  5.14k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  5.14k|        FromPrimitive::from_u8(b)
   31|  5.14k|    }
_RNvXNvNtNtCs4SHI63ivlID_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsl1LO3hdC5B7_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  5.14k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RNCINvXNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtBd_7PayloadNtNtCsb075exAdOJr_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de8AccessorNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEE0Cslhj6TOXVrem_11cbor_encode:
   12|    306|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCsdfcctoTlxUU_11common_fuzz4cborNtB5_7PayloadNtNtCsb075exAdOJr_5serde3ser9Serialize9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   12|    612|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCsdfcctoTlxUU_11common_fuzz4cbor1__NtB6_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary9size_hint0Cslhj6TOXVrem_11cbor_encode:
   12|    389|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCsdfcctoTlxUU_11common_fuzz4cborNtBd_7PayloadNtNtCsb075exAdOJr_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEECslhj6TOXVrem_11cbor_encode:
   12|    612|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsdfcctoTlxUU_11common_fuzz4cborNtBa_7PayloadNtNtCsb075exAdOJr_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCsfRWDCLQL0H2_11serde_tuple10SerializerQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils9BufWriterEEECslhj6TOXVrem_11cbor_encode:
   12|    612|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtBe_7PayloadNtNtCsb075exAdOJr_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   12|    306|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB8_7PayloadNtNtCsb075exAdOJr_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCsfRWDCLQL0H2_11serde_tuple12DeserializerQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEEECslhj6TOXVrem_11cbor_encode:
   12|    306|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsdfcctoTlxUU_11common_fuzz4cborNtB3_7PayloadNtNtCsb075exAdOJr_5serde2de11Deserialize11deserializeQINtNtCs1STDibvQdG3_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsibAuZ6S2WHi_7cbor4ii4core5utils11SliceReaderEECslhj6TOXVrem_11cbor_encode:
   12|    306|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCsdfcctoTlxUU_11common_fuzz4cbor1__NtB6_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
   12|    388|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXNvNtCsdfcctoTlxUU_11common_fuzz4cbor1__NtB4_7PayloadNtCs9fCioswQzwR_9arbitrary9Arbitrary19arbitrary_take_rest:
   12|  1.16k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

