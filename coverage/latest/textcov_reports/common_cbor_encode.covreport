_RNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  654|    364|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    364|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    364|        }))
  658|    364|    }
_RNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  654|    728|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    728|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    728|        }))
  658|    728|    }
_RNCNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0Csdi6Y70DSZSO_11cbor_encode:
  655|    728|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|    728|            <T as Arbitrary>::size_hint(d)
  657|    728|        }))
_RNvXsI_Cs5xBZ95cPZHo_9arbitraryyNtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  320|    728|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    728|                    let n = mem::size_of::<$ty>();
  322|    728|                    (n, Some(n))
  323|    728|                }
_RNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  654|    364|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    364|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    364|        }))
  658|    364|    }
_RNCNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0Csdi6Y70DSZSO_11cbor_encode:
  655|  1.09k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|  1.09k|            <T as Arbitrary>::size_hint(d)
  657|  1.09k|        }))
_RNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  654|    364|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    364|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    364|        }))
  658|    364|    }
_RNvXsH_Cs5xBZ95cPZHo_9arbitrarymNtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  320|    364|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    364|                    let n = mem::size_of::<$ty>();
  322|    364|                    (n, Some(n))
  323|    364|                }
_RNCNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0Csdi6Y70DSZSO_11cbor_encode:
  655|  17.4k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|  17.4k|            <T as Arbitrary>::size_hint(d)
  657|  17.4k|        }))
_RNvXsa_Cs5xBZ95cPZHo_9arbitraryINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  687|    364|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    364|        (0, None)
  689|    364|    }
_RNvYNtNtNtCsgx2bukOdW1A_10fvm_shared7address7payload16DelegatedAddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  277|    364|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|    364|        let _ = depth;
  279|    364|        (0, None)
  280|    364|    }
_RNvXsF_Cs5xBZ95cPZHo_9arbitraryhNtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  320|  34.2k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  34.2k|                    let n = mem::size_of::<$ty>();
  322|  34.2k|                    (n, Some(n))
  323|  34.2k|                }
_RNCNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0Csdi6Y70DSZSO_11cbor_encode:
  655|  14.5k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|  14.5k|            <T as Arbitrary>::size_hint(d)
  657|  14.5k|        }))
_RNvXsa_Cs5xBZ95cPZHo_9arbitraryINtNtCsLOZ9MRSILa_5alloc3vec3VechENtB5_9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
  687|    364|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    364|        (0, None)
  689|    364|    }
_RNvYINtNtCs2ZAoQR8Z9eq_3cid3cid3CidKj40_ENtCs5xBZ95cPZHo_9arbitrary9Arbitrary19arbitrary_take_restCsgGJeqQcKBJt_11common_fuzz:
  189|    363|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    363|        Self::arbitrary(&mut u)
  191|    363|    }
_RNvXsa_Cs5xBZ95cPZHo_9arbitraryINtNtCsLOZ9MRSILa_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCsgGJeqQcKBJt_11common_fuzz:
  679|    363|        u.arbitrary_iter()?.collect()
  680|    363|    }
_RNvXsa_Cs5xBZ95cPZHo_9arbitraryINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCsgGJeqQcKBJt_11common_fuzz:
  679|    363|        u.arbitrary_iter()?.collect()
  680|    363|    }
_RNCNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Csgx2bukOdW1A_10fvm_shared:
  641|  9.60k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RINvCs5xBZ95cPZHo_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECsgx2bukOdW1A_10fvm_shared:
  614|    200|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  615|    200|where
  616|    200|    F: FnMut(usize) -> Result<T>,
  617|    200|{
  618|    200|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  619|    200|    let array_ptr = array.as_mut_ptr();
  620|    200|    let dst = array_ptr as _;
  621|    200|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  622|    200|        dst,
  623|    200|        initialized: 0,
  624|    200|    };
  625|       |    unsafe {
  626|  9.60k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  627|  9.60k|            core::ptr::write(value_ptr, cb(idx)?);
  628|  9.60k|            guard.initialized += 1;
  629|       |        }
  630|    200|        mem::forget(guard);
  631|    200|        Ok(array.assume_init())
  632|       |    }
  633|    200|}
_RNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCsgx2bukOdW1A_10fvm_shared:
  640|    200|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  641|    200|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  642|    200|    }
_RNCNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Csgx2bukOdW1A_10fvm_shared:
  641|  17.7k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs8_Cs5xBZ95cPZHo_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCsgx2bukOdW1A_10fvm_shared:
  640|    887|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  641|    887|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  642|    887|    }
_RINvCs5xBZ95cPZHo_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECsgx2bukOdW1A_10fvm_shared:
  614|    887|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  615|    887|where
  616|    887|    F: FnMut(usize) -> Result<T>,
  617|    887|{
  618|    887|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  619|    887|    let array_ptr = array.as_mut_ptr();
  620|    887|    let dst = array_ptr as _;
  621|    887|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  622|    887|        dst,
  623|    887|        initialized: 0,
  624|    887|    };
  625|       |    unsafe {
  626|  17.7k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  627|  17.7k|            core::ptr::write(value_ptr, cb(idx)?);
  628|  17.7k|            guard.initialized += 1;
  629|       |        }
  630|    887|        mem::forget(guard);
  631|    887|        Ok(array.assume_init())
  632|       |    }
  633|    887|}
_RNvXsK_Cs5xBZ95cPZHo_9arbitraryjNtB5_9Arbitrary9size_hintCs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  320|    728|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    728|                    let n = mem::size_of::<$ty>();
  322|    728|                    (n, Some(n))
  323|    728|                }
_RNvXsI_Cs5xBZ95cPZHo_9arbitraryyNtB5_9Arbitrary9size_hintCs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  320|    726|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    726|                    let n = mem::size_of::<$ty>();
  322|    726|                    (n, Some(n))
  323|    726|                }
_RNvXsF_Cs5xBZ95cPZHo_9arbitraryhNtB5_9Arbitrary9size_hintCs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  320|    726|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    726|                    let n = mem::size_of::<$ty>();
  322|    726|                    (n, Some(n))
  323|    726|                }
_RNvXs1m_Cs5xBZ95cPZHo_9arbitraryTyhENtB6_9Arbitrary9size_hintCs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  586|    726|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  587|    726|                crate::size_hint::and_all(&[
  588|    726|                    <$last as Arbitrary>::size_hint(depth),
  589|    726|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  590|    726|                ])
  591|    726|            }
_RNvXsI_Cs5xBZ95cPZHo_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  9.45k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  9.45k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  9.45k|                    u.fill_buffer(&mut buf)?;
  312|  9.45k|                    let mut x: $unsigned = 0;
  313|  75.6k|                    for i in 0..mem::size_of::<$ty>() {
  314|  75.6k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  75.6k|                    }
  316|  9.45k|                    Ok(x as $ty)
  317|  9.45k|                }
_RNvXsF_Cs5xBZ95cPZHo_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  55.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  55.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  55.4k|                    u.fill_buffer(&mut buf)?;
  312|  55.4k|                    let mut x: $unsigned = 0;
  313|  55.4k|                    for i in 0..mem::size_of::<$ty>() {
  314|  55.4k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  55.4k|                    }
  316|  55.4k|                    Ok(x as $ty)
  317|  55.4k|                }
_RNvXs_Cs5xBZ95cPZHo_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|  9.09k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|  9.09k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|  9.09k|    }
_RNvXsH_Cs5xBZ95cPZHo_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  4.99k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  4.99k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  4.99k|                    u.fill_buffer(&mut buf)?;
  312|  4.99k|                    let mut x: $unsigned = 0;
  313|  19.9k|                    for i in 0..mem::size_of::<$ty>() {
  314|  19.9k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  19.9k|                    }
  316|  4.99k|                    Ok(x as $ty)
  317|  4.99k|                }

_RNvNtCs5xBZ95cPZHo_9arbitrary9size_hint6or_allCsdi6Y70DSZSO_11cbor_encode:
   58|    364|    if let Some(head) = hints.first().copied() {
   59|    364|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    364|}
_RNvNtCs5xBZ95cPZHo_9arbitrary9size_hint7and_allCsdi6Y70DSZSO_11cbor_encode:
   37|  4.73k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  4.73k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  4.73k|}
_RNCNvNtCs5xBZ95cPZHo_9arbitrary9size_hint3and0Csdi6Y70DSZSO_11cbor_encode:
   28|  38.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs5xBZ95cPZHo_9arbitrary9size_hint15recursion_guardNCNvXNvNtCsgx2bukOdW1A_10fvm_shared7address1__NtB10_7AddressNtB4_9Arbitrary9size_hint0ECsdi6Y70DSZSO_11cbor_encode:
   12|    364|pub fn recursion_guard(
   13|    364|    depth: usize,
   14|    364|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    364|) -> (usize, Option<usize>) {
   16|    364|    const MAX_DEPTH: usize = 20;
   17|    364|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    364|        f(depth + 1)
   21|       |    }
   22|    364|}
_RNCNvNtCs5xBZ95cPZHo_9arbitrary9size_hint2or0Csdi6Y70DSZSO_11cbor_encode:
   48|  1.82k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCs5xBZ95cPZHo_9arbitrary9size_hint3and00Csdi6Y70DSZSO_11cbor_encode:
   28|  37.1k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs5xBZ95cPZHo_9arbitrary9size_hint2orCsdi6Y70DSZSO_11cbor_encode:
   44|  1.82k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.82k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.82k|    let upper = lhs
   47|  1.82k|        .1
   48|  1.82k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.82k|    (lower, upper)
   50|  1.82k|}
_RINvNtCs5xBZ95cPZHo_9arbitrary9size_hint15recursion_guardNCNvXNvNtCsgGJeqQcKBJt_11common_fuzz4cbor1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECsdi6Y70DSZSO_11cbor_encode:
   12|    364|pub fn recursion_guard(
   13|    364|    depth: usize,
   14|    364|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    364|) -> (usize, Option<usize>) {
   16|    364|    const MAX_DEPTH: usize = 20;
   17|    364|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    364|        f(depth + 1)
   21|       |    }
   22|    364|}
_RNvNtCs5xBZ95cPZHo_9arbitrary9size_hint3andCsdi6Y70DSZSO_11cbor_encode:
   26|  40.7k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  40.7k|    let lower = lhs.0 + rhs.0;
   28|  40.7k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  40.7k|    (lower, upper)
   30|  40.7k|}
_RINvNtCs5xBZ95cPZHo_9arbitrary9size_hint15recursion_guardNCNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECsdi6Y70DSZSO_11cbor_encode:
   12|    364|pub fn recursion_guard(
   13|    364|    depth: usize,
   14|    364|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    364|) -> (usize, Option<usize>) {
   16|    364|    const MAX_DEPTH: usize = 20;
   17|    364|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    364|        f(depth + 1)
   21|       |    }
   22|    364|}
_RNCNCNvNtCs5xBZ95cPZHo_9arbitrary9size_hint2or00Csdi6Y70DSZSO_11cbor_encode:
   48|  1.45k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCs5xBZ95cPZHo_9arbitrary9size_hint7and_allCs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
   37|    726|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    726|    hints.iter().copied().fold((0, Some(0)), and)
   39|    726|}
_RNvNtCs5xBZ95cPZHo_9arbitrary9size_hint3andCs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
   26|  2.54k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.54k|    let lower = lhs.0 + rhs.0;
   28|  2.54k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.54k|    (lower, upper)
   30|  2.54k|}
_RNCNvNtCs5xBZ95cPZHo_9arbitrary9size_hint3and0Cs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
   28|  2.18k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCs5xBZ95cPZHo_9arbitrary9size_hint3and00Cs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
   28|  1.45k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECsgGJeqQcKBJt_11common_fuzz:
  606|    363|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    363|        &'b mut self,
  608|    363|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    363|        Ok(ArbitraryIter {
  610|    363|            u: &mut *self,
  611|    363|            _marker: PhantomData,
  612|    363|        })
  613|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECsgGJeqQcKBJt_11common_fuzz:
  483|    363|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  484|    363|    where
  485|    363|        T: Int,
  486|    363|    {
  487|    363|        assert!(T::ZERO < numerator);
  488|    363|        assert!(numerator <= denominator);
  489|    363|        let x = self.int_in_range(T::ONE..=denominator)?;
  490|    363|        Ok(x <= numerator)
  491|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgGJeqQcKBJt_11common_fuzz:
  302|    363|    fn int_in_range_impl<T>(
  303|    363|        range: ops::RangeInclusive<T>,
  304|    363|        mut bytes: impl Iterator<Item = u8>,
  305|    363|    ) -> Result<(T, usize)>
  306|    363|    where
  307|    363|        T: Int,
  308|    363|    {
  309|    363|        let start = *range.start();
  310|    363|        let end = *range.end();
  311|    363|        assert!(
  312|    363|            start <= end,
  313|    363|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    363|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    363|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    363|        }
  321|    363|
  322|    363|        // From here on out we work with the unsigned representation. All of the
  323|    363|        // operations performed below work out just as well whether or not `T`
  324|    363|        // is a signed or unsigned integer.
  325|    363|        let start = start.to_unsigned();
  326|    363|        let end = end.to_unsigned();
  327|    363|
  328|    363|        let delta = end.wrapping_sub(start);
  329|    363|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    363|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    363|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    654|        while (bytes_consumed < mem::size_of::<T>())
  339|    654|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    363|            let byte = match bytes.next() {
  342|     72|                None => break,
  343|    291|                Some(b) => b,
  344|    291|            };
  345|    291|            bytes_consumed += 1;
  346|    291|
  347|    291|            // Combine this byte into our arbitrary integer, but avoid
  348|    291|            // overflowing the shift for `u8` and `i8`.
  349|    291|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    291|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    363|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    363|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    363|        let result = start.wrapping_add(offset);
  365|    363|
  366|    363|        // And convert back to our maybe-signed representation.
  367|    363|        let result = T::from_unsigned(result);
  368|    363|        debug_assert!(*range.start() <= result);
  369|    363|        debug_assert!(result <= *range.end());
  370|       |
  371|    363|        Ok((result, bytes_consumed))
  372|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgGJeqQcKBJt_11common_fuzz:
  302|    275|    fn int_in_range_impl<T>(
  303|    275|        range: ops::RangeInclusive<T>,
  304|    275|        mut bytes: impl Iterator<Item = u8>,
  305|    275|    ) -> Result<(T, usize)>
  306|    275|    where
  307|    275|        T: Int,
  308|    275|    {
  309|    275|        let start = *range.start();
  310|    275|        let end = *range.end();
  311|    275|        assert!(
  312|    275|            start <= end,
  313|    275|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    275|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    275|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    275|        }
  321|    275|
  322|    275|        // From here on out we work with the unsigned representation. All of the
  323|    275|        // operations performed below work out just as well whether or not `T`
  324|    275|        // is a signed or unsigned integer.
  325|    275|        let start = start.to_unsigned();
  326|    275|        let end = end.to_unsigned();
  327|    275|
  328|    275|        let delta = end.wrapping_sub(start);
  329|    275|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    275|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    275|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    315|        while (bytes_consumed < mem::size_of::<T>())
  339|    315|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    275|            let byte = match bytes.next() {
  342|    235|                None => break,
  343|     40|                Some(b) => b,
  344|     40|            };
  345|     40|            bytes_consumed += 1;
  346|     40|
  347|     40|            // Combine this byte into our arbitrary integer, but avoid
  348|     40|            // overflowing the shift for `u8` and `i8`.
  349|     40|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|     40|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    275|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    275|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    275|        let result = start.wrapping_add(offset);
  365|    275|
  366|    275|        // And convert back to our maybe-signed representation.
  367|    275|        let result = T::from_unsigned(result);
  368|    275|        debug_assert!(*range.start() <= result);
  369|    275|        debug_assert!(result <= *range.end());
  370|       |
  371|    275|        Ok((result, bytes_consumed))
  372|    275|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECsgGJeqQcKBJt_11common_fuzz:
  167|  1.58k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.58k|    where
  169|  1.58k|        A: Arbitrary<'a>,
  170|  1.58k|    {
  171|  1.58k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.58k|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressECsgGJeqQcKBJt_11common_fuzz:
  606|    363|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    363|        &'b mut self,
  608|    363|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    363|        Ok(ArbitraryIter {
  610|    363|            u: &mut *self,
  611|    363|            _marker: PhantomData,
  612|    363|        })
  613|    363|    }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured3lenCsgGJeqQcKBJt_11common_fuzz:
  108|    363|    pub fn len(&self) -> usize {
  109|    363|        self.data.len()
  110|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsgGJeqQcKBJt_11common_fuzz:
  167|  8.37k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  8.37k|    where
  169|  8.37k|        A: Arbitrary<'a>,
  170|  8.37k|    {
  171|  8.37k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  8.37k|    }
_RNvXs_NtCs5xBZ95cPZHo_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtNtNtNtCs5peUZ1FGs3M_4core4iter6traits8iterator8Iterator4nextCsgGJeqQcKBJt_11common_fuzz:
  726|  4.99k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|  4.99k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|  4.99k|        if keep_going {
  729|  4.62k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|    363|            None
  732|       |        }
  733|  4.99k|    }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsgGJeqQcKBJt_11common_fuzz:
  132|    363|    pub fn is_empty(&self) -> bool {
  133|    363|        self.len() == 0
  134|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsgGJeqQcKBJt_11common_fuzz:
  293|    363|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    363|    where
  295|    363|        T: Int,
  296|    363|    {
  297|    363|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    363|        self.data = &self.data[bytes_consumed..];
  299|    363|        Ok(result)
  300|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsgGJeqQcKBJt_11common_fuzz:
  293|    275|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    275|    where
  295|    275|        T: Int,
  296|    275|    {
  297|    275|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    275|        self.data = &self.data[bytes_consumed..];
  299|    275|        Ok(result)
  300|    275|    }
_RNvXs_NtCs5xBZ95cPZHo_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCs5peUZ1FGs3M_4core4iter6traits8iterator8Iterator4nextCsgGJeqQcKBJt_11common_fuzz:
  726|  3.37k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|  3.37k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|  3.37k|        if keep_going {
  729|  3.01k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|    363|            None
  732|       |        }
  733|  3.37k|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCsgfaYP9GPJCf_9multihash9multihash9MultihashKj40_EECsgGJeqQcKBJt_11common_fuzz:
  167|    275|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    275|    where
  169|    275|        A: Arbitrary<'a>,
  170|    275|    {
  171|    275|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    275|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgx2bukOdW1A_10fvm_shared:
  302|  1.41k|    fn int_in_range_impl<T>(
  303|  1.41k|        range: ops::RangeInclusive<T>,
  304|  1.41k|        mut bytes: impl Iterator<Item = u8>,
  305|  1.41k|    ) -> Result<(T, usize)>
  306|  1.41k|    where
  307|  1.41k|        T: Int,
  308|  1.41k|    {
  309|  1.41k|        let start = *range.start();
  310|  1.41k|        let end = *range.end();
  311|  1.41k|        assert!(
  312|  1.41k|            start <= end,
  313|  1.41k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|  1.41k|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  1.41k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  1.41k|        }
  321|  1.41k|
  322|  1.41k|        // From here on out we work with the unsigned representation. All of the
  323|  1.41k|        // operations performed below work out just as well whether or not `T`
  324|  1.41k|        // is a signed or unsigned integer.
  325|  1.41k|        let start = start.to_unsigned();
  326|  1.41k|        let end = end.to_unsigned();
  327|  1.41k|
  328|  1.41k|        let delta = end.wrapping_sub(start);
  329|  1.41k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  1.41k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  1.41k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  2.82k|        while (bytes_consumed < mem::size_of::<T>())
  339|  2.82k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  1.41k|            let byte = match bytes.next() {
  342|      1|                None => break,
  343|  1.41k|                Some(b) => b,
  344|  1.41k|            };
  345|  1.41k|            bytes_consumed += 1;
  346|  1.41k|
  347|  1.41k|            // Combine this byte into our arbitrary integer, but avoid
  348|  1.41k|            // overflowing the shift for `u8` and `i8`.
  349|  1.41k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  1.41k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  1.41k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  1.41k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  1.41k|        let result = start.wrapping_add(offset);
  365|  1.41k|
  366|  1.41k|        // And convert back to our maybe-signed representation.
  367|  1.41k|        let result = T::from_unsigned(result);
  368|  1.41k|        debug_assert!(*range.start() <= result);
  369|  1.41k|        debug_assert!(result <= *range.end());
  370|       |
  371|  1.41k|        Ok((result, bytes_consumed))
  372|  1.41k|    }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsgx2bukOdW1A_10fvm_shared:
  132|  9.98k|    pub fn is_empty(&self) -> bool {
  133|  9.98k|        self.len() == 0
  134|  9.98k|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsgx2bukOdW1A_10fvm_shared:
  293|  1.41k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  1.41k|    where
  295|  1.41k|        T: Int,
  296|  1.41k|    {
  297|  1.41k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  1.41k|        self.data = &self.data[bytes_consumed..];
  299|  1.41k|        Ok(result)
  300|  1.41k|    }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured3lenCsgx2bukOdW1A_10fvm_shared:
  108|  9.98k|    pub fn len(&self) -> usize {
  109|  9.98k|        self.data.len()
  110|  9.98k|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  213|    726|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    726|    where
  215|    726|        ElementType: Arbitrary<'a>,
  216|    726|    {
  217|    726|        let byte_size = self.arbitrary_byte_size()?;
  218|    726|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    726|        let elem_size = upper.unwrap_or(lower * 2);
  220|    726|        let elem_size = std::cmp::max(1, elem_size);
  221|    726|        Ok(byte_size / elem_size)
  222|    726|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    363|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    363|    where
  169|    363|        A: Arbitrary<'a>,
  170|    363|    {
  171|    363|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured6choosebECs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  408|    363|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  409|    363|        let idx = self.choose_index(choices.len())?;
  410|    363|        Ok(&choices[idx])
  411|    363|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  293|  5.18k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  5.18k|    where
  295|  5.18k|        T: Int,
  296|  5.18k|    {
  297|  5.18k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  5.18k|        self.data = &self.data[bytes_consumed..];
  299|  5.18k|        Ok(result)
  300|  5.18k|    }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  302|  5.18k|    fn int_in_range_impl<T>(
  303|  5.18k|        range: ops::RangeInclusive<T>,
  304|  5.18k|        mut bytes: impl Iterator<Item = u8>,
  305|  5.18k|    ) -> Result<(T, usize)>
  306|  5.18k|    where
  307|  5.18k|        T: Int,
  308|  5.18k|    {
  309|  5.18k|        let start = *range.start();
  310|  5.18k|        let end = *range.end();
  311|  5.18k|        assert!(
  312|  5.18k|            start <= end,
  313|  5.18k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|  5.18k|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  5.18k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  5.18k|        }
  321|  5.18k|
  322|  5.18k|        // From here on out we work with the unsigned representation. All of the
  323|  5.18k|        // operations performed below work out just as well whether or not `T`
  324|  5.18k|        // is a signed or unsigned integer.
  325|  5.18k|        let start = start.to_unsigned();
  326|  5.18k|        let end = end.to_unsigned();
  327|  5.18k|
  328|  5.18k|        let delta = end.wrapping_sub(start);
  329|  5.18k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  5.18k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  5.18k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  10.3k|        while (bytes_consumed < mem::size_of::<T>())
  339|  10.3k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  5.18k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  5.18k|                Some(b) => b,
  344|  5.18k|            };
  345|  5.18k|            bytes_consumed += 1;
  346|  5.18k|
  347|  5.18k|            // Combine this byte into our arbitrary integer, but avoid
  348|  5.18k|            // overflowing the shift for `u8` and `i8`.
  349|  5.18k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  5.18k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  5.18k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  5.18k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  5.18k|        let result = start.wrapping_add(offset);
  365|  5.18k|
  366|  5.18k|        // And convert back to our maybe-signed representation.
  367|  5.18k|        let result = T::from_unsigned(result);
  368|  5.18k|        debug_assert!(*range.start() <= result);
  369|  5.18k|        debug_assert!(result <= *range.end());
  370|       |
  371|  5.18k|        Ok((result, bytes_consumed))
  372|  5.18k|    }
_RNvXs1_NtCs5xBZ95cPZHo_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  844|    542|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|    542|                    <$ty>::checked_add(self, rhs)
  846|    542|                }
_RNvXs2_NtCs5xBZ95cPZHo_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  844|     62|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|     62|                    <$ty>::checked_add(self, rhs)
  846|     62|                }
_RNvXs3_NtCs5xBZ95cPZHo_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  844|  5.55k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  5.55k|                    <$ty>::checked_add(self, rhs)
  846|  5.55k|                }
_RNvXs2_NtCs5xBZ95cPZHo_9arbitrary12unstructuredtNtB5_3Int10from_usize:
  840|    124|                fn from_usize(u: usize) -> Self {
  841|    124|                    u as Self
  842|    124|                }
_RNvXs3_NtCs5xBZ95cPZHo_9arbitrary12unstructuredmNtB5_3Int10from_usize:
  840|  11.0k|                fn from_usize(u: usize) -> Self {
  841|  11.0k|                    u as Self
  842|  11.0k|                }
_RNvXs6_NtCs5xBZ95cPZHo_9arbitrary12unstructuredjNtB5_3Int12wrapping_add:
  848|  2.04k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  2.04k|                    <$ty>::wrapping_add(self, rhs)
  850|  2.04k|                }
_RNvXs6_NtCs5xBZ95cPZHo_9arbitrary12unstructuredjNtB5_3Int7from_u8:
  836|  1.74k|                fn from_u8(b: u8) -> Self {
  837|  1.74k|                    b as Self
  838|  1.74k|                }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    543|    fn int_in_range_impl<T>(
  303|    543|        range: ops::RangeInclusive<T>,
  304|    543|        mut bytes: impl Iterator<Item = u8>,
  305|    543|    ) -> Result<(T, usize)>
  306|    543|    where
  307|    543|        T: Int,
  308|    543|    {
  309|    543|        let start = *range.start();
  310|    543|        let end = *range.end();
  311|    543|        assert!(
  312|    543|            start <= end,
  313|    543|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    543|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    543|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    543|        }
  321|    543|
  322|    543|        // From here on out we work with the unsigned representation. All of the
  323|    543|        // operations performed below work out just as well whether or not `T`
  324|    543|        // is a signed or unsigned integer.
  325|    543|        let start = start.to_unsigned();
  326|    543|        let end = end.to_unsigned();
  327|    543|
  328|    543|        let delta = end.wrapping_sub(start);
  329|    543|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    543|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    543|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  1.08k|        while (bytes_consumed < mem::size_of::<T>())
  339|    543|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    543|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    543|                Some(b) => b,
  344|    543|            };
  345|    543|            bytes_consumed += 1;
  346|    543|
  347|    543|            // Combine this byte into our arbitrary integer, but avoid
  348|    543|            // overflowing the shift for `u8` and `i8`.
  349|    543|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|    543|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    543|        let offset = if delta == T::Unsigned::MAX {
  357|      1|            arbitrary_int
  358|       |        } else {
  359|    542|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    543|        let result = start.wrapping_add(offset);
  365|    543|
  366|    543|        // And convert back to our maybe-signed representation.
  367|    543|        let result = T::from_unsigned(result);
  368|    543|        debug_assert!(*range.start() <= result);
  369|    543|        debug_assert!(result <= *range.end());
  370|       |
  371|    543|        Ok((result, bytes_consumed))
  372|    543|    }
_RNvXs6_NtCs5xBZ95cPZHo_9arbitrary12unstructuredjNtB5_3Int11to_unsigned:
  856|  4.09k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  4.09k|                    self as $unsigned_ty
  858|  4.09k|                }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|    363|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|    363|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|    363|        }
  454|    363|        let idx = self.int_in_range(0..=len - 1)?;
  455|    363|        Ok(idx)
  456|    363|    }
_RNvXs1_NtCs5xBZ95cPZHo_9arbitrary12unstructuredhNtB5_3Int11to_unsigned:
  856|  1.08k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  1.08k|                    self as $unsigned_ty
  858|  1.08k|                }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|    363|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    363|    where
  295|    363|        T: Int,
  296|    363|    {
  297|    363|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    363|        self.data = &self.data[bytes_consumed..];
  299|    363|        Ok(result)
  300|    363|    }
_RNvXs6_NtCs5xBZ95cPZHo_9arbitrary12unstructuredjNtB5_3Int10from_usize:
  840|  3.79k|                fn from_usize(u: usize) -> Self {
  841|  3.79k|                    u as Self
  842|  3.79k|                }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  69.9k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  69.9k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  69.9k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  69.9k|        for byte in buffer[n..].iter_mut() {
  525|  2.34k|            *byte = 0;
  526|  2.34k|        }
  527|  69.9k|        self.data = &self.data[n..];
  528|  69.9k|        Ok(())
  529|  69.9k|    }
_RNvXs1_NtCs5xBZ95cPZHo_9arbitrary12unstructuredhNtB5_3Int12wrapping_add:
  848|    543|                fn wrapping_add(self, rhs: Self) -> Self {
  849|    543|                    <$ty>::wrapping_add(self, rhs)
  850|    543|                }
_RNvXs2_NtCs5xBZ95cPZHo_9arbitrary12unstructuredtNtB5_3Int12wrapping_add:
  848|     62|                fn wrapping_add(self, rhs: Self) -> Self {
  849|     62|                    <$ty>::wrapping_add(self, rhs)
  850|     62|                }
_RNvXs2_NtCs5xBZ95cPZHo_9arbitrary12unstructuredtNtB5_3Int12wrapping_sub:
  852|     62|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|     62|                    <$ty>::wrapping_sub(self, rhs)
  854|     62|                }
_RNvXs3_NtCs5xBZ95cPZHo_9arbitrary12unstructuredmNtB5_3Int12wrapping_sub:
  852|  5.55k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  5.55k|                    <$ty>::wrapping_sub(self, rhs)
  854|  5.55k|                }
_RNvXs6_NtCs5xBZ95cPZHo_9arbitrary12unstructuredjNtB5_3Int13from_unsigned:
  860|  2.04k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  2.04k|                    unsigned as Self
  862|  2.04k|                }
_RNvXs6_NtCs5xBZ95cPZHo_9arbitrary12unstructuredjNtB5_3Int12wrapping_sub:
  852|  2.04k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  2.04k|                    <$ty>::wrapping_sub(self, rhs)
  854|  2.04k|                }
_RNvXs9_NtCs5xBZ95cPZHo_9arbitrary12unstructuredlNtB5_3Int11to_unsigned:
  856|  11.1k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  11.1k|                    self as $unsigned_ty
  858|  11.1k|                }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    726|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    726|        if self.data.is_empty() {
  226|    118|            Ok(0)
  227|    608|        } else if self.data.len() == 1 {
  228|      3|            self.data = &[];
  229|      3|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    605|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    543|                let bytes = 1;
  242|    543|                let max_size = self.data.len() - bytes;
  243|    543|                let (rest, for_size) = self.data.split_at(max_size);
  244|    543|                self.data = rest;
  245|    543|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|     62|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|     62|                let bytes = 2;
  248|     62|                let max_size = self.data.len() - bytes;
  249|     62|                let (rest, for_size) = self.data.split_at(max_size);
  250|     62|                self.data = rest;
  251|     62|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    605|            Ok(len)
  267|       |        }
  268|    726|    }
_RNvXs1_NtCs5xBZ95cPZHo_9arbitrary12unstructuredhNtB5_3Int7from_u8:
  836|    543|                fn from_u8(b: u8) -> Self {
  837|    543|                    b as Self
  838|    543|                }
_RNvXs2_NtCs5xBZ95cPZHo_9arbitrary12unstructuredtNtB5_3Int7from_u8:
  836|    122|                fn from_u8(b: u8) -> Self {
  837|    122|                    b as Self
  838|    122|                }
_RNvXs3_NtCs5xBZ95cPZHo_9arbitrary12unstructuredmNtB5_3Int7from_u8:
  836|  5.47k|                fn from_u8(b: u8) -> Self {
  837|  5.47k|                    b as Self
  838|  5.47k|                }
_RNvXs6_NtCs5xBZ95cPZHo_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  844|  2.04k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  2.04k|                    <$ty>::checked_add(self, rhs)
  846|  2.04k|                }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    363|    pub fn new(data: &'a [u8]) -> Self {
   86|    363|        Unstructured { data }
   87|    363|    }
_RNvXs2_NtCs5xBZ95cPZHo_9arbitrary12unstructuredtNtB5_3Int11to_unsigned:
  856|    124|                fn to_unsigned(self) -> Self::Unsigned {
  857|    124|                    self as $unsigned_ty
  858|    124|                }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|     62|    fn int_in_range_impl<T>(
  303|     62|        range: ops::RangeInclusive<T>,
  304|     62|        mut bytes: impl Iterator<Item = u8>,
  305|     62|    ) -> Result<(T, usize)>
  306|     62|    where
  307|     62|        T: Int,
  308|     62|    {
  309|     62|        let start = *range.start();
  310|     62|        let end = *range.end();
  311|     62|        assert!(
  312|     62|            start <= end,
  313|     62|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|     62|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|     62|        if start == end {
  319|      0|            return Ok((start, 0));
  320|     62|        }
  321|     62|
  322|     62|        // From here on out we work with the unsigned representation. All of the
  323|     62|        // operations performed below work out just as well whether or not `T`
  324|     62|        // is a signed or unsigned integer.
  325|     62|        let start = start.to_unsigned();
  326|     62|        let end = end.to_unsigned();
  327|     62|
  328|     62|        let delta = end.wrapping_sub(start);
  329|     62|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|     62|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|     62|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    184|        while (bytes_consumed < mem::size_of::<T>())
  339|    124|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    122|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    122|                Some(b) => b,
  344|    122|            };
  345|    122|            bytes_consumed += 1;
  346|    122|
  347|    122|            // Combine this byte into our arbitrary integer, but avoid
  348|    122|            // overflowing the shift for `u8` and `i8`.
  349|    122|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    122|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|     62|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|     62|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|     62|        let result = start.wrapping_add(offset);
  365|     62|
  366|     62|        // And convert back to our maybe-signed representation.
  367|     62|        let result = T::from_unsigned(result);
  368|     62|        debug_assert!(*range.start() <= result);
  369|     62|        debug_assert!(result <= *range.end());
  370|       |
  371|     62|        Ok((result, bytes_consumed))
  372|     62|    }
_RNvXs3_NtCs5xBZ95cPZHo_9arbitrary12unstructuredmNtB5_3Int12wrapping_add:
  848|  5.55k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  5.55k|                    <$ty>::wrapping_add(self, rhs)
  850|  5.55k|                }
_RNvXs1_NtCs5xBZ95cPZHo_9arbitrary12unstructuredhNtB5_3Int10from_usize:
  840|    543|                fn from_usize(u: usize) -> Self {
  841|    543|                    u as Self
  842|    543|                }
_RNvXs9_NtCs5xBZ95cPZHo_9arbitrary12unstructuredlNtB5_3Int13from_unsigned:
  860|  5.55k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  5.55k|                    unsigned as Self
  862|  5.55k|                }
_RINvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    363|    fn int_in_range_impl<T>(
  303|    363|        range: ops::RangeInclusive<T>,
  304|    363|        mut bytes: impl Iterator<Item = u8>,
  305|    363|    ) -> Result<(T, usize)>
  306|    363|    where
  307|    363|        T: Int,
  308|    363|    {
  309|    363|        let start = *range.start();
  310|    363|        let end = *range.end();
  311|    363|        assert!(
  312|    363|            start <= end,
  313|    363|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    363|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    363|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    363|        }
  321|    363|
  322|    363|        // From here on out we work with the unsigned representation. All of the
  323|    363|        // operations performed below work out just as well whether or not `T`
  324|    363|        // is a signed or unsigned integer.
  325|    363|        let start = start.to_unsigned();
  326|    363|        let end = end.to_unsigned();
  327|    363|
  328|    363|        let delta = end.wrapping_sub(start);
  329|    363|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    363|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    363|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    659|        while (bytes_consumed < mem::size_of::<T>())
  339|    659|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    363|            let byte = match bytes.next() {
  342|     67|                None => break,
  343|    296|                Some(b) => b,
  344|    296|            };
  345|    296|            bytes_consumed += 1;
  346|    296|
  347|    296|            // Combine this byte into our arbitrary integer, but avoid
  348|    296|            // overflowing the shift for `u8` and `i8`.
  349|    296|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    296|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    363|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    363|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    363|        let result = start.wrapping_add(offset);
  365|    363|
  366|    363|        // And convert back to our maybe-signed representation.
  367|    363|        let result = T::from_unsigned(result);
  368|    363|        debug_assert!(*range.start() <= result);
  369|    363|        debug_assert!(result <= *range.end());
  370|       |
  371|    363|        Ok((result, bytes_consumed))
  372|    363|    }
_RNvXs1_NtCs5xBZ95cPZHo_9arbitrary12unstructuredhNtB5_3Int13from_unsigned:
  860|    543|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|    543|                    unsigned as Self
  862|    543|                }
_RNvXs2_NtCs5xBZ95cPZHo_9arbitrary12unstructuredtNtB5_3Int13from_unsigned:
  860|     62|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|     62|                    unsigned as Self
  862|     62|                }
_RNvXs1_NtCs5xBZ95cPZHo_9arbitrary12unstructuredhNtB5_3Int12wrapping_sub:
  852|    543|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|    543|                    <$ty>::wrapping_sub(self, rhs)
  854|    543|                }
_RNvMNtCs5xBZ95cPZHo_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|    363|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|    363|        if self.data.len() < size {
  550|     82|            return Err(Error::NotEnoughData);
  551|    281|        }
  552|    281|
  553|    281|        let (for_buf, rest) = self.data.split_at(size);
  554|    281|        self.data = rest;
  555|    281|        Ok(for_buf)
  556|    363|    }

_RINvYyNtNtNtCsexTSLewUc5T_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
   73|    281|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    281|        let byte = pull_one(reader)?;
   75|    281|        Self::decode_with(byte, reader)
   76|    281|    }
_RINvYNtNtNtCsexTSLewUc5T_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
   73|    281|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    281|        let byte = pull_one(reader)?;
   75|    281|        Self::decode_with(byte, reader)
   76|    281|    }
_RINvNtNtCsexTSLewUc5T_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  599|  6.05k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  6.05k|    -> Result<Option<usize>, Error<R::Error>>
  601|  6.05k|{
  602|  6.05k|    if byte != (marker::START | (major << 5)) {
  603|  6.05k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  6.05k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  6.05k|        Ok(Some(len))
  606|       |    } else {
  607|      0|        Ok(None)
  608|       |    }
  609|  6.05k|}
_RINvXs5_NtNtCsexTSLewUc5T_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsLOZ9MRSILa_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  510|  5.49k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  5.49k|        use crate::alloc::borrow::Cow;
  512|  5.49k|
  513|  5.49k|        let mut buf = Vec::new();
  514|  5.49k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  5.49k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|      0|            Cow::Owned(buf)
  518|       |        }))
  519|  5.49k|    }
_RINvNtNtCsexTSLewUc5T_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  125|  7.44k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  7.44k|    let b = reader.fill(1)?
  127|  7.44k|        .as_ref()
  128|  7.44k|        .get(0)
  129|  7.44k|        .copied()
  130|  7.44k|        .ok_or(Error::Eof)?;
  131|  7.44k|    reader.advance(1);
  132|  7.44k|    Ok(b)
  133|  7.44k|}
_RINvXsg_NtNtCsexTSLewUc5T_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  707|    281|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    281|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    281|    }
_RNvNtNtCsexTSLewUc5T_7cbor4ii4core3dec8if_majorCsdi6Y70DSZSO_11cbor_encode:
  894|    281|pub fn if_major(byte: u8) -> u8 {
  895|    281|    byte >> 5
  896|    281|}
_RNvMs0_NtNtCsexTSLewUc5T_7cbor4ii4core3decNtB5_7TypeNum3newCsdi6Y70DSZSO_11cbor_encode:
  179|  6.61k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  6.61k|        TypeNum { major_limit, byte }
  181|  6.61k|    }
_RINvMs0_NtNtCsexTSLewUc5T_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  227|  6.61k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  6.61k|        match self.byte & self.major_limit {
  229|  6.61k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|    829|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|     36|                let mut buf = [0; 2];
  233|     36|                pull_exact(reader, &mut buf)?;
  234|     36|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|     21|                let mut buf = [0; 4];
  238|     21|                pull_exact(reader, &mut buf)?;
  239|     21|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    236|                let mut buf = [0; 8];
  243|    236|                pull_exact(reader, &mut buf)?;
  244|    236|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  6.61k|    }
_RNvMNtNtCsexTSLewUc5T_7cbor4ii4core3decNtB2_9Reference6as_refCsdi6Y70DSZSO_11cbor_encode:
   81|  7.73k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  7.73k|        match self {
   83|  7.73k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  7.73k|    }
_RINvXss_NtNtCsexTSLewUc5T_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  256|    281|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    281|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    281|                }
_RINvXsc_NtNtCsexTSLewUc5T_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  615|    562|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|    562|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|    562|    }
_RINvNtNtCsexTSLewUc5T_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  431|  5.49k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  5.49k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  5.49k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  5.49k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  5.49k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  5.49k|            if buf.len() >= len {
  440|  5.49k|                reader.advance(len);
  441|  5.49k|                return Ok(Some(&buf[..len]));
  442|      0|            }
  443|      0|        }
  444|       |
  445|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|      0|        while len != 0 {
  448|      0|            let readbuf = reader.fill(len)?;
  449|      0|            let readbuf = readbuf.as_ref();
  450|      0|
  451|      0|            if readbuf.is_empty() {
  452|      0|                return Err(Error::Eof);
  453|      0|            }
  454|      0|
  455|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      0|
  457|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      0|            reader.advance(readlen);
  459|      0|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|      0|            let byte = pull_one(reader)?;
  467|       |
  468|      0|            if byte == marker::BREAK {
  469|      0|                break
  470|      0|            }
  471|      0|
  472|      0|            if !reader.step_in() {
  473|      0|                return Err(Error::DepthLimit);
  474|      0|            }
  475|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|      0|            let reader = &mut *reader;
  477|       |
  478|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|      0|                buf.extend_from_slice(longbuf);
  480|      0|            }
  481|       |        }
  482|       |
  483|      0|        Ok(None)
  484|       |    }
  485|  5.49k|}
_RINvNtNtCsexTSLewUc5T_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
  136|    293|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    586|    while !buf.is_empty() {
  138|    293|        let readbuf = reader.fill(buf.len())?;
  139|    293|        let readbuf = readbuf.as_ref();
  140|    293|
  141|    293|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    293|        }
  144|    293|
  145|    293|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    293|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    293|        reader.advance(len);
  148|    293|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    293|    Ok(())
  152|    293|}
_RINvYNtNtNtCsexTSLewUc5T_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
   73|    562|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    562|        let byte = pull_one(reader)?;
   75|    562|        Self::decode_with(byte, reader)
   76|    562|    }
_RINvYINtNtNtCsexTSLewUc5T_7cbor4ii4core5types5BytesINtNtCsLOZ9MRSILa_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
   73|  5.49k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  5.49k|        let byte = pull_one(reader)?;
   75|  5.49k|        Self::decode_with(byte, reader)
   76|  5.49k|    }

_RINvXs2_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
   70|  12.7k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  12.7k|        match u8::try_from(self.value) {
   72|  12.6k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     72|                let [x0, x1] = self.value.to_be_bytes();
   75|     72|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  12.7k|        Ok(())
   79|  12.7k|    }
_RNvMs0_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB5_7TypeNumhE3newCsdi6Y70DSZSO_11cbor_encode:
   52|  12.6k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  12.6k|        TypeNum { type_, value }
   54|  12.6k|    }
_RNvMs0_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB5_7TypeNumyE3newCsdi6Y70DSZSO_11cbor_encode:
   52|  13.2k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  13.2k|        TypeNum { type_, value }
   54|  13.2k|    }
_RINvXsu_NtNtCsexTSLewUc5T_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
  159|    562|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    562|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    562|                }
_RINvXsd_NtNtCsexTSLewUc5T_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
  270|  1.12k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.12k|        Ok(())
  272|  1.12k|    }
_RINvXs3_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
   84|  12.7k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  12.7k|        match u16::try_from(self.value) {
   86|  12.7k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     42|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     42|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  12.7k|        Ok(())
   93|  12.7k|    }
_RNvMs0_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB5_7TypeNummE3newCsdi6Y70DSZSO_11cbor_encode:
   52|  12.7k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  12.7k|        TypeNum { type_, value }
   54|  12.7k|    }
_RINvXsi_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
  317|    562|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    562|        self.1.encode(writer)
  319|    562|    }
_RINvXs1_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
   59|  12.6k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  12.6k|        match self.value {
   61|  12.6k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.65k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  12.6k|        Ok(())
   65|  12.6k|    }
_RNvMs0_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB5_7TypeNumtE3newCsdi6Y70DSZSO_11cbor_encode:
   52|  12.7k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  12.7k|        TypeNum { type_, value }
   54|  12.7k|    }
_RINvXs4_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
   98|  13.2k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  13.2k|        match u32::try_from(self.value) {
  100|  12.7k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    472|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    472|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  13.2k|        Ok(())
  107|  13.2k|    }
_RINvXs7_NtNtCsexTSLewUc5T_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdi6Y70DSZSO_11cbor_encode:
  209|  10.9k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  10.9k|        writer.push(self.0)?;
  211|  10.9k|        Ok(())
  212|  10.9k|    }

_RNvXs1_NtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsdi6Y70DSZSO_11cbor_encode:
   62|  13.7k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  13.7k|        let len = core::cmp::min(self.buf.len(), want);
   64|  13.7k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  13.7k|    }
_RNvXs1_NtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsdi6Y70DSZSO_11cbor_encode:
   75|    562|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    562|            self.limit = limit;
   77|    562|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    562|    }
_RNvXs1_NtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsdi6Y70DSZSO_11cbor_encode:
   68|  13.2k|    fn advance(&mut self, n: usize) {
   69|  13.2k|        let len = core::cmp::min(self.buf.len(), n);
   70|  13.2k|        self.buf = &self.buf[len..];
   71|  13.2k|    }
_RNvXs1_NtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsdi6Y70DSZSO_11cbor_encode:
   84|    562|    fn step_out(&mut self) {
   85|    562|        self.limit += 1;
   86|    562|    }
_RNvXs_NtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsdi6Y70DSZSO_11cbor_encode:
   40|  24.2k|        self.0.try_reserve(input.len())?;
   41|  24.2k|        self.0.extend_from_slice(input);
   42|  24.2k|        Ok(())
   43|  24.2k|    }
_RNvMNtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    562|    pub fn into_inner(self) -> Vec<u8> {
   25|    562|        self.0
   26|    562|    }
_RNvMs0_NtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    281|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    281|        SliceReader { buf, limit: 256 }
   55|    281|    }
_RNvMNtNtCsexTSLewUc5T_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    562|    pub fn new(buf: Vec<u8>) -> Self {
   15|    562|       BufWriter(buf)
   16|    562|    }

_RNvXs0_NtCs2ZAoQR8Z9eq_3cid3arbINtNtB7_3cid3CidKj40_ENtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
   83|    364|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   84|    364|        let v1 = size_hint::and_all(&[
   85|    364|            <[u8; 2]>::size_hint(depth),
   86|    364|            (0, Some(8)),
   87|    364|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   88|    364|        ]);
   89|    364|        if S >= 32 {
   90|    364|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   91|       |        } else {
   92|      0|            v1
   93|       |        }
   94|    364|    }
_RNvXs0_NtCs2ZAoQR8Z9eq_3cid3arbINtNtB7_3cid3CidKj40_ENtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitraryCsgGJeqQcKBJt_11common_fuzz:
   56|    363|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   57|    363|        if S >= 32 && u.ratio(1, 10)? {
   58|     88|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   59|      8|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   60|    275|        }
   61|    275|
   62|    275|        let mut codec = 0u64;
   63|    275|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   64|       |
   65|    880|        while len_choice & 1 == 1 {
   66|    605|            len_choice >>= 1;
   67|    605|
   68|    605|            let x = u.arbitrary::<u8>();
   69|    605|            let next = codec
   70|    605|                .checked_shl(8)
   71|    605|                .zip(x.ok())
   72|    605|                .map(|(next, x)| next.saturating_add(x as u64));
   73|    605|
   74|    605|            match next {
   75|      0|                None => break,
   76|    605|                Some(next) => codec = next,
   77|       |            }
   78|       |        }
   79|       |
   80|    275|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   81|    363|    }
_RNCNvXs0_NtCs2ZAoQR8Z9eq_3cid3arbINtNtB9_3cid3CidKj40_ENtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary0CsgGJeqQcKBJt_11common_fuzz:
   72|    605|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvMNtCs2ZAoQR8Z9eq_3cid3cidINtB2_3CidKj40_E6new_v1Csdi6Y70DSZSO_11cbor_encode:
   90|    273|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    273|        Self {
   92|    273|            version: Version::V1,
   93|    273|            codec,
   94|    273|            hash,
   95|    273|        }
   96|    273|    }
_RINvMNtCs2ZAoQR8Z9eq_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsLOZ9MRSILa_5alloc3vec3VechEECsdi6Y70DSZSO_11cbor_encode:
  176|    562|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  177|    562|        match self.version {
  178|     16|            Version::V0 => self.hash.write(w)?,
  179|    546|            Version::V1 => self.write_bytes_v1(w)?,
  180|       |        }
  181|    562|        Ok(())
  182|    562|    }
_RNvMNtCs2ZAoQR8Z9eq_3cid3cidINtB2_3CidKj40_E3newCsdi6Y70DSZSO_11cbor_encode:
   99|    273|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    273|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    273|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    273|    }
_RINvMNtCs2ZAoQR8Z9eq_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsdi6Y70DSZSO_11cbor_encode:
  140|    281|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    281|        let version = varint_read_u64(&mut r)?;
  142|    281|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    281|        if [version, codec] == [0x12, 0x20] {
  146|      8|            let mut digest = [0u8; 32];
  147|      8|            r.read_exact(&mut digest)?;
  148|      8|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|      8|            return Self::new_v0(mh);
  150|    273|        }
  151|       |
  152|    273|        let version = Version::try_from(version)?;
  153|    273|        match version {
  154|      0|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    273|                let mh = Multihash::read(r)?;
  157|    273|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    281|    }
_RNvXs6_NtCs2ZAoQR8Z9eq_3cid3cidINtB5_3CidKj40_EINtNtCs5peUZ1FGs3M_4core7convert7TryFromRShE8try_fromCsdi6Y70DSZSO_11cbor_encode:
  333|    281|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  334|    281|        Self::read_bytes(&mut bytes)
  335|    281|    }
_RNvMNtCs2ZAoQR8Z9eq_3cid3cidINtB2_3CidKj40_E8to_bytesCsdi6Y70DSZSO_11cbor_encode:
  186|    562|    pub fn to_bytes(&self) -> Vec<u8> {
  187|    562|        let mut bytes = Vec::new();
  188|    562|        self.write_bytes(&mut bytes).unwrap();
  189|    562|        bytes
  190|    562|    }
_RINvMNtCs2ZAoQR8Z9eq_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsLOZ9MRSILa_5alloc3vec3VechEECsdi6Y70DSZSO_11cbor_encode:
  162|    546|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  163|    546|        let mut version_buf = varint_encode::u64_buffer();
  164|    546|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    546|
  166|    546|        let mut codec_buf = varint_encode::u64_buffer();
  167|    546|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    546|
  169|    546|        w.write_all(version)?;
  170|    546|        w.write_all(codec)?;
  171|    546|        self.hash.write(&mut w)?;
  172|    546|        Ok(())
  173|    546|    }
_RNvMNtCs2ZAoQR8Z9eq_3cid3cidINtB2_3CidKj40_E6new_v0Csdi6Y70DSZSO_11cbor_encode:
   78|      8|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      8|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      8|        }
   82|      8|        Ok(Self {
   83|      8|            version: Version::V0,
   84|      8|            codec: DAG_PB,
   85|      8|            hash,
   86|      8|        })
   87|      8|    }
_RNvMNtCs2ZAoQR8Z9eq_3cid3cidINtB2_3CidKj40_E6new_v1CsgGJeqQcKBJt_11common_fuzz:
   90|    273|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    273|        Self {
   92|    273|            version: Version::V1,
   93|    273|            codec,
   94|    273|            hash,
   95|    273|        }
   96|    273|    }
_RNvMNtCs2ZAoQR8Z9eq_3cid3cidINtB2_3CidKj40_E6new_v0CsgGJeqQcKBJt_11common_fuzz:
   78|      8|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      8|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      8|        }
   82|      8|        Ok(Self {
   83|      8|            version: Version::V0,
   84|      8|            codec: DAG_PB,
   85|      8|            hash,
   86|      8|        })
   87|      8|    }

_RINvXNvXs0_NtCs2ZAoQR8Z9eq_3cid5serdeINtNtBb_3cid3CidKpENtNtCs74DdPnp51dw_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   97|    281|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    281|            where
   99|    281|                D: de::Deserializer<'de>,
  100|    281|            {
  101|    281|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    281|            }
_RINvXs_NtCs2ZAoQR8Z9eq_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs74DdPnp51dw_5serde2de7Visitor11visit_bytesINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs5peUZ1FGs3M_4core7convert10InfallibleEECsdi6Y70DSZSO_11cbor_encode:
   48|    281|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    281|    where
   50|    281|        E: de::Error,
   51|    281|    {
   52|    281|        CidGeneric::<SIZE>::try_from(value)
   53|    281|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    281|    }
_RINvXs0_NtCs2ZAoQR8Z9eq_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs74DdPnp51dw_5serde2de11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   79|    281|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    281|    where
   81|    281|        D: de::Deserializer<'de>,
   82|    281|    {
   83|    281|        /// Main visitor to deserialize a CID.
   84|    281|        ///
   85|    281|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    281|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    281|        /// to bytes.
   88|    281|        struct MainEntryVisitor<const SIZE: usize>;
   89|    281|
   90|    281|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    281|            type Value = CidGeneric<SIZE>;
   92|    281|
   93|    281|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    281|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    281|            }
   96|    281|
   97|    281|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    281|            where
   99|    281|                D: de::Deserializer<'de>,
  100|    281|            {
  101|    281|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    281|            }
  103|    281|        }
  104|    281|
  105|    281|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    281|    }
_RINvXNtCs2ZAoQR8Z9eq_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs74DdPnp51dw_5serde3ser9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   29|    562|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    562|    where
   31|    562|        S: ser::Serializer,
   32|    562|    {
   33|    562|        let value = ByteBuf::from(self.to_bytes());
   34|    562|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    562|    }

_RNvXs_NtCs2ZAoQR8Z9eq_3cid7versionNtB4_7VersionINtNtCs5peUZ1FGs3M_4core7convert7TryFromyE8try_from:
   34|    273|    fn try_from(raw: u64) -> Result<Self> {
   35|    273|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    273|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    273|    }
_RNvXs0_NtCs2ZAoQR8Z9eq_3cid7versionyINtNtCs5peUZ1FGs3M_4core7convert4FromNtB5_7VersionE4from:
   44|    546|    fn from(ver: Version) -> u64 {
   45|    546|        match ver {
   46|      0|            Version::V0 => 0,
   47|    546|            Version::V1 => 1,
   48|       |        }
   49|    546|    }

_RNvNvCsdi6Y70DSZSO_11cbor_encode1__19___libfuzzer_sys_run:
  303|    281|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    281|                $body
  305|    281|            }
rust_fuzzer_test_input:
  259|    364|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    364|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    364|
  262|    364|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    364|                // implementation. This helps the fuzzer avoid exploring all the
  264|    364|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    364|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    364|                // get to longer inputs that actually lead to interesting executions
  267|    364|                // quicker.
  268|    364|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    363|                }
  271|    363|
  272|    363|                let mut u = Unstructured::new(bytes);
  273|    363|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    363|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    363|                }
  291|       |
  292|    363|                let data = match data {
  293|    281|                    Ok(d) => d,
  294|     82|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    281|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    281|                result.to_libfuzzer_code()
  299|    364|            }
_RNvXCs7sKq3GLqaq7_13libfuzzer_sysNtB2_6CorpusINtNtCs5peUZ1FGs3M_4core7convert4FromuE4from:
   30|    281|    fn from(_: ()) -> Self {
   31|    281|        Self::Keep
   32|    281|    }
LLVMFuzzerTestOneInput:
   58|    364|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    364|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    364|    });
   63|    364|
   64|    364|    match test_input {
   65|    364|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    364|}
_RNvMs_Cs7sKq3GLqaq7_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|    281|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    281|        match self {
   42|    281|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    281|    }
_RNCNvCs7sKq3GLqaq7_13libfuzzer_sys15test_input_wrap0B3_:
   59|    364|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    364|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    364|        rust_fuzzer_test_input(data_slice)
   62|    364|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtCsgfaYP9GPJCf_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
   64|    364|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   65|    364|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   66|    364|    }
_RNvXs_NtCsgfaYP9GPJCf_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitraryCsgGJeqQcKBJt_11common_fuzz:
   39|    275|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   40|    275|        let mut code = 0u64;
   41|    275|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   42|       |
   43|    703|        while len_choice & 1 == 1 {
   44|    428|            len_choice >>= 1;
   45|    428|
   46|    428|            let x = u.arbitrary::<u8>();
   47|    428|            let next = code
   48|    428|                .checked_shl(8)
   49|    428|                .zip(x.ok())
   50|    428|                .map(|(next, x)| next.saturating_add(x as u64));
   51|    428|
   52|    428|            match next {
   53|      0|                None => break,
   54|    428|                Some(next) => code = next,
   55|       |            }
   56|       |        }
   57|       |
   58|    275|        let size = u.int_in_range(0..=S)?;
   59|    275|        let data = u.bytes(size)?;
   60|       |
   61|    273|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   62|    275|    }
_RNCNvXs_NtCsgfaYP9GPJCf_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary0CsgGJeqQcKBJt_11common_fuzz:
   50|    428|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsdi6Y70DSZSO_11cbor_encode:
  101|      8|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|      8|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|      8|        }
  105|      8|        let size = input_digest.len();
  106|      8|        let mut digest = [0; S];
  107|      8|        let mut i = 0;
  108|    264|        while i < size {
  109|    256|            digest[i] = input_digest[i];
  110|    256|            i += 1;
  111|    256|        }
  112|      8|        Ok(Self {
  113|      8|            code,
  114|      8|            size: size as u8,
  115|      8|            digest,
  116|      8|        })
  117|      8|    }
_RNvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB4_9MultihashKj40_E6digestCsdi6Y70DSZSO_11cbor_encode:
  130|    562|    pub fn digest(&self) -> &[u8] {
  131|    562|        &self.digest[..self.size as usize]
  132|    562|    }
_RINvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsLOZ9MRSILa_5alloc3vec3VechEECsdi6Y70DSZSO_11cbor_encode:
  163|    546|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    546|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    546|    }
_RINvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsdi6Y70DSZSO_11cbor_encode:
  135|    273|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    273|    where
  137|    273|        Self: Sized,
  138|    273|    {
  139|    273|        let (code, size, digest) = read_multihash(r)?;
  140|    273|        Ok(Self { code, size, digest })
  141|    273|    }
_RNvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsdi6Y70DSZSO_11cbor_encode:
  125|    562|    pub const fn size(&self) -> u8 {
  126|    562|        self.size
  127|    562|    }
_RNvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB4_9MultihashKj40_E4codeCsdi6Y70DSZSO_11cbor_encode:
  120|    570|    pub const fn code(&self) -> u64 {
  121|    570|        self.code
  122|    570|    }
_RINvNtCsgfaYP9GPJCf_9multihash9multihash15write_multihashQQINtNtCsLOZ9MRSILa_5alloc3vec3VechEECsdi6Y70DSZSO_11cbor_encode:
  296|    546|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  297|    546|where
  298|    546|    W: io::Write,
  299|    546|{
  300|    546|    let mut code_buf = varint_encode::u64_buffer();
  301|    546|    let code = varint_encode::u64(code, &mut code_buf);
  302|    546|
  303|    546|    let mut size_buf = varint_encode::u8_buffer();
  304|    546|    let size = varint_encode::u8(size, &mut size_buf);
  305|    546|
  306|    546|    w.write_all(code)?;
  307|    546|    w.write_all(size)?;
  308|    546|    w.write_all(digest)?;
  309|    546|    Ok(())
  310|    546|}
_RINvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsLOZ9MRSILa_5alloc3vec3VechEECsdi6Y70DSZSO_11cbor_encode:
  163|     16|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     16|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     16|    }
_RINvNtCsgfaYP9GPJCf_9multihash9multihash14read_multihashQRShKj40_ECsdi6Y70DSZSO_11cbor_encode:
  318|    273|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  319|    273|where
  320|    273|    R: io::Read,
  321|    273|{
  322|    273|    let code = read_u64(&mut r)?;
  323|    273|    let size = read_u64(&mut r)?;
  324|       |
  325|    273|    if size > S as u64 || size > u8::MAX as u64 {
  326|      0|        return Err(Error::InvalidSize(size));
  327|    273|    }
  328|    273|
  329|    273|    let mut digest = [0; S];
  330|    273|    r.read_exact(&mut digest[..size as usize])?;
  331|    273|    Ok((code, size as u8, digest))
  332|    273|}
_RINvNtCsgfaYP9GPJCf_9multihash9multihash15write_multihashQINtNtCsLOZ9MRSILa_5alloc3vec3VechEECsdi6Y70DSZSO_11cbor_encode:
  296|     16|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  297|     16|where
  298|     16|    W: io::Write,
  299|     16|{
  300|     16|    let mut code_buf = varint_encode::u64_buffer();
  301|     16|    let code = varint_encode::u64(code, &mut code_buf);
  302|     16|
  303|     16|    let mut size_buf = varint_encode::u8_buffer();
  304|     16|    let size = varint_encode::u8(size, &mut size_buf);
  305|     16|
  306|     16|    w.write_all(code)?;
  307|     16|    w.write_all(size)?;
  308|     16|    w.write_all(digest)?;
  309|     16|    Ok(())
  310|     16|}
_RNvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsgGJeqQcKBJt_11common_fuzz:
  101|    281|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    281|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    281|        }
  105|    281|        let size = input_digest.len();
  106|    281|        let mut digest = [0; S];
  107|    281|        let mut i = 0;
  108|    890|        while i < size {
  109|    609|            digest[i] = input_digest[i];
  110|    609|            i += 1;
  111|    609|        }
  112|    281|        Ok(Self {
  113|    281|            code,
  114|    281|            size: size as u8,
  115|    281|            digest,
  116|    281|        })
  117|    281|    }
_RNvMs_NtCsgfaYP9GPJCf_9multihash9multihashINtB4_9MultihashKj40_E4codeCsgGJeqQcKBJt_11common_fuzz:
  120|      8|    pub const fn code(&self) -> u64 {
  121|      8|        self.code
  122|      8|    }

_RNvXs4_NtCsgfaYP9GPJCf_9multihash14multihash_implyINtNtCs5peUZ1FGs3M_4core7convert4FromNtB5_4CodeE4from:
   11|     88|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCsgx2bukOdW1A_10fvm_shared7address8protocol8ProtocolNtNtCsbxtIA3kmdXc_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  4.36k|    fn from_u8(n: u8) -> Option<Self> {
  468|  4.36k|        FromPrimitive::from_u64(From::from(n))
  469|  4.36k|    }

_RNvMs2_NtCs7NNAkjW8KxD_9once_cell3impINtB5_8OnceCellNtNtCsLOZ9MRSILa_5alloc6string6StringE14is_initializedCsdi6Y70DSZSO_11cbor_encode:
   49|    363|    pub(crate) fn is_initialized(&self) -> bool {
   50|    363|        // An `Acquire` load is enough because that makes all the initialization
   51|    363|        // operations visible to us, and, this being a fast path, weaker
   52|    363|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    363|        // `SeqCst` operations on the slow path.
   54|    363|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    363|    }

_RNvMs4_NtCs7NNAkjW8KxD_9once_cell4syncINtB5_8OnceCellNtNtCsLOZ9MRSILa_5alloc6string6StringE3getCsdi6Y70DSZSO_11cbor_encode:
  965|    363|        pub fn get(&self) -> Option<&T> {
  966|    363|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    363|                None
  971|       |            }
  972|    363|        }

_RNvMs1_Cs85W8scvXotb_10scopeguardINtB5_10ScopeGuardQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsdi6Y70DSZSO_11cbor_encode:
  317|    562|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    562|        ScopeGuard {
  319|    562|            value: ManuallyDrop::new(v),
  320|    562|            dropfn: ManuallyDrop::new(dropfn),
  321|    562|            strategy: PhantomData,
  322|    562|        }
  323|    562|    }
_RNvXs4_Cs85W8scvXotb_10scopeguardINtB5_10ScopeGuardQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs5peUZ1FGs3M_4core3ops5deref8DerefMut9deref_mutCsdi6Y70DSZSO_11cbor_encode:
  443|    562|    fn deref_mut(&mut self) -> &mut T {
  444|    562|        &mut *self.value
  445|    562|    }
_RNvXCs85W8scvXotb_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    562|    fn should_run() -> bool { true }
_RINvCs85W8scvXotb_10scopeguard5guardQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEFBy_EuECsdi6Y70DSZSO_11cbor_encode:
  367|    562|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    562|    where F: FnOnce(T)
  369|    562|{
  370|    562|    ScopeGuard::with_strategy(v, dropfn)
  371|    562|}
_RNvXs5_Cs85W8scvXotb_10scopeguardINtB5_10ScopeGuardQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs5peUZ1FGs3M_4core3ops4drop4Drop4dropCsdi6Y70DSZSO_11cbor_encode:
  452|    562|    fn drop(&mut self) {
  453|    562|        // This is OK because the fields are `ManuallyDrop`s
  454|    562|        // which will not be dropped by the compiler.
  455|    562|        let (value, dropfn) = unsafe {
  456|    562|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    562|        };
  458|    562|        if S::should_run() {
  459|    562|            dropfn(value);
  460|    562|        }
  461|    562|    }

_RINvXsh_NtNtCs74DdPnp51dw_5serde2de5implsINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
 1017|    281|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1018|    281|    where
 1019|    281|        D: Deserializer<'de>,
 1020|    281|    {
 1021|    281|        struct VecVisitor<T> {
 1022|    281|            marker: PhantomData<T>,
 1023|    281|        }
 1024|    281|
 1025|    281|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1026|    281|        where
 1027|    281|            T: Deserialize<'de>,
 1028|    281|        {
 1029|    281|            type Value = Vec<T>;
 1030|    281|
 1031|    281|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1032|    281|                formatter.write_str("a sequence")
 1033|    281|            }
 1034|    281|
 1035|    281|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    281|            where
 1037|    281|                A: SeqAccess<'de>,
 1038|    281|            {
 1039|    281|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1040|    281|
 1041|    281|                while let Some(value) = try!(seq.next_element()) {
 1042|    281|                    values.push(value);
 1043|    281|                }
 1044|    281|
 1045|    281|                Ok(values)
 1046|    281|            }
 1047|    281|        }
 1048|    281|
 1049|    281|        let visitor = VecVisitor {
 1050|    281|            marker: PhantomData,
 1051|    281|        };
 1052|    281|        deserializer.deserialize_seq(visitor)
 1053|    281|    }
_RINvXNvXsV_NtNtCs74DdPnp51dw_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCse5XA9lHZvLu_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs5peUZ1FGs3M_4core7convert10InfallibleEECsdi6Y70DSZSO_11cbor_encode:
  138|    281|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    281|        where
  140|    281|            E: Error,
  141|    281|        {
  142|    281|            Ok(v)
  143|    281|        }
_RINvXNvXsh_NtNtCs74DdPnp51dw_5serde2de5implsINtNtCsLOZ9MRSILa_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
 1035|    281|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1036|    281|            where
 1037|    281|                A: SeqAccess<'de>,
 1038|    281|            {
 1039|    281|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1040|       |
 1041|  4.36k|                while let Some(value) = try!(seq.next_element()) {
 1042|  4.08k|                    values.push(value);
 1043|  4.08k|                }
 1044|       |
 1045|    281|                Ok(values)
 1046|    281|            }
_RINvXsV_NtNtCs74DdPnp51dw_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  113|    281|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    281|            where
  115|    281|                D: Deserializer<'de>,
  116|    281|            {
  117|    281|                struct PrimitiveVisitor;
  118|    281|
  119|    281|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    281|                    type Value = $primitive;
  121|    281|
  122|    281|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    281|                        formatter.write_str(stringify!($primitive))
  124|    281|                    }
  125|    281|
  126|    281|                    $($($method!($val : $visit);)*)*
  127|    281|                }
  128|    281|
  129|    281|                deserializer.$deserialize(PrimitiveVisitor)
  130|    281|            }

_RINvYINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess12next_elementINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEECsdi6Y70DSZSO_11cbor_encode:
 1727|    281|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    281|    where
 1729|    281|        T: Deserialize<'de>,
 1730|    281|    {
 1731|    281|        self.next_element_seed(PhantomData)
 1732|    281|    }
_RINvXs3_NtCs74DdPnp51dw_5serde2deINtNtCs5peUZ1FGs3M_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  787|    281|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    281|    where
  789|    281|        D: Deserializer<'de>,
  790|    281|    {
  791|    281|        T::deserialize(deserializer)
  792|    281|    }
_RINvXs3_NtCs74DdPnp51dw_5serde2deINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  787|    281|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    281|    where
  789|    281|        D: Deserializer<'de>,
  790|    281|    {
  791|    281|        T::deserialize(deserializer)
  792|    281|    }
_RINvYINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess12next_elementNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield8BitFieldECsdi6Y70DSZSO_11cbor_encode:
 1727|    281|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    281|    where
 1729|    281|        T: Deserialize<'de>,
 1730|    281|    {
 1731|    281|        self.next_element_seed(PhantomData)
 1732|    281|    }
_RINvYINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsdi6Y70DSZSO_11cbor_encode:
 1727|    281|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    281|    where
 1729|    281|        T: Deserialize<'de>,
 1730|    281|    {
 1731|    281|        self.next_element_seed(PhantomData)
 1732|    281|    }
_RINvYNtNvXs_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCs74DdPnp51dw_5serde2de7Visitor20visit_borrowed_bytesINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs5peUZ1FGs3M_4core7convert10InfallibleEECsdi6Y70DSZSO_11cbor_encode:
 1567|    562|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1568|    562|    where
 1569|    562|        E: Error,
 1570|    562|    {
 1571|    562|        self.visit_bytes(v)
 1572|    562|    }
_RINvXs3_NtCs74DdPnp51dw_5serde2deINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  787|    281|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    281|    where
  789|    281|        D: Deserializer<'de>,
  790|    281|    {
  791|    281|        T::deserialize(deserializer)
  792|    281|    }
_RINvYINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess12next_elementNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsdi6Y70DSZSO_11cbor_encode:
 1727|    281|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    281|    where
 1729|    281|        T: Deserialize<'de>,
 1730|    281|    {
 1731|    281|        self.next_element_seed(PhantomData)
 1732|    281|    }
_RINvYINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess12next_elementyECsdi6Y70DSZSO_11cbor_encode:
 1727|    281|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    281|    where
 1729|    281|        T: Deserialize<'de>,
 1730|    281|    {
 1731|    281|        self.next_element_seed(PhantomData)
 1732|    281|    }
_RINvYNtNtCs2ZAoQR8Z9eq_3cid5serde17BytesToCidVisitorNtNtCs74DdPnp51dw_5serde2de7Visitor20visit_borrowed_bytesINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs5peUZ1FGs3M_4core7convert10InfallibleEECsdi6Y70DSZSO_11cbor_encode:
 1567|    281|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1568|    281|    where
 1569|    281|        E: Error,
 1570|    281|    {
 1571|    281|        self.visit_bytes(v)
 1572|    281|    }
_RINvXs3_NtCs74DdPnp51dw_5serde2deINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataINtNtCs2ZAoQR8Z9eq_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  787|    281|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    281|    where
  789|    281|        D: Deserializer<'de>,
  790|    281|    {
  791|    281|        T::deserialize(deserializer)
  792|    281|    }
_RINvYINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess12next_elementINtNtCs2ZAoQR8Z9eq_3cid3cid3CidKj40_EECsdi6Y70DSZSO_11cbor_encode:
 1727|    281|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|    281|    where
 1729|    281|        T: Deserialize<'de>,
 1730|    281|    {
 1731|    281|        self.next_element_seed(PhantomData)
 1732|    281|    }
_RINvYINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess12next_elementNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressECsdi6Y70DSZSO_11cbor_encode:
 1727|  4.64k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1728|  4.64k|    where
 1729|  4.64k|        T: Deserialize<'de>,
 1730|  4.64k|    {
 1731|  4.64k|        self.next_element_seed(PhantomData)
 1732|  4.64k|    }
_RINvXs3_NtCs74DdPnp51dw_5serde2deINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  787|  4.36k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|  4.36k|    where
  789|  4.36k|        D: Deserializer<'de>,
  790|  4.36k|    {
  791|  4.36k|        T::deserialize(deserializer)
  792|  4.36k|    }
_RINvXs3_NtCs74DdPnp51dw_5serde2deINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  787|    281|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    281|    where
  789|    281|        D: Deserializer<'de>,
  790|    281|    {
  791|    281|        T::deserialize(deserializer)
  792|    281|    }
_RINvXs3_NtCs74DdPnp51dw_5serde2deINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  787|    281|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  788|    281|    where
  789|    281|        D: Deserializer<'de>,
  790|    281|    {
  791|    281|        T::deserialize(deserializer)
  792|    281|    }

_RNvNtNtCs74DdPnp51dw_5serde9___private9size_hint8cautiousCsdi6Y70DSZSO_11cbor_encode:
   12|    281|pub fn cautious(hint: Option<usize>) -> usize {
   13|    281|    cmp::min(hint.unwrap_or(0), 4096)
   14|    281|}

_RINvXsE_NtNtCs74DdPnp51dw_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   11|    562|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    562|            where
   13|    562|                S: Serializer,
   14|    562|            {
   15|    562|                serializer.$method(*self $($cast)*)
   16|    562|            }
_RINvXs1E_NtNtCs74DdPnp51dw_5serde3ser5implsRNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  423|    562|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    562|            where
  425|    562|                S: Serializer,
  426|    562|            {
  427|    562|                (**self).serialize(serializer)
  428|    562|            }
_RINvXs1E_NtNtCs74DdPnp51dw_5serde3ser5implsRINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  423|    562|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    562|            where
  425|    562|                S: Serializer,
  426|    562|            {
  427|    562|                (**self).serialize(serializer)
  428|    562|            }
_RINvXs1E_NtNtCs74DdPnp51dw_5serde3ser5implsRNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  423|  8.73k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|  8.73k|            where
  425|  8.73k|                S: Serializer,
  426|  8.73k|            {
  427|  8.73k|                (**self).serialize(serializer)
  428|  8.73k|            }
_RINvXs1E_NtNtCs74DdPnp51dw_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  423|    562|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    562|            where
  425|    562|                S: Serializer,
  426|    562|            {
  427|    562|                (**self).serialize(serializer)
  428|    562|            }
_RINvXs1k_NtNtCs74DdPnp51dw_5serde3ser5implsINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  193|    562|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  194|    562|            where
  195|    562|                S: Serializer,
  196|    562|            {
  197|    562|                serializer.collect_seq(self)
  198|    562|            }
_RINvXs1E_NtNtCs74DdPnp51dw_5serde3ser5implsRINtNtCs2ZAoQR8Z9eq_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  423|    562|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    562|            where
  425|    562|                S: Serializer,
  426|    562|            {
  427|    562|                (**self).serialize(serializer)
  428|    562|            }
_RINvXs1E_NtNtCs74DdPnp51dw_5serde3ser5implsRNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  423|    562|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  424|    562|            where
  425|    562|                S: Serializer,
  426|    562|            {
  427|    562|                (**self).serialize(serializer)
  428|    562|            }

_RINvNtCs74DdPnp51dw_5serde3ser17iterator_len_hintINtNtNtCs5peUZ1FGs3M_4core5slice4iter4IterNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEECsdi6Y70DSZSO_11cbor_encode:
 1984|    562|    match iter.size_hint() {
 1985|    562|        (lo, Some(hi)) if lo == hi => Some(lo),
 1986|      0|        _ => None,
 1987|       |    }
 1988|    562|}
_RNCINvYQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer11collect_seqRINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEE0Csdi6Y70DSZSO_11cbor_encode:
 1288|  8.17k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer11collect_seqRINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEECsdi6Y70DSZSO_11cbor_encode:
 1277|    562|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1278|    562|    where
 1279|    562|        I: IntoIterator,
 1280|    562|        <I as IntoIterator>::Item: Serialize,
 1281|    562|    {
 1282|    562|        let iter = iter.into_iter();
 1283|    562|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1284|       |
 1285|       |        #[cfg(not(no_iterator_try_fold))]
 1286|       |        {
 1287|    562|            let mut iter = iter;
 1288|    562|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1289|       |        }
 1290|       |
 1291|       |        #[cfg(no_iterator_try_fold)]
 1292|       |        {
 1293|       |            for item in iter {
 1294|       |                try!(serializer.serialize_element(&item));
 1295|       |            }
 1296|       |        }
 1297|       |
 1298|    562|        serializer.end()
 1299|    562|    }

_RINvXsc_NtCsegb2Mk0NYiE_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs74DdPnp51dw_5serde3ser9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  186|    562|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    562|    where
  188|    562|        S: Serializer,
  189|    562|    {
  190|    562|        serializer.serialize_bytes(&self.bytes)
  191|    562|    }
_RINvMNtCsegb2Mk0NYiE_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsLOZ9MRSILa_5alloc3vec3VechEECsdi6Y70DSZSO_11cbor_encode:
   60|    562|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    562|        ByteBuf {
   62|    562|            bytes: bytes.into(),
   63|    562|        }
   64|    562|    }

_RINvNtCse5XA9lHZvLu_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderECsdi6Y70DSZSO_11cbor_encode:
   26|    562|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    562|    let buf = match reader.fill(1)? {
   28|    562|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    562|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    281|    Ok(byte)
   33|    562|}

_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess17next_element_seedINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsdi6Y70DSZSO_11cbor_encode:
  484|    281|        if let Some(len) = self.len.as_mut() {
  485|    281|            if *len > 0 {
  486|    281|                *len -= 1;
  487|    281|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    281|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess17next_element_seedINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield8BitFieldEECsdi6Y70DSZSO_11cbor_encode:
  484|    281|        if let Some(len) = self.len.as_mut() {
  485|    281|            if *len > 0 {
  486|    281|                *len -= 1;
  487|    281|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    281|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess17next_element_seedINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEEECsdi6Y70DSZSO_11cbor_encode:
  484|    281|        if let Some(len) = self.len.as_mut() {
  485|    281|            if *len > 0 {
  486|    281|                *len -= 1;
  487|    281|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    281|    }
_RNvMs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderE8try_stepCsdi6Y70DSZSO_11cbor_encode:
  101|    562|    fn try_step<'a>(
  102|    562|        &'a mut self,
  103|    562|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    562|    {
  105|    562|        if self.reader.step_in() {
  106|    562|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    562|    }
_RINvMs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs2ZAoQR8Z9eq_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs74DdPnp51dw_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsdi6Y70DSZSO_11cbor_encode:
  113|    281|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    281|    where
  115|    281|        V: Visitor<'de>,
  116|    281|    {
  117|    281|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    281|        match tag.0 {
  120|    281|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    281|    }
_RNvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess9size_hintCsdi6Y70DSZSO_11cbor_encode:
  500|    281|    fn size_hint(&self) -> Option<usize> {
  501|    281|        self.len
  502|    281|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess17next_element_seedINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataINtNtCs2ZAoQR8Z9eq_3cid3cid3CidKj40_EEECsdi6Y70DSZSO_11cbor_encode:
  484|    281|        if let Some(len) = self.len.as_mut() {
  485|    281|            if *len > 0 {
  486|    281|                *len -= 1;
  487|    281|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    281|    }
_RINvNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de10from_sliceNtNtCsgGJeqQcKBJt_11common_fuzz4cbor7PayloadECsdi6Y70DSZSO_11cbor_encode:
   40|    281|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    281|where
   42|    281|    T: de::Deserialize<'a>,
   43|    281|{
   44|    281|    let reader = SliceReader::new(buf);
   45|    281|    let mut deserializer = Deserializer::from_reader(reader);
   46|    281|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    281|    deserializer.end()?;
   48|    281|    Ok(value)
   49|    281|}
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsdi6Y70DSZSO_11cbor_encode:
  142|    281|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    281|        where V: Visitor<'de>
  144|    281|        {
  145|    281|            let value = <$t>::decode(&mut self.reader)?;
  146|    281|            visitor.$visit(value)
  147|    281|        }
_RNvMNtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderE11from_readerCsdi6Y70DSZSO_11cbor_encode:
   93|    281|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    281|        Deserializer { reader }
   95|    281|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECsdi6Y70DSZSO_11cbor_encode:
  239|    562|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    562|    where
  241|    562|        V: Visitor<'de>,
  242|    562|    {
  243|    562|        self.deserialize_bytes(visitor)
  244|    562|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess17next_element_seedINtNtCs5peUZ1FGs3M_4core6marker11PhantomDatayEECsdi6Y70DSZSO_11cbor_encode:
  484|    281|        if let Some(len) = self.len.as_mut() {
  485|    281|            if *len > 0 {
  486|    281|                *len -= 1;
  487|    281|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    281|    }
_RNvMs1_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderE5arrayCsdi6Y70DSZSO_11cbor_encode:
  434|    281|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    281|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    281|        Ok(Accessor {
  437|    281|            de,
  438|    281|            len: array_start.0,
  439|    281|        })
  440|    281|    }
_RINvXs7_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer17deserialize_bytesNtNtCs2ZAoQR8Z9eq_3cid5serde17BytesToCidVisitorECsdi6Y70DSZSO_11cbor_encode:
  646|    281|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    281|        let byte = peek_one(&mut self.0.reader)?;
  648|    281|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    281|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    281|                    Cow::Borrowed(buf) => {
  653|    281|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    281|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      0|                    Cow::Owned(mut buf) => {
  660|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      0|                            buf.remove(0);
  664|      0|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      0|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    281|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess17next_element_seedINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsdi6Y70DSZSO_11cbor_encode:
  484|    281|        if let Some(len) = self.len.as_mut() {
  485|    281|            if *len > 0 {
  486|    281|                *len -= 1;
  487|    281|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    281|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsdi6Y70DSZSO_11cbor_encode:
  354|    281|    fn deserialize_tuple_struct<V>(
  355|    281|        self,
  356|    281|        _name: &'static str,
  357|    281|        len: usize,
  358|    281|        visitor: V,
  359|    281|    ) -> Result<V::Value, Self::Error>
  360|    281|    where
  361|    281|        V: Visitor<'de>,
  362|    281|    {
  363|    281|        self.deserialize_tuple(len, visitor)
  364|    281|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsdi6Y70DSZSO_11cbor_encode:
  344|    281|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    281|    where
  346|    281|        V: Visitor<'de>,
  347|    281|    {
  348|    281|        let mut de = self.try_step()?;
  349|    281|        let seq = Accessor::tuple(&mut de, len)?;
  350|    281|        visitor.visit_seq(seq)
  351|    281|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs2ZAoQR8Z9eq_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsdi6Y70DSZSO_11cbor_encode:
  318|    281|    fn deserialize_newtype_struct<V>(
  319|    281|        self,
  320|    281|        name: &'static str,
  321|    281|        visitor: V,
  322|    281|    ) -> Result<V::Value, Self::Error>
  323|    281|    where
  324|    281|        V: Visitor<'de>,
  325|    281|    {
  326|    281|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    281|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    281|    }
_RNCNvMs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderE8try_step0Csdi6Y70DSZSO_11cbor_encode:
  106|    562|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RNvMs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderE3endCsdi6Y70DSZSO_11cbor_encode:
  131|    281|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    281|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    281|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsLOZ9MRSILa_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEECsdi6Y70DSZSO_11cbor_encode:
  334|    281|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    281|    where
  336|    281|        V: Visitor<'de>,
  337|    281|    {
  338|    281|        let mut de = self.try_step()?;
  339|    281|        let seq = Accessor::array(&mut de)?;
  340|    281|        visitor.visit_seq(seq)
  341|    281|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de9SeqAccess17next_element_seedINtNtCs5peUZ1FGs3M_4core6marker11PhantomDataNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEECsdi6Y70DSZSO_11cbor_encode:
  484|  4.64k|        if let Some(len) = self.len.as_mut() {
  485|  4.64k|            if *len > 0 {
  486|  4.36k|                *len -= 1;
  487|  4.36k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    281|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  4.64k|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsdi6Y70DSZSO_11cbor_encode:
  228|  4.64k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  4.64k|    where
  230|  4.64k|        V: Visitor<'de>,
  231|  4.64k|    {
  232|  4.64k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  4.64k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  4.64k|    }
_RNvMs1_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderE5tupleCsdi6Y70DSZSO_11cbor_encode:
  443|    281|    pub fn tuple(
  444|    281|        de: &'a mut Deserializer<R>,
  445|    281|        len: usize,
  446|    281|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    281|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    281|        if array_start.0 == Some(len) {
  450|    281|            Ok(Accessor {
  451|    281|                de,
  452|    281|                len: array_start.0,
  453|    281|            })
  454|       |        } else {
  455|      0|            Err(DecodeError::RequireLength {
  456|      0|                name: "tuple",
  457|      0|                expect: len,
  458|      0|                value: array_start.0.unwrap_or(0),
  459|      0|            })
  460|       |        }
  461|    281|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderENtNtCs74DdPnp51dw_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECsdi6Y70DSZSO_11cbor_encode:
  228|    562|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    562|    where
  230|    562|        V: Visitor<'de>,
  231|    562|    {
  232|    562|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    562|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    562|    }

_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsdi6Y70DSZSO_11cbor_encode:
  403|    562|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    562|        value.serialize(&mut *self.ser)
  405|    562|    }
_RNvXs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer15serialize_tupleCsdi6Y70DSZSO_11cbor_encode:
  239|    562|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    562|        Ok(BoundedCollect { ser: self })
  241|    562|    }
_RNvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser12SerializeSeq3endCsdi6Y70DSZSO_11cbor_encode:
  374|    562|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    562|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    562|        }
  378|       |
  379|    562|        Ok(())
  380|    562|    }
_RNvXs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer13serialize_u64Csdi6Y70DSZSO_11cbor_encode:
  123|    562|        v.encode(&mut self.writer)?;
  124|    562|        Ok(())
  125|    562|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsgGJeqQcKBJt_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsdi6Y70DSZSO_11cbor_encode:
  403|    562|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    562|        value.serialize(&mut *self.ser)
  405|    562|    }
_RNvXs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer15serialize_bytesCsdi6Y70DSZSO_11cbor_encode:
  160|  10.4k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  10.4k|        Ok(())
  162|  10.4k|    }
_RNvXs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer13serialize_seqCsdi6Y70DSZSO_11cbor_encode:
  226|    562|        if let Some(len) = len {
  227|    562|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    562|        Ok(Collect {
  232|    562|            bounded: len.is_some(),
  233|    562|            ser: self,
  234|    562|        })
  235|    562|    }
_RNvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct3endCsdi6Y70DSZSO_11cbor_encode:
  408|    562|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    562|        Ok(())
  410|    562|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs2ZAoQR8Z9eq_3cid3cid3CidKj40_EECsdi6Y70DSZSO_11cbor_encode:
  403|    562|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    562|        value.serialize(&mut *self.ser)
  405|    562|    }
_RNvXs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer22serialize_tuple_structCsdi6Y70DSZSO_11cbor_encode:
  244|    562|    fn serialize_tuple_struct(
  245|    562|        self,
  246|    562|        _name: &'static str,
  247|    562|        len: usize,
  248|    562|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    562|        self.serialize_tuple(len)
  250|    562|    }
_RINvXs0_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser12SerializeSeq17serialize_elementRNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressECsdi6Y70DSZSO_11cbor_encode:
  369|  8.17k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  8.17k|        value.serialize(&mut *self.ser)
  371|  8.17k|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsdi6Y70DSZSO_11cbor_encode:
  403|    562|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    562|        value.serialize(&mut *self.ser)
  405|    562|    }
_RNvMNtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterE10into_innerCsdi6Y70DSZSO_11cbor_encode:
   56|    562|    pub fn into_inner(self) -> W {
   57|    562|        self.writer
   58|    562|    }
_RNvMNtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterE3newCsdi6Y70DSZSO_11cbor_encode:
   51|    562|    pub fn new(writer: W) -> Serializer<W> {
   52|    562|        Serializer { writer }
   53|    562|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield8BitFieldECsdi6Y70DSZSO_11cbor_encode:
  403|    562|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    562|        value.serialize(&mut *self.ser)
  405|    562|    }
_RINvNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser6to_vecNtNtCsgGJeqQcKBJt_11common_fuzz4cbor7PayloadECsdi6Y70DSZSO_11cbor_encode:
   23|    562|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    562|where
   25|    562|    T: Serialize + ?Sized,
   26|    562|{
   27|    562|    let writer = BufWriter::new(Vec::new());
   28|    562|    let mut serializer = Serializer::new(writer);
   29|    562|    value.serialize(&mut serializer)?;
   30|    562|    Ok(serializer.into_inner().into_inner())
   31|    562|}
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsLOZ9MRSILa_5alloc3vec3VecNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressEECsdi6Y70DSZSO_11cbor_encode:
  403|    562|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    562|        value.serialize(&mut *self.ser)
  405|    562|    }
_RINvXs_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer24serialize_newtype_structNtNtCsegb2Mk0NYiE_11serde_bytes7bytebuf7ByteBufECsdi6Y70DSZSO_11cbor_encode:
  199|    562|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    562|        self,
  201|    562|        name: &'static str,
  202|    562|        value: &T,
  203|    562|    ) -> Result<Self::Ok, Self::Error> {
  204|    562|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    562|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    562|    }
_RNvXs7_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser10Serializer15serialize_bytesCsdi6Y70DSZSO_11cbor_encode:
  550|    562|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    562|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    562|        let prefixed = [&[0x00], value].concat();
  553|    562|        // CIDs are serialized with CBOR tag 42.
  554|    562|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    562|        Ok(())
  556|    562|    }
_RINvXs2_NtCse5XA9lHZvLu_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterENtNtCs74DdPnp51dw_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsgx2bukOdW1A_10fvm_shared7address7AddressECsdi6Y70DSZSO_11cbor_encode:
  403|    562|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    562|        value.serialize(&mut *self.ser)
  405|    562|    }

_RNvXCsiRcJHWzx2VV_11serde_tupleINtB2_10SerializerQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEENtNtCs74DdPnp51dw_5serde3ser10Serializer22serialize_tuple_structCsdi6Y70DSZSO_11cbor_encode:
  158|    562|    fn serialize_tuple_struct(
  159|    562|        self,
  160|    562|        name: &'static str,
  161|    562|        len: usize,
  162|    562|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    562|        self.0.serialize_tuple_struct(name, len)
  164|    562|    }
_RINvXs_CsiRcJHWzx2VV_11serde_tupleINtB5_12DeserializerQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEENtNtCs74DdPnp51dw_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsdi6Y70DSZSO_11cbor_encode:
  353|    281|    fn deserialize_tuple_struct<V>(
  354|    281|        self,
  355|    281|        name: &'static str,
  356|    281|        len: usize,
  357|    281|        visitor: V,
  358|    281|    ) -> Result<V::Value, Self::Error>
  359|    281|    where
  360|    281|        V: serde::de::Visitor<'de>,
  361|    281|    {
  362|    281|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    281|    }

_RNvNtCs2BPDY6tg1E2_15unsigned_varint6decode3u64Csdi6Y70DSZSO_11cbor_encode:
  122|  1.10k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.10k|    decode!(buf, 9, u64)
  124|  1.10k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6decode7is_lastCsdi6Y70DSZSO_11cbor_encode:
   90|  3.43k|pub fn is_last(b: u8) -> bool {
   91|  3.43k|    b & 0x80 == 0
   92|  3.43k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6decode7is_lastCsgx2bukOdW1A_10fvm_shared:
   90|  31.7k|pub fn is_last(b: u8) -> bool {
   91|  31.7k|    b & 0x80 == 0
   92|  31.7k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6decode3u64Csgx2bukOdW1A_10fvm_shared:
  122|  3.53k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  3.53k|    decode!(buf, 9, u64)
  124|  3.53k|}

_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode10u64_bufferCsdi6Y70DSZSO_11cbor_encode:
  119|  2.76k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  2.76k|    [0; U64_LEN]
  121|  2.76k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode3u64Csdi6Y70DSZSO_11cbor_encode:
   69|  1.65k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.65k|    encode!(number, buf)
   71|  1.65k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode2u8Csdi6Y70DSZSO_11cbor_encode:
   45|    562|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    562|    encode!(number, buf)
   47|    562|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode9u8_bufferCsdi6Y70DSZSO_11cbor_encode:
  101|    562|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    562|    [0; U8_LEN]
  103|    562|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode10u64_bufferCsgx2bukOdW1A_10fvm_shared:
  119|  7.06k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  7.06k|    [0; U64_LEN]
  121|  7.06k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode3u64Csgx2bukOdW1A_10fvm_shared:
   69|  7.06k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  7.06k|    encode!(number, buf)
   71|  7.06k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode3u64Cs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
   69|  5.55k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  5.55k|    encode!(number, buf)
   71|  5.55k|}
_RNvNtCs2BPDY6tg1E2_15unsigned_varint6encode10u64_bufferCs7Qvv1qYjVZJ_17fvm_ipld_bitfield:
  119|  5.55k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  5.55k|    [0; U64_LEN]
  121|  5.55k|}

_RINvNtCs2BPDY6tg1E2_15unsigned_varint2io8read_u64QQRShECsdi6Y70DSZSO_11cbor_encode:
   31|  1.10k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.10k|                let mut b = encode::$b();
   33|  1.71k|                for i in 0 .. b.len() {
   34|  1.71k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.71k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.71k|                    }
   38|  1.71k|                    if decode::is_last(b[i]) {
   39|  1.10k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    607|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.10k|            }


_RNvMs5_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    852|    pub fn new(a: A, b: B) -> Self {
  299|    852|        Self(Merge::new(_Combine::new(a, b)))
  300|    852|    }
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    852|    fn new(mut iter: I) -> Self {
  469|    852|        let next = iter.next();
  470|    852|        Self { iter, next }
  471|    852|    }
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    852|    fn new(mut iter: I) -> Self {
  469|    852|        let next = iter.next();
  470|    852|        Self { iter, next }
  471|    852|    }
_RNvXsf_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs5peUZ1FGs3M_4core7default7Default7defaultB9_:
   87|    852|#[derive(Default)]
_RNvXse_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  4.55k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.55k|        let next = self.next.take()?;
  484|  4.55k|        self.next = self.iter.next();
  485|  4.55k|        Some(next)
  486|  4.55k|    }
_RNvXs9_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  389|  5.40k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  5.40k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  5.40k|    }
_RNvMs8_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    852|    fn new(lhs: A, rhs: B) -> Self {
  344|    852|        Self {
  345|    852|            lhs: Lookahead::new(lhs),
  346|    852|            rhs: Lookahead::new(rhs),
  347|    852|            combinator: Default::default(),
  348|    852|        }
  349|    852|    }
_RNCNvXs9_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.55k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  4.55k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.55k|        self.next.as_mut()
  475|  4.55k|    }
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  5.40k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  5.40k|        self.next.as_mut()
  475|  5.40k|    }
_RNvXsb_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  439|  5.40k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.55k|        while let Some(next) = self.iter.peek() {
  444|  4.19k|            if next.start > range.end {
  445|  4.19k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.55k|        Some(range)
  453|  5.40k|    }
_RNvXs6_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  312|  5.40k|        self.0.next()
  313|  5.40k|    }
_RNvMsa_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    852|    pub fn new(iter: I) -> Self {
  426|    852|        Self {
  427|    852|            iter: Lookahead::new(iter),
  428|    852|        }
  429|    852|    }
_RNvXs6_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  312|  5.40k|        self.0.next()
  313|  5.40k|    }
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  4.55k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.55k|        self.next.as_mut()
  475|  4.55k|    }
_RNvMs8_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  5.40k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  5.40k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.55k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    852|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.55k|        if advance_lhs {
  371|  4.55k|            self.lhs.next();
  372|  4.55k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.55k|        range
  377|  5.40k|    }
_RNvXse_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  5.40k|        let next = self.next.take()?;
  484|  4.55k|        self.next = self.iter.next();
  485|  4.55k|        Some(next)
  486|  5.40k|    }
_RNCNvXs9_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  5.40k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    852|    fn new(lhs: A, rhs: B) -> Self {
  344|    852|        Self {
  345|    852|            lhs: Lookahead::new(lhs),
  346|    852|            rhs: Lookahead::new(rhs),
  347|    852|            combinator: Default::default(),
  348|    852|        }
  349|    852|    }
_RNvMsa_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    852|    pub fn new(iter: I) -> Self {
  426|    852|        Self {
  427|    852|            iter: Lookahead::new(iter),
  428|    852|        }
  429|    852|    }
_RNvMs5_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    852|    pub fn new(a: A, b: B) -> Self {
  299|    852|        Self(Merge::new(_Combine::new(a, b)))
  300|    852|    }
_RNvXs0_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  182|  4.55k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  4.55k|        // the difference between a range and an empty range is just that range
  184|  4.55k|        Some(lhs)
  185|  4.55k|    }
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  5.40k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  5.40k|        self.next.as_mut()
  475|  5.40k|    }
_RNvXsh_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs5peUZ1FGs3M_4core7default7Default7defaultB9_:
  152|    852|#[derive(Default)]
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  10.8k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  10.8k|        self.next.as_mut()
  475|  10.8k|    }
_RNCNvXs9_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.55k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  1.70k|    fn new(mut iter: I) -> Self {
  469|  1.70k|        let next = iter.next();
  470|  1.70k|        Self { iter, next }
  471|  1.70k|    }
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    852|    fn new(mut iter: I) -> Self {
  469|    852|        let next = iter.next();
  470|    852|        Self { iter, next }
  471|    852|    }
_RNvXse_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  5.40k|        let next = self.next.take()?;
  484|  4.55k|        self.next = self.iter.next();
  485|  4.55k|        Some(next)
  486|  5.40k|    }
_RNvXse_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  4.55k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.55k|        let next = self.next.take()?;
  484|  4.55k|        self.next = self.iter.next();
  485|  4.55k|        Some(next)
  486|  4.55k|    }
_RNvMs8_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  5.40k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  5.40k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.55k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    852|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.55k|        if advance_lhs {
  371|  4.55k|            self.lhs.next();
  372|  4.55k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.55k|        range
  377|  5.40k|    }
_RNvXsb_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  439|  5.40k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.55k|        while let Some(next) = self.iter.peek() {
  444|  4.19k|            if next.start > range.end {
  445|  4.19k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.55k|        Some(range)
  453|  5.40k|    }
_RNvXNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  110|  4.55k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  4.55k|        // the union of a range and an empty range is just that range
  112|  4.55k|        Some(lhs)
  113|  4.55k|    }
_RNCNvXs9_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  5.40k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  389|  5.40k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  5.40k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  5.40k|    }
_RNvMsd_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    852|    fn new(mut iter: I) -> Self {
  469|    852|        let next = iter.next();
  470|    852|        Self { iter, next }
  471|    852|    }

_RNvXs3_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  5.40k|    fn next(&mut self) -> Option<Self::Item> {
  155|  5.40k|        self.0.next()
  156|  5.40k|    }
_RNCINvNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0B6_:
  167|  1.70k|    Ranges::new(iter::from_fn(move || {
  168|  1.70k|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|  1.70k|    }))
_RINvYINtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    852|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    852|        Combine::new(self, other)
   24|    852|    }
_RINvNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEEB4_:
  164|  1.70k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|  1.70k|    let mut iter = bits.into_iter().peekable();
  166|  1.70k|
  167|  1.70k|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|  1.70k|    }))
  181|  1.70k|}
_RINvMs2_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    852|    pub fn new<II>(iter: II) -> Self
  141|    852|    where
  142|    852|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    852|    {
  144|    852|        Self(iter.into_iter())
  145|    852|    }
_RINvMs2_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|  1.70k|    pub fn new<II>(iter: II) -> Self
  141|  1.70k|    where
  142|  1.70k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  1.70k|    {
  144|  1.70k|        Self(iter.into_iter())
  145|  1.70k|    }
_RINvYINtNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    852|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    852|        Combine::new(self, other)
   34|    852|    }
_RNvXs3_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs5peUZ1FGs3M_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsLOZ9MRSILa_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  1.70k|    fn next(&mut self) -> Option<Self::Item> {
  155|  1.70k|        self.0.next()
  156|  1.70k|    }

_RNvMs4_Cs7Qvv1qYjVZJ_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    852|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    852|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    852|    }
_RNvXsa_Cs7Qvv1qYjVZJ_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs5peUZ1FGs3M_4core7default7Default7defaultB5_:
   42|  1.00k|#[derive(Debug, Default, Clone)]
_RNvMs4_Cs7Qvv1qYjVZJ_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    852|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    852|        self.inner_ranges()
  287|    852|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    852|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    852|    }

_RNvXNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield5rangeINtNtNtCs5peUZ1FGs3M_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  4.55k|    fn size(&self) -> Self::Idx {
   17|  4.55k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  4.55k|            self.end - self.start
   21|       |        }
   22|  4.55k|    }

_RINvXNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs74DdPnp51dw_5serde3ser9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   83|    697|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    697|    where
   85|    697|        S: Serializer,
   86|    697|    {
   87|    697|        let bytes = self.to_bytes();
   88|    697|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    697|        }
   94|    697|        strict_bytes::serialize(&bytes, serializer)
   95|    697|    }
_RINvXs_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   99|    281|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    281|    where
  101|    281|        D: Deserializer<'de>,
  102|    281|    {
  103|    281|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    281|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    281|        }
  110|    281|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    281|    }
_RNvMs1_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    281|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    281|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    281|        let version = reader.read(2);
  162|    281|        if version != 0 {
  163|      0|            return Err(Error::UnsupportedVersion);
  164|    281|        }
  165|    281|
  166|    281|        let mut next_value = reader.read(1) == 1;
  167|    281|        let mut ranges = Vec::new();
  168|    281|        let mut index = 0u64;
  169|    281|        let mut total_len: u64 = 0;
  170|       |
  171|  4.36k|        while let Some(len) = reader.read_len()? {
  172|  4.08k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  4.08k|            if ovf {
  174|      0|                return Err(Error::RLEOverflow);
  175|  4.08k|            }
  176|  4.08k|            total_len = new_total_len;
  177|  4.08k|            let start = index;
  178|  4.08k|            index += len;
  179|  4.08k|            let end = index;
  180|  4.08k|
  181|  4.08k|            if next_value {
  182|  2.06k|                ranges.push(start..end);
  183|  2.06k|            }
  184|       |
  185|  4.08k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    281|        if next_value {
  191|      0|            return Err(Error::NotMinimal);
  192|    281|        }
  193|    281|
  194|    281|        Ok(Self {
  195|    281|            ranges,
  196|    281|            ..Default::default()
  197|    281|        })
  198|    281|    }
_RNvXs0_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hint:
  151|    728|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  152|    728|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  153|    728|    }
_RNvMs1_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    852|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    852|        let mut iter = self.ranges();
  203|       |
  204|    852|        let first_range = match iter.next() {
  205|    359|            Some(range) => range,
  206|    493|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    359|        let mut writer = BitWriter::new();
  210|    359|        writer.write(0, 2); // version 00
  211|    359|
  212|    359|        if first_range.start == 0 {
  213|    146|            writer.write(1, 1); // the first bit is a 1
  214|    213|        } else {
  215|    213|            writer.write(0, 1); // the first bit is a 0
  216|    213|            writer.write_len(first_range.start); // the number of leading 0s
  217|    213|        }
  218|       |
  219|    359|        writer.write_len(first_range.size());
  220|    359|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  4.55k|        for range in iter {
  225|  4.19k|            writer.write_len(range.start - index); // zeros
  226|  4.19k|            writer.write_len(range.size()); // ones
  227|  4.19k|            index = range.end;
  228|  4.19k|        }
  229|       |
  230|    359|        writer.finish()
  231|    852|    }
_RNvXs0_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary:
  115|    726|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  116|    726|        let mut next_value: bool = bool::arbitrary(u)?;
  117|    726|        let mut ranges = Vec::new();
  118|    726|        let mut index = 0u64;
  119|    726|        let mut total_len: u64 = 0;
  120|       |
  121|    726|        let size = u.arbitrary_len::<(u64, u8)>()?;
  122|       |
  123|    726|        for _ in 0..size {
  124|       |            // 3 line crappy "power-law" distribution
  125|  5.18k|            let len = u64::arbitrary(u)?;
  126|  5.18k|            let shift = u.int_in_range(0..=63)?;
  127|  5.18k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  128|  5.18k|
  129|  5.18k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  130|  5.18k|            if ovf {
  131|     19|                break;
  132|  5.16k|            }
  133|  5.16k|            total_len = new_total_len;
  134|  5.16k|            let start = index;
  135|  5.16k|            index += len;
  136|  5.16k|            let end = index;
  137|  5.16k|
  138|  5.16k|            if next_value {
  139|  2.60k|                ranges.push(start..end);
  140|  2.60k|            }
  141|       |
  142|  5.16k|            next_value = !next_value;
  143|       |        }
  144|       |
  145|    726|        Ok(Self {
  146|    726|            ranges,
  147|    726|            ..Default::default()
  148|    726|        })
  149|    726|    }

_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  13.1k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  13.1k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  13.1k|        let res = self.peek(num_bits);
   86|  13.1k|        self.drop(num_bits);
   87|  13.1k|
   88|  13.1k|        res
   89|  13.1k|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  153|  4.36k|    pub fn has_more(&self) -> bool {
  154|  4.36k|        self.bits != 0 || !self.bytes.is_empty()
  155|  4.36k|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  17.1k|    pub fn drop(&mut self, num_bits: u32) {
   62|  17.1k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  17.1k|        self.bits >>= num_bits;
   66|  17.1k|        self.num_bits -= num_bits;
   67|  17.1k|
   68|  17.1k|        // not sure why this being outside of the if improves the performance
   69|  17.1k|        // bit it does, probably related to keeping caches warm
   70|  17.1k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  17.1k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  17.1k|
   73|  17.1k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  17.1k|        if self.num_bits < 8 {
   75|  13.8k|            self.num_bits += 8;
   76|  13.8k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  13.8k|        }
   78|  17.1k|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  4.36k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  4.36k|        // We're done.
  121|  4.36k|        if !self.has_more() {
  122|    281|            return Ok(None);
  123|  4.08k|        }
  124|  4.08k|
  125|  4.08k|        let peek6 = self.peek(6);
  126|       |
  127|  4.08k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|    774|            self.drop(1);
  130|    774|            1
  131|  3.31k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|    863|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|    863|            self.drop(6);
  135|    863|            if val < 2 {
  136|      0|                return Err(Error::NotMinimal);
  137|    863|            }
  138|    863|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  2.44k|            self.drop(2);
  142|  2.44k|            let val = self.read_varint()?;
  143|  2.44k|            if val < 16 {
  144|      0|                return Err(Error::NotMinimal);
  145|  2.44k|            }
  146|  2.44k|            val
  147|       |        };
  148|       |
  149|  4.08k|        Ok(Some(len))
  150|  4.36k|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    281|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    281|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    281|        // data.
   29|    281|        if bytes.last() == Some(&0) {
   30|      0|            return Err(Error::NotMinimal);
   31|    281|        }
   32|    281|        let mut bits = 0u64;
   33|    843|        for i in 0..2 {
   34|    562|            let byte = bytes.get(i).unwrap_or(&0);
   35|    562|            bits |= (*byte as u64) << (8 * i);
   36|    562|        }
   37|       |
   38|    281|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    281|
   40|    281|        Ok(Self {
   41|    281|            bytes,
   42|    281|            bits,
   43|    281|            num_bits: 16,
   44|    281|        })
   45|    281|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  17.1k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  17.1k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  17.1k|        let mask = (1 << num_bits) - 1;
   56|  17.1k|        (self.bits & mask) as u8
   57|  17.1k|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  2.44k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  2.44k|        let mut len = 0u64;
   95|       |
   96|  12.5k|        for i in 0..VARINT_MAX_BYTES {
   97|  12.5k|            let byte = self.read(8);
   98|  12.5k|
   99|  12.5k|            // strip off the most significant bit and add
  100|  12.5k|            // it to the output
  101|  12.5k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  12.5k|
  103|  12.5k|            // if the most significant bit is a 0, we've
  104|  12.5k|            // reached the end of the varint
  105|  12.5k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  2.44k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      0|                    break;
  110|  2.44k|                }
  111|  2.44k|                return Ok(len);
  112|  10.0k|            }
  113|       |        }
  114|       |
  115|      0|        Err(Error::InvalidVarint)
  116|  2.44k|    }

_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  40.5k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  40.5k|        debug_assert!(num_bits <= 8);
   25|  40.5k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  40.5k|        self.bits |= (byte as u16) << self.num_bits;
   28|  40.5k|        self.num_bits += num_bits;
   29|  40.5k|
   30|  40.5k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  40.5k|        if self.num_bits >= 8 {
   32|  31.9k|            self.bytes.push(self.bits as u8);
   33|  31.9k|            self.bits >>= 8;
   34|  31.9k|            self.num_bits -= 8;
   35|  31.9k|        }
   36|  40.5k|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  8.95k|    pub fn write_len(&mut self, len: u64) {
   40|  8.95k|        debug_assert!(len > 0);
   41|       |
   42|  8.95k|        if len == 1 {
   43|  1.58k|            // Block Single (prefix 1)
   44|  1.58k|            self.write(1, 1);
   45|  7.37k|        } else if len < 16 {
   46|  1.81k|            // Block Short (prefix 01)
   47|  1.81k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.81k|            self.write(len as u8, 4);
   49|  1.81k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  5.55k|            self.write(0, 2);
   52|  5.55k|
   53|  5.55k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  29.0k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  29.0k|                self.write(byte, 8);
   56|  29.0k|            }
   57|       |        }
   58|  8.95k|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    359|    pub fn finish(mut self) -> Vec<u8> {
   62|    359|        if self.bits > 0 {
   63|    201|            self.bytes.push(self.bits as u8);
   64|    201|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    359|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    359|        self.bytes
   72|    359|    }
_RNvMNtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   18|    359|    pub fn new() -> Self {
   19|    359|        Default::default()
   20|    359|    }
_RNvXs_NtNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs5peUZ1FGs3M_4core7default7Default7defaultB8_:
    5|    359|#[derive(Default, Clone, Debug)]

_RINvXs4_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   94|    281|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    281|    where
   96|    281|        D: Deserializer<'de>,
   97|    281|    {
   98|    281|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    281|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    281|        }
  105|    281|        Ok(Self::Unvalidated(bytes))
  106|    281|    }
_RINvXNvXNvNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs74DdPnp51dw_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   36|    427|#[derive(Debug, Serialize)]
_RINvXNvNtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs74DdPnp51dw_5serde3ser9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   36|    562|#[derive(Debug, Serialize)]
_RNvXs1_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hint:
   71|    364|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   72|    364|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   73|    364|    }
_RNvXs1_NtCs7Qvv1qYjVZJ_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary:
   62|    363|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   63|    363|        let bf: BitField = u.arbitrary()?;
   64|    363|        Ok(if *u.choose(&[true, false])? {
   65|    208|            Self::Validated(bf)
   66|       |        } else {
   67|    155|            Self::Unvalidated(bf.to_bytes())
   68|       |        })
   69|    363|    }

_RINvXs0_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   76|  4.64k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  4.64k|        where
   78|  4.64k|            D: Deserializer<'de>,
   79|  4.64k|        {
   80|  4.64k|            struct CowVisitor;
   81|  4.64k|
   82|  4.64k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  4.64k|                type Value = Cow<'de, [u8]>;
   84|  4.64k|
   85|  4.64k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  4.64k|                    formatter.write_str("a byte array")
   87|  4.64k|                }
   88|  4.64k|
   89|  4.64k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  4.64k|                where
   91|  4.64k|                    E: Error,
   92|  4.64k|                {
   93|  4.64k|                    Ok(Cow::Borrowed(v))
   94|  4.64k|                }
   95|  4.64k|
   96|  4.64k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  4.64k|                where
   98|  4.64k|                    E: Error,
   99|  4.64k|                {
  100|  4.64k|                    Ok(Cow::Owned(v.to_vec()))
  101|  4.64k|                }
  102|  4.64k|
  103|  4.64k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  4.64k|                where
  105|  4.64k|                    E: Error,
  106|  4.64k|                {
  107|  4.64k|                    Ok(Cow::Owned(v))
  108|  4.64k|                }
  109|  4.64k|            }
  110|  4.64k|            deserializer.deserialize_bytes(CowVisitor)
  111|  4.64k|        }
_RINvNtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsLOZ9MRSILa_5alloc3vec3VechEQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  162|    562|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    562|    where
  164|    562|        T: Deserialize<'de>,
  165|    562|        D: Deserializer<'de>,
  166|    562|    {
  167|    562|        Deserialize::deserialize(deserializer)
  168|    562|    }
_RINvXNtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   35|  8.73k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  8.73k|        where
   37|  8.73k|            S: Serializer,
   38|  8.73k|        {
   39|  8.73k|            serializer.serialize_bytes(self.as_ref())
   40|  8.73k|        }
_RINvNtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCsLOZ9MRSILa_5alloc3vec3VechEQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  154|  1.12k|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|  1.12k|    where
  156|  1.12k|        T: ?Sized + AsRef<[u8]>,
  157|  1.12k|        S: Serializer,
  158|  1.12k|    {
  159|  1.12k|        Serialize::serialize(bytes.as_ref(), serializer)
  160|  1.12k|    }
_RINvNtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCsLOZ9MRSILa_5alloc3vec3VechEQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  154|    562|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    562|    where
  156|    562|        T: ?Sized + AsRef<[u8]>,
  157|    562|        S: Serializer,
  158|    562|    {
  159|    562|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    562|    }
_RINvXs_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   44|    562|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    562|        where
   46|    562|            D: Deserializer<'de>,
   47|    562|        {
   48|    562|            struct VecVisitor;
   49|    562|
   50|    562|            impl<'de> Visitor<'de> for VecVisitor {
   51|    562|                type Value = Vec<u8>;
   52|    562|
   53|    562|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    562|                    formatter.write_str("byte array")
   55|    562|                }
   56|    562|
   57|    562|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    562|                where
   59|    562|                    E: Error,
   60|    562|                {
   61|    562|                    Ok(v.into())
   62|    562|                }
   63|    562|
   64|    562|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    562|                where
   66|    562|                    E: Error,
   67|    562|                {
   68|    562|                    Ok(v)
   69|    562|                }
   70|    562|            }
   71|    562|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    562|        }
_RINvXNvXs_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs74DdPnp51dw_5serde2de7Visitor11visit_bytesINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs5peUZ1FGs3M_4core7convert10InfallibleEECsdi6Y70DSZSO_11cbor_encode:
   57|    562|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    562|                where
   59|    562|                    E: Error,
   60|    562|                {
   61|    562|                    Ok(v.into())
   62|    562|                }
_RINvXNvXs0_NtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsLOZ9MRSILa_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs74DdPnp51dw_5serde2de7Visitor20visit_borrowed_bytesINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs5peUZ1FGs3M_4core7convert10InfallibleEECsdi6Y70DSZSO_11cbor_encode:
   89|  4.64k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  4.64k|                where
   91|  4.64k|                    E: Error,
   92|  4.64k|                {
   93|  4.64k|                    Ok(Cow::Borrowed(v))
   94|  4.64k|                }
_RINvXNtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   35|  1.68k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  1.68k|        where
   37|  1.68k|            S: Serializer,
   38|  1.68k|        {
   39|  1.68k|            serializer.serialize_bytes(self.as_ref())
   40|  1.68k|        }
_RINvNtNtCs6TH0qsApAj1_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsLOZ9MRSILa_5alloc6borrow3CowShEQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  162|    281|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    281|    where
  164|    281|        T: Deserialize<'de>,
  165|    281|        D: Deserializer<'de>,
  166|    281|    {
  167|    281|        Deserialize::deserialize(deserializer)
  168|    281|    }

_RINvCs6TH0qsApAj1_17fvm_ipld_encoding6to_vecNtNtCsgGJeqQcKBJt_11common_fuzz4cbor7PayloadECsdi6Y70DSZSO_11cbor_encode:
   44|    562|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    562|where
   46|    562|    T: ser::Serialize + ?Sized,
   47|    562|{
   48|    562|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    562|}
_RINvCs6TH0qsApAj1_17fvm_ipld_encoding10from_sliceNtNtCsgGJeqQcKBJt_11common_fuzz4cbor7PayloadECsdi6Y70DSZSO_11cbor_encode:
   61|    281|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    281|where
   63|    281|    T: de::Deserialize<'a>,
   64|    281|{
   65|    281|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    281|}

_RNCNvXNvNtCsgx2bukOdW1A_10fvm_shared7address1__NtB6_7AddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hint0Csdi6Y70DSZSO_11cbor_encode:
   72|    364|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXNvNtCsgx2bukOdW1A_10fvm_shared7address1__NtB4_7AddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
   72|    364|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs3_NtCsgx2bukOdW1A_10fvm_shared7addressNtB6_7AddressNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
  358|  4.36k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  359|  4.36k|    where
  360|  4.36k|        D: Deserializer<'de>,
  361|  4.36k|    {
  362|  4.36k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  363|       |
  364|       |        // Create and return created address of unmarshalled bytes
  365|  4.36k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  366|  4.36k|    }
_RINvXs2_NtCsgx2bukOdW1A_10fvm_shared7addressNtB6_7AddressNtNtCs74DdPnp51dw_5serde3ser9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
  348|  8.73k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  349|  8.73k|    where
  350|  8.73k|        S: Serializer,
  351|  8.73k|    {
  352|  8.73k|        let address_bytes = self.to_bytes();
  353|  8.73k|        strict_bytes::Serialize::serialize(&address_bytes, s)
  354|  8.73k|    }
_RNvXNvNtCsgx2bukOdW1A_10fvm_shared7address1__NtB4_7AddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary:
   72|  14.9k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtCsgx2bukOdW1A_10fvm_shared7address1__NtB6_7AddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrarys0_0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCsgx2bukOdW1A_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|  8.73k|    pub fn to_bytes(self) -> Vec<u8> {
  169|  8.73k|        self.payload.to_bytes()
  170|  8.73k|    }
_RNCNvXNvNtCsgx2bukOdW1A_10fvm_shared7address1__NtB6_7AddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrarys_0B8_:
   72|  4.99k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNvNtCsgx2bukOdW1A_10fvm_shared7address1__23RECURSIVE_COUNT_Address7___getit0B9_:
   72|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCsgx2bukOdW1A_10fvm_shared7addressNtB2_7Address3new:
   79|  4.36k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  4.36k|        Ok(Self {
   81|  4.36k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  4.36k|    }
_RNvMNtCsgx2bukOdW1A_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  4.36k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  4.36k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  4.36k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  4.36k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  4.36k|    }
_RNvNtCsgx2bukOdW1A_10fvm_shared7address12to_leb_bytes:
  369|  7.06k|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  370|  7.06k|    // write id to buffer in leb128 format
  371|  7.06k|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  372|  7.06k|}
_RNvNtCsgx2bukOdW1A_10fvm_shared7address14from_leb_bytes:
  374|  2.37k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  375|       |    // write id to buffer in leb128 format
  376|  2.37k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  377|  2.37k|    if !remaining.is_empty() {
  378|      0|        return Err(Error::InvalidPayload);
  379|  2.37k|    }
  380|  2.37k|    Ok(id)
  381|  2.37k|}
_RNCNvXNvNtCsgx2bukOdW1A_10fvm_shared7address1__NtB6_7AddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__NtB4_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
   86|    364|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__NtB6_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hint0Csdi6Y70DSZSO_11cbor_encode:
   86|    364|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|  1.15k|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|  1.15k|        let length = subaddress.len();
   59|  1.15k|        if length > MAX_SUBADDRESS_LEN {
   60|      0|            return Err(Error::InvalidPayloadLength(length));
   61|  1.15k|        }
   62|  1.15k|        let mut addr = DelegatedAddress {
   63|  1.15k|            namespace,
   64|  1.15k|            length,
   65|  1.15k|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|  1.15k|        };
   67|  1.15k|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|  1.15k|        Ok(addr)
   69|  1.15k|    }
_RNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__NtB4_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary:
   86|  14.9k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__NtB6_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrarys_0Ba_:
   86|  4.99k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__23RECURSIVE_COUNT_Payload7___getit0Bb_:
   86|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|  2.31k|    pub fn subaddress(&self) -> &[u8] {
   80|  2.31k|        &self.buffer[..self.length]
   81|  2.31k|    }
_RNvMs2_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|  8.73k|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|  8.73k|        use Payload::*;
  117|  8.73k|        match self {
  118|  4.74k|            ID(i) => to_leb_bytes(i),
  119|    764|            Secp256k1(arr) => arr.to_vec(),
  120|    622|            Actor(arr) => arr.to_vec(),
  121|    286|            BLS(arr) => arr.to_vec(),
  122|  2.31k|            Delegated(addr) => {
  123|  2.31k|                let mut buf = to_leb_bytes(addr.namespace());
  124|  2.31k|                buf.extend(addr.subaddress());
  125|  2.31k|                buf
  126|       |            }
  127|       |        }
  128|  8.73k|    }
_RNvMs2_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  4.36k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  4.36k|        let payload = match protocol {
  140|  2.37k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    382|                payload
  143|    382|                    .try_into()
  144|    382|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    311|                payload
  148|    311|                    .try_into()
  149|    311|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    143|                payload
  153|    143|                    .try_into()
  154|    143|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|  1.15k|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|  1.15k|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  4.36k|        Ok(payload)
  162|  4.36k|    }
_RNvXs3_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCs5peUZ1FGs3M_4core7convert4FromNtB5_7PayloadE4from:
  166|  8.73k|    fn from(pl: Payload) -> Self {
  167|  8.73k|        match pl {
  168|  4.74k|            Payload::ID(_) => Self::ID,
  169|    764|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    622|            Payload::Actor(_) => Self::Actor,
  171|    286|            Payload::BLS(_) => Self::BLS,
  172|  2.31k|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|  8.73k|    }
_RNCNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__NtB6_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrarys0_0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtB4_16DelegatedAddressNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary:
   40|  1.41k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   41|  1.41k|        let length = u.int_in_range(0usize..=MAX_SUBADDRESS_LEN)?;
   42|  1.41k|        let mut buffer = [0u8; MAX_SUBADDRESS_LEN];
   43|  14.4k|        for b in buffer.iter_mut().take(length) {
   44|  14.4k|            *b = arbitrary::Arbitrary::arbitrary(u)?;
   45|       |        }
   46|  1.41k|        let addr = DelegatedAddress {
   47|  1.41k|            namespace: arbitrary::Arbitrary::arbitrary(u)?,
   48|  1.41k|            length,
   49|  1.41k|            buffer,
   50|  1.41k|        };
   51|  1.41k|        Ok(addr)
   52|  1.41k|    }
_RNvMs0_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|  2.31k|    pub fn namespace(&self) -> ActorID {
   74|  2.31k|        self.namespace
   75|  2.31k|    }
_RNvMs2_NtNtCsgx2bukOdW1A_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|  8.73k|    pub fn to_bytes(self) -> Vec<u8> {
  132|  8.73k|        let mut bz = self.to_raw_bytes();
  133|  8.73k|        bz.insert(0, Protocol::from(self) as u8);
  134|  8.73k|        bz
  135|  8.73k|    }
_RNCNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address7payload1__NtB6_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9arbitrary0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsbxtIA3kmdXc_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  4.36k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCsgx2bukOdW1A_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsbxtIA3kmdXc_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  4.36k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCsgx2bukOdW1A_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  4.36k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  4.36k|        FromPrimitive::from_u8(b)
   31|  4.36k|    }

_RINvXNvXNvNvXs_NtCsgGJeqQcKBJt_11common_fuzz4cborNtBd_7PayloadNtNtCs74DdPnp51dw_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   12|    562|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXNvNtCsgGJeqQcKBJt_11common_fuzz4cbor1__NtB4_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hintCsdi6Y70DSZSO_11cbor_encode:
   12|    364|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtBe_7PayloadNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   12|    281|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtBd_7PayloadNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEE0Csdi6Y70DSZSO_11cbor_encode:
   12|    281|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB8_7PayloadNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCsiRcJHWzx2VV_11serde_tuple12DeserializerQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEEECsdi6Y70DSZSO_11cbor_encode:
   12|    281|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtB3_7PayloadNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   12|    281|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCsgGJeqQcKBJt_11common_fuzz4cbor1__NtB6_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary9size_hint0Csdi6Y70DSZSO_11cbor_encode:
   12|    364|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsgGJeqQcKBJt_11common_fuzz4cborNtBa_7PayloadNtNtCs74DdPnp51dw_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCsiRcJHWzx2VV_11serde_tuple10SerializerQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEEECsdi6Y70DSZSO_11cbor_encode:
   12|    562|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCsgGJeqQcKBJt_11common_fuzz4cborNtB5_7PayloadNtNtCs74DdPnp51dw_5serde3ser9Serialize9serializeQINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils9BufWriterEECsdi6Y70DSZSO_11cbor_encode:
   12|    562|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCsgGJeqQcKBJt_11common_fuzz4cborNtBb_7PayloadNtNtCs74DdPnp51dw_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCse5XA9lHZvLu_18serde_ipld_dagcbor2de8AccessorNtNtNtCsexTSLewUc5T_7cbor4ii4core5utils11SliceReaderEECsdi6Y70DSZSO_11cbor_encode:
   12|    281|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCsgGJeqQcKBJt_11common_fuzz4cbor1__NtB6_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
   12|    363|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXNvNtCsgGJeqQcKBJt_11common_fuzz4cbor1__NtB4_7PayloadNtCs5xBZ95cPZHo_9arbitrary9Arbitrary19arbitrary_take_rest:
   12|  1.08k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

