_RINvCsjtZfaKP97h6_9arbitrary12create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9size_hint0TjINtNtCs8nQMPxM1bM1_4core6option6OptionjEEKBR_ECsjoEqaI55l2F_11cbor_encode:
  606|    387|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  607|    387|where
  608|    387|    F: FnMut(usize) -> T,
  609|    387|{
  610|    387|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  611|    387|    let array_ptr = array.as_mut_ptr();
  612|    387|    let dst = array_ptr as _;
  613|    387|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  614|    387|        dst,
  615|    387|        initialized: 0,
  616|    387|    };
  617|       |    unsafe {
  618|  18.5k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  619|  18.5k|            core::ptr::write(value_ptr, cb(idx));
  620|  18.5k|            guard.initialized += 1;
  621|  18.5k|        }
  622|    387|        mem::forget(guard);
  623|    387|        array.assume_init()
  624|    387|    }
  625|    387|}
_RINvCsjtZfaKP97h6_9arbitrary12create_arrayNCNvXs8_B2_Ahj2_NtB2_9Arbitrary9size_hint0TjINtNtCs8nQMPxM1bM1_4core6option6OptionjEEKBR_ECsjoEqaI55l2F_11cbor_encode:
  606|    387|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  607|    387|where
  608|    387|    F: FnMut(usize) -> T,
  609|    387|{
  610|    387|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  611|    387|    let array_ptr = array.as_mut_ptr();
  612|    387|    let dst = array_ptr as _;
  613|    387|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  614|    387|        dst,
  615|    387|        initialized: 0,
  616|    387|    };
  617|       |    unsafe {
  618|    774|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  619|    774|            core::ptr::write(value_ptr, cb(idx));
  620|    774|            guard.initialized += 1;
  621|    774|        }
  622|    387|        mem::forget(guard);
  623|    387|        array.assume_init()
  624|    387|    }
  625|    387|}
_RINvCsjtZfaKP97h6_9arbitrary12create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9size_hint0TjINtNtCs8nQMPxM1bM1_4core6option6OptionjEEKBR_ECsjoEqaI55l2F_11cbor_encode:
  606|    774|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  607|    774|where
  608|    774|    F: FnMut(usize) -> T,
  609|    774|{
  610|    774|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  611|    774|    let array_ptr = array.as_mut_ptr();
  612|    774|    let dst = array_ptr as _;
  613|    774|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  614|    774|        dst,
  615|    774|        initialized: 0,
  616|    774|    };
  617|       |    unsafe {
  618|  15.4k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  619|  15.4k|            core::ptr::write(value_ptr, cb(idx));
  620|  15.4k|            guard.initialized += 1;
  621|  15.4k|        }
  622|    774|        mem::forget(guard);
  623|    774|        array.assume_init()
  624|    774|    }
  625|    774|}
_RNCNvXs8_CsjtZfaKP97h6_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
  668|  1.16k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|  1.16k|            <T as Arbitrary>::size_hint(d)
  670|  1.16k|        }))
_RNCNvXs8_CsjtZfaKP97h6_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
  668|  15.4k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|  15.4k|            <T as Arbitrary>::size_hint(d)
  670|  15.4k|        }))
_RNvXsa_CsjtZfaKP97h6_9arbitraryINtNtCs3KUlNeP7sSg_5alloc3vec3VechENtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  700|    387|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  701|    387|        (0, None)
  702|    387|    }
_RNCNvXs8_CsjtZfaKP97h6_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
  668|    774|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|    774|            <T as Arbitrary>::size_hint(d)
  670|    774|        }))
_RNvXsC_CsjtZfaKP97h6_9arbitraryhNtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  312|  36.3k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|  36.3k|                    let n = mem::size_of::<$ty>();
  314|  36.3k|                    (n, Some(n))
  315|  36.3k|                }
_RNvXsE_CsjtZfaKP97h6_9arbitrarymNtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  312|    774|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    774|                    let n = mem::size_of::<$ty>();
  314|    774|                    (n, Some(n))
  315|    774|                }
_RNvXs8_CsjtZfaKP97h6_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  667|    387|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  668|    387|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|       |            <T as Arbitrary>::size_hint(d)
  670|    387|        }))
  671|    387|    }
_RNvXs8_CsjtZfaKP97h6_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  667|    387|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  668|    387|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|       |            <T as Arbitrary>::size_hint(d)
  670|    387|        }))
  671|    387|    }
_RNvXs8_CsjtZfaKP97h6_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  667|    387|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  668|    387|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|       |            <T as Arbitrary>::size_hint(d)
  670|    387|        }))
  671|    387|    }
_RNCNvXs8_CsjtZfaKP97h6_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
  668|  18.5k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|  18.5k|            <T as Arbitrary>::size_hint(d)
  670|  18.5k|        }))
_RNvXsa_CsjtZfaKP97h6_9arbitraryINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  700|    387|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  701|    387|        (0, None)
  702|    387|    }
_RNvXsF_CsjtZfaKP97h6_9arbitraryyNtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  312|    774|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    774|                    let n = mem::size_of::<$ty>();
  314|    774|                    (n, Some(n))
  315|    774|                }
_RINvCsjtZfaKP97h6_9arbitrary12create_arrayNCNvXs8_B2_Ahj3_NtB2_9Arbitrary9size_hint0TjINtNtCs8nQMPxM1bM1_4core6option6OptionjEEKBR_ECsjoEqaI55l2F_11cbor_encode:
  606|    387|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  607|    387|where
  608|    387|    F: FnMut(usize) -> T,
  609|    387|{
  610|    387|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  611|    387|    let array_ptr = array.as_mut_ptr();
  612|    387|    let dst = array_ptr as _;
  613|    387|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  614|    387|        dst,
  615|    387|        initialized: 0,
  616|    387|    };
  617|       |    unsafe {
  618|  1.16k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  619|  1.16k|            core::ptr::write(value_ptr, cb(idx));
  620|  1.16k|            guard.initialized += 1;
  621|  1.16k|        }
  622|    387|        mem::forget(guard);
  623|    387|        array.assume_init()
  624|    387|    }
  625|    387|}
_RNvXs8_CsjtZfaKP97h6_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
  667|    774|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  668|    774|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  669|       |            <T as Arbitrary>::size_hint(d)
  670|    774|        }))
  671|    774|    }
_RNvXsa_CsjtZfaKP97h6_9arbitraryINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCsgc4whDaiAIc_11common_fuzz:
  692|    386|        u.arbitrary_iter()?.collect()
  693|    386|    }
_RNvXsa_CsjtZfaKP97h6_9arbitraryINtNtCs3KUlNeP7sSg_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCsgc4whDaiAIc_11common_fuzz:
  692|    386|        u.arbitrary_iter()?.collect()
  693|    386|    }
_RNvYINtNtCs30zCv4Bdlrf_3cid3cid3CidKj40_ENtCsjtZfaKP97h6_9arbitrary9Arbitrary19arbitrary_take_restCsgc4whDaiAIc_11common_fuzz:
  182|    337|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    337|        Self::arbitrary(&mut u)
  184|    337|    }
_RNvXs8_CsjtZfaKP97h6_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCsakP7W5fNNoL_10fvm_shared:
  653|    413|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  654|    413|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  655|    413|    }
_RNvXs8_CsjtZfaKP97h6_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCsakP7W5fNNoL_10fvm_shared:
  653|    860|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  654|    860|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  655|    860|    }
_RINvCsjtZfaKP97h6_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECsakP7W5fNNoL_10fvm_shared:
  627|    413|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  628|    413|where
  629|    413|    F: FnMut(usize) -> Result<T>,
  630|    413|{
  631|    413|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  632|    413|    let array_ptr = array.as_mut_ptr();
  633|    413|    let dst = array_ptr as _;
  634|    413|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  635|    413|        dst,
  636|    413|        initialized: 0,
  637|    413|    };
  638|       |    unsafe {
  639|  19.8k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  640|  19.8k|            core::ptr::write(value_ptr, cb(idx)?);
  641|  19.8k|            guard.initialized += 1;
  642|       |        }
  643|    413|        mem::forget(guard);
  644|    413|        Ok(array.assume_init())
  645|       |    }
  646|    413|}
_RNCNvXs8_CsjtZfaKP97h6_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0CsakP7W5fNNoL_10fvm_shared:
  654|  17.2k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RINvCsjtZfaKP97h6_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECsakP7W5fNNoL_10fvm_shared:
  627|    860|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  628|    860|where
  629|    860|    F: FnMut(usize) -> Result<T>,
  630|    860|{
  631|    860|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  632|    860|    let array_ptr = array.as_mut_ptr();
  633|    860|    let dst = array_ptr as _;
  634|    860|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  635|    860|        dst,
  636|    860|        initialized: 0,
  637|    860|    };
  638|       |    unsafe {
  639|  17.2k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  640|  17.2k|            core::ptr::write(value_ptr, cb(idx)?);
  641|  17.2k|            guard.initialized += 1;
  642|       |        }
  643|    860|        mem::forget(guard);
  644|    860|        Ok(array.assume_init())
  645|       |    }
  646|    860|}
_RNCNvXs8_CsjtZfaKP97h6_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0CsakP7W5fNNoL_10fvm_shared:
  654|  19.8k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXsF_CsjtZfaKP97h6_9arbitraryyNtB5_9Arbitrary9size_hintCsj3FDuS9qebQ_17fvm_ipld_bitfield:
  312|    772|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    772|                    let n = mem::size_of::<$ty>();
  314|    772|                    (n, Some(n))
  315|    772|                }
_RNvXsC_CsjtZfaKP97h6_9arbitraryhNtB5_9Arbitrary9size_hintCsj3FDuS9qebQ_17fvm_ipld_bitfield:
  312|    772|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    772|                    let n = mem::size_of::<$ty>();
  314|    772|                    (n, Some(n))
  315|    772|                }
_RNvXs1j_CsjtZfaKP97h6_9arbitraryTyhENtB6_9Arbitrary9size_hintCsj3FDuS9qebQ_17fvm_ipld_bitfield:
  578|    772|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  579|    772|                crate::size_hint::and_all(&[
  580|    772|                    <$last as Arbitrary>::size_hint(depth),
  581|    772|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  582|    772|                ])
  583|    772|            }
_RNvXsH_CsjtZfaKP97h6_9arbitraryjNtB5_9Arbitrary9size_hintCsj3FDuS9qebQ_17fvm_ipld_bitfield:
  312|    774|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  313|    774|                    let n = mem::size_of::<$ty>();
  314|    774|                    (n, Some(n))
  315|    774|                }
_RNvXsE_CsjtZfaKP97h6_9arbitrarymNtB5_9Arbitrary9arbitrary:
  301|  6.99k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  302|  6.99k|                    let mut buf = [0; mem::size_of::<$ty>()];
  303|  6.99k|                    u.fill_buffer(&mut buf)?;
  304|  6.99k|                    let mut x: $unsigned = 0;
  305|  27.9k|                    for i in 0..mem::size_of::<$ty>() {
  306|  27.9k|                        x |= buf[i] as $unsigned << (i * 8);
  307|  27.9k|                    }
  308|  6.99k|                    Ok(x as $ty)
  309|  6.99k|                }
_RNvXsC_CsjtZfaKP97h6_9arbitraryhNtB5_9Arbitrary9arbitrary:
  301|  49.9k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  302|  49.9k|                    let mut buf = [0; mem::size_of::<$ty>()];
  303|  49.9k|                    u.fill_buffer(&mut buf)?;
  304|  49.9k|                    let mut x: $unsigned = 0;
  305|  49.9k|                    for i in 0..mem::size_of::<$ty>() {
  306|  49.9k|                        x |= buf[i] as $unsigned << (i * 8);
  307|  49.9k|                    }
  308|  49.9k|                    Ok(x as $ty)
  309|  49.9k|                }
_RNvXsF_CsjtZfaKP97h6_9arbitraryyNtB5_9Arbitrary9arbitrary:
  301|  10.1k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  302|  10.1k|                    let mut buf = [0; mem::size_of::<$ty>()];
  303|  10.1k|                    u.fill_buffer(&mut buf)?;
  304|  10.1k|                    let mut x: $unsigned = 0;
  305|  80.9k|                    for i in 0..mem::size_of::<$ty>() {
  306|  80.9k|                        x |= buf[i] as $unsigned << (i * 8);
  307|  80.9k|                    }
  308|  10.1k|                    Ok(x as $ty)
  309|  10.1k|                }
_RNvXs_CsjtZfaKP97h6_9arbitrarybNtB4_9Arbitrary9arbitrary:
  287|  7.96k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  288|  7.96k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  289|  7.96k|    }

_RNvNtCsjtZfaKP97h6_9arbitrary9size_hint2orCsjoEqaI55l2F_11cbor_encode:
   44|  1.93k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.93k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.93k|    let upper = lhs
   47|  1.93k|        .1
   48|  1.93k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.93k|    (lower, upper)
   50|  1.93k|}
_RINvNtCsjtZfaKP97h6_9arbitrary9size_hint15recursion_guardNCNvXs8_NtNtCsakP7W5fNNoL_10fvm_shared7address7networkNtB11_7NetworkNtB4_9Arbitrary9size_hint0ECsjoEqaI55l2F_11cbor_encode:
   12|    387|pub fn recursion_guard(
   13|    387|    depth: usize,
   14|    387|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    387|) -> (usize, Option<usize>) {
   16|    387|    const MAX_DEPTH: usize = 20;
   17|    387|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    387|        f(depth + 1)
   21|       |    }
   22|    387|}
_RINvNtCsjtZfaKP97h6_9arbitrary9size_hint15recursion_guardNCNvXs0_NtCsgc4whDaiAIc_11common_fuzz4cborNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECsjoEqaI55l2F_11cbor_encode:
   12|    387|pub fn recursion_guard(
   13|    387|    depth: usize,
   14|    387|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    387|) -> (usize, Option<usize>) {
   16|    387|    const MAX_DEPTH: usize = 20;
   17|    387|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    387|        f(depth + 1)
   21|       |    }
   22|    387|}
_RNvNtCsjtZfaKP97h6_9arbitrary9size_hint7and_allCsjoEqaI55l2F_11cbor_encode:
   37|  5.41k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.41k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.41k|}
_RNCNCNvNtCsjtZfaKP97h6_9arbitrary9size_hint3and00CsjoEqaI55l2F_11cbor_encode:
   28|  41.0k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCsjtZfaKP97h6_9arbitrary9size_hint2or00CsjoEqaI55l2F_11cbor_encode:
   48|  1.93k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCsjtZfaKP97h6_9arbitrary9size_hint2or0CsjoEqaI55l2F_11cbor_encode:
   48|  1.93k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCsjtZfaKP97h6_9arbitrary9size_hint3andCsjoEqaI55l2F_11cbor_encode:
   26|  43.7k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  43.7k|    let lower = lhs.0 + rhs.0;
   28|  43.7k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  43.7k|    (lower, upper)
   30|  43.7k|}
_RNvNtCsjtZfaKP97h6_9arbitrary9size_hint6or_allCsjoEqaI55l2F_11cbor_encode:
   58|    774|    if let Some(head) = hints.first().copied() {
   59|    774|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    774|}
_RNCNvNtCsjtZfaKP97h6_9arbitrary9size_hint3and0CsjoEqaI55l2F_11cbor_encode:
   28|  41.4k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCsjtZfaKP97h6_9arbitrary9size_hint15recursion_guardNCNvXse_NtCsakP7W5fNNoL_10fvm_shared7addressNtB11_7AddressNtB4_9Arbitrary9size_hint0ECsjoEqaI55l2F_11cbor_encode:
   12|    387|pub fn recursion_guard(
   13|    387|    depth: usize,
   14|    387|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    387|) -> (usize, Option<usize>) {
   16|    387|    const MAX_DEPTH: usize = 20;
   17|    387|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    387|        f(depth + 1)
   21|       |    }
   22|    387|}
_RINvNtCsjtZfaKP97h6_9arbitrary9size_hint15recursion_guardNCNvXs9_NtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECsjoEqaI55l2F_11cbor_encode:
   12|    387|pub fn recursion_guard(
   13|    387|    depth: usize,
   14|    387|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    387|) -> (usize, Option<usize>) {
   16|    387|    const MAX_DEPTH: usize = 20;
   17|    387|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    387|        f(depth + 1)
   21|       |    }
   22|    387|}
_RNvNtCsjtZfaKP97h6_9arbitrary9size_hint7and_allCsj3FDuS9qebQ_17fvm_ipld_bitfield:
   37|    772|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    772|    hints.iter().copied().fold((0, Some(0)), and)
   39|    772|}
_RNCNvNtCsjtZfaKP97h6_9arbitrary9size_hint3and0Csj3FDuS9qebQ_17fvm_ipld_bitfield:
   28|  2.31k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCsjtZfaKP97h6_9arbitrary9size_hint3and00Csj3FDuS9qebQ_17fvm_ipld_bitfield:
   28|  1.54k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsjtZfaKP97h6_9arbitrary9size_hint3andCsj3FDuS9qebQ_17fvm_ipld_bitfield:
   26|  2.70k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.70k|    let lower = lhs.0 + rhs.0;
   28|  2.70k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.70k|    (lower, upper)
   30|  2.70k|}

_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsgc4whDaiAIc_11common_fuzz:
  293|    308|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    308|    where
  295|    308|        T: Int,
  296|    308|    {
  297|    308|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    285|        self.data = &self.data[bytes_consumed..];
  299|    285|        Ok(result)
  300|    308|    }
_RNvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB2_12Unstructured3lenCsgc4whDaiAIc_11common_fuzz:
  108|    383|    pub fn len(&self) -> usize {
  109|    383|        self.data.len()
  110|    383|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECsgc4whDaiAIc_11common_fuzz:
  167|  1.63k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.63k|    where
  169|  1.63k|        A: Arbitrary<'a>,
  170|  1.63k|    {
  171|  1.63k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.63k|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECsgc4whDaiAIc_11common_fuzz:
  454|    337|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  455|    337|    where
  456|    337|        T: Int,
  457|    337|    {
  458|    337|        assert!(T::ZERO < numerator);
  459|    337|        assert!(numerator <= denominator);
  460|    337|        let x = self.int_in_range(T::ONE..=denominator)?;
  461|    326|        Ok(x <= numerator)
  462|    337|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgc4whDaiAIc_11common_fuzz:
  302|    308|    fn int_in_range_impl<T>(
  303|    308|        range: ops::RangeInclusive<T>,
  304|    308|        mut bytes: impl Iterator<Item = u8>,
  305|    308|    ) -> Result<(T, usize)>
  306|    308|    where
  307|    308|        T: Int,
  308|    308|    {
  309|    308|        let start = range.start();
  310|    308|        let end = range.end();
  311|    308|        assert!(
  312|    308|            start <= end,
  313|    308|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    308|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    308|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|    308|        }
  321|    308|
  322|    308|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|    308|        let mut result = T::Widest::ZERO;
  324|    308|        let mut offset: usize = 0;
  325|       |
  326|    593|        while offset < mem::size_of::<T>()
  327|    593|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|    285|        {
  329|    308|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|    285|            result = (result << 8) | T::Widest::from_u8(byte);
  331|    285|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|    285|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|    285|            result = result % range;
  337|    285|        }
  338|       |
  339|    285|        Ok((
  340|    285|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|    285|            offset,
  342|    285|        ))
  343|    308|    }
_RNvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsgc4whDaiAIc_11common_fuzz:
  132|    383|    pub fn is_empty(&self) -> bool {
  133|    383|        self.len() == 0
  134|    383|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressECsgc4whDaiAIc_11common_fuzz:
  577|    386|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  578|    386|        &'b mut self,
  579|    386|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  580|    386|        Ok(ArbitraryIter {
  581|    386|            u: &mut *self,
  582|    386|            _marker: PhantomData,
  583|    386|        })
  584|    386|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsgc4whDaiAIc_11common_fuzz:
  293|    337|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    337|    where
  295|    337|        T: Int,
  296|    337|    {
  297|    337|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    326|        self.data = &self.data[bytes_consumed..];
  299|    326|        Ok(result)
  300|    337|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsgc4whDaiAIc_11common_fuzz:
  167|  7.19k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  7.19k|    where
  169|  7.19k|        A: Arbitrary<'a>,
  170|  7.19k|    {
  171|  7.19k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  7.19k|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECsgc4whDaiAIc_11common_fuzz:
  577|    386|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  578|    386|        &'b mut self,
  579|    386|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  580|    386|        Ok(ArbitraryIter {
  581|    386|            u: &mut *self,
  582|    386|            _marker: PhantomData,
  583|    386|        })
  584|    386|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsgc4whDaiAIc_11common_fuzz:
  302|    337|    fn int_in_range_impl<T>(
  303|    337|        range: ops::RangeInclusive<T>,
  304|    337|        mut bytes: impl Iterator<Item = u8>,
  305|    337|    ) -> Result<(T, usize)>
  306|    337|    where
  307|    337|        T: Int,
  308|    337|    {
  309|    337|        let start = range.start();
  310|    337|        let end = range.end();
  311|    337|        assert!(
  312|    337|            start <= end,
  313|    337|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    337|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    337|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|    337|        }
  321|    337|
  322|    337|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|    337|        let mut result = T::Widest::ZERO;
  324|    337|        let mut offset: usize = 0;
  325|       |
  326|    663|        while offset < mem::size_of::<T>()
  327|    663|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|    326|        {
  329|    337|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|    326|            result = (result << 8) | T::Widest::from_u8(byte);
  331|    326|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|    326|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|    326|            result = result % range;
  337|    326|        }
  338|       |
  339|    326|        Ok((
  340|    326|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|    326|            offset,
  342|    326|        ))
  343|    337|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCscDoRKiGEEIL_9multihash9multihash9MultihashKj40_EECsgc4whDaiAIc_11common_fuzz:
  167|    308|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    308|    where
  169|    308|        A: Arbitrary<'a>,
  170|    308|    {
  171|    308|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    308|    }
_RNvXs_NtCsjtZfaKP97h6_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtNtNtNtCs8nQMPxM1bM1_4core4iter6traits8iterator8Iterator4nextCsgc4whDaiAIc_11common_fuzz:
  709|  3.49k|    fn next(&mut self) -> Option<Result<ElementType>> {
  710|  3.49k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  711|  3.49k|        if keep_going {
  712|  3.11k|            Some(Arbitrary::arbitrary(self.u))
  713|       |        } else {
  714|    386|            None
  715|       |        }
  716|  3.49k|    }
_RNvXs_NtCsjtZfaKP97h6_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCs8nQMPxM1bM1_4core4iter6traits8iterator8Iterator4nextCsgc4whDaiAIc_11common_fuzz:
  709|  3.69k|    fn next(&mut self) -> Option<Result<ElementType>> {
  710|  3.69k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  711|  3.69k|        if keep_going {
  712|  3.31k|            Some(Arbitrary::arbitrary(self.u))
  713|       |        } else {
  714|    386|            None
  715|       |        }
  716|  3.69k|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsj3FDuS9qebQ_17fvm_ipld_bitfield:
  293|  7.50k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  7.50k|    where
  295|  7.50k|        T: Int,
  296|  7.50k|    {
  297|  7.50k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  7.50k|        self.data = &self.data[bytes_consumed..];
  299|  7.50k|        Ok(result)
  300|  7.50k|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsj3FDuS9qebQ_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    386|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    386|    where
  169|    386|        A: Arbitrary<'a>,
  170|    386|    {
  171|    386|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    386|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured6choosebECsj3FDuS9qebQ_17fvm_ipld_bitfield:
  379|    386|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  380|    386|        let idx = self.choose_index(choices.len())?;
  381|    337|        Ok(&choices[idx])
  382|    386|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsj3FDuS9qebQ_17fvm_ipld_bitfield:
  302|  7.50k|    fn int_in_range_impl<T>(
  303|  7.50k|        range: ops::RangeInclusive<T>,
  304|  7.50k|        mut bytes: impl Iterator<Item = u8>,
  305|  7.50k|    ) -> Result<(T, usize)>
  306|  7.50k|    where
  307|  7.50k|        T: Int,
  308|  7.50k|    {
  309|  7.50k|        let start = range.start();
  310|  7.50k|        let end = range.end();
  311|  7.50k|        assert!(
  312|  7.50k|            start <= end,
  313|  7.50k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|  7.50k|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  7.50k|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|  7.50k|        }
  321|  7.50k|
  322|  7.50k|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|  7.50k|        let mut result = T::Widest::ZERO;
  324|  7.50k|        let mut offset: usize = 0;
  325|       |
  326|  15.0k|        while offset < mem::size_of::<T>()
  327|  15.0k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|  7.50k|        {
  329|  7.50k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|  7.50k|            result = (result << 8) | T::Widest::from_u8(byte);
  331|  7.50k|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|  7.50k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|  7.50k|            result = result % range;
  337|  7.50k|        }
  338|       |
  339|  7.50k|        Ok((
  340|  7.50k|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|  7.50k|            offset,
  342|  7.50k|        ))
  343|  7.50k|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsj3FDuS9qebQ_17fvm_ipld_bitfield:
  213|    772|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    772|    where
  215|    772|        ElementType: Arbitrary<'a>,
  216|    772|    {
  217|    772|        let byte_size = self.arbitrary_byte_size()?;
  218|    772|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    772|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|    772|        let elem_size = std::cmp::max(1, elem_size);
  221|    772|        Ok(byte_size / elem_size)
  222|    772|    }
_RNvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  519|    303|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  520|    303|        if self.data.len() < size {
  521|     14|            return Err(Error::NotEnoughData);
  522|    289|        }
  523|    289|
  524|    289|        let (for_buf, rest) = self.data.split_at(size);
  525|    289|        self.data = rest;
  526|    289|        Ok(for_buf)
  527|    303|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    386|    fn int_in_range_impl<T>(
  303|    386|        range: ops::RangeInclusive<T>,
  304|    386|        mut bytes: impl Iterator<Item = u8>,
  305|    386|    ) -> Result<(T, usize)>
  306|    386|    where
  307|    386|        T: Int,
  308|    386|    {
  309|    386|        let start = range.start();
  310|    386|        let end = range.end();
  311|    386|        assert!(
  312|    386|            start <= end,
  313|    386|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    386|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    386|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|    386|        }
  321|    386|
  322|    386|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|    386|        let mut result = T::Widest::ZERO;
  324|    386|        let mut offset: usize = 0;
  325|       |
  326|    723|        while offset < mem::size_of::<T>()
  327|    723|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|    337|        {
  329|    386|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|    337|            result = (result << 8) | T::Widest::from_u8(byte);
  331|    337|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|    337|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|    337|            result = result % range;
  337|    337|        }
  338|       |
  339|    337|        Ok((
  340|    337|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|    337|            offset,
  342|    337|        ))
  343|    386|    }
_RNvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  492|  67.0k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  493|  67.0k|        let n = std::cmp::min(buffer.len(), self.data.len());
  494|  67.0k|        buffer[..n].copy_from_slice(&self.data[..n]);
  495|  67.0k|        for byte in buffer[n..].iter_mut() {
  496|  1.12k|            *byte = 0;
  497|  1.12k|        }
  498|  67.0k|        self.data = &self.data[n..];
  499|  67.0k|        Ok(())
  500|  67.0k|    }
_RNvXs2_NtCsjtZfaKP97h6_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  814|     83|                fn from_widest(w: Self::Widest) -> Self {
  815|     83|                    let x = <$ty>::max_value().as_widest();
  816|     83|                    (w % x) as Self
  817|     83|                }
_RNvXs5_NtCsjtZfaKP97h6_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  819|  1.38k|                fn from_u8(b: u8) -> Self {
  820|  1.38k|                    b as Self
  821|  1.38k|                }
_RNvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  421|    386|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  422|    386|        if len == 0 {
  423|      0|            return Err(Error::EmptyChoose);
  424|    386|        }
  425|    386|        let idx = self.int_in_range(0..=len - 1)?;
  426|    337|        Ok(idx)
  427|    386|    }
_RNvXsb_NtCsjtZfaKP97h6_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  831|  7.83k|                fn wrapping_add(self, rhs: Self) -> Self {
  832|  7.83k|                    <$ty>::wrapping_add(self, rhs)
  833|  7.83k|                }
_RNvXs1_NtCsjtZfaKP97h6_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  810|  2.40k|                fn as_widest(self) -> Self::Widest {
  811|  2.40k|                    self as $widest
  812|  2.40k|                }
_RNvXs9_NtCsjtZfaKP97h6_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  810|  31.3k|                fn as_widest(self) -> Self::Widest {
  811|  31.3k|                    self as $widest
  812|  31.3k|                }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|    386|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    386|    where
  295|    386|        T: Int,
  296|    386|    {
  297|    386|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    337|        self.data = &self.data[bytes_consumed..];
  299|    337|        Ok(result)
  300|    386|    }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|     83|    fn int_in_range_impl<T>(
  303|     83|        range: ops::RangeInclusive<T>,
  304|     83|        mut bytes: impl Iterator<Item = u8>,
  305|     83|    ) -> Result<(T, usize)>
  306|     83|    where
  307|     83|        T: Int,
  308|     83|    {
  309|     83|        let start = range.start();
  310|     83|        let end = range.end();
  311|     83|        assert!(
  312|     83|            start <= end,
  313|     83|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|     83|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|     83|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|     83|        }
  321|     83|
  322|     83|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|     83|        let mut result = T::Widest::ZERO;
  324|     83|        let mut offset: usize = 0;
  325|       |
  326|    247|        while offset < mem::size_of::<T>()
  327|    166|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|    164|        {
  329|    164|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|    164|            result = (result << 8) | T::Widest::from_u8(byte);
  331|    164|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|     83|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|     83|            result = result % range;
  337|     83|        }
  338|       |
  339|     83|        Ok((
  340|     83|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|     83|            offset,
  342|     83|        ))
  343|     83|    }
_RNvXsb_NtCsjtZfaKP97h6_9arbitrary12unstructurednNtB5_3Int11checked_add:
  827|  7.83k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  828|  7.83k|                    <$ty>::checked_add(self, rhs)
  829|  7.83k|                }
_RNvXsb_NtCsjtZfaKP97h6_9arbitrary12unstructurednNtB5_3Int10from_usize:
  823|  15.6k|                fn from_usize(u: usize) -> Self {
  824|  15.6k|                    u as Self
  825|  15.6k|                }
_RNvXs6_NtCsjtZfaKP97h6_9arbitrary12unstructuredjNtB5_3Int11from_widest:
  814|    622|                fn from_widest(w: Self::Widest) -> Self {
  815|    622|                    let x = <$ty>::max_value().as_widest();
  816|    622|                    (w % x) as Self
  817|    622|                }
_RINvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    601|    fn int_in_range_impl<T>(
  303|    601|        range: ops::RangeInclusive<T>,
  304|    601|        mut bytes: impl Iterator<Item = u8>,
  305|    601|    ) -> Result<(T, usize)>
  306|    601|    where
  307|    601|        T: Int,
  308|    601|    {
  309|    601|        let start = range.start();
  310|    601|        let end = range.end();
  311|    601|        assert!(
  312|    601|            start <= end,
  313|    601|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|    601|        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    601|        if start == end {
  319|      0|            return Ok((*start, 0));
  320|    601|        }
  321|    601|
  322|    601|        let range: T::Widest = end.as_widest() - start.as_widest();
  323|    601|        let mut result = T::Widest::ZERO;
  324|    601|        let mut offset: usize = 0;
  325|       |
  326|  1.20k|        while offset < mem::size_of::<T>()
  327|    601|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  328|    601|        {
  329|    601|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  330|    601|            result = (result << 8) | T::Widest::from_u8(byte);
  331|    601|            offset += 1;
  332|       |        }
  333|       |
  334|       |        // Avoid division by zero.
  335|    601|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  336|    601|            result = result % range;
  337|    601|        }
  338|       |
  339|    601|        Ok((
  340|    601|            T::from_widest(start.as_widest().wrapping_add(result)),
  341|    601|            offset,
  342|    601|        ))
  343|    601|    }
_RNvXsb_NtCsjtZfaKP97h6_9arbitrary12unstructurednNtB5_3Int7from_u8:
  819|  7.83k|                fn from_u8(b: u8) -> Self {
  820|  7.83k|                    b as Self
  821|  7.83k|                }
_RNvXs5_NtCsjtZfaKP97h6_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  831|  1.30k|                fn wrapping_add(self, rhs: Self) -> Self {
  832|  1.30k|                    <$ty>::wrapping_add(self, rhs)
  833|  1.30k|                }
_RNvXs9_NtCsjtZfaKP97h6_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  814|  7.83k|                fn from_widest(w: Self::Widest) -> Self {
  815|  7.83k|                    let x = <$ty>::max_value().as_widest();
  816|  7.83k|                    (w % x) as Self
  817|  7.83k|                }
_RNvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    772|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    772|        if self.data.is_empty() {
  226|     85|            Ok(0)
  227|    687|        } else if self.data.len() == 1 {
  228|      3|            self.data = &[];
  229|      3|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    684|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    601|                let bytes = 1;
  242|    601|                let max_size = self.data.len() - bytes;
  243|    601|                let (rest, for_size) = self.data.split_at(max_size);
  244|    601|                self.data = rest;
  245|    601|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|     83|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|     83|                let bytes = 2;
  248|     83|                let max_size = self.data.len() - bytes;
  249|     83|                let (rest, for_size) = self.data.split_at(max_size);
  250|     83|                self.data = rest;
  251|     83|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    684|            Ok(len)
  267|       |        }
  268|    772|    }
_RNvMNtCsjtZfaKP97h6_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    386|    pub fn new(data: &'a [u8]) -> Self {
   86|    386|        Unstructured { data }
   87|    386|    }
_RNvXs5_NtCsjtZfaKP97h6_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  823|  2.08k|                fn from_usize(u: usize) -> Self {
  824|  2.08k|                    u as Self
  825|  2.08k|                }
_RNvXs2_NtCsjtZfaKP97h6_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  810|    332|                fn as_widest(self) -> Self::Widest {
  811|    332|                    self as $widest
  812|    332|                }
_RNvXs6_NtCsjtZfaKP97h6_9arbitrary12unstructuredjNtB5_3Int9as_widest:
  810|  2.63k|                fn as_widest(self) -> Self::Widest {
  811|  2.63k|                    self as $widest
  812|  2.63k|                }
_RNvXs1_NtCsjtZfaKP97h6_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  814|    601|                fn from_widest(w: Self::Widest) -> Self {
  815|    601|                    let x = <$ty>::max_value().as_widest();
  816|    601|                    (w % x) as Self
  817|    601|                }
_RNvXs5_NtCsjtZfaKP97h6_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  827|  1.30k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  828|  1.30k|                    <$ty>::checked_add(self, rhs)
  829|  1.30k|                }

_RINvXss_NtNtCsaUGfnBpS3yR_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  252|    289|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    289|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    289|                }
_RINvNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  125|  6.00k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  6.00k|    let b = reader.fill(1)?
  127|  6.00k|        .as_ref()
  128|  6.00k|        .get(0)
  129|  6.00k|        .copied()
  130|  6.00k|        .ok_or(Error::Eof)?;
  131|  6.00k|    reader.advance(1);
  132|  6.00k|    Ok(b)
  133|  6.00k|}
_RINvNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  427|  4.09k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  4.09k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  4.09k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  4.09k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  4.09k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  4.09k|            if buf.len() >= len {
  436|  4.09k|                reader.advance(len);
  437|  4.09k|                return Ok(Some(&buf[..len]));
  438|      0|            }
  439|      0|        }
  440|       |
  441|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|      0|        while len != 0 {
  444|      0|            let readbuf = reader.fill(len)?;
  445|      0|            let readbuf = readbuf.as_ref();
  446|      0|
  447|      0|            if readbuf.is_empty() {
  448|      0|                return Err(Error::Eof);
  449|      0|            }
  450|      0|
  451|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      0|
  453|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      0|            reader.advance(readlen);
  455|      0|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|      0|            let byte = pull_one(reader)?;
  463|       |
  464|      0|            if byte == marker::BREAK {
  465|      0|                break
  466|      0|            }
  467|      0|
  468|      0|            if !reader.step_in() {
  469|      0|                return Err(Error::DepthLimit);
  470|      0|            }
  471|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|      0|            let reader = &mut *reader;
  473|       |
  474|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|      0|                buf.extend_from_slice(longbuf);
  476|      0|            }
  477|       |        }
  478|       |
  479|      0|        Ok(None)
  480|       |    }
  481|  4.09k|}
_RINvNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  136|    313|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    626|    while !buf.is_empty() {
  138|    313|        let readbuf = reader.fill(buf.len())?;
  139|    313|        let readbuf = readbuf.as_ref();
  140|    313|
  141|    313|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    313|        }
  144|    313|
  145|    313|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    313|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    313|        reader.advance(len);
  148|    313|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    313|    Ok(())
  152|    313|}
_RINvYyNtNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
   73|    289|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    289|        let byte = pull_one(reader)?;
   75|    289|        Self::decode_with(byte, reader)
   76|    289|    }
_RINvYNtNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
   73|    578|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    578|        let byte = pull_one(reader)?;
   75|    578|        Self::decode_with(byte, reader)
   76|    578|    }
_RINvXs5_NtNtCsaUGfnBpS3yR_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs3KUlNeP7sSg_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  506|  4.09k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  4.09k|        use crate::alloc::borrow::Cow;
  508|  4.09k|
  509|  4.09k|        let mut buf = Vec::new();
  510|  4.09k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  4.09k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|      0|            Cow::Owned(buf)
  514|       |        }))
  515|  4.09k|    }
_RNvNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec8if_majorCsjoEqaI55l2F_11cbor_encode:
  890|    289|pub fn if_major(byte: u8) -> u8 {
  891|    289|    byte >> 5
  892|    289|}
_RINvNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  595|  4.67k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  4.67k|    -> Result<Option<usize>, Error<R::Error>>
  597|  4.67k|{
  598|  4.67k|    if byte != (marker::START | (major << 5)) {
  599|  4.67k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  4.67k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  4.67k|        Ok(Some(len))
  602|       |    } else {
  603|      0|        Ok(None)
  604|       |    }
  605|  4.67k|}
_RINvXsc_NtNtCsaUGfnBpS3yR_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  611|    578|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|    578|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|    578|    }
_RINvMs0_NtNtCsaUGfnBpS3yR_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  223|  5.24k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  5.24k|        match self.byte & self.major_limit {
  225|  5.24k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|    757|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|     51|                let mut buf = [0; 2];
  229|     51|                pull_exact(reader, &mut buf)?;
  230|     51|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|     16|                let mut buf = [0; 4];
  234|     16|                pull_exact(reader, &mut buf)?;
  235|     16|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    246|                let mut buf = [0; 8];
  239|    246|                pull_exact(reader, &mut buf)?;
  240|    246|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  5.24k|    }
_RNvMNtNtCsaUGfnBpS3yR_7cbor4ii4core3decNtB2_9Reference6as_refCsjoEqaI55l2F_11cbor_encode:
   81|  6.31k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  6.31k|        match self {
   83|  6.31k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  6.31k|    }
_RINvXsg_NtNtCsaUGfnBpS3yR_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
  703|    289|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    289|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    289|    }
_RINvYNtNtNtCsaUGfnBpS3yR_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
   73|    289|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    289|        let byte = pull_one(reader)?;
   75|    289|        Self::decode_with(byte, reader)
   76|    289|    }
_RNvMs0_NtNtCsaUGfnBpS3yR_7cbor4ii4core3decNtB5_7TypeNum3newCsjoEqaI55l2F_11cbor_encode:
  175|  5.24k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  5.24k|        TypeNum { major_limit, byte }
  177|  5.24k|    }
_RINvYINtNtNtCsaUGfnBpS3yR_7cbor4ii4core5types5BytesINtNtCs3KUlNeP7sSg_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
   73|  4.09k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  4.09k|        let byte = pull_one(reader)?;
   75|  4.09k|        Self::decode_with(byte, reader)
   76|  4.09k|    }

_RNvMs0_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB5_7TypeNumyE3newCsjoEqaI55l2F_11cbor_encode:
   52|  10.4k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.4k|        TypeNum { type_, value }
   54|  10.4k|    }
_RINvXs2_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
   70|  9.97k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  9.97k|        match u8::try_from(self.value) {
   72|  9.87k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    102|                let [x0, x1] = self.value.to_be_bytes();
   75|    102|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  9.97k|        Ok(())
   79|  9.97k|    }
_RINvXs3_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
   84|  10.0k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  10.0k|        match u16::try_from(self.value) {
   86|  9.97k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     32|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     32|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  10.0k|        Ok(())
   93|  10.0k|    }
_RNvMs0_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB5_7TypeNumhE3newCsjoEqaI55l2F_11cbor_encode:
   52|  9.87k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  9.87k|        TypeNum { type_, value }
   54|  9.87k|    }
_RINvXs7_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
  209|  8.18k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  8.18k|        writer.push(self.0)?;
  211|  8.18k|        Ok(())
  212|  8.18k|    }
_RNvMs0_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB5_7TypeNummE3newCsjoEqaI55l2F_11cbor_encode:
   52|  10.0k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  10.0k|        TypeNum { type_, value }
   54|  10.0k|    }
_RINvXsd_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
  270|  1.15k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.15k|        Ok(())
  272|  1.15k|    }
_RINvXs4_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
   98|  10.4k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  10.4k|        match u32::try_from(self.value) {
  100|  10.0k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    492|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    492|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  10.4k|        Ok(())
  107|  10.4k|    }
_RINvXsi_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
  317|    578|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    578|        self.1.encode(writer)
  319|    578|    }
_RNvMs0_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB5_7TypeNumtE3newCsjoEqaI55l2F_11cbor_encode:
   52|  9.97k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  9.97k|        TypeNum { type_, value }
   54|  9.97k|    }
_RINvXsu_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
  159|    578|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    578|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    578|                }
_RINvXs1_NtNtCsaUGfnBpS3yR_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsjoEqaI55l2F_11cbor_encode:
   59|  9.87k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  9.87k|        match self.value {
   61|  9.87k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.51k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  9.87k|        Ok(())
   65|  9.87k|    }

_RNvXs1_NtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsjoEqaI55l2F_11cbor_encode:
   62|  10.9k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  10.9k|        let len = core::cmp::min(self.buf.len(), want);
   64|  10.9k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  10.9k|    }
_RNvXs1_NtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsjoEqaI55l2F_11cbor_encode:
   75|    578|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    578|            self.limit = limit;
   77|    578|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    578|    }
_RNvXs1_NtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsjoEqaI55l2F_11cbor_encode:
   68|  10.4k|    fn advance(&mut self, n: usize) {
   69|  10.4k|        let len = core::cmp::min(self.buf.len(), n);
   70|  10.4k|        self.buf = &self.buf[len..];
   71|  10.4k|    }
_RNvXs1_NtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsjoEqaI55l2F_11cbor_encode:
   84|    578|    fn step_out(&mut self) {
   85|    578|        self.limit += 1;
   86|    578|    }
_RNvXs_NtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsjoEqaI55l2F_11cbor_encode:
   40|  18.6k|        self.0.try_reserve(input.len())?;
   41|  18.6k|        self.0.extend_from_slice(input);
   42|  18.6k|        Ok(())
   43|  18.6k|    }
_RNvMs0_NtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    289|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    289|        SliceReader { buf, limit: 256 }
   55|    289|    }
_RNvMNtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    578|    pub fn new(buf: Vec<u8>) -> Self {
   15|    578|       BufWriter(buf)
   16|    578|    }
_RNvMNtNtCsaUGfnBpS3yR_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    578|    pub fn into_inner(self) -> Vec<u8> {
   25|    578|        self.0
   26|    578|    }

_RNvXs0_NtCs30zCv4Bdlrf_3cid3arbINtNtB7_3cid3CidKj40_ENtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
   83|    387|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   84|    387|        let v1 = size_hint::and_all(&[
   85|    387|            <[u8; 2]>::size_hint(depth),
   86|    387|            (0, Some(8)),
   87|    387|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   88|    387|        ]);
   89|    387|        if S >= 32 {
   90|    387|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   91|       |        } else {
   92|      0|            v1
   93|       |        }
   94|    387|    }
_RNvXs0_NtCs30zCv4Bdlrf_3cid3arbINtNtB7_3cid3CidKj40_ENtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitraryCsgc4whDaiAIc_11common_fuzz:
   56|    337|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   57|    337|        if S >= 32 && u.ratio(1, 10)? {
   58|     18|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   59|      9|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   60|    308|        }
   61|    308|
   62|    308|        let mut codec = 0u64;
   63|    308|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   64|       |
   65|    831|        while len_choice & 1 == 1 {
   66|    523|            len_choice >>= 1;
   67|    523|
   68|    523|            let x = u.arbitrary::<u8>();
   69|    523|            let next = codec
   70|    523|                .checked_shl(8)
   71|    523|                .zip(x.ok())
   72|    523|                .map(|(next, x)| next.saturating_add(x as u64));
   73|    523|
   74|    523|            match next {
   75|      0|                None => break,
   76|    523|                Some(next) => codec = next,
   77|       |            }
   78|       |        }
   79|       |
   80|    308|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   81|    337|    }
_RNCNvXs0_NtCs30zCv4Bdlrf_3cid3arbINtNtB9_3cid3CidKj40_ENtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary0Csgc4whDaiAIc_11common_fuzz:
   72|    523|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvMNtCs30zCv4Bdlrf_3cid3cidINtB2_3CidKj40_E6new_v1CsjoEqaI55l2F_11cbor_encode:
   90|    280|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    280|        Self {
   92|    280|            version: Version::V1,
   93|    280|            codec,
   94|    280|            hash,
   95|    280|        }
   96|    280|    }
_RINvMNtCs30zCv4Bdlrf_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs3KUlNeP7sSg_5alloc3vec3VechEECsjoEqaI55l2F_11cbor_encode:
  157|    578|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    578|        match self.version {
  159|     18|            Version::V0 => self.hash.write(w)?,
  160|    560|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    578|        Ok(())
  163|    578|    }
_RINvMNtCs30zCv4Bdlrf_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs3KUlNeP7sSg_5alloc3vec3VechEECsjoEqaI55l2F_11cbor_encode:
  143|    560|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    560|        let mut version_buf = varint_encode::u64_buffer();
  145|    560|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    560|
  147|    560|        let mut codec_buf = varint_encode::u64_buffer();
  148|    560|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    560|
  150|    560|        w.write_all(version)?;
  151|    560|        w.write_all(codec)?;
  152|    560|        self.hash.write(&mut w)?;
  153|    560|        Ok(())
  154|    560|    }
_RNvMNtCs30zCv4Bdlrf_3cid3cidINtB2_3CidKj40_E3newCsjoEqaI55l2F_11cbor_encode:
   99|    280|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    280|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    280|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    280|    }
_RNvMNtCs30zCv4Bdlrf_3cid3cidINtB2_3CidKj40_E8to_bytesCsjoEqaI55l2F_11cbor_encode:
  167|    578|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    578|        let mut bytes = Vec::new();
  169|    578|        self.write_bytes(&mut bytes).unwrap();
  170|    578|        bytes
  171|    578|    }
_RNvXs6_NtCs30zCv4Bdlrf_3cid3cidINtB5_3CidKj40_EINtNtCs8nQMPxM1bM1_4core7convert7TryFromRShE8try_fromCsjoEqaI55l2F_11cbor_encode:
  314|    289|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    289|        Self::read_bytes(&mut bytes)
  316|    289|    }
_RINvMNtCs30zCv4Bdlrf_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsjoEqaI55l2F_11cbor_encode:
  127|    289|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    289|        let version = varint_read_u64(&mut r)?;
  129|    289|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    289|        if [version, codec] == [0x12, 0x20] {
  132|      9|            let mut digest = [0u8; 32];
  133|      9|            r.read_exact(&mut digest)?;
  134|      9|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|      9|            Self::new_v0(mh)
  136|       |        } else {
  137|    280|            let version = Version::try_from(version)?;
  138|    280|            let mh = Multihash::read(r)?;
  139|    280|            Self::new(version, codec, mh)
  140|       |        }
  141|    289|    }
_RNvMNtCs30zCv4Bdlrf_3cid3cidINtB2_3CidKj40_E6new_v0CsjoEqaI55l2F_11cbor_encode:
   78|      9|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      9|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      9|        }
   82|      9|        Ok(Self {
   83|      9|            version: Version::V0,
   84|      9|            codec: DAG_PB,
   85|      9|            hash,
   86|      9|        })
   87|      9|    }
_RNvMNtCs30zCv4Bdlrf_3cid3cidINtB2_3CidKj40_E6new_v1Csgc4whDaiAIc_11common_fuzz:
   90|    280|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    280|        Self {
   92|    280|            version: Version::V1,
   93|    280|            codec,
   94|    280|            hash,
   95|    280|        }
   96|    280|    }
_RNvMNtCs30zCv4Bdlrf_3cid3cidINtB2_3CidKj40_E6new_v0Csgc4whDaiAIc_11common_fuzz:
   78|      9|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      9|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      9|        }
   82|      9|        Ok(Self {
   83|      9|            version: Version::V0,
   84|      9|            codec: DAG_PB,
   85|      9|            hash,
   86|      9|        })
   87|      9|    }

_RINvXNvXs0_NtCs30zCv4Bdlrf_3cid5serdeINtNtBb_3cid3CidKpENtNtCshDWiYiO71ov_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   97|    289|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    289|            where
   99|    289|                D: de::Deserializer<'de>,
  100|    289|            {
  101|    289|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    289|            }
_RINvXs_NtCs30zCv4Bdlrf_3cid5serdeNtB5_17BytesToCidVisitorNtNtCshDWiYiO71ov_5serde2de7Visitor11visit_bytesINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs8nQMPxM1bM1_4core7convert10InfallibleEECsjoEqaI55l2F_11cbor_encode:
   48|    289|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    289|    where
   50|    289|        E: de::Error,
   51|    289|    {
   52|    289|        CidGeneric::<SIZE>::try_from(value)
   53|    289|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    289|    }
_RINvXs0_NtCs30zCv4Bdlrf_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCshDWiYiO71ov_5serde2de11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   79|    289|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    289|    where
   81|    289|        D: de::Deserializer<'de>,
   82|    289|    {
   83|    289|        /// Main visitor to deserialize a CID.
   84|    289|        ///
   85|    289|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    289|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    289|        /// to bytes.
   88|    289|        struct MainEntryVisitor<const SIZE: usize>;
   89|    289|
   90|    289|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    289|            type Value = CidGeneric<SIZE>;
   92|    289|
   93|    289|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    289|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    289|            }
   96|    289|
   97|    289|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    289|            where
   99|    289|                D: de::Deserializer<'de>,
  100|    289|            {
  101|    289|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    289|            }
  103|    289|        }
  104|    289|
  105|    289|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    289|    }
_RINvXNtCs30zCv4Bdlrf_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCshDWiYiO71ov_5serde3ser9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   29|    578|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    578|    where
   31|    578|        S: ser::Serializer,
   32|    578|    {
   33|    578|        let value = ByteBuf::from(self.to_bytes());
   34|    578|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    578|    }

_RNvXs0_NtCs30zCv4Bdlrf_3cid7versionyINtNtCs8nQMPxM1bM1_4core7convert4FromNtB5_7VersionE4from:
   44|    560|    fn from(ver: Version) -> u64 {
   45|    560|        match ver {
   46|      0|            Version::V0 => 0,
   47|    560|            Version::V1 => 1,
   48|       |        }
   49|    560|    }
_RNvXs_NtCs30zCv4Bdlrf_3cid7versionNtB4_7VersionINtNtCs8nQMPxM1bM1_4core7convert7TryFromyE8try_from:
   34|    280|    fn try_from(raw: u64) -> Result<Self> {
   35|    280|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    280|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    280|    }

_RINvMNtCs2Z7SHDr5kAs_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECsjoEqaI55l2F_11cbor_encode:
   60|    578|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    578|        ByteBuf {
   62|    578|            bytes: bytes.into(),
   63|    578|        }
   64|    578|    }
_RINvXse_NtCs2Z7SHDr5kAs_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  219|    578|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    578|    where
  221|    578|        D: Deserializer<'de>,
  222|    578|    {
  223|    578|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    578|    }
_RINvXsd_NtCs2Z7SHDr5kAs_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCshDWiYiO71ov_5serde2de7Visitor11visit_bytesINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs8nQMPxM1bM1_4core7convert10InfallibleEECsjoEqaI55l2F_11cbor_encode:
  203|    578|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    578|    where
  205|    578|        E: Error,
  206|    578|    {
  207|    578|        Ok(ByteBuf::from(v))
  208|    578|    }
_RNvMNtCs2Z7SHDr5kAs_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    578|    pub fn into_vec(self) -> Vec<u8> {
   68|    578|        self.bytes
   69|    578|    }

_RINvXs1_NtCs2Z7SHDr5kAs_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   61|    578|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    578|    where
   63|    578|        D: Deserializer<'de>,
   64|    578|    {
   65|    578|        // Via the serde::Deserialize impl for ByteBuf.
   66|    578|        serde::Deserialize::deserialize(deserializer)
   67|    578|    }
_RINvXs_NtCs2Z7SHDr5kAs_14cs_serde_bytes2deINtNtCs3KUlNeP7sSg_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   42|    578|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    578|    where
   44|    578|        D: Deserializer<'de>,
   45|    578|    {
   46|    578|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    578|    }
_RINvXNvXs2_NtCs2Z7SHDr5kAs_14cs_serde_bytes2deINtNtCs3KUlNeP7sSg_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCshDWiYiO71ov_5serde2de7Visitor20visit_borrowed_bytesINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs8nQMPxM1bM1_4core7convert10InfallibleEECsjoEqaI55l2F_11cbor_encode:
   85|  3.22k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.22k|            where
   87|  3.22k|                E: Error,
   88|  3.22k|            {
   89|  3.22k|                Ok(Cow::Borrowed(v))
   90|  3.22k|            }
_RINvXs2_NtCs2Z7SHDr5kAs_14cs_serde_bytes2deINtNtCs3KUlNeP7sSg_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   72|  3.22k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  3.22k|    where
   74|  3.22k|        D: Deserializer<'de>,
   75|  3.22k|    {
   76|  3.22k|        struct CowVisitor;
   77|  3.22k|
   78|  3.22k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  3.22k|            type Value = Cow<'de, [u8]>;
   80|  3.22k|
   81|  3.22k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  3.22k|                formatter.write_str("a byte array")
   83|  3.22k|            }
   84|  3.22k|
   85|  3.22k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.22k|            where
   87|  3.22k|                E: Error,
   88|  3.22k|            {
   89|  3.22k|                Ok(Cow::Borrowed(v))
   90|  3.22k|            }
   91|  3.22k|
   92|  3.22k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  3.22k|            where
   94|  3.22k|                E: Error,
   95|  3.22k|            {
   96|  3.22k|                Ok(Cow::Owned(v.to_vec()))
   97|  3.22k|            }
   98|  3.22k|
   99|  3.22k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  3.22k|            where
  101|  3.22k|                E: Error,
  102|  3.22k|            {
  103|  3.22k|                Ok(Cow::Owned(v))
  104|  3.22k|            }
  105|  3.22k|        }
  106|  3.22k|
  107|  3.22k|        deserializer.deserialize_bytes(CowVisitor)
  108|  3.22k|    }

_RINvCs2Z7SHDr5kAs_14cs_serde_bytes11deserializeINtNtCs3KUlNeP7sSg_5alloc6borrow3CowShEQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  103|    289|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    289|where
  105|    289|    T: Deserialize<'de>,
  106|    289|    D: Deserializer<'de>,
  107|    289|{
  108|    289|    Deserialize::deserialize(deserializer)
  109|    289|}
_RINvCs2Z7SHDr5kAs_14cs_serde_bytes9serializeRINtNtCs3KUlNeP7sSg_5alloc3vec3VechEQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   77|    578|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    578|where
   79|    578|    T: ?Sized + Serialize,
   80|    578|    S: Serializer,
   81|    578|{
   82|    578|    Serialize::serialize(bytes, serializer)
   83|    578|}
_RINvCs2Z7SHDr5kAs_14cs_serde_bytes9serializeINtNtCs3KUlNeP7sSg_5alloc3vec3VechEQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   77|  1.15k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|  1.15k|where
   79|  1.15k|    T: ?Sized + Serialize,
   80|  1.15k|    S: Serializer,
   81|  1.15k|{
   82|  1.15k|    Serialize::serialize(bytes, serializer)
   83|  1.15k|}
_RINvCs2Z7SHDr5kAs_14cs_serde_bytes11deserializeINtNtCs3KUlNeP7sSg_5alloc3vec3VechEQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  103|    578|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    578|where
  105|    578|    T: Deserialize<'de>,
  106|    578|    D: Deserializer<'de>,
  107|    578|{
  108|    578|    Deserialize::deserialize(deserializer)
  109|    578|}

_RINvXs_NtCs2Z7SHDr5kAs_14cs_serde_bytes3serINtNtCs3KUlNeP7sSg_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   37|  7.60k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|  7.60k|    where
   39|  7.60k|        S: Serializer,
   40|  7.60k|    {
   41|  7.60k|        serializer.serialize_bytes(self)
   42|  7.60k|    }
_RINvXs4_NtCs2Z7SHDr5kAs_14cs_serde_bytes3serRINtNtCs3KUlNeP7sSg_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   88|    578|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    578|    where
   90|    578|        S: Serializer,
   91|    578|    {
   92|    578|        (**self).serialize(serializer)
   93|    578|    }

rust_fuzzer_test_input:
  167|    387|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    387|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    387|
  170|    387|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    387|            // implementation. This helps the fuzzer avoid exploring all the
  172|    387|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    387|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    387|            // get to longer inputs that actually lead to interesting executions
  175|    387|            // quicker.
  176|    387|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    386|            }
  179|    386|
  180|    386|            let mut u = Unstructured::new(bytes);
  181|    386|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    386|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    386|            }
  199|       |
  200|    386|            let $data = match data {
  201|    289|                Ok(d) => d,
  202|     97|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    387|        }
_RNCNvCsj8qpf948XjD_13libfuzzer_sys15test_input_wrap0B3_:
   28|    387|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    387|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    387|        rust_fuzzer_test_input(data_slice);
   31|    387|    });
LLVMFuzzerTestOneInput:
   27|    387|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    387|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    387|    });
   32|    387|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    387|    }
   37|    387|    0
   38|    387|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs_NtCscDoRKiGEEIL_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
   64|    387|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   65|    387|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   66|    387|    }
_RNvXs_NtCscDoRKiGEEIL_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitraryCsgc4whDaiAIc_11common_fuzz:
   39|    308|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   40|    308|        let mut code = 0u64;
   41|    308|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   42|       |
   43|    804|        while len_choice & 1 == 1 {
   44|    496|            len_choice >>= 1;
   45|    496|
   46|    496|            let x = u.arbitrary::<u8>();
   47|    496|            let next = code
   48|    496|                .checked_shl(8)
   49|    496|                .zip(x.ok())
   50|    496|                .map(|(next, x)| next.saturating_add(x as u64));
   51|    496|
   52|    496|            match next {
   53|      0|                None => break,
   54|    496|                Some(next) => code = next,
   55|       |            }
   56|       |        }
   57|       |
   58|    308|        let size = u.int_in_range(0..=S)?;
   59|    285|        let data = u.bytes(size)?;
   60|       |
   61|    280|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   62|    308|    }
_RNCNvXs_NtCscDoRKiGEEIL_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary0Csgc4whDaiAIc_11common_fuzz:
   50|    496|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB4_9MultihashKj40_E6digestCsjoEqaI55l2F_11cbor_encode:
  130|    578|    pub fn digest(&self) -> &[u8] {
  131|    578|        &self.digest[..self.size as usize]
  132|    578|    }
_RINvNtCscDoRKiGEEIL_9multihash9multihash14read_multihashQRShKj40_ECsjoEqaI55l2F_11cbor_encode:
  298|    280|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    280|where
  300|    280|    R: io::Read,
  301|    280|{
  302|    280|    let code = read_u64(&mut r)?;
  303|    280|    let size = read_u64(&mut r)?;
  304|       |
  305|    280|    if size > S as u64 || size > u8::MAX as u64 {
  306|      0|        return Err(Error::InvalidSize(size));
  307|    280|    }
  308|    280|
  309|    280|    let mut digest = [0; S];
  310|    280|    r.read_exact(&mut digest[..size as usize])?;
  311|    280|    Ok((code, size as u8, digest))
  312|    280|}
_RINvNtCscDoRKiGEEIL_9multihash9multihash15write_multihashQINtNtCs3KUlNeP7sSg_5alloc3vec3VechEECsjoEqaI55l2F_11cbor_encode:
  276|     18|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     18|where
  278|     18|    W: io::Write,
  279|     18|{
  280|     18|    let mut code_buf = varint_encode::u64_buffer();
  281|     18|    let code = varint_encode::u64(code, &mut code_buf);
  282|     18|
  283|     18|    let mut size_buf = varint_encode::u8_buffer();
  284|     18|    let size = varint_encode::u8(size, &mut size_buf);
  285|     18|
  286|     18|    w.write_all(code)?;
  287|     18|    w.write_all(size)?;
  288|     18|    w.write_all(digest)?;
  289|     18|    Ok(())
  290|     18|}
_RNvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB4_9MultihashKj40_E4codeCsjoEqaI55l2F_11cbor_encode:
  120|    587|    pub const fn code(&self) -> u64 {
  121|    587|        self.code
  122|    587|    }
_RINvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs3KUlNeP7sSg_5alloc3vec3VechEECsjoEqaI55l2F_11cbor_encode:
  163|     18|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     18|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     18|    }
_RINvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs3KUlNeP7sSg_5alloc3vec3VechEECsjoEqaI55l2F_11cbor_encode:
  163|    560|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    560|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    560|    }
_RINvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsjoEqaI55l2F_11cbor_encode:
  135|    280|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    280|    where
  137|    280|        Self: Sized,
  138|    280|    {
  139|    280|        let (code, size, digest) = read_multihash(r)?;
  140|    280|        Ok(Self { code, size, digest })
  141|    280|    }
_RNvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsjoEqaI55l2F_11cbor_encode:
  125|    578|    pub const fn size(&self) -> u8 {
  126|    578|        self.size
  127|    578|    }
_RINvNtCscDoRKiGEEIL_9multihash9multihash15write_multihashQQINtNtCs3KUlNeP7sSg_5alloc3vec3VechEECsjoEqaI55l2F_11cbor_encode:
  276|    560|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    560|where
  278|    560|    W: io::Write,
  279|    560|{
  280|    560|    let mut code_buf = varint_encode::u64_buffer();
  281|    560|    let code = varint_encode::u64(code, &mut code_buf);
  282|    560|
  283|    560|    let mut size_buf = varint_encode::u8_buffer();
  284|    560|    let size = varint_encode::u8(size, &mut size_buf);
  285|    560|
  286|    560|    w.write_all(code)?;
  287|    560|    w.write_all(size)?;
  288|    560|    w.write_all(digest)?;
  289|    560|    Ok(())
  290|    560|}
_RNvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsjoEqaI55l2F_11cbor_encode:
  101|      9|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|      9|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|      9|        }
  105|      9|        let size = input_digest.len();
  106|      9|        let mut digest = [0; S];
  107|      9|        let mut i = 0;
  108|    297|        while i < size {
  109|    288|            digest[i] = input_digest[i];
  110|    288|            i += 1;
  111|    288|        }
  112|      9|        Ok(Self {
  113|      9|            code,
  114|      9|            size: size as u8,
  115|      9|            digest,
  116|      9|        })
  117|      9|    }
_RNvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsgc4whDaiAIc_11common_fuzz:
  101|    289|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    289|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    289|        }
  105|    289|        let size = input_digest.len();
  106|    289|        let mut digest = [0; S];
  107|    289|        let mut i = 0;
  108|  1.20k|        while i < size {
  109|    916|            digest[i] = input_digest[i];
  110|    916|            i += 1;
  111|    916|        }
  112|    289|        Ok(Self {
  113|    289|            code,
  114|    289|            size: size as u8,
  115|    289|            digest,
  116|    289|        })
  117|    289|    }
_RNvMs_NtCscDoRKiGEEIL_9multihash9multihashINtB4_9MultihashKj40_E4codeCsgc4whDaiAIc_11common_fuzz:
  120|      9|    pub const fn code(&self) -> u64 {
  121|      9|        self.code
  122|      9|    }

_RNvXs4_NtCscDoRKiGEEIL_9multihash14multihash_implyINtNtCs8nQMPxM1bM1_4core7convert4FromNtB5_4CodeE4from:
   11|     18|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCsakP7W5fNNoL_10fvm_shared7address8protocol8ProtocolNtNtCsyZHWF3ZS3p_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  2.93k|    fn from_u8(n: u8) -> Option<Self> {
  468|  2.93k|        FromPrimitive::from_u64(From::from(n))
  469|  2.93k|    }

_RNvMs2_NtCsl99hJtQSdzw_9once_cell3impINtB5_8OnceCellNtNtCs3KUlNeP7sSg_5alloc6string6StringE14is_initializedCsjoEqaI55l2F_11cbor_encode:
   62|    386|    pub(crate) fn is_initialized(&self) -> bool {
   63|    386|        // An `Acquire` load is enough because that makes all the initialization
   64|    386|        // operations visible to us, and, this being a fast path, weaker
   65|    386|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    386|        // `SeqCst` operations on the slow path.
   67|    386|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    386|    }

_RNvMs4_NtCsl99hJtQSdzw_9once_cell4syncINtB5_8OnceCellNtNtCs3KUlNeP7sSg_5alloc6string6StringE3getCsjoEqaI55l2F_11cbor_encode:
  869|    386|        pub fn get(&self) -> Option<&T> {
  870|    386|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    386|                None
  875|       |            }
  876|    386|        }

_RNvXCsiV9ktNAksnv_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    578|    fn should_run() -> bool { true }
_RNvMs1_CsiV9ktNAksnv_10scopeguardINtB5_10ScopeGuardQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsjoEqaI55l2F_11cbor_encode:
  317|    578|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    578|        ScopeGuard {
  319|    578|            value: ManuallyDrop::new(v),
  320|    578|            dropfn: ManuallyDrop::new(dropfn),
  321|    578|            strategy: PhantomData,
  322|    578|        }
  323|    578|    }
_RNvXs5_CsiV9ktNAksnv_10scopeguardINtB5_10ScopeGuardQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs8nQMPxM1bM1_4core3ops4drop4Drop4dropCsjoEqaI55l2F_11cbor_encode:
  452|    578|    fn drop(&mut self) {
  453|    578|        // This is OK because the fields are `ManuallyDrop`s
  454|    578|        // which will not be dropped by the compiler.
  455|    578|        let (value, dropfn) = unsafe {
  456|    578|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    578|        };
  458|    578|        if S::should_run() {
  459|    578|            dropfn(value);
  460|    578|        }
  461|    578|    }
_RNvXs4_CsiV9ktNAksnv_10scopeguardINtB5_10ScopeGuardQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs8nQMPxM1bM1_4core3ops5deref8DerefMut9deref_mutCsjoEqaI55l2F_11cbor_encode:
  443|    578|    fn deref_mut(&mut self) -> &mut T {
  444|    578|        &mut *self.value
  445|    578|    }
_RINvCsiV9ktNAksnv_10scopeguard5guardQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEFBy_EuECsjoEqaI55l2F_11cbor_encode:
  367|    578|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    578|    where F: FnOnce(T)
  369|    578|{
  370|    578|    ScopeGuard::with_strategy(v, dropfn)
  371|    578|}

_RINvXNvXsh_NtNtCshDWiYiO71ov_5serde2de5implsINtNtCs3KUlNeP7sSg_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
 1032|    289|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    289|            where
 1034|    289|                A: SeqAccess<'de>,
 1035|    289|            {
 1036|    289|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  2.93k|                while let Some(value) = try!(seq.next_element()) {
 1039|  2.64k|                    values.push(value);
 1040|  2.64k|                }
 1041|       |
 1042|    289|                Ok(values)
 1043|    289|            }
_RINvXsh_NtNtCshDWiYiO71ov_5serde2de5implsINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
 1014|    289|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    289|    where
 1016|    289|        D: Deserializer<'de>,
 1017|    289|    {
 1018|    289|        struct VecVisitor<T> {
 1019|    289|            marker: PhantomData<T>,
 1020|    289|        }
 1021|    289|
 1022|    289|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    289|        where
 1024|    289|            T: Deserialize<'de>,
 1025|    289|        {
 1026|    289|            type Value = Vec<T>;
 1027|    289|
 1028|    289|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    289|                formatter.write_str("a sequence")
 1030|    289|            }
 1031|    289|
 1032|    289|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    289|            where
 1034|    289|                A: SeqAccess<'de>,
 1035|    289|            {
 1036|    289|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    289|
 1038|    289|                while let Some(value) = try!(seq.next_element()) {
 1039|    289|                    values.push(value);
 1040|    289|                }
 1041|    289|
 1042|    289|                Ok(values)
 1043|    289|            }
 1044|    289|        }
 1045|    289|
 1046|    289|        let visitor = VecVisitor {
 1047|    289|            marker: PhantomData,
 1048|    289|        };
 1049|    289|        deserializer.deserialize_seq(visitor)
 1050|    289|    }
_RINvXsV_NtNtCshDWiYiO71ov_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  113|    289|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    289|            where
  115|    289|                D: Deserializer<'de>,
  116|    289|            {
  117|    289|                struct PrimitiveVisitor;
  118|    289|
  119|    289|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    289|                    type Value = $primitive;
  121|    289|
  122|    289|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    289|                        formatter.write_str(stringify!($primitive))
  124|    289|                    }
  125|    289|
  126|    289|                    $($($method!($val : $visit);)*)*
  127|    289|                }
  128|    289|
  129|    289|                deserializer.$deserialize(PrimitiveVisitor)
  130|    289|            }
_RINvXNvXsV_NtNtCshDWiYiO71ov_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCs63RvXzuJsWk_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs8nQMPxM1bM1_4core7convert10InfallibleEECsjoEqaI55l2F_11cbor_encode:
  138|    289|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    289|        where
  140|    289|            E: Error,
  141|    289|        {
  142|    289|            Ok(v)
  143|    289|        }

_RINvYINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess12next_elementINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEECsjoEqaI55l2F_11cbor_encode:
 1723|    289|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    289|    where
 1725|    289|        T: Deserialize<'de>,
 1726|    289|    {
 1727|    289|        self.next_element_seed(PhantomData)
 1728|    289|    }
_RINvXs3_NtCshDWiYiO71ov_5serde2deINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  783|  2.93k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  2.93k|    where
  785|  2.93k|        D: Deserializer<'de>,
  786|  2.93k|    {
  787|  2.93k|        T::deserialize(deserializer)
  788|  2.93k|    }
_RINvXs3_NtCshDWiYiO71ov_5serde2deINtNtCs8nQMPxM1bM1_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  783|    289|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    289|    where
  785|    289|        D: Deserializer<'de>,
  786|    289|    {
  787|    289|        T::deserialize(deserializer)
  788|    289|    }
_RINvYINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsjoEqaI55l2F_11cbor_encode:
 1723|    289|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    289|    where
 1725|    289|        T: Deserialize<'de>,
 1726|    289|    {
 1727|    289|        self.next_element_seed(PhantomData)
 1728|    289|    }
_RINvYINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess12next_elementNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsjoEqaI55l2F_11cbor_encode:
 1723|    289|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    289|    where
 1725|    289|        T: Deserialize<'de>,
 1726|    289|    {
 1727|    289|        self.next_element_seed(PhantomData)
 1728|    289|    }
_RINvXs3_NtCshDWiYiO71ov_5serde2deINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtCsj3FDuS9qebQ_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  783|    289|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    289|    where
  785|    289|        D: Deserializer<'de>,
  786|    289|    {
  787|    289|        T::deserialize(deserializer)
  788|    289|    }
_RINvYNtNtCs30zCv4Bdlrf_3cid5serde17BytesToCidVisitorNtNtCshDWiYiO71ov_5serde2de7Visitor20visit_borrowed_bytesINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs8nQMPxM1bM1_4core7convert10InfallibleEECsjoEqaI55l2F_11cbor_encode:
 1563|    289|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    289|    where
 1565|    289|        E: Error,
 1566|    289|    {
 1567|    289|        self.visit_bytes(v)
 1568|    289|    }
_RINvYINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess12next_elementNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressECsjoEqaI55l2F_11cbor_encode:
 1723|  3.22k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  3.22k|    where
 1725|  3.22k|        T: Deserialize<'de>,
 1726|  3.22k|    {
 1727|  3.22k|        self.next_element_seed(PhantomData)
 1728|  3.22k|    }
_RINvYINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess12next_elementyECsjoEqaI55l2F_11cbor_encode:
 1723|    289|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    289|    where
 1725|    289|        T: Deserialize<'de>,
 1726|    289|    {
 1727|    289|        self.next_element_seed(PhantomData)
 1728|    289|    }
_RINvYINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess12next_elementINtNtCs30zCv4Bdlrf_3cid3cid3CidKj40_EECsjoEqaI55l2F_11cbor_encode:
 1723|    289|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    289|    where
 1725|    289|        T: Deserialize<'de>,
 1726|    289|    {
 1727|    289|        self.next_element_seed(PhantomData)
 1728|    289|    }
_RINvXs3_NtCshDWiYiO71ov_5serde2deINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  783|    289|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    289|    where
  785|    289|        D: Deserializer<'de>,
  786|    289|    {
  787|    289|        T::deserialize(deserializer)
  788|    289|    }
_RINvXs3_NtCshDWiYiO71ov_5serde2deINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  783|    289|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    289|    where
  785|    289|        D: Deserializer<'de>,
  786|    289|    {
  787|    289|        T::deserialize(deserializer)
  788|    289|    }
_RINvXs3_NtCshDWiYiO71ov_5serde2deINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataINtNtCs30zCv4Bdlrf_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  783|    289|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    289|    where
  785|    289|        D: Deserializer<'de>,
  786|    289|    {
  787|    289|        T::deserialize(deserializer)
  788|    289|    }
_RINvXs3_NtCshDWiYiO71ov_5serde2deINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  783|    289|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    289|    where
  785|    289|        D: Deserializer<'de>,
  786|    289|    {
  787|    289|        T::deserialize(deserializer)
  788|    289|    }
_RINvYNtNtCs2Z7SHDr5kAs_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCshDWiYiO71ov_5serde2de7Visitor20visit_borrowed_bytesINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs8nQMPxM1bM1_4core7convert10InfallibleEECsjoEqaI55l2F_11cbor_encode:
 1563|    578|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    578|    where
 1565|    578|        E: Error,
 1566|    578|    {
 1567|    578|        self.visit_bytes(v)
 1568|    578|    }
_RINvYINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess12next_elementNtCsj3FDuS9qebQ_17fvm_ipld_bitfield8BitFieldECsjoEqaI55l2F_11cbor_encode:
 1723|    289|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    289|    where
 1725|    289|        T: Deserialize<'de>,
 1726|    289|    {
 1727|    289|        self.next_element_seed(PhantomData)
 1728|    289|    }

_RNvNtNtCshDWiYiO71ov_5serde9___private9size_hint8cautiousCsjoEqaI55l2F_11cbor_encode:
   12|    289|pub fn cautious(hint: Option<usize>) -> usize {
   13|    289|    cmp::min(hint.unwrap_or(0), 4096)
   14|    289|}

_RINvXs1E_NtNtCshDWiYiO71ov_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  386|    578|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    578|            where
  388|    578|                S: Serializer,
  389|    578|            {
  390|    578|                (**self).serialize(serializer)
  391|    578|            }
_RINvXs1E_NtNtCshDWiYiO71ov_5serde3ser5implsRINtNtCs30zCv4Bdlrf_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  386|    578|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    578|            where
  388|    578|                S: Serializer,
  389|    578|            {
  390|    578|                (**self).serialize(serializer)
  391|    578|            }
_RINvXs1E_NtNtCshDWiYiO71ov_5serde3ser5implsRNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  386|    578|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    578|            where
  388|    578|                S: Serializer,
  389|    578|            {
  390|    578|                (**self).serialize(serializer)
  391|    578|            }
_RINvXs1k_NtNtCshDWiYiO71ov_5serde3ser5implsINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  194|    578|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    578|            where
  196|    578|                S: Serializer,
  197|    578|            {
  198|    578|                serializer.collect_seq(self)
  199|    578|            }
_RINvXs1E_NtNtCshDWiYiO71ov_5serde3ser5implsRNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  386|  5.87k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  5.87k|            where
  388|  5.87k|                S: Serializer,
  389|  5.87k|            {
  390|  5.87k|                (**self).serialize(serializer)
  391|  5.87k|            }
_RINvXs1E_NtNtCshDWiYiO71ov_5serde3ser5implsRNtCsj3FDuS9qebQ_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  386|    578|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    578|            where
  388|    578|                S: Serializer,
  389|    578|            {
  390|    578|                (**self).serialize(serializer)
  391|    578|            }
_RINvXsE_NtNtCshDWiYiO71ov_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   11|    578|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    578|            where
   13|    578|                S: Serializer,
   14|    578|            {
   15|    578|                serializer.$method(*self $($cast)*)
   16|    578|            }
_RINvXs1E_NtNtCshDWiYiO71ov_5serde3ser5implsRINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  386|    578|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    578|            where
  388|    578|                S: Serializer,
  389|    578|            {
  390|    578|                (**self).serialize(serializer)
  391|    578|            }

_RNCINvYQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer11collect_seqRINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEE0CsjoEqaI55l2F_11cbor_encode:
 1286|  5.29k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCshDWiYiO71ov_5serde3ser17iterator_len_hintINtNtNtCs8nQMPxM1bM1_4core5slice4iter4IterNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEECsjoEqaI55l2F_11cbor_encode:
 1982|    578|    match iter.size_hint() {
 1983|    578|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    578|}
_RINvYQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer11collect_seqRINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEECsjoEqaI55l2F_11cbor_encode:
 1275|    578|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    578|    where
 1277|    578|        I: IntoIterator,
 1278|    578|        <I as IntoIterator>::Item: Serialize,
 1279|    578|    {
 1280|    578|        let iter = iter.into_iter();
 1281|    578|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    578|            let mut iter = iter;
 1286|    578|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    578|        serializer.end()
 1297|    578|    }

_RINvXsc_NtCsbVtpw7aOahV_11serde_bytes7bytebufNtB6_7ByteBufNtNtCshDWiYiO71ov_5serde3ser9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  186|    578|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    578|    where
  188|    578|        S: Serializer,
  189|    578|    {
  190|    578|        serializer.serialize_bytes(&self.bytes)
  191|    578|    }
_RINvMNtCsbVtpw7aOahV_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs3KUlNeP7sSg_5alloc3vec3VechEECsjoEqaI55l2F_11cbor_encode:
   60|    578|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    578|        ByteBuf {
   62|    578|            bytes: bytes.into(),
   63|    578|        }
   64|    578|    }

_RINvNtCs63RvXzuJsWk_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderECsjoEqaI55l2F_11cbor_encode:
   26|    578|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    578|    let buf = match reader.fill(1)? {
   28|    578|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    578|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    289|    Ok(byte)
   33|    578|}

_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess17next_element_seedINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsjoEqaI55l2F_11cbor_encode:
  484|    289|        if let Some(len) = self.len.as_mut() {
  485|    289|            if *len > 0 {
  486|    289|                *len -= 1;
  487|    289|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    289|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs2Z7SHDr5kAs_14cs_serde_bytes2deINtNtCs3KUlNeP7sSg_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsjoEqaI55l2F_11cbor_encode:
  228|  3.22k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  3.22k|    where
  230|  3.22k|        V: Visitor<'de>,
  231|  3.22k|    {
  232|  3.22k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  3.22k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  3.22k|    }
_RINvXs7_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer17deserialize_bytesNtNtCs30zCv4Bdlrf_3cid5serde17BytesToCidVisitorECsjoEqaI55l2F_11cbor_encode:
  646|    289|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    289|        let byte = peek_one(&mut self.0.reader)?;
  648|    289|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    289|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    289|                    Cow::Borrowed(buf) => {
  653|    289|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    289|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      0|                    Cow::Owned(mut buf) => {
  660|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      0|                            buf.remove(0);
  664|      0|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      0|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    289|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCs3KUlNeP7sSg_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEECsjoEqaI55l2F_11cbor_encode:
  334|    289|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    289|    where
  336|    289|        V: Visitor<'de>,
  337|    289|    {
  338|    289|        let mut de = self.try_step()?;
  339|    289|        let seq = Accessor::array(&mut de)?;
  340|    289|        visitor.visit_seq(seq)
  341|    289|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs30zCv4Bdlrf_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsjoEqaI55l2F_11cbor_encode:
  318|    289|    fn deserialize_newtype_struct<V>(
  319|    289|        self,
  320|    289|        name: &'static str,
  321|    289|        visitor: V,
  322|    289|    ) -> Result<V::Value, Self::Error>
  323|    289|    where
  324|    289|        V: Visitor<'de>,
  325|    289|    {
  326|    289|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    289|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    289|    }
_RNvMs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderE8try_stepCsjoEqaI55l2F_11cbor_encode:
  101|    578|    fn try_step<'a>(
  102|    578|        &'a mut self,
  103|    578|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    578|    {
  105|    578|        if self.reader.step_in() {
  106|    578|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    578|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess17next_element_seedINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsjoEqaI55l2F_11cbor_encode:
  484|    289|        if let Some(len) = self.len.as_mut() {
  485|    289|            if *len > 0 {
  486|    289|                *len -= 1;
  487|    289|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    289|    }
_RNvMNtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderE11from_readerCsjoEqaI55l2F_11cbor_encode:
   93|    289|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    289|        Deserializer { reader }
   95|    289|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer17deserialize_bytesNtNtCs2Z7SHDr5kAs_14cs_serde_bytes7bytebuf14ByteBufVisitorECsjoEqaI55l2F_11cbor_encode:
  228|    578|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    578|    where
  230|    578|        V: Visitor<'de>,
  231|    578|    {
  232|    578|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    578|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    578|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsjoEqaI55l2F_11cbor_encode:
  142|    289|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    289|        where V: Visitor<'de>
  144|    289|        {
  145|    289|            let value = <$t>::decode(&mut self.reader)?;
  146|    289|            visitor.$visit(value)
  147|    289|        }
_RNvMs1_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderE5tupleCsjoEqaI55l2F_11cbor_encode:
  443|    289|    pub fn tuple(
  444|    289|        de: &'a mut Deserializer<R>,
  445|    289|        len: usize,
  446|    289|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    289|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    289|        if array_start.0 == Some(len) {
  450|    289|            Ok(Accessor {
  451|    289|                de,
  452|    289|                len: array_start.0,
  453|    289|            })
  454|       |        } else {
  455|      0|            Err(DecodeError::RequireLength {
  456|      0|                name: "tuple",
  457|      0|                expect: len,
  458|      0|                value: array_start.0.unwrap_or(0),
  459|      0|            })
  460|       |        }
  461|    289|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsjoEqaI55l2F_11cbor_encode:
  344|    289|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    289|    where
  346|    289|        V: Visitor<'de>,
  347|    289|    {
  348|    289|        let mut de = self.try_step()?;
  349|    289|        let seq = Accessor::tuple(&mut de, len)?;
  350|    289|        visitor.visit_seq(seq)
  351|    289|    }
_RNvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess9size_hintCsjoEqaI55l2F_11cbor_encode:
  500|    289|    fn size_hint(&self) -> Option<usize> {
  501|    289|        self.len
  502|    289|    }
_RNCNvMs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderE8try_step0CsjoEqaI55l2F_11cbor_encode:
  106|    578|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvMs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs30zCv4Bdlrf_3cid5serdeINtNtB2l_3cid3CidKpENtNtCshDWiYiO71ov_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsjoEqaI55l2F_11cbor_encode:
  113|    289|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    289|    where
  115|    289|        V: Visitor<'de>,
  116|    289|    {
  117|    289|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    289|        match tag.0 {
  120|    289|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    289|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess17next_element_seedINtNtCs8nQMPxM1bM1_4core6marker11PhantomDatayEECsjoEqaI55l2F_11cbor_encode:
  484|    289|        if let Some(len) = self.len.as_mut() {
  485|    289|            if *len > 0 {
  486|    289|                *len -= 1;
  487|    289|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    289|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess17next_element_seedINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEECsjoEqaI55l2F_11cbor_encode:
  484|  3.22k|        if let Some(len) = self.len.as_mut() {
  485|  3.22k|            if *len > 0 {
  486|  2.93k|                *len -= 1;
  487|  2.93k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    289|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  3.22k|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer20deserialize_byte_bufNtNtCs2Z7SHDr5kAs_14cs_serde_bytes7bytebuf14ByteBufVisitorECsjoEqaI55l2F_11cbor_encode:
  239|    578|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    578|    where
  241|    578|        V: Visitor<'de>,
  242|    578|    {
  243|    578|        self.deserialize_bytes(visitor)
  244|    578|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess17next_element_seedINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataINtNtCs30zCv4Bdlrf_3cid3cid3CidKj40_EEECsjoEqaI55l2F_11cbor_encode:
  484|    289|        if let Some(len) = self.len.as_mut() {
  485|    289|            if *len > 0 {
  486|    289|                *len -= 1;
  487|    289|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    289|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess17next_element_seedINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEEECsjoEqaI55l2F_11cbor_encode:
  484|    289|        if let Some(len) = self.len.as_mut() {
  485|    289|            if *len > 0 {
  486|    289|                *len -= 1;
  487|    289|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    289|    }
_RINvNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de10from_sliceNtNtCsgc4whDaiAIc_11common_fuzz4cbor7PayloadECsjoEqaI55l2F_11cbor_encode:
   40|    289|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    289|where
   42|    289|    T: de::Deserialize<'a>,
   43|    289|{
   44|    289|    let reader = SliceReader::new(buf);
   45|    289|    let mut deserializer = Deserializer::from_reader(reader);
   46|    289|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    289|    deserializer.end()?;
   48|    289|    Ok(value)
   49|    289|}
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsjoEqaI55l2F_11cbor_encode:
  354|    289|    fn deserialize_tuple_struct<V>(
  355|    289|        self,
  356|    289|        _name: &'static str,
  357|    289|        len: usize,
  358|    289|        visitor: V,
  359|    289|    ) -> Result<V::Value, Self::Error>
  360|    289|    where
  361|    289|        V: Visitor<'de>,
  362|    289|    {
  363|    289|        self.deserialize_tuple(len, visitor)
  364|    289|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderENtNtCshDWiYiO71ov_5serde2de9SeqAccess17next_element_seedINtNtCs8nQMPxM1bM1_4core6marker11PhantomDataNtCsj3FDuS9qebQ_17fvm_ipld_bitfield8BitFieldEECsjoEqaI55l2F_11cbor_encode:
  484|    289|        if let Some(len) = self.len.as_mut() {
  485|    289|            if *len > 0 {
  486|    289|                *len -= 1;
  487|    289|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    289|    }
_RNvMs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderE3endCsjoEqaI55l2F_11cbor_encode:
  131|    289|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    289|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    289|    }
_RNvMs1_NtCs63RvXzuJsWk_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderE5arrayCsjoEqaI55l2F_11cbor_encode:
  434|    289|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    289|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    289|        Ok(Accessor {
  437|    289|            de,
  438|    289|            len: array_start.0,
  439|    289|        })
  440|    289|    }

_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs3KUlNeP7sSg_5alloc3vec3VecNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressEECsjoEqaI55l2F_11cbor_encode:
  403|    578|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    578|        value.serialize(&mut *self.ser)
  405|    578|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsjoEqaI55l2F_11cbor_encode:
  403|    578|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    578|        value.serialize(&mut *self.ser)
  405|    578|    }
_RNvXs7_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer15serialize_bytesCsjoEqaI55l2F_11cbor_encode:
  550|    578|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    578|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    578|        let prefixed = [&[0x00], value].concat();
  553|    578|        // CIDs are serialized with CBOR tag 42.
  554|    578|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    578|        Ok(())
  556|    578|    }
_RNvXs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer15serialize_tupleCsjoEqaI55l2F_11cbor_encode:
  239|    578|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    578|        Ok(BoundedCollect { ser: self })
  241|    578|    }
_RNvXs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer13serialize_seqCsjoEqaI55l2F_11cbor_encode:
  226|    578|        if let Some(len) = len {
  227|    578|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    578|        Ok(Collect {
  232|    578|            bounded: len.is_some(),
  233|    578|            ser: self,
  234|    578|        })
  235|    578|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs30zCv4Bdlrf_3cid3cid3CidKj40_EECsjoEqaI55l2F_11cbor_encode:
  403|    578|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    578|        value.serialize(&mut *self.ser)
  405|    578|    }
_RINvXs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer24serialize_newtype_structNtNtCsbVtpw7aOahV_11serde_bytes7bytebuf7ByteBufECsjoEqaI55l2F_11cbor_encode:
  199|    578|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    578|        self,
  201|    578|        name: &'static str,
  202|    578|        value: &T,
  203|    578|    ) -> Result<Self::Ok, Self::Error> {
  204|    578|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    578|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    578|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsj3FDuS9qebQ_17fvm_ipld_bitfield8BitFieldECsjoEqaI55l2F_11cbor_encode:
  403|    578|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    578|        value.serialize(&mut *self.ser)
  405|    578|    }
_RNvXs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer13serialize_u64CsjoEqaI55l2F_11cbor_encode:
  123|    578|        v.encode(&mut self.writer)?;
  124|    578|        Ok(())
  125|    578|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsjoEqaI55l2F_11cbor_encode:
  403|    578|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    578|        value.serialize(&mut *self.ser)
  405|    578|    }
_RNvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct3endCsjoEqaI55l2F_11cbor_encode:
  408|    578|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    578|        Ok(())
  410|    578|    }
_RINvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser12SerializeSeq17serialize_elementRNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressECsjoEqaI55l2F_11cbor_encode:
  369|  5.29k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  5.29k|        value.serialize(&mut *self.ser)
  371|  5.29k|    }
_RNvXs0_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser12SerializeSeq3endCsjoEqaI55l2F_11cbor_encode:
  374|    578|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    578|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    578|        }
  378|       |
  379|    578|        Ok(())
  380|    578|    }
_RNvMNtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterE3newCsjoEqaI55l2F_11cbor_encode:
   51|    578|    pub fn new(writer: W) -> Serializer<W> {
   52|    578|        Serializer { writer }
   53|    578|    }
_RNvXs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer15serialize_bytesCsjoEqaI55l2F_11cbor_encode:
  160|  7.60k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  7.60k|        Ok(())
  162|  7.60k|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsakP7W5fNNoL_10fvm_shared7address7AddressECsjoEqaI55l2F_11cbor_encode:
  403|    578|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    578|        value.serialize(&mut *self.ser)
  405|    578|    }
_RINvNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser6to_vecNtNtCsgc4whDaiAIc_11common_fuzz4cbor7PayloadECsjoEqaI55l2F_11cbor_encode:
   23|    578|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    578|where
   25|    578|    T: Serialize + ?Sized,
   26|    578|{
   27|    578|    let writer = BufWriter::new(Vec::new());
   28|    578|    let mut serializer = Serializer::new(writer);
   29|    578|    value.serialize(&mut serializer)?;
   30|    578|    Ok(serializer.into_inner().into_inner())
   31|    578|}
_RNvXs_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser10Serializer22serialize_tuple_structCsjoEqaI55l2F_11cbor_encode:
  244|    578|    fn serialize_tuple_struct(
  245|    578|        self,
  246|    578|        _name: &'static str,
  247|    578|        len: usize,
  248|    578|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    578|        self.serialize_tuple(len)
  250|    578|    }
_RINvXs2_NtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterENtNtCshDWiYiO71ov_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsgc4whDaiAIc_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsjoEqaI55l2F_11cbor_encode:
  403|    578|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    578|        value.serialize(&mut *self.ser)
  405|    578|    }
_RNvMNtCs63RvXzuJsWk_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterE10into_innerCsjoEqaI55l2F_11cbor_encode:
   56|    578|    pub fn into_inner(self) -> W {
   57|    578|        self.writer
   58|    578|    }

_RINvXs_Cs8QKqRNCJbQP_11serde_tupleINtB5_12DeserializerQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEENtNtCshDWiYiO71ov_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsjoEqaI55l2F_11cbor_encode:
  353|    289|    fn deserialize_tuple_struct<V>(
  354|    289|        self,
  355|    289|        name: &'static str,
  356|    289|        len: usize,
  357|    289|        visitor: V,
  358|    289|    ) -> Result<V::Value, Self::Error>
  359|    289|    where
  360|    289|        V: serde::de::Visitor<'de>,
  361|    289|    {
  362|    289|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    289|    }
_RNvXCs8QKqRNCJbQP_11serde_tupleINtB2_10SerializerQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEENtNtCshDWiYiO71ov_5serde3ser10Serializer22serialize_tuple_structCsjoEqaI55l2F_11cbor_encode:
  158|    578|    fn serialize_tuple_struct(
  159|    578|        self,
  160|    578|        name: &'static str,
  161|    578|        len: usize,
  162|    578|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    578|        self.0.serialize_tuple_struct(name, len)
  164|    578|    }

_RNvNtCs6N0WcWDwkGo_15unsigned_varint6decode7is_lastCsjoEqaI55l2F_11cbor_encode:
   90|  3.42k|pub fn is_last(b: u8) -> bool {
   91|  3.42k|    b & 0x80 == 0
   92|  3.42k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6decode3u64CsjoEqaI55l2F_11cbor_encode:
  122|  1.13k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.13k|    decode!(buf, 9, u64)
  124|  1.13k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6decode3u64CsakP7W5fNNoL_10fvm_shared:
  122|  1.94k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.94k|    decode!(buf, 9, u64)
  124|  1.94k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6decode7is_lastCsakP7W5fNNoL_10fvm_shared:
   90|  15.0k|pub fn is_last(b: u8) -> bool {
   91|  15.0k|    b & 0x80 == 0
   92|  15.0k|}

_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode9u8_bufferCsjoEqaI55l2F_11cbor_encode:
  101|    578|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    578|    [0; U8_LEN]
  103|    578|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode10u64_bufferCsjoEqaI55l2F_11cbor_encode:
  119|  2.83k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  2.83k|    [0; U64_LEN]
  121|  2.83k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode2u8CsjoEqaI55l2F_11cbor_encode:
   45|    578|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    578|    encode!(number, buf)
   47|    578|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode3u64CsjoEqaI55l2F_11cbor_encode:
   69|  1.69k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.69k|    encode!(number, buf)
   71|  1.69k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode10u64_bufferCsakP7W5fNNoL_10fvm_shared:
  119|  3.88k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.88k|    [0; U64_LEN]
  121|  3.88k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode3u64CsakP7W5fNNoL_10fvm_shared:
   69|  3.88k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  3.88k|    encode!(number, buf)
   71|  3.88k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode10u64_bufferCsj3FDuS9qebQ_17fvm_ipld_bitfield:
  119|  6.79k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  6.79k|    [0; U64_LEN]
  121|  6.79k|}
_RNvNtCs6N0WcWDwkGo_15unsigned_varint6encode3u64Csj3FDuS9qebQ_17fvm_ipld_bitfield:
   69|  6.79k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  6.79k|    encode!(number, buf)
   71|  6.79k|}

_RINvNtCs6N0WcWDwkGo_15unsigned_varint2io8read_u64QQRShECsjoEqaI55l2F_11cbor_encode:
   31|  1.13k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.13k|                let mut b = encode::$b();
   33|  1.71k|                for i in 0 .. b.len() {
   34|  1.71k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.71k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.71k|                    }
   38|  1.71k|                    if decode::is_last(b[i]) {
   39|  1.13k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    574|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.13k|            }


_RNvXse_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  6.13k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.13k|        let next = self.next.take()?;
  483|  6.13k|        self.next = self.iter.next();
  484|  6.13k|        Some(next)
  485|  6.13k|    }
_RNvXs6_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.03k|        self.0.next()
  312|  7.03k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.03k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.03k|        self.next.as_mut()
  474|  7.03k|    }
_RNvMs8_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  7.03k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.03k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  6.13k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    901|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  6.13k|        if advance_lhs {
  370|  6.13k|            self.lhs.next();
  371|  6.13k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  6.13k|        range
  376|  7.03k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  14.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  14.0k|        self.next.as_mut()
  474|  14.0k|    }
_RNvXs9_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.03k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.03k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.03k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  6.13k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.13k|        self.next.as_mut()
  474|  6.13k|    }
_RNvXs6_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  311|  7.03k|        self.0.next()
  312|  7.03k|    }
_RNCNvXs9_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  6.13k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    901|    fn new(mut iter: I) -> Self {
  468|    901|        let next = iter.next();
  469|    901|        Self { iter, next }
  470|    901|    }
_RNCNvXs9_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  7.03k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsa_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    901|    pub fn new(iter: I) -> Self {
  425|    901|        Self {
  426|    901|            iter: Lookahead::new(iter),
  427|    901|        }
  428|    901|    }
_RNvMs5_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    901|    pub fn new(a: A, b: B) -> Self {
  298|    901|        Self(Merge::new(_Combine::new(a, b)))
  299|    901|    }
_RNCNvXs9_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  6.13k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  7.03k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs5_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    901|    pub fn new(a: A, b: B) -> Self {
  298|    901|        Self(Merge::new(_Combine::new(a, b)))
  299|    901|    }
_RNvXsh_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs8nQMPxM1bM1_4core7default7Default7defaultB9_:
  151|    901|#[derive(Default)]
_RNvMs8_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  7.03k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.03k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  6.13k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    901|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  6.13k|        if advance_lhs {
  370|  6.13k|            self.lhs.next();
  371|  6.13k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  6.13k|        range
  376|  7.03k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  6.13k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.13k|        self.next.as_mut()
  474|  6.13k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    901|    fn new(mut iter: I) -> Self {
  468|    901|        let next = iter.next();
  469|    901|        Self { iter, next }
  470|    901|    }
_RNvXse_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  6.13k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.13k|        let next = self.next.take()?;
  483|  6.13k|        self.next = self.iter.next();
  484|  6.13k|        Some(next)
  485|  6.13k|    }
_RNvMsa_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    901|    pub fn new(iter: I) -> Self {
  425|    901|        Self {
  426|    901|            iter: Lookahead::new(iter),
  427|    901|        }
  428|    901|    }
_RNvMs8_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    901|    fn new(lhs: A, rhs: B) -> Self {
  343|    901|        Self {
  344|    901|            lhs: Lookahead::new(lhs),
  345|    901|            rhs: Lookahead::new(rhs),
  346|    901|            combinator: Default::default(),
  347|    901|        }
  348|    901|    }
_RNvXs0_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  6.13k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  6.13k|        // the difference between a range and an empty range is just that range
  183|  6.13k|        Some(lhs)
  184|  6.13k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  7.03k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.03k|        self.next.as_mut()
  474|  7.03k|    }
_RNvXsb_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.03k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  6.13k|        while let Some(next) = self.iter.peek() {
  443|  5.70k|            if next.start > range.end {
  444|  5.70k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  6.13k|        Some(range)
  452|  7.03k|    }
_RNvXse_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.03k|        let next = self.next.take()?;
  483|  6.13k|        self.next = self.iter.next();
  484|  6.13k|        Some(next)
  485|  7.03k|    }
_RNvXsf_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs8nQMPxM1bM1_4core7default7Default7defaultB9_:
   86|    901|#[derive(Default)]
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    901|    fn new(mut iter: I) -> Self {
  468|    901|        let next = iter.next();
  469|    901|        Self { iter, next }
  470|    901|    }
_RNvXs9_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  388|  7.03k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  7.03k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  7.03k|    }
_RNvXse_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.03k|        let next = self.next.take()?;
  483|  6.13k|        self.next = self.iter.next();
  484|  6.13k|        Some(next)
  485|  7.03k|    }
_RNvMs8_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    901|    fn new(lhs: A, rhs: B) -> Self {
  343|    901|        Self {
  344|    901|            lhs: Lookahead::new(lhs),
  345|    901|            rhs: Lookahead::new(rhs),
  346|    901|            combinator: Default::default(),
  347|    901|        }
  348|    901|    }
_RNvXsb_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  438|  7.03k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  6.13k|        while let Some(next) = self.iter.peek() {
  443|  5.70k|            if next.start > range.end {
  444|  5.70k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  6.13k|        Some(range)
  452|  7.03k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|  1.80k|    fn new(mut iter: I) -> Self {
  468|  1.80k|        let next = iter.next();
  469|  1.80k|        Self { iter, next }
  470|  1.80k|    }
_RNvXNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  6.13k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  6.13k|        // the union of a range and an empty range is just that range
  111|  6.13k|        Some(lhs)
  112|  6.13k|    }
_RNvMsd_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    901|    fn new(mut iter: I) -> Self {
  468|    901|        let next = iter.next();
  469|    901|        Self { iter, next }
  470|    901|    }

_RINvMs2_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    901|    pub fn new<II>(iter: II) -> Self
  140|    901|    where
  141|    901|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    901|    {
  143|    901|        Self(iter.into_iter())
  144|    901|    }
_RINvMs2_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  1.80k|    pub fn new<II>(iter: II) -> Self
  140|  1.80k|    where
  141|  1.80k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  1.80k|    {
  143|  1.80k|        Self(iter.into_iter())
  144|  1.80k|    }
_RINvYINtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    901|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    901|        Combine::new(self, other)
   23|    901|    }
_RNvXs3_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  7.03k|    fn next(&mut self) -> Option<Self::Item> {
  154|  7.03k|        self.0.next()
  155|  7.03k|    }
_RINvYINtNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    901|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    901|        Combine::new(self, other)
   33|    901|    }
_RNCINvNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  1.80k|    Ranges::new(iter::from_fn(move || {
  167|  1.80k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  1.80k|    }))
_RNvXs3_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs8nQMPxM1bM1_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  1.80k|    fn next(&mut self) -> Option<Self::Item> {
  154|  1.80k|        self.0.next()
  155|  1.80k|    }
_RINvNtCsj3FDuS9qebQ_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs8nQMPxM1bM1_4core4iter8adapters6copied6CopiedINtNtNtNtCs3KUlNeP7sSg_5alloc11collections5btree3set4IteryEEEB4_:
  163|  1.80k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  1.80k|    let mut iter = bits.into_iter().peekable();
  165|  1.80k|
  166|  1.80k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  1.80k|    }))
  180|  1.80k|}

_RNvXsi_Csj3FDuS9qebQ_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs8nQMPxM1bM1_4core7default7Default7defaultB5_:
   42|  1.06k|#[derive(Debug, Default, Clone)]
_RNvMs4_Csj3FDuS9qebQ_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    901|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    901|        self.inner_ranges()
  287|    901|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    901|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    901|    }
_RNvMs4_Csj3FDuS9qebQ_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    901|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    901|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    901|    }

_RNvXNtCsj3FDuS9qebQ_17fvm_ipld_bitfield5rangeINtNtNtCs8nQMPxM1bM1_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  6.13k|    fn size(&self) -> Self::Idx {
   15|  6.13k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  6.13k|            self.end - self.start
   19|       |        }
   20|  6.13k|    }

_RINvXNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCshDWiYiO71ov_5serde3ser9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   81|    728|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    728|    where
   83|    728|        S: Serializer,
   84|    728|    {
   85|    728|        let bytes = self.to_bytes();
   86|    728|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    728|        }
   92|    728|        serde_bytes::serialize(&bytes, serializer)
   93|    728|    }
_RINvXs_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   97|    289|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    289|    where
   99|    289|        D: Deserializer<'de>,
  100|    289|    {
  101|    289|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    289|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    289|        }
  108|    289|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    289|    }
_RNvMs1_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    289|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    289|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    289|        let version = reader.read(2);
  160|    289|        if version != 0 {
  161|      0|            return Err(Error::UnsupportedVersion);
  162|    289|        }
  163|    289|
  164|    289|        let mut next_value = reader.read(1) == 1;
  165|    289|        let mut ranges = Vec::new();
  166|    289|        let mut index = 0u64;
  167|    289|        let mut total_len: u64 = 0;
  168|       |
  169|  5.84k|        while let Some(len) = reader.read_len()? {
  170|  5.55k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  5.55k|            if ovf {
  172|      0|                return Err(Error::RLEOverflow);
  173|  5.55k|            }
  174|  5.55k|            total_len = new_total_len;
  175|  5.55k|            let start = index;
  176|  5.55k|            index += len;
  177|  5.55k|            let end = index;
  178|  5.55k|
  179|  5.55k|            if next_value {
  180|  2.81k|                ranges.push(start..end);
  181|  2.81k|            }
  182|       |
  183|  5.55k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    289|        if next_value {
  189|      0|            return Err(Error::NotMinimal);
  190|    289|        }
  191|    289|
  192|    289|        Ok(Self {
  193|    289|            ranges,
  194|    289|            ..Default::default()
  195|    289|        })
  196|    289|    }
_RNvXs0_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary:
  113|    772|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|    772|        let mut next_value: bool = bool::arbitrary(u)?;
  115|    772|        let mut ranges = Vec::new();
  116|    772|        let mut index = 0u64;
  117|    772|        let mut total_len: u64 = 0;
  118|       |
  119|    772|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|    772|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  7.50k|            let len = u64::arbitrary(u)?;
  124|  7.50k|            let shift = u.int_in_range(0..=63)?;
  125|  7.50k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  7.50k|
  127|  7.50k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  7.50k|            if ovf {
  129|     23|                break;
  130|  7.48k|            }
  131|  7.48k|            total_len = new_total_len;
  132|  7.48k|            let start = index;
  133|  7.48k|            index += len;
  134|  7.48k|            let end = index;
  135|  7.48k|
  136|  7.48k|            if next_value {
  137|  3.77k|                ranges.push(start..end);
  138|  3.77k|            }
  139|       |
  140|  7.48k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|    772|        Ok(Self {
  144|    772|            ranges,
  145|    772|            ..Default::default()
  146|    772|        })
  147|    772|    }
_RNvXs0_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hint:
  149|    774|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    774|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    774|    }
_RNvMs1_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    901|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    901|        let mut iter = self.ranges();
  201|       |
  202|    901|        let first_range = match iter.next() {
  203|    429|            Some(range) => range,
  204|    472|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    429|        let mut writer = BitWriter::new();
  208|    429|        writer.write(0, 2); // version 00
  209|    429|
  210|    429|        if first_range.start == 0 {
  211|    199|            writer.write(1, 1); // the first bit is a 1
  212|    230|        } else {
  213|    230|            writer.write(0, 1); // the first bit is a 0
  214|    230|            writer.write_len(first_range.start); // the number of leading 0s
  215|    230|        }
  216|       |
  217|    429|        writer.write_len(first_range.size());
  218|    429|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  6.13k|        for range in iter {
  223|  5.70k|            writer.write_len(range.start - index); // zeros
  224|  5.70k|            writer.write_len(range.size()); // ones
  225|  5.70k|            index = range.end;
  226|  5.70k|        }
  227|       |
  228|    429|        writer.finish()
  229|    901|    }

_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  22.5k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  22.5k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  22.5k|        let mask = (1 << num_bits) - 1;
   55|  22.5k|        (self.bits & mask) as u8
   56|  22.5k|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  5.84k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  5.84k|        // We're done.
  120|  5.84k|        if !self.has_more() {
  121|    289|            return Ok(None);
  122|  5.55k|        }
  123|  5.55k|
  124|  5.55k|        let peek6 = self.peek(6);
  125|       |
  126|  5.55k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|    977|            self.drop(1);
  129|    977|            1
  130|  4.57k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  1.57k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  1.57k|            self.drop(6);
  134|  1.57k|            if val < 2 {
  135|      0|                return Err(Error::NotMinimal);
  136|  1.57k|            }
  137|  1.57k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  3.00k|            self.drop(2);
  141|  3.00k|            let val = self.read_varint()?;
  142|  3.00k|            if val < 16 {
  143|      0|                return Err(Error::NotMinimal);
  144|  3.00k|            }
  145|  3.00k|            val
  146|       |        };
  147|       |
  148|  5.55k|        Ok(Some(len))
  149|  5.84k|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  5.84k|    pub fn has_more(&self) -> bool {
  153|  5.84k|        self.bits != 0 || !self.bytes.is_empty()
  154|  5.84k|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    289|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    289|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    289|        // data.
   28|    289|        if bytes.last() == Some(&0) {
   29|      0|            return Err(Error::NotMinimal);
   30|    289|        }
   31|    289|        let mut bits = 0u64;
   32|    867|        for i in 0..2 {
   33|    578|            let byte = bytes.get(i).unwrap_or(&0);
   34|    578|            bits |= (*byte as u64) << (8 * i);
   35|    578|        }
   36|       |
   37|    289|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    289|
   39|    289|        Ok(Self {
   40|    289|            bytes,
   41|    289|            bits,
   42|    289|            num_bits: 16,
   43|    289|        })
   44|    289|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  3.00k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  3.00k|        let mut len = 0u64;
   94|       |
   95|  16.4k|        for i in 0..VARINT_MAX_BYTES {
   96|  16.4k|            let byte = self.read(8);
   97|  16.4k|
   98|  16.4k|            // strip off the most significant bit and add
   99|  16.4k|            // it to the output
  100|  16.4k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  16.4k|
  102|  16.4k|            // if the most significant bit is a 0, we've
  103|  16.4k|            // reached the end of the varint
  104|  16.4k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  3.00k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      0|                    break;
  109|  3.00k|                }
  110|  3.00k|                return Ok(len);
  111|  13.4k|            }
  112|       |        }
  113|       |
  114|      0|        Err(Error::InvalidVarint)
  115|  3.00k|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  17.0k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  17.0k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  17.0k|        let res = self.peek(num_bits);
   85|  17.0k|        self.drop(num_bits);
   86|  17.0k|
   87|  17.0k|        res
   88|  17.0k|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  22.5k|    pub fn drop(&mut self, num_bits: u32) {
   61|  22.5k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  22.5k|        self.bits >>= num_bits;
   65|  22.5k|        self.num_bits -= num_bits;
   66|  22.5k|
   67|  22.5k|        // not sure why this being outside of the if improves the performance
   68|  22.5k|        // bit it does, probably related to keeping caches warm
   69|  22.5k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  22.5k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  22.5k|
   72|  22.5k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  22.5k|        if self.num_bits < 8 {
   74|  18.4k|            self.num_bits += 8;
   75|  18.4k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  18.4k|        }
   77|  22.5k|    }

_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    429|    pub fn finish(mut self) -> Vec<u8> {
   61|    429|        if self.bits > 0 {
   62|    217|            self.bytes.push(self.bits as u8);
   63|    217|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    429|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    429|        self.bytes
   71|    429|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  12.0k|    pub fn write_len(&mut self, len: u64) {
   39|  12.0k|        debug_assert!(len > 0);
   40|       |
   41|  12.0k|        if len == 1 {
   42|  2.02k|            // Block Single (prefix 1)
   43|  2.02k|            self.write(1, 1);
   44|  10.0k|        } else if len < 16 {
   45|  3.25k|            // Block Short (prefix 01)
   46|  3.25k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  3.25k|            self.write(len as u8, 4);
   48|  3.25k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  6.79k|            self.write(0, 2);
   51|  6.79k|
   52|  6.79k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  37.4k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  37.4k|                self.write(byte, 8);
   55|  37.4k|            }
   56|       |        }
   57|  12.0k|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  53.6k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  53.6k|        debug_assert!(num_bits <= 8);
   24|  53.6k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  53.6k|        self.bits |= (byte as u16) << self.num_bits;
   27|  53.6k|        self.num_bits += num_bits;
   28|  53.6k|
   29|  53.6k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  53.6k|        if self.num_bits >= 8 {
   31|  41.8k|            self.bytes.push(self.bits as u8);
   32|  41.8k|            self.bits >>= 8;
   33|  41.8k|            self.num_bits -= 8;
   34|  41.8k|        }
   35|  53.6k|    }
_RNvMNtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    429|    pub fn new() -> Self {
   18|    429|        Default::default()
   19|    429|    }
_RNvXs_NtNtCsj3FDuS9qebQ_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs8nQMPxM1bM1_4core7default7Default7defaultB8_:
    4|    429|#[derive(Default, Clone, Debug)]

_RINvXNvNtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCshDWiYiO71ov_5serde3ser9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   35|    578|#[derive(Debug, Serialize)]
_RINvXs4_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   93|    289|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    289|    where
   95|    289|        D: Deserializer<'de>,
   96|    289|    {
   97|    289|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    289|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    289|        }
  104|    289|        Ok(Self::Unvalidated(bytes))
  105|    289|    }
_RINvXNvXNvNtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCshDWiYiO71ov_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   35|    428|#[derive(Debug, Serialize)]
_RNvXs1_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hint:
   70|    387|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   71|    387|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   72|    387|    }
_RNvXs1_NtCsj3FDuS9qebQ_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary:
   61|    386|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   62|    386|        let bf: BitField = u.arbitrary()?;
   63|    386|        Ok(if *u.choose(&[true, false])? {
   64|    164|            Self::Validated(bf)
   65|       |        } else {
   66|    173|            Self::Unvalidated(bf.to_bytes())
   67|       |        })
   68|    386|    }

_RINvCseZNWl11qRBV_17fvm_ipld_encoding10from_sliceNtNtCsgc4whDaiAIc_11common_fuzz4cbor7PayloadECsjoEqaI55l2F_11cbor_encode:
   50|    289|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    289|where
   52|    289|    T: de::Deserialize<'a>,
   53|    289|{
   54|    289|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    289|}
_RINvCseZNWl11qRBV_17fvm_ipld_encoding6to_vecNtNtCsgc4whDaiAIc_11common_fuzz4cbor7PayloadECsjoEqaI55l2F_11cbor_encode:
   33|    578|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    578|where
   35|    578|    T: ser::Serialize + ?Sized,
   36|    578|{
   37|    578|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    578|}

_RINvXs3_NtCsakP7W5fNNoL_10fvm_shared7addressNtB6_7AddressNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
  274|  2.93k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  2.93k|    where
  276|  2.93k|        D: Deserializer<'de>,
  277|  2.93k|    {
  278|  2.93k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  2.93k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  2.93k|    }
_RINvXs2_NtCsakP7W5fNNoL_10fvm_shared7addressNtB6_7AddressNtNtCshDWiYiO71ov_5serde3ser9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
  264|  5.87k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|  5.87k|    where
  266|  5.87k|        S: Serializer,
  267|  5.87k|    {
  268|  5.87k|        let address_bytes = self.to_bytes();
  269|  5.87k|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|  5.87k|    }
_RNvXse_NtCsakP7W5fNNoL_10fvm_shared7addressNtB5_7AddressNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
   68|    387|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXse_NtCsakP7W5fNNoL_10fvm_shared7addressNtB7_7AddressNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
   68|    387|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXse_NtCsakP7W5fNNoL_10fvm_shared7addressNtB7_7AddressNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary0B9_:
   68|  3.49k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvNtCsakP7W5fNNoL_10fvm_shared7address14from_leb_bytes:
  315|  1.94k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|  1.94k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|  1.94k|    if !remaining.is_empty() {
  319|      0|        return Err(Error::InvalidPayload);
  320|  1.94k|    }
  321|  1.94k|    Ok(id)
  322|  1.94k|}
_RNvMs_NtCsakP7W5fNNoL_10fvm_shared7addressNtB4_7Address3new:
   78|  2.93k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  2.93k|        Ok(Self {
   80|  2.93k|            network,
   81|  2.93k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  2.93k|    }
_RNvNtCsakP7W5fNNoL_10fvm_shared7address12to_leb_bytes:
  310|  3.88k|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|  3.88k|    // write id to buffer in leb128 format
  312|  3.88k|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|  3.88k|}
_RNvMs_NtCsakP7W5fNNoL_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  2.93k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  2.93k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  2.93k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  2.93k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  2.93k|    }
_RNvXse_NtCsakP7W5fNNoL_10fvm_shared7addressNtB5_7AddressNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary:
   68|  3.49k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs_NtCsakP7W5fNNoL_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|  5.87k|    pub fn to_bytes(self) -> Vec<u8> {
  177|  5.87k|        self.payload.to_bytes()
  178|  5.87k|    }
_RNCNvNvNtCsakP7W5fNNoL_10fvm_shared7address23RECURSIVE_COUNT_Address7___getit0B7_:
   68|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNvXs8_NtNtCsakP7W5fNNoL_10fvm_shared7address7networkNtB5_7NetworkNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
    8|    387|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXs8_NtNtCsakP7W5fNNoL_10fvm_shared7address7networkNtB7_7NetworkNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
    8|    387|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs8_NtNtCsakP7W5fNNoL_10fvm_shared7address7networkNtB5_7NetworkNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary:
    8|  3.49k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXs8_NtNtCsakP7W5fNNoL_10fvm_shared7address7networkNtB7_7NetworkNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary0Bb_:
    8|  3.49k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNtNtCsakP7W5fNNoL_10fvm_shared7address7network23RECURSIVE_COUNT_Network7___getit0B9_:
    8|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNCNvXs9_NtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtB7_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
   12|    387|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs9_NtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtB5_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
   12|    387|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXs9_NtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtB7_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary0Bb_:
   12|  3.49k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  2.93k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  2.93k|        let payload = match protocol {
   53|  1.94k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    522|                payload
   56|    522|                    .try_into()
   57|    522|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    157|                payload
   61|    157|                    .try_into()
   62|    157|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    316|                payload
   66|    316|                    .try_into()
   67|    316|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  2.93k|        Ok(payload)
   71|  2.93k|    }
_RNvMNtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|  5.87k|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|  5.87k|        let mut bz = match self {
   40|  3.88k|            ID(i) => to_leb_bytes(i).unwrap(),
   41|  1.04k|            Secp256k1(arr) => arr.to_vec(),
   42|    314|            Actor(arr) => arr.to_vec(),
   43|    632|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|  5.87k|        bz.insert(0, Protocol::from(self) as u8);
   47|  5.87k|        bz
   48|  5.87k|    }
_RNvXs_NtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCs8nQMPxM1bM1_4core7convert4FromNtB4_7PayloadE4from:
   75|  5.87k|    fn from(pl: Payload) -> Self {
   76|  5.87k|        match pl {
   77|  3.88k|            Payload::ID(_) => Self::ID,
   78|  1.04k|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|    314|            Payload::Actor(_) => Self::Actor,
   80|    632|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|  5.87k|    }
_RNvXs9_NtNtCsakP7W5fNNoL_10fvm_shared7address7payloadNtB5_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary9arbitrary:
   12|  3.49k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNtNtCsakP7W5fNNoL_10fvm_shared7address7payload23RECURSIVE_COUNT_Payload7___getit0B9_:
   12|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNvMNtNtCsakP7W5fNNoL_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  2.93k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  2.93k|        FromPrimitive::from_u8(b)
   28|  2.93k|    }
_RNvXNvNtNtCsakP7W5fNNoL_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsyZHWF3ZS3p_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  2.93k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCsakP7W5fNNoL_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsyZHWF3ZS3p_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  2.93k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RINvXNvXNvNvXs_NtCsgc4whDaiAIc_11common_fuzz4cborNtBd_7PayloadNtNtCshDWiYiO71ov_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   10|    578|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtBd_7PayloadNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de8AccessorNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEE0CsjoEqaI55l2F_11cbor_encode:
   10|    289|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCsgc4whDaiAIc_11common_fuzz4cborNtB5_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hintCsjoEqaI55l2F_11cbor_encode:
   10|    387|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXs0_NtCsgc4whDaiAIc_11common_fuzz4cborNtB7_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary9size_hint0CsjoEqaI55l2F_11cbor_encode:
   10|    387|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtBe_7PayloadNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   10|    289|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB3_7PayloadNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEECsjoEqaI55l2F_11cbor_encode:
   10|    289|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsgc4whDaiAIc_11common_fuzz4cborNtB8_7PayloadNtNtCshDWiYiO71ov_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs8QKqRNCJbQP_11serde_tuple12DeserializerQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor2de12DeserializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils11SliceReaderEEECsjoEqaI55l2F_11cbor_encode:
   10|    289|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCsgc4whDaiAIc_11common_fuzz4cborNtB5_7PayloadNtNtCshDWiYiO71ov_5serde3ser9Serialize9serializeQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEECsjoEqaI55l2F_11cbor_encode:
   10|    578|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsgc4whDaiAIc_11common_fuzz4cborNtBa_7PayloadNtNtCshDWiYiO71ov_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs8QKqRNCJbQP_11serde_tuple10SerializerQINtNtCs63RvXzuJsWk_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsaUGfnBpS3yR_7cbor4ii4core5utils9BufWriterEEECsjoEqaI55l2F_11cbor_encode:
   10|    578|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvNvNtCsgc4whDaiAIc_11common_fuzz4cbor23RECURSIVE_COUNT_Payload7___getit0B7_:
   10|      1|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXs0_NtCsgc4whDaiAIc_11common_fuzz4cborNtB7_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary19arbitrary_take_rest0B9_:
   10|    386|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCsgc4whDaiAIc_11common_fuzz4cborNtB5_7PayloadNtCsjtZfaKP97h6_9arbitrary9Arbitrary19arbitrary_take_rest:
   10|    386|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

