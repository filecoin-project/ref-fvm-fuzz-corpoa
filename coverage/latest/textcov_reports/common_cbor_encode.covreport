_RNvXsC_CsfqNTpL4djRT_9arbitraryhNtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  302|  43.8k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  43.8k|                    let n = mem::size_of::<$ty>();
  304|  43.8k|                    (n, Some(n))
  305|  43.8k|                }
_RINvCsfqNTpL4djRT_9arbitrary12create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9size_hint0TjINtNtCsUG827pA8ag_4core6option6OptionjEEKBR_ECsEXW0mRBWUw_11cbor_encode:
  596|    466|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    466|where
  598|    466|    F: FnMut(usize) -> T,
  599|    466|{
  600|    466|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    466|    let array_ptr = array.as_mut_ptr();
  602|    466|    let dst = array_ptr as _;
  603|    466|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    466|        dst,
  605|    466|        initialized: 0,
  606|    466|    };
  607|       |    unsafe {
  608|  22.3k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  22.3k|            core::ptr::write(value_ptr, cb(idx));
  610|  22.3k|            guard.initialized += 1;
  611|  22.3k|        }
  612|    466|        mem::forget(guard);
  613|    466|        array.assume_init()
  614|    466|    }
  615|    466|}
_RNvXs8_CsfqNTpL4djRT_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  657|    466|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    466|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    466|        }))
  661|    466|    }
_RNvXsa_CsfqNTpL4djRT_9arbitraryINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  690|    466|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    466|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    466|    }
_RINvCsfqNTpL4djRT_9arbitrary12create_arrayNCNvXs8_B2_Ahj2_NtB2_9Arbitrary9size_hint0TjINtNtCsUG827pA8ag_4core6option6OptionjEEKBR_ECsEXW0mRBWUw_11cbor_encode:
  596|    466|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    466|where
  598|    466|    F: FnMut(usize) -> T,
  599|    466|{
  600|    466|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    466|    let array_ptr = array.as_mut_ptr();
  602|    466|    let dst = array_ptr as _;
  603|    466|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    466|        dst,
  605|    466|        initialized: 0,
  606|    466|    };
  607|       |    unsafe {
  608|    932|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|    932|            core::ptr::write(value_ptr, cb(idx));
  610|    932|            guard.initialized += 1;
  611|    932|        }
  612|    466|        mem::forget(guard);
  613|    466|        array.assume_init()
  614|    466|    }
  615|    466|}
_RNvXs8_CsfqNTpL4djRT_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  657|    466|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    466|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    466|        }))
  661|    466|    }
_RNCNvXs8_CsfqNTpL4djRT_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
  658|  1.39k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  1.39k|            <T as Arbitrary>::size_hint(d)
  660|  1.39k|        }))
_RNCNvXs8_CsfqNTpL4djRT_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
  658|  22.3k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  22.3k|            <T as Arbitrary>::size_hint(d)
  660|  22.3k|        }))
_RNvXs8_CsfqNTpL4djRT_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  657|    466|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    466|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    466|        }))
  661|    466|    }
_RINvCsfqNTpL4djRT_9arbitrary12create_arrayNCNvXs8_B2_Ahj3_NtB2_9Arbitrary9size_hint0TjINtNtCsUG827pA8ag_4core6option6OptionjEEKBR_ECsEXW0mRBWUw_11cbor_encode:
  596|    466|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    466|where
  598|    466|    F: FnMut(usize) -> T,
  599|    466|{
  600|    466|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    466|    let array_ptr = array.as_mut_ptr();
  602|    466|    let dst = array_ptr as _;
  603|    466|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    466|        dst,
  605|    466|        initialized: 0,
  606|    466|    };
  607|       |    unsafe {
  608|  1.39k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  1.39k|            core::ptr::write(value_ptr, cb(idx));
  610|  1.39k|            guard.initialized += 1;
  611|  1.39k|        }
  612|    466|        mem::forget(guard);
  613|    466|        array.assume_init()
  614|    466|    }
  615|    466|}
_RINvCsfqNTpL4djRT_9arbitrary12create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9size_hint0TjINtNtCsUG827pA8ag_4core6option6OptionjEEKBR_ECsEXW0mRBWUw_11cbor_encode:
  596|    932|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    932|where
  598|    932|    F: FnMut(usize) -> T,
  599|    932|{
  600|    932|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    932|    let array_ptr = array.as_mut_ptr();
  602|    932|    let dst = array_ptr as _;
  603|    932|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    932|        dst,
  605|    932|        initialized: 0,
  606|    932|    };
  607|       |    unsafe {
  608|  18.6k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  18.6k|            core::ptr::write(value_ptr, cb(idx));
  610|  18.6k|            guard.initialized += 1;
  611|  18.6k|        }
  612|    932|        mem::forget(guard);
  613|    932|        array.assume_init()
  614|    932|    }
  615|    932|}
_RNvXsH_CsfqNTpL4djRT_9arbitraryjNtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  302|    932|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    932|                    let n = mem::size_of::<$ty>();
  304|    932|                    (n, Some(n))
  305|    932|                }
_RNvXsE_CsfqNTpL4djRT_9arbitrarymNtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  302|    932|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    932|                    let n = mem::size_of::<$ty>();
  304|    932|                    (n, Some(n))
  305|    932|                }
_RNvXsa_CsfqNTpL4djRT_9arbitraryINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  690|    466|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    466|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    466|    }
_RNvXsF_CsfqNTpL4djRT_9arbitraryyNtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  302|    932|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    932|                    let n = mem::size_of::<$ty>();
  304|    932|                    (n, Some(n))
  305|    932|                }
_RNCNvXs8_CsfqNTpL4djRT_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
  658|    932|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|    932|            <T as Arbitrary>::size_hint(d)
  660|    932|        }))
_RNvXs8_CsfqNTpL4djRT_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
  657|    932|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    932|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    932|        }))
  661|    932|    }
_RNCNvXs8_CsfqNTpL4djRT_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
  658|  18.6k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  18.6k|            <T as Arbitrary>::size_hint(d)
  660|  18.6k|        }))
_RNvYINtNtCskhitFtkqptf_3cid3cid3CidKj40_ENtCsfqNTpL4djRT_9arbitrary9Arbitrary19arbitrary_take_restCskxbexpPPvyf_11common_fuzz:
  182|    413|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    413|        Self::arbitrary(&mut u)
  184|    413|    }
_RNvXsa_CsfqNTpL4djRT_9arbitraryINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCskxbexpPPvyf_11common_fuzz:
  682|    465|        u.arbitrary_iter()?.collect()
  683|    465|    }
_RNvXsa_CsfqNTpL4djRT_9arbitraryINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCskxbexpPPvyf_11common_fuzz:
  682|    465|        u.arbitrary_iter()?.collect()
  683|    465|    }
_RNCNvXs8_CsfqNTpL4djRT_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Csg5M8PL4Ya9o_10fvm_shared:
  644|  29.7k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs8_CsfqNTpL4djRT_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCsg5M8PL4Ya9o_10fvm_shared:
  643|  1.48k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|  1.48k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|  1.48k|    }
_RNCNvXs8_CsfqNTpL4djRT_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Csg5M8PL4Ya9o_10fvm_shared:
  644|  19.7k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs8_CsfqNTpL4djRT_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCsg5M8PL4Ya9o_10fvm_shared:
  643|    411|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    411|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    411|    }
_RINvCsfqNTpL4djRT_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECsg5M8PL4Ya9o_10fvm_shared:
  617|    411|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    411|where
  619|    411|    F: FnMut(usize) -> Result<T>,
  620|    411|{
  621|    411|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    411|    let array_ptr = array.as_mut_ptr();
  623|    411|    let dst = array_ptr as _;
  624|    411|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    411|        dst,
  626|    411|        initialized: 0,
  627|    411|    };
  628|       |    unsafe {
  629|  19.7k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  19.7k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  19.7k|            guard.initialized += 1;
  632|       |        }
  633|    411|        mem::forget(guard);
  634|    411|        Ok(array.assume_init())
  635|       |    }
  636|    411|}
_RINvCsfqNTpL4djRT_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECsg5M8PL4Ya9o_10fvm_shared:
  617|  1.48k|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|  1.48k|where
  619|  1.48k|    F: FnMut(usize) -> Result<T>,
  620|  1.48k|{
  621|  1.48k|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|  1.48k|    let array_ptr = array.as_mut_ptr();
  623|  1.48k|    let dst = array_ptr as _;
  624|  1.48k|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|  1.48k|        dst,
  626|  1.48k|        initialized: 0,
  627|  1.48k|    };
  628|       |    unsafe {
  629|  29.7k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  29.7k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  29.7k|            guard.initialized += 1;
  632|       |        }
  633|  1.48k|        mem::forget(guard);
  634|  1.48k|        Ok(array.assume_init())
  635|       |    }
  636|  1.48k|}
_RNvXsF_CsfqNTpL4djRT_9arbitraryyNtB5_9Arbitrary9size_hintCssVkL66IuLW_17fvm_ipld_bitfield:
  302|    930|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    930|                    let n = mem::size_of::<$ty>();
  304|    930|                    (n, Some(n))
  305|    930|                }
_RNvXsC_CsfqNTpL4djRT_9arbitraryhNtB5_9Arbitrary9size_hintCssVkL66IuLW_17fvm_ipld_bitfield:
  302|    930|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    930|                    let n = mem::size_of::<$ty>();
  304|    930|                    (n, Some(n))
  305|    930|                }
_RNvXsH_CsfqNTpL4djRT_9arbitraryjNtB5_9Arbitrary9size_hintCssVkL66IuLW_17fvm_ipld_bitfield:
  302|    932|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    932|                    let n = mem::size_of::<$ty>();
  304|    932|                    (n, Some(n))
  305|    932|                }
_RNvXs1j_CsfqNTpL4djRT_9arbitraryTyhENtB6_9Arbitrary9size_hintCssVkL66IuLW_17fvm_ipld_bitfield:
  568|    930|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|    930|                crate::size_hint::and_all(&[
  570|    930|                    <$last as Arbitrary>::size_hint(depth),
  571|    930|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|    930|                ])
  573|    930|            }
_RNvXsE_CsfqNTpL4djRT_9arbitrarymNtB5_9Arbitrary9arbitrary:
  291|  10.5k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  10.5k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  10.5k|                    u.fill_buffer(&mut buf)?;
  294|  10.5k|                    let mut x: $unsigned = 0;
  295|  42.3k|                    for i in 0..mem::size_of::<$ty>() {
  296|  42.3k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  42.3k|                    }
  298|  10.5k|                    Ok(x as $ty)
  299|  10.5k|                }
_RNvXsC_CsfqNTpL4djRT_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  65.2k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  65.2k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  65.2k|                    u.fill_buffer(&mut buf)?;
  294|  65.2k|                    let mut x: $unsigned = 0;
  295|  65.2k|                    for i in 0..mem::size_of::<$ty>() {
  296|  65.2k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  65.2k|                    }
  298|  65.2k|                    Ok(x as $ty)
  299|  65.2k|                }
_RNvXsF_CsfqNTpL4djRT_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  13.3k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  13.3k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  13.3k|                    u.fill_buffer(&mut buf)?;
  294|  13.3k|                    let mut x: $unsigned = 0;
  295|   106k|                    for i in 0..mem::size_of::<$ty>() {
  296|   106k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   106k|                    }
  298|  13.3k|                    Ok(x as $ty)
  299|  13.3k|                }
_RNvXs_CsfqNTpL4djRT_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  10.1k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  10.1k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  10.1k|    }

_RNCNvNtCsfqNTpL4djRT_9arbitrary9size_hint3and0CsEXW0mRBWUw_11cbor_encode:
   28|  50.7k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsfqNTpL4djRT_9arbitrary9size_hint6or_allCsEXW0mRBWUw_11cbor_encode:
   58|    932|    if let Some(head) = hints.first().copied() {
   59|    932|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    932|}
_RINvNtCsfqNTpL4djRT_9arbitrary9size_hint15recursion_guardNCNvXs8_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7networkNtB11_7NetworkNtB4_9Arbitrary9size_hint0ECsEXW0mRBWUw_11cbor_encode:
   12|    466|pub fn recursion_guard(
   13|    466|    depth: usize,
   14|    466|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    466|) -> (usize, Option<usize>) {
   16|    466|    const MAX_DEPTH: usize = 20;
   17|    466|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    466|        f(depth + 1)
   21|       |    }
   22|    466|}
_RINvNtCsfqNTpL4djRT_9arbitrary9size_hint15recursion_guardNCNvXse_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB11_7AddressNtB4_9Arbitrary9size_hint0ECsEXW0mRBWUw_11cbor_encode:
   12|    466|pub fn recursion_guard(
   13|    466|    depth: usize,
   14|    466|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    466|) -> (usize, Option<usize>) {
   16|    466|    const MAX_DEPTH: usize = 20;
   17|    466|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    466|        f(depth + 1)
   21|       |    }
   22|    466|}
_RINvNtCsfqNTpL4djRT_9arbitrary9size_hint15recursion_guardNCNvXs0_NtCskxbexpPPvyf_11common_fuzz4cborNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECsEXW0mRBWUw_11cbor_encode:
   12|    466|pub fn recursion_guard(
   13|    466|    depth: usize,
   14|    466|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    466|) -> (usize, Option<usize>) {
   16|    466|    const MAX_DEPTH: usize = 20;
   17|    466|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    466|        f(depth + 1)
   21|       |    }
   22|    466|}
_RNvNtCsfqNTpL4djRT_9arbitrary9size_hint7and_allCsEXW0mRBWUw_11cbor_encode:
   37|  6.52k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  6.52k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  6.52k|}
_RNCNvNtCsfqNTpL4djRT_9arbitrary9size_hint2or0CsEXW0mRBWUw_11cbor_encode:
   48|  2.33k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCsfqNTpL4djRT_9arbitrary9size_hint3andCsEXW0mRBWUw_11cbor_encode:
   26|  53.5k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  53.5k|    let lower = lhs.0 + rhs.0;
   28|  53.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  53.5k|    (lower, upper)
   30|  53.5k|}
_RNCNCNvNtCsfqNTpL4djRT_9arbitrary9size_hint2or00CsEXW0mRBWUw_11cbor_encode:
   48|  2.33k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RINvNtCsfqNTpL4djRT_9arbitrary9size_hint15recursion_guardNCNvXs9_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECsEXW0mRBWUw_11cbor_encode:
   12|    466|pub fn recursion_guard(
   13|    466|    depth: usize,
   14|    466|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    466|) -> (usize, Option<usize>) {
   16|    466|    const MAX_DEPTH: usize = 20;
   17|    466|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    466|        f(depth + 1)
   21|       |    }
   22|    466|}
_RNvNtCsfqNTpL4djRT_9arbitrary9size_hint2orCsEXW0mRBWUw_11cbor_encode:
   44|  2.33k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  2.33k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  2.33k|    let upper = lhs
   47|  2.33k|        .1
   48|  2.33k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  2.33k|    (lower, upper)
   50|  2.33k|}
_RNCNCNvNtCsfqNTpL4djRT_9arbitrary9size_hint3and00CsEXW0mRBWUw_11cbor_encode:
   28|  49.3k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCsfqNTpL4djRT_9arbitrary9size_hint3and0CssVkL66IuLW_17fvm_ipld_bitfield:
   28|  2.79k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCsfqNTpL4djRT_9arbitrary9size_hint3and00CssVkL66IuLW_17fvm_ipld_bitfield:
   28|  1.86k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsfqNTpL4djRT_9arbitrary9size_hint3andCssVkL66IuLW_17fvm_ipld_bitfield:
   26|  3.25k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.25k|    let lower = lhs.0 + rhs.0;
   28|  3.25k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.25k|    (lower, upper)
   30|  3.25k|}
_RNvNtCsfqNTpL4djRT_9arbitrary9size_hint7and_allCssVkL66IuLW_17fvm_ipld_bitfield:
   37|    930|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    930|    hints.iter().copied().fold((0, Some(0)), and)
   39|    930|}

_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECskxbexpPPvyf_11common_fuzz:
  292|    386|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    386|    where
  294|    386|        T: Int,
  295|    386|    {
  296|    386|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    364|        self.data = &self.data[bytes_consumed..];
  298|    364|        Ok(result)
  299|    386|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECskxbexpPPvyf_11common_fuzz:
  411|    413|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  412|    413|    where
  413|    413|        T: Int,
  414|    413|    {
  415|    413|        assert!(T::ZERO < numerator);
  416|    413|        assert!(numerator <= denominator);
  417|    413|        let x = self.int_in_range(T::ONE..=denominator)?;
  418|    407|        Ok(x <= numerator)
  419|    413|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECskxbexpPPvyf_11common_fuzz:
  534|    465|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    465|        &'b mut self,
  536|    465|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    465|        Ok(ArbitraryIter {
  538|    465|            u: &mut *self,
  539|    465|            _marker: PhantomData,
  540|    465|        })
  541|    465|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECskxbexpPPvyf_11common_fuzz:
  292|    413|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    413|    where
  294|    413|        T: Int,
  295|    413|    {
  296|    413|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    407|        self.data = &self.data[bytes_consumed..];
  298|    407|        Ok(result)
  299|    413|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECskxbexpPPvyf_11common_fuzz:
  301|    386|    fn int_in_range_impl<T>(
  302|    386|        range: ops::RangeInclusive<T>,
  303|    386|        mut bytes: impl Iterator<Item = u8>,
  304|    386|    ) -> Result<(T, usize)>
  305|    386|    where
  306|    386|        T: Int,
  307|    386|    {
  308|    386|        let start = range.start();
  309|    386|        let end = range.end();
  310|    386|        assert!(
  311|    386|            start <= end,
  312|    386|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    386|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    386|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    386|        }
  320|    386|
  321|    386|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    386|        let mut result = T::Widest::ZERO;
  323|    386|        let mut offset: usize = 0;
  324|       |
  325|    750|        while offset < mem::size_of::<T>()
  326|    750|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    364|        {
  328|    386|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    364|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    364|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    364|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    364|            result = result % range;
  336|    364|        }
  337|       |
  338|    364|        Ok((
  339|    364|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    364|            offset,
  341|    364|        ))
  342|    386|    }
_RNvXs_NtCsfqNTpL4djRT_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCsUG827pA8ag_4core4iter6traits8iterator8Iterator4nextCskxbexpPPvyf_11common_fuzz:
  666|  3.96k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  3.96k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  3.96k|        if keep_going {
  669|  3.49k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    465|            None
  672|       |        }
  673|  3.96k|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECskxbexpPPvyf_11common_fuzz:
  167|  9.25k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  9.25k|    where
  169|  9.25k|        A: Arbitrary<'a>,
  170|  9.25k|    {
  171|  9.25k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  9.25k|    }
_RNvXs_NtCsfqNTpL4djRT_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtNtNtNtCsUG827pA8ag_4core4iter6traits8iterator8Iterator4nextCskxbexpPPvyf_11common_fuzz:
  666|  5.29k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  5.29k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  5.29k|        if keep_going {
  669|  4.82k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    465|            None
  672|       |        }
  673|  5.29k|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCs6Yl6r13Ki3I_9multihash9multihash9MultihashKj40_EECskxbexpPPvyf_11common_fuzz:
  167|    386|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    386|    where
  169|    386|        A: Arbitrary<'a>,
  170|    386|    {
  171|    386|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    386|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECskxbexpPPvyf_11common_fuzz:
  167|  2.10k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  2.10k|    where
  169|  2.10k|        A: Arbitrary<'a>,
  170|  2.10k|    {
  171|  2.10k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  2.10k|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECskxbexpPPvyf_11common_fuzz:
  301|    413|    fn int_in_range_impl<T>(
  302|    413|        range: ops::RangeInclusive<T>,
  303|    413|        mut bytes: impl Iterator<Item = u8>,
  304|    413|    ) -> Result<(T, usize)>
  305|    413|    where
  306|    413|        T: Int,
  307|    413|    {
  308|    413|        let start = range.start();
  309|    413|        let end = range.end();
  310|    413|        assert!(
  311|    413|            start <= end,
  312|    413|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    413|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    413|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    413|        }
  320|    413|
  321|    413|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    413|        let mut result = T::Widest::ZERO;
  323|    413|        let mut offset: usize = 0;
  324|       |
  325|    820|        while offset < mem::size_of::<T>()
  326|    820|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    407|        {
  328|    413|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    407|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    407|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    407|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    407|            result = result % range;
  336|    407|        }
  337|       |
  338|    407|        Ok((
  339|    407|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    407|            offset,
  341|    407|        ))
  342|    413|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressECskxbexpPPvyf_11common_fuzz:
  534|    465|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    465|        &'b mut self,
  536|    465|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    465|        Ok(ArbitraryIter {
  538|    465|            u: &mut *self,
  539|    465|            _marker: PhantomData,
  540|    465|        })
  541|    465|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECssVkL66IuLW_17fvm_ipld_bitfield:
  292|    465|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    465|    where
  294|    465|        T: Int,
  295|    465|    {
  296|    465|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    413|        self.data = &self.data[bytes_consumed..];
  298|    413|        Ok(result)
  299|    465|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured6choosebECssVkL66IuLW_17fvm_ipld_bitfield:
  378|    465|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  379|    465|        if choices.is_empty() {
  380|      0|            return Err(Error::EmptyChoose);
  381|    465|        }
  382|    465|        let idx = self.int_in_range(0..=choices.len() - 1)?;
  383|    413|        Ok(&choices[idx])
  384|    465|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECssVkL66IuLW_17fvm_ipld_bitfield:
  301|    465|    fn int_in_range_impl<T>(
  302|    465|        range: ops::RangeInclusive<T>,
  303|    465|        mut bytes: impl Iterator<Item = u8>,
  304|    465|    ) -> Result<(T, usize)>
  305|    465|    where
  306|    465|        T: Int,
  307|    465|    {
  308|    465|        let start = range.start();
  309|    465|        let end = range.end();
  310|    465|        assert!(
  311|    465|            start <= end,
  312|    465|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    465|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    465|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    465|        }
  320|    465|
  321|    465|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    465|        let mut result = T::Widest::ZERO;
  323|    465|        let mut offset: usize = 0;
  324|       |
  325|    878|        while offset < mem::size_of::<T>()
  326|    878|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    413|        {
  328|    465|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    413|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    413|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    413|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    413|            result = result % range;
  336|    413|        }
  337|       |
  338|    413|        Ok((
  339|    413|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    413|            offset,
  341|    413|        ))
  342|    465|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECssVkL66IuLW_17fvm_ipld_bitfield:
  301|  9.48k|    fn int_in_range_impl<T>(
  302|  9.48k|        range: ops::RangeInclusive<T>,
  303|  9.48k|        mut bytes: impl Iterator<Item = u8>,
  304|  9.48k|    ) -> Result<(T, usize)>
  305|  9.48k|    where
  306|  9.48k|        T: Int,
  307|  9.48k|    {
  308|  9.48k|        let start = range.start();
  309|  9.48k|        let end = range.end();
  310|  9.48k|        assert!(
  311|  9.48k|            start <= end,
  312|  9.48k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  9.48k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  9.48k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  9.48k|        }
  320|  9.48k|
  321|  9.48k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  9.48k|        let mut result = T::Widest::ZERO;
  323|  9.48k|        let mut offset: usize = 0;
  324|       |
  325|  18.9k|        while offset < mem::size_of::<T>()
  326|  18.9k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  9.48k|        {
  328|  9.48k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  9.48k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  9.48k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  9.48k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  9.48k|            result = result % range;
  336|  9.48k|        }
  337|       |
  338|  9.48k|        Ok((
  339|  9.48k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  9.48k|            offset,
  341|  9.48k|        ))
  342|  9.48k|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECssVkL66IuLW_17fvm_ipld_bitfield:
  292|  9.48k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  9.48k|    where
  294|  9.48k|        T: Int,
  295|  9.48k|    {
  296|  9.48k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  9.48k|        self.data = &self.data[bytes_consumed..];
  298|  9.48k|        Ok(result)
  299|  9.48k|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    465|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    465|    where
  169|    465|        A: Arbitrary<'a>,
  170|    465|    {
  171|    465|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    465|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECssVkL66IuLW_17fvm_ipld_bitfield:
  213|    930|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    930|    where
  215|    930|        ElementType: Arbitrary<'a>,
  216|    930|    {
  217|    930|        let byte_size = self.arbitrary_byte_size()?;
  218|    930|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    930|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|    930|        let elem_size = std::cmp::max(1, elem_size);
  221|    930|        Ok(byte_size / elem_size)
  222|    930|    }
_RNvXs1_NtCsfqNTpL4djRT_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    722|                fn from_widest(w: Self::Widest) -> Self {
  772|    722|                    let x = <$ty>::max_value().as_widest();
  773|    722|                    (w % x) as Self
  774|    722|                }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCsUG827pA8ag_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    110|    fn int_in_range_impl<T>(
  302|    110|        range: ops::RangeInclusive<T>,
  303|    110|        mut bytes: impl Iterator<Item = u8>,
  304|    110|    ) -> Result<(T, usize)>
  305|    110|    where
  306|    110|        T: Int,
  307|    110|    {
  308|    110|        let start = range.start();
  309|    110|        let end = range.end();
  310|    110|        assert!(
  311|    110|            start <= end,
  312|    110|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    110|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    110|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    110|        }
  320|    110|
  321|    110|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    110|        let mut result = T::Widest::ZERO;
  323|    110|        let mut offset: usize = 0;
  324|       |
  325|    327|        while offset < mem::size_of::<T>()
  326|    220|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    217|        {
  328|    217|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    217|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    217|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    110|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    110|            result = result % range;
  336|    110|        }
  337|       |
  338|    110|        Ok((
  339|    110|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    110|            offset,
  341|    110|        ))
  342|    110|    }
_RINvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCsUG827pA8ag_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    722|    fn int_in_range_impl<T>(
  302|    722|        range: ops::RangeInclusive<T>,
  303|    722|        mut bytes: impl Iterator<Item = u8>,
  304|    722|    ) -> Result<(T, usize)>
  305|    722|    where
  306|    722|        T: Int,
  307|    722|    {
  308|    722|        let start = range.start();
  309|    722|        let end = range.end();
  310|    722|        assert!(
  311|    722|            start <= end,
  312|    722|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    722|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    722|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    722|        }
  320|    722|
  321|    722|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    722|        let mut result = T::Widest::ZERO;
  323|    722|        let mut offset: usize = 0;
  324|       |
  325|  1.44k|        while offset < mem::size_of::<T>()
  326|    722|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    722|        {
  328|    722|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    722|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    722|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    722|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    722|            result = result % range;
  336|    722|        }
  337|       |
  338|    722|        Ok((
  339|    722|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    722|            offset,
  341|    722|        ))
  342|    722|    }
_RNvXs5_NtCsfqNTpL4djRT_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.71k|                fn from_u8(b: u8) -> Self {
  777|  1.71k|                    b as Self
  778|  1.71k|                }
_RNvXs6_NtCsfqNTpL4djRT_9arbitrary12unstructuredjNtB5_3Int9as_widest:
  767|  3.25k|                fn as_widest(self) -> Self::Widest {
  768|  3.25k|                    self as $widest
  769|  3.25k|                }
_RNvXsb_NtCsfqNTpL4djRT_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  9.89k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  9.89k|                    <$ty>::wrapping_add(self, rhs)
  790|  9.89k|                }
_RNvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    930|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    930|        if self.data.is_empty() {
  226|     96|            Ok(0)
  227|    834|        } else if self.data.len() == 1 {
  228|      2|            self.data = &[];
  229|      2|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    832|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    722|                let bytes = 1;
  241|    722|                let max_size = self.data.len() - bytes;
  242|    722|                let (rest, for_size) = self.data.split_at(max_size);
  243|    722|                self.data = rest;
  244|    722|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|    110|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|    110|                let bytes = 2;
  247|    110|                let max_size = self.data.len() - bytes;
  248|    110|                let (rest, for_size) = self.data.split_at(max_size);
  249|    110|                self.data = rest;
  250|    110|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    832|            Ok(len)
  266|       |        }
  267|    930|    }
_RNvXs5_NtCsfqNTpL4djRT_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  2.57k|                fn from_usize(u: usize) -> Self {
  781|  2.57k|                    u as Self
  782|  2.57k|                }
_RNvXs1_NtCsfqNTpL4djRT_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  2.88k|                fn as_widest(self) -> Self::Widest {
  768|  2.88k|                    self as $widest
  769|  2.88k|                }
_RNvXs9_NtCsfqNTpL4djRT_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  39.5k|                fn as_widest(self) -> Self::Widest {
  768|  39.5k|                    self as $widest
  769|  39.5k|                }
_RNvXs5_NtCsfqNTpL4djRT_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|  1.60k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  1.60k|                    <$ty>::checked_add(self, rhs)
  786|  1.60k|                }
_RNvXs2_NtCsfqNTpL4djRT_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|    110|                fn from_widest(w: Self::Widest) -> Self {
  772|    110|                    let x = <$ty>::max_value().as_widest();
  773|    110|                    (w % x) as Self
  774|    110|                }
_RNvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  476|    385|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  477|    385|        if self.data.len() < size {
  478|     22|            return Err(Error::NotEnoughData);
  479|    363|        }
  480|    363|
  481|    363|        let (for_buf, rest) = self.data.split_at(size);
  482|    363|        self.data = rest;
  483|    363|        Ok(for_buf)
  484|    385|    }
_RNvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  89.1k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  89.1k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  89.1k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  89.1k|        for byte in buffer[n..].iter_mut() {
  453|  1.14k|            *byte = 0;
  454|  1.14k|        }
  455|  89.1k|        self.data = &self.data[n..];
  456|  89.1k|        Ok(())
  457|  89.1k|    }
_RNvXs6_NtCsfqNTpL4djRT_9arbitrary12unstructuredjNtB5_3Int11from_widest:
  771|    777|                fn from_widest(w: Self::Widest) -> Self {
  772|    777|                    let x = <$ty>::max_value().as_widest();
  773|    777|                    (w % x) as Self
  774|    777|                }
_RNvXs2_NtCsfqNTpL4djRT_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    440|                fn as_widest(self) -> Self::Widest {
  768|    440|                    self as $widest
  769|    440|                }
_RNvXsb_NtCsfqNTpL4djRT_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  9.89k|                fn from_u8(b: u8) -> Self {
  777|  9.89k|                    b as Self
  778|  9.89k|                }
_RNvXs5_NtCsfqNTpL4djRT_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|  1.60k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  1.60k|                    <$ty>::wrapping_add(self, rhs)
  790|  1.60k|                }
_RNvXs9_NtCsfqNTpL4djRT_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  9.89k|                fn from_widest(w: Self::Widest) -> Self {
  772|  9.89k|                    let x = <$ty>::max_value().as_widest();
  773|  9.89k|                    (w % x) as Self
  774|  9.89k|                }
_RNvXsb_NtCsfqNTpL4djRT_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  9.89k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  9.89k|                    <$ty>::checked_add(self, rhs)
  786|  9.89k|                }
_RNvMNtCsfqNTpL4djRT_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    465|    pub fn new(data: &'a [u8]) -> Self {
   86|    465|        Unstructured { data }
   87|    465|    }
_RNvXsb_NtCsfqNTpL4djRT_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  19.7k|                fn from_usize(u: usize) -> Self {
  781|  19.7k|                    u as Self
  782|  19.7k|                }

_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  427|  5.79k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  5.79k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  5.79k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  5.79k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  5.79k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  5.79k|            if buf.len() >= len {
  436|  5.79k|                reader.advance(len);
  437|  5.79k|                return Ok(Some(&buf[..len]));
  438|      0|            }
  439|      0|        }
  440|       |
  441|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|      0|        while len != 0 {
  444|      0|            let readbuf = reader.fill(len)?;
  445|      0|            let readbuf = readbuf.as_ref();
  446|      0|
  447|      0|            if readbuf.is_empty() {
  448|      0|                return Err(Error::Eof);
  449|      0|            }
  450|      0|
  451|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      0|
  453|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      0|            reader.advance(readlen);
  455|      0|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|      0|            let byte = pull_one(reader)?;
  463|       |
  464|      0|            if byte == marker::BREAK {
  465|      0|                break
  466|      0|            }
  467|      0|
  468|      0|            if !reader.step_in() {
  469|      0|                return Err(Error::DepthLimit);
  470|      0|            }
  471|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|      0|            let reader = &mut *reader;
  473|       |
  474|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|      0|                buf.extend_from_slice(longbuf);
  476|      0|            }
  477|       |        }
  478|       |
  479|      0|        Ok(None)
  480|       |    }
  481|  5.79k|}
_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  595|  6.52k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  6.52k|    -> Result<Option<usize>, Error<R::Error>>
  597|  6.52k|{
  598|  6.52k|    if byte != (marker::START | (major << 5)) {
  599|  6.52k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  6.52k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  6.52k|        Ok(Some(len))
  602|       |    } else {
  603|      0|        Ok(None)
  604|       |    }
  605|  6.52k|}
_RINvYyNtNtNtCs2IAGTsgeePC_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
   73|    363|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    363|        let byte = pull_one(reader)?;
   75|    363|        Self::decode_with(byte, reader)
   76|    363|    }
_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  125|  8.11k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  8.11k|    let b = reader.fill(1)?
  127|  8.11k|        .as_ref()
  128|  8.11k|        .get(0)
  129|  8.11k|        .copied()
  130|  8.11k|        .ok_or(Error::Eof)?;
  131|  8.11k|    reader.advance(1);
  132|  8.11k|    Ok(b)
  133|  8.11k|}
_RINvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  223|  7.24k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  7.24k|        match self.byte & self.major_limit {
  225|  7.24k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|    868|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|     54|                let mut buf = [0; 2];
  229|     54|                pull_exact(reader, &mut buf)?;
  230|     54|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|     14|                let mut buf = [0; 4];
  234|     14|                pull_exact(reader, &mut buf)?;
  235|     14|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    328|                let mut buf = [0; 8];
  239|    328|                pull_exact(reader, &mut buf)?;
  240|    328|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  7.24k|    }
_RINvXsg_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  703|    363|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    363|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    363|    }
_RINvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  136|    396|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    792|    while !buf.is_empty() {
  138|    396|        let readbuf = reader.fill(buf.len())?;
  139|    396|        let readbuf = readbuf.as_ref();
  140|    396|
  141|    396|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    396|        }
  144|    396|
  145|    396|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    396|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    396|        reader.advance(len);
  148|    396|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    396|    Ok(())
  152|    396|}
_RINvYNtNtNtCs2IAGTsgeePC_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
   73|    726|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    726|        let byte = pull_one(reader)?;
   75|    726|        Self::decode_with(byte, reader)
   76|    726|    }
_RNvNtNtCs2IAGTsgeePC_7cbor4ii4core3dec8if_majorCsEXW0mRBWUw_11cbor_encode:
  890|    363|pub fn if_major(byte: u8) -> u8 {
  891|    363|    byte >> 5
  892|    363|}
_RINvYINtNtNtCs2IAGTsgeePC_7cbor4ii4core5types5BytesINtNtCsddeQUdmtqP6_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
   73|  5.79k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  5.79k|        let byte = pull_one(reader)?;
   75|  5.79k|        Self::decode_with(byte, reader)
   76|  5.79k|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB5_7TypeNum3newCsEXW0mRBWUw_11cbor_encode:
  175|  7.24k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  7.24k|        TypeNum { major_limit, byte }
  177|  7.24k|    }
_RINvXs5_NtNtCs2IAGTsgeePC_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsddeQUdmtqP6_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  506|  5.79k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  5.79k|        use crate::alloc::borrow::Cow;
  508|  5.79k|
  509|  5.79k|        let mut buf = Vec::new();
  510|  5.79k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  5.79k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|      0|            Cow::Owned(buf)
  514|       |        }))
  515|  5.79k|    }
_RINvXsc_NtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  611|    726|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|    726|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|    726|    }
_RNvMNtNtCs2IAGTsgeePC_7cbor4ii4core3decNtB2_9Reference6as_refCsEXW0mRBWUw_11cbor_encode:
   81|  8.51k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  8.51k|        match self {
   83|  8.51k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  8.51k|    }
_RINvXss_NtNtCs2IAGTsgeePC_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
  252|    363|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    363|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    363|                }
_RINvYNtNtNtCs2IAGTsgeePC_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
   73|    363|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    363|        let byte = pull_one(reader)?;
   75|    363|        Self::decode_with(byte, reader)
   76|    363|    }

_RINvXs7_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
  209|  11.5k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  11.5k|        writer.push(self.0)?;
  211|  11.5k|        Ok(())
  212|  11.5k|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNumhE3newCsEXW0mRBWUw_11cbor_encode:
   52|  13.7k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  13.7k|        TypeNum { type_, value }
   54|  13.7k|    }
_RINvXsu_NtNtCs2IAGTsgeePC_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
  159|    726|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    726|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    726|                }
_RINvXsd_NtNtCs2IAGTsgeePC_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
  270|  1.45k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.45k|        Ok(())
  272|  1.45k|    }
_RINvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
   59|  13.7k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  13.7k|        match self.value {
   61|  13.7k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.73k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  13.7k|        Ok(())
   65|  13.7k|    }
_RINvXsi_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
  317|    726|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    726|        self.1.encode(writer)
  319|    726|    }
_RINvXs2_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
   70|  13.8k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  13.8k|        match u8::try_from(self.value) {
   72|  13.7k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|    108|                let [x0, x1] = self.value.to_be_bytes();
   75|    108|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  13.8k|        Ok(())
   79|  13.8k|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNumtE3newCsEXW0mRBWUw_11cbor_encode:
   52|  13.8k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  13.8k|        TypeNum { type_, value }
   54|  13.8k|    }
_RINvXs4_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
   98|  14.4k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  14.4k|        match u32::try_from(self.value) {
  100|  13.8k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    656|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    656|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  14.4k|        Ok(())
  107|  14.4k|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNumyE3newCsEXW0mRBWUw_11cbor_encode:
   52|  14.4k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  14.4k|        TypeNum { type_, value }
   54|  14.4k|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB5_7TypeNummE3newCsEXW0mRBWUw_11cbor_encode:
   52|  13.8k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  13.8k|        TypeNum { type_, value }
   54|  13.8k|    }
_RINvXs3_NtNtCs2IAGTsgeePC_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsEXW0mRBWUw_11cbor_encode:
   84|  13.8k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  13.8k|        match u16::try_from(self.value) {
   86|  13.8k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     28|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     28|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  13.8k|        Ok(())
   93|  13.8k|    }

_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsEXW0mRBWUw_11cbor_encode:
   75|    726|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    726|            self.limit = limit;
   77|    726|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    726|    }
_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsEXW0mRBWUw_11cbor_encode:
   68|  14.3k|    fn advance(&mut self, n: usize) {
   69|  14.3k|        let len = core::cmp::min(self.buf.len(), n);
   70|  14.3k|        self.buf = &self.buf[len..];
   71|  14.3k|    }
_RNvXs_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsEXW0mRBWUw_11cbor_encode:
   40|  26.0k|        self.0.try_reserve(input.len())?;
   41|  26.0k|        self.0.extend_from_slice(input);
   42|  26.0k|        Ok(())
   43|  26.0k|    }
_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsEXW0mRBWUw_11cbor_encode:
   84|    726|    fn step_out(&mut self) {
   85|    726|        self.limit += 1;
   86|    726|    }
_RNvXs1_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsEXW0mRBWUw_11cbor_encode:
   62|  15.0k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  15.0k|        let len = core::cmp::min(self.buf.len(), want);
   64|  15.0k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  15.0k|    }
_RNvMNtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    726|    pub fn new(buf: Vec<u8>) -> Self {
   15|    726|       BufWriter(buf)
   16|    726|    }
_RNvMNtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    726|    pub fn into_inner(self) -> Vec<u8> {
   25|    726|        self.0
   26|    726|    }
_RNvMs0_NtNtCs2IAGTsgeePC_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    363|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    363|        SliceReader { buf, limit: 256 }
   55|    363|    }

_RNvXs0_NtCskhitFtkqptf_3cid3arbINtNtB7_3cid3CidKj40_ENtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
   83|    466|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   84|    466|        let v1 = size_hint::and_all(&[
   85|    466|            <[u8; 2]>::size_hint(depth),
   86|    466|            (0, Some(8)),
   87|    466|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   88|    466|        ]);
   89|    466|        if S >= 32 {
   90|    466|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   91|       |        } else {
   92|      0|            v1
   93|       |        }
   94|    466|    }
_RNCNvXs0_NtCskhitFtkqptf_3cid3arbINtNtB9_3cid3CidKj40_ENtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitrary0CskxbexpPPvyf_11common_fuzz:
   72|    718|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs0_NtCskhitFtkqptf_3cid3arbINtNtB7_3cid3CidKj40_ENtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitraryCskxbexpPPvyf_11common_fuzz:
   56|    413|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   57|    413|        if S >= 32 && u.ratio(1, 10)? {
   58|     21|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   59|     13|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   60|    386|        }
   61|    386|
   62|    386|        let mut codec = 0u64;
   63|    386|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   64|       |
   65|  1.10k|        while len_choice & 1 == 1 {
   66|    718|            len_choice >>= 1;
   67|    718|
   68|    718|            let x = u.arbitrary::<u8>();
   69|    718|            let next = codec
   70|    718|                .checked_shl(8)
   71|    718|                .zip(x.ok())
   72|    718|                .map(|(next, x)| next.saturating_add(x as u64));
   73|    718|
   74|    718|            match next {
   75|      0|                None => break,
   76|    718|                Some(next) => codec = next,
   77|       |            }
   78|       |        }
   79|       |
   80|    386|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   81|    413|    }

_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E3newCsEXW0mRBWUw_11cbor_encode:
   99|    350|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    350|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    350|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    350|    }
_RINvMNtCskhitFtkqptf_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsEXW0mRBWUw_11cbor_encode:
  157|    726|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    726|        match self.version {
  159|     26|            Version::V0 => self.hash.write(w)?,
  160|    700|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    726|        Ok(())
  163|    726|    }
_RINvMNtCskhitFtkqptf_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsEXW0mRBWUw_11cbor_encode:
  127|    363|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    363|        let version = varint_read_u64(&mut r)?;
  129|    363|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    363|        if [version, codec] == [0x12, 0x20] {
  132|     13|            let mut digest = [0u8; 32];
  133|     13|            r.read_exact(&mut digest)?;
  134|     13|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|     13|            Self::new_v0(mh)
  136|       |        } else {
  137|    350|            let version = Version::try_from(version)?;
  138|    350|            let mh = Multihash::read(r)?;
  139|    350|            Self::new(version, codec, mh)
  140|       |        }
  141|    363|    }
_RINvMNtCskhitFtkqptf_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsEXW0mRBWUw_11cbor_encode:
  143|    700|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    700|        let mut version_buf = varint_encode::u64_buffer();
  145|    700|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    700|
  147|    700|        let mut codec_buf = varint_encode::u64_buffer();
  148|    700|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    700|
  150|    700|        w.write_all(version)?;
  151|    700|        w.write_all(codec)?;
  152|    700|        self.hash.write(&mut w)?;
  153|    700|        Ok(())
  154|    700|    }
_RNvXs6_NtCskhitFtkqptf_3cid3cidINtB5_3CidKj40_EINtNtCsUG827pA8ag_4core7convert7TryFromRShE8try_fromCsEXW0mRBWUw_11cbor_encode:
  314|    363|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    363|        Self::read_bytes(&mut bytes)
  316|    363|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E6new_v1CsEXW0mRBWUw_11cbor_encode:
   90|    350|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    350|        Self {
   92|    350|            version: Version::V1,
   93|    350|            codec,
   94|    350|            hash,
   95|    350|        }
   96|    350|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E6new_v0CsEXW0mRBWUw_11cbor_encode:
   78|     13|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     13|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     13|        }
   82|     13|        Ok(Self {
   83|     13|            version: Version::V0,
   84|     13|            codec: DAG_PB,
   85|     13|            hash,
   86|     13|        })
   87|     13|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E8to_bytesCsEXW0mRBWUw_11cbor_encode:
  167|    726|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    726|        let mut bytes = Vec::new();
  169|    726|        self.write_bytes(&mut bytes).unwrap();
  170|    726|        bytes
  171|    726|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E6new_v1CskxbexpPPvyf_11common_fuzz:
   90|    350|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    350|        Self {
   92|    350|            version: Version::V1,
   93|    350|            codec,
   94|    350|            hash,
   95|    350|        }
   96|    350|    }
_RNvMNtCskhitFtkqptf_3cid3cidINtB2_3CidKj40_E6new_v0CskxbexpPPvyf_11common_fuzz:
   78|     13|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|     13|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|     13|        }
   82|     13|        Ok(Self {
   83|     13|            version: Version::V0,
   84|     13|            codec: DAG_PB,
   85|     13|            hash,
   86|     13|        })
   87|     13|    }

_RINvXs_NtCskhitFtkqptf_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor11visit_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsEXW0mRBWUw_11cbor_encode:
   48|    363|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    363|    where
   50|    363|        E: de::Error,
   51|    363|    {
   52|    363|        CidGeneric::<SIZE>::try_from(value)
   53|    363|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    363|    }
_RINvXNvXs0_NtCskhitFtkqptf_3cid5serdeINtNtBb_3cid3CidKpENtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   97|    363|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    363|            where
   99|    363|                D: de::Deserializer<'de>,
  100|    363|            {
  101|    363|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    363|            }
_RINvXNtCskhitFtkqptf_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   29|    726|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    726|    where
   31|    726|        S: ser::Serializer,
   32|    726|    {
   33|    726|        let value = ByteBuf::from(self.to_bytes());
   34|    726|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    726|    }
_RINvXs0_NtCskhitFtkqptf_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   79|    363|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    363|    where
   81|    363|        D: de::Deserializer<'de>,
   82|    363|    {
   83|    363|        /// Main visitor to deserialize a CID.
   84|    363|        ///
   85|    363|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    363|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    363|        /// to bytes.
   88|    363|        struct MainEntryVisitor<const SIZE: usize>;
   89|    363|
   90|    363|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    363|            type Value = CidGeneric<SIZE>;
   92|    363|
   93|    363|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    363|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    363|            }
   96|    363|
   97|    363|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    363|            where
   99|    363|                D: de::Deserializer<'de>,
  100|    363|            {
  101|    363|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    363|            }
  103|    363|        }
  104|    363|
  105|    363|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    363|    }

_RNvXs0_NtCskhitFtkqptf_3cid7versionyINtNtCsUG827pA8ag_4core7convert4FromNtB5_7VersionE4from:
   44|    700|    fn from(ver: Version) -> u64 {
   45|    700|        match ver {
   46|      0|            Version::V0 => 0,
   47|    700|            Version::V1 => 1,
   48|       |        }
   49|    700|    }
_RNvXs_NtCskhitFtkqptf_3cid7versionNtB4_7VersionINtNtCsUG827pA8ag_4core7convert7TryFromyE8try_from:
   34|    350|    fn try_from(raw: u64) -> Result<Self> {
   35|    350|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    350|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    350|    }

_RINvXsd_NtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor11visit_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsEXW0mRBWUw_11cbor_encode:
  203|    726|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    726|    where
  205|    726|        E: Error,
  206|    726|    {
  207|    726|        Ok(ByteBuf::from(v))
  208|    726|    }
_RINvMNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECsEXW0mRBWUw_11cbor_encode:
   60|    726|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    726|        ByteBuf {
   62|    726|            bytes: bytes.into(),
   63|    726|        }
   64|    726|    }
_RINvXse_NtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  219|    726|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    726|    where
  221|    726|        D: Deserializer<'de>,
  222|    726|    {
  223|    726|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    726|    }
_RNvMNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    726|    pub fn into_vec(self) -> Vec<u8> {
   68|    726|        self.bytes
   69|    726|    }

_RINvXs2_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   72|  4.70k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  4.70k|    where
   74|  4.70k|        D: Deserializer<'de>,
   75|  4.70k|    {
   76|  4.70k|        struct CowVisitor;
   77|  4.70k|
   78|  4.70k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  4.70k|            type Value = Cow<'de, [u8]>;
   80|  4.70k|
   81|  4.70k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  4.70k|                formatter.write_str("a byte array")
   83|  4.70k|            }
   84|  4.70k|
   85|  4.70k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  4.70k|            where
   87|  4.70k|                E: Error,
   88|  4.70k|            {
   89|  4.70k|                Ok(Cow::Borrowed(v))
   90|  4.70k|            }
   91|  4.70k|
   92|  4.70k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  4.70k|            where
   94|  4.70k|                E: Error,
   95|  4.70k|            {
   96|  4.70k|                Ok(Cow::Owned(v.to_vec()))
   97|  4.70k|            }
   98|  4.70k|
   99|  4.70k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  4.70k|            where
  101|  4.70k|                E: Error,
  102|  4.70k|            {
  103|  4.70k|                Ok(Cow::Owned(v))
  104|  4.70k|            }
  105|  4.70k|        }
  106|  4.70k|
  107|  4.70k|        deserializer.deserialize_bytes(CowVisitor)
  108|  4.70k|    }
_RINvXs_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   42|    726|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    726|    where
   44|    726|        D: Deserializer<'de>,
   45|    726|    {
   46|    726|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    726|    }
_RINvXs1_NtCs5AVzAzKkM8N_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   61|    726|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    726|    where
   63|    726|        D: Deserializer<'de>,
   64|    726|    {
   65|    726|        // Via the serde::Deserialize impl for ByteBuf.
   66|    726|        serde::Deserialize::deserialize(deserializer)
   67|    726|    }
_RINvXNvXs2_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor20visit_borrowed_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsEXW0mRBWUw_11cbor_encode:
   85|  4.70k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  4.70k|            where
   87|  4.70k|                E: Error,
   88|  4.70k|            {
   89|  4.70k|                Ok(Cow::Borrowed(v))
   90|  4.70k|            }

_RINvCs5AVzAzKkM8N_14cs_serde_bytes9serializeRINtNtCsddeQUdmtqP6_5alloc3vec3VechEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   77|    726|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    726|where
   79|    726|    T: ?Sized + Serialize,
   80|    726|    S: Serializer,
   81|    726|{
   82|    726|    Serialize::serialize(bytes, serializer)
   83|    726|}
_RINvCs5AVzAzKkM8N_14cs_serde_bytes11deserializeINtNtCsddeQUdmtqP6_5alloc6borrow3CowShEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  103|    363|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    363|where
  105|    363|    T: Deserialize<'de>,
  106|    363|    D: Deserializer<'de>,
  107|    363|{
  108|    363|    Deserialize::deserialize(deserializer)
  109|    363|}
_RINvCs5AVzAzKkM8N_14cs_serde_bytes9serializeINtNtCsddeQUdmtqP6_5alloc3vec3VechEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   77|  1.45k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|  1.45k|where
   79|  1.45k|    T: ?Sized + Serialize,
   80|  1.45k|    S: Serializer,
   81|  1.45k|{
   82|  1.45k|    Serialize::serialize(bytes, serializer)
   83|  1.45k|}
_RINvCs5AVzAzKkM8N_14cs_serde_bytes11deserializeINtNtCsddeQUdmtqP6_5alloc3vec3VechEQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  103|    726|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    726|where
  105|    726|    T: Deserialize<'de>,
  106|    726|    D: Deserializer<'de>,
  107|    726|{
  108|    726|    Deserialize::deserialize(deserializer)
  109|    726|}

_RINvXs4_NtCs5AVzAzKkM8N_14cs_serde_bytes3serRINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   88|    726|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    726|    where
   90|    726|        S: Serializer,
   91|    726|    {
   92|    726|        (**self).serialize(serializer)
   93|    726|    }
_RINvXs_NtCs5AVzAzKkM8N_14cs_serde_bytes3serINtNtCsddeQUdmtqP6_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   37|  10.8k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|  10.8k|    where
   39|  10.8k|        S: Serializer,
   40|  10.8k|    {
   41|  10.8k|        serializer.serialize_bytes(self)
   42|  10.8k|    }

rust_fuzzer_test_input:
  167|    466|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    466|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    466|
  170|    466|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    466|            // implementation. This helps the fuzzer avoid exploring all the
  172|    466|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    466|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    466|            // get to longer inputs that actually lead to interesting executions
  175|    466|            // quicker.
  176|    466|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    465|            }
  179|    465|
  180|    465|            let mut u = Unstructured::new(bytes);
  181|    465|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    465|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    465|            }
  199|       |
  200|    465|            let $data = match data {
  201|    363|                Ok(d) => d,
  202|    102|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    466|        }
LLVMFuzzerTestOneInput:
   27|    466|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    466|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    466|    });
   32|    466|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    466|    }
   37|    466|    0
   38|    466|}
_RNCNvCsbfCMulWnQsh_13libfuzzer_sys15test_input_wrap0B3_:
   28|    466|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    466|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    466|        rust_fuzzer_test_input(data_slice);
   31|    466|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs_NtCs6Yl6r13Ki3I_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
   64|    466|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   65|    466|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   66|    466|    }
_RNvXs_NtCs6Yl6r13Ki3I_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitraryCskxbexpPPvyf_11common_fuzz:
   39|    386|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   40|    386|        let mut code = 0u64;
   41|    386|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   42|       |
   43|    998|        while len_choice & 1 == 1 {
   44|    612|            len_choice >>= 1;
   45|    612|
   46|    612|            let x = u.arbitrary::<u8>();
   47|    612|            let next = code
   48|    612|                .checked_shl(8)
   49|    612|                .zip(x.ok())
   50|    612|                .map(|(next, x)| next.saturating_add(x as u64));
   51|    612|
   52|    612|            match next {
   53|      0|                None => break,
   54|    612|                Some(next) => code = next,
   55|       |            }
   56|       |        }
   57|       |
   58|    386|        let size = u.int_in_range(0..=S)?;
   59|    364|        let data = u.bytes(size)?;
   60|       |
   61|    350|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   62|    386|    }
_RNCNvXs_NtCs6Yl6r13Ki3I_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitrary0CskxbexpPPvyf_11common_fuzz:
   50|    612|                .map(|(next, x)| next.saturating_add(x as u64));

_RINvNtCs6Yl6r13Ki3I_9multihash9multihash14read_multihashQRShKj40_ECsEXW0mRBWUw_11cbor_encode:
  298|    350|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    350|where
  300|    350|    R: io::Read,
  301|    350|{
  302|    350|    let code = read_u64(&mut r)?;
  303|    350|    let size = read_u64(&mut r)?;
  304|       |
  305|    350|    if size > S as u64 || size > u8::MAX as u64 {
  306|      0|        return Err(Error::InvalidSize(size));
  307|    350|    }
  308|    350|
  309|    350|    let mut digest = [0; S];
  310|    350|    r.read_exact(&mut digest[..size as usize])?;
  311|    350|    Ok((code, size as u8, digest))
  312|    350|}
_RINvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsEXW0mRBWUw_11cbor_encode:
  163|    700|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    700|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    700|    }
_RINvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsEXW0mRBWUw_11cbor_encode:
  135|    350|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    350|    where
  137|    350|        Self: Sized,
  138|    350|    {
  139|    350|        let (code, size, digest) = read_multihash(r)?;
  140|    350|        Ok(Self { code, size, digest })
  141|    350|    }
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4codeCsEXW0mRBWUw_11cbor_encode:
  120|    739|    pub const fn code(&self) -> u64 {
  121|    739|        self.code
  122|    739|    }
_RINvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsEXW0mRBWUw_11cbor_encode:
  163|     26|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     26|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     26|    }
_RINvNtCs6Yl6r13Ki3I_9multihash9multihash15write_multihashQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsEXW0mRBWUw_11cbor_encode:
  276|     26|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     26|where
  278|     26|    W: io::Write,
  279|     26|{
  280|     26|    let mut code_buf = varint_encode::u64_buffer();
  281|     26|    let code = varint_encode::u64(code, &mut code_buf);
  282|     26|
  283|     26|    let mut size_buf = varint_encode::u8_buffer();
  284|     26|    let size = varint_encode::u8(size, &mut size_buf);
  285|     26|
  286|     26|    w.write_all(code)?;
  287|     26|    w.write_all(size)?;
  288|     26|    w.write_all(digest)?;
  289|     26|    Ok(())
  290|     26|}
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsEXW0mRBWUw_11cbor_encode:
  125|    726|    pub const fn size(&self) -> u8 {
  126|    726|        self.size
  127|    726|    }
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsEXW0mRBWUw_11cbor_encode:
  101|     13|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|     13|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|     13|        }
  105|     13|        let size = input_digest.len();
  106|     13|        let mut digest = [0; S];
  107|     13|        let mut i = 0;
  108|    429|        while i < size {
  109|    416|            digest[i] = input_digest[i];
  110|    416|            i += 1;
  111|    416|        }
  112|     13|        Ok(Self {
  113|     13|            code,
  114|     13|            size: size as u8,
  115|     13|            digest,
  116|     13|        })
  117|     13|    }
_RINvNtCs6Yl6r13Ki3I_9multihash9multihash15write_multihashQQINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsEXW0mRBWUw_11cbor_encode:
  276|    700|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    700|where
  278|    700|    W: io::Write,
  279|    700|{
  280|    700|    let mut code_buf = varint_encode::u64_buffer();
  281|    700|    let code = varint_encode::u64(code, &mut code_buf);
  282|    700|
  283|    700|    let mut size_buf = varint_encode::u8_buffer();
  284|    700|    let size = varint_encode::u8(size, &mut size_buf);
  285|    700|
  286|    700|    w.write_all(code)?;
  287|    700|    w.write_all(size)?;
  288|    700|    w.write_all(digest)?;
  289|    700|    Ok(())
  290|    700|}
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E6digestCsEXW0mRBWUw_11cbor_encode:
  130|    726|    pub fn digest(&self) -> &[u8] {
  131|    726|        &self.digest[..self.size as usize]
  132|    726|    }
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4wrapCskxbexpPPvyf_11common_fuzz:
  101|    363|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    363|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    363|        }
  105|    363|        let size = input_digest.len();
  106|    363|        let mut digest = [0; S];
  107|    363|        let mut i = 0;
  108|  1.97k|        while i < size {
  109|  1.60k|            digest[i] = input_digest[i];
  110|  1.60k|            i += 1;
  111|  1.60k|        }
  112|    363|        Ok(Self {
  113|    363|            code,
  114|    363|            size: size as u8,
  115|    363|            digest,
  116|    363|        })
  117|    363|    }
_RNvMs_NtCs6Yl6r13Ki3I_9multihash9multihashINtB4_9MultihashKj40_E4codeCskxbexpPPvyf_11common_fuzz:
  120|     13|    pub const fn code(&self) -> u64 {
  121|     13|        self.code
  122|     13|    }

_RNvXs4_NtCs6Yl6r13Ki3I_9multihash14multihash_implyINtNtCsUG827pA8ag_4core7convert4FromNtB5_4CodeE4from:
   11|     21|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocol8ProtocolNtNtCscdoVAoRIjja_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  4.34k|    fn from_u8(n: u8) -> Option<Self> {
  468|  4.34k|        FromPrimitive::from_u64(From::from(n))
  469|  4.34k|    }

_RNvMs2_NtCsllPYJFWufyT_9once_cell3impINtB5_8OnceCellNtNtCsddeQUdmtqP6_5alloc6string6StringE14is_initializedCsEXW0mRBWUw_11cbor_encode:
   62|    465|    pub(crate) fn is_initialized(&self) -> bool {
   63|    465|        // An `Acquire` load is enough because that makes all the initialization
   64|    465|        // operations visible to us, and, this being a fast path, weaker
   65|    465|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    465|        // `SeqCst` operations on the slow path.
   67|    465|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    465|    }

_RNvMs4_NtCsllPYJFWufyT_9once_cell4syncINtB5_8OnceCellNtNtCsddeQUdmtqP6_5alloc6string6StringE3getCsEXW0mRBWUw_11cbor_encode:
  869|    465|        pub fn get(&self) -> Option<&T> {
  870|    465|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    465|                None
  875|       |            }
  876|    465|        }

_RNvXCsei3EIldeqNP_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    726|    fn should_run() -> bool { true }
_RNvMs1_Csei3EIldeqNP_10scopeguardINtB5_10ScopeGuardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsEXW0mRBWUw_11cbor_encode:
  317|    726|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    726|        ScopeGuard {
  319|    726|            value: ManuallyDrop::new(v),
  320|    726|            dropfn: ManuallyDrop::new(dropfn),
  321|    726|            strategy: PhantomData,
  322|    726|        }
  323|    726|    }
_RNvXs5_Csei3EIldeqNP_10scopeguardINtB5_10ScopeGuardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsUG827pA8ag_4core3ops4drop4Drop4dropCsEXW0mRBWUw_11cbor_encode:
  452|    726|    fn drop(&mut self) {
  453|    726|        // This is OK because the fields are `ManuallyDrop`s
  454|    726|        // which will not be dropped by the compiler.
  455|    726|        let (value, dropfn) = unsafe {
  456|    726|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    726|        };
  458|    726|        if S::should_run() {
  459|    726|            dropfn(value);
  460|    726|        }
  461|    726|    }
_RNvXs4_Csei3EIldeqNP_10scopeguardINtB5_10ScopeGuardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsUG827pA8ag_4core3ops5deref8DerefMut9deref_mutCsEXW0mRBWUw_11cbor_encode:
  443|    726|    fn deref_mut(&mut self) -> &mut T {
  444|    726|        &mut *self.value
  445|    726|    }
_RINvCsei3EIldeqNP_10scopeguard5guardQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEFBy_EuECsEXW0mRBWUw_11cbor_encode:
  367|    726|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    726|    where F: FnOnce(T)
  369|    726|{
  370|    726|    ScopeGuard::with_strategy(v, dropfn)
  371|    726|}

_RINvXNvXsV_NtNtCs94lCMAiFPGZ_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsEXW0mRBWUw_11cbor_encode:
  138|    363|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    363|        where
  140|    363|            E: Error,
  141|    363|        {
  142|    363|            Ok(v)
  143|    363|        }
_RINvXsV_NtNtCs94lCMAiFPGZ_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  113|    363|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    363|            where
  115|    363|                D: Deserializer<'de>,
  116|    363|            {
  117|    363|                struct PrimitiveVisitor;
  118|    363|
  119|    363|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    363|                    type Value = $primitive;
  121|    363|
  122|    363|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    363|                        formatter.write_str(stringify!($primitive))
  124|    363|                    }
  125|    363|
  126|    363|                    $($($method!($val : $visit);)*)*
  127|    363|                }
  128|    363|
  129|    363|                deserializer.$deserialize(PrimitiveVisitor)
  130|    363|            }
_RINvXNvXsh_NtNtCs94lCMAiFPGZ_5serde2de5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
 1032|    363|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    363|            where
 1034|    363|                A: SeqAccess<'de>,
 1035|    363|            {
 1036|    363|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  4.34k|                while let Some(value) = try!(seq.next_element()) {
 1039|  3.98k|                    values.push(value);
 1040|  3.98k|                }
 1041|       |
 1042|    363|                Ok(values)
 1043|    363|            }
_RINvXsh_NtNtCs94lCMAiFPGZ_5serde2de5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
 1014|    363|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    363|    where
 1016|    363|        D: Deserializer<'de>,
 1017|    363|    {
 1018|    363|        struct VecVisitor<T> {
 1019|    363|            marker: PhantomData<T>,
 1020|    363|        }
 1021|    363|
 1022|    363|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    363|        where
 1024|    363|            T: Deserialize<'de>,
 1025|    363|        {
 1026|    363|            type Value = Vec<T>;
 1027|    363|
 1028|    363|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    363|                formatter.write_str("a sequence")
 1030|    363|            }
 1031|    363|
 1032|    363|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    363|            where
 1034|    363|                A: SeqAccess<'de>,
 1035|    363|            {
 1036|    363|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    363|
 1038|    363|                while let Some(value) = try!(seq.next_element()) {
 1039|    363|                    values.push(value);
 1040|    363|                }
 1041|    363|
 1042|    363|                Ok(values)
 1043|    363|            }
 1044|    363|        }
 1045|    363|
 1046|    363|        let visitor = VecVisitor {
 1047|    363|            marker: PhantomData,
 1048|    363|        };
 1049|    363|        deserializer.deserialize_seq(visitor)
 1050|    363|    }

_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCskhitFtkqptf_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  783|    363|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    363|    where
  785|    363|        D: Deserializer<'de>,
  786|    363|    {
  787|    363|        T::deserialize(deserializer)
  788|    363|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  783|    363|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    363|    where
  785|    363|        D: Deserializer<'de>,
  786|    363|    {
  787|    363|        T::deserialize(deserializer)
  788|    363|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB1p_7PayloadNtB6_11Deserialize11deserialize1__NtB1m_5InnerB2b_11deserializeNtB1h_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  783|    363|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    363|    where
  785|    363|        D: Deserializer<'de>,
  786|    363|    {
  787|    363|        T::deserialize(deserializer)
  788|    363|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressECsEXW0mRBWUw_11cbor_encode:
 1723|  4.70k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  4.70k|    where
 1725|  4.70k|        T: Deserialize<'de>,
 1726|  4.70k|    {
 1727|  4.70k|        self.next_element_seed(PhantomData)
 1728|  4.70k|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsEXW0mRBWUw_11cbor_encode:
 1723|    363|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    363|    where
 1725|    363|        T: Deserialize<'de>,
 1726|    363|    {
 1727|    363|        self.next_element_seed(PhantomData)
 1728|    363|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementyECsEXW0mRBWUw_11cbor_encode:
 1723|    363|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    363|    where
 1725|    363|        T: Deserialize<'de>,
 1726|    363|    {
 1727|    363|        self.next_element_seed(PhantomData)
 1728|    363|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  783|  4.34k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  4.34k|    where
  785|  4.34k|        D: Deserializer<'de>,
  786|  4.34k|    {
  787|  4.34k|        T::deserialize(deserializer)
  788|  4.34k|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  783|    363|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    363|    where
  785|    363|        D: Deserializer<'de>,
  786|    363|    {
  787|    363|        T::deserialize(deserializer)
  788|    363|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsEXW0mRBWUw_11cbor_encode:
 1723|    363|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    363|    where
 1725|    363|        T: Deserialize<'de>,
 1726|    363|    {
 1727|    363|        self.next_element_seed(PhantomData)
 1728|    363|    }
_RINvYNtNtCskhitFtkqptf_3cid5serde17BytesToCidVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor20visit_borrowed_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsEXW0mRBWUw_11cbor_encode:
 1563|    363|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    363|    where
 1565|    363|        E: Error,
 1566|    363|    {
 1567|    363|        self.visit_bytes(v)
 1568|    363|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  783|    363|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    363|    where
  785|    363|        D: Deserializer<'de>,
  786|    363|    {
  787|    363|        T::deserialize(deserializer)
  788|    363|    }
_RINvYNtNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCs94lCMAiFPGZ_5serde2de7Visitor20visit_borrowed_bytesINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsUG827pA8ag_4core7convert10InfallibleEECsEXW0mRBWUw_11cbor_encode:
 1563|    726|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    726|    where
 1565|    726|        E: Error,
 1566|    726|    {
 1567|    726|        self.visit_bytes(v)
 1568|    726|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldECsEXW0mRBWUw_11cbor_encode:
 1723|    363|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    363|    where
 1725|    363|        T: Deserialize<'de>,
 1726|    363|    {
 1727|    363|        self.next_element_seed(PhantomData)
 1728|    363|    }
_RINvXs3_NtCs94lCMAiFPGZ_5serde2deINtNtCsUG827pA8ag_4core6marker11PhantomDataNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  783|    363|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    363|    where
  785|    363|        D: Deserializer<'de>,
  786|    363|    {
  787|    363|        T::deserialize(deserializer)
  788|    363|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementINtNtCskhitFtkqptf_3cid3cid3CidKj40_EECsEXW0mRBWUw_11cbor_encode:
 1723|    363|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    363|    where
 1725|    363|        T: Deserialize<'de>,
 1726|    363|    {
 1727|    363|        self.next_element_seed(PhantomData)
 1728|    363|    }
_RINvYINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess12next_elementNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsEXW0mRBWUw_11cbor_encode:
 1723|    363|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    363|    where
 1725|    363|        T: Deserialize<'de>,
 1726|    363|    {
 1727|    363|        self.next_element_seed(PhantomData)
 1728|    363|    }

_RNvNtNtCs94lCMAiFPGZ_5serde9___private9size_hint8cautiousCsEXW0mRBWUw_11cbor_encode:
   12|    363|pub fn cautious(hint: Option<usize>) -> usize {
   13|    363|    cmp::min(hint.unwrap_or(0), 4096)
   14|    363|}

_RINvXsE_NtNtCs94lCMAiFPGZ_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   11|    726|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    726|            where
   13|    726|                S: Serializer,
   14|    726|            {
   15|    726|                serializer.$method(*self $($cast)*)
   16|    726|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  386|    726|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    726|            where
  388|    726|                S: Serializer,
  389|    726|            {
  390|    726|                (**self).serialize(serializer)
  391|    726|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  386|  8.68k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  8.68k|            where
  388|  8.68k|                S: Serializer,
  389|  8.68k|            {
  390|  8.68k|                (**self).serialize(serializer)
  391|  8.68k|            }
_RINvXs1k_NtNtCs94lCMAiFPGZ_5serde3ser5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  194|    726|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    726|            where
  196|    726|                S: Serializer,
  197|    726|            {
  198|    726|                serializer.collect_seq(self)
  199|    726|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  386|    726|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    726|            where
  388|    726|                S: Serializer,
  389|    726|            {
  390|    726|                (**self).serialize(serializer)
  391|    726|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  386|    726|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    726|            where
  388|    726|                S: Serializer,
  389|    726|            {
  390|    726|                (**self).serialize(serializer)
  391|    726|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRINtNtCskhitFtkqptf_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  386|    726|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    726|            where
  388|    726|                S: Serializer,
  389|    726|            {
  390|    726|                (**self).serialize(serializer)
  391|    726|            }
_RINvXs1E_NtNtCs94lCMAiFPGZ_5serde3ser5implsRNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  386|    726|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    726|            where
  388|    726|                S: Serializer,
  389|    726|            {
  390|    726|                (**self).serialize(serializer)
  391|    726|            }

_RINvYQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer11collect_seqRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsEXW0mRBWUw_11cbor_encode:
 1275|    726|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    726|    where
 1277|    726|        I: IntoIterator,
 1278|    726|        <I as IntoIterator>::Item: Serialize,
 1279|    726|    {
 1280|    726|        let iter = iter.into_iter();
 1281|    726|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    726|            let mut iter = iter;
 1286|    726|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    726|        serializer.end()
 1297|    726|    }
_RINvNtCs94lCMAiFPGZ_5serde3ser17iterator_len_hintINtNtNtCsUG827pA8ag_4core5slice4iter4IterNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsEXW0mRBWUw_11cbor_encode:
 1982|    726|    match iter.size_hint() {
 1983|    726|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    726|}
_RNCINvYQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer11collect_seqRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEE0CsEXW0mRBWUw_11cbor_encode:
 1286|  7.96k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXsc_NtCscEN7YdUwkvU_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  186|    726|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    726|    where
  188|    726|        S: Serializer,
  189|    726|    {
  190|    726|        serializer.serialize_bytes(&self.bytes)
  191|    726|    }
_RINvMNtCscEN7YdUwkvU_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsddeQUdmtqP6_5alloc3vec3VechEECsEXW0mRBWUw_11cbor_encode:
   60|    726|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    726|        ByteBuf {
   62|    726|            bytes: bytes.into(),
   63|    726|        }
   64|    726|    }

_RINvNtCsi8FzBKos3j5_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderECsEXW0mRBWUw_11cbor_encode:
   26|    726|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    726|    let buf = match reader.fill(1)? {
   28|    726|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    726|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    363|    Ok(byte)
   33|    726|}

_RNvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess9size_hintCsEXW0mRBWUw_11cbor_encode:
  500|    363|    fn size_hint(&self) -> Option<usize> {
  501|    363|        self.len
  502|    363|    }
_RINvXs7_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_bytesNtNtCskhitFtkqptf_3cid5serde17BytesToCidVisitorECsEXW0mRBWUw_11cbor_encode:
  646|    363|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    363|        let byte = peek_one(&mut self.0.reader)?;
  648|    363|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    363|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    363|                    Cow::Borrowed(buf) => {
  653|    363|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    363|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      0|                    Cow::Owned(mut buf) => {
  660|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      0|                            buf.remove(0);
  664|      0|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      0|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    363|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsEXW0mRBWUw_11cbor_encode:
  484|    363|        if let Some(len) = self.len.as_mut() {
  485|    363|            if *len > 0 {
  486|    363|                *len -= 1;
  487|    363|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    363|    }
_RNvMs1_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE5arrayCsEXW0mRBWUw_11cbor_encode:
  434|    363|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    363|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    363|        Ok(Accessor {
  437|    363|            de,
  438|    363|            len: array_start.0,
  439|    363|        })
  440|    363|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldEECsEXW0mRBWUw_11cbor_encode:
  484|    363|        if let Some(len) = self.len.as_mut() {
  485|    363|            if *len > 0 {
  486|    363|                *len -= 1;
  487|    363|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    363|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer20deserialize_byte_bufNtNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebuf14ByteBufVisitorECsEXW0mRBWUw_11cbor_encode:
  239|    726|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    726|    where
  241|    726|        V: Visitor<'de>,
  242|    726|    {
  243|    726|        self.deserialize_bytes(visitor)
  244|    726|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCskhitFtkqptf_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsEXW0mRBWUw_11cbor_encode:
  318|    363|    fn deserialize_newtype_struct<V>(
  319|    363|        self,
  320|    363|        name: &'static str,
  321|    363|        visitor: V,
  322|    363|    ) -> Result<V::Value, Self::Error>
  323|    363|    where
  324|    363|        V: Visitor<'de>,
  325|    363|    {
  326|    363|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    363|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    363|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3D_7PayloadNtB1R_11Deserialize11deserialize1__NtB3A_5InnerB4p_11deserializeNtB3v_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsEXW0mRBWUw_11cbor_encode:
  484|    363|        if let Some(len) = self.len.as_mut() {
  485|    363|            if *len > 0 {
  486|    363|                *len -= 1;
  487|    363|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    363|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs5AVzAzKkM8N_14cs_serde_bytes2deINtNtCsddeQUdmtqP6_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsEXW0mRBWUw_11cbor_encode:
  228|  4.70k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  4.70k|    where
  230|  4.70k|        V: Visitor<'de>,
  231|  4.70k|    {
  232|  4.70k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  4.70k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  4.70k|    }
_RINvNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de10from_sliceNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsEXW0mRBWUw_11cbor_encode:
   40|    363|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    363|where
   42|    363|    T: de::Deserialize<'a>,
   43|    363|{
   44|    363|    let reader = SliceReader::new(buf);
   45|    363|    let mut deserializer = Deserializer::from_reader(reader);
   46|    363|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    363|    deserializer.end()?;
   48|    363|    Ok(value)
   49|    363|}
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsEXW0mRBWUw_11cbor_encode:
  142|    363|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    363|        where V: Visitor<'de>
  144|    363|        {
  145|    363|            let value = <$t>::decode(&mut self.reader)?;
  146|    363|            visitor.$visit(value)
  147|    363|        }
_RNvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE3endCsEXW0mRBWUw_11cbor_encode:
  131|    363|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    363|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    363|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsEXW0mRBWUw_11cbor_encode:
  354|    363|    fn deserialize_tuple_struct<V>(
  355|    363|        self,
  356|    363|        _name: &'static str,
  357|    363|        len: usize,
  358|    363|        visitor: V,
  359|    363|    ) -> Result<V::Value, Self::Error>
  360|    363|    where
  361|    363|        V: Visitor<'de>,
  362|    363|    {
  363|    363|        self.deserialize_tuple(len, visitor)
  364|    363|    }
_RNvMNtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE11from_readerCsEXW0mRBWUw_11cbor_encode:
   93|    363|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    363|        Deserializer { reader }
   95|    363|    }
_RINvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCskhitFtkqptf_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsEXW0mRBWUw_11cbor_encode:
  113|    363|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    363|    where
  115|    363|        V: Visitor<'de>,
  116|    363|    {
  117|    363|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    363|        match tag.0 {
  120|    363|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    363|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_bytesNtNtCs5AVzAzKkM8N_14cs_serde_bytes7bytebuf14ByteBufVisitorECsEXW0mRBWUw_11cbor_encode:
  228|    726|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    726|    where
  230|    726|        V: Visitor<'de>,
  231|    726|    {
  232|    726|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    726|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    726|    }
_RNvMs1_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE5tupleCsEXW0mRBWUw_11cbor_encode:
  443|    363|    pub fn tuple(
  444|    363|        de: &'a mut Deserializer<R>,
  445|    363|        len: usize,
  446|    363|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    363|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    363|        if array_start.0 == Some(len) {
  450|    363|            Ok(Accessor {
  451|    363|                de,
  452|    363|                len: array_start.0,
  453|    363|            })
  454|       |        } else {
  455|      0|            Err(DecodeError::RequireLength {
  456|      0|                name: "tuple",
  457|      0|                expect: len,
  458|      0|                value: array_start.0.unwrap_or(0),
  459|      0|            })
  460|       |        }
  461|    363|    }
_RNvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE8try_stepCsEXW0mRBWUw_11cbor_encode:
  101|    726|    fn try_step<'a>(
  102|    726|        &'a mut self,
  103|    726|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    726|    {
  105|    726|        if self.reader.step_in() {
  106|    726|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    726|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEEECsEXW0mRBWUw_11cbor_encode:
  484|    363|        if let Some(len) = self.len.as_mut() {
  485|    363|            if *len > 0 {
  486|    363|                *len -= 1;
  487|    363|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    363|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsddeQUdmtqP6_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsEXW0mRBWUw_11cbor_encode:
  334|    363|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    363|    where
  336|    363|        V: Visitor<'de>,
  337|    363|    {
  338|    363|        let mut de = self.try_step()?;
  339|    363|        let seq = Accessor::array(&mut de)?;
  340|    363|        visitor.visit_seq(seq)
  341|    363|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsEXW0mRBWUw_11cbor_encode:
  344|    363|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    363|    where
  346|    363|        V: Visitor<'de>,
  347|    363|    {
  348|    363|        let mut de = self.try_step()?;
  349|    363|        let seq = Accessor::tuple(&mut de, len)?;
  350|    363|        visitor.visit_seq(seq)
  351|    363|    }
_RNCNvMs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderE8try_step0CsEXW0mRBWUw_11cbor_encode:
  106|    726|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataINtNtCskhitFtkqptf_3cid3cid3CidKj40_EEECsEXW0mRBWUw_11cbor_encode:
  484|    363|        if let Some(len) = self.len.as_mut() {
  485|    363|            if *len > 0 {
  486|    363|                *len -= 1;
  487|    363|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    363|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDatayEECsEXW0mRBWUw_11cbor_encode:
  484|    363|        if let Some(len) = self.len.as_mut() {
  485|    363|            if *len > 0 {
  486|    363|                *len -= 1;
  487|    363|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    363|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderENtNtCs94lCMAiFPGZ_5serde2de9SeqAccess17next_element_seedINtNtCsUG827pA8ag_4core6marker11PhantomDataNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsEXW0mRBWUw_11cbor_encode:
  484|  4.70k|        if let Some(len) = self.len.as_mut() {
  485|  4.70k|            if *len > 0 {
  486|  4.34k|                *len -= 1;
  487|  4.34k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    363|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  4.70k|    }

_RNvMNtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterE3newCsEXW0mRBWUw_11cbor_encode:
   51|    726|    pub fn new(writer: W) -> Serializer<W> {
   52|    726|        Serializer { writer }
   53|    726|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsEXW0mRBWUw_11cbor_encode:
  403|    726|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    726|        value.serialize(&mut *self.ser)
  405|    726|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer15serialize_tupleCsEXW0mRBWUw_11cbor_encode:
  239|    726|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    726|        Ok(BoundedCollect { ser: self })
  241|    726|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressECsEXW0mRBWUw_11cbor_encode:
  403|    726|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    726|        value.serialize(&mut *self.ser)
  405|    726|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer13serialize_seqCsEXW0mRBWUw_11cbor_encode:
  226|    726|        if let Some(len) = len {
  227|    726|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    726|        Ok(Collect {
  232|    726|            bounded: len.is_some(),
  233|    726|            ser: self,
  234|    726|        })
  235|    726|    }
_RINvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer24serialize_newtype_structNtNtCscEN7YdUwkvU_11serde_bytes7bytebuf7ByteBufECsEXW0mRBWUw_11cbor_encode:
  199|    726|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    726|        self,
  201|    726|        name: &'static str,
  202|    726|        value: &T,
  203|    726|    ) -> Result<Self::Ok, Self::Error> {
  204|    726|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    726|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    726|    }
_RINvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser12SerializeSeq17serialize_elementRNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressECsEXW0mRBWUw_11cbor_encode:
  369|  7.96k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  7.96k|        value.serialize(&mut *self.ser)
  371|  7.96k|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsEXW0mRBWUw_11cbor_encode:
  403|    726|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    726|        value.serialize(&mut *self.ser)
  405|    726|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer15serialize_bytesCsEXW0mRBWUw_11cbor_encode:
  160|  10.8k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  10.8k|        Ok(())
  162|  10.8k|    }
_RNvXs7_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer15serialize_bytesCsEXW0mRBWUw_11cbor_encode:
  550|    726|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    726|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    726|        let prefixed = [&[0x00], value].concat();
  553|    726|        // CIDs are serialized with CBOR tag 42.
  554|    726|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    726|        Ok(())
  556|    726|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsEXW0mRBWUw_11cbor_encode:
  403|    726|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    726|        value.serialize(&mut *self.ser)
  405|    726|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer22serialize_tuple_structCsEXW0mRBWUw_11cbor_encode:
  244|    726|    fn serialize_tuple_struct(
  245|    726|        self,
  246|    726|        _name: &'static str,
  247|    726|        len: usize,
  248|    726|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    726|        self.serialize_tuple(len)
  250|    726|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsddeQUdmtqP6_5alloc3vec3VecNtNtCsg5M8PL4Ya9o_10fvm_shared7address7AddressEECsEXW0mRBWUw_11cbor_encode:
  403|    726|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    726|        value.serialize(&mut *self.ser)
  405|    726|    }
_RNvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct3endCsEXW0mRBWUw_11cbor_encode:
  408|    726|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    726|        Ok(())
  410|    726|    }
_RNvXs0_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser12SerializeSeq3endCsEXW0mRBWUw_11cbor_encode:
  374|    726|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    726|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    726|        }
  378|       |
  379|    726|        Ok(())
  380|    726|    }
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCskhitFtkqptf_3cid3cid3CidKj40_EECsEXW0mRBWUw_11cbor_encode:
  403|    726|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    726|        value.serialize(&mut *self.ser)
  405|    726|    }
_RINvNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser6to_vecNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsEXW0mRBWUw_11cbor_encode:
   23|    726|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    726|where
   25|    726|    T: Serialize + ?Sized,
   26|    726|{
   27|    726|    let writer = BufWriter::new(Vec::new());
   28|    726|    let mut serializer = Serializer::new(writer);
   29|    726|    value.serialize(&mut serializer)?;
   30|    726|    Ok(serializer.into_inner().into_inner())
   31|    726|}
_RINvXs2_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCssVkL66IuLW_17fvm_ipld_bitfield8BitFieldECsEXW0mRBWUw_11cbor_encode:
  403|    726|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    726|        value.serialize(&mut *self.ser)
  405|    726|    }
_RNvXs_NtCsi8FzBKos3j5_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterENtNtCs94lCMAiFPGZ_5serde3ser10Serializer13serialize_u64CsEXW0mRBWUw_11cbor_encode:
  123|    726|        v.encode(&mut self.writer)?;
  124|    726|        Ok(())
  125|    726|    }
_RNvMNtCsi8FzBKos3j5_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterE10into_innerCsEXW0mRBWUw_11cbor_encode:
   56|    726|    pub fn into_inner(self) -> W {
   57|    726|        self.writer
   58|    726|    }

_RINvXs_CseGEyZedQVlX_11serde_tupleINtB5_12DeserializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEENtNtCs94lCMAiFPGZ_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsEXW0mRBWUw_11cbor_encode:
  353|    363|    fn deserialize_tuple_struct<V>(
  354|    363|        self,
  355|    363|        name: &'static str,
  356|    363|        len: usize,
  357|    363|        visitor: V,
  358|    363|    ) -> Result<V::Value, Self::Error>
  359|    363|    where
  360|    363|        V: serde::de::Visitor<'de>,
  361|    363|    {
  362|    363|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    363|    }
_RNvXCseGEyZedQVlX_11serde_tupleINtB2_10SerializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEENtNtCs94lCMAiFPGZ_5serde3ser10Serializer22serialize_tuple_structCsEXW0mRBWUw_11cbor_encode:
  158|    726|    fn serialize_tuple_struct(
  159|    726|        self,
  160|    726|        name: &'static str,
  161|    726|        len: usize,
  162|    726|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    726|        self.0.serialize_tuple_struct(name, len)
  164|    726|    }

_RNvNtCskfR01peMIm4_15unsigned_varint6decode3u64CsEXW0mRBWUw_11cbor_encode:
  122|  1.42k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.42k|    decode!(buf, 9, u64)
  124|  1.42k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6decode7is_lastCsEXW0mRBWUw_11cbor_encode:
   90|  4.39k|pub fn is_last(b: u8) -> bool {
   91|  4.39k|    b & 0x80 == 0
   92|  4.39k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6decode3u64Csg5M8PL4Ya9o_10fvm_shared:
  122|  2.92k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  2.92k|    decode!(buf, 9, u64)
  124|  2.92k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6decode7is_lastCsg5M8PL4Ya9o_10fvm_shared:
   90|  23.7k|pub fn is_last(b: u8) -> bool {
   91|  23.7k|    b & 0x80 == 0
   92|  23.7k|}

_RNvNtCskfR01peMIm4_15unsigned_varint6encode3u64CsEXW0mRBWUw_11cbor_encode:
   69|  2.12k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  2.12k|    encode!(number, buf)
   71|  2.12k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode10u64_bufferCsEXW0mRBWUw_11cbor_encode:
  119|  3.55k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.55k|    [0; U64_LEN]
  121|  3.55k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode2u8CsEXW0mRBWUw_11cbor_encode:
   45|    726|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    726|    encode!(number, buf)
   47|    726|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode9u8_bufferCsEXW0mRBWUw_11cbor_encode:
  101|    726|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    726|    [0; U8_LEN]
  103|    726|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode3u64Csg5M8PL4Ya9o_10fvm_shared:
   69|  5.84k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  5.84k|    encode!(number, buf)
   71|  5.84k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode10u64_bufferCsg5M8PL4Ya9o_10fvm_shared:
  119|  5.84k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  5.84k|    [0; U64_LEN]
  121|  5.84k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode10u64_bufferCssVkL66IuLW_17fvm_ipld_bitfield:
  119|  9.34k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  9.34k|    [0; U64_LEN]
  121|  9.34k|}
_RNvNtCskfR01peMIm4_15unsigned_varint6encode3u64CssVkL66IuLW_17fvm_ipld_bitfield:
   69|  9.34k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  9.34k|    encode!(number, buf)
   71|  9.34k|}

_RINvNtCskfR01peMIm4_15unsigned_varint2io8read_u64QQRShECsEXW0mRBWUw_11cbor_encode:
   31|  1.42k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.42k|                let mut b = encode::$b();
   33|  2.19k|                for i in 0 .. b.len() {
   34|  2.19k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  2.19k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  2.19k|                    }
   38|  2.19k|                    if decode::is_last(b[i]) {
   39|  1.42k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    770|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.42k|            }

_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEE3newB9_:
  467|  1.12k|    fn new(mut iter: I) -> Self {
  468|  1.12k|        let next = iter.next();
  469|  1.12k|        Self { iter, next }
  470|  1.12k|    }
_RNvXsb_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1U_5slice4iter4IterINtNtNtB1U_3ops5range5RangeyEEEEIB1z_INtNtNtB1S_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1Q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3B_NtB5_10DifferenceEENtNtNtB1S_6traits8iterator8Iterator4nextB9_:
  437|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  438|  8.85k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  7.72k|        while let Some(next) = self.iter.peek() {
  443|  7.15k|            if next.start > range.end {
  444|  7.15k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  7.72k|        Some(range)
  452|  8.85k|    }
_RNvMs5_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBT_INtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3d_NtB5_10DifferenceE3newB9_:
  297|  1.12k|    pub fn new(a: A, b: B) -> Self {
  298|  1.12k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.12k|    }
_RNvMsa_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1U_5slice4iter4IterINtNtNtB1U_3ops5range5RangeyEEEEIB1z_INtNtNtB1S_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1Q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3B_NtB5_10DifferenceEE3newB9_:
  424|  1.12k|    pub fn new(iter: I) -> Self {
  425|  1.12k|        Self {
  426|  1.12k|            iter: Lookahead::new(iter),
  427|  1.12k|        }
  428|  1.12k|    }
_RNvXNtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  7.72k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  7.72k|        // the union of a range and an empty range is just that range
  111|  7.72k|        Some(lhs)
  112|  7.72k|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1u_6traits8iterator8Iterator4nexts_0Bb_:
  389|  7.72k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  8.85k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.85k|        self.next.as_mut()
  474|  8.85k|    }
_RNvMsa_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1G_5slice4iter4IterINtNtNtB1G_3ops5range5RangeyEEEEIB1l_INtNtNtB1E_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1C_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|  1.12k|    pub fn new(iter: I) -> Self {
  425|  1.12k|        Self {
  426|  1.12k|            iter: Lookahead::new(iter),
  427|  1.12k|        }
  428|  1.12k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1s_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  17.7k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  17.7k|        self.next.as_mut()
  474|  17.7k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|  1.12k|    fn new(mut iter: I) -> Self {
  468|  1.12k|        let next = iter.next();
  469|  1.12k|        Self { iter, next }
  470|  1.12k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1Y_5slice4iter4IterINtNtNtB1Y_3ops5range5RangeyEEEEIB1D_INtNtNtB1W_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1U_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEE4peekB9_:
  472|  7.72k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.72k|        self.next.as_mut()
  474|  7.72k|    }
_RNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEIB19_INtNtNtB1s_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1s_6traits8iterator8Iterator4nextB9_:
  387|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  388|  8.85k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  8.85k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  8.85k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1s_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|  2.24k|    fn new(mut iter: I) -> Self {
  468|  2.24k|        let next = iter.next();
  469|  2.24k|        Self { iter, next }
  470|  2.24k|    }
_RNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceENtNtNtB1G_6traits8iterator8Iterator4nextB9_:
  387|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  388|  8.85k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  8.85k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  8.85k|    }
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEENtNtNtB1s_6traits8iterator8Iterator4nextB9_:
  480|  7.72k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.72k|        let next = self.next.take()?;
  483|  7.72k|        self.next = self.iter.next();
  484|  7.72k|        Some(next)
  485|  7.72k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|  1.12k|    fn new(mut iter: I) -> Self {
  468|  1.12k|        let next = iter.next();
  469|  1.12k|        Self { iter, next }
  470|  1.12k|    }
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1Y_5slice4iter4IterINtNtNtB1Y_3ops5range5RangeyEEEEIB1D_INtNtNtB1W_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1U_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEENtNtNtB1W_6traits8iterator8Iterator4nextB9_:
  480|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.85k|        let next = self.next.take()?;
  483|  7.72k|        self.next = self.iter.next();
  484|  7.72k|        Some(next)
  485|  8.85k|    }
_RNvXs6_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1q_6traits8iterator8Iterator4nextB9_:
  310|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  311|  8.85k|        self.0.next()
  312|  8.85k|    }
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1G_6traits8iterator8Iterator4nextB9_:
  480|  7.72k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  7.72k|        let next = self.next.take()?;
  483|  7.72k|        self.next = self.iter.next();
  484|  7.72k|        Some(next)
  485|  7.72k|    }
_RNvXsf_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsUG827pA8ag_4core7default7Default7defaultB9_:
   86|  1.12k|#[derive(Default)]
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceE3newB9_:
  342|  1.12k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.12k|        Self {
  344|  1.12k|            lhs: Lookahead::new(lhs),
  345|  1.12k|            rhs: Lookahead::new(rhs),
  346|  1.12k|            combinator: Default::default(),
  347|  1.12k|        }
  348|  1.12k|    }
_RNvXsh_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsUG827pA8ag_4core7default7Default7defaultB9_:
  151|  1.12k|#[derive(Default)]
_RNvXse_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1I_6traits8iterator8Iterator4nextB9_:
  480|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  8.85k|        let next = self.next.take()?;
  483|  7.72k|        self.next = self.iter.next();
  484|  7.72k|        Some(next)
  485|  8.85k|    }
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1I_5slice4iter4IterINtNtNtB1I_3ops5range5RangeyEEEEIB1n_INtNtNtB1G_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1E_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceE10next_rangeB9_:
  353|  8.85k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  8.85k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  7.72k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  1.12k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.72k|        if advance_lhs {
  370|  7.72k|            self.lhs.next();
  371|  7.72k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  7.72k|        range
  376|  8.85k|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3r_NtB7_10DifferenceENtNtNtB1I_6traits8iterator8Iterator4next0Bb_:
  389|  8.85k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEE4peekB9_:
  472|  8.85k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  8.85k|        self.next.as_mut()
  474|  8.85k|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1u_6traits8iterator8Iterator4next0Bb_:
  389|  8.85k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEIB19_INtNtNtB1s_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  1.12k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.12k|        Self {
  344|  1.12k|            lhs: Lookahead::new(lhs),
  345|  1.12k|            rhs: Lookahead::new(rhs),
  346|  1.12k|            combinator: Default::default(),
  347|  1.12k|        }
  348|  1.12k|    }
_RNvXs6_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBT_INtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1w_5slice4iter4IterINtNtNtB1w_3ops5range5RangeyEEEEIB1b_INtNtNtB1u_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1s_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3d_NtB5_10DifferenceENtNtNtB1u_6traits8iterator8Iterator4nextB9_:
  310|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  311|  8.85k|        self.0.next()
  312|  8.85k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1Y_5slice4iter4IterINtNtNtB1Y_3ops5range5RangeyEEEEIB1D_INtNtNtB1W_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1U_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEE3newB9_:
  467|  1.12k|    fn new(mut iter: I) -> Self {
  468|  1.12k|        let next = iter.next();
  469|  1.12k|        Self { iter, next }
  470|  1.12k|    }
_RNvMsd_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  7.72k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  7.72k|        self.next.as_mut()
  474|  7.72k|    }
_RNvXs0_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  7.72k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  7.72k|        // the difference between a range and an empty range is just that range
  183|  7.72k|        Some(lhs)
  184|  7.72k|    }
_RNvMs5_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  1.12k|    pub fn new(a: A, b: B) -> Self {
  298|  1.12k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.12k|    }
_RNCNvXs9_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1K_5slice4iter4IterINtNtNtB1K_3ops5range5RangeyEEEEIB1p_INtNtNtB1I_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1G_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3r_NtB7_10DifferenceENtNtNtB1I_6traits8iterator8Iterator4nexts_0Bb_:
  389|  7.72k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsb_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1G_5slice4iter4IterINtNtNtB1G_3ops5range5RangeyEEEEIB1l_INtNtNtB1E_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1C_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1E_6traits8iterator8Iterator4nextB9_:
  437|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  438|  8.85k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  7.72k|        while let Some(next) = self.iter.peek() {
  443|  7.15k|            if next.start > range.end {
  444|  7.15k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  7.72k|        Some(range)
  452|  8.85k|    }
_RNvMs8_NtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1u_5slice4iter4IterINtNtNtB1u_3ops5range5RangeyEEEEIB19_INtNtNtB1s_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1q_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  8.85k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  8.85k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  7.72k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  1.12k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.72k|        if advance_lhs {
  370|  7.72k|            self.lhs.next();
  371|  7.72k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  7.72k|        range
  376|  8.85k|    }

_RNvXs3_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB12_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtNtNtB12_6traits8iterator8Iterator4nextB7_:
  153|  2.24k|    fn next(&mut self) -> Option<Self::Item> {
  154|  2.24k|        self.0.next()
  155|  2.24k|    }
_RINvNtCssVkL66IuLW_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsUG827pA8ag_4core4iter8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEEB4_:
  163|  2.24k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  2.24k|    let mut iter = bits.into_iter().peekable();
  165|  2.24k|
  166|  2.24k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  2.24k|    }))
  180|  2.24k|}
_RINvYINtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtBZ_5slice4iter4IterINtNtNtBZ_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBX_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBV_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  1.12k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  1.12k|        Combine::new(self, other)
   23|  1.12k|    }
_RINvMs2_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsUG827pA8ag_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EE3newBW_EB8_:
  139|  2.24k|    pub fn new<II>(iter: II) -> Self
  140|  2.24k|    where
  141|  2.24k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  2.24k|    {
  143|  2.24k|        Self(iter.into_iter())
  144|  2.24k|    }
_RINvYINtNtNtCssVkL66IuLW_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB1n_5slice4iter4IterINtNtNtB1n_3ops5range5RangeyEEEEIB12_INtNtNtB1l_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1j_6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB34_EBa_:
   31|  1.12k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  1.12k|        Combine::new(self, other)
   33|  1.12k|    }
_RNvXs3_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB14_5slice4iter4IterINtNtNtB14_3ops5range5RangeyEEEENtNtNtB12_6traits8iterator8Iterator4nextB7_:
  153|  8.85k|    fn next(&mut self) -> Option<Self::Item> {
  154|  8.85k|        self.0.next()
  155|  8.85k|    }
_RINvMs2_NtCssVkL66IuLW_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsUG827pA8ag_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEE3newBW_EB8_:
  139|  1.12k|    pub fn new<II>(iter: II) -> Self
  140|  1.12k|    where
  141|  1.12k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  1.12k|    {
  143|  1.12k|        Self(iter.into_iter())
  144|  1.12k|    }
_RNCINvNtCssVkL66IuLW_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsUG827pA8ag_4core4iter8adapters6copied6CopiedINtNtNtNtCsddeQUdmtqP6_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  2.24k|    Ranges::new(iter::from_fn(move || {
  167|  2.24k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  2.24k|    }))

_RNvMs4_CssVkL66IuLW_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|  1.12k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|  1.12k|        self.inner_ranges()
  287|  1.12k|            .union(ranges_from_bits(self.set.iter().copied()))
  288|  1.12k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|  1.12k|    }
_RNvMs4_CssVkL66IuLW_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|  1.12k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|  1.12k|        iter::Ranges::new(self.ranges.iter().cloned())
  281|  1.12k|    }
_RNvXsi_CssVkL66IuLW_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsUG827pA8ag_4core7default7Default7defaultB5_:
   42|  1.29k|#[derive(Debug, Default, Clone)]

_RNvXNtCssVkL66IuLW_17fvm_ipld_bitfield5rangeINtNtNtCsUG827pA8ag_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  7.72k|    fn size(&self) -> Self::Idx {
   15|  7.72k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  7.72k|            self.end - self.start
   19|       |        }
   20|  7.72k|    }

_RINvXs_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   97|    363|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    363|    where
   99|    363|        D: Deserializer<'de>,
  100|    363|    {
  101|    363|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    363|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    363|        }
  108|    363|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    363|    }
_RINvXNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   81|    919|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    919|    where
   83|    919|        S: Serializer,
   84|    919|    {
   85|    919|        let bytes = self.to_bytes();
   86|    919|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    919|        }
   92|    919|        serde_bytes::serialize(&bytes, serializer)
   93|    919|    }
_RNvXs0_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitrary:
  113|    930|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|    930|        let mut next_value: bool = bool::arbitrary(u)?;
  115|    930|        let mut ranges = Vec::new();
  116|    930|        let mut index = 0u64;
  117|    930|        let mut total_len: u64 = 0;
  118|       |
  119|    930|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|    930|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  9.48k|            let len = u64::arbitrary(u)?;
  124|  9.48k|            let shift = u.int_in_range(0..=63)?;
  125|  9.48k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  9.48k|
  127|  9.48k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  9.48k|            if ovf {
  129|     35|                break;
  130|  9.44k|            }
  131|  9.44k|            total_len = new_total_len;
  132|  9.44k|            let start = index;
  133|  9.44k|            index += len;
  134|  9.44k|            let end = index;
  135|  9.44k|
  136|  9.44k|            if next_value {
  137|  4.74k|                ranges.push(start..end);
  138|  4.74k|            }
  139|       |
  140|  9.44k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|    930|        Ok(Self {
  144|    930|            ranges,
  145|    930|            ..Default::default()
  146|    930|        })
  147|    930|    }
_RNvXs0_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hint:
  149|    932|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    932|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    932|    }
_RNvMs1_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    363|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    363|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    363|        let version = reader.read(2);
  160|    363|        if version != 0 {
  161|      0|            return Err(Error::UnsupportedVersion);
  162|    363|        }
  163|    363|
  164|    363|        let mut next_value = reader.read(1) == 1;
  165|    363|        let mut ranges = Vec::new();
  166|    363|        let mut index = 0u64;
  167|    363|        let mut total_len: u64 = 0;
  168|       |
  169|  7.46k|        while let Some(len) = reader.read_len()? {
  170|  7.10k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  7.10k|            if ovf {
  172|      0|                return Err(Error::RLEOverflow);
  173|  7.10k|            }
  174|  7.10k|            total_len = new_total_len;
  175|  7.10k|            let start = index;
  176|  7.10k|            index += len;
  177|  7.10k|            let end = index;
  178|  7.10k|
  179|  7.10k|            if next_value {
  180|  3.59k|                ranges.push(start..end);
  181|  3.59k|            }
  182|       |
  183|  7.10k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    363|        if next_value {
  189|      0|            return Err(Error::NotMinimal);
  190|    363|        }
  191|    363|
  192|    363|        Ok(Self {
  193|    363|            ranges,
  194|    363|            ..Default::default()
  195|    363|        })
  196|    363|    }
_RNvMs1_NtCssVkL66IuLW_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|  1.12k|    pub fn to_bytes(&self) -> Vec<u8> {
  200|  1.12k|        let mut iter = self.ranges();
  201|       |
  202|  1.12k|        let first_range = match iter.next() {
  203|    571|            Some(range) => range,
  204|    551|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    571|        let mut writer = BitWriter::new();
  208|    571|        writer.write(0, 2); // version 00
  209|    571|
  210|    571|        if first_range.start == 0 {
  211|    240|            writer.write(1, 1); // the first bit is a 1
  212|    331|        } else {
  213|    331|            writer.write(0, 1); // the first bit is a 0
  214|    331|            writer.write_len(first_range.start); // the number of leading 0s
  215|    331|        }
  216|       |
  217|    571|        writer.write_len(first_range.size());
  218|    571|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  7.72k|        for range in iter {
  223|  7.15k|            writer.write_len(range.start - index); // zeros
  224|  7.15k|            writer.write_len(range.size()); // ones
  225|  7.15k|            index = range.end;
  226|  7.15k|        }
  227|       |
  228|    571|        writer.finish()
  229|  1.12k|    }

_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  7.46k|    pub fn has_more(&self) -> bool {
  153|  7.46k|        self.bits != 0 || !self.bytes.is_empty()
  154|  7.46k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  7.46k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  7.46k|        // We're done.
  120|  7.46k|        if !self.has_more() {
  121|    363|            return Ok(None);
  122|  7.10k|        }
  123|  7.10k|
  124|  7.10k|        let peek6 = self.peek(6);
  125|       |
  126|  7.10k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|    973|            self.drop(1);
  129|    973|            1
  130|  6.12k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  1.83k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  1.83k|            self.drop(6);
  134|  1.83k|            if val < 2 {
  135|      0|                return Err(Error::NotMinimal);
  136|  1.83k|            }
  137|  1.83k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  4.29k|            self.drop(2);
  141|  4.29k|            let val = self.read_varint()?;
  142|  4.29k|            if val < 16 {
  143|      0|                return Err(Error::NotMinimal);
  144|  4.29k|            }
  145|  4.29k|            val
  146|       |        };
  147|       |
  148|  7.10k|        Ok(Some(len))
  149|  7.46k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  31.5k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  31.5k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  31.5k|        let mask = (1 << num_bits) - 1;
   55|  31.5k|        (self.bits & mask) as u8
   56|  31.5k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  4.29k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  4.29k|        let mut len = 0u64;
   94|       |
   95|  23.7k|        for i in 0..VARINT_MAX_BYTES {
   96|  23.7k|            let byte = self.read(8);
   97|  23.7k|
   98|  23.7k|            // strip off the most significant bit and add
   99|  23.7k|            // it to the output
  100|  23.7k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  23.7k|
  102|  23.7k|            // if the most significant bit is a 0, we've
  103|  23.7k|            // reached the end of the varint
  104|  23.7k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  4.29k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      0|                    break;
  109|  4.29k|                }
  110|  4.29k|                return Ok(len);
  111|  19.4k|            }
  112|       |        }
  113|       |
  114|      0|        Err(Error::InvalidVarint)
  115|  4.29k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  24.4k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  24.4k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  24.4k|        let res = self.peek(num_bits);
   85|  24.4k|        self.drop(num_bits);
   86|  24.4k|
   87|  24.4k|        res
   88|  24.4k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  31.5k|    pub fn drop(&mut self, num_bits: u32) {
   61|  31.5k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  31.5k|        self.bits >>= num_bits;
   65|  31.5k|        self.num_bits -= num_bits;
   66|  31.5k|
   67|  31.5k|        // not sure why this being outside of the if improves the performance
   68|  31.5k|        // bit it does, probably related to keeping caches warm
   69|  31.5k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  31.5k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  31.5k|
   72|  31.5k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  31.5k|        if self.num_bits < 8 {
   74|  26.2k|            self.num_bits += 8;
   75|  26.2k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  26.2k|        }
   77|  31.5k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    363|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    363|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    363|        // data.
   28|    363|        if bytes.last() == Some(&0) {
   29|      0|            return Err(Error::NotMinimal);
   30|    363|        }
   31|    363|        let mut bits = 0u64;
   32|  1.08k|        for i in 0..2 {
   33|    726|            let byte = bytes.get(i).unwrap_or(&0);
   34|    726|            bits |= (*byte as u64) << (8 * i);
   35|    726|        }
   36|       |
   37|    363|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    363|
   39|    363|        Ok(Self {
   40|    363|            bytes,
   41|    363|            bits,
   42|    363|            num_bits: 16,
   43|    363|        })
   44|    363|    }

_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  15.2k|    pub fn write_len(&mut self, len: u64) {
   39|  15.2k|        debug_assert!(len > 0);
   40|       |
   41|  15.2k|        if len == 1 {
   42|  2.02k|            // Block Single (prefix 1)
   43|  2.02k|            self.write(1, 1);
   44|  13.1k|        } else if len < 16 {
   45|  3.85k|            // Block Short (prefix 01)
   46|  3.85k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  3.85k|            self.write(len as u8, 4);
   48|  3.85k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  9.34k|            self.write(0, 2);
   51|  9.34k|
   52|  9.34k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  52.1k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  52.1k|                self.write(byte, 8);
   55|  52.1k|            }
   56|       |        }
   57|  15.2k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  72.3k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  72.3k|        debug_assert!(num_bits <= 8);
   24|  72.3k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  72.3k|        self.bits |= (byte as u16) << self.num_bits;
   27|  72.3k|        self.num_bits += num_bits;
   28|  72.3k|
   29|  72.3k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  72.3k|        if self.num_bits >= 8 {
   31|  57.5k|            self.bytes.push(self.bits as u8);
   32|  57.5k|            self.bits >>= 8;
   33|  57.5k|            self.num_bits -= 8;
   34|  57.5k|        }
   35|  72.3k|    }
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    571|    pub fn finish(mut self) -> Vec<u8> {
   61|    571|        if self.bits > 0 {
   62|    277|            self.bytes.push(self.bits as u8);
   63|    294|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    571|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    571|        self.bytes
   71|    571|    }
_RNvXs_NtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsUG827pA8ag_4core7default7Default7defaultB8_:
    4|    571|#[derive(Default, Clone, Debug)]
_RNvMNtNtCssVkL66IuLW_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    571|    pub fn new() -> Self {
   18|    571|        Default::default()
   19|    571|    }

_RINvXNvXNvNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1m_9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   35|    533|#[derive(Debug, Serialize)]
_RINvXs4_NtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   93|    363|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    363|    where
   95|    363|        D: Deserializer<'de>,
   96|    363|    {
   97|    363|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    363|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    363|        }
  104|    363|        Ok(Self::Unvalidated(bytes))
  105|    363|    }
_RINvXNvNtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   35|    726|#[derive(Debug, Serialize)]
_RNvXs1_NtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hint:
   70|    466|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   71|    466|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   72|    466|    }
_RNvXs1_NtCssVkL66IuLW_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitrary:
   61|    465|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   62|    465|        let bf: BitField = u.arbitrary()?;
   63|    465|        Ok(if *u.choose(&[true, false])? {
   64|    210|            Self::Validated(bf)
   65|       |        } else {
   66|    203|            Self::Unvalidated(bf.to_bytes())
   67|       |        })
   68|    465|    }

_RINvCs6hP7RYj9RD6_17fvm_ipld_encoding10from_sliceNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsEXW0mRBWUw_11cbor_encode:
   50|    363|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    363|where
   52|    363|    T: de::Deserialize<'a>,
   53|    363|{
   54|    363|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    363|}
_RINvCs6hP7RYj9RD6_17fvm_ipld_encoding6to_vecNtNtCskxbexpPPvyf_11common_fuzz4cbor7PayloadECsEXW0mRBWUw_11cbor_encode:
   33|    726|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    726|where
   35|    726|    T: ser::Serialize + ?Sized,
   36|    726|{
   37|    726|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    726|}

_RINvXs2_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB6_7AddressNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
  264|  8.68k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|  8.68k|    where
  266|  8.68k|        S: Serializer,
  267|  8.68k|    {
  268|  8.68k|        let address_bytes = self.to_bytes();
  269|  8.68k|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|  8.68k|    }
_RINvXs3_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB6_7AddressNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
  274|  4.34k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  4.34k|    where
  276|  4.34k|        D: Deserializer<'de>,
  277|  4.34k|    {
  278|  4.34k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  4.34k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  4.34k|    }
_RNvXse_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB5_7AddressNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
   68|    466|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXse_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB7_7AddressNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
   68|    466|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXse_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB5_7AddressNtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitrary:
   68|  5.29k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  4.34k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  4.34k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  4.34k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  4.34k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  4.34k|    }
_RNvMs_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|  8.68k|    pub fn to_bytes(self) -> Vec<u8> {
  177|  8.68k|        self.payload.to_bytes()
  178|  8.68k|    }
_RNvNtCsg5M8PL4Ya9o_10fvm_shared7address12to_leb_bytes:
  310|  5.84k|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|  5.84k|    // write id to buffer in leb128 format
  312|  5.84k|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|  5.84k|}
_RNvMs_NtCsg5M8PL4Ya9o_10fvm_shared7addressNtB4_7Address3new:
   78|  4.34k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  4.34k|        Ok(Self {
   80|  4.34k|            network,
   81|  4.34k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  4.34k|    }
_RNvNtCsg5M8PL4Ya9o_10fvm_shared7address14from_leb_bytes:
  315|  2.92k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|  2.92k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|  2.92k|    if !remaining.is_empty() {
  319|      0|        return Err(Error::InvalidPayload);
  320|  2.92k|    }
  321|  2.92k|    Ok(id)
  322|  2.92k|}

_RNvXs8_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7networkNtB5_7NetworkNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
    8|    466|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXs8_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7networkNtB7_7NetworkNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
    8|    466|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs8_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7networkNtB5_7NetworkNtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitrary:
    8|  5.29k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNCNvXs9_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB7_7PayloadNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
   12|    466|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs9_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB5_7PayloadNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
   12|    466|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|  8.68k|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|  8.68k|        let mut bz = match self {
   40|  5.84k|            ID(i) => to_leb_bytes(i).unwrap(),
   41|  1.71k|            Secp256k1(arr) => arr.to_vec(),
   42|    568|            Actor(arr) => arr.to_vec(),
   43|    564|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|  8.68k|        bz.insert(0, Protocol::from(self) as u8);
   47|  8.68k|        bz
   48|  8.68k|    }
_RNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  4.34k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  4.34k|        let payload = match protocol {
   53|  2.92k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    857|                payload
   56|    857|                    .try_into()
   57|    857|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    284|                payload
   61|    284|                    .try_into()
   62|    284|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    282|                payload
   66|    282|                    .try_into()
   67|    282|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  4.34k|        Ok(payload)
   71|  4.34k|    }
_RNvXs9_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtB5_7PayloadNtCsfqNTpL4djRT_9arbitrary9Arbitrary9arbitrary:
   12|  5.29k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs_NtNtCsg5M8PL4Ya9o_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsUG827pA8ag_4core7convert4FromNtB4_7PayloadE4from:
   75|  8.68k|    fn from(pl: Payload) -> Self {
   76|  8.68k|        match pl {
   77|  5.84k|            Payload::ID(_) => Self::ID,
   78|  1.71k|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|    568|            Payload::Actor(_) => Self::Actor,
   80|    564|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|  8.68k|    }

_RNvMNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  4.34k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  4.34k|        FromPrimitive::from_u8(b)
   28|  4.34k|    }
_RNvXNvNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscdoVAoRIjja_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  4.34k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCsg5M8PL4Ya9o_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscdoVAoRIjja_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  4.34k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RNCINvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtBd_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de8AccessorNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEE0CsEXW0mRBWUw_11cbor_encode:
   10|    363|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtBe_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   10|    363|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXs0_NtCskxbexpPPvyf_11common_fuzz4cborNtB7_7PayloadNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hint0CsEXW0mRBWUw_11cbor_encode:
   10|    466|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCskxbexpPPvyf_11common_fuzz4cborNtB5_7PayloadNtCsfqNTpL4djRT_9arbitrary9Arbitrary9size_hintCsEXW0mRBWUw_11cbor_encode:
   10|    466|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCskxbexpPPvyf_11common_fuzz4cborNtB8_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCseGEyZedQVlX_11serde_tuple12DeserializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEEECsEXW0mRBWUw_11cbor_encode:
   10|    363|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtBd_7PayloadNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   10|    726|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtB5_7PayloadNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEECsEXW0mRBWUw_11cbor_encode:
   10|    726|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCskxbexpPPvyf_11common_fuzz4cborNtBa_7PayloadNtNtCs94lCMAiFPGZ_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCseGEyZedQVlX_11serde_tuple10SerializerQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils9BufWriterEEECsEXW0mRBWUw_11cbor_encode:
   10|    726|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCskxbexpPPvyf_11common_fuzz4cborNtB3_7PayloadNtNtCs94lCMAiFPGZ_5serde2de11Deserialize11deserializeQINtNtCsi8FzBKos3j5_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs2IAGTsgeePC_7cbor4ii4core5utils11SliceReaderEECsEXW0mRBWUw_11cbor_encode:
   10|    363|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCskxbexpPPvyf_11common_fuzz4cborNtB5_7PayloadNtCsfqNTpL4djRT_9arbitrary9Arbitrary19arbitrary_take_rest:
   10|    567|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

