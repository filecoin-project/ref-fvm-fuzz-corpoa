_RNCNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
  658|  17.6k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  17.6k|            <T as Arbitrary>::size_hint(d)
  660|  17.6k|        }))
_RINvCs5aPMSeyGZCB_9arbitrary12create_arrayNCNvXs8_B2_Ahj3_NtB2_9Arbitrary9size_hint0TjINtNtCsjJTzLsQPs9f_4core6option6OptionjEEKBR_ECs96Jtz7q8ZTb_11cbor_encode:
  596|    367|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    367|where
  598|    367|    F: FnMut(usize) -> T,
  599|    367|{
  600|    367|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    367|    let array_ptr = array.as_mut_ptr();
  602|    367|    let dst = array_ptr as _;
  603|    367|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    367|        dst,
  605|    367|        initialized: 0,
  606|    367|    };
  607|       |    unsafe {
  608|  1.10k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  1.10k|            core::ptr::write(value_ptr, cb(idx));
  610|  1.10k|            guard.initialized += 1;
  611|  1.10k|        }
  612|    367|        mem::forget(guard);
  613|    367|        array.assume_init()
  614|    367|    }
  615|    367|}
_RNvXsH_Cs5aPMSeyGZCB_9arbitraryjNtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  302|    734|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    734|                    let n = mem::size_of::<$ty>();
  304|    734|                    (n, Some(n))
  305|    734|                }
_RNvXsa_Cs5aPMSeyGZCB_9arbitraryINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  690|    367|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    367|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    367|    }
_RINvCs5aPMSeyGZCB_9arbitrary12create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9size_hint0TjINtNtCsjJTzLsQPs9f_4core6option6OptionjEEKBR_ECs96Jtz7q8ZTb_11cbor_encode:
  596|    734|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    734|where
  598|    734|    F: FnMut(usize) -> T,
  599|    734|{
  600|    734|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    734|    let array_ptr = array.as_mut_ptr();
  602|    734|    let dst = array_ptr as _;
  603|    734|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    734|        dst,
  605|    734|        initialized: 0,
  606|    734|    };
  607|       |    unsafe {
  608|  14.6k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  14.6k|            core::ptr::write(value_ptr, cb(idx));
  610|  14.6k|            guard.initialized += 1;
  611|  14.6k|        }
  612|    734|        mem::forget(guard);
  613|    734|        array.assume_init()
  614|    734|    }
  615|    734|}
_RNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  657|    734|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    734|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    734|        }))
  661|    734|    }
_RNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  657|    367|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    367|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    367|        }))
  661|    367|    }
_RNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  657|    367|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    367|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    367|        }))
  661|    367|    }
_RINvCs5aPMSeyGZCB_9arbitrary12create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9size_hint0TjINtNtCsjJTzLsQPs9f_4core6option6OptionjEEKBR_ECs96Jtz7q8ZTb_11cbor_encode:
  596|    367|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    367|where
  598|    367|    F: FnMut(usize) -> T,
  599|    367|{
  600|    367|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    367|    let array_ptr = array.as_mut_ptr();
  602|    367|    let dst = array_ptr as _;
  603|    367|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    367|        dst,
  605|    367|        initialized: 0,
  606|    367|    };
  607|       |    unsafe {
  608|  17.6k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  17.6k|            core::ptr::write(value_ptr, cb(idx));
  610|  17.6k|            guard.initialized += 1;
  611|  17.6k|        }
  612|    367|        mem::forget(guard);
  613|    367|        array.assume_init()
  614|    367|    }
  615|    367|}
_RNCNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
  658|    734|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|    734|            <T as Arbitrary>::size_hint(d)
  660|    734|        }))
_RNCNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
  658|  14.6k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  14.6k|            <T as Arbitrary>::size_hint(d)
  660|  14.6k|        }))
_RINvCs5aPMSeyGZCB_9arbitrary12create_arrayNCNvXs8_B2_Ahj2_NtB2_9Arbitrary9size_hint0TjINtNtCsjJTzLsQPs9f_4core6option6OptionjEEKBR_ECs96Jtz7q8ZTb_11cbor_encode:
  596|    367|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    367|where
  598|    367|    F: FnMut(usize) -> T,
  599|    367|{
  600|    367|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    367|    let array_ptr = array.as_mut_ptr();
  602|    367|    let dst = array_ptr as _;
  603|    367|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    367|        dst,
  605|    367|        initialized: 0,
  606|    367|    };
  607|       |    unsafe {
  608|    734|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|    734|            core::ptr::write(value_ptr, cb(idx));
  610|    734|            guard.initialized += 1;
  611|    734|        }
  612|    367|        mem::forget(guard);
  613|    367|        array.assume_init()
  614|    367|    }
  615|    367|}
_RNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  657|    367|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    367|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    367|        }))
  661|    367|    }
_RNvXsE_Cs5aPMSeyGZCB_9arbitrarymNtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  302|    734|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    734|                    let n = mem::size_of::<$ty>();
  304|    734|                    (n, Some(n))
  305|    734|                }
_RNvXsa_Cs5aPMSeyGZCB_9arbitraryINtNtCslIW5YV6Lhnx_5alloc3vec3VechENtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  690|    367|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  691|    367|        crate::size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  692|    367|    }
_RNCNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
  658|  1.10k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  1.10k|            <T as Arbitrary>::size_hint(d)
  660|  1.10k|        }))
_RNvXsC_Cs5aPMSeyGZCB_9arbitraryhNtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  302|  34.4k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  34.4k|                    let n = mem::size_of::<$ty>();
  304|  34.4k|                    (n, Some(n))
  305|  34.4k|                }
_RNvXsF_Cs5aPMSeyGZCB_9arbitraryyNtB5_9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  302|    734|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    734|                    let n = mem::size_of::<$ty>();
  304|    734|                    (n, Some(n))
  305|    734|                }
_RNvXsa_Cs5aPMSeyGZCB_9arbitraryINtNtCslIW5YV6Lhnx_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCs4TDbzq0ehG5_11common_fuzz:
  682|    366|        u.arbitrary_iter()?.collect()
  683|    366|    }
_RNvYINtNtCs7LdGhvAwabf_3cid3cid3CidKj40_ENtCs5aPMSeyGZCB_9arbitrary9Arbitrary19arbitrary_take_restCs4TDbzq0ehG5_11common_fuzz:
  182|    323|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    323|        Self::arbitrary(&mut u)
  184|    323|    }
_RNvXsa_Cs5aPMSeyGZCB_9arbitraryINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCs4TDbzq0ehG5_11common_fuzz:
  682|    366|        u.arbitrary_iter()?.collect()
  683|    366|    }
_RNCNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Csf4zcuWwU8ki_10fvm_shared:
  644|  16.9k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCsf4zcuWwU8ki_10fvm_shared:
  643|    891|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    891|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    891|    }
_RNCNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Csf4zcuWwU8ki_10fvm_shared:
  644|  17.8k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RINvCs5aPMSeyGZCB_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECsf4zcuWwU8ki_10fvm_shared:
  617|    353|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    353|where
  619|    353|    F: FnMut(usize) -> Result<T>,
  620|    353|{
  621|    353|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    353|    let array_ptr = array.as_mut_ptr();
  623|    353|    let dst = array_ptr as _;
  624|    353|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    353|        dst,
  626|    353|        initialized: 0,
  627|    353|    };
  628|       |    unsafe {
  629|  16.9k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  16.9k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  16.9k|            guard.initialized += 1;
  632|       |        }
  633|    353|        mem::forget(guard);
  634|    353|        Ok(array.assume_init())
  635|       |    }
  636|    353|}
_RNvXs8_Cs5aPMSeyGZCB_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCsf4zcuWwU8ki_10fvm_shared:
  643|    353|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    353|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    353|    }
_RINvCs5aPMSeyGZCB_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECsf4zcuWwU8ki_10fvm_shared:
  617|    891|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    891|where
  619|    891|    F: FnMut(usize) -> Result<T>,
  620|    891|{
  621|    891|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    891|    let array_ptr = array.as_mut_ptr();
  623|    891|    let dst = array_ptr as _;
  624|    891|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    891|        dst,
  626|    891|        initialized: 0,
  627|    891|    };
  628|       |    unsafe {
  629|  17.8k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  17.8k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  17.8k|            guard.initialized += 1;
  632|       |        }
  633|    891|        mem::forget(guard);
  634|    891|        Ok(array.assume_init())
  635|       |    }
  636|    891|}
_RNvXsC_Cs5aPMSeyGZCB_9arbitraryhNtB5_9Arbitrary9size_hintCs8yox8sNCvE1_17fvm_ipld_bitfield:
  302|    732|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    732|                    let n = mem::size_of::<$ty>();
  304|    732|                    (n, Some(n))
  305|    732|                }
_RNvXsF_Cs5aPMSeyGZCB_9arbitraryyNtB5_9Arbitrary9size_hintCs8yox8sNCvE1_17fvm_ipld_bitfield:
  302|    732|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    732|                    let n = mem::size_of::<$ty>();
  304|    732|                    (n, Some(n))
  305|    732|                }
_RNvXsH_Cs5aPMSeyGZCB_9arbitraryjNtB5_9Arbitrary9size_hintCs8yox8sNCvE1_17fvm_ipld_bitfield:
  302|    734|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    734|                    let n = mem::size_of::<$ty>();
  304|    734|                    (n, Some(n))
  305|    734|                }
_RNvXs1j_Cs5aPMSeyGZCB_9arbitraryTyhENtB6_9Arbitrary9size_hintCs8yox8sNCvE1_17fvm_ipld_bitfield:
  568|    732|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|    732|                crate::size_hint::and_all(&[
  570|    732|                    <$last as Arbitrary>::size_hint(depth),
  571|    732|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|    732|                ])
  573|    732|            }
_RNvXsC_Cs5aPMSeyGZCB_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  46.9k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  46.9k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  46.9k|                    u.fill_buffer(&mut buf)?;
  294|  46.9k|                    let mut x: $unsigned = 0;
  295|  46.9k|                    for i in 0..mem::size_of::<$ty>() {
  296|  46.9k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  46.9k|                    }
  298|  46.9k|                    Ok(x as $ty)
  299|  46.9k|                }
_RNvXs_Cs5aPMSeyGZCB_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  7.50k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  7.50k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  7.50k|    }
_RNvXsF_Cs5aPMSeyGZCB_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  9.89k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  9.89k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  9.89k|                    u.fill_buffer(&mut buf)?;
  294|  9.89k|                    let mut x: $unsigned = 0;
  295|  79.1k|                    for i in 0..mem::size_of::<$ty>() {
  296|  79.1k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  79.1k|                    }
  298|  9.89k|                    Ok(x as $ty)
  299|  9.89k|                }
_RNvXsE_Cs5aPMSeyGZCB_9arbitrarymNtB5_9Arbitrary9arbitrary:
  291|  6.62k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  6.62k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  6.62k|                    u.fill_buffer(&mut buf)?;
  294|  6.62k|                    let mut x: $unsigned = 0;
  295|  26.4k|                    for i in 0..mem::size_of::<$ty>() {
  296|  26.4k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  26.4k|                    }
  298|  6.62k|                    Ok(x as $ty)
  299|  6.62k|                }

_RNvNtCs5aPMSeyGZCB_9arbitrary9size_hint6or_allCs96Jtz7q8ZTb_11cbor_encode:
   58|    734|    if let Some(head) = hints.first().copied() {
   59|    734|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    734|}
_RNCNCNvNtCs5aPMSeyGZCB_9arbitrary9size_hint2or00Cs96Jtz7q8ZTb_11cbor_encode:
   48|  1.83k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RINvNtCs5aPMSeyGZCB_9arbitrary9size_hint15recursion_guardNCNvXse_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB11_7AddressNtB4_9Arbitrary9size_hint0ECs96Jtz7q8ZTb_11cbor_encode:
   12|    367|pub fn recursion_guard(
   13|    367|    depth: usize,
   14|    367|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    367|) -> (usize, Option<usize>) {
   16|    367|    const MAX_DEPTH: usize = 20;
   17|    367|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    367|        f(depth + 1)
   21|       |    }
   22|    367|}
_RNvNtCs5aPMSeyGZCB_9arbitrary9size_hint2orCs96Jtz7q8ZTb_11cbor_encode:
   44|  1.83k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.83k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.83k|    let upper = lhs
   47|  1.83k|        .1
   48|  1.83k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.83k|    (lower, upper)
   50|  1.83k|}
_RNvNtCs5aPMSeyGZCB_9arbitrary9size_hint7and_allCs96Jtz7q8ZTb_11cbor_encode:
   37|  5.13k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.13k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.13k|}
_RNCNCNvNtCs5aPMSeyGZCB_9arbitrary9size_hint3and00Cs96Jtz7q8ZTb_11cbor_encode:
   28|  38.9k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs5aPMSeyGZCB_9arbitrary9size_hint3andCs96Jtz7q8ZTb_11cbor_encode:
   26|  42.2k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  42.2k|    let lower = lhs.0 + rhs.0;
   28|  42.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  42.2k|    (lower, upper)
   30|  42.2k|}
_RINvNtCs5aPMSeyGZCB_9arbitrary9size_hint15recursion_guardNCNvXs0_NtCs4TDbzq0ehG5_11common_fuzz4cborNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECs96Jtz7q8ZTb_11cbor_encode:
   12|    367|pub fn recursion_guard(
   13|    367|    depth: usize,
   14|    367|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    367|) -> (usize, Option<usize>) {
   16|    367|    const MAX_DEPTH: usize = 20;
   17|    367|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    367|        f(depth + 1)
   21|       |    }
   22|    367|}
_RNCNvNtCs5aPMSeyGZCB_9arbitrary9size_hint2or0Cs96Jtz7q8ZTb_11cbor_encode:
   48|  1.83k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCs5aPMSeyGZCB_9arbitrary9size_hint3and0Cs96Jtz7q8ZTb_11cbor_encode:
   28|  40.0k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCs5aPMSeyGZCB_9arbitrary9size_hint15recursion_guardNCNvXs8_NtNtCsf4zcuWwU8ki_10fvm_shared7address7networkNtB11_7NetworkNtB4_9Arbitrary9size_hint0ECs96Jtz7q8ZTb_11cbor_encode:
   12|    367|pub fn recursion_guard(
   13|    367|    depth: usize,
   14|    367|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    367|) -> (usize, Option<usize>) {
   16|    367|    const MAX_DEPTH: usize = 20;
   17|    367|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    367|        f(depth + 1)
   21|       |    }
   22|    367|}
_RINvNtCs5aPMSeyGZCB_9arbitrary9size_hint15recursion_guardNCNvXs9_NtNtCsf4zcuWwU8ki_10fvm_shared7address7payloadNtB11_7PayloadNtB4_9Arbitrary9size_hint0ECs96Jtz7q8ZTb_11cbor_encode:
   12|    367|pub fn recursion_guard(
   13|    367|    depth: usize,
   14|    367|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    367|) -> (usize, Option<usize>) {
   16|    367|    const MAX_DEPTH: usize = 20;
   17|    367|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    367|        f(depth + 1)
   21|       |    }
   22|    367|}
_RNvNtCs5aPMSeyGZCB_9arbitrary9size_hint7and_allCs8yox8sNCvE1_17fvm_ipld_bitfield:
   37|    732|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    732|    hints.iter().copied().fold((0, Some(0)), and)
   39|    732|}
_RNCNvNtCs5aPMSeyGZCB_9arbitrary9size_hint3and0Cs8yox8sNCvE1_17fvm_ipld_bitfield:
   28|  2.19k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs5aPMSeyGZCB_9arbitrary9size_hint3andCs8yox8sNCvE1_17fvm_ipld_bitfield:
   26|  2.56k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.56k|    let lower = lhs.0 + rhs.0;
   28|  2.56k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.56k|    (lower, upper)
   30|  2.56k|}
_RNCNCNvNtCs5aPMSeyGZCB_9arbitrary9size_hint3and00Cs8yox8sNCvE1_17fvm_ipld_bitfield:
   28|  1.46k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs4TDbzq0ehG5_11common_fuzz:
  301|    323|    fn int_in_range_impl<T>(
  302|    323|        range: ops::RangeInclusive<T>,
  303|    323|        mut bytes: impl Iterator<Item = u8>,
  304|    323|    ) -> Result<(T, usize)>
  305|    323|    where
  306|    323|        T: Int,
  307|    323|    {
  308|    323|        let start = range.start();
  309|    323|        let end = range.end();
  310|    323|        assert!(
  311|    323|            start <= end,
  312|    323|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    323|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    323|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    323|        }
  320|    323|
  321|    323|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    323|        let mut result = T::Widest::ZERO;
  323|    323|        let mut offset: usize = 0;
  324|       |
  325|    640|        while offset < mem::size_of::<T>()
  326|    640|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    317|        {
  328|    323|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    317|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    317|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    317|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    317|            result = result % range;
  336|    317|        }
  337|       |
  338|    317|        Ok((
  339|    317|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    317|            offset,
  341|    317|        ))
  342|    323|    }
_RNvXs_NtCs5aPMSeyGZCB_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCsjJTzLsQPs9f_4core4iter6traits8iterator8Iterator4nextCs4TDbzq0ehG5_11common_fuzz:
  666|  3.46k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  3.46k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  3.46k|        if keep_going {
  669|  3.09k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    366|            None
  672|       |        }
  673|  3.46k|    }
_RNvXs_NtCs5aPMSeyGZCB_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtNtNtNtCsjJTzLsQPs9f_4core4iter6traits8iterator8Iterator4nextCs4TDbzq0ehG5_11common_fuzz:
  666|  3.31k|    fn next(&mut self) -> Option<Result<ElementType>> {
  667|  3.31k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  668|  3.31k|        if keep_going {
  669|  2.94k|            Some(Arbitrary::arbitrary(self.u))
  670|       |        } else {
  671|    366|            None
  672|       |        }
  673|  3.31k|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECs4TDbzq0ehG5_11common_fuzz:
  167|  6.77k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  6.77k|    where
  169|  6.77k|        A: Arbitrary<'a>,
  170|  6.77k|    {
  171|  6.77k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  6.77k|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECs4TDbzq0ehG5_11common_fuzz:
  292|    323|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    323|    where
  294|    323|        T: Int,
  295|    323|    {
  296|    323|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    317|        self.data = &self.data[bytes_consumed..];
  298|    317|        Ok(result)
  299|    323|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECs4TDbzq0ehG5_11common_fuzz:
  411|    323|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  412|    323|    where
  413|    323|        T: Int,
  414|    323|    {
  415|    323|        assert!(T::ZERO < numerator);
  416|    323|        assert!(numerator <= denominator);
  417|    323|        let x = self.int_in_range(T::ONE..=denominator)?;
  418|    317|        Ok(x <= numerator)
  419|    323|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECs4TDbzq0ehG5_11common_fuzz:
  292|    300|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    300|    where
  294|    300|        T: Int,
  295|    300|    {
  296|    300|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    281|        self.data = &self.data[bytes_consumed..];
  298|    281|        Ok(result)
  299|    300|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCs5Ugcc0YwzS7_9multihash9multihash9MultihashKj40_EECs4TDbzq0ehG5_11common_fuzz:
  167|    300|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    300|    where
  169|    300|        A: Arbitrary<'a>,
  170|    300|    {
  171|    300|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    300|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressECs4TDbzq0ehG5_11common_fuzz:
  534|    366|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    366|        &'b mut self,
  536|    366|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    366|        Ok(ArbitraryIter {
  538|    366|            u: &mut *self,
  539|    366|            _marker: PhantomData,
  540|    366|        })
  541|    366|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECs4TDbzq0ehG5_11common_fuzz:
  167|  1.61k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.61k|    where
  169|  1.61k|        A: Arbitrary<'a>,
  170|  1.61k|    {
  171|  1.61k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.61k|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs4TDbzq0ehG5_11common_fuzz:
  301|    300|    fn int_in_range_impl<T>(
  302|    300|        range: ops::RangeInclusive<T>,
  303|    300|        mut bytes: impl Iterator<Item = u8>,
  304|    300|    ) -> Result<(T, usize)>
  305|    300|    where
  306|    300|        T: Int,
  307|    300|    {
  308|    300|        let start = range.start();
  309|    300|        let end = range.end();
  310|    300|        assert!(
  311|    300|            start <= end,
  312|    300|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    300|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    300|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    300|        }
  320|    300|
  321|    300|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    300|        let mut result = T::Widest::ZERO;
  323|    300|        let mut offset: usize = 0;
  324|       |
  325|    581|        while offset < mem::size_of::<T>()
  326|    581|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    281|        {
  328|    300|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    281|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    281|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    281|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    281|            result = result % range;
  336|    281|        }
  337|       |
  338|    281|        Ok((
  339|    281|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    281|            offset,
  341|    281|        ))
  342|    300|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECs4TDbzq0ehG5_11common_fuzz:
  534|    366|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  535|    366|        &'b mut self,
  536|    366|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  537|    366|        Ok(ArbitraryIter {
  538|    366|            u: &mut *self,
  539|    366|            _marker: PhantomData,
  540|    366|        })
  541|    366|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs8yox8sNCvE1_17fvm_ipld_bitfield:
  301|    366|    fn int_in_range_impl<T>(
  302|    366|        range: ops::RangeInclusive<T>,
  303|    366|        mut bytes: impl Iterator<Item = u8>,
  304|    366|    ) -> Result<(T, usize)>
  305|    366|    where
  306|    366|        T: Int,
  307|    366|    {
  308|    366|        let start = range.start();
  309|    366|        let end = range.end();
  310|    366|        assert!(
  311|    366|            start <= end,
  312|    366|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    366|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    366|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    366|        }
  320|    366|
  321|    366|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    366|        let mut result = T::Widest::ZERO;
  323|    366|        let mut offset: usize = 0;
  324|       |
  325|    689|        while offset < mem::size_of::<T>()
  326|    689|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    323|        {
  328|    366|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    323|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    323|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    323|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    323|            result = result % range;
  336|    323|        }
  337|       |
  338|    323|        Ok((
  339|    323|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    323|            offset,
  341|    323|        ))
  342|    366|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECs8yox8sNCvE1_17fvm_ipld_bitfield:
  213|    732|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    732|    where
  215|    732|        ElementType: Arbitrary<'a>,
  216|    732|    {
  217|    732|        let byte_size = self.arbitrary_byte_size()?;
  218|    732|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    732|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|    732|        let elem_size = std::cmp::max(1, elem_size);
  221|    732|        Ok(byte_size / elem_size)
  222|    732|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs8yox8sNCvE1_17fvm_ipld_bitfield:
  301|  7.45k|    fn int_in_range_impl<T>(
  302|  7.45k|        range: ops::RangeInclusive<T>,
  303|  7.45k|        mut bytes: impl Iterator<Item = u8>,
  304|  7.45k|    ) -> Result<(T, usize)>
  305|  7.45k|    where
  306|  7.45k|        T: Int,
  307|  7.45k|    {
  308|  7.45k|        let start = range.start();
  309|  7.45k|        let end = range.end();
  310|  7.45k|        assert!(
  311|  7.45k|            start <= end,
  312|  7.45k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  7.45k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  7.45k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  7.45k|        }
  320|  7.45k|
  321|  7.45k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  7.45k|        let mut result = T::Widest::ZERO;
  323|  7.45k|        let mut offset: usize = 0;
  324|       |
  325|  14.9k|        while offset < mem::size_of::<T>()
  326|  14.9k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  7.45k|        {
  328|  7.45k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  7.45k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  7.45k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  7.45k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  7.45k|            result = result % range;
  336|  7.45k|        }
  337|       |
  338|  7.45k|        Ok((
  339|  7.45k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  7.45k|            offset,
  341|  7.45k|        ))
  342|  7.45k|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECs8yox8sNCvE1_17fvm_ipld_bitfield:
  292|    366|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|    366|    where
  294|    366|        T: Int,
  295|    366|    {
  296|    366|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|    323|        self.data = &self.data[bytes_consumed..];
  298|    323|        Ok(result)
  299|    366|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCs8yox8sNCvE1_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    366|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    366|    where
  169|    366|        A: Arbitrary<'a>,
  170|    366|    {
  171|    366|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    366|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECs8yox8sNCvE1_17fvm_ipld_bitfield:
  292|  7.45k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  7.45k|    where
  294|  7.45k|        T: Int,
  295|  7.45k|    {
  296|  7.45k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  7.45k|        self.data = &self.data[bytes_consumed..];
  298|  7.45k|        Ok(result)
  299|  7.45k|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured6choosebECs8yox8sNCvE1_17fvm_ipld_bitfield:
  378|    366|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  379|    366|        if choices.is_empty() {
  380|      0|            return Err(Error::EmptyChoose);
  381|    366|        }
  382|    366|        let idx = self.int_in_range(0..=choices.len() - 1)?;
  383|    323|        Ok(&choices[idx])
  384|    366|    }
_RNvXs5_NtCs5aPMSeyGZCB_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  2.00k|                fn from_usize(u: usize) -> Self {
  781|  2.00k|                    u as Self
  782|  2.00k|                }
_RNvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  476|    298|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  477|    298|        if self.data.len() < size {
  478|     18|            return Err(Error::NotEnoughData);
  479|    280|        }
  480|    280|
  481|    280|        let (for_buf, rest) = self.data.split_at(size);
  482|    280|        self.data = rest;
  483|    280|        Ok(for_buf)
  484|    298|    }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|     87|    fn int_in_range_impl<T>(
  302|     87|        range: ops::RangeInclusive<T>,
  303|     87|        mut bytes: impl Iterator<Item = u8>,
  304|     87|    ) -> Result<(T, usize)>
  305|     87|    where
  306|     87|        T: Int,
  307|     87|    {
  308|     87|        let start = range.start();
  309|     87|        let end = range.end();
  310|     87|        assert!(
  311|     87|            start <= end,
  312|     87|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|     87|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|     87|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|     87|        }
  320|     87|
  321|     87|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|     87|        let mut result = T::Widest::ZERO;
  323|     87|        let mut offset: usize = 0;
  324|       |
  325|    257|        while offset < mem::size_of::<T>()
  326|    174|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    170|        {
  328|    170|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    170|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    170|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|     87|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|     87|            result = result % range;
  336|     87|        }
  337|       |
  338|     87|        Ok((
  339|     87|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|     87|            offset,
  341|     87|        ))
  342|     87|    }
_RNvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  63.4k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  63.4k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  63.4k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  63.4k|        for byte in buffer[n..].iter_mut() {
  453|  1.00k|            *byte = 0;
  454|  1.00k|        }
  455|  63.4k|        self.data = &self.data[n..];
  456|  63.4k|        Ok(())
  457|  63.4k|    }
_RNvXs1_NtCs5aPMSeyGZCB_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    565|                fn from_widest(w: Self::Widest) -> Self {
  772|    565|                    let x = <$ty>::max_value().as_widest();
  773|    565|                    (w % x) as Self
  774|    565|                }
_RINvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    565|    fn int_in_range_impl<T>(
  302|    565|        range: ops::RangeInclusive<T>,
  303|    565|        mut bytes: impl Iterator<Item = u8>,
  304|    565|    ) -> Result<(T, usize)>
  305|    565|    where
  306|    565|        T: Int,
  307|    565|    {
  308|    565|        let start = range.start();
  309|    565|        let end = range.end();
  310|    565|        assert!(
  311|    565|            start <= end,
  312|    565|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    565|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    565|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    565|        }
  320|    565|
  321|    565|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    565|        let mut result = T::Widest::ZERO;
  323|    565|        let mut offset: usize = 0;
  324|       |
  325|  1.13k|        while offset < mem::size_of::<T>()
  326|    565|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    565|        {
  328|    565|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    565|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    565|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    565|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    565|            result = result % range;
  336|    565|        }
  337|       |
  338|    565|        Ok((
  339|    565|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    565|            offset,
  341|    565|        ))
  342|    565|    }
_RNvXs2_NtCs5aPMSeyGZCB_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    348|                fn as_widest(self) -> Self::Widest {
  768|    348|                    self as $widest
  769|    348|                }
_RNvXs6_NtCs5aPMSeyGZCB_9arbitrary12unstructuredjNtB5_3Int9as_widest:
  767|  2.54k|                fn as_widest(self) -> Self::Widest {
  768|  2.54k|                    self as $widest
  769|  2.54k|                }
_RNvXs9_NtCs5aPMSeyGZCB_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  7.77k|                fn from_widest(w: Self::Widest) -> Self {
  772|  7.77k|                    let x = <$ty>::max_value().as_widest();
  773|  7.77k|                    (w % x) as Self
  774|  7.77k|                }
_RNvXsb_NtCs5aPMSeyGZCB_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  7.77k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  7.77k|                    <$ty>::wrapping_add(self, rhs)
  790|  7.77k|                }
_RNvXsb_NtCs5aPMSeyGZCB_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  7.77k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  7.77k|                    <$ty>::checked_add(self, rhs)
  786|  7.77k|                }
_RNvXsb_NtCs5aPMSeyGZCB_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  15.5k|                fn from_usize(u: usize) -> Self {
  781|  15.5k|                    u as Self
  782|  15.5k|                }
_RNvXs1_NtCs5aPMSeyGZCB_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  2.26k|                fn as_widest(self) -> Self::Widest {
  768|  2.26k|                    self as $widest
  769|  2.26k|                }
_RNvXs9_NtCs5aPMSeyGZCB_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  31.1k|                fn as_widest(self) -> Self::Widest {
  768|  31.1k|                    self as $widest
  769|  31.1k|                }
_RNvXs5_NtCs5aPMSeyGZCB_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|  1.25k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  1.25k|                    <$ty>::checked_add(self, rhs)
  786|  1.25k|                }
_RNvXs2_NtCs5aPMSeyGZCB_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|     87|                fn from_widest(w: Self::Widest) -> Self {
  772|     87|                    let x = <$ty>::max_value().as_widest();
  773|     87|                    (w % x) as Self
  774|     87|                }
_RNvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    732|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    732|        if self.data.is_empty() {
  226|     79|            Ok(0)
  227|    653|        } else if self.data.len() == 1 {
  228|      1|            self.data = &[];
  229|      1|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    652|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    565|                let bytes = 1;
  241|    565|                let max_size = self.data.len() - bytes;
  242|    565|                let (rest, for_size) = self.data.split_at(max_size);
  243|    565|                self.data = rest;
  244|    565|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|     87|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|     87|                let bytes = 2;
  247|     87|                let max_size = self.data.len() - bytes;
  248|     87|                let (rest, for_size) = self.data.split_at(max_size);
  249|     87|                self.data = rest;
  250|     87|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    652|            Ok(len)
  266|       |        }
  267|    732|    }
_RNvXs5_NtCs5aPMSeyGZCB_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.33k|                fn from_u8(b: u8) -> Self {
  777|  1.33k|                    b as Self
  778|  1.33k|                }
_RNvXs6_NtCs5aPMSeyGZCB_9arbitrary12unstructuredjNtB5_3Int11from_widest:
  771|    604|                fn from_widest(w: Self::Widest) -> Self {
  772|    604|                    let x = <$ty>::max_value().as_widest();
  773|    604|                    (w % x) as Self
  774|    604|                }
_RNvMNtCs5aPMSeyGZCB_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    366|    pub fn new(data: &'a [u8]) -> Self {
   86|    366|        Unstructured { data }
   87|    366|    }
_RNvXsb_NtCs5aPMSeyGZCB_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  7.77k|                fn from_u8(b: u8) -> Self {
  777|  7.77k|                    b as Self
  778|  7.77k|                }
_RNvXs5_NtCs5aPMSeyGZCB_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|  1.25k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  1.25k|                    <$ty>::wrapping_add(self, rhs)
  790|  1.25k|                }

_RINvXs5_NtNtCs6TEMOj0c6O5_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCslIW5YV6Lhnx_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  506|  3.87k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  507|  3.87k|        use crate::alloc::borrow::Cow;
  508|  3.87k|
  509|  3.87k|        let mut buf = Vec::new();
  510|  3.87k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  511|  3.87k|            Cow::Borrowed(longbuf)
  512|       |        } else {
  513|      0|            Cow::Owned(buf)
  514|       |        }))
  515|  3.87k|    }
_RINvYyNtNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
   73|    280|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    280|        let byte = pull_one(reader)?;
   75|    280|        Self::decode_with(byte, reader)
   76|    280|    }
_RNvNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec8if_majorCs96Jtz7q8ZTb_11cbor_encode:
  890|    280|pub fn if_major(byte: u8) -> u8 {
  891|    280|    byte >> 5
  892|    280|}
_RINvNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  125|  5.68k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  5.68k|    let b = reader.fill(1)?
  127|  5.68k|        .as_ref()
  128|  5.68k|        .get(0)
  129|  5.68k|        .copied()
  130|  5.68k|        .ok_or(Error::Eof)?;
  131|  5.68k|    reader.advance(1);
  132|  5.68k|    Ok(b)
  133|  5.68k|}
_RINvYINtNtNtCs6TEMOj0c6O5_7cbor4ii4core5types5BytesINtNtCslIW5YV6Lhnx_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
   73|  3.87k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  3.87k|        let byte = pull_one(reader)?;
   75|  3.87k|        Self::decode_with(byte, reader)
   76|  3.87k|    }
_RINvYNtNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
   73|    560|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    560|        let byte = pull_one(reader)?;
   75|    560|        Self::decode_with(byte, reader)
   76|    560|    }
_RINvXss_NtNtCs6TEMOj0c6O5_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  252|    280|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  253|    280|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  254|    280|                }
_RINvNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  427|  3.87k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  428|  3.87k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  429|  3.87k|{
  430|       |    const CAP_LIMIT: usize = 16 * 1024;
  431|       |
  432|  3.87k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  433|       |        // try long lifetime buffer
  434|  3.87k|        if let Reference::Long(buf) = reader.fill(len)? {
  435|  3.87k|            if buf.len() >= len {
  436|  3.87k|                reader.advance(len);
  437|  3.87k|                return Ok(Some(&buf[..len]));
  438|      0|            }
  439|      0|        }
  440|       |
  441|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  442|       |
  443|      0|        while len != 0 {
  444|      0|            let readbuf = reader.fill(len)?;
  445|      0|            let readbuf = readbuf.as_ref();
  446|      0|
  447|      0|            if readbuf.is_empty() {
  448|      0|                return Err(Error::Eof);
  449|      0|            }
  450|      0|
  451|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  452|      0|
  453|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  454|      0|            reader.advance(readlen);
  455|      0|            len -= readlen;
  456|       |        }
  457|       |
  458|      0|        Ok(None)
  459|       |    } else {
  460|       |        // bytes sequence
  461|       |        loop {
  462|      0|            let byte = pull_one(reader)?;
  463|       |
  464|      0|            if byte == marker::BREAK {
  465|      0|                break
  466|      0|            }
  467|      0|
  468|      0|            if !reader.step_in() {
  469|      0|                return Err(Error::DepthLimit);
  470|      0|            }
  471|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  472|      0|            let reader = &mut *reader;
  473|       |
  474|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  475|      0|                buf.extend_from_slice(longbuf);
  476|      0|            }
  477|       |        }
  478|       |
  479|      0|        Ok(None)
  480|       |    }
  481|  3.87k|}
_RINvNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  595|  4.43k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  596|  4.43k|    -> Result<Option<usize>, Error<R::Error>>
  597|  4.43k|{
  598|  4.43k|    if byte != (marker::START | (major << 5)) {
  599|  4.43k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  600|  4.43k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  601|  4.43k|        Ok(Some(len))
  602|       |    } else {
  603|      0|        Ok(None)
  604|       |    }
  605|  4.43k|}
_RINvXsc_NtNtCs6TEMOj0c6O5_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  611|    560|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  612|    560|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  613|    560|    }
_RINvXsg_NtNtCs6TEMOj0c6O5_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  703|    280|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  704|    280|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  705|    280|    }
_RINvNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  136|    300|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    600|    while !buf.is_empty() {
  138|    300|        let readbuf = reader.fill(buf.len())?;
  139|    300|        let readbuf = readbuf.as_ref();
  140|    300|
  141|    300|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    300|        }
  144|    300|
  145|    300|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    300|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    300|        reader.advance(len);
  148|    300|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    300|    Ok(())
  152|    300|}
_RNvMNtNtCs6TEMOj0c6O5_7cbor4ii4core3decNtB2_9Reference6as_refCs96Jtz7q8ZTb_11cbor_encode:
   81|  5.98k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  5.98k|        match self {
   83|  5.98k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  5.98k|    }
_RNvMs0_NtNtCs6TEMOj0c6O5_7cbor4ii4core3decNtB5_7TypeNum3newCs96Jtz7q8ZTb_11cbor_encode:
  175|  4.99k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  176|  4.99k|        TypeNum { major_limit, byte }
  177|  4.99k|    }
_RINvMs0_NtNtCs6TEMOj0c6O5_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
  223|  4.99k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  224|  4.99k|        match self.byte & self.major_limit {
  225|  4.99k|            x @ 0 ..= 0x17 => Ok(x.into()),
  226|    687|            0x18 => pull_one(reader).map(Into::into),
  227|       |            0x19 => {
  228|     43|                let mut buf = [0; 2];
  229|     43|                pull_exact(reader, &mut buf)?;
  230|     43|                Ok(u16::from_be_bytes(buf).into())
  231|       |            },
  232|       |            0x1a => {
  233|     16|                let mut buf = [0; 4];
  234|     16|                pull_exact(reader, &mut buf)?;
  235|     16|                Ok(u32::from_be_bytes(buf).into())
  236|       |            },
  237|       |            0x1b => {
  238|    241|                let mut buf = [0; 8];
  239|    241|                pull_exact(reader, &mut buf)?;
  240|    241|                Ok(u64::from_be_bytes(buf))
  241|       |            },
  242|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  243|       |        }
  244|  4.99k|    }
_RINvYNtNtNtCs6TEMOj0c6O5_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
   73|    280|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    280|        let byte = pull_one(reader)?;
   75|    280|        Self::decode_with(byte, reader)
   76|    280|    }

_RINvXs4_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
   98|  9.99k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  9.99k|        match u32::try_from(self.value) {
  100|  9.51k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    482|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    482|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  9.99k|        Ok(())
  107|  9.99k|    }
_RINvXsd_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
  270|  1.12k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.12k|        Ok(())
  272|  1.12k|    }
_RINvXs2_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
   70|  9.48k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  9.48k|        match u8::try_from(self.value) {
   72|  9.39k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     86|                let [x0, x1] = self.value.to_be_bytes();
   75|     86|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  9.48k|        Ok(())
   79|  9.48k|    }
_RINvXsi_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
  317|    560|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    560|        self.1.encode(writer)
  319|    560|    }
_RNvMs0_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB5_7TypeNumtE3newCs96Jtz7q8ZTb_11cbor_encode:
   52|  9.48k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  9.48k|        TypeNum { type_, value }
   54|  9.48k|    }
_RNvMs0_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB5_7TypeNumyE3newCs96Jtz7q8ZTb_11cbor_encode:
   52|  9.99k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  9.99k|        TypeNum { type_, value }
   54|  9.99k|    }
_RINvXs3_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
   84|  9.51k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  9.51k|        match u16::try_from(self.value) {
   86|  9.48k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     32|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     32|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  9.51k|        Ok(())
   93|  9.51k|    }
_RNvMs0_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB5_7TypeNumhE3newCs96Jtz7q8ZTb_11cbor_encode:
   52|  9.39k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  9.39k|        TypeNum { type_, value }
   54|  9.39k|    }
_RINvXsu_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
  159|    560|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    560|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    560|                }
_RINvXs1_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
   59|  9.39k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  9.39k|        match self.value {
   61|  9.39k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.37k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  9.39k|        Ok(())
   65|  9.39k|    }
_RNvMs0_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtB5_7TypeNummE3newCs96Jtz7q8ZTb_11cbor_encode:
   52|  9.51k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  9.51k|        TypeNum { type_, value }
   54|  9.51k|    }
_RINvXs7_NtNtCs6TEMOj0c6O5_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECs96Jtz7q8ZTb_11cbor_encode:
  209|  7.75k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  7.75k|        writer.push(self.0)?;
  211|  7.75k|        Ok(())
  212|  7.75k|    }

_RNvXs1_NtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCs96Jtz7q8ZTb_11cbor_encode:
   84|    560|    fn step_out(&mut self) {
   85|    560|        self.limit += 1;
   86|    560|    }
_RNvXs1_NtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCs96Jtz7q8ZTb_11cbor_encode:
   75|    560|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    560|            self.limit = limit;
   77|    560|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    560|    }
_RNvXs1_NtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCs96Jtz7q8ZTb_11cbor_encode:
   68|  9.86k|    fn advance(&mut self, n: usize) {
   69|  9.86k|        let len = core::cmp::min(self.buf.len(), n);
   70|  9.86k|        self.buf = &self.buf[len..];
   71|  9.86k|    }
_RNvXs1_NtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCs96Jtz7q8ZTb_11cbor_encode:
   62|  10.4k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  10.4k|        let len = core::cmp::min(self.buf.len(), want);
   64|  10.4k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  10.4k|    }
_RNvXs_NtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCs96Jtz7q8ZTb_11cbor_encode:
   40|  17.7k|        self.0.try_reserve(input.len())?;
   41|  17.7k|        self.0.extend_from_slice(input);
   42|  17.7k|        Ok(())
   43|  17.7k|    }
_RNvMs0_NtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    280|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    280|        SliceReader { buf, limit: 256 }
   55|    280|    }
_RNvMNtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    560|    pub fn new(buf: Vec<u8>) -> Self {
   15|    560|       BufWriter(buf)
   16|    560|    }
_RNvMNtNtCs6TEMOj0c6O5_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    560|    pub fn into_inner(self) -> Vec<u8> {
   25|    560|        self.0
   26|    560|    }

_RNvXs0_NtCs7LdGhvAwabf_3cid3arbINtNtB7_3cid3CidKj40_ENtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
   83|    367|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   84|    367|        let v1 = size_hint::and_all(&[
   85|    367|            <[u8; 2]>::size_hint(depth),
   86|    367|            (0, Some(8)),
   87|    367|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   88|    367|        ]);
   89|    367|        if S >= 32 {
   90|    367|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   91|       |        } else {
   92|      0|            v1
   93|       |        }
   94|    367|    }
_RNCNvXs0_NtCs7LdGhvAwabf_3cid3arbINtNtB9_3cid3CidKj40_ENtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitrary0Cs4TDbzq0ehG5_11common_fuzz:
   72|    516|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs0_NtCs7LdGhvAwabf_3cid3arbINtNtB7_3cid3CidKj40_ENtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitraryCs4TDbzq0ehG5_11common_fuzz:
   56|    323|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   57|    323|        if S >= 32 && u.ratio(1, 10)? {
   58|     17|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   59|      8|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   60|    300|        }
   61|    300|
   62|    300|        let mut codec = 0u64;
   63|    300|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   64|       |
   65|    816|        while len_choice & 1 == 1 {
   66|    516|            len_choice >>= 1;
   67|    516|
   68|    516|            let x = u.arbitrary::<u8>();
   69|    516|            let next = codec
   70|    516|                .checked_shl(8)
   71|    516|                .zip(x.ok())
   72|    516|                .map(|(next, x)| next.saturating_add(x as u64));
   73|    516|
   74|    516|            match next {
   75|      0|                None => break,
   76|    516|                Some(next) => codec = next,
   77|       |            }
   78|       |        }
   79|       |
   80|    300|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   81|    323|    }

_RINvMNtCs7LdGhvAwabf_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCslIW5YV6Lhnx_5alloc3vec3VechEECs96Jtz7q8ZTb_11cbor_encode:
  157|    560|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<()> {
  158|    560|        match self.version {
  159|     16|            Version::V0 => self.hash.write(w)?,
  160|    544|            Version::V1 => self.write_bytes_v1(w)?,
  161|       |        }
  162|    560|        Ok(())
  163|    560|    }
_RNvMNtCs7LdGhvAwabf_3cid3cidINtB2_3CidKj40_E8to_bytesCs96Jtz7q8ZTb_11cbor_encode:
  167|    560|    pub fn to_bytes(&self) -> Vec<u8> {
  168|    560|        let mut bytes = Vec::new();
  169|    560|        self.write_bytes(&mut bytes).unwrap();
  170|    560|        bytes
  171|    560|    }
_RINvMNtCs7LdGhvAwabf_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECs96Jtz7q8ZTb_11cbor_encode:
  127|    280|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  128|    280|        let version = varint_read_u64(&mut r)?;
  129|    280|        let codec = varint_read_u64(&mut r)?;
  130|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  131|    280|        if [version, codec] == [0x12, 0x20] {
  132|      8|            let mut digest = [0u8; 32];
  133|      8|            r.read_exact(&mut digest)?;
  134|      8|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  135|      8|            Self::new_v0(mh)
  136|       |        } else {
  137|    272|            let version = Version::try_from(version)?;
  138|    272|            let mh = Multihash::read(r)?;
  139|    272|            Self::new(version, codec, mh)
  140|       |        }
  141|    280|    }
_RNvMNtCs7LdGhvAwabf_3cid3cidINtB2_3CidKj40_E3newCs96Jtz7q8ZTb_11cbor_encode:
   99|    272|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    272|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    272|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    272|    }
_RINvMNtCs7LdGhvAwabf_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCslIW5YV6Lhnx_5alloc3vec3VechEECs96Jtz7q8ZTb_11cbor_encode:
  143|    544|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<()> {
  144|    544|        let mut version_buf = varint_encode::u64_buffer();
  145|    544|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  146|    544|
  147|    544|        let mut codec_buf = varint_encode::u64_buffer();
  148|    544|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  149|    544|
  150|    544|        w.write_all(version)?;
  151|    544|        w.write_all(codec)?;
  152|    544|        self.hash.write(&mut w)?;
  153|    544|        Ok(())
  154|    544|    }
_RNvMNtCs7LdGhvAwabf_3cid3cidINtB2_3CidKj40_E6new_v0Cs96Jtz7q8ZTb_11cbor_encode:
   78|      8|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      8|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      8|        }
   82|      8|        Ok(Self {
   83|      8|            version: Version::V0,
   84|      8|            codec: DAG_PB,
   85|      8|            hash,
   86|      8|        })
   87|      8|    }
_RNvXs6_NtCs7LdGhvAwabf_3cid3cidINtB5_3CidKj40_EINtNtCsjJTzLsQPs9f_4core7convert7TryFromRShE8try_fromCs96Jtz7q8ZTb_11cbor_encode:
  314|    280|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  315|    280|        Self::read_bytes(&mut bytes)
  316|    280|    }
_RNvMNtCs7LdGhvAwabf_3cid3cidINtB2_3CidKj40_E6new_v1Cs96Jtz7q8ZTb_11cbor_encode:
   90|    272|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    272|        Self {
   92|    272|            version: Version::V1,
   93|    272|            codec,
   94|    272|            hash,
   95|    272|        }
   96|    272|    }
_RNvMNtCs7LdGhvAwabf_3cid3cidINtB2_3CidKj40_E6new_v1Cs4TDbzq0ehG5_11common_fuzz:
   90|    272|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    272|        Self {
   92|    272|            version: Version::V1,
   93|    272|            codec,
   94|    272|            hash,
   95|    272|        }
   96|    272|    }
_RNvMNtCs7LdGhvAwabf_3cid3cidINtB2_3CidKj40_E6new_v0Cs4TDbzq0ehG5_11common_fuzz:
   78|      8|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      8|        if hash.code() != SHA2_256 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      8|        }
   82|      8|        Ok(Self {
   83|      8|            version: Version::V0,
   84|      8|            codec: DAG_PB,
   85|      8|            hash,
   86|      8|        })
   87|      8|    }

_RINvXNtCs7LdGhvAwabf_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCsfpHdPZoguP6_5serde3ser9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   29|    560|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    560|    where
   31|    560|        S: ser::Serializer,
   32|    560|    {
   33|    560|        let value = ByteBuf::from(self.to_bytes());
   34|    560|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    560|    }
_RINvXNvXs0_NtCs7LdGhvAwabf_3cid5serdeINtNtBb_3cid3CidKpENtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   97|    280|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    280|            where
   99|    280|                D: de::Deserializer<'de>,
  100|    280|            {
  101|    280|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    280|            }
_RINvXs_NtCs7LdGhvAwabf_3cid5serdeNtB5_17BytesToCidVisitorNtNtCsfpHdPZoguP6_5serde2de7Visitor11visit_bytesINtNtCsfuepieMv3An_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjJTzLsQPs9f_4core7convert10InfallibleEECs96Jtz7q8ZTb_11cbor_encode:
   48|    280|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    280|    where
   50|    280|        E: de::Error,
   51|    280|    {
   52|    280|        CidGeneric::<SIZE>::try_from(value)
   53|    280|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    280|    }
_RINvXs0_NtCs7LdGhvAwabf_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   79|    280|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    280|    where
   81|    280|        D: de::Deserializer<'de>,
   82|    280|    {
   83|    280|        /// Main visitor to deserialize a CID.
   84|    280|        ///
   85|    280|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    280|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    280|        /// to bytes.
   88|    280|        struct MainEntryVisitor<const SIZE: usize>;
   89|    280|
   90|    280|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    280|            type Value = CidGeneric<SIZE>;
   92|    280|
   93|    280|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    280|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    280|            }
   96|    280|
   97|    280|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    280|            where
   99|    280|                D: de::Deserializer<'de>,
  100|    280|            {
  101|    280|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    280|            }
  103|    280|        }
  104|    280|
  105|    280|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    280|    }

_RNvXs0_NtCs7LdGhvAwabf_3cid7versionyINtNtCsjJTzLsQPs9f_4core7convert4FromNtB5_7VersionE4from:
   44|    544|    fn from(ver: Version) -> u64 {
   45|    544|        match ver {
   46|      0|            Version::V0 => 0,
   47|    544|            Version::V1 => 1,
   48|       |        }
   49|    544|    }
_RNvXs_NtCs7LdGhvAwabf_3cid7versionNtB4_7VersionINtNtCsjJTzLsQPs9f_4core7convert7TryFromyE8try_from:
   34|    272|    fn try_from(raw: u64) -> Result<Self> {
   35|    272|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    272|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    272|    }

_RINvXse_NtCs7lHOoZJjAGe_14cs_serde_bytes7bytebufNtB6_7ByteBufNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  219|    560|    fn deserialize<D>(deserializer: D) -> Result<ByteBuf, D::Error>
  220|    560|    where
  221|    560|        D: Deserializer<'de>,
  222|    560|    {
  223|    560|        deserializer.deserialize_byte_buf(ByteBufVisitor)
  224|    560|    }
_RINvMNtCs7lHOoZJjAGe_14cs_serde_bytes7bytebufNtB3_7ByteBuf4fromRShECs96Jtz7q8ZTb_11cbor_encode:
   60|    560|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    560|        ByteBuf {
   62|    560|            bytes: bytes.into(),
   63|    560|        }
   64|    560|    }
_RINvXsd_NtCs7lHOoZJjAGe_14cs_serde_bytes7bytebufNtB6_14ByteBufVisitorNtNtCsfpHdPZoguP6_5serde2de7Visitor11visit_bytesINtNtCsfuepieMv3An_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjJTzLsQPs9f_4core7convert10InfallibleEECs96Jtz7q8ZTb_11cbor_encode:
  203|    560|    fn visit_bytes<E>(self, v: &[u8]) -> Result<ByteBuf, E>
  204|    560|    where
  205|    560|        E: Error,
  206|    560|    {
  207|    560|        Ok(ByteBuf::from(v))
  208|    560|    }
_RNvMNtCs7lHOoZJjAGe_14cs_serde_bytes7bytebufNtB2_7ByteBuf8into_vec:
   67|    560|    pub fn into_vec(self) -> Vec<u8> {
   68|    560|        self.bytes
   69|    560|    }

_RINvXs_NtCs7lHOoZJjAGe_14cs_serde_bytes2deINtNtCslIW5YV6Lhnx_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   42|    560|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   43|    560|    where
   44|    560|        D: Deserializer<'de>,
   45|    560|    {
   46|    560|        Deserialize::deserialize(deserializer).map(ByteBuf::into_vec)
   47|    560|    }
_RINvXs1_NtCs7lHOoZJjAGe_14cs_serde_bytes2deNtNtB8_7bytebuf7ByteBufNtB6_11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   61|    560|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   62|    560|    where
   63|    560|        D: Deserializer<'de>,
   64|    560|    {
   65|    560|        // Via the serde::Deserialize impl for ByteBuf.
   66|    560|        serde::Deserialize::deserialize(deserializer)
   67|    560|    }
_RINvXs2_NtCs7lHOoZJjAGe_14cs_serde_bytes2deINtNtCslIW5YV6Lhnx_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   72|  3.03k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   73|  3.03k|    where
   74|  3.03k|        D: Deserializer<'de>,
   75|  3.03k|    {
   76|  3.03k|        struct CowVisitor;
   77|  3.03k|
   78|  3.03k|        impl<'de> Visitor<'de> for CowVisitor {
   79|  3.03k|            type Value = Cow<'de, [u8]>;
   80|  3.03k|
   81|  3.03k|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   82|  3.03k|                formatter.write_str("a byte array")
   83|  3.03k|            }
   84|  3.03k|
   85|  3.03k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.03k|            where
   87|  3.03k|                E: Error,
   88|  3.03k|            {
   89|  3.03k|                Ok(Cow::Borrowed(v))
   90|  3.03k|            }
   91|  3.03k|
   92|  3.03k|            fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   93|  3.03k|            where
   94|  3.03k|                E: Error,
   95|  3.03k|            {
   96|  3.03k|                Ok(Cow::Owned(v.to_vec()))
   97|  3.03k|            }
   98|  3.03k|
   99|  3.03k|            fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  100|  3.03k|            where
  101|  3.03k|                E: Error,
  102|  3.03k|            {
  103|  3.03k|                Ok(Cow::Owned(v))
  104|  3.03k|            }
  105|  3.03k|        }
  106|  3.03k|
  107|  3.03k|        deserializer.deserialize_bytes(CowVisitor)
  108|  3.03k|    }
_RINvXNvXs2_NtCs7lHOoZJjAGe_14cs_serde_bytes2deINtNtCslIW5YV6Lhnx_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCsfpHdPZoguP6_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfuepieMv3An_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjJTzLsQPs9f_4core7convert10InfallibleEECs96Jtz7q8ZTb_11cbor_encode:
   85|  3.03k|            fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   86|  3.03k|            where
   87|  3.03k|                E: Error,
   88|  3.03k|            {
   89|  3.03k|                Ok(Cow::Borrowed(v))
   90|  3.03k|            }

_RINvCs7lHOoZJjAGe_14cs_serde_bytes9serializeRINtNtCslIW5YV6Lhnx_5alloc3vec3VechEQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   77|    560|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|    560|where
   79|    560|    T: ?Sized + Serialize,
   80|    560|    S: Serializer,
   81|    560|{
   82|    560|    Serialize::serialize(bytes, serializer)
   83|    560|}
_RINvCs7lHOoZJjAGe_14cs_serde_bytes9serializeINtNtCslIW5YV6Lhnx_5alloc3vec3VechEQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   77|  1.12k|pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
   78|  1.12k|where
   79|  1.12k|    T: ?Sized + Serialize,
   80|  1.12k|    S: Serializer,
   81|  1.12k|{
   82|  1.12k|    Serialize::serialize(bytes, serializer)
   83|  1.12k|}
_RINvCs7lHOoZJjAGe_14cs_serde_bytes11deserializeINtNtCslIW5YV6Lhnx_5alloc6borrow3CowShEQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  103|    280|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    280|where
  105|    280|    T: Deserialize<'de>,
  106|    280|    D: Deserializer<'de>,
  107|    280|{
  108|    280|    Deserialize::deserialize(deserializer)
  109|    280|}
_RINvCs7lHOoZJjAGe_14cs_serde_bytes11deserializeINtNtCslIW5YV6Lhnx_5alloc3vec3VechEQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  103|    560|pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  104|    560|where
  105|    560|    T: Deserialize<'de>,
  106|    560|    D: Deserializer<'de>,
  107|    560|{
  108|    560|    Deserialize::deserialize(deserializer)
  109|    560|}

_RINvXs4_NtCs7lHOoZJjAGe_14cs_serde_bytes3serRINtNtCslIW5YV6Lhnx_5alloc3vec3VechENtB6_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   88|    560|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   89|    560|    where
   90|    560|        S: Serializer,
   91|    560|    {
   92|    560|        (**self).serialize(serializer)
   93|    560|    }
_RINvXs_NtCs7lHOoZJjAGe_14cs_serde_bytes3serINtNtCslIW5YV6Lhnx_5alloc3vec3VechENtB5_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   37|  7.19k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   38|  7.19k|    where
   39|  7.19k|        S: Serializer,
   40|  7.19k|    {
   41|  7.19k|        serializer.serialize_bytes(self)
   42|  7.19k|    }

rust_fuzzer_test_input:
  167|    367|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    367|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    367|
  170|    367|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    367|            // implementation. This helps the fuzzer avoid exploring all the
  172|    367|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    367|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    367|            // get to longer inputs that actually lead to interesting executions
  175|    367|            // quicker.
  176|    367|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    366|            }
  179|    366|
  180|    366|            let mut u = Unstructured::new(bytes);
  181|    366|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    366|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    366|            }
  199|       |
  200|    366|            let $data = match data {
  201|    280|                Ok(d) => d,
  202|     86|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    367|        }
_RNCNvCsaLOX7oTk8iW_13libfuzzer_sys15test_input_wrap0B3_:
   28|    367|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    367|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    367|        rust_fuzzer_test_input(data_slice);
   31|    367|    });
LLVMFuzzerTestOneInput:
   27|    367|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    367|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    367|    });
   32|    367|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    367|    }
   37|    367|    0
   38|    367|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvXs_NtCs5Ugcc0YwzS7_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
   64|    367|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   65|    367|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   66|    367|    }
_RNvXs_NtCs5Ugcc0YwzS7_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitraryCs4TDbzq0ehG5_11common_fuzz:
   39|    300|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   40|    300|        let mut code = 0u64;
   41|    300|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   42|       |
   43|    797|        while len_choice & 1 == 1 {
   44|    497|            len_choice >>= 1;
   45|    497|
   46|    497|            let x = u.arbitrary::<u8>();
   47|    497|            let next = code
   48|    497|                .checked_shl(8)
   49|    497|                .zip(x.ok())
   50|    497|                .map(|(next, x)| next.saturating_add(x as u64));
   51|    497|
   52|    497|            match next {
   53|      0|                None => break,
   54|    497|                Some(next) => code = next,
   55|       |            }
   56|       |        }
   57|       |
   58|    300|        let size = u.int_in_range(0..=S)?;
   59|    281|        let data = u.bytes(size)?;
   60|       |
   61|    272|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   62|    300|    }
_RNCNvXs_NtCs5Ugcc0YwzS7_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitrary0Cs4TDbzq0ehG5_11common_fuzz:
   50|    497|                .map(|(next, x)| next.saturating_add(x as u64));

_RINvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCslIW5YV6Lhnx_5alloc3vec3VechEECs96Jtz7q8ZTb_11cbor_encode:
  163|    544|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|    544|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    544|    }
_RINvNtCs5Ugcc0YwzS7_9multihash9multihash14read_multihashQRShKj40_ECs96Jtz7q8ZTb_11cbor_encode:
  298|    272|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  299|    272|where
  300|    272|    R: io::Read,
  301|    272|{
  302|    272|    let code = read_u64(&mut r)?;
  303|    272|    let size = read_u64(&mut r)?;
  304|       |
  305|    272|    if size > S as u64 || size > u8::MAX as u64 {
  306|      0|        return Err(Error::InvalidSize(size));
  307|    272|    }
  308|    272|
  309|    272|    let mut digest = [0; S];
  310|    272|    r.read_exact(&mut digest[..size as usize])?;
  311|    272|    Ok((code, size as u8, digest))
  312|    272|}
_RNvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB4_9MultihashKj40_E4codeCs96Jtz7q8ZTb_11cbor_encode:
  120|    568|    pub const fn code(&self) -> u64 {
  121|    568|        self.code
  122|    568|    }
_RINvNtCs5Ugcc0YwzS7_9multihash9multihash15write_multihashQINtNtCslIW5YV6Lhnx_5alloc3vec3VechEECs96Jtz7q8ZTb_11cbor_encode:
  276|     16|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|     16|where
  278|     16|    W: io::Write,
  279|     16|{
  280|     16|    let mut code_buf = varint_encode::u64_buffer();
  281|     16|    let code = varint_encode::u64(code, &mut code_buf);
  282|     16|
  283|     16|    let mut size_buf = varint_encode::u8_buffer();
  284|     16|    let size = varint_encode::u8(size, &mut size_buf);
  285|     16|
  286|     16|    w.write_all(code)?;
  287|     16|    w.write_all(size)?;
  288|     16|    w.write_all(digest)?;
  289|     16|    Ok(())
  290|     16|}
_RINvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECs96Jtz7q8ZTb_11cbor_encode:
  135|    272|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    272|    where
  137|    272|        Self: Sized,
  138|    272|    {
  139|    272|        let (code, size, digest) = read_multihash(r)?;
  140|    272|        Ok(Self { code, size, digest })
  141|    272|    }
_RINvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCslIW5YV6Lhnx_5alloc3vec3VechEECs96Jtz7q8ZTb_11cbor_encode:
  163|     16|    pub fn write<W: io::Write>(&self, w: W) -> Result<(), Error> {
  164|     16|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     16|    }
_RNvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB4_9MultihashKj40_E6digestCs96Jtz7q8ZTb_11cbor_encode:
  130|    560|    pub fn digest(&self) -> &[u8] {
  131|    560|        &self.digest[..self.size as usize]
  132|    560|    }
_RNvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB4_9MultihashKj40_E4wrapCs96Jtz7q8ZTb_11cbor_encode:
  101|      8|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|      8|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|      8|        }
  105|      8|        let size = input_digest.len();
  106|      8|        let mut digest = [0; S];
  107|      8|        let mut i = 0;
  108|    264|        while i < size {
  109|    256|            digest[i] = input_digest[i];
  110|    256|            i += 1;
  111|    256|        }
  112|      8|        Ok(Self {
  113|      8|            code,
  114|      8|            size: size as u8,
  115|      8|            digest,
  116|      8|        })
  117|      8|    }
_RNvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB4_9MultihashKj40_E4sizeCs96Jtz7q8ZTb_11cbor_encode:
  125|    560|    pub const fn size(&self) -> u8 {
  126|    560|        self.size
  127|    560|    }
_RINvNtCs5Ugcc0YwzS7_9multihash9multihash15write_multihashQQINtNtCslIW5YV6Lhnx_5alloc3vec3VechEECs96Jtz7q8ZTb_11cbor_encode:
  276|    544|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<(), Error>
  277|    544|where
  278|    544|    W: io::Write,
  279|    544|{
  280|    544|    let mut code_buf = varint_encode::u64_buffer();
  281|    544|    let code = varint_encode::u64(code, &mut code_buf);
  282|    544|
  283|    544|    let mut size_buf = varint_encode::u8_buffer();
  284|    544|    let size = varint_encode::u8(size, &mut size_buf);
  285|    544|
  286|    544|    w.write_all(code)?;
  287|    544|    w.write_all(size)?;
  288|    544|    w.write_all(digest)?;
  289|    544|    Ok(())
  290|    544|}
_RNvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB4_9MultihashKj40_E4codeCs4TDbzq0ehG5_11common_fuzz:
  120|      8|    pub const fn code(&self) -> u64 {
  121|      8|        self.code
  122|      8|    }
_RNvMs_NtCs5Ugcc0YwzS7_9multihash9multihashINtB4_9MultihashKj40_E4wrapCs4TDbzq0ehG5_11common_fuzz:
  101|    280|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    280|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    280|        }
  105|    280|        let size = input_digest.len();
  106|    280|        let mut digest = [0; S];
  107|    280|        let mut i = 0;
  108|  1.22k|        while i < size {
  109|    944|            digest[i] = input_digest[i];
  110|    944|            i += 1;
  111|    944|        }
  112|    280|        Ok(Self {
  113|    280|            code,
  114|    280|            size: size as u8,
  115|    280|            digest,
  116|    280|        })
  117|    280|    }

_RNvXs4_NtCs5Ugcc0YwzS7_9multihash14multihash_implyINtNtCsjJTzLsQPs9f_4core7convert4FromNtB5_4CodeE4from:
   11|     17|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCsf4zcuWwU8ki_10fvm_shared7address8protocol8ProtocolNtNtCscIQR7GHt1OU_10num_traits4cast13FromPrimitive7from_u8B8_:
  467|  2.75k|    fn from_u8(n: u8) -> Option<Self> {
  468|  2.75k|        FromPrimitive::from_u64(From::from(n))
  469|  2.75k|    }

_RNvMs2_NtCs8tWjBUOYbyD_9once_cell3impINtB5_8OnceCellNtNtCslIW5YV6Lhnx_5alloc6string6StringE14is_initializedCs96Jtz7q8ZTb_11cbor_encode:
   62|    366|    pub(crate) fn is_initialized(&self) -> bool {
   63|    366|        // An `Acquire` load is enough because that makes all the initialization
   64|    366|        // operations visible to us, and, this being a fast path, weaker
   65|    366|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    366|        // `SeqCst` operations on the slow path.
   67|    366|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    366|    }

_RNvMs4_NtCs8tWjBUOYbyD_9once_cell4syncINtB5_8OnceCellNtNtCslIW5YV6Lhnx_5alloc6string6StringE3getCs96Jtz7q8ZTb_11cbor_encode:
  869|    366|        pub fn get(&self) -> Option<&T> {
  870|    366|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    366|                None
  875|       |            }
  876|    366|        }

_RNvXs5_Cs7V4wu7hyDoj_10scopeguardINtB5_10ScopeGuardQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsjJTzLsQPs9f_4core3ops4drop4Drop4dropCs96Jtz7q8ZTb_11cbor_encode:
  452|    560|    fn drop(&mut self) {
  453|    560|        // This is OK because the fields are `ManuallyDrop`s
  454|    560|        // which will not be dropped by the compiler.
  455|    560|        let (value, dropfn) = unsafe {
  456|    560|            (ptr::read(&*self.value), ptr::read(&*self.dropfn))
  457|    560|        };
  458|    560|        if S::should_run() {
  459|    560|            dropfn(value);
  460|    560|        }
  461|    560|    }
_RINvCs7V4wu7hyDoj_10scopeguard5guardQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEFBy_EuECs96Jtz7q8ZTb_11cbor_encode:
  367|    560|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  368|    560|    where F: FnOnce(T)
  369|    560|{
  370|    560|    ScopeGuard::with_strategy(v, dropfn)
  371|    560|}
_RNvXCs7V4wu7hyDoj_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    560|    fn should_run() -> bool { true }
_RNvMs1_Cs7V4wu7hyDoj_10scopeguardINtB5_10ScopeGuardQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCs96Jtz7q8ZTb_11cbor_encode:
  317|    560|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  318|    560|        ScopeGuard {
  319|    560|            value: ManuallyDrop::new(v),
  320|    560|            dropfn: ManuallyDrop::new(dropfn),
  321|    560|            strategy: PhantomData,
  322|    560|        }
  323|    560|    }
_RNvXs4_Cs7V4wu7hyDoj_10scopeguardINtB5_10ScopeGuardQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCsjJTzLsQPs9f_4core3ops5deref8DerefMut9deref_mutCs96Jtz7q8ZTb_11cbor_encode:
  443|    560|    fn deref_mut(&mut self) -> &mut T {
  444|    560|        &mut *self.value
  445|    560|    }

_RINvXNvXsh_NtNtCsfpHdPZoguP6_5serde2de5implsINtNtCslIW5YV6Lhnx_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
 1032|    280|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    280|            where
 1034|    280|                A: SeqAccess<'de>,
 1035|    280|            {
 1036|    280|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|       |
 1038|  2.75k|                while let Some(value) = try!(seq.next_element()) {
 1039|  2.47k|                    values.push(value);
 1040|  2.47k|                }
 1041|       |
 1042|    280|                Ok(values)
 1043|    280|            }
_RINvXsh_NtNtCsfpHdPZoguP6_5serde2de5implsINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
 1014|    280|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1015|    280|    where
 1016|    280|        D: Deserializer<'de>,
 1017|    280|    {
 1018|    280|        struct VecVisitor<T> {
 1019|    280|            marker: PhantomData<T>,
 1020|    280|        }
 1021|    280|
 1022|    280|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1023|    280|        where
 1024|    280|            T: Deserialize<'de>,
 1025|    280|        {
 1026|    280|            type Value = Vec<T>;
 1027|    280|
 1028|    280|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1029|    280|                formatter.write_str("a sequence")
 1030|    280|            }
 1031|    280|
 1032|    280|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1033|    280|            where
 1034|    280|                A: SeqAccess<'de>,
 1035|    280|            {
 1036|    280|                let mut values = Vec::with_capacity(size_hint::cautious(seq.size_hint()));
 1037|    280|
 1038|    280|                while let Some(value) = try!(seq.next_element()) {
 1039|    280|                    values.push(value);
 1040|    280|                }
 1041|    280|
 1042|    280|                Ok(values)
 1043|    280|            }
 1044|    280|        }
 1045|    280|
 1046|    280|        let visitor = VecVisitor {
 1047|    280|            marker: PhantomData,
 1048|    280|        };
 1049|    280|        deserializer.deserialize_seq(visitor)
 1050|    280|    }
_RINvXNvXsV_NtNtCsfpHdPZoguP6_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsfuepieMv3An_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjJTzLsQPs9f_4core7convert10InfallibleEECs96Jtz7q8ZTb_11cbor_encode:
  138|    280|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  139|    280|        where
  140|    280|            E: Error,
  141|    280|        {
  142|    280|            Ok(v)
  143|    280|        }
_RINvXsV_NtNtCsfpHdPZoguP6_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  113|    280|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  114|    280|            where
  115|    280|                D: Deserializer<'de>,
  116|    280|            {
  117|    280|                struct PrimitiveVisitor;
  118|    280|
  119|    280|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  120|    280|                    type Value = $primitive;
  121|    280|
  122|    280|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  123|    280|                        formatter.write_str(stringify!($primitive))
  124|    280|                    }
  125|    280|
  126|    280|                    $($($method!($val : $visit);)*)*
  127|    280|                }
  128|    280|
  129|    280|                deserializer.$deserialize(PrimitiveVisitor)
  130|    280|            }

_RINvXs3_NtCsfpHdPZoguP6_5serde2deINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataINtNtCs7LdGhvAwabf_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  783|    280|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    280|    where
  785|    280|        D: Deserializer<'de>,
  786|    280|    {
  787|    280|        T::deserialize(deserializer)
  788|    280|    }
_RINvXs3_NtCsfpHdPZoguP6_5serde2deINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  783|    280|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    280|    where
  785|    280|        D: Deserializer<'de>,
  786|    280|    {
  787|    280|        T::deserialize(deserializer)
  788|    280|    }
_RINvXs3_NtCsfpHdPZoguP6_5serde2deINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  783|    280|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    280|    where
  785|    280|        D: Deserializer<'de>,
  786|    280|    {
  787|    280|        T::deserialize(deserializer)
  788|    280|    }
_RINvYINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess12next_elementNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressECs96Jtz7q8ZTb_11cbor_encode:
 1723|  3.03k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|  3.03k|    where
 1725|  3.03k|        T: Deserialize<'de>,
 1726|  3.03k|    {
 1727|  3.03k|        self.next_element_seed(PhantomData)
 1728|  3.03k|    }
_RINvYNtNtCs7lHOoZJjAGe_14cs_serde_bytes7bytebuf14ByteBufVisitorNtNtCsfpHdPZoguP6_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfuepieMv3An_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjJTzLsQPs9f_4core7convert10InfallibleEECs96Jtz7q8ZTb_11cbor_encode:
 1563|    560|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    560|    where
 1565|    560|        E: Error,
 1566|    560|    {
 1567|    560|        self.visit_bytes(v)
 1568|    560|    }
_RINvYINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess12next_elementINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEECs96Jtz7q8ZTb_11cbor_encode:
 1723|    280|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    280|    where
 1725|    280|        T: Deserialize<'de>,
 1726|    280|    {
 1727|    280|        self.next_element_seed(PhantomData)
 1728|    280|    }
_RINvXs3_NtCsfpHdPZoguP6_5serde2deINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  783|    280|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    280|    where
  785|    280|        D: Deserializer<'de>,
  786|    280|    {
  787|    280|        T::deserialize(deserializer)
  788|    280|    }
_RINvYNtNtCs7LdGhvAwabf_3cid5serde17BytesToCidVisitorNtNtCsfpHdPZoguP6_5serde2de7Visitor20visit_borrowed_bytesINtNtCsfuepieMv3An_18serde_ipld_dagcbor5error11DecodeErrorNtNtCsjJTzLsQPs9f_4core7convert10InfallibleEECs96Jtz7q8ZTb_11cbor_encode:
 1563|    280|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    280|    where
 1565|    280|        E: Error,
 1566|    280|    {
 1567|    280|        self.visit_bytes(v)
 1568|    280|    }
_RINvXs3_NtCsfpHdPZoguP6_5serde2deINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtCs8yox8sNCvE1_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  783|    280|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    280|    where
  785|    280|        D: Deserializer<'de>,
  786|    280|    {
  787|    280|        T::deserialize(deserializer)
  788|    280|    }
_RINvYINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess12next_elementNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECs96Jtz7q8ZTb_11cbor_encode:
 1723|    280|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    280|    where
 1725|    280|        T: Deserialize<'de>,
 1726|    280|    {
 1727|    280|        self.next_element_seed(PhantomData)
 1728|    280|    }
_RINvXs3_NtCsfpHdPZoguP6_5serde2deINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  783|  2.75k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|  2.75k|    where
  785|  2.75k|        D: Deserializer<'de>,
  786|  2.75k|    {
  787|  2.75k|        T::deserialize(deserializer)
  788|  2.75k|    }
_RINvXs3_NtCsfpHdPZoguP6_5serde2deINtNtCsjJTzLsQPs9f_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  783|    280|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  784|    280|    where
  785|    280|        D: Deserializer<'de>,
  786|    280|    {
  787|    280|        T::deserialize(deserializer)
  788|    280|    }
_RINvYINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess12next_elementNtCs8yox8sNCvE1_17fvm_ipld_bitfield8BitFieldECs96Jtz7q8ZTb_11cbor_encode:
 1723|    280|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    280|    where
 1725|    280|        T: Deserialize<'de>,
 1726|    280|    {
 1727|    280|        self.next_element_seed(PhantomData)
 1728|    280|    }
_RINvYINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECs96Jtz7q8ZTb_11cbor_encode:
 1723|    280|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    280|    where
 1725|    280|        T: Deserialize<'de>,
 1726|    280|    {
 1727|    280|        self.next_element_seed(PhantomData)
 1728|    280|    }
_RINvYINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess12next_elementINtNtCs7LdGhvAwabf_3cid3cid3CidKj40_EECs96Jtz7q8ZTb_11cbor_encode:
 1723|    280|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    280|    where
 1725|    280|        T: Deserialize<'de>,
 1726|    280|    {
 1727|    280|        self.next_element_seed(PhantomData)
 1728|    280|    }
_RINvYINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess12next_elementyECs96Jtz7q8ZTb_11cbor_encode:
 1723|    280|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1724|    280|    where
 1725|    280|        T: Deserialize<'de>,
 1726|    280|    {
 1727|    280|        self.next_element_seed(PhantomData)
 1728|    280|    }

_RNvNtNtCsfpHdPZoguP6_5serde9___private9size_hint8cautiousCs96Jtz7q8ZTb_11cbor_encode:
   12|    280|pub fn cautious(hint: Option<usize>) -> usize {
   13|    280|    cmp::min(hint.unwrap_or(0), 4096)
   14|    280|}

_RINvXs1E_NtNtCsfpHdPZoguP6_5serde3ser5implsRINtNtCs7LdGhvAwabf_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  386|    560|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    560|            where
  388|    560|                S: Serializer,
  389|    560|            {
  390|    560|                (**self).serialize(serializer)
  391|    560|            }
_RINvXs1E_NtNtCsfpHdPZoguP6_5serde3ser5implsRNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  386|    560|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    560|            where
  388|    560|                S: Serializer,
  389|    560|            {
  390|    560|                (**self).serialize(serializer)
  391|    560|            }
_RINvXs1E_NtNtCsfpHdPZoguP6_5serde3ser5implsRNtCs8yox8sNCvE1_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  386|    560|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    560|            where
  388|    560|                S: Serializer,
  389|    560|            {
  390|    560|                (**self).serialize(serializer)
  391|    560|            }
_RINvXsE_NtNtCsfpHdPZoguP6_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   11|    560|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    560|            where
   13|    560|                S: Serializer,
   14|    560|            {
   15|    560|                serializer.$method(*self $($cast)*)
   16|    560|            }
_RINvXs1E_NtNtCsfpHdPZoguP6_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  386|    560|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    560|            where
  388|    560|                S: Serializer,
  389|    560|            {
  390|    560|                (**self).serialize(serializer)
  391|    560|            }
_RINvXs1k_NtNtCsfpHdPZoguP6_5serde3ser5implsINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  194|    560|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  195|    560|            where
  196|    560|                S: Serializer,
  197|    560|            {
  198|    560|                serializer.collect_seq(self)
  199|    560|            }
_RINvXs1E_NtNtCsfpHdPZoguP6_5serde3ser5implsRINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  386|    560|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|    560|            where
  388|    560|                S: Serializer,
  389|    560|            {
  390|    560|                (**self).serialize(serializer)
  391|    560|            }
_RINvXs1E_NtNtCsfpHdPZoguP6_5serde3ser5implsRNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  386|  5.51k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  387|  5.51k|            where
  388|  5.51k|                S: Serializer,
  389|  5.51k|            {
  390|  5.51k|                (**self).serialize(serializer)
  391|  5.51k|            }

_RINvNtCsfpHdPZoguP6_5serde3ser17iterator_len_hintINtNtNtCsjJTzLsQPs9f_4core5slice4iter4IterNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEECs96Jtz7q8ZTb_11cbor_encode:
 1982|    560|    match iter.size_hint() {
 1983|    560|        (lo, Some(hi)) if lo == hi => Some(lo),
 1984|      0|        _ => None,
 1985|       |    }
 1986|    560|}
_RINvYQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer11collect_seqRINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEECs96Jtz7q8ZTb_11cbor_encode:
 1275|    560|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1276|    560|    where
 1277|    560|        I: IntoIterator,
 1278|    560|        <I as IntoIterator>::Item: Serialize,
 1279|    560|    {
 1280|    560|        let iter = iter.into_iter();
 1281|    560|        let mut serializer = try!(self.serialize_seq(iterator_len_hint(&iter)));
 1282|       |
 1283|       |        #[cfg(not(no_iterator_try_fold))]
 1284|       |        {
 1285|    560|            let mut iter = iter;
 1286|    560|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1287|       |        }
 1288|       |
 1289|       |        #[cfg(no_iterator_try_fold)]
 1290|       |        {
 1291|       |            for item in iter {
 1292|       |                try!(serializer.serialize_element(&item));
 1293|       |            }
 1294|       |        }
 1295|       |
 1296|    560|        serializer.end()
 1297|    560|    }
_RNCINvYQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer11collect_seqRINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEE0Cs96Jtz7q8ZTb_11cbor_encode:
 1286|  4.95k|            try!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvMNtCscGqEh5eK1gc_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCslIW5YV6Lhnx_5alloc3vec3VechEECs96Jtz7q8ZTb_11cbor_encode:
   60|    560|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    560|        ByteBuf {
   62|    560|            bytes: bytes.into(),
   63|    560|        }
   64|    560|    }
_RINvXsc_NtCscGqEh5eK1gc_11serde_bytes7bytebufNtB6_7ByteBufNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  186|    560|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    560|    where
  188|    560|        S: Serializer,
  189|    560|    {
  190|    560|        serializer.serialize_bytes(&self.bytes)
  191|    560|    }

_RINvNtCsfuepieMv3An_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderECs96Jtz7q8ZTb_11cbor_encode:
   26|    560|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    560|    let buf = match reader.fill(1)? {
   28|    560|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    560|    let byte = buf.get(0).copied().ok_or(DecodeError::Eof)?;
   32|    280|    Ok(byte)
   33|    560|}

_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess17next_element_seedINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtNvXNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECs96Jtz7q8ZTb_11cbor_encode:
  484|    280|        if let Some(len) = self.len.as_mut() {
  485|    280|            if *len > 0 {
  486|    280|                *len -= 1;
  487|    280|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    280|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer20deserialize_byte_bufNtNtCs7lHOoZJjAGe_14cs_serde_bytes7bytebuf14ByteBufVisitorECs96Jtz7q8ZTb_11cbor_encode:
  239|    560|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    560|    where
  241|    560|        V: Visitor<'de>,
  242|    560|    {
  243|    560|        self.deserialize_bytes(visitor)
  244|    560|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer17deserialize_bytesNtNvXs2_NtCs7lHOoZJjAGe_14cs_serde_bytes2deINtNtCslIW5YV6Lhnx_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECs96Jtz7q8ZTb_11cbor_encode:
  228|  3.03k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|  3.03k|    where
  230|  3.03k|        V: Visitor<'de>,
  231|  3.03k|    {
  232|  3.03k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|  3.03k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|  3.03k|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess17next_element_seedINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtCs8yox8sNCvE1_17fvm_ipld_bitfield8BitFieldEECs96Jtz7q8ZTb_11cbor_encode:
  484|    280|        if let Some(len) = self.len.as_mut() {
  485|    280|            if *len > 0 {
  486|    280|                *len -= 1;
  487|    280|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    280|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer17deserialize_bytesNtNtCs7lHOoZJjAGe_14cs_serde_bytes7bytebuf14ByteBufVisitorECs96Jtz7q8ZTb_11cbor_encode:
  228|    560|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  229|    560|    where
  230|    560|        V: Visitor<'de>,
  231|    560|    {
  232|    560|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  233|    560|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  234|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  235|       |        }
  236|    560|    }
_RINvNtCsfuepieMv3An_18serde_ipld_dagcbor2de10from_sliceNtNtCs4TDbzq0ehG5_11common_fuzz4cbor7PayloadECs96Jtz7q8ZTb_11cbor_encode:
   40|    280|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    280|where
   42|    280|    T: de::Deserialize<'a>,
   43|    280|{
   44|    280|    let reader = SliceReader::new(buf);
   45|    280|    let mut deserializer = Deserializer::from_reader(reader);
   46|    280|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    280|    deserializer.end()?;
   48|    280|    Ok(value)
   49|    280|}
_RNvMs1_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderE5arrayCs96Jtz7q8ZTb_11cbor_encode:
  434|    280|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  435|    280|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  436|    280|        Ok(Accessor {
  437|    280|            de,
  438|    280|            len: array_start.0,
  439|    280|        })
  440|    280|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess17next_element_seedINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataINtNtCs7LdGhvAwabf_3cid3cid3CidKj40_EEECs96Jtz7q8ZTb_11cbor_encode:
  484|    280|        if let Some(len) = self.len.as_mut() {
  485|    280|            if *len > 0 {
  486|    280|                *len -= 1;
  487|    280|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    280|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess17next_element_seedINtNtCsjJTzLsQPs9f_4core6marker11PhantomDatayEECs96Jtz7q8ZTb_11cbor_encode:
  484|    280|        if let Some(len) = self.len.as_mut() {
  485|    280|            if *len > 0 {
  486|    280|                *len -= 1;
  487|    280|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    280|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCs7LdGhvAwabf_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECs96Jtz7q8ZTb_11cbor_encode:
  318|    280|    fn deserialize_newtype_struct<V>(
  319|    280|        self,
  320|    280|        name: &'static str,
  321|    280|        visitor: V,
  322|    280|    ) -> Result<V::Value, Self::Error>
  323|    280|    where
  324|    280|        V: Visitor<'de>,
  325|    280|    {
  326|    280|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  327|    280|            self.deserialize_cid(visitor)
  328|       |        } else {
  329|      0|            visitor.visit_newtype_struct(self)
  330|       |        }
  331|    280|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess17next_element_seedINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEEECs96Jtz7q8ZTb_11cbor_encode:
  484|    280|        if let Some(len) = self.len.as_mut() {
  485|    280|            if *len > 0 {
  486|    280|                *len -= 1;
  487|    280|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    280|    }
_RINvMs_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCs7LdGhvAwabf_3cid5serdeINtNtB2l_3cid3CidKpENtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECs96Jtz7q8ZTb_11cbor_encode:
  113|    280|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    280|    where
  115|    280|        V: Visitor<'de>,
  116|    280|    {
  117|    280|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    280|        match tag.0 {
  120|    280|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    280|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCslIW5YV6Lhnx_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEECs96Jtz7q8ZTb_11cbor_encode:
  334|    280|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  335|    280|    where
  336|    280|        V: Visitor<'de>,
  337|    280|    {
  338|    280|        let mut de = self.try_step()?;
  339|    280|        let seq = Accessor::array(&mut de)?;
  340|    280|        visitor.visit_seq(seq)
  341|    280|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECs96Jtz7q8ZTb_11cbor_encode:
  354|    280|    fn deserialize_tuple_struct<V>(
  355|    280|        self,
  356|    280|        _name: &'static str,
  357|    280|        len: usize,
  358|    280|        visitor: V,
  359|    280|    ) -> Result<V::Value, Self::Error>
  360|    280|    where
  361|    280|        V: Visitor<'de>,
  362|    280|    {
  363|    280|        self.deserialize_tuple(len, visitor)
  364|    280|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess17next_element_seedINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEECs96Jtz7q8ZTb_11cbor_encode:
  484|  3.03k|        if let Some(len) = self.len.as_mut() {
  485|  3.03k|            if *len > 0 {
  486|  2.75k|                *len -= 1;
  487|  2.75k|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|    280|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|  3.03k|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess17next_element_seedINtNtCsjJTzLsQPs9f_4core6marker11PhantomDataNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECs96Jtz7q8ZTb_11cbor_encode:
  484|    280|        if let Some(len) = self.len.as_mut() {
  485|    280|            if *len > 0 {
  486|    280|                *len -= 1;
  487|    280|                Ok(Some(seed.deserialize(&mut *self.de)?))
  488|       |            } else {
  489|      0|                Ok(None)
  490|       |            }
  491|      0|        } else if peek_one(&mut self.de.reader)? != marker::BREAK {
  492|      0|            Ok(Some(seed.deserialize(&mut *self.de)?))
  493|       |        } else {
  494|      0|            self.de.reader.advance(1);
  495|      0|            Ok(None)
  496|       |        }
  497|    280|    }
_RNvMs_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderE3endCs96Jtz7q8ZTb_11cbor_encode:
  131|    280|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    280|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    280|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECs96Jtz7q8ZTb_11cbor_encode:
  344|    280|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  345|    280|    where
  346|    280|        V: Visitor<'de>,
  347|    280|    {
  348|    280|        let mut de = self.try_step()?;
  349|    280|        let seq = Accessor::tuple(&mut de, len)?;
  350|    280|        visitor.visit_seq(seq)
  351|    280|    }
_RINvXs7_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer17deserialize_bytesNtNtCs7LdGhvAwabf_3cid5serde17BytesToCidVisitorECs96Jtz7q8ZTb_11cbor_encode:
  646|    280|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  647|    280|        let byte = peek_one(&mut self.0.reader)?;
  648|    280|        match dec::if_major(byte) {
  649|       |            major::BYTES => {
  650|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  651|    280|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  652|    280|                    Cow::Borrowed(buf) => {
  653|    280|                        if buf.len() <= 1 || buf[0] != 0 {
  654|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  655|       |                        } else {
  656|    280|                            visitor.visit_borrowed_bytes(&buf[1..])
  657|       |                        }
  658|       |                    }
  659|      0|                    Cow::Owned(mut buf) => {
  660|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  661|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  662|       |                        } else {
  663|      0|                            buf.remove(0);
  664|      0|                            visitor.visit_byte_buf(buf)
  665|       |                        }
  666|       |                    }
  667|       |                }
  668|       |            }
  669|      0|            _ => Err(DecodeError::Unsupported { byte }),
  670|       |        }
  671|    280|    }
_RNvMs1_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderE5tupleCs96Jtz7q8ZTb_11cbor_encode:
  443|    280|    pub fn tuple(
  444|    280|        de: &'a mut Deserializer<R>,
  445|    280|        len: usize,
  446|    280|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  447|    280|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  448|       |
  449|    280|        if array_start.0 == Some(len) {
  450|    280|            Ok(Accessor {
  451|    280|                de,
  452|    280|                len: array_start.0,
  453|    280|            })
  454|       |        } else {
  455|      0|            Err(DecodeError::RequireLength {
  456|      0|                name: "tuple",
  457|      0|                expect: len,
  458|      0|                value: array_start.0.unwrap_or(0),
  459|      0|            })
  460|       |        }
  461|    280|    }
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de12Deserializer15deserialize_u64NtNvXsV_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECs96Jtz7q8ZTb_11cbor_encode:
  142|    280|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    280|        where V: Visitor<'de>
  144|    280|        {
  145|    280|            let value = <$t>::decode(&mut self.reader)?;
  146|    280|            visitor.$visit(value)
  147|    280|        }
_RNvMs_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderE8try_stepCs96Jtz7q8ZTb_11cbor_encode:
  101|    560|    fn try_step<'a>(
  102|    560|        &'a mut self,
  103|    560|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    560|    {
  105|    560|        if self.reader.step_in() {
  106|    560|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    560|    }
_RNvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderENtNtCsfpHdPZoguP6_5serde2de9SeqAccess9size_hintCs96Jtz7q8ZTb_11cbor_encode:
  500|    280|    fn size_hint(&self) -> Option<usize> {
  501|    280|        self.len
  502|    280|    }
_RNCNvMs_NtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderE8try_step0Cs96Jtz7q8ZTb_11cbor_encode:
  106|    560|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RNvMNtCsfuepieMv3An_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderE11from_readerCs96Jtz7q8ZTb_11cbor_encode:
   93|    280|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    280|        Deserializer { reader }
   95|    280|    }

_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCs4TDbzq0ehG5_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECs96Jtz7q8ZTb_11cbor_encode:
  403|    560|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    560|        value.serialize(&mut *self.ser)
  405|    560|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct15serialize_fieldRyECs96Jtz7q8ZTb_11cbor_encode:
  403|    560|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    560|        value.serialize(&mut *self.ser)
  405|    560|    }
_RINvXs_NtCsfuepieMv3An_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer24serialize_newtype_structNtNtCscGqEh5eK1gc_11serde_bytes7bytebuf7ByteBufECs96Jtz7q8ZTb_11cbor_encode:
  199|    560|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    560|        self,
  201|    560|        name: &'static str,
  202|    560|        value: &T,
  203|    560|    ) -> Result<Self::Ok, Self::Error> {
  204|    560|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    560|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    560|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs7LdGhvAwabf_3cid3cid3CidKj40_EECs96Jtz7q8ZTb_11cbor_encode:
  403|    560|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    560|        value.serialize(&mut *self.ser)
  405|    560|    }
_RNvXs_NtCsfuepieMv3An_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer22serialize_tuple_structCs96Jtz7q8ZTb_11cbor_encode:
  244|    560|    fn serialize_tuple_struct(
  245|    560|        self,
  246|    560|        _name: &'static str,
  247|    560|        len: usize,
  248|    560|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    560|        self.serialize_tuple(len)
  250|    560|    }
_RNvXs_NtCsfuepieMv3An_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer15serialize_bytesCs96Jtz7q8ZTb_11cbor_encode:
  160|  7.19k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  7.19k|        Ok(())
  162|  7.19k|    }
_RINvNtCsfuepieMv3An_18serde_ipld_dagcbor3ser6to_vecNtNtCs4TDbzq0ehG5_11common_fuzz4cbor7PayloadECs96Jtz7q8ZTb_11cbor_encode:
   23|    560|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    560|where
   25|    560|    T: Serialize + ?Sized,
   26|    560|{
   27|    560|    let writer = BufWriter::new(Vec::new());
   28|    560|    let mut serializer = Serializer::new(writer);
   29|    560|    value.serialize(&mut serializer)?;
   30|    560|    Ok(serializer.into_inner().into_inner())
   31|    560|}
_RINvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser12SerializeSeq17serialize_elementRNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressECs96Jtz7q8ZTb_11cbor_encode:
  369|  4.95k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  370|  4.95k|        value.serialize(&mut *self.ser)
  371|  4.95k|    }
_RNvXs0_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser12SerializeSeq3endCs96Jtz7q8ZTb_11cbor_encode:
  374|    560|    fn end(self) -> Result<Self::Ok, Self::Error> {
  375|    560|        if !self.bounded {
  376|      0|            enc::End.encode(&mut self.ser.writer)?;
  377|    560|        }
  378|       |
  379|    560|        Ok(())
  380|    560|    }
_RNvXs7_NtCsfuepieMv3An_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer15serialize_bytesCs96Jtz7q8ZTb_11cbor_encode:
  550|    560|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  551|    560|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  552|    560|        let prefixed = [&[0x00], value].concat();
  553|    560|        // CIDs are serialized with CBOR tag 42.
  554|    560|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  555|    560|        Ok(())
  556|    560|    }
_RNvMNtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterE10into_innerCs96Jtz7q8ZTb_11cbor_encode:
   56|    560|    pub fn into_inner(self) -> W {
   57|    560|        self.writer
   58|    560|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCs8yox8sNCvE1_17fvm_ipld_bitfield8BitFieldECs96Jtz7q8ZTb_11cbor_encode:
  403|    560|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    560|        value.serialize(&mut *self.ser)
  405|    560|    }
_RNvXs_NtCsfuepieMv3An_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer13serialize_u64Cs96Jtz7q8ZTb_11cbor_encode:
  123|    560|        v.encode(&mut self.writer)?;
  124|    560|        Ok(())
  125|    560|    }
_RNvMNtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterE3newCs96Jtz7q8ZTb_11cbor_encode:
   51|    560|    pub fn new(writer: W) -> Serializer<W> {
   52|    560|        Serializer { writer }
   53|    560|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressECs96Jtz7q8ZTb_11cbor_encode:
  403|    560|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    560|        value.serialize(&mut *self.ser)
  405|    560|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECs96Jtz7q8ZTb_11cbor_encode:
  403|    560|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    560|        value.serialize(&mut *self.ser)
  405|    560|    }
_RNvXs_NtCsfuepieMv3An_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer15serialize_tupleCs96Jtz7q8ZTb_11cbor_encode:
  239|    560|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    560|        Ok(BoundedCollect { ser: self })
  241|    560|    }
_RNvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct3endCs96Jtz7q8ZTb_11cbor_encode:
  408|    560|    fn end(self) -> Result<Self::Ok, Self::Error> {
  409|    560|        Ok(())
  410|    560|    }
_RINvXs2_NtCsfuepieMv3An_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCslIW5YV6Lhnx_5alloc3vec3VecNtNtCsf4zcuWwU8ki_10fvm_shared7address7AddressEECs96Jtz7q8ZTb_11cbor_encode:
  403|    560|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  404|    560|        value.serialize(&mut *self.ser)
  405|    560|    }
_RNvXs_NtCsfuepieMv3An_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterENtNtCsfpHdPZoguP6_5serde3ser10Serializer13serialize_seqCs96Jtz7q8ZTb_11cbor_encode:
  226|    560|        if let Some(len) = len {
  227|    560|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    560|        Ok(Collect {
  232|    560|            bounded: len.is_some(),
  233|    560|            ser: self,
  234|    560|        })
  235|    560|    }

_RINvXs_Csb335KXiZRGJ_11serde_tupleINtB5_12DeserializerQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEENtNtCsfpHdPZoguP6_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECs96Jtz7q8ZTb_11cbor_encode:
  353|    280|    fn deserialize_tuple_struct<V>(
  354|    280|        self,
  355|    280|        name: &'static str,
  356|    280|        len: usize,
  357|    280|        visitor: V,
  358|    280|    ) -> Result<V::Value, Self::Error>
  359|    280|    where
  360|    280|        V: serde::de::Visitor<'de>,
  361|    280|    {
  362|    280|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    280|    }
_RNvXCsb335KXiZRGJ_11serde_tupleINtB2_10SerializerQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEENtNtCsfpHdPZoguP6_5serde3ser10Serializer22serialize_tuple_structCs96Jtz7q8ZTb_11cbor_encode:
  158|    560|    fn serialize_tuple_struct(
  159|    560|        self,
  160|    560|        name: &'static str,
  161|    560|        len: usize,
  162|    560|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    560|        self.0.serialize_tuple_struct(name, len)
  164|    560|    }

_RNvNtCsbDuOcop4M1m_15unsigned_varint6decode7is_lastCs96Jtz7q8ZTb_11cbor_encode:
   90|  3.34k|pub fn is_last(b: u8) -> bool {
   91|  3.34k|    b & 0x80 == 0
   92|  3.34k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6decode3u64Cs96Jtz7q8ZTb_11cbor_encode:
  122|  1.10k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.10k|    decode!(buf, 9, u64)
  124|  1.10k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6decode3u64Csf4zcuWwU8ki_10fvm_shared:
  122|  1.79k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.79k|    decode!(buf, 9, u64)
  124|  1.79k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6decode7is_lastCsf4zcuWwU8ki_10fvm_shared:
   90|  13.9k|pub fn is_last(b: u8) -> bool {
   91|  13.9k|    b & 0x80 == 0
   92|  13.9k|}

_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode9u8_bufferCs96Jtz7q8ZTb_11cbor_encode:
  101|    560|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    560|    [0; U8_LEN]
  103|    560|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode10u64_bufferCs96Jtz7q8ZTb_11cbor_encode:
  119|  2.75k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  2.75k|    [0; U64_LEN]
  121|  2.75k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode2u8Cs96Jtz7q8ZTb_11cbor_encode:
   45|    560|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    560|    encode!(number, buf)
   47|    560|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode3u64Cs96Jtz7q8ZTb_11cbor_encode:
   69|  1.64k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.64k|    encode!(number, buf)
   71|  1.64k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode3u64Csf4zcuWwU8ki_10fvm_shared:
   69|  3.59k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  3.59k|    encode!(number, buf)
   71|  3.59k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode10u64_bufferCsf4zcuWwU8ki_10fvm_shared:
  119|  3.59k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.59k|    [0; U64_LEN]
  121|  3.59k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode10u64_bufferCs8yox8sNCvE1_17fvm_ipld_bitfield:
  119|  6.55k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  6.55k|    [0; U64_LEN]
  121|  6.55k|}
_RNvNtCsbDuOcop4M1m_15unsigned_varint6encode3u64Cs8yox8sNCvE1_17fvm_ipld_bitfield:
   69|  6.55k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  6.55k|    encode!(number, buf)
   71|  6.55k|}

_RINvNtCsbDuOcop4M1m_15unsigned_varint2io8read_u64QQRShECs96Jtz7q8ZTb_11cbor_encode:
   31|  1.10k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.10k|                let mut b = encode::$b();
   33|  1.67k|                for i in 0 .. b.len() {
   34|  1.67k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.67k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.67k|                    }
   38|  1.67k|                    if decode::is_last(b[i]) {
   39|  1.10k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    568|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.10k|            }

_RNCNvXs9_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|  5.92k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|  6.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    870|    fn new(mut iter: I) -> Self {
  468|    870|        let next = iter.next();
  469|    870|        Self { iter, next }
  470|    870|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|    870|    fn new(mut iter: I) -> Self {
  468|    870|        let next = iter.next();
  469|    870|        Self { iter, next }
  470|    870|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|  1.74k|    fn new(mut iter: I) -> Self {
  468|  1.74k|        let next = iter.next();
  469|  1.74k|        Self { iter, next }
  470|  1.74k|    }
_RNvMsa_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|    870|    pub fn new(iter: I) -> Self {
  425|    870|        Self {
  426|    870|            iter: Lookahead::new(iter),
  427|    870|        }
  428|    870|    }
_RNvXs9_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  388|  6.79k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  6.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  6.79k|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|    870|    fn new(mut iter: I) -> Self {
  468|    870|        let next = iter.next();
  469|    870|        Self { iter, next }
  470|    870|    }
_RNvXsh_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsjJTzLsQPs9f_4core7default7Default7defaultB9_:
  151|    870|#[derive(Default)]
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  6.79k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.79k|        self.next.as_mut()
  474|  6.79k|    }
_RNvXsb_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  438|  6.79k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  5.92k|        while let Some(next) = self.iter.peek() {
  443|  5.50k|            if next.start > range.end {
  444|  5.50k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  5.92k|        Some(range)
  452|  6.79k|    }
_RNvMs8_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|  6.79k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  6.79k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  5.92k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    870|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  5.92k|        if advance_lhs {
  370|  5.92k|            self.lhs.next();
  371|  5.92k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  5.92k|        range
  376|  6.79k|    }
_RNvMsa_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|    870|    pub fn new(iter: I) -> Self {
  425|    870|        Self {
  426|    870|            iter: Lookahead::new(iter),
  427|    870|        }
  428|    870|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|  5.92k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  5.92k|        self.next.as_mut()
  474|  5.92k|    }
_RNvMs8_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|  6.79k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  6.79k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  5.92k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    870|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  5.92k|        if advance_lhs {
  370|  5.92k|            self.lhs.next();
  371|  5.92k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  5.92k|        range
  376|  6.79k|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|  6.79k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  6.79k|        self.next.as_mut()
  474|  6.79k|    }
_RNvXs0_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  5.92k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  5.92k|        // the difference between a range and an empty range is just that range
  183|  5.92k|        Some(lhs)
  184|  5.92k|    }
_RNvXse_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|  5.92k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  5.92k|        let next = self.next.take()?;
  483|  5.92k|        self.next = self.iter.next();
  484|  5.92k|        Some(next)
  485|  5.92k|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|    870|    fn new(mut iter: I) -> Self {
  468|    870|        let next = iter.next();
  469|    870|        Self { iter, next }
  470|    870|    }
_RNvMs5_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|    870|    pub fn new(a: A, b: B) -> Self {
  298|    870|        Self(Merge::new(_Combine::new(a, b)))
  299|    870|    }
_RNvXse_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.79k|        let next = self.next.take()?;
  483|  5.92k|        self.next = self.iter.next();
  484|  5.92k|        Some(next)
  485|  6.79k|    }
_RNCNvXs9_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|  6.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|  5.92k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  5.92k|        let next = self.next.take()?;
  483|  5.92k|        self.next = self.iter.next();
  484|  5.92k|        Some(next)
  485|  5.92k|    }
_RNvMs8_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|    870|    fn new(lhs: A, rhs: B) -> Self {
  343|    870|        Self {
  344|    870|            lhs: Lookahead::new(lhs),
  345|    870|            rhs: Lookahead::new(rhs),
  346|    870|            combinator: Default::default(),
  347|    870|        }
  348|    870|    }
_RNvXsf_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsjJTzLsQPs9f_4core7default7Default7defaultB9_:
   86|    870|#[derive(Default)]
_RNvXse_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  6.79k|        let next = self.next.take()?;
  483|  5.92k|        self.next = self.iter.next();
  484|  5.92k|        Some(next)
  485|  6.79k|    }
_RNvMs8_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|    870|    fn new(lhs: A, rhs: B) -> Self {
  343|    870|        Self {
  344|    870|            lhs: Lookahead::new(lhs),
  345|    870|            rhs: Lookahead::new(rhs),
  346|    870|            combinator: Default::default(),
  347|    870|        }
  348|    870|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|  13.5k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  13.5k|        self.next.as_mut()
  474|  13.5k|    }
_RNvXsb_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  438|  6.79k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  5.92k|        while let Some(next) = self.iter.peek() {
  443|  5.50k|            if next.start > range.end {
  444|  5.50k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  5.92k|        Some(range)
  452|  6.79k|    }
_RNvXs9_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  388|  6.79k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  6.79k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  6.79k|    }
_RNvMs5_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|    870|    pub fn new(a: A, b: B) -> Self {
  298|    870|        Self(Merge::new(_Combine::new(a, b)))
  299|    870|    }
_RNCNvXs9_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|  5.92k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  311|  6.79k|        self.0.next()
  312|  6.79k|    }
_RNvMsd_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|  5.92k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  5.92k|        self.next.as_mut()
  474|  5.92k|    }
_RNvXNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  5.92k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  5.92k|        // the union of a range and an empty range is just that range
  111|  5.92k|        Some(lhs)
  112|  5.92k|    }
_RNvXs6_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  311|  6.79k|        self.0.next()
  312|  6.79k|    }

_RINvMs2_NtCs8yox8sNCvE1_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  1.74k|    pub fn new<II>(iter: II) -> Self
  140|  1.74k|    where
  141|  1.74k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  1.74k|    {
  143|  1.74k|        Self(iter.into_iter())
  144|  1.74k|    }
_RINvYINtNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|    870|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|    870|        Combine::new(self, other)
   33|    870|    }
_RNvXs3_NtCs8yox8sNCvE1_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  6.79k|    fn next(&mut self) -> Option<Self::Item> {
  154|  6.79k|        self.0.next()
  155|  6.79k|    }
_RINvMs2_NtCs8yox8sNCvE1_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|    870|    pub fn new<II>(iter: II) -> Self
  140|    870|    where
  141|    870|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|    870|    {
  143|    870|        Self(iter.into_iter())
  144|    870|    }
_RINvYINtNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|    870|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|    870|        Combine::new(self, other)
   23|    870|    }
_RNCINvNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  1.74k|    Ranges::new(iter::from_fn(move || {
  167|  1.74k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  1.74k|    }))
_RINvNtCs8yox8sNCvE1_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsjJTzLsQPs9f_4core4iter8adapters6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEEB4_:
  163|  1.74k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  1.74k|    let mut iter = bits.into_iter().peekable();
  165|  1.74k|
  166|  1.74k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  1.74k|    }))
  180|  1.74k|}
_RNvXs3_NtCs8yox8sNCvE1_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsjJTzLsQPs9f_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCslIW5YV6Lhnx_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  1.74k|    fn next(&mut self) -> Option<Self::Item> {
  154|  1.74k|        self.0.next()
  155|  1.74k|    }

_RNvXsi_Cs8yox8sNCvE1_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsjJTzLsQPs9f_4core7default7Default7defaultB5_:
   42|  1.01k|#[derive(Debug, Default, Clone)]
_RNvMs4_Cs8yox8sNCvE1_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|    870|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|    870|        self.inner_ranges()
  287|    870|            .union(ranges_from_bits(self.set.iter().copied()))
  288|    870|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|    870|    }
_RNvMs4_Cs8yox8sNCvE1_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|    870|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|    870|        iter::Ranges::new(self.ranges.iter().cloned())
  281|    870|    }

_RNvXNtCs8yox8sNCvE1_17fvm_ipld_bitfield5rangeINtNtNtCsjJTzLsQPs9f_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  5.92k|    fn size(&self) -> Self::Idx {
   15|  5.92k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  5.92k|            self.end - self.start
   19|       |        }
   20|  5.92k|    }

_RINvXNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   81|    708|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   82|    708|    where
   83|    708|        S: Serializer,
   84|    708|    {
   85|    708|        let bytes = self.to_bytes();
   86|    708|        if bytes.len() > MAX_ENCODED_SIZE {
   87|      0|            return Err(serde::ser::Error::custom(format!(
   88|      0|                "encoded bitfield was too large {}",
   89|      0|                bytes.len()
   90|      0|            )));
   91|    708|        }
   92|    708|        serde_bytes::serialize(&bytes, serializer)
   93|    708|    }
_RINvXs_NtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   97|    280|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   98|    280|    where
   99|    280|        D: Deserializer<'de>,
  100|    280|    {
  101|    280|        let bytes: Cow<'de, [u8]> = serde_bytes::deserialize(deserializer)?;
  102|    280|        if bytes.len() > MAX_ENCODED_SIZE {
  103|      0|            return Err(serde::de::Error::custom(format!(
  104|      0|                "encoded bitfield was too large {}",
  105|      0|                bytes.len()
  106|      0|            )));
  107|    280|        }
  108|    280|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  109|    280|    }
_RNvXs0_NtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hint:
  149|    734|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    734|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    734|    }
_RNvXs0_NtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitrary:
  113|    732|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|    732|        let mut next_value: bool = bool::arbitrary(u)?;
  115|    732|        let mut ranges = Vec::new();
  116|    732|        let mut index = 0u64;
  117|    732|        let mut total_len: u64 = 0;
  118|       |
  119|    732|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|    732|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  7.45k|            let len = u64::arbitrary(u)?;
  124|  7.45k|            let shift = u.int_in_range(0..=63)?;
  125|  7.45k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  7.45k|
  127|  7.45k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  7.45k|            if ovf {
  129|     23|                break;
  130|  7.43k|            }
  131|  7.43k|            total_len = new_total_len;
  132|  7.43k|            let start = index;
  133|  7.43k|            index += len;
  134|  7.43k|            let end = index;
  135|  7.43k|
  136|  7.43k|            if next_value {
  137|  3.74k|                ranges.push(start..end);
  138|  3.74k|            }
  139|       |
  140|  7.43k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|    732|        Ok(Self {
  144|    732|            ranges,
  145|    732|            ..Default::default()
  146|    732|        })
  147|    732|    }
_RNvMs1_NtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  156|    280|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  157|    280|        let mut reader = BitReader::new(bytes)?;
  158|       |
  159|    280|        let version = reader.read(2);
  160|    280|        if version != 0 {
  161|      0|            return Err(Error::UnsupportedVersion);
  162|    280|        }
  163|    280|
  164|    280|        let mut next_value = reader.read(1) == 1;
  165|    280|        let mut ranges = Vec::new();
  166|    280|        let mut index = 0u64;
  167|    280|        let mut total_len: u64 = 0;
  168|       |
  169|  5.70k|        while let Some(len) = reader.read_len()? {
  170|  5.42k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  171|  5.42k|            if ovf {
  172|      0|                return Err(Error::RLEOverflow);
  173|  5.42k|            }
  174|  5.42k|            total_len = new_total_len;
  175|  5.42k|            let start = index;
  176|  5.42k|            index += len;
  177|  5.42k|            let end = index;
  178|  5.42k|
  179|  5.42k|            if next_value {
  180|  2.74k|                ranges.push(start..end);
  181|  2.74k|            }
  182|       |
  183|  5.42k|            next_value = !next_value;
  184|       |        }
  185|       |
  186|       |        // next_value equal true means we just read a run of zeros
  187|       |        // which means that there is a trailing run of zeros
  188|    280|        if next_value {
  189|      0|            return Err(Error::NotMinimal);
  190|    280|        }
  191|    280|
  192|    280|        Ok(Self {
  193|    280|            ranges,
  194|    280|            ..Default::default()
  195|    280|        })
  196|    280|    }
_RNvMs1_NtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  199|    870|    pub fn to_bytes(&self) -> Vec<u8> {
  200|    870|        let mut iter = self.ranges();
  201|       |
  202|    870|        let first_range = match iter.next() {
  203|    423|            Some(range) => range,
  204|    447|            None => return Default::default(),
  205|       |        };
  206|       |
  207|    423|        let mut writer = BitWriter::new();
  208|    423|        writer.write(0, 2); // version 00
  209|    423|
  210|    423|        if first_range.start == 0 {
  211|    189|            writer.write(1, 1); // the first bit is a 1
  212|    234|        } else {
  213|    234|            writer.write(0, 1); // the first bit is a 0
  214|    234|            writer.write_len(first_range.start); // the number of leading 0s
  215|    234|        }
  216|       |
  217|    423|        writer.write_len(first_range.size());
  218|    423|        let mut index = first_range.end;
  219|       |
  220|       |        // for each range of 1s we first encode the number of 0s that came prior
  221|       |        // before encoding the number of 1s
  222|  5.92k|        for range in iter {
  223|  5.50k|            writer.write_len(range.start - index); // zeros
  224|  5.50k|            writer.write_len(range.size()); // ones
  225|  5.50k|            index = range.end;
  226|  5.50k|        }
  227|       |
  228|    423|        writer.finish()
  229|    870|    }

_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  152|  5.70k|    pub fn has_more(&self) -> bool {
  153|  5.70k|        self.bits != 0 || !self.bytes.is_empty()
  154|  5.70k|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  118|  5.70k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  119|  5.70k|        // We're done.
  120|  5.70k|        if !self.has_more() {
  121|    280|            return Ok(None);
  122|  5.42k|        }
  123|  5.42k|
  124|  5.42k|        let peek6 = self.peek(6);
  125|       |
  126|  5.42k|        let len = if peek6 & 0b01 != 0 {
  127|       |            // Block Single (prefix 1)
  128|    848|            self.drop(1);
  129|    848|            1
  130|  4.57k|        } else if peek6 & 0b10 != 0 {
  131|       |            // Block Short (prefix 01)
  132|  1.60k|            let val = ((peek6 >> 2) & 0x0f) as u64;
  133|  1.60k|            self.drop(6);
  134|  1.60k|            if val < 2 {
  135|      0|                return Err(Error::NotMinimal);
  136|  1.60k|            }
  137|  1.60k|            val
  138|       |        } else {
  139|       |            // Block Long (prefix 00)
  140|  2.97k|            self.drop(2);
  141|  2.97k|            let val = self.read_varint()?;
  142|  2.97k|            if val < 16 {
  143|      0|                return Err(Error::NotMinimal);
  144|  2.97k|            }
  145|  2.97k|            val
  146|       |        };
  147|       |
  148|  5.42k|        Ok(Some(len))
  149|  5.70k|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   92|  2.97k|    fn read_varint(&mut self) -> Result<u64, Error> {
   93|  2.97k|        let mut len = 0u64;
   94|       |
   95|  15.9k|        for i in 0..VARINT_MAX_BYTES {
   96|  15.9k|            let byte = self.read(8);
   97|  15.9k|
   98|  15.9k|            // strip off the most significant bit and add
   99|  15.9k|            // it to the output
  100|  15.9k|            len |= (byte as u64 & 0x7f) << (i * 7);
  101|  15.9k|
  102|  15.9k|            // if the most significant bit is a 0, we've
  103|  15.9k|            // reached the end of the varint
  104|  15.9k|            if byte & 0x80 == 0 {
  105|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  106|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  107|  2.97k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  108|      0|                    break;
  109|  2.97k|                }
  110|  2.97k|                return Ok(len);
  111|  12.9k|            }
  112|       |        }
  113|       |
  114|      0|        Err(Error::InvalidVarint)
  115|  2.97k|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   60|  21.9k|    pub fn drop(&mut self, num_bits: u32) {
   61|  21.9k|        debug_assert!(num_bits <= 8);
   62|       |
   63|       |        // removes the bits
   64|  21.9k|        self.bits >>= num_bits;
   65|  21.9k|        self.num_bits -= num_bits;
   66|  21.9k|
   67|  21.9k|        // not sure why this being outside of the if improves the performance
   68|  21.9k|        // bit it does, probably related to keeping caches warm
   69|  21.9k|        let byte = self.bytes.first().unwrap_or(&0);
   70|  21.9k|        self.bits |= (*byte as u64) << self.num_bits;
   71|  21.9k|
   72|  21.9k|        // if fewer than 8 bits remain, we skip to loading the next byte
   73|  21.9k|        if self.num_bits < 8 {
   74|  17.9k|            self.num_bits += 8;
   75|  17.9k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   76|  17.9k|        }
   77|  21.9k|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   81|  16.4k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   82|  16.4k|        debug_assert!(num_bits <= 8);
   83|       |
   84|  16.4k|        let res = self.peek(num_bits);
   85|  16.4k|        self.drop(num_bits);
   86|  16.4k|
   87|  16.4k|        res
   88|  16.4k|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   25|    280|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   26|    280|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   27|    280|        // data.
   28|    280|        if bytes.last() == Some(&0) {
   29|      0|            return Err(Error::NotMinimal);
   30|    280|        }
   31|    280|        let mut bits = 0u64;
   32|    840|        for i in 0..2 {
   33|    560|            let byte = bytes.get(i).unwrap_or(&0);
   34|    560|            bits |= (*byte as u64) << (8 * i);
   35|    560|        }
   36|       |
   37|    280|        let bytes = bytes.get(2..).unwrap_or(&[]);
   38|    280|
   39|    280|        Ok(Self {
   40|    280|            bytes,
   41|    280|            bits,
   42|    280|            num_bits: 16,
   43|    280|        })
   44|    280|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   49|  21.9k|    pub fn peek(&self, num_bits: u32) -> u8 {
   50|  21.9k|        debug_assert!(num_bits <= 8);
   51|       |
   52|       |        // creates a mask with a `num_bits` number of 1s in order
   53|       |        // to get only the bits we need from `self.bits`
   54|  21.9k|        let mask = (1 << num_bits) - 1;
   55|  21.9k|        (self.bits & mask) as u8
   56|  21.9k|    }

_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   60|    423|    pub fn finish(mut self) -> Vec<u8> {
   61|    423|        if self.bits > 0 {
   62|    201|            self.bytes.push(self.bits as u8);
   63|    222|        }
   64|       |
   65|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   66|       |        // aren't added at the end of the bytes
   67|    423|        while let Some(0) = self.bytes.last() {
   68|      0|            self.bytes.pop();
   69|      0|        }
   70|    423|        self.bytes
   71|    423|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   38|  11.6k|    pub fn write_len(&mut self, len: u64) {
   39|  11.6k|        debug_assert!(len > 0);
   40|       |
   41|  11.6k|        if len == 1 {
   42|  1.77k|            // Block Single (prefix 1)
   43|  1.77k|            self.write(1, 1);
   44|  9.89k|        } else if len < 16 {
   45|  3.33k|            // Block Short (prefix 01)
   46|  3.33k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   47|  3.33k|            self.write(len as u8, 4);
   48|  3.33k|        } else {
   49|       |            // Block Long (prefix 00)
   50|  6.55k|            self.write(0, 2);
   51|  6.55k|
   52|  6.55k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   53|  35.8k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   54|  35.8k|                self.write(byte, 8);
   55|  35.8k|            }
   56|       |        }
   57|  11.6k|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   22|  51.6k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   23|  51.6k|        debug_assert!(num_bits <= 8);
   24|  51.6k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   25|       |
   26|  51.6k|        self.bits |= (byte as u16) << self.num_bits;
   27|  51.6k|        self.num_bits += num_bits;
   28|  51.6k|
   29|  51.6k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   30|  51.6k|        if self.num_bits >= 8 {
   31|  40.1k|            self.bytes.push(self.bits as u8);
   32|  40.1k|            self.bits >>= 8;
   33|  40.1k|            self.num_bits -= 8;
   34|  40.1k|        }
   35|  51.6k|    }
_RNvMNtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   17|    423|    pub fn new() -> Self {
   18|    423|        Default::default()
   19|    423|    }
_RNvXs_NtNtCs8yox8sNCvE1_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCsjJTzLsQPs9f_4core7default7Default7defaultB8_:
    4|    423|#[derive(Default, Clone, Debug)]

_RINvXNvXNvNtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   35|    412|#[derive(Debug, Serialize)]
_RINvXNvNtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   35|    560|#[derive(Debug, Serialize)]
_RINvXs4_NtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   93|    280|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   94|    280|    where
   95|    280|        D: Deserializer<'de>,
   96|    280|    {
   97|    280|        let bytes: Vec<u8> = serde_bytes::deserialize(deserializer)?;
   98|    280|        if bytes.len() > MAX_ENCODED_SIZE {
   99|      0|            return Err(serde::de::Error::custom(format!(
  100|      0|                "encoded bitfield was too large {}",
  101|      0|                bytes.len()
  102|      0|            )));
  103|    280|        }
  104|    280|        Ok(Self::Unvalidated(bytes))
  105|    280|    }
_RNvXs1_NtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hint:
   70|    367|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   71|    367|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   72|    367|    }
_RNvXs1_NtCs8yox8sNCvE1_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitrary:
   61|    366|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   62|    366|        let bf: BitField = u.arbitrary()?;
   63|    366|        Ok(if *u.choose(&[true, false])? {
   64|    161|            Self::Validated(bf)
   65|       |        } else {
   66|    162|            Self::Unvalidated(bf.to_bytes())
   67|       |        })
   68|    366|    }

_RINvCsfpYsShsSiv6_17fvm_ipld_encoding6to_vecNtNtCs4TDbzq0ehG5_11common_fuzz4cbor7PayloadECs96Jtz7q8ZTb_11cbor_encode:
   33|    560|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   34|    560|where
   35|    560|    T: ser::Serialize + ?Sized,
   36|    560|{
   37|    560|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   38|    560|}
_RINvCsfpYsShsSiv6_17fvm_ipld_encoding10from_sliceNtNtCs4TDbzq0ehG5_11common_fuzz4cbor7PayloadECs96Jtz7q8ZTb_11cbor_encode:
   50|    280|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   51|    280|where
   52|    280|    T: de::Deserialize<'a>,
   53|    280|{
   54|    280|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   55|    280|}

_RNCNvXse_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB7_7AddressNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
   68|    367|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs2_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB6_7AddressNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
  264|  5.51k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  265|  5.51k|    where
  266|  5.51k|        S: Serializer,
  267|  5.51k|    {
  268|  5.51k|        let address_bytes = self.to_bytes();
  269|  5.51k|        serde_bytes::Serialize::serialize(&address_bytes, s)
  270|  5.51k|    }
_RNvXse_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB5_7AddressNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
   68|    367|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs3_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB6_7AddressNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
  274|  2.75k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  275|  2.75k|    where
  276|  2.75k|        D: Deserializer<'de>,
  277|  2.75k|    {
  278|  2.75k|        let bz: Cow<'de, [u8]> = serde_bytes::Deserialize::deserialize(deserializer)?;
  279|       |
  280|       |        // Create and return created address of unmarshalled bytes
  281|  2.75k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  282|  2.75k|    }
_RNvNtCsf4zcuWwU8ki_10fvm_shared7address14from_leb_bytes:
  315|  1.79k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  316|       |    // write id to buffer in leb128 format
  317|  1.79k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  318|  1.79k|    if !remaining.is_empty() {
  319|      0|        return Err(Error::InvalidPayload);
  320|  1.79k|    }
  321|  1.79k|    Ok(id)
  322|  1.79k|}
_RNvXse_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB5_7AddressNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitrary:
   68|  3.31k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB4_7Address3new:
   78|  2.75k|    fn new(network: Network, protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   79|  2.75k|        Ok(Self {
   80|  2.75k|            network,
   81|  2.75k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  2.75k|    }
_RNvMs_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB4_7Address8to_bytes:
  176|  5.51k|    pub fn to_bytes(self) -> Vec<u8> {
  177|  5.51k|        self.payload.to_bytes()
  178|  5.51k|    }
_RNvNtCsf4zcuWwU8ki_10fvm_shared7address12to_leb_bytes:
  310|  3.59k|pub(crate) fn to_leb_bytes(id: u64) -> Result<Vec<u8>, Error> {
  311|  3.59k|    // write id to buffer in leb128 format
  312|  3.59k|    Ok(unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into())
  313|  3.59k|}
_RNvMs_NtCsf4zcuWwU8ki_10fvm_shared7addressNtB4_7Address10from_bytes:
   86|  2.75k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  2.75k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  2.75k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  2.75k|            Self::new(NETWORK_DEFAULT, protocol, &bz[1..])
   92|       |        }
   93|  2.75k|    }

_RNvXs8_NtNtCsf4zcuWwU8ki_10fvm_shared7address7networkNtB5_7NetworkNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
    8|    367|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXs8_NtNtCsf4zcuWwU8ki_10fvm_shared7address7networkNtB7_7NetworkNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
    8|    367|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs8_NtNtCsf4zcuWwU8ki_10fvm_shared7address7networkNtB5_7NetworkNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitrary:
    8|  3.31k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNCNvXs9_NtNtCsf4zcuWwU8ki_10fvm_shared7address7payloadNtB7_7PayloadNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
   12|    367|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs9_NtNtCsf4zcuWwU8ki_10fvm_shared7address7payloadNtB5_7PayloadNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
   12|    367|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs9_NtNtCsf4zcuWwU8ki_10fvm_shared7address7payloadNtB5_7PayloadNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9arbitrary:
   12|  3.31k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtNtCsf4zcuWwU8ki_10fvm_shared7address7payloadNtB2_7Payload8to_bytes:
   37|  5.51k|    pub fn to_bytes(self) -> Vec<u8> {
   38|       |        use Payload::*;
   39|  5.51k|        let mut bz = match self {
   40|  3.59k|            ID(i) => to_leb_bytes(i).unwrap(),
   41|  1.08k|            Secp256k1(arr) => arr.to_vec(),
   42|    324|            Actor(arr) => arr.to_vec(),
   43|    512|            BLS(arr) => arr.to_vec(),
   44|       |        };
   45|       |
   46|  5.51k|        bz.insert(0, Protocol::from(self) as u8);
   47|  5.51k|        bz
   48|  5.51k|    }
_RNvXs_NtNtCsf4zcuWwU8ki_10fvm_shared7address7payloadNtNtB6_8protocol8ProtocolINtNtCsjJTzLsQPs9f_4core7convert4FromNtB4_7PayloadE4from:
   75|  5.51k|    fn from(pl: Payload) -> Self {
   76|  5.51k|        match pl {
   77|  3.59k|            Payload::ID(_) => Self::ID,
   78|  1.08k|            Payload::Secp256k1(_) => Self::Secp256k1,
   79|    324|            Payload::Actor(_) => Self::Actor,
   80|    512|            Payload::BLS(_) => Self::BLS,
   81|       |        }
   82|  5.51k|    }
_RNvMNtNtCsf4zcuWwU8ki_10fvm_shared7address7payloadNtB2_7Payload3new:
   51|  2.75k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
   52|  2.75k|        let payload = match protocol {
   53|  1.79k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
   54|       |            Protocol::Secp256k1 => Self::Secp256k1(
   55|    542|                payload
   56|    542|                    .try_into()
   57|    542|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   58|       |            ),
   59|       |            Protocol::Actor => Self::Actor(
   60|    162|                payload
   61|    162|                    .try_into()
   62|    162|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   63|       |            ),
   64|       |            Protocol::BLS => Self::BLS(
   65|    256|                payload
   66|    256|                    .try_into()
   67|    256|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
   68|       |            ),
   69|       |        };
   70|  2.75k|        Ok(payload)
   71|  2.75k|    }

_RNvXNvNtNtCsf4zcuWwU8ki_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscIQR7GHt1OU_10num_traits4cast13FromPrimitive8from_i64B8_:
   11|  2.75k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCsf4zcuWwU8ki_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   26|  2.75k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   27|  2.75k|        FromPrimitive::from_u8(b)
   28|  2.75k|    }
_RNvXNvNtNtCsf4zcuWwU8ki_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCscIQR7GHt1OU_10num_traits4cast13FromPrimitive8from_u64B8_:
   11|  2.75k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RINvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB3_7PayloadNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   10|    280|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtBe_7PayloadNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEECs96Jtz7q8ZTb_11cbor_encode:
   10|    280|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtBd_7PayloadNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de8AccessorNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEE0Cs96Jtz7q8ZTb_11cbor_encode:
   10|    280|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXs0_NtCs4TDbzq0ehG5_11common_fuzz4cborNtB7_7PayloadNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hint0Cs96Jtz7q8ZTb_11cbor_encode:
   10|    367|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCs4TDbzq0ehG5_11common_fuzz4cborNtBa_7PayloadNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCsb335KXiZRGJ_11serde_tuple10SerializerQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEEECs96Jtz7q8ZTb_11cbor_encode:
   10|    560|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCs4TDbzq0ehG5_11common_fuzz4cborNtB5_7PayloadNtCs5aPMSeyGZCB_9arbitrary9Arbitrary9size_hintCs96Jtz7q8ZTb_11cbor_encode:
   10|    367|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCs4TDbzq0ehG5_11common_fuzz4cborNtB8_7PayloadNtNtCsfpHdPZoguP6_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCsb335KXiZRGJ_11serde_tuple12DeserializerQINtNtCsfuepieMv3An_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils11SliceReaderEEECs96Jtz7q8ZTb_11cbor_encode:
   10|    280|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCs4TDbzq0ehG5_11common_fuzz4cborNtBd_7PayloadNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   10|    560|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCs4TDbzq0ehG5_11common_fuzz4cborNtB5_7PayloadNtNtCsfpHdPZoguP6_5serde3ser9Serialize9serializeQINtNtCsfuepieMv3An_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs6TEMOj0c6O5_7cbor4ii4core5utils9BufWriterEECs96Jtz7q8ZTb_11cbor_encode:
   10|    560|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXs0_NtCs4TDbzq0ehG5_11common_fuzz4cborNtB5_7PayloadNtCs5aPMSeyGZCB_9arbitrary9Arbitrary19arbitrary_take_rest:
   10|    452|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

