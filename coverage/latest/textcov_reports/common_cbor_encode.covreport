_RNCNvXs8_Cs8xksezEEkwm_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0Csk8K9mHYwX82_11cbor_encode:
  656|  15.6k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  15.6k|            <T as Arbitrary>::size_hint(d)
  658|  15.6k|        }))
_RNCNvXs8_Cs8xksezEEkwm_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0Csk8K9mHYwX82_11cbor_encode:
  656|  18.8k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  18.8k|            <T as Arbitrary>::size_hint(d)
  658|  18.8k|        }))
_RNvXsa_Cs8xksezEEkwm_9arbitraryINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  688|    392|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|    392|        (0, None)
  690|    392|    }
_RNvYNtNtNtCs7QDi2znKIpD_10fvm_shared7address7payload16DelegatedAddressNtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  277|    392|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|    392|        let _ = depth;
  279|    392|        (0, None)
  280|    392|    }
_RNvXs8_Cs8xksezEEkwm_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  655|    392|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    392|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    392|        }))
  659|    392|    }
_RNvXsL_Cs8xksezEEkwm_9arbitraryyNtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  320|    784|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    784|                    let n = mem::size_of::<$ty>();
  322|    784|                    (n, Some(n))
  323|    784|                }
_RNvXsa_Cs8xksezEEkwm_9arbitraryINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  688|    392|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|    392|        (0, None)
  690|    392|    }
_RNvXs8_Cs8xksezEEkwm_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  655|    392|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    392|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    392|        }))
  659|    392|    }
_RNvXsK_Cs8xksezEEkwm_9arbitrarymNtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  320|    392|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    392|                    let n = mem::size_of::<$ty>();
  322|    392|                    (n, Some(n))
  323|    392|                }
_RNvXsI_Cs8xksezEEkwm_9arbitraryhNtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  320|  36.8k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  36.8k|                    let n = mem::size_of::<$ty>();
  322|  36.8k|                    (n, Some(n))
  323|  36.8k|                }
_RNvXs8_Cs8xksezEEkwm_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  655|    784|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    784|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    784|        }))
  659|    784|    }
_RNCNvXs8_Cs8xksezEEkwm_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0Csk8K9mHYwX82_11cbor_encode:
  656|  1.17k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  1.17k|            <T as Arbitrary>::size_hint(d)
  658|  1.17k|        }))
_RNCNvXs8_Cs8xksezEEkwm_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0Csk8K9mHYwX82_11cbor_encode:
  656|    784|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|    784|            <T as Arbitrary>::size_hint(d)
  658|    784|        }))
_RNvXs8_Cs8xksezEEkwm_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
  655|    392|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    392|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    392|        }))
  659|    392|    }
_RNvYINtNtCsk5wu2A8Zzd4_3cid3cid3CidKj40_ENtCs8xksezEEkwm_9arbitrary9Arbitrary19arbitrary_take_restCsdYd1HzIMaKC_11common_fuzz:
  189|    391|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    391|        Self::arbitrary(&mut u)
  191|    391|    }
_RNvXsa_Cs8xksezEEkwm_9arbitraryINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCsdYd1HzIMaKC_11common_fuzz:
  679|    391|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    391|        u.arbitrary_iter()?.collect()
  681|    391|    }
_RNvXsa_Cs8xksezEEkwm_9arbitraryINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCsdYd1HzIMaKC_11common_fuzz:
  679|    391|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    391|        u.arbitrary_iter()?.collect()
  681|    391|    }
_RNvXs8_Cs8xksezEEkwm_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCs7QDi2znKIpD_10fvm_shared:
  641|    940|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  642|    940|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  643|    940|    }
_RNCNvXs8_Cs8xksezEEkwm_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Cs7QDi2znKIpD_10fvm_shared:
  642|  18.8k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RINvCs8xksezEEkwm_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECs7QDi2znKIpD_10fvm_shared:
  615|    940|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  616|    940|where
  617|    940|    F: FnMut(usize) -> Result<T>,
  618|    940|{
  619|    940|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  620|    940|    let array_ptr = array.as_mut_ptr();
  621|    940|    let dst = array_ptr as _;
  622|    940|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  623|    940|        dst,
  624|    940|        initialized: 0,
  625|    940|    };
  626|       |    unsafe {
  627|  18.8k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  628|  18.8k|            core::ptr::write(value_ptr, cb(idx)?);
  629|  18.8k|            guard.initialized += 1;
  630|       |        }
  631|    940|        mem::forget(guard);
  632|    940|        Ok(array.assume_init())
  633|       |    }
  634|    940|}
_RNvXs8_Cs8xksezEEkwm_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCs7QDi2znKIpD_10fvm_shared:
  641|    226|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  642|    226|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  643|    226|    }
_RINvCs8xksezEEkwm_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECs7QDi2znKIpD_10fvm_shared:
  615|    226|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  616|    226|where
  617|    226|    F: FnMut(usize) -> Result<T>,
  618|    226|{
  619|    226|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  620|    226|    let array_ptr = array.as_mut_ptr();
  621|    226|    let dst = array_ptr as _;
  622|    226|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  623|    226|        dst,
  624|    226|        initialized: 0,
  625|    226|    };
  626|       |    unsafe {
  627|  10.8k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  628|  10.8k|            core::ptr::write(value_ptr, cb(idx)?);
  629|  10.8k|            guard.initialized += 1;
  630|       |        }
  631|    226|        mem::forget(guard);
  632|    226|        Ok(array.assume_init())
  633|       |    }
  634|    226|}
_RNCNvXs8_Cs8xksezEEkwm_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Cs7QDi2znKIpD_10fvm_shared:
  642|  10.8k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXsL_Cs8xksezEEkwm_9arbitraryyNtB5_9Arbitrary9size_hintCskIOdiUPdE2k_17fvm_ipld_bitfield:
  320|    782|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    782|                    let n = mem::size_of::<$ty>();
  322|    782|                    (n, Some(n))
  323|    782|                }
_RNvXsI_Cs8xksezEEkwm_9arbitraryhNtB5_9Arbitrary9size_hintCskIOdiUPdE2k_17fvm_ipld_bitfield:
  320|    782|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    782|                    let n = mem::size_of::<$ty>();
  322|    782|                    (n, Some(n))
  323|    782|                }
_RNvXs1p_Cs8xksezEEkwm_9arbitraryTyhENtB6_9Arbitrary9size_hintCskIOdiUPdE2k_17fvm_ipld_bitfield:
  587|    782|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  588|    782|                crate::size_hint::and_all(&[
  589|    782|                    <$last as Arbitrary>::size_hint(depth),
  590|    782|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  591|    782|                ])
  592|    782|            }
_RNvXsN_Cs8xksezEEkwm_9arbitraryjNtB5_9Arbitrary9size_hintCskIOdiUPdE2k_17fvm_ipld_bitfield:
  320|    784|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    784|                    let n = mem::size_of::<$ty>();
  322|    784|                    (n, Some(n))
  323|    784|                }
_RNvXs_Cs8xksezEEkwm_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|  10.9k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|  10.9k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|  10.9k|    }
_RNvXsI_Cs8xksezEEkwm_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  57.0k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  57.0k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  57.0k|                    u.fill_buffer(&mut buf)?;
  312|  57.0k|                    let mut x: $unsigned = 0;
  313|  57.0k|                    for i in 0..mem::size_of::<$ty>() {
  314|  57.0k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  57.0k|                    }
  316|  57.0k|                    Ok(x as $ty)
  317|  57.0k|                }
_RNvXsK_Cs8xksezEEkwm_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  7.07k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  7.07k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  7.07k|                    u.fill_buffer(&mut buf)?;
  312|  7.07k|                    let mut x: $unsigned = 0;
  313|  28.3k|                    for i in 0..mem::size_of::<$ty>() {
  314|  28.3k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  28.3k|                    }
  316|  7.07k|                    Ok(x as $ty)
  317|  7.07k|                }
_RNvXsL_Cs8xksezEEkwm_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  10.7k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  10.7k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  10.7k|                    u.fill_buffer(&mut buf)?;
  312|  10.7k|                    let mut x: $unsigned = 0;
  313|  85.8k|                    for i in 0..mem::size_of::<$ty>() {
  314|  85.8k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  85.8k|                    }
  316|  10.7k|                    Ok(x as $ty)
  317|  10.7k|                }

_RNvNtCs8xksezEEkwm_9arbitrary9size_hint6or_allCsk8K9mHYwX82_11cbor_encode:
   57|    392|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   58|    392|    if let Some(head) = hints.first().copied() {
   59|    392|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    392|}
_RNvNtCs8xksezEEkwm_9arbitrary9size_hint7and_allCsk8K9mHYwX82_11cbor_encode:
   37|  5.09k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.09k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.09k|}
_RINvNtCs8xksezEEkwm_9arbitrary9size_hint15recursion_guardNCNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address7payload1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECsk8K9mHYwX82_11cbor_encode:
   12|    392|pub fn recursion_guard(
   13|    392|    depth: usize,
   14|    392|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    392|) -> (usize, Option<usize>) {
   16|    392|    const MAX_DEPTH: usize = 20;
   17|    392|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    392|        f(depth + 1)
   21|       |    }
   22|    392|}
_RINvNtCs8xksezEEkwm_9arbitrary9size_hint15recursion_guardNCNvXNvNtCs7QDi2znKIpD_10fvm_shared7address1__NtB10_7AddressNtB4_9Arbitrary9size_hint0ECsk8K9mHYwX82_11cbor_encode:
   12|    392|pub fn recursion_guard(
   13|    392|    depth: usize,
   14|    392|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    392|) -> (usize, Option<usize>) {
   16|    392|    const MAX_DEPTH: usize = 20;
   17|    392|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    392|        f(depth + 1)
   21|       |    }
   22|    392|}
_RNCNvNtCs8xksezEEkwm_9arbitrary9size_hint2or0Csk8K9mHYwX82_11cbor_encode:
   48|  1.96k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCs8xksezEEkwm_9arbitrary9size_hint3and00Csk8K9mHYwX82_11cbor_encode:
   28|  39.9k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs8xksezEEkwm_9arbitrary9size_hint2orCsk8K9mHYwX82_11cbor_encode:
   44|  1.96k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.96k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.96k|    let upper = lhs
   47|  1.96k|        .1
   48|  1.96k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.96k|    (lower, upper)
   50|  1.96k|}
_RINvNtCs8xksezEEkwm_9arbitrary9size_hint15recursion_guardNCNvXNvNtCsdYd1HzIMaKC_11common_fuzz4cbor1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECsk8K9mHYwX82_11cbor_encode:
   12|    392|pub fn recursion_guard(
   13|    392|    depth: usize,
   14|    392|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    392|) -> (usize, Option<usize>) {
   16|    392|    const MAX_DEPTH: usize = 20;
   17|    392|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    392|        f(depth + 1)
   21|       |    }
   22|    392|}
_RNvNtCs8xksezEEkwm_9arbitrary9size_hint3andCsk8K9mHYwX82_11cbor_encode:
   26|  43.9k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  43.9k|    let lower = lhs.0 + rhs.0;
   28|  43.9k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  43.9k|    (lower, upper)
   30|  43.9k|}
_RNCNCNvNtCs8xksezEEkwm_9arbitrary9size_hint2or00Csk8K9mHYwX82_11cbor_encode:
   48|  1.56k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCs8xksezEEkwm_9arbitrary9size_hint3and0Csk8K9mHYwX82_11cbor_encode:
   28|  41.5k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs8xksezEEkwm_9arbitrary9size_hint7and_allCskIOdiUPdE2k_17fvm_ipld_bitfield:
   37|    782|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    782|    hints.iter().copied().fold((0, Some(0)), and)
   39|    782|}
_RNCNvNtCs8xksezEEkwm_9arbitrary9size_hint3and0CskIOdiUPdE2k_17fvm_ipld_bitfield:
   28|  2.34k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs8xksezEEkwm_9arbitrary9size_hint3andCskIOdiUPdE2k_17fvm_ipld_bitfield:
   26|  2.74k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.74k|    let lower = lhs.0 + rhs.0;
   28|  2.74k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.74k|    (lower, upper)
   30|  2.74k|}
_RNCNCNvNtCs8xksezEEkwm_9arbitrary9size_hint3and00CskIOdiUPdE2k_17fvm_ipld_bitfield:
   28|  1.56k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured3newCsk8K9mHYwX82_11cbor_encode:
   85|    391|    pub fn new(data: &'a [u8]) -> Self {
   86|    391|        Unstructured { data }
   87|    391|    }
_RNvXs9_NtCs8xksezEEkwm_9arbitrary12unstructuredlNtB5_3Int13from_unsignedCsdYd1HzIMaKC_11common_fuzz:
  845|    391|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    391|                    unsigned as Self
  847|    391|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int12wrapping_subCsdYd1HzIMaKC_11common_fuzz:
  837|    300|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    300|                    <$ty>::wrapping_sub(self, rhs)
  839|    300|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured3lenCsdYd1HzIMaKC_11common_fuzz:
  108|    391|    pub fn len(&self) -> usize {
  109|    391|        self.data.len()
  110|    391|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressECsdYd1HzIMaKC_11common_fuzz:
  606|    391|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    391|        &'b mut self,
  608|    391|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    391|        Ok(ArbitraryIter {
  610|    391|            u: &mut *self,
  611|    391|            _marker: PhantomData,
  612|    391|        })
  613|    391|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int7from_u8CsdYd1HzIMaKC_11common_fuzz:
  821|     28|                fn from_u8(b: u8) -> Self {
  822|     28|                    b as Self
  823|     28|                }
_RNvXs_NtCs8xksezEEkwm_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCs7VpJQ1A6NWA_4core4iter6traits8iterator8Iterator4nextCsdYd1HzIMaKC_11common_fuzz:
  720|  3.09k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  3.09k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  3.09k|        if keep_going {
  723|  2.70k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    391|            None
  726|       |        }
  727|  3.09k|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECsdYd1HzIMaKC_11common_fuzz:
  606|    391|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    391|        &'b mut self,
  608|    391|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    391|        Ok(ArbitraryIter {
  610|    391|            u: &mut *self,
  611|    391|            _marker: PhantomData,
  612|    391|        })
  613|    391|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdYd1HzIMaKC_11common_fuzz:
  302|    300|    fn int_in_range_impl<T>(
  303|    300|        range: ops::RangeInclusive<T>,
  304|    300|        mut bytes: impl Iterator<Item = u8>,
  305|    300|    ) -> Result<(T, usize)>
  306|    300|    where
  307|    300|        T: Int,
  308|    300|    {
  309|    300|        let start = *range.start();
  310|    300|        let end = *range.end();
  311|    300|        assert!(
  312|    300|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    300|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    300|        }
  321|    300|
  322|    300|        // From here on out we work with the unsigned representation. All of the
  323|    300|        // operations performed below work out just as well whether or not `T`
  324|    300|        // is a signed or unsigned integer.
  325|    300|        let start = start.to_unsigned();
  326|    300|        let end = end.to_unsigned();
  327|    300|
  328|    300|        let delta = end.wrapping_sub(start);
  329|    300|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    300|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    300|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    328|        while (bytes_consumed < mem::size_of::<T>())
  339|    328|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    300|            let byte = match bytes.next() {
  342|    272|                None => break,
  343|     28|                Some(b) => b,
  344|     28|            };
  345|     28|            bytes_consumed += 1;
  346|     28|
  347|     28|            // Combine this byte into our arbitrary integer, but avoid
  348|     28|            // overflowing the shift for `u8` and `i8`.
  349|     28|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|     28|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    300|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    300|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    300|        let result = start.wrapping_add(offset);
  365|    300|
  366|    300|        // And convert back to our maybe-signed representation.
  367|    300|        let result = T::from_unsigned(result);
  368|    300|        debug_assert!(*range.start() <= result);
  369|    300|        debug_assert!(result <= *range.end());
  370|       |
  371|    300|        Ok((result, bytes_consumed))
  372|    300|    }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int12wrapping_addCsdYd1HzIMaKC_11common_fuzz:
  833|    391|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    391|                    <$ty>::wrapping_add(self, rhs)
  835|    391|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int11to_unsignedCsdYd1HzIMaKC_11common_fuzz:
  841|    600|                fn to_unsigned(self) -> Self::Unsigned {
  842|    600|                    self as $unsigned_ty
  843|    600|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsdYd1HzIMaKC_11common_fuzz:
  302|    391|    fn int_in_range_impl<T>(
  303|    391|        range: ops::RangeInclusive<T>,
  304|    391|        mut bytes: impl Iterator<Item = u8>,
  305|    391|    ) -> Result<(T, usize)>
  306|    391|    where
  307|    391|        T: Int,
  308|    391|    {
  309|    391|        let start = *range.start();
  310|    391|        let end = *range.end();
  311|    391|        assert!(
  312|    391|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    391|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    391|        }
  321|    391|
  322|    391|        // From here on out we work with the unsigned representation. All of the
  323|    391|        // operations performed below work out just as well whether or not `T`
  324|    391|        // is a signed or unsigned integer.
  325|    391|        let start = start.to_unsigned();
  326|    391|        let end = end.to_unsigned();
  327|    391|
  328|    391|        let delta = end.wrapping_sub(start);
  329|    391|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    391|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    391|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    700|        while (bytes_consumed < mem::size_of::<T>())
  339|    700|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    391|            let byte = match bytes.next() {
  342|     82|                None => break,
  343|    309|                Some(b) => b,
  344|    309|            };
  345|    309|            bytes_consumed += 1;
  346|    309|
  347|    309|            // Combine this byte into our arbitrary integer, but avoid
  348|    309|            // overflowing the shift for `u8` and `i8`.
  349|    309|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    309|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    391|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    391|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    391|        let result = start.wrapping_add(offset);
  365|    391|
  366|    391|        // And convert back to our maybe-signed representation.
  367|    391|        let result = T::from_unsigned(result);
  368|    391|        debug_assert!(*range.start() <= result);
  369|    391|        debug_assert!(result <= *range.end());
  370|       |
  371|    391|        Ok((result, bytes_consumed))
  372|    391|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int12wrapping_addCsdYd1HzIMaKC_11common_fuzz:
  833|    300|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    300|                    <$ty>::wrapping_add(self, rhs)
  835|    300|                }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int10from_usizeCsdYd1HzIMaKC_11common_fuzz:
  825|    700|                fn from_usize(u: usize) -> Self {
  826|    700|                    u as Self
  827|    700|                }
_RNvXs9_NtCs8xksezEEkwm_9arbitrary12unstructuredlNtB5_3Int11to_unsignedCsdYd1HzIMaKC_11common_fuzz:
  841|    782|                fn to_unsigned(self) -> Self::Unsigned {
  842|    782|                    self as $unsigned_ty
  843|    782|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECsdYd1HzIMaKC_11common_fuzz:
  167|  1.54k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.54k|    where
  169|  1.54k|        A: Arbitrary<'a>,
  170|  1.54k|    {
  171|  1.54k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.54k|    }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int7from_u8CsdYd1HzIMaKC_11common_fuzz:
  821|    309|                fn from_u8(b: u8) -> Self {
  822|    309|                    b as Self
  823|    309|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCsl4cjb10fdSg_9multihash9multihash9MultihashKj40_EECsdYd1HzIMaKC_11common_fuzz:
  167|    300|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    300|    where
  169|    300|        A: Arbitrary<'a>,
  170|    300|    {
  171|    300|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    300|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int10from_usizeCsdYd1HzIMaKC_11common_fuzz:
  825|    328|                fn from_usize(u: usize) -> Self {
  826|    328|                    u as Self
  827|    328|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECsdYd1HzIMaKC_11common_fuzz:
  483|    391|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  484|    391|    where
  485|    391|        T: Int,
  486|    391|    {
  487|    391|        assert!(T::ZERO < numerator);
  488|    391|        assert!(numerator <= denominator);
  489|    391|        let x = self.int_in_range(T::ONE..=denominator)?;
  490|    391|        Ok(x <= numerator)
  491|    391|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int13from_unsignedCsdYd1HzIMaKC_11common_fuzz:
  845|    300|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    300|                    unsigned as Self
  847|    300|                }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int12wrapping_subCsdYd1HzIMaKC_11common_fuzz:
  837|    391|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    391|                    <$ty>::wrapping_sub(self, rhs)
  839|    391|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsdYd1HzIMaKC_11common_fuzz:
  132|    391|    pub fn is_empty(&self) -> bool {
  133|    391|        self.len() == 0
  134|    391|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECsdYd1HzIMaKC_11common_fuzz:
  293|    300|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    300|    where
  295|    300|        T: Int,
  296|    300|    {
  297|    300|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    300|        self.data = &self.data[bytes_consumed..];
  299|    300|        Ok(result)
  300|    300|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECsdYd1HzIMaKC_11common_fuzz:
  167|  10.1k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  10.1k|    where
  169|  10.1k|        A: Arbitrary<'a>,
  170|  10.1k|    {
  171|  10.1k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  10.1k|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsdYd1HzIMaKC_11common_fuzz:
  293|    391|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    391|    where
  295|    391|        T: Int,
  296|    391|    {
  297|    391|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    391|        self.data = &self.data[bytes_consumed..];
  299|    391|        Ok(result)
  300|    391|    }
_RNvXs_NtCs8xksezEEkwm_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtNtNtNtCs7VpJQ1A6NWA_4core4iter6traits8iterator8Iterator4nextCsdYd1HzIMaKC_11common_fuzz:
  720|  7.07k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  7.07k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  7.07k|        if keep_going {
  723|  6.68k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    391|            None
  726|       |        }
  727|  7.07k|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECs7QDi2znKIpD_10fvm_shared:
  293|  1.62k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  1.62k|    where
  295|  1.62k|        T: Int,
  296|  1.62k|    {
  297|  1.62k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  1.62k|        self.data = &self.data[bytes_consumed..];
  299|  1.62k|        Ok(result)
  300|  1.62k|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs7QDi2znKIpD_10fvm_shared:
  302|  1.62k|    fn int_in_range_impl<T>(
  303|  1.62k|        range: ops::RangeInclusive<T>,
  304|  1.62k|        mut bytes: impl Iterator<Item = u8>,
  305|  1.62k|    ) -> Result<(T, usize)>
  306|  1.62k|    where
  307|  1.62k|        T: Int,
  308|  1.62k|    {
  309|  1.62k|        let start = *range.start();
  310|  1.62k|        let end = *range.end();
  311|  1.62k|        assert!(
  312|  1.62k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  1.62k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  1.62k|        }
  321|  1.62k|
  322|  1.62k|        // From here on out we work with the unsigned representation. All of the
  323|  1.62k|        // operations performed below work out just as well whether or not `T`
  324|  1.62k|        // is a signed or unsigned integer.
  325|  1.62k|        let start = start.to_unsigned();
  326|  1.62k|        let end = end.to_unsigned();
  327|  1.62k|
  328|  1.62k|        let delta = end.wrapping_sub(start);
  329|  1.62k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  1.62k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  1.62k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  3.25k|        while (bytes_consumed < mem::size_of::<T>())
  339|  3.25k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  1.62k|            let byte = match bytes.next() {
  342|      2|                None => break,
  343|  1.62k|                Some(b) => b,
  344|  1.62k|            };
  345|  1.62k|            bytes_consumed += 1;
  346|  1.62k|
  347|  1.62k|            // Combine this byte into our arbitrary integer, but avoid
  348|  1.62k|            // overflowing the shift for `u8` and `i8`.
  349|  1.62k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  1.62k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  1.62k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  1.62k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  1.62k|        let result = start.wrapping_add(offset);
  365|  1.62k|
  366|  1.62k|        // And convert back to our maybe-signed representation.
  367|  1.62k|        let result = T::from_unsigned(result);
  368|  1.62k|        debug_assert!(*range.start() <= result);
  369|  1.62k|        debug_assert!(result <= *range.end());
  370|       |
  371|  1.62k|        Ok((result, bytes_consumed))
  372|  1.62k|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int7from_u8Cs7QDi2znKIpD_10fvm_shared:
  821|  1.62k|                fn from_u8(b: u8) -> Self {
  822|  1.62k|                    b as Self
  823|  1.62k|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured3lenCs7QDi2znKIpD_10fvm_shared:
  108|  14.1k|    pub fn len(&self) -> usize {
  109|  14.1k|        self.data.len()
  110|  14.1k|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int12wrapping_addCs7QDi2znKIpD_10fvm_shared:
  833|  1.62k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  1.62k|                    <$ty>::wrapping_add(self, rhs)
  835|  1.62k|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int11to_unsignedCs7QDi2znKIpD_10fvm_shared:
  841|  3.25k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  3.25k|                    self as $unsigned_ty
  843|  3.25k|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int10from_usizeCs7QDi2znKIpD_10fvm_shared:
  825|  3.25k|                fn from_usize(u: usize) -> Self {
  826|  3.25k|                    u as Self
  827|  3.25k|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int12wrapping_subCs7QDi2znKIpD_10fvm_shared:
  837|  1.62k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  1.62k|                    <$ty>::wrapping_sub(self, rhs)
  839|  1.62k|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int13from_unsignedCs7QDi2znKIpD_10fvm_shared:
  845|  1.62k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  1.62k|                    unsigned as Self
  847|  1.62k|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs7QDi2znKIpD_10fvm_shared:
  132|  14.1k|    pub fn is_empty(&self) -> bool {
  133|  14.1k|        self.len() == 0
  134|  14.1k|    }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int10from_usizeCskIOdiUPdE2k_17fvm_ipld_bitfield:
  825|  8.87k|                fn from_usize(u: usize) -> Self {
  826|  8.87k|                    u as Self
  827|  8.87k|                }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int12wrapping_subCskIOdiUPdE2k_17fvm_ipld_bitfield:
  837|  4.43k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  4.43k|                    <$ty>::wrapping_sub(self, rhs)
  839|  4.43k|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured6choosebECskIOdiUPdE2k_17fvm_ipld_bitfield:
  408|    391|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  409|    391|        let idx = self.choose_index(choices.len())?;
  410|    391|        Ok(&choices[idx])
  411|    391|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECskIOdiUPdE2k_17fvm_ipld_bitfield:
  213|    782|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    782|    where
  215|    782|        ElementType: Arbitrary<'a>,
  216|    782|    {
  217|    782|        let byte_size = self.arbitrary_byte_size()?;
  218|    782|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    782|        let elem_size = upper.unwrap_or(lower * 2);
  220|    782|        let elem_size = std::cmp::max(1, elem_size);
  221|    782|        Ok(byte_size / elem_size)
  222|    782|    }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int7from_u8CskIOdiUPdE2k_17fvm_ipld_bitfield:
  821|  4.43k|                fn from_u8(b: u8) -> Self {
  822|  4.43k|                    b as Self
  823|  4.43k|                }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int12wrapping_addCskIOdiUPdE2k_17fvm_ipld_bitfield:
  833|  4.43k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  4.43k|                    <$ty>::wrapping_add(self, rhs)
  835|  4.43k|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECskIOdiUPdE2k_17fvm_ipld_bitfield:
  293|  4.43k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  4.43k|    where
  295|  4.43k|        T: Int,
  296|  4.43k|    {
  297|  4.43k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  4.43k|        self.data = &self.data[bytes_consumed..];
  299|  4.43k|        Ok(result)
  300|  4.43k|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECskIOdiUPdE2k_17fvm_ipld_bitfield:
  302|  4.43k|    fn int_in_range_impl<T>(
  303|  4.43k|        range: ops::RangeInclusive<T>,
  304|  4.43k|        mut bytes: impl Iterator<Item = u8>,
  305|  4.43k|    ) -> Result<(T, usize)>
  306|  4.43k|    where
  307|  4.43k|        T: Int,
  308|  4.43k|    {
  309|  4.43k|        let start = *range.start();
  310|  4.43k|        let end = *range.end();
  311|  4.43k|        assert!(
  312|  4.43k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  4.43k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  4.43k|        }
  321|  4.43k|
  322|  4.43k|        // From here on out we work with the unsigned representation. All of the
  323|  4.43k|        // operations performed below work out just as well whether or not `T`
  324|  4.43k|        // is a signed or unsigned integer.
  325|  4.43k|        let start = start.to_unsigned();
  326|  4.43k|        let end = end.to_unsigned();
  327|  4.43k|
  328|  4.43k|        let delta = end.wrapping_sub(start);
  329|  4.43k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  4.43k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  4.43k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  8.87k|        while (bytes_consumed < mem::size_of::<T>())
  339|  8.87k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  4.43k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  4.43k|                Some(b) => b,
  344|  4.43k|            };
  345|  4.43k|            bytes_consumed += 1;
  346|  4.43k|
  347|  4.43k|            // Combine this byte into our arbitrary integer, but avoid
  348|  4.43k|            // overflowing the shift for `u8` and `i8`.
  349|  4.43k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  4.43k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  4.43k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  4.43k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  4.43k|        let result = start.wrapping_add(offset);
  365|  4.43k|
  366|  4.43k|        // And convert back to our maybe-signed representation.
  367|  4.43k|        let result = T::from_unsigned(result);
  368|  4.43k|        debug_assert!(*range.start() <= result);
  369|  4.43k|        debug_assert!(result <= *range.end());
  370|       |
  371|  4.43k|        Ok((result, bytes_consumed))
  372|  4.43k|    }
_RNvXs9_NtCs8xksezEEkwm_9arbitrary12unstructuredlNtB5_3Int11to_unsignedCskIOdiUPdE2k_17fvm_ipld_bitfield:
  841|  8.87k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  8.87k|                    self as $unsigned_ty
  843|  8.87k|                }
_RNvXs9_NtCs8xksezEEkwm_9arbitrary12unstructuredlNtB5_3Int13from_unsignedCskIOdiUPdE2k_17fvm_ipld_bitfield:
  845|  4.43k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  4.43k|                    unsigned as Self
  847|  4.43k|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCskIOdiUPdE2k_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    391|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    391|    where
  169|    391|        A: Arbitrary<'a>,
  170|    391|    {
  171|    391|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    391|    }
_RNvXs1_NtCs8xksezEEkwm_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  841|  1.20k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  1.20k|                    self as $unsigned_ty
  843|  1.20k|                }
_RNvXs2_NtCs8xksezEEkwm_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  841|    108|                fn to_unsigned(self) -> Self::Unsigned {
  842|    108|                    self as $unsigned_ty
  843|    108|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int7from_u8B7_:
  821|    319|                fn from_u8(b: u8) -> Self {
  822|    319|                    b as Self
  823|    319|                }
_RNvXs2_NtCs8xksezEEkwm_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  833|     54|                fn wrapping_add(self, rhs: Self) -> Self {
  834|     54|                    <$ty>::wrapping_add(self, rhs)
  835|     54|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    391|    fn int_in_range_impl<T>(
  303|    391|        range: ops::RangeInclusive<T>,
  304|    391|        mut bytes: impl Iterator<Item = u8>,
  305|    391|    ) -> Result<(T, usize)>
  306|    391|    where
  307|    391|        T: Int,
  308|    391|    {
  309|    391|        let start = *range.start();
  310|    391|        let end = *range.end();
  311|    391|        assert!(
  312|    391|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    391|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    391|        }
  321|    391|
  322|    391|        // From here on out we work with the unsigned representation. All of the
  323|    391|        // operations performed below work out just as well whether or not `T`
  324|    391|        // is a signed or unsigned integer.
  325|    391|        let start = start.to_unsigned();
  326|    391|        let end = end.to_unsigned();
  327|    391|
  328|    391|        let delta = end.wrapping_sub(start);
  329|    391|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    391|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    391|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    710|        while (bytes_consumed < mem::size_of::<T>())
  339|    710|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    391|            let byte = match bytes.next() {
  342|     72|                None => break,
  343|    319|                Some(b) => b,
  344|    319|            };
  345|    319|            bytes_consumed += 1;
  346|    319|
  347|    319|            // Combine this byte into our arbitrary integer, but avoid
  348|    319|            // overflowing the shift for `u8` and `i8`.
  349|    319|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    319|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    391|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    391|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    391|        let result = start.wrapping_add(offset);
  365|    391|
  366|    391|        // And convert back to our maybe-signed representation.
  367|    391|        let result = T::from_unsigned(result);
  368|    391|        debug_assert!(*range.start() <= result);
  369|    391|        debug_assert!(result <= *range.end());
  370|       |
  371|    391|        Ok((result, bytes_consumed))
  372|    391|    }
_RNvXs1_NtCs8xksezEEkwm_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  825|    604|                fn from_usize(u: usize) -> Self {
  826|    604|                    u as Self
  827|    604|                }
_RNvXs2_NtCs8xksezEEkwm_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  825|    108|                fn from_usize(u: usize) -> Self {
  826|    108|                    u as Self
  827|    108|                }
_RNvXs1_NtCs8xksezEEkwm_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  845|    604|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    604|                    unsigned as Self
  847|    604|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  829|  2.32k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  2.32k|                    <$ty>::checked_add(self, rhs)
  831|  2.32k|                }
_RNvXs1_NtCs8xksezEEkwm_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  837|    604|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    604|                    <$ty>::wrapping_sub(self, rhs)
  839|    604|                }
_RNvXs2_NtCs8xksezEEkwm_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  837|     54|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|     54|                    <$ty>::wrapping_sub(self, rhs)
  839|     54|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    604|    fn int_in_range_impl<T>(
  303|    604|        range: ops::RangeInclusive<T>,
  304|    604|        mut bytes: impl Iterator<Item = u8>,
  305|    604|    ) -> Result<(T, usize)>
  306|    604|    where
  307|    604|        T: Int,
  308|    604|    {
  309|    604|        let start = *range.start();
  310|    604|        let end = *range.end();
  311|    604|        assert!(
  312|    604|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    604|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    604|        }
  321|    604|
  322|    604|        // From here on out we work with the unsigned representation. All of the
  323|    604|        // operations performed below work out just as well whether or not `T`
  324|    604|        // is a signed or unsigned integer.
  325|    604|        let start = start.to_unsigned();
  326|    604|        let end = end.to_unsigned();
  327|    604|
  328|    604|        let delta = end.wrapping_sub(start);
  329|    604|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    604|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    604|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  1.20k|        while (bytes_consumed < mem::size_of::<T>())
  339|    604|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    604|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    604|                Some(b) => b,
  344|    604|            };
  345|    604|            bytes_consumed += 1;
  346|    604|
  347|    604|            // Combine this byte into our arbitrary integer, but avoid
  348|    604|            // overflowing the shift for `u8` and `i8`.
  349|    604|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|    604|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    604|        let offset = if delta == T::Unsigned::MAX {
  357|      1|            arbitrary_int
  358|       |        } else {
  359|    603|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    604|        let result = start.wrapping_add(offset);
  365|    604|
  366|    604|        // And convert back to our maybe-signed representation.
  367|    604|        let result = T::from_unsigned(result);
  368|    604|        debug_assert!(*range.start() <= result);
  369|    604|        debug_assert!(result <= *range.end());
  370|       |
  371|    604|        Ok((result, bytes_consumed))
  372|    604|    }
_RNvXs1_NtCs8xksezEEkwm_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  821|    604|                fn from_u8(b: u8) -> Self {
  822|    604|                    b as Self
  823|    604|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int12wrapping_addB7_:
  833|    391|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    391|                    <$ty>::wrapping_add(self, rhs)
  835|    391|                }
_RNvXs2_NtCs8xksezEEkwm_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  845|     54|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|     54|                    unsigned as Self
  847|     54|                }
_RNvXs1_NtCs8xksezEEkwm_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  833|    604|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    604|                    <$ty>::wrapping_add(self, rhs)
  835|    604|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|    391|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|    391|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|    391|        }
  454|    391|        let idx = self.int_in_range(0..=len - 1)?;
  455|    391|        Ok(idx)
  456|    391|    }
_RNvXs1_NtCs8xksezEEkwm_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|    603|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|    603|                    <$ty>::checked_add(self, rhs)
  831|    603|                }
_RNvXs2_NtCs8xksezEEkwm_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  829|     54|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|     54|                    <$ty>::checked_add(self, rhs)
  831|     54|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int11to_unsignedB7_:
  841|    782|                fn to_unsigned(self) -> Self::Unsigned {
  842|    782|                    self as $unsigned_ty
  843|    782|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  74.9k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  74.9k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  74.9k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  74.9k|        for byte in buffer[n..].iter_mut() {
  525|  2.58k|            *byte = 0;
  526|  2.58k|        }
  527|  74.9k|        self.data = &self.data[n..];
  528|  74.9k|        Ok(())
  529|  74.9k|    }
_RNvXs2_NtCs8xksezEEkwm_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  821|    107|                fn from_u8(b: u8) -> Self {
  822|    107|                    b as Self
  823|    107|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|    391|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|    391|        if self.data.len() < size {
  550|     84|            return Err(Error::NotEnoughData);
  551|    307|        }
  552|    307|
  553|    307|        let (for_buf, rest) = self.data.split_at(size);
  554|    307|        self.data = rest;
  555|    307|        Ok(for_buf)
  556|    391|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int10from_usizeB7_:
  825|    710|                fn from_usize(u: usize) -> Self {
  826|    710|                    u as Self
  827|    710|                }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int13from_unsignedB7_:
  845|    391|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    391|                    unsigned as Self
  847|    391|                }
_RNvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    782|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    782|        if self.data.is_empty() {
  226|    122|            Ok(0)
  227|    660|        } else if self.data.len() == 1 {
  228|      2|            self.data = &[];
  229|      2|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    658|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    604|                let bytes = 1;
  242|    604|                let max_size = self.data.len() - bytes;
  243|    604|                let (rest, for_size) = self.data.split_at(max_size);
  244|    604|                self.data = rest;
  245|    604|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|     54|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|     54|                let bytes = 2;
  248|     54|                let max_size = self.data.len() - bytes;
  249|     54|                let (rest, for_size) = self.data.split_at(max_size);
  250|     54|                self.data = rest;
  251|     54|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    658|            Ok(len)
  267|       |        }
  268|    782|    }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|     54|    fn int_in_range_impl<T>(
  303|     54|        range: ops::RangeInclusive<T>,
  304|     54|        mut bytes: impl Iterator<Item = u8>,
  305|     54|    ) -> Result<(T, usize)>
  306|     54|    where
  307|     54|        T: Int,
  308|     54|    {
  309|     54|        let start = *range.start();
  310|     54|        let end = *range.end();
  311|     54|        assert!(
  312|     54|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|     54|        if start == end {
  319|      0|            return Ok((start, 0));
  320|     54|        }
  321|     54|
  322|     54|        // From here on out we work with the unsigned representation. All of the
  323|     54|        // operations performed below work out just as well whether or not `T`
  324|     54|        // is a signed or unsigned integer.
  325|     54|        let start = start.to_unsigned();
  326|     54|        let end = end.to_unsigned();
  327|     54|
  328|     54|        let delta = end.wrapping_sub(start);
  329|     54|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|     54|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|     54|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    161|        while (bytes_consumed < mem::size_of::<T>())
  339|    108|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    107|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    107|                Some(b) => b,
  344|    107|            };
  345|    107|            bytes_consumed += 1;
  346|    107|
  347|    107|            // Combine this byte into our arbitrary integer, but avoid
  348|    107|            // overflowing the shift for `u8` and `i8`.
  349|    107|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    107|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|     54|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|     54|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|     54|        let result = start.wrapping_add(offset);
  365|     54|
  366|     54|        // And convert back to our maybe-signed representation.
  367|     54|        let result = T::from_unsigned(result);
  368|     54|        debug_assert!(*range.start() <= result);
  369|     54|        debug_assert!(result <= *range.end());
  370|       |
  371|     54|        Ok((result, bytes_consumed))
  372|     54|    }
_RNvXs6_NtCs8xksezEEkwm_9arbitrary12unstructuredjNtB5_3Int12wrapping_subB7_:
  837|    391|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    391|                    <$ty>::wrapping_sub(self, rhs)
  839|    391|                }
_RNvXs3_NtCs8xksezEEkwm_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  829|  4.82k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  4.82k|                    <$ty>::checked_add(self, rhs)
  831|  4.82k|                }
_RINvMNtCs8xksezEEkwm_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|    391|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    391|    where
  295|    391|        T: Int,
  296|    391|    {
  297|    391|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    391|        self.data = &self.data[bytes_consumed..];
  299|    391|        Ok(result)
  300|    391|    }

_RINvYyNtNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
   73|    307|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    307|        let byte = pull_one(reader)?;
   75|    307|        Self::decode_with(byte, reader)
   76|    307|    }
_RINvYNtNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
   73|    307|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    307|        let byte = pull_one(reader)?;
   75|    307|        Self::decode_with(byte, reader)
   76|    307|    }
_RINvYINtNtNtCs4ij4ozp0qFN_7cbor4ii4core5types5BytesINtNtCs3RmiOPDzQOT_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
   73|  7.72k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  7.72k|        let byte = pull_one(reader)?;
   75|  7.72k|        Self::decode_with(byte, reader)
   76|  7.72k|    }
_RINvXss_NtNtCs4ij4ozp0qFN_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  256|    307|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    307|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    307|                }
_RINvXs5_NtNtCs4ij4ozp0qFN_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs3RmiOPDzQOT_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  510|  7.72k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  7.72k|        use crate::alloc::borrow::Cow;
  512|  7.72k|
  513|  7.72k|        let mut buf = Vec::new();
  514|  7.72k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  7.72k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|      0|            Cow::Owned(buf)
  518|       |        }))
  519|  7.72k|    }
_RINvXsc_NtNtCs4ij4ozp0qFN_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  615|    614|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|    614|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|    614|    }
_RINvNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  431|  7.72k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  7.72k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  7.72k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  7.72k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  7.72k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  7.72k|            if buf.len() >= len {
  440|  7.72k|                reader.advance(len);
  441|  7.72k|                return Ok(Some(&buf[..len]));
  442|      0|            }
  443|      0|        }
  444|       |
  445|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|      0|        while len != 0 {
  448|      0|            let readbuf = reader.fill(len)?;
  449|      0|            let readbuf = readbuf.as_ref();
  450|      0|
  451|      0|            if readbuf.is_empty() {
  452|      0|                return Err(Error::Eof);
  453|      0|            }
  454|      0|
  455|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      0|
  457|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      0|            reader.advance(readlen);
  459|      0|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|      0|            let byte = pull_one(reader)?;
  467|       |
  468|      0|            if byte == marker::BREAK {
  469|      0|                break
  470|      0|            }
  471|      0|
  472|      0|            if !reader.step_in() {
  473|      0|                return Err(Error::DepthLimit);
  474|      0|            }
  475|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|      0|            let reader = &mut *reader;
  477|       |
  478|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|      0|                buf.extend_from_slice(longbuf);
  480|      0|            }
  481|       |        }
  482|       |
  483|      0|        Ok(None)
  484|       |    }
  485|  7.72k|}
_RINvNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  136|    311|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    622|    while !buf.is_empty() {
  138|    311|        let readbuf = reader.fill(buf.len())?;
  139|    311|        let readbuf = readbuf.as_ref();
  140|    311|
  141|    311|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    311|        }
  144|    311|
  145|    311|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    311|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    311|        reader.advance(len);
  148|    311|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    311|    Ok(())
  152|    311|}
_RNvMNtNtCs4ij4ozp0qFN_7cbor4ii4core3decNtB2_9Reference6as_refCsk8K9mHYwX82_11cbor_encode:
   81|  10.1k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  10.1k|        match self {
   83|  10.1k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  10.1k|    }
_RINvYNtNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
   73|    614|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    614|        let byte = pull_one(reader)?;
   75|    614|        Self::decode_with(byte, reader)
   76|    614|    }
_RNvNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec8if_majorCsk8K9mHYwX82_11cbor_encode:
  894|    307|pub fn if_major(byte: u8) -> u8 {
  895|    307|    byte >> 5
  896|    307|}
_RINvNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  125|  9.80k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  9.80k|    let b = reader.fill(1)?
  127|  9.80k|        .as_ref()
  128|  9.80k|        .get(0)
  129|  9.80k|        .copied()
  130|  9.80k|        .ok_or(Error::Eof)?;
  131|  9.80k|    reader.advance(1);
  132|  9.80k|    Ok(b)
  133|  9.80k|}
_RINvXsg_NtNtCs4ij4ozp0qFN_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  707|    307|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    307|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    307|    }
_RINvMs0_NtNtCs4ij4ozp0qFN_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  227|  8.95k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  8.95k|        match self.byte & self.major_limit {
  229|  8.95k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|    852|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|     31|                let mut buf = [0; 2];
  233|     31|                pull_exact(reader, &mut buf)?;
  234|     31|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|     20|                let mut buf = [0; 4];
  238|     20|                pull_exact(reader, &mut buf)?;
  239|     20|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    260|                let mut buf = [0; 8];
  243|    260|                pull_exact(reader, &mut buf)?;
  244|    260|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  8.95k|    }
_RNvMs0_NtNtCs4ij4ozp0qFN_7cbor4ii4core3decNtB5_7TypeNum3newCsk8K9mHYwX82_11cbor_encode:
  179|  8.95k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  8.95k|        TypeNum { major_limit, byte }
  181|  8.95k|    }
_RINvNtNtCs4ij4ozp0qFN_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
  599|  8.34k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  8.34k|    -> Result<Option<usize>, Error<R::Error>>
  601|  8.34k|{
  602|  8.34k|    if byte != (marker::START | (major << 5)) {
  603|  8.34k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  8.34k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  8.34k|        Ok(Some(len))
  606|       |    } else {
  607|      0|        Ok(None)
  608|       |    }
  609|  8.34k|}

_RNvMs0_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB5_7TypeNumtE3newCsk8K9mHYwX82_11cbor_encode:
   52|  17.3k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  17.3k|        TypeNum { type_, value }
   54|  17.3k|    }
_RINvXs7_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
  208|  15.4k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  209|  15.4k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  15.4k|        writer.push(self.0)?;
  211|  15.4k|        Ok(())
  212|  15.4k|    }
_RNvMs0_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB5_7TypeNumhE3newCsk8K9mHYwX82_11cbor_encode:
   52|  17.2k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  17.2k|        TypeNum { type_, value }
   54|  17.2k|    }
_RNvMs0_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB5_7TypeNumyE3newCsk8K9mHYwX82_11cbor_encode:
   52|  17.9k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  17.9k|        TypeNum { type_, value }
   54|  17.9k|    }
_RINvXs3_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
   84|  17.3k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  17.3k|        match u16::try_from(self.value) {
   86|  17.3k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     40|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     40|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  17.3k|        Ok(())
   93|  17.3k|    }
_RINvXs4_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
   98|  17.9k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  17.9k|        match u32::try_from(self.value) {
  100|  17.3k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    520|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    520|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  17.9k|        Ok(())
  107|  17.9k|    }
_RINvXsi_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
  316|    614|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  317|    614|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    614|        self.1.encode(writer)
  319|    614|    }
_RNvMs0_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB5_7TypeNummE3newCsk8K9mHYwX82_11cbor_encode:
   52|  17.3k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  17.3k|        TypeNum { type_, value }
   54|  17.3k|    }
_RINvXsu_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
  159|    614|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    614|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    614|                }
_RINvXsd_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
  269|  1.22k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  270|  1.22k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.22k|        Ok(())
  272|  1.22k|    }
_RINvXs1_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
   59|  17.2k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  17.2k|        match self.value {
   61|  17.2k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.70k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  17.2k|        Ok(())
   65|  17.2k|    }
_RINvXs2_NtNtCs4ij4ozp0qFN_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsk8K9mHYwX82_11cbor_encode:
   70|  17.3k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  17.3k|        match u8::try_from(self.value) {
   72|  17.2k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     62|                let [x0, x1] = self.value.to_be_bytes();
   75|     62|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  17.3k|        Ok(())
   79|  17.3k|    }

_RNvMNtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB2_9BufWriter3newCsk8K9mHYwX82_11cbor_encode:
   14|    614|    pub fn new(buf: Vec<u8>) -> Self {
   15|    614|       BufWriter(buf)
   16|    614|    }
_RNvXs1_NtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsk8K9mHYwX82_11cbor_encode:
   74|    614|    fn step_in(&mut self) -> bool {
   75|    614|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    614|            self.limit = limit;
   77|    614|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    614|    }
_RNvXs1_NtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsk8K9mHYwX82_11cbor_encode:
   84|    614|    fn step_out(&mut self) {
   85|    614|        self.limit += 1;
   86|    614|    }
_RNvXs1_NtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsk8K9mHYwX82_11cbor_encode:
   62|  18.4k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  18.4k|        let len = core::cmp::min(self.buf.len(), want);
   64|  18.4k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  18.4k|    }
_RNvXs_NtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsk8K9mHYwX82_11cbor_encode:
   39|  33.3k|    fn push(&mut self, input: &[u8]) -> Result<(), Self::Error> {
   40|  33.3k|        self.0.try_reserve(input.len())?;
   41|  33.3k|        self.0.extend_from_slice(input);
   42|  33.3k|        Ok(())
   43|  33.3k|    }
_RNvMNtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB2_9BufWriter10into_innerCsk8K9mHYwX82_11cbor_encode:
   24|    614|    pub fn into_inner(self) -> Vec<u8> {
   25|    614|        self.0
   26|    614|    }
_RNvMs0_NtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB5_11SliceReader3newCsk8K9mHYwX82_11cbor_encode:
   53|    307|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    307|        SliceReader { buf, limit: 256 }
   55|    307|    }
_RNvXs1_NtNtCs4ij4ozp0qFN_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsk8K9mHYwX82_11cbor_encode:
   68|  17.8k|    fn advance(&mut self, n: usize) {
   69|  17.8k|        let len = core::cmp::min(self.buf.len(), n);
   70|  17.8k|        self.buf = &self.buf[len..];
   71|  17.8k|    }

_RNvXs0_NtCsk5wu2A8Zzd4_3cid3arbINtNtB7_3cid3CidKj40_ENtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
   85|    392|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   86|    392|        let v1 = size_hint::and_all(&[
   87|    392|            <[u8; 2]>::size_hint(depth),
   88|    392|            (0, Some(8)),
   89|    392|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   90|    392|        ]);
   91|    392|        if S >= 32 {
   92|    392|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   93|       |        } else {
   94|      0|            v1
   95|       |        }
   96|    392|    }
_RNvXs0_NtCsk5wu2A8Zzd4_3cid3arbINtNtB7_3cid3CidKj40_ENtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitraryCsdYd1HzIMaKC_11common_fuzz:
   58|    391|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   59|    391|        if S >= 32 && u.ratio(1, 10)? {
   60|     91|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   61|      8|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   62|    300|        }
   63|    300|
   64|    300|        let mut codec = 0u64;
   65|    300|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   66|       |
   67|    823|        while len_choice & 1 == 1 {
   68|    523|            len_choice >>= 1;
   69|    523|
   70|    523|            let x = u.arbitrary::<u8>();
   71|    523|            let next = codec
   72|    523|                .checked_shl(8)
   73|    523|                .zip(x.ok())
   74|    523|                .map(|(next, x)| next.saturating_add(x as u64));
   75|    523|
   76|    523|            match next {
   77|      0|                None => break,
   78|    523|                Some(next) => codec = next,
   79|       |            }
   80|       |        }
   81|       |
   82|    300|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   83|    391|    }
_RNCNvXs0_NtCsk5wu2A8Zzd4_3cid3arbINtNtB9_3cid3CidKj40_ENtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary0CsdYd1HzIMaKC_11common_fuzz:
   74|    523|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvMNtCsk5wu2A8Zzd4_3cid3cidINtB2_3CidKj40_E3newCsk8K9mHYwX82_11cbor_encode:
   99|    299|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    299|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    299|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    299|    }
_RINvMNtCsk5wu2A8Zzd4_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsk8K9mHYwX82_11cbor_encode:
  140|    307|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    307|        let version = varint_read_u64(&mut r)?;
  142|    307|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    307|        if [version, codec] == [0x12, 0x20] {
  146|      8|            let mut digest = [0u8; 32];
  147|      8|            r.read_exact(&mut digest)?;
  148|      8|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|      8|            return Self::new_v0(mh);
  150|    299|        }
  151|       |
  152|    299|        let version = Version::try_from(version)?;
  153|    299|        match version {
  154|      0|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    299|                let mh = Multihash::read(r)?;
  157|    299|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    307|    }
_RNvMNtCsk5wu2A8Zzd4_3cid3cidINtB2_3CidKj40_E6new_v1Csk8K9mHYwX82_11cbor_encode:
   90|    299|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    299|        Self {
   92|    299|            version: Version::V1,
   93|    299|            codec,
   94|    299|            hash,
   95|    299|        }
   96|    299|    }
_RINvMNtCsk5wu2A8Zzd4_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs3RmiOPDzQOT_5alloc3vec3VechEECsk8K9mHYwX82_11cbor_encode:
  179|    614|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    614|        let written = match self.version {
  181|     16|            Version::V0 => self.hash.write(w)?,
  182|    598|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    614|        Ok(written)
  185|    614|    }
_RNvMNtCsk5wu2A8Zzd4_3cid3cidINtB2_3CidKj40_E6new_v0Csk8K9mHYwX82_11cbor_encode:
   78|      8|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      8|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      8|        }
   82|      8|        Ok(Self {
   83|      8|            version: Version::V0,
   84|      8|            codec: DAG_PB,
   85|      8|            hash,
   86|      8|        })
   87|      8|    }
_RINvMNtCsk5wu2A8Zzd4_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs3RmiOPDzQOT_5alloc3vec3VechEECsk8K9mHYwX82_11cbor_encode:
  162|    598|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    598|        let mut version_buf = varint_encode::u64_buffer();
  164|    598|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    598|
  166|    598|        let mut codec_buf = varint_encode::u64_buffer();
  167|    598|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    598|
  169|    598|        let mut written = version.len() + codec.len();
  170|    598|
  171|    598|        w.write_all(version)?;
  172|    598|        w.write_all(codec)?;
  173|    598|        written += self.hash.write(&mut w)?;
  174|       |
  175|    598|        Ok(written)
  176|    598|    }
_RNvXs6_NtCsk5wu2A8Zzd4_3cid3cidINtB5_3CidKj40_EINtNtCs7VpJQ1A6NWA_4core7convert7TryFromRShE8try_fromCsk8K9mHYwX82_11cbor_encode:
  353|    307|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    307|        Self::read_bytes(&mut bytes)
  355|    307|    }
_RNvMNtCsk5wu2A8Zzd4_3cid3cidINtB2_3CidKj40_E8to_bytesCsk8K9mHYwX82_11cbor_encode:
  205|    614|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    614|        let mut bytes = Vec::new();
  207|    614|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    614|        debug_assert_eq!(written, bytes.len());
  209|    614|        bytes
  210|    614|    }
_RNvMNtCsk5wu2A8Zzd4_3cid3cidINtB2_3CidKj40_E6new_v0CsdYd1HzIMaKC_11common_fuzz:
   78|      8|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      8|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      8|        }
   82|      8|        Ok(Self {
   83|      8|            version: Version::V0,
   84|      8|            codec: DAG_PB,
   85|      8|            hash,
   86|      8|        })
   87|      8|    }
_RNvMNtCsk5wu2A8Zzd4_3cid3cidINtB2_3CidKj40_E6new_v1CsdYd1HzIMaKC_11common_fuzz:
   90|    299|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    299|        Self {
   92|    299|            version: Version::V1,
   93|    299|            codec,
   94|    299|            hash,
   95|    299|        }
   96|    299|    }

_RINvXs0_NtCsk5wu2A8Zzd4_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   79|    307|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    307|    where
   81|    307|        D: de::Deserializer<'de>,
   82|    307|    {
   83|    307|        /// Main visitor to deserialize a CID.
   84|    307|        ///
   85|    307|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    307|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    307|        /// to bytes.
   88|    307|        struct MainEntryVisitor<const SIZE: usize>;
   89|    307|
   90|    307|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    307|            type Value = CidGeneric<SIZE>;
   92|    307|
   93|    307|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    307|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    307|            }
   96|    307|
   97|    307|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    307|            where
   99|    307|                D: de::Deserializer<'de>,
  100|    307|            {
  101|    307|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    307|            }
  103|    307|        }
  104|    307|
  105|    307|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    307|    }
_RINvXs_NtCsk5wu2A8Zzd4_3cid5serdeNtB5_17BytesToCidVisitorNtNtCshBvvHAE2XbG_5serde2de7Visitor11visit_bytesINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7VpJQ1A6NWA_4core7convert10InfallibleEECsk8K9mHYwX82_11cbor_encode:
   48|    307|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    307|    where
   50|    307|        E: de::Error,
   51|    307|    {
   52|    307|        CidGeneric::<SIZE>::try_from(value)
   53|    307|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    307|    }
_RINvXNtCsk5wu2A8Zzd4_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCshBvvHAE2XbG_5serde3ser9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   29|    614|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    614|    where
   31|    614|        S: ser::Serializer,
   32|    614|    {
   33|    614|        let value = ByteBuf::from(self.to_bytes());
   34|    614|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    614|    }
_RINvXNvXs0_NtCsk5wu2A8Zzd4_3cid5serdeINtNtBb_3cid3CidKpENtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   97|    307|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    307|            where
   99|    307|                D: de::Deserializer<'de>,
  100|    307|            {
  101|    307|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    307|            }

_RNvXs0_NtCsk5wu2A8Zzd4_3cid7versionyINtNtCs7VpJQ1A6NWA_4core7convert4FromNtB5_7VersionE4fromCsk8K9mHYwX82_11cbor_encode:
   44|    598|    fn from(ver: Version) -> u64 {
   45|    598|        match ver {
   46|      0|            Version::V0 => 0,
   47|    598|            Version::V1 => 1,
   48|       |        }
   49|    598|    }
_RNvXs_NtCsk5wu2A8Zzd4_3cid7versionNtB4_7VersionINtNtCs7VpJQ1A6NWA_4core7convert7TryFromyE8try_fromCsk8K9mHYwX82_11cbor_encode:
   34|    299|    fn try_from(raw: u64) -> Result<Self> {
   35|    299|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    299|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    299|    }

_RNvXCskYrVAngdzQz_13libfuzzer_sysNtB2_6CorpusINtNtCs7VpJQ1A6NWA_4core7convert4FromuE4fromCsk8K9mHYwX82_11cbor_encode:
   30|    307|    fn from(_: ()) -> Self {
   31|    307|        Self::Keep
   32|    307|    }
rust_fuzzer_test_input:
  259|    392|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    392|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    392|
  262|    392|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    392|                // implementation. This helps the fuzzer avoid exploring all the
  264|    392|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    392|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    392|                // get to longer inputs that actually lead to interesting executions
  267|    392|                // quicker.
  268|    392|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    391|                }
  271|    391|
  272|    391|                let mut u = Unstructured::new(bytes);
  273|    391|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    391|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    391|                }
  291|       |
  292|    391|                let data = match data {
  293|    307|                    Ok(d) => d,
  294|     84|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    307|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    307|                result.to_libfuzzer_code()
  299|    392|            }
_RNvMs_CskYrVAngdzQz_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCsk8K9mHYwX82_11cbor_encode:
   40|    307|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    307|        match self {
   42|    307|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    307|    }
_RNvNvCsk8K9mHYwX82_11cbor_encode1__19___libfuzzer_sys_run:
  303|    307|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    307|                $body
  305|    307|            }
LLVMFuzzerTestOneInput:
   58|    392|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    392|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    392|    });
   63|    392|
   64|    392|    match test_input {
   65|    392|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    392|}
_RNCNvCskYrVAngdzQz_13libfuzzer_sys15test_input_wrap0B3_:
   59|    392|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    392|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    392|        rust_fuzzer_test_input(data_slice)
   62|    392|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtCsl4cjb10fdSg_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hintCsk8K9mHYwX82_11cbor_encode:
   65|    392|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   66|    392|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   67|    392|    }
_RNCNvXs_NtCsl4cjb10fdSg_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary0CsdYd1HzIMaKC_11common_fuzz:
   51|    425|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs_NtCsl4cjb10fdSg_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitraryCsdYd1HzIMaKC_11common_fuzz:
   40|    300|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   41|    300|        let mut code = 0u64;
   42|    300|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   43|       |
   44|    725|        while len_choice & 1 == 1 {
   45|    425|            len_choice >>= 1;
   46|    425|
   47|    425|            let x = u.arbitrary::<u8>();
   48|    425|            let next = code
   49|    425|                .checked_shl(8)
   50|    425|                .zip(x.ok())
   51|    425|                .map(|(next, x)| next.saturating_add(x as u64));
   52|    425|
   53|    425|            match next {
   54|      0|                None => break,
   55|    425|                Some(next) => code = next,
   56|       |            }
   57|       |        }
   58|       |
   59|    300|        let size = u.int_in_range(0..=S)?;
   60|    300|        let data = u.bytes(size)?;
   61|       |
   62|    299|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   63|    300|    }

_RINvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsk8K9mHYwX82_11cbor_encode:
  135|    299|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    299|    where
  137|    299|        Self: Sized,
  138|    299|    {
  139|    299|        let (code, size, digest) = read_multihash(r)?;
  140|    299|        Ok(Self { code, size, digest })
  141|    299|    }
_RINvNtCsl4cjb10fdSg_9multihash9multihash15write_multihashQQINtNtCs3RmiOPDzQOT_5alloc3vec3VechEECsk8K9mHYwX82_11cbor_encode:
  310|    598|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    598|where
  312|    598|    W: io::Write,
  313|    598|{
  314|    598|    let mut code_buf = varint_encode::u64_buffer();
  315|    598|    let code = varint_encode::u64(code, &mut code_buf);
  316|    598|
  317|    598|    let mut size_buf = varint_encode::u8_buffer();
  318|    598|    let size = varint_encode::u8(size, &mut size_buf);
  319|    598|
  320|    598|    let written = code.len() + size.len() + digest.len();
  321|    598|
  322|    598|    w.write_all(code)?;
  323|    598|    w.write_all(size)?;
  324|    598|    w.write_all(digest)?;
  325|       |
  326|    598|    Ok(written)
  327|    598|}
_RINvNtCsl4cjb10fdSg_9multihash9multihash14read_multihashQRShKj40_ECsk8K9mHYwX82_11cbor_encode:
  335|    299|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    299|where
  337|    299|    R: io::Read,
  338|    299|{
  339|    299|    let code = read_u64(&mut r)?;
  340|    299|    let size = read_u64(&mut r)?;
  341|       |
  342|    299|    if size > S as u64 || size > u8::MAX as u64 {
  343|      0|        return Err(Error::InvalidSize(size));
  344|    299|    }
  345|    299|
  346|    299|    let mut digest = [0; S];
  347|    299|    r.read_exact(&mut digest[..size as usize])?;
  348|    299|    Ok((code, size as u8, digest))
  349|    299|}
_RINvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs3RmiOPDzQOT_5alloc3vec3VechEECsk8K9mHYwX82_11cbor_encode:
  163|     16|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     16|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     16|    }
_RINvNtCsl4cjb10fdSg_9multihash9multihash15write_multihashQINtNtCs3RmiOPDzQOT_5alloc3vec3VechEECsk8K9mHYwX82_11cbor_encode:
  310|     16|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     16|where
  312|     16|    W: io::Write,
  313|     16|{
  314|     16|    let mut code_buf = varint_encode::u64_buffer();
  315|     16|    let code = varint_encode::u64(code, &mut code_buf);
  316|     16|
  317|     16|    let mut size_buf = varint_encode::u8_buffer();
  318|     16|    let size = varint_encode::u8(size, &mut size_buf);
  319|     16|
  320|     16|    let written = code.len() + size.len() + digest.len();
  321|     16|
  322|     16|    w.write_all(code)?;
  323|     16|    w.write_all(size)?;
  324|     16|    w.write_all(digest)?;
  325|       |
  326|     16|    Ok(written)
  327|     16|}
_RNvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB4_9MultihashKj40_E6digestCsk8K9mHYwX82_11cbor_encode:
  130|    614|    pub fn digest(&self) -> &[u8] {
  131|    614|        &self.digest[..self.size as usize]
  132|    614|    }
_RINvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs3RmiOPDzQOT_5alloc3vec3VechEECsk8K9mHYwX82_11cbor_encode:
  163|    598|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    598|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    598|    }
_RNvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsk8K9mHYwX82_11cbor_encode:
  101|      8|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|      8|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|      8|        }
  105|      8|        let size = input_digest.len();
  106|      8|        let mut digest = [0; S];
  107|      8|        let mut i = 0;
  108|    264|        while i < size {
  109|    256|            digest[i] = input_digest[i];
  110|    256|            i += 1;
  111|    256|        }
  112|      8|        Ok(Self {
  113|      8|            code,
  114|      8|            size: size as u8,
  115|      8|            digest,
  116|      8|        })
  117|      8|    }
_RNvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB4_9MultihashKj40_E4codeCsk8K9mHYwX82_11cbor_encode:
  120|    622|    pub const fn code(&self) -> u64 {
  121|    622|        self.code
  122|    622|    }
_RNvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsk8K9mHYwX82_11cbor_encode:
  125|    622|    pub const fn size(&self) -> u8 {
  126|    622|        self.size
  127|    622|    }
_RNvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB4_9MultihashKj40_E4codeCsdYd1HzIMaKC_11common_fuzz:
  120|      8|    pub const fn code(&self) -> u64 {
  121|      8|        self.code
  122|      8|    }
_RNvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsdYd1HzIMaKC_11common_fuzz:
  101|    307|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    307|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    307|        }
  105|    307|        let size = input_digest.len();
  106|    307|        let mut digest = [0; S];
  107|    307|        let mut i = 0;
  108|    718|        while i < size {
  109|    411|            digest[i] = input_digest[i];
  110|    411|            i += 1;
  111|    411|        }
  112|    307|        Ok(Self {
  113|    307|            code,
  114|    307|            size: size as u8,
  115|    307|            digest,
  116|    307|        })
  117|    307|    }
_RNvMs_NtCsl4cjb10fdSg_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsdYd1HzIMaKC_11common_fuzz:
  125|      8|    pub const fn size(&self) -> u8 {
  126|      8|        self.size
  127|      8|    }

_RNvXs4_NtCsl4cjb10fdSg_9multihash14multihash_implyINtNtCs7VpJQ1A6NWA_4core7convert4FromNtB5_4CodeE4fromCsdYd1HzIMaKC_11common_fuzz:
   11|     91|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCs7QDi2znKIpD_10fvm_shared7address8protocol8ProtocolNtNtCsbgrGzZUvkp0_10num_traits4cast13FromPrimitive7from_u8B8_:
  448|  6.49k|    fn from_u8(n: u8) -> Option<Self> {
  449|  6.49k|        FromPrimitive::from_u64(From::from(n))
  450|  6.49k|    }

_RNvMs2_NtCsjWARdzU9Xku_9once_cell3impINtB5_8OnceCellNtNtCs3RmiOPDzQOT_5alloc6string6StringE14is_initializedCsk8K9mHYwX82_11cbor_encode:
   49|    391|    pub(crate) fn is_initialized(&self) -> bool {
   50|    391|        // An `Acquire` load is enough because that makes all the initialization
   51|    391|        // operations visible to us, and, this being a fast path, weaker
   52|    391|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    391|        // `SeqCst` operations on the slow path.
   54|    391|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    391|    }

_RNvMs4_NtCsjWARdzU9Xku_9once_cell4syncINtB5_8OnceCellNtNtCs3RmiOPDzQOT_5alloc6string6StringE3getCsk8K9mHYwX82_11cbor_encode:
  965|    391|        pub fn get(&self) -> Option<&T> {
  966|    391|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    391|                None
  971|       |            }
  972|    391|        }

_RNvXs5_Cs3Fyl4ChbCtp_10scopeguardINtB5_10ScopeGuardQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs7VpJQ1A6NWA_4core3ops4drop4Drop4dropCsk8K9mHYwX82_11cbor_encode:
  470|    614|    fn drop(&mut self) {
  471|    614|        // This is OK because the fields are `ManuallyDrop`s
  472|    614|        // which will not be dropped by the compiler.
  473|    614|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|    614|        if S::should_run() {
  475|    614|            dropfn(value);
  476|    614|        }
  477|    614|    }
_RINvCs3Fyl4ChbCtp_10scopeguard5guardQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEFBy_EuECsk8K9mHYwX82_11cbor_encode:
  375|    614|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|    614|where
  377|    614|    F: FnOnce(T),
  378|    614|{
  379|    614|    ScopeGuard::with_strategy(v, dropfn)
  380|    614|}
_RNvXCs3Fyl4ChbCtp_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    614|    fn should_run() -> bool {
  232|    614|        true
  233|    614|    }
_RNvXs4_Cs3Fyl4ChbCtp_10scopeguardINtB5_10ScopeGuardQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs7VpJQ1A6NWA_4core3ops5deref8DerefMut9deref_mutCsk8K9mHYwX82_11cbor_encode:
  460|    614|    fn deref_mut(&mut self) -> &mut T {
  461|    614|        &mut *self.value
  462|    614|    }
_RNvMs1_Cs3Fyl4ChbCtp_10scopeguardINtB5_10ScopeGuardQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsk8K9mHYwX82_11cbor_encode:
  326|    614|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|    614|        ScopeGuard {
  328|    614|            value: ManuallyDrop::new(v),
  329|    614|            dropfn: ManuallyDrop::new(dropfn),
  330|    614|            strategy: PhantomData,
  331|    614|        }
  332|    614|    }

_RINvXsh_NtNtCshBvvHAE2XbG_5serde2de5implsINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
 1046|    307|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1047|    307|    where
 1048|    307|        D: Deserializer<'de>,
 1049|    307|    {
 1050|    307|        struct VecVisitor<T> {
 1051|    307|            marker: PhantomData<T>,
 1052|    307|        }
 1053|    307|
 1054|    307|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1055|    307|        where
 1056|    307|            T: Deserialize<'de>,
 1057|    307|        {
 1058|    307|            type Value = Vec<T>;
 1059|    307|
 1060|    307|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1061|    307|                formatter.write_str("a sequence")
 1062|    307|            }
 1063|    307|
 1064|    307|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1065|    307|            where
 1066|    307|                A: SeqAccess<'de>,
 1067|    307|            {
 1068|    307|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1069|    307|                let mut values = Vec::<T>::with_capacity(capacity);
 1070|    307|
 1071|    307|                while let Some(value) = tri!(seq.next_element()) {
 1072|    307|                    values.push(value);
 1073|    307|                }
 1074|    307|
 1075|    307|                Ok(values)
 1076|    307|            }
 1077|    307|        }
 1078|    307|
 1079|    307|        let visitor = VecVisitor {
 1080|    307|            marker: PhantomData,
 1081|    307|        };
 1082|    307|        deserializer.deserialize_seq(visitor)
 1083|    307|    }
_RINvXNvXsh_NtNtCshBvvHAE2XbG_5serde2de5implsINtNtCs3RmiOPDzQOT_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
 1064|    307|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1065|    307|            where
 1066|    307|                A: SeqAccess<'de>,
 1067|    307|            {
 1068|    307|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1069|    307|                let mut values = Vec::<T>::with_capacity(capacity);
 1070|       |
 1071|  6.49k|                while let Some(value) = tri!(seq.next_element()) {
 1072|  6.19k|                    values.push(value);
 1073|  6.19k|                }
 1074|       |
 1075|    307|                Ok(values)
 1076|    307|            }
_RINvXNvXsX_NtNtCshBvvHAE2XbG_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCs6suAyWtTt4w_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7VpJQ1A6NWA_4core7convert10InfallibleEECsk8K9mHYwX82_11cbor_encode:
  137|    307|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  138|    307|        where
  139|    307|            E: Error,
  140|    307|        {
  141|    307|            Ok(v)
  142|    307|        }
_RINvXsX_NtNtCshBvvHAE2XbG_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  112|    307|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  113|    307|            where
  114|    307|                D: Deserializer<'de>,
  115|    307|            {
  116|    307|                struct PrimitiveVisitor;
  117|    307|
  118|    307|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  119|    307|                    type Value = $primitive;
  120|    307|
  121|    307|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  122|    307|                        formatter.write_str(stringify!($primitive))
  123|    307|                    }
  124|    307|
  125|    307|                    $($($method!($val : $visit);)*)*
  126|    307|                }
  127|    307|
  128|    307|                deserializer.$deserialize(PrimitiveVisitor)
  129|    307|            }

_RINvXs3_NtCshBvvHAE2XbG_5serde2deINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  790|    307|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    307|    where
  792|    307|        D: Deserializer<'de>,
  793|    307|    {
  794|    307|        T::deserialize(deserializer)
  795|    307|    }
_RINvXs3_NtCshBvvHAE2XbG_5serde2deINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  790|    307|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    307|    where
  792|    307|        D: Deserializer<'de>,
  793|    307|    {
  794|    307|        T::deserialize(deserializer)
  795|    307|    }
_RINvYINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess12next_elementNtCskIOdiUPdE2k_17fvm_ipld_bitfield8BitFieldECsk8K9mHYwX82_11cbor_encode:
 1724|    307|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    307|    where
 1726|    307|        T: Deserialize<'de>,
 1727|    307|    {
 1728|    307|        self.next_element_seed(PhantomData)
 1729|    307|    }
_RINvXs3_NtCshBvvHAE2XbG_5serde2deINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  790|    307|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    307|    where
  792|    307|        D: Deserializer<'de>,
  793|    307|    {
  794|    307|        T::deserialize(deserializer)
  795|    307|    }
_RINvYNtNvXs_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCshBvvHAE2XbG_5serde2de7Visitor20visit_borrowed_bytesINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7VpJQ1A6NWA_4core7convert10InfallibleEECsk8K9mHYwX82_11cbor_encode:
 1563|    614|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    614|    where
 1565|    614|        E: Error,
 1566|    614|    {
 1567|    614|        self.visit_bytes(v)
 1568|    614|    }
_RINvYINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess12next_elementINtNtCsk5wu2A8Zzd4_3cid3cid3CidKj40_EECsk8K9mHYwX82_11cbor_encode:
 1724|    307|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    307|    where
 1726|    307|        T: Deserialize<'de>,
 1727|    307|    {
 1728|    307|        self.next_element_seed(PhantomData)
 1729|    307|    }
_RINvYINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess12next_elementyECsk8K9mHYwX82_11cbor_encode:
 1724|    307|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    307|    where
 1726|    307|        T: Deserialize<'de>,
 1727|    307|    {
 1728|    307|        self.next_element_seed(PhantomData)
 1729|    307|    }
_RINvXs3_NtCshBvvHAE2XbG_5serde2deINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  790|    307|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    307|    where
  792|    307|        D: Deserializer<'de>,
  793|    307|    {
  794|    307|        T::deserialize(deserializer)
  795|    307|    }
_RINvXs3_NtCshBvvHAE2XbG_5serde2deINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  790|  6.49k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  6.49k|    where
  792|  6.49k|        D: Deserializer<'de>,
  793|  6.49k|    {
  794|  6.49k|        T::deserialize(deserializer)
  795|  6.49k|    }
_RINvXs3_NtCshBvvHAE2XbG_5serde2deINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtCskIOdiUPdE2k_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  790|    307|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    307|    where
  792|    307|        D: Deserializer<'de>,
  793|    307|    {
  794|    307|        T::deserialize(deserializer)
  795|    307|    }
_RINvYINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess12next_elementINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEECsk8K9mHYwX82_11cbor_encode:
 1724|    307|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    307|    where
 1726|    307|        T: Deserialize<'de>,
 1727|    307|    {
 1728|    307|        self.next_element_seed(PhantomData)
 1729|    307|    }
_RINvYINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess12next_elementNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsk8K9mHYwX82_11cbor_encode:
 1724|    307|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    307|    where
 1726|    307|        T: Deserialize<'de>,
 1727|    307|    {
 1728|    307|        self.next_element_seed(PhantomData)
 1729|    307|    }
_RINvXs3_NtCshBvvHAE2XbG_5serde2deINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataINtNtCsk5wu2A8Zzd4_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  790|    307|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    307|    where
  792|    307|        D: Deserializer<'de>,
  793|    307|    {
  794|    307|        T::deserialize(deserializer)
  795|    307|    }
_RINvYNtNtCsk5wu2A8Zzd4_3cid5serde17BytesToCidVisitorNtNtCshBvvHAE2XbG_5serde2de7Visitor20visit_borrowed_bytesINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7VpJQ1A6NWA_4core7convert10InfallibleEECsk8K9mHYwX82_11cbor_encode:
 1563|    307|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1564|    307|    where
 1565|    307|        E: Error,
 1566|    307|    {
 1567|    307|        self.visit_bytes(v)
 1568|    307|    }
_RINvYINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess12next_elementNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressECsk8K9mHYwX82_11cbor_encode:
 1724|  6.80k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|  6.80k|    where
 1726|  6.80k|        T: Deserialize<'de>,
 1727|  6.80k|    {
 1728|  6.80k|        self.next_element_seed(PhantomData)
 1729|  6.80k|    }
_RINvYINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsk8K9mHYwX82_11cbor_encode:
 1724|    307|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1725|    307|    where
 1726|    307|        T: Deserialize<'de>,
 1727|    307|    {
 1728|    307|        self.next_element_seed(PhantomData)
 1729|    307|    }

_RINvNtNtCshBvvHAE2XbG_5serde2de9size_hint8cautiousNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressECsk8K9mHYwX82_11cbor_encode:
   11|    307|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|    307|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|    307|
   14|    307|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|    307|        cmp::min(
   18|    307|            hint.unwrap_or(0),
   19|    307|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|    307|        )
   21|       |    }
   22|    307|}

_RINvXs1G_NtNtCshBvvHAE2XbG_5serde3ser5implsRNtCskIOdiUPdE2k_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  496|    614|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    614|            where
  498|    614|                S: Serializer,
  499|    614|            {
  500|    614|                (**self).serialize(serializer)
  501|    614|            }
_RINvXs1G_NtNtCshBvvHAE2XbG_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  496|    614|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    614|            where
  498|    614|                S: Serializer,
  499|    614|            {
  500|    614|                (**self).serialize(serializer)
  501|    614|            }
_RINvXsH_NtNtCshBvvHAE2XbG_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   11|    614|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    614|            where
   13|    614|                S: Serializer,
   14|    614|            {
   15|    614|                serializer.$method(*self $($cast)*)
   16|    614|            }
_RINvXs1G_NtNtCshBvvHAE2XbG_5serde3ser5implsRINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  496|    614|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    614|            where
  498|    614|                S: Serializer,
  499|    614|            {
  500|    614|                (**self).serialize(serializer)
  501|    614|            }
_RINvXs1G_NtNtCshBvvHAE2XbG_5serde3ser5implsRINtNtCsk5wu2A8Zzd4_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  496|    614|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    614|            where
  498|    614|                S: Serializer,
  499|    614|            {
  500|    614|                (**self).serialize(serializer)
  501|    614|            }
_RINvXs1G_NtNtCshBvvHAE2XbG_5serde3ser5implsRNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  496|  12.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|  12.9k|            where
  498|  12.9k|                S: Serializer,
  499|  12.9k|            {
  500|  12.9k|                (**self).serialize(serializer)
  501|  12.9k|            }
_RINvXs1G_NtNtCshBvvHAE2XbG_5serde3ser5implsRNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  496|    614|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  497|    614|            where
  498|    614|                S: Serializer,
  499|    614|            {
  500|    614|                (**self).serialize(serializer)
  501|    614|            }
_RINvXs1m_NtNtCshBvvHAE2XbG_5serde3ser5implsINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  197|    614|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  198|    614|            where
  199|    614|                S: Serializer,
  200|    614|            {
  201|    614|                serializer.collect_seq(self)
  202|    614|            }

_RINvNtCshBvvHAE2XbG_5serde3ser17iterator_len_hintINtNtNtCs7VpJQ1A6NWA_4core5slice4iter4IterNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEECsk8K9mHYwX82_11cbor_encode:
 1944|    614|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|    614|where
 1946|    614|    I: Iterator,
 1947|    614|{
 1948|    614|    match iter.size_hint() {
 1949|    614|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|    614|}
_RNCINvYQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer11collect_seqRINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEE0Csk8K9mHYwX82_11cbor_encode:
 1278|  12.3k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer11collect_seqRINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEECsk8K9mHYwX82_11cbor_encode:
 1271|    614|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|    614|    where
 1273|    614|        I: IntoIterator,
 1274|    614|        <I as IntoIterator>::Item: Serialize,
 1275|    614|    {
 1276|    614|        let mut iter = iter.into_iter();
 1277|    614|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|    614|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|    614|        serializer.end()
 1280|    614|    }

_RINvMNtCsaVgkjyDXsnp_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs3RmiOPDzQOT_5alloc3vec3VechEECsk8K9mHYwX82_11cbor_encode:
   60|    614|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    614|        ByteBuf {
   62|    614|            bytes: bytes.into(),
   63|    614|        }
   64|    614|    }
_RINvXsc_NtCsaVgkjyDXsnp_11serde_bytes7bytebufNtB6_7ByteBufNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  186|    614|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    614|    where
  188|    614|        S: Serializer,
  189|    614|    {
  190|    614|        serializer.serialize_bytes(&self.bytes)
  191|    614|    }

_RINvNtCs6suAyWtTt4w_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderECsk8K9mHYwX82_11cbor_encode:
   26|    614|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    614|    let buf = match reader.fill(1)? {
   28|    614|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    614|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|    307|    Ok(byte)
   33|    614|}

_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess17next_element_seedINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEECsk8K9mHYwX82_11cbor_encode:
  476|  6.80k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  6.80k|    where
  478|  6.80k|        T: de::DeserializeSeed<'de>,
  479|  6.80k|    {
  480|  6.80k|        if self.len > 0 {
  481|  6.49k|            self.len -= 1;
  482|  6.49k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|    307|            Ok(None)
  485|       |        }
  486|  6.80k|    }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsk8K9mHYwX82_11cbor_encode:
  239|  6.80k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  6.80k|    where
  241|  6.80k|        V: Visitor<'de>,
  242|  6.80k|    {
  243|  6.80k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|  6.80k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  6.80k|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess17next_element_seedINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsk8K9mHYwX82_11cbor_encode:
  476|    307|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    307|    where
  478|    307|        T: de::DeserializeSeed<'de>,
  479|    307|    {
  480|    307|        if self.len > 0 {
  481|    307|            self.len -= 1;
  482|    307|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    307|    }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsk8K9mHYwX82_11cbor_encode:
  353|    307|    fn deserialize_tuple_struct<V>(
  354|    307|        self,
  355|    307|        _name: &'static str,
  356|    307|        len: usize,
  357|    307|        visitor: V,
  358|    307|    ) -> Result<V::Value, Self::Error>
  359|    307|    where
  360|    307|        V: Visitor<'de>,
  361|    307|    {
  362|    307|        self.deserialize_tuple(len, visitor)
  363|    307|    }
_RNvMs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE3endCsk8K9mHYwX82_11cbor_encode:
  130|    307|    pub fn end(&mut self) -> Result<(), DecodeError<R::Error>> {
  131|    307|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    307|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    307|    }
_RINvXs7_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer17deserialize_bytesNtNtCsk5wu2A8Zzd4_3cid5serde17BytesToCidVisitorECsk8K9mHYwX82_11cbor_encode:
  628|    307|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  629|    307|        let byte = peek_one(&mut self.0.reader)?;
  630|    307|        match dec::if_major(byte) {
  631|       |            major::BYTES => {
  632|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  633|    307|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  634|    307|                    Cow::Borrowed(buf) => {
  635|    307|                        if buf.len() <= 1 || buf[0] != 0 {
  636|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  637|       |                        } else {
  638|    307|                            visitor.visit_borrowed_bytes(&buf[1..])
  639|       |                        }
  640|       |                    }
  641|      0|                    Cow::Owned(mut buf) => {
  642|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  643|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  644|       |                        } else {
  645|      0|                            buf.remove(0);
  646|      0|                            visitor.visit_byte_buf(buf)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |            }
  651|      0|            _ => Err(DecodeError::Unsupported { byte }),
  652|       |        }
  653|    307|    }
_RNvMs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE8try_stepCsk8K9mHYwX82_11cbor_encode:
  101|    614|    fn try_step<'a>(
  102|    614|        &'a mut self,
  103|    614|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    614|    {
  105|    614|        if self.reader.step_in() {
  106|    614|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    614|    }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECsk8K9mHYwX82_11cbor_encode:
  239|    614|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    614|    where
  241|    614|        V: Visitor<'de>,
  242|    614|    {
  243|    614|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|    614|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess17next_element_seedINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataINtNtCsk5wu2A8Zzd4_3cid3cid3CidKj40_EEECsk8K9mHYwX82_11cbor_encode:
  476|    307|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    307|    where
  478|    307|        T: de::DeserializeSeed<'de>,
  479|    307|    {
  480|    307|        if self.len > 0 {
  481|    307|            self.len -= 1;
  482|    307|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    307|    }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCs3RmiOPDzQOT_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEECsk8K9mHYwX82_11cbor_encode:
  333|    307|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|    307|    where
  335|    307|        V: Visitor<'de>,
  336|    307|    {
  337|    307|        let mut de = self.try_step()?;
  338|    307|        let seq = Accessor::array(&mut de)?;
  339|    307|        visitor.visit_seq(seq)
  340|    307|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess17next_element_seedINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtNvXNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsk8K9mHYwX82_11cbor_encode:
  476|    307|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    307|    where
  478|    307|        T: de::DeserializeSeed<'de>,
  479|    307|    {
  480|    307|        if self.len > 0 {
  481|    307|            self.len -= 1;
  482|    307|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    307|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess17next_element_seedINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDatayEECsk8K9mHYwX82_11cbor_encode:
  476|    307|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    307|    where
  478|    307|        T: de::DeserializeSeed<'de>,
  479|    307|    {
  480|    307|        if self.len > 0 {
  481|    307|            self.len -= 1;
  482|    307|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    307|    }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsk8K9mHYwX82_11cbor_encode:
  343|    307|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|    307|    where
  345|    307|        V: Visitor<'de>,
  346|    307|    {
  347|    307|        let mut de = self.try_step()?;
  348|    307|        let seq = Accessor::tuple(&mut de, len)?;
  349|    307|        visitor.visit_seq(seq)
  350|    307|    }
_RNCNvMs1_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE5arrays_0Csk8K9mHYwX82_11cbor_encode:
  437|    307|            move |len| Ok(Accessor { de, len }),
_RNCNvMs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE8try_step0Csk8K9mHYwX82_11cbor_encode:
  106|    614|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess17next_element_seedINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataNtCskIOdiUPdE2k_17fvm_ipld_bitfield8BitFieldEECsk8K9mHYwX82_11cbor_encode:
  476|    307|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    307|    where
  478|    307|        T: de::DeserializeSeed<'de>,
  479|    307|    {
  480|    307|        if self.len > 0 {
  481|    307|            self.len -= 1;
  482|    307|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    307|    }
_RINvNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de10from_sliceNtNtCsdYd1HzIMaKC_11common_fuzz4cbor7PayloadECsk8K9mHYwX82_11cbor_encode:
   40|    307|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    307|where
   42|    307|    T: de::Deserialize<'a>,
   43|    307|{
   44|    307|    let reader = SliceReader::new(buf);
   45|    307|    let mut deserializer = Deserializer::from_reader(reader);
   46|    307|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    307|    deserializer.end()?;
   48|    307|    Ok(value)
   49|    307|}
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess17next_element_seedINtNtCs7VpJQ1A6NWA_4core6marker11PhantomDataINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEEECsk8K9mHYwX82_11cbor_encode:
  476|    307|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    307|    where
  478|    307|        T: de::DeserializeSeed<'de>,
  479|    307|    {
  480|    307|        if self.len > 0 {
  481|    307|            self.len -= 1;
  482|    307|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    307|    }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsk8K9mHYwX82_11cbor_encode:
  142|    307|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    307|        where V: Visitor<'de>
  144|    307|        {
  145|    307|            let value = <$t>::decode(&mut self.reader)?;
  146|    307|            visitor.$visit(value)
  147|    307|        }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECsk8K9mHYwX82_11cbor_encode:
  250|    614|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  251|    614|    where
  252|    614|        V: Visitor<'de>,
  253|    614|    {
  254|    614|        self.deserialize_bytes(visitor)
  255|    614|    }
_RNvMNtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE11from_readerCsk8K9mHYwX82_11cbor_encode:
   93|    307|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    307|        Deserializer { reader }
   95|    307|    }
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCsk5wu2A8Zzd4_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsk8K9mHYwX82_11cbor_encode:
  317|    307|    fn deserialize_newtype_struct<V>(
  318|    307|        self,
  319|    307|        name: &'static str,
  320|    307|        visitor: V,
  321|    307|    ) -> Result<V::Value, Self::Error>
  322|    307|    where
  323|    307|        V: Visitor<'de>,
  324|    307|    {
  325|    307|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  326|    307|            self.deserialize_cid(visitor)
  327|       |        } else {
  328|      0|            visitor.visit_newtype_struct(self)
  329|       |        }
  330|    307|    }
_RNvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderENtNtCshBvvHAE2XbG_5serde2de9SeqAccess9size_hintCsk8K9mHYwX82_11cbor_encode:
  489|    307|    fn size_hint(&self) -> Option<usize> {
  490|    307|        Some(self.len)
  491|    307|    }
_RNvMs1_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE5arrayCsk8K9mHYwX82_11cbor_encode:
  433|    307|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  434|    307|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  435|    307|        array_start.0.map_or_else(
  436|    307|            || Err(DecodeError::IndefiniteSize),
  437|    307|            move |len| Ok(Accessor { de, len }),
  438|    307|        )
  439|    307|    }
_RINvMs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCsk5wu2A8Zzd4_3cid5serdeINtNtB2l_3cid3CidKpENtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsk8K9mHYwX82_11cbor_encode:
  113|    307|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    307|    where
  115|    307|        V: Visitor<'de>,
  116|    307|    {
  117|    307|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    307|        match tag.0 {
  120|    307|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    307|    }
_RNvMs1_NtCs6suAyWtTt4w_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderE5tupleCsk8K9mHYwX82_11cbor_encode:
  442|    307|    pub fn tuple(
  443|    307|        de: &'a mut Deserializer<R>,
  444|    307|        len: usize,
  445|    307|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  446|    307|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  447|       |
  448|    307|        if array_start.0 == Some(len) {
  449|    307|            Ok(Accessor { de, len })
  450|       |        } else {
  451|      0|            Err(DecodeError::RequireLength {
  452|      0|                name: "tuple",
  453|      0|                expect: len,
  454|      0|                value: array_start.0.unwrap_or(0),
  455|      0|            })
  456|       |        }
  457|    307|    }

_RNvXs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer13serialize_seqCsk8K9mHYwX82_11cbor_encode:
  225|    614|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
  226|    614|        if let Some(len) = len {
  227|    614|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    614|        Ok(Collect {
  232|    614|            bounded: len.is_some(),
  233|    614|            ser: self,
  234|    614|        })
  235|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCsdYd1HzIMaKC_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsk8K9mHYwX82_11cbor_encode:
  414|    614|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    614|        value.serialize(&mut *self.ser)
  416|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCskIOdiUPdE2k_17fvm_ipld_bitfield8BitFieldECsk8K9mHYwX82_11cbor_encode:
  414|    614|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    614|        value.serialize(&mut *self.ser)
  416|    614|    }
_RNvXs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer22serialize_tuple_structCsk8K9mHYwX82_11cbor_encode:
  244|    614|    fn serialize_tuple_struct(
  245|    614|        self,
  246|    614|        _name: &'static str,
  247|    614|        len: usize,
  248|    614|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    614|        self.serialize_tuple(len)
  250|    614|    }
_RNvXs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer13serialize_u64Csk8K9mHYwX82_11cbor_encode:
  122|    614|    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
  123|    614|        v.encode(&mut self.writer)?;
  124|    614|        Ok(())
  125|    614|    }
_RNvMNtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterE10into_innerCsk8K9mHYwX82_11cbor_encode:
   56|    614|    pub fn into_inner(self) -> W {
   57|    614|        self.writer
   58|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressECsk8K9mHYwX82_11cbor_encode:
  414|    614|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    614|        value.serialize(&mut *self.ser)
  416|    614|    }
_RNvXs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer15serialize_tupleCsk8K9mHYwX82_11cbor_encode:
  238|    614|    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
  239|    614|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    614|        Ok(BoundedCollect { ser: self })
  241|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsk8K9mHYwX82_11cbor_encode:
  414|    614|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    614|        value.serialize(&mut *self.ser)
  416|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsk8K9mHYwX82_11cbor_encode:
  414|    614|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    614|        value.serialize(&mut *self.ser)
  416|    614|    }
_RNvXs7_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer15serialize_bytesCsk8K9mHYwX82_11cbor_encode:
  561|    614|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|    614|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|    614|        let prefixed = [&[0x00], value].concat();
  564|    614|        // CIDs are serialized with CBOR tag 42.
  565|    614|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|    614|        Ok(())
  567|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsk5wu2A8Zzd4_3cid3cid3CidKj40_EECsk8K9mHYwX82_11cbor_encode:
  414|    614|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    614|        value.serialize(&mut *self.ser)
  416|    614|    }
_RNvXs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer15serialize_bytesCsk8K9mHYwX82_11cbor_encode:
  159|  14.8k|    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
  160|  14.8k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  14.8k|        Ok(())
  162|  14.8k|    }
_RNvMNtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterE3newCsk8K9mHYwX82_11cbor_encode:
   51|    614|    pub fn new(writer: W) -> Serializer<W> {
   52|    614|        Serializer { writer }
   53|    614|    }
_RNvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct3endCsk8K9mHYwX82_11cbor_encode:
  419|    614|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|    614|        Ok(())
  421|    614|    }
_RINvXs2_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs3RmiOPDzQOT_5alloc3vec3VecNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressEECsk8K9mHYwX82_11cbor_encode:
  414|    614|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    614|        value.serialize(&mut *self.ser)
  416|    614|    }
_RINvNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser6to_vecNtNtCsdYd1HzIMaKC_11common_fuzz4cbor7PayloadECsk8K9mHYwX82_11cbor_encode:
   23|    614|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    614|where
   25|    614|    T: Serialize + ?Sized,
   26|    614|{
   27|    614|    let writer = BufWriter::new(Vec::new());
   28|    614|    let mut serializer = Serializer::new(writer);
   29|    614|    value.serialize(&mut serializer)?;
   30|    614|    Ok(serializer.into_inner().into_inner())
   31|    614|}
_RINvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser12SerializeSeq17serialize_elementRNtNtCs7QDi2znKIpD_10fvm_shared7address7AddressECsk8K9mHYwX82_11cbor_encode:
  380|  12.3k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  12.3k|        value.serialize(&mut *self.ser)
  382|  12.3k|    }
_RINvXs_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser10Serializer24serialize_newtype_structNtNtCsaVgkjyDXsnp_11serde_bytes7bytebuf7ByteBufECsk8K9mHYwX82_11cbor_encode:
  199|    614|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    614|        self,
  201|    614|        name: &'static str,
  202|    614|        value: &T,
  203|    614|    ) -> Result<Self::Ok, Self::Error> {
  204|    614|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    614|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    614|    }
_RNvXs0_NtCs6suAyWtTt4w_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterENtNtCshBvvHAE2XbG_5serde3ser12SerializeSeq3endCsk8K9mHYwX82_11cbor_encode:
  385|    614|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|    614|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|    614|        }
  389|       |
  390|    614|        Ok(())
  391|    614|    }

_RINvXs_CsaDFhWpHCKa3_11serde_tupleINtB5_12DeserializerQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEENtNtCshBvvHAE2XbG_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsk8K9mHYwX82_11cbor_encode:
  353|    307|    fn deserialize_tuple_struct<V>(
  354|    307|        self,
  355|    307|        name: &'static str,
  356|    307|        len: usize,
  357|    307|        visitor: V,
  358|    307|    ) -> Result<V::Value, Self::Error>
  359|    307|    where
  360|    307|        V: serde::de::Visitor<'de>,
  361|    307|    {
  362|    307|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    307|    }
_RNvXCsaDFhWpHCKa3_11serde_tupleINtB2_10SerializerQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEENtNtCshBvvHAE2XbG_5serde3ser10Serializer22serialize_tuple_structCsk8K9mHYwX82_11cbor_encode:
  158|    614|    fn serialize_tuple_struct(
  159|    614|        self,
  160|    614|        name: &'static str,
  161|    614|        len: usize,
  162|    614|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    614|        self.0.serialize_tuple_struct(name, len)
  164|    614|    }

_RNvNtCsfhu32wvuvMQ_15unsigned_varint6decode3u64Csk8K9mHYwX82_11cbor_encode:
  122|  1.21k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.21k|    decode!(buf, 9, u64)
  124|  1.21k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6decode7is_lastCsk8K9mHYwX82_11cbor_encode:
   90|  3.29k|pub fn is_last(b: u8) -> bool {
   91|  3.29k|    b & 0x80 == 0
   92|  3.29k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6decode3u64Cs7QDi2znKIpD_10fvm_shared:
  122|  5.55k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  5.55k|    decode!(buf, 9, u64)
  124|  5.55k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6decode7is_lastCs7QDi2znKIpD_10fvm_shared:
   90|  43.7k|pub fn is_last(b: u8) -> bool {
   91|  43.7k|    b & 0x80 == 0
   92|  43.7k|}

_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode3u64Csk8K9mHYwX82_11cbor_encode:
   69|  1.81k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.81k|    encode!(number, buf)
   71|  1.81k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode9u8_bufferCsk8K9mHYwX82_11cbor_encode:
  101|    614|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    614|    [0; U8_LEN]
  103|    614|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode2u8Csk8K9mHYwX82_11cbor_encode:
   45|    614|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    614|    encode!(number, buf)
   47|    614|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode10u64_bufferCsk8K9mHYwX82_11cbor_encode:
  119|  3.02k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.02k|    [0; U64_LEN]
  121|  3.02k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode10u64_bufferCs7QDi2znKIpD_10fvm_shared:
  119|  11.1k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  11.1k|    [0; U64_LEN]
  121|  11.1k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode3u64Cs7QDi2znKIpD_10fvm_shared:
   69|  11.1k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  11.1k|    encode!(number, buf)
   71|  11.1k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode10u64_bufferCskIOdiUPdE2k_17fvm_ipld_bitfield:
  119|  5.02k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  5.02k|    [0; U64_LEN]
  121|  5.02k|}
_RNvNtCsfhu32wvuvMQ_15unsigned_varint6encode3u64CskIOdiUPdE2k_17fvm_ipld_bitfield:
   69|  5.02k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  5.02k|    encode!(number, buf)
   71|  5.02k|}

_RINvNtCsfhu32wvuvMQ_15unsigned_varint2io8read_u64QQRShECsk8K9mHYwX82_11cbor_encode:
   31|  1.21k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.21k|                let mut b = encode::$b();
   33|  1.64k|                for i in 0 .. b.len() {
   34|  1.64k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.64k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.64k|                    }
   38|  1.64k|                    if decode::is_last(b[i]) {
   39|  1.21k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    433|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.21k|            }


_RNvMs8_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  5.00k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  5.00k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.07k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    930|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.07k|        if advance_lhs {
  371|  4.07k|            self.lhs.next();
  372|  4.07k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.07k|        range
  377|  5.00k|    }
_RNvXsh_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs7VpJQ1A6NWA_4core7default7Default7defaultB9_:
  152|    930|#[derive(Default)]
_RNvMs5_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    930|    pub fn new(a: A, b: B) -> Self {
  299|    930|        Self(Merge::new(_Combine::new(a, b)))
  300|    930|    }
_RNvXse_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  5.00k|        let next = self.next.take()?;
  484|  4.07k|        self.next = self.iter.next();
  485|  4.07k|        Some(next)
  486|  5.00k|    }
_RNvXse_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  4.07k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.07k|        let next = self.next.take()?;
  484|  4.07k|        self.next = self.iter.next();
  485|  4.07k|        Some(next)
  486|  4.07k|    }
_RNvXsb_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  439|  5.00k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.07k|        while let Some(next) = self.iter.peek() {
  444|  3.74k|            if next.start > range.end {
  445|  3.74k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.07k|        Some(range)
  453|  5.00k|    }
_RNvMs5_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    930|    pub fn new(a: A, b: B) -> Self {
  299|    930|        Self(Merge::new(_Combine::new(a, b)))
  300|    930|    }
_RNvXse_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  5.00k|        let next = self.next.take()?;
  484|  4.07k|        self.next = self.iter.next();
  485|  4.07k|        Some(next)
  486|  5.00k|    }
_RNvMsa_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    930|    pub fn new(iter: I) -> Self {
  426|    930|        Self {
  427|    930|            iter: Lookahead::new(iter),
  428|    930|        }
  429|    930|    }
_RNCNvXs9_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  5.00k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  5.00k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  5.00k|        self.next.as_mut()
  475|  5.00k|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  4.07k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.07k|        self.next.as_mut()
  475|  4.07k|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  1.86k|    fn new(mut iter: I) -> Self {
  469|  1.86k|        let next = iter.next();
  470|  1.86k|        Self { iter, next }
  471|  1.86k|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  5.00k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  5.00k|        self.next.as_mut()
  475|  5.00k|    }
_RNCNvXs9_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.07k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  4.07k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.07k|        let next = self.next.take()?;
  484|  4.07k|        self.next = self.iter.next();
  485|  4.07k|        Some(next)
  486|  4.07k|    }
_RNvXNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tailB6_:
  110|  4.07k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  4.07k|        // the union of a range and an empty range is just that range
  112|  4.07k|        Some(lhs)
  113|  4.07k|    }
_RNvXsb_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  439|  5.00k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.07k|        while let Some(next) = self.iter.peek() {
  444|  3.74k|            if next.start > range.end {
  445|  3.74k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.07k|        Some(range)
  453|  5.00k|    }
_RNvMs8_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  5.00k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  5.00k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.07k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    930|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.07k|        if advance_lhs {
  371|  4.07k|            self.lhs.next();
  372|  4.07k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.07k|        range
  377|  5.00k|    }
_RNvMs8_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    930|    fn new(lhs: A, rhs: B) -> Self {
  344|    930|        Self {
  345|    930|            lhs: Lookahead::new(lhs),
  346|    930|            rhs: Lookahead::new(rhs),
  347|    930|            combinator: Default::default(),
  348|    930|        }
  349|    930|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    930|    fn new(mut iter: I) -> Self {
  469|    930|        let next = iter.next();
  470|    930|        Self { iter, next }
  471|    930|    }
_RNvXs6_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  312|  5.00k|        self.0.next()
  313|  5.00k|    }
_RNvXs9_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  389|  5.00k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  5.00k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  5.00k|    }
_RNvXs6_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  312|  5.00k|        self.0.next()
  313|  5.00k|    }
_RNvXsf_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs7VpJQ1A6NWA_4core7default7Default7defaultB9_:
   87|    930|#[derive(Default)]
_RNvMsa_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    930|    pub fn new(iter: I) -> Self {
  426|    930|        Self {
  427|    930|            iter: Lookahead::new(iter),
  428|    930|        }
  429|    930|    }
_RNCNvXs9_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  5.00k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    930|    fn new(lhs: A, rhs: B) -> Self {
  344|    930|        Self {
  345|    930|            lhs: Lookahead::new(lhs),
  346|    930|            rhs: Lookahead::new(rhs),
  347|    930|            combinator: Default::default(),
  348|    930|        }
  349|    930|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  4.07k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.07k|        self.next.as_mut()
  475|  4.07k|    }
_RNCNvXs9_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.07k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  389|  5.00k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  5.00k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  5.00k|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    930|    fn new(mut iter: I) -> Self {
  469|    930|        let next = iter.next();
  470|    930|        Self { iter, next }
  471|    930|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  10.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  10.0k|        self.next.as_mut()
  475|  10.0k|    }
_RNvXs0_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tailB9_:
  182|  4.07k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  4.07k|        // the difference between a range and an empty range is just that range
  184|  4.07k|        Some(lhs)
  185|  4.07k|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    930|    fn new(mut iter: I) -> Self {
  469|    930|        let next = iter.next();
  470|    930|        Self { iter, next }
  471|    930|    }
_RNvMsd_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    930|    fn new(mut iter: I) -> Self {
  469|    930|        let next = iter.next();
  470|    930|        Self { iter, next }
  471|    930|    }

_RINvYINtNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    930|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    930|        Combine::new(self, other)
   34|    930|    }
_RINvMs2_NtCskIOdiUPdE2k_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    930|    pub fn new<II>(iter: II) -> Self
  141|    930|    where
  142|    930|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    930|    {
  144|    930|        Self(iter.into_iter())
  145|    930|    }
_RINvNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEEB4_:
  164|  1.86k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|  1.86k|    let mut iter = bits.into_iter().peekable();
  166|  1.86k|
  167|  1.86k|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|  1.86k|    }))
  181|  1.86k|}
_RNvXs3_NtCskIOdiUPdE2k_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  5.00k|    fn next(&mut self) -> Option<Self::Item> {
  155|  5.00k|        self.0.next()
  156|  5.00k|    }
_RNCINvNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0B6_:
  167|  1.86k|    Ranges::new(iter::from_fn(move || {
  168|  1.86k|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|  1.86k|    }))
_RNvXs3_NtCskIOdiUPdE2k_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  1.86k|    fn next(&mut self) -> Option<Self::Item> {
  155|  1.86k|        self.0.next()
  156|  1.86k|    }
_RINvYINtNtCskIOdiUPdE2k_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    930|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    930|        Combine::new(self, other)
   24|    930|    }
_RINvMs2_NtCskIOdiUPdE2k_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs7VpJQ1A6NWA_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs3RmiOPDzQOT_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|  1.86k|    pub fn new<II>(iter: II) -> Self
  141|  1.86k|    where
  142|  1.86k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  1.86k|    {
  144|  1.86k|        Self(iter.into_iter())
  145|  1.86k|    }

_RNvMs4_CskIOdiUPdE2k_17fvm_ipld_bitfieldNtB5_8BitField12inner_rangesB5_:
  283|    930|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|    930|        iter::Ranges::new(self.ranges.iter().cloned())
  285|    930|    }
_RNvMs4_CskIOdiUPdE2k_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|    930|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|    930|        self.inner_ranges()
  291|    930|            .union(ranges_from_bits(self.set.iter().copied()))
  292|    930|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|    930|    }
_RNvXsa_CskIOdiUPdE2k_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs7VpJQ1A6NWA_4core7default7Default7defaultB5_:
   42|  1.08k|#[derive(Debug, Default, Clone)]

_RNvXNtCskIOdiUPdE2k_17fvm_ipld_bitfield5rangeINtNtNtCs7VpJQ1A6NWA_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  4.07k|    fn size(&self) -> Self::Idx {
   17|  4.07k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  4.07k|            self.end - self.start
   21|       |        }
   22|  4.07k|    }

_RINvXNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   83|    764|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    764|    where
   85|    764|        S: Serializer,
   86|    764|    {
   87|    764|        let bytes = self.to_bytes();
   88|    764|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    764|        }
   94|    764|        strict_bytes::serialize(&bytes, serializer)
   95|    764|    }
_RINvXs_NtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   99|    307|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    307|    where
  101|    307|        D: Deserializer<'de>,
  102|    307|    {
  103|    307|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    307|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    307|        }
  110|    307|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    307|    }
_RNvXs0_NtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary:
  115|    782|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  116|    782|        let mut next_value: bool = bool::arbitrary(u)?;
  117|    782|        let mut ranges = Vec::new();
  118|    782|        let mut index = 0u64;
  119|    782|        let mut total_len: u64 = 0;
  120|       |
  121|    782|        let size = u.arbitrary_len::<(u64, u8)>()?;
  122|       |
  123|    782|        for _ in 0..size {
  124|       |            // 3 line crappy "power-law" distribution
  125|  4.43k|            let len = u64::arbitrary(u)?;
  126|  4.43k|            let shift = u.int_in_range(0..=63)?;
  127|  4.43k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  128|  4.43k|
  129|  4.43k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  130|  4.43k|            if ovf {
  131|     16|                break;
  132|  4.42k|            }
  133|  4.42k|            total_len = new_total_len;
  134|  4.42k|            let start = index;
  135|  4.42k|            index += len;
  136|  4.42k|            let end = index;
  137|  4.42k|
  138|  4.42k|            if next_value {
  139|  2.24k|                ranges.push(start..end);
  140|  2.24k|            }
  141|       |
  142|  4.42k|            next_value = !next_value;
  143|       |        }
  144|       |
  145|    782|        Ok(Self {
  146|    782|            ranges,
  147|    782|            ..Default::default()
  148|    782|        })
  149|    782|    }
_RNvXs0_NtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hint:
  151|    784|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  152|    784|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  153|    784|    }
_RNvMs1_NtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    307|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    307|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    307|        let version = reader.read(2);
  162|    307|        if version != 0 {
  163|      0|            return Err(Error::UnsupportedVersion);
  164|    307|        }
  165|    307|
  166|    307|        let mut next_value = reader.read(1) == 1;
  167|    307|        let mut ranges = Vec::new();
  168|    307|        let mut index = 0u64;
  169|    307|        let mut total_len: u64 = 0;
  170|       |
  171|  4.05k|        while let Some(len) = reader.read_len()? {
  172|  3.75k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  3.75k|            if ovf {
  174|      0|                return Err(Error::RLEOverflow);
  175|  3.75k|            }
  176|  3.75k|            total_len = new_total_len;
  177|  3.75k|            let start = index;
  178|  3.75k|            index += len;
  179|  3.75k|            let end = index;
  180|  3.75k|
  181|  3.75k|            if next_value {
  182|  1.90k|                ranges.push(start..end);
  183|  1.90k|            }
  184|       |
  185|  3.75k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    307|        if next_value {
  191|      0|            return Err(Error::NotMinimal);
  192|    307|        }
  193|    307|
  194|    307|        Ok(Self {
  195|    307|            ranges,
  196|    307|            ..Default::default()
  197|    307|        })
  198|    307|    }
_RNvMs1_NtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    930|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    930|        let mut iter = self.ranges();
  203|       |
  204|    930|        let first_range = match iter.next() {
  205|    334|            Some(range) => range,
  206|    596|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    334|        let mut writer = BitWriter::new();
  210|    334|        writer.write(0, 2); // version 00
  211|    334|
  212|    334|        if first_range.start == 0 {
  213|    150|            writer.write(1, 1); // the first bit is a 1
  214|    184|        } else {
  215|    184|            writer.write(0, 1); // the first bit is a 0
  216|    184|            writer.write_len(first_range.start); // the number of leading 0s
  217|    184|        }
  218|       |
  219|    334|        writer.write_len(first_range.size());
  220|    334|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  4.07k|        for range in iter {
  225|  3.74k|            writer.write_len(range.start - index); // zeros
  226|  3.74k|            writer.write_len(range.size()); // ones
  227|  3.74k|            index = range.end;
  228|  3.74k|        }
  229|       |
  230|    334|        writer.finish()
  231|    930|    }

_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  12.2k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  12.2k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  12.2k|        let res = self.peek(num_bits);
   86|  12.2k|        self.drop(num_bits);
   87|  12.2k|
   88|  12.2k|        res
   89|  12.2k|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  16.0k|    pub fn drop(&mut self, num_bits: u32) {
   62|  16.0k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  16.0k|        self.bits >>= num_bits;
   66|  16.0k|        self.num_bits -= num_bits;
   67|  16.0k|
   68|  16.0k|        // not sure why this being outside of the if improves the performance
   69|  16.0k|        // bit it does, probably related to keeping caches warm
   70|  16.0k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  16.0k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  16.0k|
   73|  16.0k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  16.0k|        if self.num_bits < 8 {
   75|  12.8k|            self.num_bits += 8;
   76|  12.8k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  12.8k|        }
   78|  16.0k|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    307|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    307|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    307|        // data.
   29|    307|        if bytes.last() == Some(&0) {
   30|      0|            return Err(Error::NotMinimal);
   31|    307|        }
   32|    307|        let mut bits = 0u64;
   33|    921|        for i in 0..2 {
   34|    614|            let byte = bytes.get(i).unwrap_or(&0);
   35|    614|            bits |= (*byte as u64) << (8 * i);
   36|    614|        }
   37|       |
   38|    307|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    307|
   40|    307|        Ok(Self {
   41|    307|            bytes,
   42|    307|            bits,
   43|    307|            num_bits: 16,
   44|    307|        })
   45|    307|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  16.0k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  16.0k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  16.0k|        let mask = (1 << num_bits) - 1;
   56|  16.0k|        (self.bits & mask) as u8
   57|  16.0k|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  2.30k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  2.30k|        let mut len = 0u64;
   95|       |
   96|  11.6k|        for i in 0..VARINT_MAX_BYTES {
   97|  11.6k|            let byte = self.read(8);
   98|  11.6k|
   99|  11.6k|            // strip off the most significant bit and add
  100|  11.6k|            // it to the output
  101|  11.6k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  11.6k|
  103|  11.6k|            // if the most significant bit is a 0, we've
  104|  11.6k|            // reached the end of the varint
  105|  11.6k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  2.30k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      0|                    break;
  110|  2.30k|                }
  111|  2.30k|                return Ok(len);
  112|  9.37k|            }
  113|       |        }
  114|       |
  115|      0|        Err(Error::InvalidVarint)
  116|  2.30k|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  4.05k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  4.05k|        // We're done.
  121|  4.05k|        if !self.has_more() {
  122|    307|            return Ok(None);
  123|  3.75k|        }
  124|  3.75k|
  125|  3.75k|        let peek6 = self.peek(6);
  126|       |
  127|  3.75k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|    713|            self.drop(1);
  130|    713|            1
  131|  3.03k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|    734|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|    734|            self.drop(6);
  135|    734|            if val < 2 {
  136|      0|                return Err(Error::NotMinimal);
  137|    734|            }
  138|    734|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  2.30k|            self.drop(2);
  142|  2.30k|            let val = self.read_varint()?;
  143|  2.30k|            if val < 16 {
  144|      0|                return Err(Error::NotMinimal);
  145|  2.30k|            }
  146|  2.30k|            val
  147|       |        };
  148|       |
  149|  3.75k|        Ok(Some(len))
  150|  4.05k|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_moreB6_:
  153|  4.05k|    pub fn has_more(&self) -> bool {
  154|  4.05k|        self.bits != 0 || !self.bytes.is_empty()
  155|  4.05k|    }

_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    334|    pub fn finish(mut self) -> Vec<u8> {
   62|    334|        if self.bits > 0 {
   63|    184|            self.bytes.push(self.bits as u8);
   64|    184|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    334|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    334|        self.bytes
   72|    334|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3newB6_:
   18|    334|    pub fn new() -> Self {
   19|    334|        Default::default()
   20|    334|    }
_RNvXs_NtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs7VpJQ1A6NWA_4core7default7Default7defaultB8_:
    5|    334|#[derive(Default, Clone, Debug)]
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  36.3k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  36.3k|        debug_assert!(num_bits <= 8);
   25|  36.3k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  36.3k|        self.bits |= (byte as u16) << self.num_bits;
   28|  36.3k|        self.num_bits += num_bits;
   29|  36.3k|
   30|  36.3k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  36.3k|        if self.num_bits >= 8 {
   32|  28.6k|            self.bytes.push(self.bits as u8);
   33|  28.6k|            self.bits >>= 8;
   34|  28.6k|            self.num_bits -= 8;
   35|  28.6k|        }
   36|  36.3k|    }
_RNvMNtNtCskIOdiUPdE2k_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  8.00k|    pub fn write_len(&mut self, len: u64) {
   40|  8.00k|        debug_assert!(len > 0);
   41|       |
   42|  8.00k|        if len == 1 {
   43|  1.45k|            // Block Single (prefix 1)
   44|  1.45k|            self.write(1, 1);
   45|  6.54k|        } else if len < 16 {
   46|  1.51k|            // Block Short (prefix 01)
   47|  1.51k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.51k|            self.write(len as u8, 4);
   49|  1.51k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  5.02k|            self.write(0, 2);
   52|  5.02k|
   53|  5.02k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  26.1k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  26.1k|                self.write(byte, 8);
   56|  26.1k|            }
   57|       |        }
   58|  8.00k|    }

_RINvXNvXNvNtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   36|    464|#[derive(Debug, Serialize)]
_RINvXs4_NtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   94|    307|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    307|    where
   96|    307|        D: Deserializer<'de>,
   97|    307|    {
   98|    307|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    307|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    307|        }
  105|    307|        Ok(Self::Unvalidated(bytes))
  106|    307|    }
_RINvXNvNtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   36|    614|#[derive(Debug, Serialize)]
_RNvXs1_NtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hint:
   71|    392|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   72|    392|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   73|    392|    }
_RNvXs1_NtCskIOdiUPdE2k_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary:
   62|    391|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   63|    391|        let bf: BitField = u.arbitrary()?;
   64|    391|        Ok(if *u.choose(&[true, false])? {
   65|    225|            Self::Validated(bf)
   66|       |        } else {
   67|    166|            Self::Unvalidated(bf.to_bytes())
   68|       |        })
   69|    391|    }

_RINvNtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs3RmiOPDzQOT_5alloc6borrow3CowShEQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  162|    307|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    307|    where
  164|    307|        T: Deserialize<'de>,
  165|    307|        D: Deserializer<'de>,
  166|    307|    {
  167|    307|        Deserialize::deserialize(deserializer)
  168|    307|    }
_RINvXs0_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   76|  6.80k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  6.80k|        where
   78|  6.80k|            D: Deserializer<'de>,
   79|  6.80k|        {
   80|  6.80k|            struct CowVisitor;
   81|  6.80k|
   82|  6.80k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  6.80k|                type Value = Cow<'de, [u8]>;
   84|  6.80k|
   85|  6.80k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  6.80k|                    formatter.write_str("a byte array")
   87|  6.80k|                }
   88|  6.80k|
   89|  6.80k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  6.80k|                where
   91|  6.80k|                    E: Error,
   92|  6.80k|                {
   93|  6.80k|                    Ok(Cow::Borrowed(v))
   94|  6.80k|                }
   95|  6.80k|
   96|  6.80k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  6.80k|                where
   98|  6.80k|                    E: Error,
   99|  6.80k|                {
  100|  6.80k|                    Ok(Cow::Owned(v.to_vec()))
  101|  6.80k|                }
  102|  6.80k|
  103|  6.80k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  6.80k|                where
  105|  6.80k|                    E: Error,
  106|  6.80k|                {
  107|  6.80k|                    Ok(Cow::Owned(v))
  108|  6.80k|                }
  109|  6.80k|            }
  110|  6.80k|            deserializer.deserialize_bytes(CowVisitor)
  111|  6.80k|        }
_RINvXNvXs_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCshBvvHAE2XbG_5serde2de7Visitor11visit_bytesINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7VpJQ1A6NWA_4core7convert10InfallibleEECsk8K9mHYwX82_11cbor_encode:
   57|    614|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    614|                where
   59|    614|                    E: Error,
   60|    614|                {
   61|    614|                    Ok(v.into())
   62|    614|                }
_RINvXNtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   35|  12.9k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  12.9k|        where
   37|  12.9k|            S: Serializer,
   38|  12.9k|        {
   39|  12.9k|            serializer.serialize_bytes(self.as_ref())
   40|  12.9k|        }
_RINvNtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCs3RmiOPDzQOT_5alloc3vec3VechEQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  154|  1.22k|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|  1.22k|    where
  156|  1.22k|        T: ?Sized + AsRef<[u8]>,
  157|  1.22k|        S: Serializer,
  158|  1.22k|    {
  159|  1.22k|        Serialize::serialize(bytes.as_ref(), serializer)
  160|  1.22k|    }
_RINvXNvXs0_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCshBvvHAE2XbG_5serde2de7Visitor20visit_borrowed_bytesINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs7VpJQ1A6NWA_4core7convert10InfallibleEECsk8K9mHYwX82_11cbor_encode:
   89|  6.80k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  6.80k|                where
   91|  6.80k|                    E: Error,
   92|  6.80k|                {
   93|  6.80k|                    Ok(Cow::Borrowed(v))
   94|  6.80k|                }
_RINvNtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCs3RmiOPDzQOT_5alloc3vec3VechEQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  154|    614|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    614|    where
  156|    614|        T: ?Sized + AsRef<[u8]>,
  157|    614|        S: Serializer,
  158|    614|    {
  159|    614|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    614|    }
_RINvXNtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   35|  1.84k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  1.84k|        where
   37|  1.84k|            S: Serializer,
   38|  1.84k|        {
   39|  1.84k|            serializer.serialize_bytes(self.as_ref())
   40|  1.84k|        }
_RINvXs_NtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs3RmiOPDzQOT_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   44|    614|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    614|        where
   46|    614|            D: Deserializer<'de>,
   47|    614|        {
   48|    614|            struct VecVisitor;
   49|    614|
   50|    614|            impl<'de> Visitor<'de> for VecVisitor {
   51|    614|                type Value = Vec<u8>;
   52|    614|
   53|    614|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    614|                    formatter.write_str("byte array")
   55|    614|                }
   56|    614|
   57|    614|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    614|                where
   59|    614|                    E: Error,
   60|    614|                {
   61|    614|                    Ok(v.into())
   62|    614|                }
   63|    614|
   64|    614|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    614|                where
   66|    614|                    E: Error,
   67|    614|                {
   68|    614|                    Ok(v)
   69|    614|                }
   70|    614|            }
   71|    614|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    614|        }
_RINvNtNtCscjWdf6aweyr_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs3RmiOPDzQOT_5alloc3vec3VechEQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  162|    614|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    614|    where
  164|    614|        T: Deserialize<'de>,
  165|    614|        D: Deserializer<'de>,
  166|    614|    {
  167|    614|        Deserialize::deserialize(deserializer)
  168|    614|    }

_RINvCscjWdf6aweyr_17fvm_ipld_encoding6to_vecNtNtCsdYd1HzIMaKC_11common_fuzz4cbor7PayloadECsk8K9mHYwX82_11cbor_encode:
   44|    614|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    614|where
   46|    614|    T: ser::Serialize + ?Sized,
   47|    614|{
   48|    614|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    614|}
_RINvCscjWdf6aweyr_17fvm_ipld_encoding10from_sliceNtNtCsdYd1HzIMaKC_11common_fuzz4cbor7PayloadECsk8K9mHYwX82_11cbor_encode:
   61|    307|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    307|where
   63|    307|    T: de::Deserialize<'a>,
   64|    307|{
   65|    307|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    307|}

_RINvXs3_NtCs7QDi2znKIpD_10fvm_shared7addressNtB6_7AddressNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
  357|  12.9k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  358|  12.9k|    where
  359|  12.9k|        S: Serializer,
  360|  12.9k|    {
  361|  12.9k|        let address_bytes = self.to_bytes();
  362|  12.9k|        strict_bytes::Serialize::serialize(&address_bytes, s)
  363|  12.9k|    }
_RINvXs4_NtCs7QDi2znKIpD_10fvm_shared7addressNtB6_7AddressNtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
  367|  6.49k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  368|  6.49k|    where
  369|  6.49k|        D: Deserializer<'de>,
  370|  6.49k|    {
  371|  6.49k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  372|       |
  373|       |        // Create and return created address of unmarshalled bytes
  374|  6.49k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  375|  6.49k|    }
_RNCNvXNvNtCs7QDi2znKIpD_10fvm_shared7address1__NtB6_7AddressNtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hint0Csk8K9mHYwX82_11cbor_encode:
   72|    392|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCs7QDi2znKIpD_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  6.49k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  6.49k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  6.49k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  6.49k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  6.49k|    }
_RNvMNtCs7QDi2znKIpD_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|  12.9k|    pub fn to_bytes(self) -> Vec<u8> {
  169|  12.9k|        self.payload.to_bytes()
  170|  12.9k|    }
_RNCNvXNvNtCs7QDi2znKIpD_10fvm_shared7address1__NtB6_7AddressNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXNvNtCs7QDi2znKIpD_10fvm_shared7address1__NtB4_7AddressNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary:
   72|  21.1k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvNtCs7QDi2znKIpD_10fvm_shared7address12to_leb_bytes:
  378|  11.1k|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  379|  11.1k|    // write id to buffer in leb128 format
  380|  11.1k|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  381|  11.1k|}
_RNvMNtCs7QDi2znKIpD_10fvm_shared7addressNtB2_7Address3new:
   79|  6.49k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  6.49k|        Ok(Self {
   81|  6.49k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  6.49k|    }
_RNCNvXNvNtCs7QDi2znKIpD_10fvm_shared7address1__NtB6_7AddressNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrarys_0B8_:
   72|  7.07k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtCs7QDi2znKIpD_10fvm_shared7address1__NtB6_7AddressNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrarys0_0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvNtCs7QDi2znKIpD_10fvm_shared7address14from_leb_bytes:
  383|  4.18k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  384|       |    // write id to buffer in leb128 format
  385|  4.18k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  386|  4.18k|    if !remaining.is_empty() {
  387|      0|        return Err(Error::InvalidPayload);
  388|  4.18k|    }
  389|  4.18k|    Ok(id)
  390|  4.18k|}
_RNCNvNvNvNtCs7QDi2znKIpD_10fvm_shared7address1__23RECURSIVE_COUNT_Address7___getit0B9_:
   72|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNCNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address7payload1__NtB6_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hint0Csk8K9mHYwX82_11cbor_encode:
   86|    392|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXs3_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCs7VpJQ1A6NWA_4core7convert4FromNtB5_7PayloadE4fromB9_:
  166|  12.9k|    fn from(pl: Payload) -> Self {
  167|  12.9k|        match pl {
  168|  8.36k|            Payload::ID(_) => Self::ID,
  169|    788|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    754|            Payload::Actor(_) => Self::Actor,
  171|    336|            Payload::BLS(_) => Self::BLS,
  172|  2.75k|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|  12.9k|    }
_RNCNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address7payload1__NtB6_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrarys0_0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs2_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  6.49k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  6.49k|        let payload = match protocol {
  140|  4.18k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    394|                payload
  143|    394|                    .try_into()
  144|    394|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    377|                payload
  148|    377|                    .try_into()
  149|    377|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    168|                payload
  153|    168|                    .try_into()
  154|    168|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|  1.37k|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|  1.37k|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  6.49k|        Ok(payload)
  162|  6.49k|    }
_RNCNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address7payload1__NtB6_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrarys_0Ba_:
   86|  7.07k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNvNtNtCs7QDi2znKIpD_10fvm_shared7address7payload1__23RECURSIVE_COUNT_Payload7___getit0Bb_:
   86|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs2_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|  12.9k|    pub fn to_bytes(self) -> Vec<u8> {
  132|  12.9k|        let mut bz = self.to_raw_bytes();
  133|  12.9k|        bz.insert(0, Protocol::from(self) as u8);
  134|  12.9k|        bz
  135|  12.9k|    }
_RNCNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address7payload1__NtB6_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|  2.75k|    pub fn namespace(&self) -> ActorID {
   74|  2.75k|        self.namespace
   75|  2.75k|    }
_RNvXs_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtB4_16DelegatedAddressNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary:
   40|  1.62k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   41|  1.62k|        let length = u.int_in_range(0usize..=MAX_SUBADDRESS_LEN)?;
   42|  1.62k|        let mut buffer = [0u8; MAX_SUBADDRESS_LEN];
   43|  12.2k|        for b in buffer.iter_mut().take(length) {
   44|  12.2k|            *b = arbitrary::Arbitrary::arbitrary(u)?;
   45|       |        }
   46|  1.62k|        let addr = DelegatedAddress {
   47|  1.62k|            namespace: arbitrary::Arbitrary::arbitrary(u)?,
   48|  1.62k|            length,
   49|  1.62k|            buffer,
   50|  1.62k|        };
   51|  1.62k|        Ok(addr)
   52|  1.62k|    }
_RNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address7payload1__NtB4_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary9arbitrary:
   86|  21.1k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|  1.37k|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|  1.37k|        let length = subaddress.len();
   59|  1.37k|        if length > MAX_SUBADDRESS_LEN {
   60|      0|            return Err(Error::InvalidPayloadLength(length));
   61|  1.37k|        }
   62|  1.37k|        let mut addr = DelegatedAddress {
   63|  1.37k|            namespace,
   64|  1.37k|            length,
   65|  1.37k|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|  1.37k|        };
   67|  1.37k|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|  1.37k|        Ok(addr)
   69|  1.37k|    }
_RNvMs2_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|  12.9k|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|  12.9k|        use Payload::*;
  117|  12.9k|        match self {
  118|  8.36k|            ID(i) => to_leb_bytes(i),
  119|    788|            Secp256k1(arr) => arr.to_vec(),
  120|    754|            Actor(arr) => arr.to_vec(),
  121|    336|            BLS(arr) => arr.to_vec(),
  122|  2.75k|            Delegated(addr) => {
  123|  2.75k|                let mut buf = to_leb_bytes(addr.namespace());
  124|  2.75k|                buf.extend(addr.subaddress());
  125|  2.75k|                buf
  126|       |            }
  127|       |        }
  128|  12.9k|    }
_RNvMs0_NtNtCs7QDi2znKIpD_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|  2.75k|    pub fn subaddress(&self) -> &[u8] {
   80|  2.75k|        &self.buffer[..self.length]
   81|  2.75k|    }

_RNvMNtNtCs7QDi2znKIpD_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  6.49k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  6.49k|        FromPrimitive::from_u8(b)
   31|  6.49k|    }
_RNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsbgrGzZUvkp0_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  6.49k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs7QDi2znKIpD_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCsbgrGzZUvkp0_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  6.49k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RNCNvXNvNtCsdYd1HzIMaKC_11common_fuzz4cbor1__NtB6_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary9size_hint0Csk8K9mHYwX82_11cbor_encode:
   12|    392|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCsdYd1HzIMaKC_11common_fuzz4cborNtBd_7PayloadNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   12|    614|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtBd_7PayloadNtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de8AccessorNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEE0Csk8K9mHYwX82_11cbor_encode:
   12|    307|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCsdYd1HzIMaKC_11common_fuzz4cborNtB5_7PayloadNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEECsk8K9mHYwX82_11cbor_encode:
   12|    614|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtBe_7PayloadNtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   12|    307|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCsdYd1HzIMaKC_11common_fuzz4cborNtBa_7PayloadNtNtCshBvvHAE2XbG_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCsaDFhWpHCKa3_11serde_tuple10SerializerQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils9BufWriterEEECsk8K9mHYwX82_11cbor_encode:
   12|    614|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB8_7PayloadNtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCsaDFhWpHCKa3_11serde_tuple12DeserializerQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEEECsk8K9mHYwX82_11cbor_encode:
   12|    307|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCsdYd1HzIMaKC_11common_fuzz4cborNtB3_7PayloadNtNtCshBvvHAE2XbG_5serde2de11Deserialize11deserializeQINtNtCs6suAyWtTt4w_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs4ij4ozp0qFN_7cbor4ii4core5utils11SliceReaderEECsk8K9mHYwX82_11cbor_encode:
   12|    307|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCsdYd1HzIMaKC_11common_fuzz4cbor1__NtB6_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
   12|    391|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXNvNtCsdYd1HzIMaKC_11common_fuzz4cbor1__NtB4_7PayloadNtCs8xksezEEkwm_9arbitrary9Arbitrary19arbitrary_take_rest:
   12|  1.17k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

