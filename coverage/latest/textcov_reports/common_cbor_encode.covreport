_RNCNvXs8_CscUi5i6CgS3t_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0CscGWX1VTI6mZ_11cbor_encode:
  655|    740|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|    740|            <T as Arbitrary>::size_hint(d)
  657|    740|        }))
_RNCNvXs8_CscUi5i6CgS3t_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0CscGWX1VTI6mZ_11cbor_encode:
  655|  17.7k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|  17.7k|            <T as Arbitrary>::size_hint(d)
  657|  17.7k|        }))
_RNCNvXs8_CscUi5i6CgS3t_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0CscGWX1VTI6mZ_11cbor_encode:
  655|  1.11k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|  1.11k|            <T as Arbitrary>::size_hint(d)
  657|  1.11k|        }))
_RNvXsa_CscUi5i6CgS3t_9arbitraryINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  687|    370|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    370|        (0, None)
  689|    370|    }
_RNvXs8_CscUi5i6CgS3t_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  654|    370|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    370|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    370|        }))
  658|    370|    }
_RNvXs8_CscUi5i6CgS3t_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  654|    370|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    370|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    370|        }))
  658|    370|    }
_RNvXs8_CscUi5i6CgS3t_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  654|    370|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    370|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    370|        }))
  658|    370|    }
_RNvXsH_CscUi5i6CgS3t_9arbitrarymNtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  320|    370|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    370|                    let n = mem::size_of::<$ty>();
  322|    370|                    (n, Some(n))
  323|    370|                }
_RNvXs8_CscUi5i6CgS3t_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  654|    740|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  655|    740|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|       |            <T as Arbitrary>::size_hint(d)
  657|    740|        }))
  658|    740|    }
_RNCNvXs8_CscUi5i6CgS3t_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0CscGWX1VTI6mZ_11cbor_encode:
  655|  14.8k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  656|  14.8k|            <T as Arbitrary>::size_hint(d)
  657|  14.8k|        }))
_RNvXsa_CscUi5i6CgS3t_9arbitraryINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  687|    370|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    370|        (0, None)
  689|    370|    }
_RNvYNtNtNtCs7QinNm6NElH_10fvm_shared7address7payload16DelegatedAddressNtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  277|    370|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|    370|        let _ = depth;
  279|    370|        (0, None)
  280|    370|    }
_RNvXsF_CscUi5i6CgS3t_9arbitraryhNtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  320|  34.7k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  34.7k|                    let n = mem::size_of::<$ty>();
  322|  34.7k|                    (n, Some(n))
  323|  34.7k|                }
_RNvXsI_CscUi5i6CgS3t_9arbitraryyNtB5_9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
  320|    740|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    740|                    let n = mem::size_of::<$ty>();
  322|    740|                    (n, Some(n))
  323|    740|                }
_RNvYINtNtCsha3Nd4VLMHR_3cid3cid3CidKj40_ENtCscUi5i6CgS3t_9arbitrary9Arbitrary19arbitrary_take_restCslLXdxknstrT_11common_fuzz:
  189|    369|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    369|        Self::arbitrary(&mut u)
  191|    369|    }
_RNvXsa_CscUi5i6CgS3t_9arbitraryINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCslLXdxknstrT_11common_fuzz:
  679|    369|        u.arbitrary_iter()?.collect()
  680|    369|    }
_RNvXsa_CscUi5i6CgS3t_9arbitraryINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCslLXdxknstrT_11common_fuzz:
  679|    369|        u.arbitrary_iter()?.collect()
  680|    369|    }
_RNvXs8_CscUi5i6CgS3t_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCs7QinNm6NElH_10fvm_shared:
  640|    851|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  641|    851|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  642|    851|    }
_RNvXs8_CscUi5i6CgS3t_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCs7QinNm6NElH_10fvm_shared:
  640|    194|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  641|    194|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  642|    194|    }
_RNCNvXs8_CscUi5i6CgS3t_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0Cs7QinNm6NElH_10fvm_shared:
  641|  9.31k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNCNvXs8_CscUi5i6CgS3t_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0Cs7QinNm6NElH_10fvm_shared:
  641|  17.0k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RINvCscUi5i6CgS3t_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECs7QinNm6NElH_10fvm_shared:
  614|    851|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  615|    851|where
  616|    851|    F: FnMut(usize) -> Result<T>,
  617|    851|{
  618|    851|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  619|    851|    let array_ptr = array.as_mut_ptr();
  620|    851|    let dst = array_ptr as _;
  621|    851|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  622|    851|        dst,
  623|    851|        initialized: 0,
  624|    851|    };
  625|       |    unsafe {
  626|  17.0k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  627|  17.0k|            core::ptr::write(value_ptr, cb(idx)?);
  628|  17.0k|            guard.initialized += 1;
  629|       |        }
  630|    851|        mem::forget(guard);
  631|    851|        Ok(array.assume_init())
  632|       |    }
  633|    851|}
_RINvCscUi5i6CgS3t_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECs7QinNm6NElH_10fvm_shared:
  614|    194|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  615|    194|where
  616|    194|    F: FnMut(usize) -> Result<T>,
  617|    194|{
  618|    194|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  619|    194|    let array_ptr = array.as_mut_ptr();
  620|    194|    let dst = array_ptr as _;
  621|    194|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  622|    194|        dst,
  623|    194|        initialized: 0,
  624|    194|    };
  625|       |    unsafe {
  626|  9.31k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  627|  9.31k|            core::ptr::write(value_ptr, cb(idx)?);
  628|  9.31k|            guard.initialized += 1;
  629|       |        }
  630|    194|        mem::forget(guard);
  631|    194|        Ok(array.assume_init())
  632|       |    }
  633|    194|}
_RNvXsK_CscUi5i6CgS3t_9arbitraryjNtB5_9Arbitrary9size_hintCsEhuTxxpSM_17fvm_ipld_bitfield:
  320|    740|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    740|                    let n = mem::size_of::<$ty>();
  322|    740|                    (n, Some(n))
  323|    740|                }
_RNvXs1m_CscUi5i6CgS3t_9arbitraryTyhENtB6_9Arbitrary9size_hintCsEhuTxxpSM_17fvm_ipld_bitfield:
  586|    738|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  587|    738|                crate::size_hint::and_all(&[
  588|    738|                    <$last as Arbitrary>::size_hint(depth),
  589|    738|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  590|    738|                ])
  591|    738|            }
_RNvXsF_CscUi5i6CgS3t_9arbitraryhNtB5_9Arbitrary9size_hintCsEhuTxxpSM_17fvm_ipld_bitfield:
  320|    738|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    738|                    let n = mem::size_of::<$ty>();
  322|    738|                    (n, Some(n))
  323|    738|                }
_RNvXsI_CscUi5i6CgS3t_9arbitraryyNtB5_9Arbitrary9size_hintCsEhuTxxpSM_17fvm_ipld_bitfield:
  320|    738|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    738|                    let n = mem::size_of::<$ty>();
  322|    738|                    (n, Some(n))
  323|    738|                }
_RNvXs_CscUi5i6CgS3t_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|  8.76k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|  8.76k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|  8.76k|    }
_RNvXsH_CscUi5i6CgS3t_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  4.92k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  4.92k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  4.92k|                    u.fill_buffer(&mut buf)?;
  312|  4.92k|                    let mut x: $unsigned = 0;
  313|  19.7k|                    for i in 0..mem::size_of::<$ty>() {
  314|  19.7k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  19.7k|                    }
  316|  4.92k|                    Ok(x as $ty)
  317|  4.92k|                }
_RNvXsI_CscUi5i6CgS3t_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  8.99k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  8.99k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  8.99k|                    u.fill_buffer(&mut buf)?;
  312|  8.99k|                    let mut x: $unsigned = 0;
  313|  71.9k|                    for i in 0..mem::size_of::<$ty>() {
  314|  71.9k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  71.9k|                    }
  316|  8.99k|                    Ok(x as $ty)
  317|  8.99k|                }
_RNvXsF_CscUi5i6CgS3t_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  49.6k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  49.6k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  49.6k|                    u.fill_buffer(&mut buf)?;
  312|  49.6k|                    let mut x: $unsigned = 0;
  313|  49.6k|                    for i in 0..mem::size_of::<$ty>() {
  314|  49.6k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  49.6k|                    }
  316|  49.6k|                    Ok(x as $ty)
  317|  49.6k|                }

_RNCNvNtCscUi5i6CgS3t_9arbitrary9size_hint2or0CscGWX1VTI6mZ_11cbor_encode:
   48|  1.85k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCscUi5i6CgS3t_9arbitrary9size_hint3and0CscGWX1VTI6mZ_11cbor_encode:
   28|  39.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCscUi5i6CgS3t_9arbitrary9size_hint15recursion_guardNCNvXNvNtCslLXdxknstrT_11common_fuzz4cbor1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECscGWX1VTI6mZ_11cbor_encode:
   12|    370|pub fn recursion_guard(
   13|    370|    depth: usize,
   14|    370|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    370|) -> (usize, Option<usize>) {
   16|    370|    const MAX_DEPTH: usize = 20;
   17|    370|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    370|        f(depth + 1)
   21|       |    }
   22|    370|}
_RINvNtCscUi5i6CgS3t_9arbitrary9size_hint15recursion_guardNCNvXNvNtCs7QinNm6NElH_10fvm_shared7address1__NtB10_7AddressNtB4_9Arbitrary9size_hint0ECscGWX1VTI6mZ_11cbor_encode:
   12|    370|pub fn recursion_guard(
   13|    370|    depth: usize,
   14|    370|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    370|) -> (usize, Option<usize>) {
   16|    370|    const MAX_DEPTH: usize = 20;
   17|    370|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    370|        f(depth + 1)
   21|       |    }
   22|    370|}
_RNCNCNvNtCscUi5i6CgS3t_9arbitrary9size_hint3and00CscGWX1VTI6mZ_11cbor_encode:
   28|  37.7k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCscUi5i6CgS3t_9arbitrary9size_hint6or_allCscGWX1VTI6mZ_11cbor_encode:
   58|    370|    if let Some(head) = hints.first().copied() {
   59|    370|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    370|}
_RNvNtCscUi5i6CgS3t_9arbitrary9size_hint7and_allCscGWX1VTI6mZ_11cbor_encode:
   37|  4.81k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  4.81k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  4.81k|}
_RNCNCNvNtCscUi5i6CgS3t_9arbitrary9size_hint2or00CscGWX1VTI6mZ_11cbor_encode:
   48|  1.48k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCscUi5i6CgS3t_9arbitrary9size_hint2orCscGWX1VTI6mZ_11cbor_encode:
   44|  1.85k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.85k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.85k|    let upper = lhs
   47|  1.85k|        .1
   48|  1.85k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.85k|    (lower, upper)
   50|  1.85k|}
_RINvNtCscUi5i6CgS3t_9arbitrary9size_hint15recursion_guardNCNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address7payload1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECscGWX1VTI6mZ_11cbor_encode:
   12|    370|pub fn recursion_guard(
   13|    370|    depth: usize,
   14|    370|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    370|) -> (usize, Option<usize>) {
   16|    370|    const MAX_DEPTH: usize = 20;
   17|    370|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    370|        f(depth + 1)
   21|       |    }
   22|    370|}
_RNvNtCscUi5i6CgS3t_9arbitrary9size_hint3andCscGWX1VTI6mZ_11cbor_encode:
   26|  41.4k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  41.4k|    let lower = lhs.0 + rhs.0;
   28|  41.4k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  41.4k|    (lower, upper)
   30|  41.4k|}
_RNCNCNvNtCscUi5i6CgS3t_9arbitrary9size_hint3and00CsEhuTxxpSM_17fvm_ipld_bitfield:
   28|  1.47k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCscUi5i6CgS3t_9arbitrary9size_hint7and_allCsEhuTxxpSM_17fvm_ipld_bitfield:
   37|    738|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    738|    hints.iter().copied().fold((0, Some(0)), and)
   39|    738|}
_RNCNvNtCscUi5i6CgS3t_9arbitrary9size_hint3and0CsEhuTxxpSM_17fvm_ipld_bitfield:
   28|  2.21k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCscUi5i6CgS3t_9arbitrary9size_hint3andCsEhuTxxpSM_17fvm_ipld_bitfield:
   26|  2.58k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.58k|    let lower = lhs.0 + rhs.0;
   28|  2.58k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.58k|    (lower, upper)
   30|  2.58k|}

_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured3lenCslLXdxknstrT_11common_fuzz:
  108|    369|    pub fn len(&self) -> usize {
  109|    369|        self.data.len()
  110|    369|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECslLXdxknstrT_11common_fuzz:
  293|    280|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    280|    where
  295|    280|        T: Int,
  296|    280|    {
  297|    280|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    280|        self.data = &self.data[bytes_consumed..];
  299|    280|        Ok(result)
  300|    280|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECslLXdxknstrT_11common_fuzz:
  293|    369|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    369|    where
  295|    369|        T: Int,
  296|    369|    {
  297|    369|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    369|        self.data = &self.data[bytes_consumed..];
  299|    369|        Ok(result)
  300|    369|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECslLXdxknstrT_11common_fuzz:
  167|  1.48k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.48k|    where
  169|  1.48k|        A: Arbitrary<'a>,
  170|  1.48k|    {
  171|  1.48k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.48k|    }
_RNvXs_NtCscUi5i6CgS3t_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtNtNtNtCs6Rxrjdo8yUg_4core4iter6traits8iterator8Iterator4nextCslLXdxknstrT_11common_fuzz:
  726|  4.92k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|  4.92k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|  4.92k|        if keep_going {
  729|  4.55k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|    369|            None
  732|       |        }
  733|  4.92k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECslLXdxknstrT_11common_fuzz:
  302|    280|    fn int_in_range_impl<T>(
  303|    280|        range: ops::RangeInclusive<T>,
  304|    280|        mut bytes: impl Iterator<Item = u8>,
  305|    280|    ) -> Result<(T, usize)>
  306|    280|    where
  307|    280|        T: Int,
  308|    280|    {
  309|    280|        let start = *range.start();
  310|    280|        let end = *range.end();
  311|    280|        assert!(
  312|    280|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    280|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    280|        }
  321|    280|
  322|    280|        // From here on out we work with the unsigned representation. All of the
  323|    280|        // operations performed below work out just as well whether or not `T`
  324|    280|        // is a signed or unsigned integer.
  325|    280|        let start = start.to_unsigned();
  326|    280|        let end = end.to_unsigned();
  327|    280|
  328|    280|        let delta = end.wrapping_sub(start);
  329|    280|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    280|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    280|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    317|        while (bytes_consumed < mem::size_of::<T>())
  339|    317|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    280|            let byte = match bytes.next() {
  342|    243|                None => break,
  343|     37|                Some(b) => b,
  344|     37|            };
  345|     37|            bytes_consumed += 1;
  346|     37|
  347|     37|            // Combine this byte into our arbitrary integer, but avoid
  348|     37|            // overflowing the shift for `u8` and `i8`.
  349|     37|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|     37|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    280|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    280|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    280|        let result = start.wrapping_add(offset);
  365|    280|
  366|    280|        // And convert back to our maybe-signed representation.
  367|    280|        let result = T::from_unsigned(result);
  368|    280|        debug_assert!(*range.start() <= result);
  369|    280|        debug_assert!(result <= *range.end());
  370|       |
  371|    280|        Ok((result, bytes_consumed))
  372|    280|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECslLXdxknstrT_11common_fuzz:
  302|    369|    fn int_in_range_impl<T>(
  303|    369|        range: ops::RangeInclusive<T>,
  304|    369|        mut bytes: impl Iterator<Item = u8>,
  305|    369|    ) -> Result<(T, usize)>
  306|    369|    where
  307|    369|        T: Int,
  308|    369|    {
  309|    369|        let start = *range.start();
  310|    369|        let end = *range.end();
  311|    369|        assert!(
  312|    369|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    369|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    369|        }
  321|    369|
  322|    369|        // From here on out we work with the unsigned representation. All of the
  323|    369|        // operations performed below work out just as well whether or not `T`
  324|    369|        // is a signed or unsigned integer.
  325|    369|        let start = start.to_unsigned();
  326|    369|        let end = end.to_unsigned();
  327|    369|
  328|    369|        let delta = end.wrapping_sub(start);
  329|    369|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    369|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    369|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    658|        while (bytes_consumed < mem::size_of::<T>())
  339|    658|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    369|            let byte = match bytes.next() {
  342|     80|                None => break,
  343|    289|                Some(b) => b,
  344|    289|            };
  345|    289|            bytes_consumed += 1;
  346|    289|
  347|    289|            // Combine this byte into our arbitrary integer, but avoid
  348|    289|            // overflowing the shift for `u8` and `i8`.
  349|    289|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    289|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    369|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    369|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    369|        let result = start.wrapping_add(offset);
  365|    369|
  366|    369|        // And convert back to our maybe-signed representation.
  367|    369|        let result = T::from_unsigned(result);
  368|    369|        debug_assert!(*range.start() <= result);
  369|    369|        debug_assert!(result <= *range.end());
  370|       |
  371|    369|        Ok((result, bytes_consumed))
  372|    369|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECslLXdxknstrT_11common_fuzz:
  167|  8.02k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  8.02k|    where
  169|  8.02k|        A: Arbitrary<'a>,
  170|  8.02k|    {
  171|  8.02k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  8.02k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCshEOXrN4Akiw_9multihash9multihash9MultihashKj40_EECslLXdxknstrT_11common_fuzz:
  167|    280|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    280|    where
  169|    280|        A: Arbitrary<'a>,
  170|    280|    {
  171|    280|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    280|    }
_RNvXs_NtCscUi5i6CgS3t_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCs6Rxrjdo8yUg_4core4iter6traits8iterator8Iterator4nextCslLXdxknstrT_11common_fuzz:
  726|  3.10k|    fn next(&mut self) -> Option<Result<ElementType>> {
  727|  3.10k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  728|  3.10k|        if keep_going {
  729|  2.73k|            Some(Arbitrary::arbitrary(self.u))
  730|       |        } else {
  731|    369|            None
  732|       |        }
  733|  3.10k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCs7QinNm6NElH_10fvm_shared7address7AddressECslLXdxknstrT_11common_fuzz:
  606|    369|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    369|        &'b mut self,
  608|    369|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    369|        Ok(ArbitraryIter {
  610|    369|            u: &mut *self,
  611|    369|            _marker: PhantomData,
  612|    369|        })
  613|    369|    }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCslLXdxknstrT_11common_fuzz:
  132|    369|    pub fn is_empty(&self) -> bool {
  133|    369|        self.len() == 0
  134|    369|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECslLXdxknstrT_11common_fuzz:
  483|    369|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  484|    369|    where
  485|    369|        T: Int,
  486|    369|    {
  487|    369|        assert!(T::ZERO < numerator);
  488|    369|        assert!(numerator <= denominator);
  489|    369|        let x = self.int_in_range(T::ONE..=denominator)?;
  490|    369|        Ok(x <= numerator)
  491|    369|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECslLXdxknstrT_11common_fuzz:
  606|    369|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    369|        &'b mut self,
  608|    369|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    369|        Ok(ArbitraryIter {
  610|    369|            u: &mut *self,
  611|    369|            _marker: PhantomData,
  612|    369|        })
  613|    369|    }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCs7QinNm6NElH_10fvm_shared:
  132|  9.85k|    pub fn is_empty(&self) -> bool {
  133|  9.85k|        self.len() == 0
  134|  9.85k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs7QinNm6NElH_10fvm_shared:
  302|  1.30k|    fn int_in_range_impl<T>(
  303|  1.30k|        range: ops::RangeInclusive<T>,
  304|  1.30k|        mut bytes: impl Iterator<Item = u8>,
  305|  1.30k|    ) -> Result<(T, usize)>
  306|  1.30k|    where
  307|  1.30k|        T: Int,
  308|  1.30k|    {
  309|  1.30k|        let start = *range.start();
  310|  1.30k|        let end = *range.end();
  311|  1.30k|        assert!(
  312|  1.30k|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  1.30k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  1.30k|        }
  321|  1.30k|
  322|  1.30k|        // From here on out we work with the unsigned representation. All of the
  323|  1.30k|        // operations performed below work out just as well whether or not `T`
  324|  1.30k|        // is a signed or unsigned integer.
  325|  1.30k|        let start = start.to_unsigned();
  326|  1.30k|        let end = end.to_unsigned();
  327|  1.30k|
  328|  1.30k|        let delta = end.wrapping_sub(start);
  329|  1.30k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  1.30k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  1.30k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  2.60k|        while (bytes_consumed < mem::size_of::<T>())
  339|  2.60k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  1.30k|            let byte = match bytes.next() {
  342|      2|                None => break,
  343|  1.29k|                Some(b) => b,
  344|  1.29k|            };
  345|  1.29k|            bytes_consumed += 1;
  346|  1.29k|
  347|  1.29k|            // Combine this byte into our arbitrary integer, but avoid
  348|  1.29k|            // overflowing the shift for `u8` and `i8`.
  349|  1.29k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  1.29k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  1.30k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  1.30k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  1.30k|        let result = start.wrapping_add(offset);
  365|  1.30k|
  366|  1.30k|        // And convert back to our maybe-signed representation.
  367|  1.30k|        let result = T::from_unsigned(result);
  368|  1.30k|        debug_assert!(*range.start() <= result);
  369|  1.30k|        debug_assert!(result <= *range.end());
  370|       |
  371|  1.30k|        Ok((result, bytes_consumed))
  372|  1.30k|    }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured3lenCs7QinNm6NElH_10fvm_shared:
  108|  9.85k|    pub fn len(&self) -> usize {
  109|  9.85k|        self.data.len()
  110|  9.85k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECs7QinNm6NElH_10fvm_shared:
  293|  1.30k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  1.30k|    where
  295|  1.30k|        T: Int,
  296|  1.30k|    {
  297|  1.30k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  1.30k|        self.data = &self.data[bytes_consumed..];
  299|  1.30k|        Ok(result)
  300|  1.30k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsEhuTxxpSM_17fvm_ipld_bitfield:
  302|  4.74k|    fn int_in_range_impl<T>(
  303|  4.74k|        range: ops::RangeInclusive<T>,
  304|  4.74k|        mut bytes: impl Iterator<Item = u8>,
  305|  4.74k|    ) -> Result<(T, usize)>
  306|  4.74k|    where
  307|  4.74k|        T: Int,
  308|  4.74k|    {
  309|  4.74k|        let start = *range.start();
  310|  4.74k|        let end = *range.end();
  311|  4.74k|        assert!(
  312|  4.74k|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  4.74k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  4.74k|        }
  321|  4.74k|
  322|  4.74k|        // From here on out we work with the unsigned representation. All of the
  323|  4.74k|        // operations performed below work out just as well whether or not `T`
  324|  4.74k|        // is a signed or unsigned integer.
  325|  4.74k|        let start = start.to_unsigned();
  326|  4.74k|        let end = end.to_unsigned();
  327|  4.74k|
  328|  4.74k|        let delta = end.wrapping_sub(start);
  329|  4.74k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  4.74k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  4.74k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  9.48k|        while (bytes_consumed < mem::size_of::<T>())
  339|  9.48k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  4.74k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  4.74k|                Some(b) => b,
  344|  4.74k|            };
  345|  4.74k|            bytes_consumed += 1;
  346|  4.74k|
  347|  4.74k|            // Combine this byte into our arbitrary integer, but avoid
  348|  4.74k|            // overflowing the shift for `u8` and `i8`.
  349|  4.74k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  4.74k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  4.74k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  4.74k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  4.74k|        let result = start.wrapping_add(offset);
  365|  4.74k|
  366|  4.74k|        // And convert back to our maybe-signed representation.
  367|  4.74k|        let result = T::from_unsigned(result);
  368|  4.74k|        debug_assert!(*range.start() <= result);
  369|  4.74k|        debug_assert!(result <= *range.end());
  370|       |
  371|  4.74k|        Ok((result, bytes_consumed))
  372|  4.74k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsEhuTxxpSM_17fvm_ipld_bitfield:
  293|  4.74k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  4.74k|    where
  295|  4.74k|        T: Int,
  296|  4.74k|    {
  297|  4.74k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  4.74k|        self.data = &self.data[bytes_consumed..];
  299|  4.74k|        Ok(result)
  300|  4.74k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsEhuTxxpSM_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    369|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    369|    where
  169|    369|        A: Arbitrary<'a>,
  170|    369|    {
  171|    369|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    369|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsEhuTxxpSM_17fvm_ipld_bitfield:
  213|    738|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    738|    where
  215|    738|        ElementType: Arbitrary<'a>,
  216|    738|    {
  217|    738|        let byte_size = self.arbitrary_byte_size()?;
  218|    738|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    738|        let elem_size = upper.unwrap_or(lower * 2);
  220|    738|        let elem_size = std::cmp::max(1, elem_size);
  221|    738|        Ok(byte_size / elem_size)
  222|    738|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured6choosebECsEhuTxxpSM_17fvm_ipld_bitfield:
  408|    369|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  409|    369|        let idx = self.choose_index(choices.len())?;
  410|    369|        Ok(&choices[idx])
  411|    369|    }
_RNvXs1_NtCscUi5i6CgS3t_9arbitrary12unstructuredhNtB5_3Int12wrapping_add:
  848|    556|                fn wrapping_add(self, rhs: Self) -> Self {
  849|    556|                    <$ty>::wrapping_add(self, rhs)
  850|    556|                }
_RNvXs2_NtCscUi5i6CgS3t_9arbitrary12unstructuredtNtB5_3Int12wrapping_add:
  848|     58|                fn wrapping_add(self, rhs: Self) -> Self {
  849|     58|                    <$ty>::wrapping_add(self, rhs)
  850|     58|                }
_RNvXs2_NtCscUi5i6CgS3t_9arbitrary12unstructuredtNtB5_3Int12wrapping_sub:
  852|     58|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|     58|                    <$ty>::wrapping_sub(self, rhs)
  854|     58|                }
_RNvXs3_NtCscUi5i6CgS3t_9arbitrary12unstructuredmNtB5_3Int12wrapping_sub:
  852|  5.11k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  5.11k|                    <$ty>::wrapping_sub(self, rhs)
  854|  5.11k|                }
_RNvXs6_NtCscUi5i6CgS3t_9arbitrary12unstructuredjNtB5_3Int13from_unsigned:
  860|  1.95k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  1.95k|                    unsigned as Self
  862|  1.95k|                }
_RNvXs6_NtCscUi5i6CgS3t_9arbitrary12unstructuredjNtB5_3Int12wrapping_sub:
  852|  1.95k|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|  1.95k|                    <$ty>::wrapping_sub(self, rhs)
  854|  1.95k|                }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    369|    fn int_in_range_impl<T>(
  303|    369|        range: ops::RangeInclusive<T>,
  304|    369|        mut bytes: impl Iterator<Item = u8>,
  305|    369|    ) -> Result<(T, usize)>
  306|    369|    where
  307|    369|        T: Int,
  308|    369|    {
  309|    369|        let start = *range.start();
  310|    369|        let end = *range.end();
  311|    369|        assert!(
  312|    369|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    369|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    369|        }
  321|    369|
  322|    369|        // From here on out we work with the unsigned representation. All of the
  323|    369|        // operations performed below work out just as well whether or not `T`
  324|    369|        // is a signed or unsigned integer.
  325|    369|        let start = start.to_unsigned();
  326|    369|        let end = end.to_unsigned();
  327|    369|
  328|    369|        let delta = end.wrapping_sub(start);
  329|    369|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    369|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    369|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    666|        while (bytes_consumed < mem::size_of::<T>())
  339|    666|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    369|            let byte = match bytes.next() {
  342|     72|                None => break,
  343|    297|                Some(b) => b,
  344|    297|            };
  345|    297|            bytes_consumed += 1;
  346|    297|
  347|    297|            // Combine this byte into our arbitrary integer, but avoid
  348|    297|            // overflowing the shift for `u8` and `i8`.
  349|    297|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    297|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    369|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    369|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    369|        let result = start.wrapping_add(offset);
  365|    369|
  366|    369|        // And convert back to our maybe-signed representation.
  367|    369|        let result = T::from_unsigned(result);
  368|    369|        debug_assert!(*range.start() <= result);
  369|    369|        debug_assert!(result <= *range.end());
  370|       |
  371|    369|        Ok((result, bytes_consumed))
  372|    369|    }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  63.5k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  63.5k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  63.5k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  63.5k|        for byte in buffer[n..].iter_mut() {
  525|  2.49k|            *byte = 0;
  526|  2.49k|        }
  527|  63.5k|        self.data = &self.data[n..];
  528|  63.5k|        Ok(())
  529|  63.5k|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|    369|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    369|    where
  295|    369|        T: Int,
  296|    369|    {
  297|    369|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    369|        self.data = &self.data[bytes_consumed..];
  299|    369|        Ok(result)
  300|    369|    }
_RNvXs9_NtCscUi5i6CgS3t_9arbitrary12unstructuredlNtB5_3Int11to_unsigned:
  856|  10.2k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  10.2k|                    self as $unsigned_ty
  858|  10.2k|                }
_RNvXs1_NtCscUi5i6CgS3t_9arbitrary12unstructuredhNtB5_3Int7from_u8:
  836|    556|                fn from_u8(b: u8) -> Self {
  837|    556|                    b as Self
  838|    556|                }
_RNvXs2_NtCscUi5i6CgS3t_9arbitrary12unstructuredtNtB5_3Int7from_u8:
  836|    115|                fn from_u8(b: u8) -> Self {
  837|    115|                    b as Self
  838|    115|                }
_RNvXs3_NtCscUi5i6CgS3t_9arbitrary12unstructuredmNtB5_3Int7from_u8:
  836|  5.03k|                fn from_u8(b: u8) -> Self {
  837|  5.03k|                    b as Self
  838|  5.03k|                }
_RNvXs6_NtCscUi5i6CgS3t_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  844|  1.95k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  1.95k|                    <$ty>::checked_add(self, rhs)
  846|  1.95k|                }
_RNvXs2_NtCscUi5i6CgS3t_9arbitrary12unstructuredtNtB5_3Int11to_unsigned:
  856|    116|                fn to_unsigned(self) -> Self::Unsigned {
  857|    116|                    self as $unsigned_ty
  858|    116|                }
_RNvXs3_NtCscUi5i6CgS3t_9arbitrary12unstructuredmNtB5_3Int12wrapping_add:
  848|  5.11k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  5.11k|                    <$ty>::wrapping_add(self, rhs)
  850|  5.11k|                }
_RNvXs1_NtCscUi5i6CgS3t_9arbitrary12unstructuredhNtB5_3Int10from_usize:
  840|    556|                fn from_usize(u: usize) -> Self {
  841|    556|                    u as Self
  842|    556|                }
_RNvXs9_NtCscUi5i6CgS3t_9arbitrary12unstructuredlNtB5_3Int13from_unsigned:
  860|  5.11k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|  5.11k|                    unsigned as Self
  862|  5.11k|                }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|    369|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|    369|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|    369|        }
  454|    369|        let idx = self.int_in_range(0..=len - 1)?;
  455|    369|        Ok(idx)
  456|    369|    }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|    369|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|    369|        if self.data.len() < size {
  550|     85|            return Err(Error::NotEnoughData);
  551|    284|        }
  552|    284|
  553|    284|        let (for_buf, rest) = self.data.split_at(size);
  554|    284|        self.data = rest;
  555|    284|        Ok(for_buf)
  556|    369|    }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    556|    fn int_in_range_impl<T>(
  303|    556|        range: ops::RangeInclusive<T>,
  304|    556|        mut bytes: impl Iterator<Item = u8>,
  305|    556|    ) -> Result<(T, usize)>
  306|    556|    where
  307|    556|        T: Int,
  308|    556|    {
  309|    556|        let start = *range.start();
  310|    556|        let end = *range.end();
  311|    556|        assert!(
  312|    556|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    556|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    556|        }
  321|    556|
  322|    556|        // From here on out we work with the unsigned representation. All of the
  323|    556|        // operations performed below work out just as well whether or not `T`
  324|    556|        // is a signed or unsigned integer.
  325|    556|        let start = start.to_unsigned();
  326|    556|        let end = end.to_unsigned();
  327|    556|
  328|    556|        let delta = end.wrapping_sub(start);
  329|    556|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    556|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    556|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  1.11k|        while (bytes_consumed < mem::size_of::<T>())
  339|    556|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    556|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    556|                Some(b) => b,
  344|    556|            };
  345|    556|            bytes_consumed += 1;
  346|    556|
  347|    556|            // Combine this byte into our arbitrary integer, but avoid
  348|    556|            // overflowing the shift for `u8` and `i8`.
  349|    556|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|    556|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    556|        let offset = if delta == T::Unsigned::MAX {
  357|      1|            arbitrary_int
  358|       |        } else {
  359|    555|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    556|        let result = start.wrapping_add(offset);
  365|    556|
  366|    556|        // And convert back to our maybe-signed representation.
  367|    556|        let result = T::from_unsigned(result);
  368|    556|        debug_assert!(*range.start() <= result);
  369|    556|        debug_assert!(result <= *range.end());
  370|       |
  371|    556|        Ok((result, bytes_consumed))
  372|    556|    }
_RNvXs1_NtCscUi5i6CgS3t_9arbitrary12unstructuredhNtB5_3Int13from_unsigned:
  860|    556|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|    556|                    unsigned as Self
  862|    556|                }
_RNvXs2_NtCscUi5i6CgS3t_9arbitrary12unstructuredtNtB5_3Int13from_unsigned:
  860|     58|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  861|     58|                    unsigned as Self
  862|     58|                }
_RNvXs1_NtCscUi5i6CgS3t_9arbitrary12unstructuredhNtB5_3Int12wrapping_sub:
  852|    556|                fn wrapping_sub(self, rhs: Self) -> Self {
  853|    556|                    <$ty>::wrapping_sub(self, rhs)
  854|    556|                }
_RNvXs1_NtCscUi5i6CgS3t_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  844|    555|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|    555|                    <$ty>::checked_add(self, rhs)
  846|    555|                }
_RNvXs2_NtCscUi5i6CgS3t_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  844|     58|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|     58|                    <$ty>::checked_add(self, rhs)
  846|     58|                }
_RNvXs3_NtCscUi5i6CgS3t_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  844|  5.11k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  845|  5.11k|                    <$ty>::checked_add(self, rhs)
  846|  5.11k|                }
_RNvXs2_NtCscUi5i6CgS3t_9arbitrary12unstructuredtNtB5_3Int10from_usize:
  840|    116|                fn from_usize(u: usize) -> Self {
  841|    116|                    u as Self
  842|    116|                }
_RNvXs3_NtCscUi5i6CgS3t_9arbitrary12unstructuredmNtB5_3Int10from_usize:
  840|  10.1k|                fn from_usize(u: usize) -> Self {
  841|  10.1k|                    u as Self
  842|  10.1k|                }
_RNvXs6_NtCscUi5i6CgS3t_9arbitrary12unstructuredjNtB5_3Int12wrapping_add:
  848|  1.95k|                fn wrapping_add(self, rhs: Self) -> Self {
  849|  1.95k|                    <$ty>::wrapping_add(self, rhs)
  850|  1.95k|                }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    369|    pub fn new(data: &'a [u8]) -> Self {
   86|    369|        Unstructured { data }
   87|    369|    }
_RNvXs6_NtCscUi5i6CgS3t_9arbitrary12unstructuredjNtB5_3Int7from_u8:
  836|  1.63k|                fn from_u8(b: u8) -> Self {
  837|  1.63k|                    b as Self
  838|  1.63k|                }
_RNvXs6_NtCscUi5i6CgS3t_9arbitrary12unstructuredjNtB5_3Int11to_unsigned:
  856|  3.90k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  3.90k|                    self as $unsigned_ty
  858|  3.90k|                }
_RINvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|     58|    fn int_in_range_impl<T>(
  303|     58|        range: ops::RangeInclusive<T>,
  304|     58|        mut bytes: impl Iterator<Item = u8>,
  305|     58|    ) -> Result<(T, usize)>
  306|     58|    where
  307|     58|        T: Int,
  308|     58|    {
  309|     58|        let start = *range.start();
  310|     58|        let end = *range.end();
  311|     58|        assert!(
  312|     58|            start <= end,
  313|       |            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|     58|        if start == end {
  319|      0|            return Ok((start, 0));
  320|     58|        }
  321|     58|
  322|     58|        // From here on out we work with the unsigned representation. All of the
  323|     58|        // operations performed below work out just as well whether or not `T`
  324|     58|        // is a signed or unsigned integer.
  325|     58|        let start = start.to_unsigned();
  326|     58|        let end = end.to_unsigned();
  327|     58|
  328|     58|        let delta = end.wrapping_sub(start);
  329|     58|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|     58|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|     58|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    173|        while (bytes_consumed < mem::size_of::<T>())
  339|    116|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    115|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    115|                Some(b) => b,
  344|    115|            };
  345|    115|            bytes_consumed += 1;
  346|    115|
  347|    115|            // Combine this byte into our arbitrary integer, but avoid
  348|    115|            // overflowing the shift for `u8` and `i8`.
  349|    115|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    115|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|     58|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|     58|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|     58|        let result = start.wrapping_add(offset);
  365|     58|
  366|     58|        // And convert back to our maybe-signed representation.
  367|     58|        let result = T::from_unsigned(result);
  368|     58|        debug_assert!(*range.start() <= result);
  369|     58|        debug_assert!(result <= *range.end());
  370|       |
  371|     58|        Ok((result, bytes_consumed))
  372|     58|    }
_RNvXs1_NtCscUi5i6CgS3t_9arbitrary12unstructuredhNtB5_3Int11to_unsigned:
  856|  1.11k|                fn to_unsigned(self) -> Self::Unsigned {
  857|  1.11k|                    self as $unsigned_ty
  858|  1.11k|                }
_RNvMNtCscUi5i6CgS3t_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    738|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    738|        if self.data.is_empty() {
  226|    121|            Ok(0)
  227|    617|        } else if self.data.len() == 1 {
  228|      3|            self.data = &[];
  229|      3|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    614|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    556|                let bytes = 1;
  242|    556|                let max_size = self.data.len() - bytes;
  243|    556|                let (rest, for_size) = self.data.split_at(max_size);
  244|    556|                self.data = rest;
  245|    556|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|     58|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|     58|                let bytes = 2;
  248|     58|                let max_size = self.data.len() - bytes;
  249|     58|                let (rest, for_size) = self.data.split_at(max_size);
  250|     58|                self.data = rest;
  251|     58|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    614|            Ok(len)
  267|       |        }
  268|    738|    }
_RNvXs6_NtCscUi5i6CgS3t_9arbitrary12unstructuredjNtB5_3Int10from_usize:
  840|  3.58k|                fn from_usize(u: usize) -> Self {
  841|  3.58k|                    u as Self
  842|  3.58k|                }

_RINvYNtNtNtCstW2XqJyaU4_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
   73|    284|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    284|        let byte = pull_one(reader)?;
   75|    284|        Self::decode_with(byte, reader)
   76|    284|    }
_RINvXss_NtNtCstW2XqJyaU4_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  256|    284|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    284|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    284|                }
_RINvYNtNtNtCstW2XqJyaU4_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
   73|    568|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    568|        let byte = pull_one(reader)?;
   75|    568|        Self::decode_with(byte, reader)
   76|    568|    }
_RINvNtNtCstW2XqJyaU4_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  136|    290|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    580|    while !buf.is_empty() {
  138|    290|        let readbuf = reader.fill(buf.len())?;
  139|    290|        let readbuf = readbuf.as_ref();
  140|    290|
  141|    290|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    290|        }
  144|    290|
  145|    290|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    290|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    290|        reader.advance(len);
  148|    290|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    290|    Ok(())
  152|    290|}
_RINvYINtNtNtCstW2XqJyaU4_7cbor4ii4core5types5BytesINtNtCs6x7to2Pm9RJ_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
   73|  5.46k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  5.46k|        let byte = pull_one(reader)?;
   75|  5.46k|        Self::decode_with(byte, reader)
   76|  5.46k|    }
_RINvXs5_NtNtCstW2XqJyaU4_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCs6x7to2Pm9RJ_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  510|  5.46k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  5.46k|        use crate::alloc::borrow::Cow;
  512|  5.46k|
  513|  5.46k|        let mut buf = Vec::new();
  514|  5.46k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  5.46k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|      0|            Cow::Owned(buf)
  518|       |        }))
  519|  5.46k|    }
_RNvMNtNtCstW2XqJyaU4_7cbor4ii4core3decNtB2_9Reference6as_refCscGWX1VTI6mZ_11cbor_encode:
   81|  7.61k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  7.61k|        match self {
   83|  7.61k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  7.61k|    }
_RINvXsc_NtNtCstW2XqJyaU4_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  615|    568|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|    568|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|    568|    }
_RNvNtNtCstW2XqJyaU4_7cbor4ii4core3dec8if_majorCscGWX1VTI6mZ_11cbor_encode:
  894|    284|pub fn if_major(byte: u8) -> u8 {
  895|    284|    byte >> 5
  896|    284|}
_RINvMs0_NtNtCstW2XqJyaU4_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  227|  6.60k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  6.60k|        match self.byte & self.major_limit {
  229|  6.60k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|    717|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|     33|                let mut buf = [0; 2];
  233|     33|                pull_exact(reader, &mut buf)?;
  234|     33|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|     19|                let mut buf = [0; 4];
  238|     19|                pull_exact(reader, &mut buf)?;
  239|     19|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    238|                let mut buf = [0; 8];
  243|    238|                pull_exact(reader, &mut buf)?;
  244|    238|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  6.60k|    }
_RINvYyNtNtNtCstW2XqJyaU4_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
   73|    284|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    284|        let byte = pull_one(reader)?;
   75|    284|        Self::decode_with(byte, reader)
   76|    284|    }
_RINvNtNtCstW2XqJyaU4_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  599|  6.03k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  6.03k|    -> Result<Option<usize>, Error<R::Error>>
  601|  6.03k|{
  602|  6.03k|    if byte != (marker::START | (major << 5)) {
  603|  6.03k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  6.03k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  6.03k|        Ok(Some(len))
  606|       |    } else {
  607|      0|        Ok(None)
  608|       |    }
  609|  6.03k|}
_RINvNtNtCstW2XqJyaU4_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  125|  7.32k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  7.32k|    let b = reader.fill(1)?
  127|  7.32k|        .as_ref()
  128|  7.32k|        .get(0)
  129|  7.32k|        .copied()
  130|  7.32k|        .ok_or(Error::Eof)?;
  131|  7.32k|    reader.advance(1);
  132|  7.32k|    Ok(b)
  133|  7.32k|}
_RINvNtNtCstW2XqJyaU4_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  431|  5.46k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  5.46k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  5.46k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  5.46k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  5.46k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  5.46k|            if buf.len() >= len {
  440|  5.46k|                reader.advance(len);
  441|  5.46k|                return Ok(Some(&buf[..len]));
  442|      0|            }
  443|      0|        }
  444|       |
  445|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|      0|        while len != 0 {
  448|      0|            let readbuf = reader.fill(len)?;
  449|      0|            let readbuf = readbuf.as_ref();
  450|      0|
  451|      0|            if readbuf.is_empty() {
  452|      0|                return Err(Error::Eof);
  453|      0|            }
  454|      0|
  455|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      0|
  457|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      0|            reader.advance(readlen);
  459|      0|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|      0|            let byte = pull_one(reader)?;
  467|       |
  468|      0|            if byte == marker::BREAK {
  469|      0|                break
  470|      0|            }
  471|      0|
  472|      0|            if !reader.step_in() {
  473|      0|                return Err(Error::DepthLimit);
  474|      0|            }
  475|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|      0|            let reader = &mut *reader;
  477|       |
  478|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|      0|                buf.extend_from_slice(longbuf);
  480|      0|            }
  481|       |        }
  482|       |
  483|      0|        Ok(None)
  484|       |    }
  485|  5.46k|}
_RINvXsg_NtNtCstW2XqJyaU4_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
  707|    284|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    284|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    284|    }
_RNvMs0_NtNtCstW2XqJyaU4_7cbor4ii4core3decNtB5_7TypeNum3newCscGWX1VTI6mZ_11cbor_encode:
  179|  6.60k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  6.60k|        TypeNum { major_limit, byte }
  181|  6.60k|    }

_RINvXs1_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
   59|  12.6k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  12.6k|        match self.value {
   61|  12.6k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.43k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  12.6k|        Ok(())
   65|  12.6k|    }
_RNvMs0_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB5_7TypeNumhE3newCscGWX1VTI6mZ_11cbor_encode:
   52|  12.6k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  12.6k|        TypeNum { type_, value }
   54|  12.6k|    }
_RNvMs0_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB5_7TypeNumtE3newCscGWX1VTI6mZ_11cbor_encode:
   52|  12.6k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  12.6k|        TypeNum { type_, value }
   54|  12.6k|    }
_RINvXs4_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
   98|  13.2k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  13.2k|        match u32::try_from(self.value) {
  100|  12.7k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    476|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    476|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  13.2k|        Ok(())
  107|  13.2k|    }
_RNvMs0_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB5_7TypeNumyE3newCscGWX1VTI6mZ_11cbor_encode:
   52|  13.2k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  13.2k|        TypeNum { type_, value }
   54|  13.2k|    }
_RINvXsd_NtNtCstW2XqJyaU4_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
  270|  1.13k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.13k|        Ok(())
  272|  1.13k|    }
_RINvXsi_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtNtB8_5types3TagINtBH_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
  317|    568|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    568|        self.1.encode(writer)
  319|    568|    }
_RINvXs2_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
   70|  12.6k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  12.6k|        match u8::try_from(self.value) {
   72|  12.6k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     66|                let [x0, x1] = self.value.to_be_bytes();
   75|     66|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  12.6k|        Ok(())
   79|  12.6k|    }
_RNvMs0_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB5_7TypeNummE3newCscGWX1VTI6mZ_11cbor_encode:
   52|  12.7k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  12.7k|        TypeNum { type_, value }
   54|  12.7k|    }
_RINvXs3_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
   84|  12.7k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  12.7k|        match u16::try_from(self.value) {
   86|  12.6k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     38|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     38|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  12.7k|        Ok(())
   93|  12.7k|    }
_RINvXs7_NtNtCstW2XqJyaU4_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
  209|  10.9k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  10.9k|        writer.push(self.0)?;
  211|  10.9k|        Ok(())
  212|  10.9k|    }
_RINvXsu_NtNtCstW2XqJyaU4_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECscGWX1VTI6mZ_11cbor_encode:
  159|    568|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    568|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    568|                }

_RNvXs1_NtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCscGWX1VTI6mZ_11cbor_encode:
   84|    568|    fn step_out(&mut self) {
   85|    568|        self.limit += 1;
   86|    568|    }
_RNvXs1_NtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCscGWX1VTI6mZ_11cbor_encode:
   68|  13.0k|    fn advance(&mut self, n: usize) {
   69|  13.0k|        let len = core::cmp::min(self.buf.len(), n);
   70|  13.0k|        self.buf = &self.buf[len..];
   71|  13.0k|    }
_RNvXs_NtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCscGWX1VTI6mZ_11cbor_encode:
   40|  24.1k|        self.0.try_reserve(input.len())?;
   41|  24.1k|        self.0.extend_from_slice(input);
   42|  24.1k|        Ok(())
   43|  24.1k|    }
_RNvXs1_NtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCscGWX1VTI6mZ_11cbor_encode:
   62|  13.6k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  13.6k|        let len = core::cmp::min(self.buf.len(), want);
   64|  13.6k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  13.6k|    }
_RNvXs1_NtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCscGWX1VTI6mZ_11cbor_encode:
   75|    568|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    568|            self.limit = limit;
   77|    568|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    568|    }
_RNvMNtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|    568|    pub fn into_inner(self) -> Vec<u8> {
   25|    568|        self.0
   26|    568|    }
_RNvMNtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|    568|    pub fn new(buf: Vec<u8>) -> Self {
   15|    568|       BufWriter(buf)
   16|    568|    }
_RNvMs0_NtNtCstW2XqJyaU4_7cbor4ii4core5utilsNtB5_11SliceReader3new:
   53|    284|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    284|        SliceReader { buf, limit: 256 }
   55|    284|    }

_RNvXs0_NtCsha3Nd4VLMHR_3cid3arbINtNtB7_3cid3CidKj40_ENtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
   85|    370|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   86|    370|        let v1 = size_hint::and_all(&[
   87|    370|            <[u8; 2]>::size_hint(depth),
   88|    370|            (0, Some(8)),
   89|    370|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   90|    370|        ]);
   91|    370|        if S >= 32 {
   92|    370|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   93|       |        } else {
   94|      0|            v1
   95|       |        }
   96|    370|    }
_RNvXs0_NtCsha3Nd4VLMHR_3cid3arbINtNtB7_3cid3CidKj40_ENtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitraryCslLXdxknstrT_11common_fuzz:
   58|    369|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   59|    369|        if S >= 32 && u.ratio(1, 10)? {
   60|     89|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   61|      6|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   62|    280|        }
   63|    280|
   64|    280|        let mut codec = 0u64;
   65|    280|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   66|       |
   67|    795|        while len_choice & 1 == 1 {
   68|    515|            len_choice >>= 1;
   69|    515|
   70|    515|            let x = u.arbitrary::<u8>();
   71|    515|            let next = codec
   72|    515|                .checked_shl(8)
   73|    515|                .zip(x.ok())
   74|    515|                .map(|(next, x)| next.saturating_add(x as u64));
   75|    515|
   76|    515|            match next {
   77|      0|                None => break,
   78|    515|                Some(next) => codec = next,
   79|       |            }
   80|       |        }
   81|       |
   82|    280|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   83|    369|    }
_RNCNvXs0_NtCsha3Nd4VLMHR_3cid3arbINtNtB9_3cid3CidKj40_ENtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary0CslLXdxknstrT_11common_fuzz:
   74|    515|                .map(|(next, x)| next.saturating_add(x as u64));

_RNvMNtCsha3Nd4VLMHR_3cid3cidINtB2_3CidKj40_E8to_bytesCscGWX1VTI6mZ_11cbor_encode:
  205|    568|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    568|        let mut bytes = Vec::new();
  207|    568|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    568|        debug_assert_eq!(written, bytes.len());
  209|    568|        bytes
  210|    568|    }
_RINvMNtCsha3Nd4VLMHR_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEECscGWX1VTI6mZ_11cbor_encode:
  179|    568|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    568|        let written = match self.version {
  181|     12|            Version::V0 => self.hash.write(w)?,
  182|    556|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    568|        Ok(written)
  185|    568|    }
_RNvMNtCsha3Nd4VLMHR_3cid3cidINtB2_3CidKj40_E6new_v0CscGWX1VTI6mZ_11cbor_encode:
   78|      6|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      6|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      6|        }
   82|      6|        Ok(Self {
   83|      6|            version: Version::V0,
   84|      6|            codec: DAG_PB,
   85|      6|            hash,
   86|      6|        })
   87|      6|    }
_RINvMNtCsha3Nd4VLMHR_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECscGWX1VTI6mZ_11cbor_encode:
  140|    284|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    284|        let version = varint_read_u64(&mut r)?;
  142|    284|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    284|        if [version, codec] == [0x12, 0x20] {
  146|      6|            let mut digest = [0u8; 32];
  147|      6|            r.read_exact(&mut digest)?;
  148|      6|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|      6|            return Self::new_v0(mh);
  150|    278|        }
  151|       |
  152|    278|        let version = Version::try_from(version)?;
  153|    278|        match version {
  154|      0|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    278|                let mh = Multihash::read(r)?;
  157|    278|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    284|    }
_RINvMNtCsha3Nd4VLMHR_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEECscGWX1VTI6mZ_11cbor_encode:
  162|    556|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    556|        let mut version_buf = varint_encode::u64_buffer();
  164|    556|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    556|
  166|    556|        let mut codec_buf = varint_encode::u64_buffer();
  167|    556|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    556|
  169|    556|        let mut written = version.len() + codec.len();
  170|    556|
  171|    556|        w.write_all(version)?;
  172|    556|        w.write_all(codec)?;
  173|    556|        written += self.hash.write(&mut w)?;
  174|       |
  175|    556|        Ok(written)
  176|    556|    }
_RNvMNtCsha3Nd4VLMHR_3cid3cidINtB2_3CidKj40_E3newCscGWX1VTI6mZ_11cbor_encode:
   99|    278|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    278|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    278|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    278|    }
_RNvMNtCsha3Nd4VLMHR_3cid3cidINtB2_3CidKj40_E6new_v1CscGWX1VTI6mZ_11cbor_encode:
   90|    278|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    278|        Self {
   92|    278|            version: Version::V1,
   93|    278|            codec,
   94|    278|            hash,
   95|    278|        }
   96|    278|    }
_RNvXs6_NtCsha3Nd4VLMHR_3cid3cidINtB5_3CidKj40_EINtNtCs6Rxrjdo8yUg_4core7convert7TryFromRShE8try_fromCscGWX1VTI6mZ_11cbor_encode:
  353|    284|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    284|        Self::read_bytes(&mut bytes)
  355|    284|    }
_RNvMNtCsha3Nd4VLMHR_3cid3cidINtB2_3CidKj40_E6new_v1CslLXdxknstrT_11common_fuzz:
   90|    278|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    278|        Self {
   92|    278|            version: Version::V1,
   93|    278|            codec,
   94|    278|            hash,
   95|    278|        }
   96|    278|    }
_RNvMNtCsha3Nd4VLMHR_3cid3cidINtB2_3CidKj40_E6new_v0CslLXdxknstrT_11common_fuzz:
   78|      6|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      6|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      6|        }
   82|      6|        Ok(Self {
   83|      6|            version: Version::V0,
   84|      6|            codec: DAG_PB,
   85|      6|            hash,
   86|      6|        })
   87|      6|    }

_RINvXNtCsha3Nd4VLMHR_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs77tOt2sgSgh_5serde3ser9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   29|    568|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    568|    where
   31|    568|        S: ser::Serializer,
   32|    568|    {
   33|    568|        let value = ByteBuf::from(self.to_bytes());
   34|    568|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    568|    }
_RINvXs0_NtCsha3Nd4VLMHR_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   79|    284|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    284|    where
   81|    284|        D: de::Deserializer<'de>,
   82|    284|    {
   83|    284|        /// Main visitor to deserialize a CID.
   84|    284|        ///
   85|    284|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    284|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    284|        /// to bytes.
   88|    284|        struct MainEntryVisitor<const SIZE: usize>;
   89|    284|
   90|    284|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    284|            type Value = CidGeneric<SIZE>;
   92|    284|
   93|    284|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    284|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    284|            }
   96|    284|
   97|    284|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    284|            where
   99|    284|                D: de::Deserializer<'de>,
  100|    284|            {
  101|    284|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    284|            }
  103|    284|        }
  104|    284|
  105|    284|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    284|    }
_RINvXs_NtCsha3Nd4VLMHR_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs77tOt2sgSgh_5serde2de7Visitor11visit_bytesINtNtCs65CDL91s1dP_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6Rxrjdo8yUg_4core7convert10InfallibleEECscGWX1VTI6mZ_11cbor_encode:
   48|    284|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    284|    where
   50|    284|        E: de::Error,
   51|    284|    {
   52|    284|        CidGeneric::<SIZE>::try_from(value)
   53|    284|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    284|    }
_RINvXNvXs0_NtCsha3Nd4VLMHR_3cid5serdeINtNtBb_3cid3CidKpENtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   97|    284|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    284|            where
   99|    284|                D: de::Deserializer<'de>,
  100|    284|            {
  101|    284|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    284|            }

_RNvXs0_NtCsha3Nd4VLMHR_3cid7versionyINtNtCs6Rxrjdo8yUg_4core7convert4FromNtB5_7VersionE4from:
   44|    556|    fn from(ver: Version) -> u64 {
   45|    556|        match ver {
   46|      0|            Version::V0 => 0,
   47|    556|            Version::V1 => 1,
   48|       |        }
   49|    556|    }
_RNvXs_NtCsha3Nd4VLMHR_3cid7versionNtB4_7VersionINtNtCs6Rxrjdo8yUg_4core7convert7TryFromyE8try_from:
   34|    278|    fn try_from(raw: u64) -> Result<Self> {
   35|    278|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    278|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    278|    }

rust_fuzzer_test_input:
  259|    370|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    370|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    370|
  262|    370|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    370|                // implementation. This helps the fuzzer avoid exploring all the
  264|    370|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    370|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    370|                // get to longer inputs that actually lead to interesting executions
  267|    370|                // quicker.
  268|    370|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    369|                }
  271|    369|
  272|    369|                let mut u = Unstructured::new(bytes);
  273|    369|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    369|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    369|                }
  291|       |
  292|    369|                let data = match data {
  293|    284|                    Ok(d) => d,
  294|     85|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    284|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    284|                result.to_libfuzzer_code()
  299|    370|            }
_RNvNvCscGWX1VTI6mZ_11cbor_encode1__19___libfuzzer_sys_run:
  303|    284|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    284|                $body
  305|    284|            }
_RNvXCsaOfOe962yjF_13libfuzzer_sysNtB2_6CorpusINtNtCs6Rxrjdo8yUg_4core7convert4FromuE4from:
   30|    284|    fn from(_: ()) -> Self {
   31|    284|        Self::Keep
   32|    284|    }
LLVMFuzzerTestOneInput:
   58|    370|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    370|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    370|    });
   63|    370|
   64|    370|    match test_input {
   65|    370|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    370|}
_RNCNvCsaOfOe962yjF_13libfuzzer_sys15test_input_wrap0B3_:
   59|    370|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    370|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    370|        rust_fuzzer_test_input(data_slice)
   62|    370|    });
_RNvMs_CsaOfOe962yjF_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|    284|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    284|        match self {
   42|    284|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    284|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtCshEOXrN4Akiw_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hintCscGWX1VTI6mZ_11cbor_encode:
   65|    370|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   66|    370|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   67|    370|    }
_RNCNvXs_NtCshEOXrN4Akiw_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary0CslLXdxknstrT_11common_fuzz:
   51|    413|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs_NtCshEOXrN4Akiw_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitraryCslLXdxknstrT_11common_fuzz:
   40|    280|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   41|    280|        let mut code = 0u64;
   42|    280|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   43|       |
   44|    693|        while len_choice & 1 == 1 {
   45|    413|            len_choice >>= 1;
   46|    413|
   47|    413|            let x = u.arbitrary::<u8>();
   48|    413|            let next = code
   49|    413|                .checked_shl(8)
   50|    413|                .zip(x.ok())
   51|    413|                .map(|(next, x)| next.saturating_add(x as u64));
   52|    413|
   53|    413|            match next {
   54|      0|                None => break,
   55|    413|                Some(next) => code = next,
   56|       |            }
   57|       |        }
   58|       |
   59|    280|        let size = u.int_in_range(0..=S)?;
   60|    280|        let data = u.bytes(size)?;
   61|       |
   62|    278|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   63|    280|    }

_RINvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEECscGWX1VTI6mZ_11cbor_encode:
  163|    556|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    556|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    556|    }
_RNvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB4_9MultihashKj40_E4codeCscGWX1VTI6mZ_11cbor_encode:
  120|    574|    pub const fn code(&self) -> u64 {
  121|    574|        self.code
  122|    574|    }
_RNvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB4_9MultihashKj40_E4wrapCscGWX1VTI6mZ_11cbor_encode:
  101|      6|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|      6|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|      6|        }
  105|      6|        let size = input_digest.len();
  106|      6|        let mut digest = [0; S];
  107|      6|        let mut i = 0;
  108|    198|        while i < size {
  109|    192|            digest[i] = input_digest[i];
  110|    192|            i += 1;
  111|    192|        }
  112|      6|        Ok(Self {
  113|      6|            code,
  114|      6|            size: size as u8,
  115|      6|            digest,
  116|      6|        })
  117|      6|    }
_RINvNtCshEOXrN4Akiw_9multihash9multihash14read_multihashQRShKj40_ECscGWX1VTI6mZ_11cbor_encode:
  335|    278|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    278|where
  337|    278|    R: io::Read,
  338|    278|{
  339|    278|    let code = read_u64(&mut r)?;
  340|    278|    let size = read_u64(&mut r)?;
  341|       |
  342|    278|    if size > S as u64 || size > u8::MAX as u64 {
  343|      0|        return Err(Error::InvalidSize(size));
  344|    278|    }
  345|    278|
  346|    278|    let mut digest = [0; S];
  347|    278|    r.read_exact(&mut digest[..size as usize])?;
  348|    278|    Ok((code, size as u8, digest))
  349|    278|}
_RINvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEECscGWX1VTI6mZ_11cbor_encode:
  163|     12|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     12|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     12|    }
_RINvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECscGWX1VTI6mZ_11cbor_encode:
  135|    278|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    278|    where
  137|    278|        Self: Sized,
  138|    278|    {
  139|    278|        let (code, size, digest) = read_multihash(r)?;
  140|    278|        Ok(Self { code, size, digest })
  141|    278|    }
_RNvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB4_9MultihashKj40_E6digestCscGWX1VTI6mZ_11cbor_encode:
  130|    568|    pub fn digest(&self) -> &[u8] {
  131|    568|        &self.digest[..self.size as usize]
  132|    568|    }
_RINvNtCshEOXrN4Akiw_9multihash9multihash15write_multihashQQINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEECscGWX1VTI6mZ_11cbor_encode:
  310|    556|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    556|where
  312|    556|    W: io::Write,
  313|    556|{
  314|    556|    let mut code_buf = varint_encode::u64_buffer();
  315|    556|    let code = varint_encode::u64(code, &mut code_buf);
  316|    556|
  317|    556|    let mut size_buf = varint_encode::u8_buffer();
  318|    556|    let size = varint_encode::u8(size, &mut size_buf);
  319|    556|
  320|    556|    let written = code.len() + size.len() + digest.len();
  321|    556|
  322|    556|    w.write_all(code)?;
  323|    556|    w.write_all(size)?;
  324|    556|    w.write_all(digest)?;
  325|       |
  326|    556|    Ok(written)
  327|    556|}
_RINvNtCshEOXrN4Akiw_9multihash9multihash15write_multihashQINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEECscGWX1VTI6mZ_11cbor_encode:
  310|     12|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     12|where
  312|     12|    W: io::Write,
  313|     12|{
  314|     12|    let mut code_buf = varint_encode::u64_buffer();
  315|     12|    let code = varint_encode::u64(code, &mut code_buf);
  316|     12|
  317|     12|    let mut size_buf = varint_encode::u8_buffer();
  318|     12|    let size = varint_encode::u8(size, &mut size_buf);
  319|     12|
  320|     12|    let written = code.len() + size.len() + digest.len();
  321|     12|
  322|     12|    w.write_all(code)?;
  323|     12|    w.write_all(size)?;
  324|     12|    w.write_all(digest)?;
  325|       |
  326|     12|    Ok(written)
  327|     12|}
_RNvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB4_9MultihashKj40_E4sizeCscGWX1VTI6mZ_11cbor_encode:
  125|    574|    pub const fn size(&self) -> u8 {
  126|    574|        self.size
  127|    574|    }
_RNvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB4_9MultihashKj40_E4wrapCslLXdxknstrT_11common_fuzz:
  101|    284|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    284|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    284|        }
  105|    284|        let size = input_digest.len();
  106|    284|        let mut digest = [0; S];
  107|    284|        let mut i = 0;
  108|    722|        while i < size {
  109|    438|            digest[i] = input_digest[i];
  110|    438|            i += 1;
  111|    438|        }
  112|    284|        Ok(Self {
  113|    284|            code,
  114|    284|            size: size as u8,
  115|    284|            digest,
  116|    284|        })
  117|    284|    }
_RNvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB4_9MultihashKj40_E4sizeCslLXdxknstrT_11common_fuzz:
  125|      6|    pub const fn size(&self) -> u8 {
  126|      6|        self.size
  127|      6|    }
_RNvMs_NtCshEOXrN4Akiw_9multihash9multihashINtB4_9MultihashKj40_E4codeCslLXdxknstrT_11common_fuzz:
  120|      6|    pub const fn code(&self) -> u64 {
  121|      6|        self.code
  122|      6|    }

_RNvXs4_NtCshEOXrN4Akiw_9multihash14multihash_implyINtNtCs6Rxrjdo8yUg_4core7convert4FromNtB5_4CodeE4from:
   11|     89|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCs7QinNm6NElH_10fvm_shared7address8protocol8ProtocolNtNtCs2hqiZpTxZpq_10num_traits4cast13FromPrimitive7from_u8B8_:
  448|  4.33k|    fn from_u8(n: u8) -> Option<Self> {
  449|  4.33k|        FromPrimitive::from_u64(From::from(n))
  450|  4.33k|    }

_RNvMs2_NtCs3fXOq0ohKwI_9once_cell3impINtB5_8OnceCellNtNtCs6x7to2Pm9RJ_5alloc6string6StringE14is_initializedCscGWX1VTI6mZ_11cbor_encode:
   49|    369|    pub(crate) fn is_initialized(&self) -> bool {
   50|    369|        // An `Acquire` load is enough because that makes all the initialization
   51|    369|        // operations visible to us, and, this being a fast path, weaker
   52|    369|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    369|        // `SeqCst` operations on the slow path.
   54|    369|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    369|    }

_RNvMs4_NtCs3fXOq0ohKwI_9once_cell4syncINtB5_8OnceCellNtNtCs6x7to2Pm9RJ_5alloc6string6StringE3getCscGWX1VTI6mZ_11cbor_encode:
  965|    369|        pub fn get(&self) -> Option<&T> {
  966|    369|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    369|                None
  971|       |            }
  972|    369|        }

_RNvMs1_CsclnqHbzi4fC_10scopeguardINtB5_10ScopeGuardQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCscGWX1VTI6mZ_11cbor_encode:
  326|    568|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|    568|        ScopeGuard {
  328|    568|            value: ManuallyDrop::new(v),
  329|    568|            dropfn: ManuallyDrop::new(dropfn),
  330|    568|            strategy: PhantomData,
  331|    568|        }
  332|    568|    }
_RNvXCsclnqHbzi4fC_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    568|    fn should_run() -> bool {
  232|    568|        true
  233|    568|    }
_RNvXs5_CsclnqHbzi4fC_10scopeguardINtB5_10ScopeGuardQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs6Rxrjdo8yUg_4core3ops4drop4Drop4dropCscGWX1VTI6mZ_11cbor_encode:
  470|    568|    fn drop(&mut self) {
  471|    568|        // This is OK because the fields are `ManuallyDrop`s
  472|    568|        // which will not be dropped by the compiler.
  473|    568|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|    568|        if S::should_run() {
  475|    568|            dropfn(value);
  476|    568|        }
  477|    568|    }
_RNvXs4_CsclnqHbzi4fC_10scopeguardINtB5_10ScopeGuardQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs6Rxrjdo8yUg_4core3ops5deref8DerefMut9deref_mutCscGWX1VTI6mZ_11cbor_encode:
  460|    568|    fn deref_mut(&mut self) -> &mut T {
  461|    568|        &mut *self.value
  462|    568|    }
_RINvCsclnqHbzi4fC_10scopeguard5guardQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEFBy_EuECscGWX1VTI6mZ_11cbor_encode:
  375|    568|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|    568|where
  377|    568|    F: FnOnce(T),
  378|    568|{
  379|    568|    ScopeGuard::with_strategy(v, dropfn)
  380|    568|}

_RINvXNvXsX_NtNtCs77tOt2sgSgh_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCs65CDL91s1dP_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6Rxrjdo8yUg_4core7convert10InfallibleEECscGWX1VTI6mZ_11cbor_encode:
  136|    284|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  137|    284|        where
  138|    284|            E: Error,
  139|    284|        {
  140|    284|            Ok(v)
  141|    284|        }
_RINvXsh_NtNtCs77tOt2sgSgh_5serde2de5implsINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
 1009|    284|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1010|    284|    where
 1011|    284|        D: Deserializer<'de>,
 1012|    284|    {
 1013|    284|        struct VecVisitor<T> {
 1014|    284|            marker: PhantomData<T>,
 1015|    284|        }
 1016|    284|
 1017|    284|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1018|    284|        where
 1019|    284|            T: Deserialize<'de>,
 1020|    284|        {
 1021|    284|            type Value = Vec<T>;
 1022|    284|
 1023|    284|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1024|    284|                formatter.write_str("a sequence")
 1025|    284|            }
 1026|    284|
 1027|    284|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|    284|            where
 1029|    284|                A: SeqAccess<'de>,
 1030|    284|            {
 1031|    284|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|    284|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|    284|
 1034|    284|                while let Some(value) = tri!(seq.next_element()) {
 1035|    284|                    values.push(value);
 1036|    284|                }
 1037|    284|
 1038|    284|                Ok(values)
 1039|    284|            }
 1040|    284|        }
 1041|    284|
 1042|    284|        let visitor = VecVisitor {
 1043|    284|            marker: PhantomData,
 1044|    284|        };
 1045|    284|        deserializer.deserialize_seq(visitor)
 1046|    284|    }
_RINvXsX_NtNtCs77tOt2sgSgh_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  111|    284|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  112|    284|            where
  113|    284|                D: Deserializer<'de>,
  114|    284|            {
  115|    284|                struct PrimitiveVisitor;
  116|    284|
  117|    284|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  118|    284|                    type Value = $primitive;
  119|    284|
  120|    284|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  121|    284|                        formatter.write_str(stringify!($primitive))
  122|    284|                    }
  123|    284|
  124|    284|                    $($($method!($val : $visit);)*)*
  125|    284|                }
  126|    284|
  127|    284|                deserializer.$deserialize(PrimitiveVisitor)
  128|    284|            }
_RINvXNvXsh_NtNtCs77tOt2sgSgh_5serde2de5implsINtNtCs6x7to2Pm9RJ_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
 1027|    284|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|    284|            where
 1029|    284|                A: SeqAccess<'de>,
 1030|    284|            {
 1031|    284|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|    284|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|       |
 1034|  4.33k|                while let Some(value) = tri!(seq.next_element()) {
 1035|  4.04k|                    values.push(value);
 1036|  4.04k|                }
 1037|       |
 1038|    284|                Ok(values)
 1039|    284|            }

_RINvYINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess12next_elementINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEECscGWX1VTI6mZ_11cbor_encode:
 1722|    284|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    284|    where
 1724|    284|        T: Deserialize<'de>,
 1725|    284|    {
 1726|    284|        self.next_element_seed(PhantomData)
 1727|    284|    }
_RINvXs3_NtCs77tOt2sgSgh_5serde2deINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  790|    284|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    284|    where
  792|    284|        D: Deserializer<'de>,
  793|    284|    {
  794|    284|        T::deserialize(deserializer)
  795|    284|    }
_RINvYINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtB2K_7PayloadNtB1K_11Deserialize11deserialize1__NtB2H_5InnerB3w_11deserializeNtB2C_9___VisitorNtB1K_7Visitor9visit_seq17___DeserializeWithECscGWX1VTI6mZ_11cbor_encode:
 1722|    284|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    284|    where
 1724|    284|        T: Deserialize<'de>,
 1725|    284|    {
 1726|    284|        self.next_element_seed(PhantomData)
 1727|    284|    }
_RINvYNtNtCsha3Nd4VLMHR_3cid5serde17BytesToCidVisitorNtNtCs77tOt2sgSgh_5serde2de7Visitor20visit_borrowed_bytesINtNtCs65CDL91s1dP_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6Rxrjdo8yUg_4core7convert10InfallibleEECscGWX1VTI6mZ_11cbor_encode:
 1562|    284|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    284|    where
 1564|    284|        E: Error,
 1565|    284|    {
 1566|    284|        self.visit_bytes(v)
 1567|    284|    }
_RINvXs3_NtCs77tOt2sgSgh_5serde2deINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  790|  4.33k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  4.33k|    where
  792|  4.33k|        D: Deserializer<'de>,
  793|  4.33k|    {
  794|  4.33k|        T::deserialize(deserializer)
  795|  4.33k|    }
_RINvYINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess12next_elementINtNtCsha3Nd4VLMHR_3cid3cid3CidKj40_EECscGWX1VTI6mZ_11cbor_encode:
 1722|    284|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    284|    where
 1724|    284|        T: Deserialize<'de>,
 1725|    284|    {
 1726|    284|        self.next_element_seed(PhantomData)
 1727|    284|    }
_RINvYINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess12next_elementNtNtCs7QinNm6NElH_10fvm_shared7address7AddressECscGWX1VTI6mZ_11cbor_encode:
 1722|  4.61k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  4.61k|    where
 1724|  4.61k|        T: Deserialize<'de>,
 1725|  4.61k|    {
 1726|  4.61k|        self.next_element_seed(PhantomData)
 1727|  4.61k|    }
_RINvXs3_NtCs77tOt2sgSgh_5serde2deINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtCsEhuTxxpSM_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  790|    284|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    284|    where
  792|    284|        D: Deserializer<'de>,
  793|    284|    {
  794|    284|        T::deserialize(deserializer)
  795|    284|    }
_RINvYNtNvXs_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCs77tOt2sgSgh_5serde2de7Visitor20visit_borrowed_bytesINtNtCs65CDL91s1dP_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6Rxrjdo8yUg_4core7convert10InfallibleEECscGWX1VTI6mZ_11cbor_encode:
 1562|    568|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    568|    where
 1564|    568|        E: Error,
 1565|    568|    {
 1566|    568|        self.visit_bytes(v)
 1567|    568|    }
_RINvYINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess12next_elementNtNtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECscGWX1VTI6mZ_11cbor_encode:
 1722|    284|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    284|    where
 1724|    284|        T: Deserialize<'de>,
 1725|    284|    {
 1726|    284|        self.next_element_seed(PhantomData)
 1727|    284|    }
_RINvYINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess12next_elementyECscGWX1VTI6mZ_11cbor_encode:
 1722|    284|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    284|    where
 1724|    284|        T: Deserialize<'de>,
 1725|    284|    {
 1726|    284|        self.next_element_seed(PhantomData)
 1727|    284|    }
_RINvXs3_NtCs77tOt2sgSgh_5serde2deINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataINtNtCsha3Nd4VLMHR_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  790|    284|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    284|    where
  792|    284|        D: Deserializer<'de>,
  793|    284|    {
  794|    284|        T::deserialize(deserializer)
  795|    284|    }
_RINvXs3_NtCs77tOt2sgSgh_5serde2deINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  790|    284|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    284|    where
  792|    284|        D: Deserializer<'de>,
  793|    284|    {
  794|    284|        T::deserialize(deserializer)
  795|    284|    }
_RINvXs3_NtCs77tOt2sgSgh_5serde2deINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtNtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  790|    284|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    284|    where
  792|    284|        D: Deserializer<'de>,
  793|    284|    {
  794|    284|        T::deserialize(deserializer)
  795|    284|    }
_RINvYINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess12next_elementNtCsEhuTxxpSM_17fvm_ipld_bitfield8BitFieldECscGWX1VTI6mZ_11cbor_encode:
 1722|    284|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    284|    where
 1724|    284|        T: Deserialize<'de>,
 1725|    284|    {
 1726|    284|        self.next_element_seed(PhantomData)
 1727|    284|    }
_RINvXs3_NtCs77tOt2sgSgh_5serde2deINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtNvXNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  790|    284|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    284|    where
  792|    284|        D: Deserializer<'de>,
  793|    284|    {
  794|    284|        T::deserialize(deserializer)
  795|    284|    }

_RINvNtNtCs77tOt2sgSgh_5serde2de9size_hint8cautiousNtNtCs7QinNm6NElH_10fvm_shared7address7AddressECscGWX1VTI6mZ_11cbor_encode:
   11|    284|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|    284|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|    284|
   14|    284|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|    284|        cmp::min(
   18|    284|            hint.unwrap_or(0),
   19|    284|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|    284|        )
   21|       |    }
   22|    284|}

_RINvXs1G_NtNtCs77tOt2sgSgh_5serde3ser5implsRINtNtCsha3Nd4VLMHR_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  452|    568|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    568|            where
  454|    568|                S: Serializer,
  455|    568|            {
  456|    568|                (**self).serialize(serializer)
  457|    568|            }
_RINvXs1G_NtNtCs77tOt2sgSgh_5serde3ser5implsRNtCsEhuTxxpSM_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  452|    568|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    568|            where
  454|    568|                S: Serializer,
  455|    568|            {
  456|    568|                (**self).serialize(serializer)
  457|    568|            }
_RINvXs1m_NtNtCs77tOt2sgSgh_5serde3ser5implsINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  190|    568|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|    568|            where
  192|    568|                S: Serializer,
  193|    568|            {
  194|    568|                serializer.collect_seq(self)
  195|    568|            }
_RINvXsH_NtNtCs77tOt2sgSgh_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   11|    568|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    568|            where
   13|    568|                S: Serializer,
   14|    568|            {
   15|    568|                serializer.$method(*self $($cast)*)
   16|    568|            }
_RINvXs1G_NtNtCs77tOt2sgSgh_5serde3ser5implsRINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  452|    568|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    568|            where
  454|    568|                S: Serializer,
  455|    568|            {
  456|    568|                (**self).serialize(serializer)
  457|    568|            }
_RINvXs1G_NtNtCs77tOt2sgSgh_5serde3ser5implsRNtNtCs7QinNm6NElH_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  452|  8.66k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  8.66k|            where
  454|  8.66k|                S: Serializer,
  455|  8.66k|            {
  456|  8.66k|                (**self).serialize(serializer)
  457|  8.66k|            }
_RINvXs1G_NtNtCs77tOt2sgSgh_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  452|    568|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    568|            where
  454|    568|                S: Serializer,
  455|    568|            {
  456|    568|                (**self).serialize(serializer)
  457|    568|            }
_RINvXs1G_NtNtCs77tOt2sgSgh_5serde3ser5implsRNtNtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  452|    568|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    568|            where
  454|    568|                S: Serializer,
  455|    568|            {
  456|    568|                (**self).serialize(serializer)
  457|    568|            }

_RINvNtCs77tOt2sgSgh_5serde3ser17iterator_len_hintINtNtNtCs6Rxrjdo8yUg_4core5slice4iter4IterNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEECscGWX1VTI6mZ_11cbor_encode:
 1948|    568|    match iter.size_hint() {
 1949|    568|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|    568|}
_RINvYQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer11collect_seqRINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEECscGWX1VTI6mZ_11cbor_encode:
 1271|    568|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|    568|    where
 1273|    568|        I: IntoIterator,
 1274|    568|        <I as IntoIterator>::Item: Serialize,
 1275|    568|    {
 1276|    568|        let mut iter = iter.into_iter();
 1277|    568|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|    568|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|    568|        serializer.end()
 1280|    568|    }
_RNCINvYQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer11collect_seqRINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEE0CscGWX1VTI6mZ_11cbor_encode:
 1278|  8.09k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));

_RINvXsc_NtCs7POcoTMcpfo_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  186|    568|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    568|    where
  188|    568|        S: Serializer,
  189|    568|    {
  190|    568|        serializer.serialize_bytes(&self.bytes)
  191|    568|    }
_RINvMNtCs7POcoTMcpfo_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEECscGWX1VTI6mZ_11cbor_encode:
   60|    568|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    568|        ByteBuf {
   62|    568|            bytes: bytes.into(),
   63|    568|        }
   64|    568|    }

_RINvNtCs65CDL91s1dP_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderECscGWX1VTI6mZ_11cbor_encode:
   26|    568|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    568|    let buf = match reader.fill(1)? {
   28|    568|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    568|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|    284|    Ok(byte)
   33|    568|}

_RNvMs_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE8try_stepCscGWX1VTI6mZ_11cbor_encode:
  101|    568|    fn try_step<'a>(
  102|    568|        &'a mut self,
  103|    568|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    568|    {
  105|    568|        if self.reader.step_in() {
  106|    568|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    568|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtB32_7PayloadNtB1W_11Deserialize11deserialize1__NtB2Z_5InnerB3O_11deserialize9___VisitorECscGWX1VTI6mZ_11cbor_encode:
  343|    284|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|    284|    where
  345|    284|        V: Visitor<'de>,
  346|    284|    {
  347|    284|        let mut de = self.try_step()?;
  348|    284|        let seq = Accessor::tuple(&mut de, len)?;
  349|    284|        visitor.visit_seq(seq)
  350|    284|    }
_RNvMs_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE3endCscGWX1VTI6mZ_11cbor_encode:
  131|    284|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    284|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    284|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc6borrow3CowShENtB30_11Deserialize11deserialize10CowVisitorECscGWX1VTI6mZ_11cbor_encode:
  239|  4.61k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  4.61k|    where
  241|  4.61k|        V: Visitor<'de>,
  242|  4.61k|    {
  243|  4.61k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|  4.61k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  4.61k|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCsha3Nd4VLMHR_3cid5serdeINtNtB3c_3cid3CidKpENtB1W_11Deserialize11deserialize16MainEntryVisitorKj40_EECscGWX1VTI6mZ_11cbor_encode:
  317|    284|    fn deserialize_newtype_struct<V>(
  318|    284|        self,
  319|    284|        name: &'static str,
  320|    284|        visitor: V,
  321|    284|    ) -> Result<V::Value, Self::Error>
  322|    284|    where
  323|    284|        V: Visitor<'de>,
  324|    284|    {
  325|    284|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  326|    284|            self.deserialize_cid(visitor)
  327|       |        } else {
  328|      0|            visitor.visit_newtype_struct(self)
  329|       |        }
  330|    284|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess17next_element_seedINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtCsEhuTxxpSM_17fvm_ipld_bitfield8BitFieldEECscGWX1VTI6mZ_11cbor_encode:
  476|    284|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    284|    where
  478|    284|        T: de::DeserializeSeed<'de>,
  479|    284|    {
  480|    284|        if self.len > 0 {
  481|    284|            self.len -= 1;
  482|    284|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    284|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess17next_element_seedINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDatayEECscGWX1VTI6mZ_11cbor_encode:
  476|    284|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    284|    where
  478|    284|        T: de::DeserializeSeed<'de>,
  479|    284|    {
  480|    284|        if self.len > 0 {
  481|    284|            self.len -= 1;
  482|    284|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    284|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1W_5implsyNtB1W_11Deserialize11deserialize16PrimitiveVisitorECscGWX1VTI6mZ_11cbor_encode:
  142|    284|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    284|        where V: Visitor<'de>
  144|    284|        {
  145|    284|            let value = <$t>::decode(&mut self.reader)?;
  146|    284|            visitor.$visit(value)
  147|    284|        }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtB32_11Deserialize11deserialize10VecVisitorECscGWX1VTI6mZ_11cbor_encode:
  250|    568|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  251|    568|    where
  252|    568|        V: Visitor<'de>,
  253|    568|    {
  254|    568|        self.deserialize_bytes(visitor)
  255|    568|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess17next_element_seedINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtNvXNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtB3D_7PayloadNtB1Q_11Deserialize11deserialize1__NtB3A_5InnerB4p_11deserializeNtB3v_9___VisitorNtB1Q_7Visitor9visit_seq17___DeserializeWithEECscGWX1VTI6mZ_11cbor_encode:
  476|    284|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    284|    where
  478|    284|        T: de::DeserializeSeed<'de>,
  479|    284|    {
  480|    284|        if self.len > 0 {
  481|    284|            self.len -= 1;
  482|    284|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    284|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess17next_element_seedINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtNtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECscGWX1VTI6mZ_11cbor_encode:
  476|    284|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    284|    where
  478|    284|        T: de::DeserializeSeed<'de>,
  479|    284|    {
  480|    284|        if self.len > 0 {
  481|    284|            self.len -= 1;
  482|    284|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    284|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess17next_element_seedINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEEECscGWX1VTI6mZ_11cbor_encode:
  476|    284|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    284|    where
  478|    284|        T: de::DeserializeSeed<'de>,
  479|    284|    {
  480|    284|        if self.len > 0 {
  481|    284|            self.len -= 1;
  482|    284|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    284|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess17next_element_seedINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEECscGWX1VTI6mZ_11cbor_encode:
  476|  4.61k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  4.61k|    where
  478|  4.61k|        T: de::DeserializeSeed<'de>,
  479|  4.61k|    {
  480|  4.61k|        if self.len > 0 {
  481|  4.33k|            self.len -= 1;
  482|  4.33k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|    284|            Ok(None)
  485|       |        }
  486|  4.61k|    }
_RINvNtCs65CDL91s1dP_18serde_ipld_dagcbor2de10from_sliceNtNtCslLXdxknstrT_11common_fuzz4cbor7PayloadECscGWX1VTI6mZ_11cbor_encode:
   40|    284|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    284|where
   42|    284|    T: de::Deserialize<'a>,
   43|    284|{
   44|    284|    let reader = SliceReader::new(buf);
   45|    284|    let mut deserializer = Deserializer::from_reader(reader);
   46|    284|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    284|    deserializer.end()?;
   48|    284|    Ok(value)
   49|    284|}
_RINvMs_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCsha3Nd4VLMHR_3cid5serdeINtNtB2k_3cid3CidKpENtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECscGWX1VTI6mZ_11cbor_encode:
  113|    284|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    284|    where
  115|    284|        V: Visitor<'de>,
  116|    284|    {
  117|    284|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    284|        match tag.0 {
  120|    284|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    284|    }
_RNCNvMs_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE8try_step0CscGWX1VTI6mZ_11cbor_encode:
  106|    568|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RNvMNtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE11from_readerCscGWX1VTI6mZ_11cbor_encode:
   93|    284|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    284|        Deserializer { reader }
   95|    284|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtB2Z_11Deserialize11deserialize10VecVisitorECscGWX1VTI6mZ_11cbor_encode:
  239|    568|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    568|    where
  241|    568|        V: Visitor<'de>,
  242|    568|    {
  243|    568|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|    568|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|    568|    }
_RINvXs7_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer17deserialize_bytesNtNtCsha3Nd4VLMHR_3cid5serde17BytesToCidVisitorECscGWX1VTI6mZ_11cbor_encode:
  628|    284|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  629|    284|        let byte = peek_one(&mut self.0.reader)?;
  630|    284|        match dec::if_major(byte) {
  631|       |            major::BYTES => {
  632|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  633|    284|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  634|    284|                    Cow::Borrowed(buf) => {
  635|    284|                        if buf.len() <= 1 || buf[0] != 0 {
  636|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  637|       |                        } else {
  638|    284|                            visitor.visit_borrowed_bytes(&buf[1..])
  639|       |                        }
  640|       |                    }
  641|      0|                    Cow::Owned(mut buf) => {
  642|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  643|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  644|       |                        } else {
  645|      0|                            buf.remove(0);
  646|      0|                            visitor.visit_byte_buf(buf)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |            }
  651|      0|            _ => Err(DecodeError::Unsupported { byte }),
  652|       |        }
  653|    284|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess17next_element_seedINtNtCs6Rxrjdo8yUg_4core6marker11PhantomDataINtNtCsha3Nd4VLMHR_3cid3cid3CidKj40_EEECscGWX1VTI6mZ_11cbor_encode:
  476|    284|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    284|    where
  478|    284|        T: de::DeserializeSeed<'de>,
  479|    284|    {
  480|    284|        if self.len > 0 {
  481|    284|            self.len -= 1;
  482|    284|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    284|    }
_RNCNvMs1_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE5arrays_0CscGWX1VTI6mZ_11cbor_encode:
  437|    284|            move |len| Ok(Accessor { de, len }),
_RNvMs1_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE5arrayCscGWX1VTI6mZ_11cbor_encode:
  433|    284|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  434|    284|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  435|    284|        array_start.0.map_or_else(
  436|    284|            || Err(DecodeError::IndefiniteSize),
  437|    284|            move |len| Ok(Accessor { de, len }),
  438|    284|        )
  439|    284|    }
_RNvMs1_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderE5tupleCscGWX1VTI6mZ_11cbor_encode:
  442|    284|    pub fn tuple(
  443|    284|        de: &'a mut Deserializer<R>,
  444|    284|        len: usize,
  445|    284|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  446|    284|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  447|       |
  448|    284|        if array_start.0 == Some(len) {
  449|    284|            Ok(Accessor { de, len })
  450|       |        } else {
  451|      0|            Err(DecodeError::RequireLength {
  452|      0|                name: "tuple",
  453|      0|                expect: len,
  454|      0|                value: array_start.0.unwrap_or(0),
  455|      0|            })
  456|       |        }
  457|    284|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtB39_7PayloadNtB1W_11Deserialize11deserialize1__NtB36_5InnerB3V_11deserialize9___VisitorECscGWX1VTI6mZ_11cbor_encode:
  353|    284|    fn deserialize_tuple_struct<V>(
  354|    284|        self,
  355|    284|        _name: &'static str,
  356|    284|        len: usize,
  357|    284|        visitor: V,
  358|    284|    ) -> Result<V::Value, Self::Error>
  359|    284|    where
  360|    284|        V: Visitor<'de>,
  361|    284|    {
  362|    284|        self.deserialize_tuple(len, visitor)
  363|    284|    }
_RNvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de9SeqAccess9size_hintCscGWX1VTI6mZ_11cbor_encode:
  489|    284|    fn size_hint(&self) -> Option<usize> {
  490|    284|        Some(self.len)
  491|    284|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderENtNtCs77tOt2sgSgh_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1W_5implsINtNtCs6x7to2Pm9RJ_5alloc3vec3VecpENtB1W_11Deserialize11deserialize10VecVisitorNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEECscGWX1VTI6mZ_11cbor_encode:
  333|    284|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|    284|    where
  335|    284|        V: Visitor<'de>,
  336|    284|    {
  337|    284|        let mut de = self.try_step()?;
  338|    284|        let seq = Accessor::array(&mut de)?;
  339|    284|        visitor.visit_seq(seq)
  340|    284|    }

_RNvXs_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer13serialize_u64CscGWX1VTI6mZ_11cbor_encode:
  123|    568|        v.encode(&mut self.writer)?;
  124|    568|        Ok(())
  125|    568|    }
_RNvMNtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterE3newCscGWX1VTI6mZ_11cbor_encode:
   51|    568|    pub fn new(writer: W) -> Serializer<W> {
   52|    568|        Serializer { writer }
   53|    568|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsha3Nd4VLMHR_3cid3cid3CidKj40_EECscGWX1VTI6mZ_11cbor_encode:
  414|    568|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    568|        value.serialize(&mut *self.ser)
  416|    568|    }
_RNvMNtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterE10into_innerCscGWX1VTI6mZ_11cbor_encode:
   56|    568|    pub fn into_inner(self) -> W {
   57|    568|        self.writer
   58|    568|    }
_RNvXs_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer15serialize_tupleCscGWX1VTI6mZ_11cbor_encode:
  239|    568|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    568|        Ok(BoundedCollect { ser: self })
  241|    568|    }
_RNvXs7_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer15serialize_bytesCscGWX1VTI6mZ_11cbor_encode:
  561|    568|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|    568|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|    568|        let prefixed = [&[0x00], value].concat();
  564|    568|        // CIDs are serialized with CBOR tag 42.
  565|    568|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|    568|        Ok(())
  567|    568|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCslLXdxknstrT_11common_fuzz4cborNtB3a_7PayloadNtB1V_9Serialize9serialize1__NtB35_5InnerB3W_9serialize15___SerializeWithECscGWX1VTI6mZ_11cbor_encode:
  414|    568|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    568|        value.serialize(&mut *self.ser)
  416|    568|    }
_RINvXs_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer24serialize_newtype_structNtNtCs7POcoTMcpfo_11serde_bytes7bytebuf7ByteBufECscGWX1VTI6mZ_11cbor_encode:
  199|    568|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    568|        self,
  201|    568|        name: &'static str,
  202|    568|        value: &T,
  203|    568|    ) -> Result<Self::Ok, Self::Error> {
  204|    568|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    568|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    568|    }
_RINvNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser6to_vecNtNtCslLXdxknstrT_11common_fuzz4cbor7PayloadECscGWX1VTI6mZ_11cbor_encode:
   23|    568|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    568|where
   25|    568|    T: Serialize + ?Sized,
   26|    568|{
   27|    568|    let writer = BufWriter::new(Vec::new());
   28|    568|    let mut serializer = Serializer::new(writer);
   29|    568|    value.serialize(&mut serializer)?;
   30|    568|    Ok(serializer.into_inner().into_inner())
   31|    568|}
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct15serialize_fieldRyECscGWX1VTI6mZ_11cbor_encode:
  414|    568|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    568|        value.serialize(&mut *self.ser)
  416|    568|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCs7QinNm6NElH_10fvm_shared7address7AddressECscGWX1VTI6mZ_11cbor_encode:
  414|    568|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    568|        value.serialize(&mut *self.ser)
  416|    568|    }
_RNvXs_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer13serialize_seqCscGWX1VTI6mZ_11cbor_encode:
  226|    568|        if let Some(len) = len {
  227|    568|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    568|        Ok(Collect {
  232|    568|            bounded: len.is_some(),
  233|    568|            ser: self,
  234|    568|        })
  235|    568|    }
_RINvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser12SerializeSeq17serialize_elementRNtNtCs7QinNm6NElH_10fvm_shared7address7AddressECscGWX1VTI6mZ_11cbor_encode:
  380|  8.09k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  8.09k|        value.serialize(&mut *self.ser)
  382|  8.09k|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCs6x7to2Pm9RJ_5alloc3vec3VecNtNtCs7QinNm6NElH_10fvm_shared7address7AddressEECscGWX1VTI6mZ_11cbor_encode:
  414|    568|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    568|        value.serialize(&mut *self.ser)
  416|    568|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsEhuTxxpSM_17fvm_ipld_bitfield8BitFieldECscGWX1VTI6mZ_11cbor_encode:
  414|    568|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    568|        value.serialize(&mut *self.ser)
  416|    568|    }
_RNvXs_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer15serialize_bytesCscGWX1VTI6mZ_11cbor_encode:
  160|  10.3k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  10.3k|        Ok(())
  162|  10.3k|    }
_RNvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct3endCscGWX1VTI6mZ_11cbor_encode:
  419|    568|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|    568|        Ok(())
  421|    568|    }
_RNvXs_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser10Serializer22serialize_tuple_structCscGWX1VTI6mZ_11cbor_encode:
  244|    568|    fn serialize_tuple_struct(
  245|    568|        self,
  246|    568|        _name: &'static str,
  247|    568|        len: usize,
  248|    568|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    568|        self.serialize_tuple(len)
  250|    568|    }
_RINvXs2_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECscGWX1VTI6mZ_11cbor_encode:
  414|    568|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    568|        value.serialize(&mut *self.ser)
  416|    568|    }
_RNvXs0_NtCs65CDL91s1dP_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterENtNtCs77tOt2sgSgh_5serde3ser12SerializeSeq3endCscGWX1VTI6mZ_11cbor_encode:
  385|    568|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|    568|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|    568|        }
  389|       |
  390|    568|        Ok(())
  391|    568|    }

_RNvXCscJLBHdvVoP8_11serde_tupleINtB2_10SerializerQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEENtNtCs77tOt2sgSgh_5serde3ser10Serializer22serialize_tuple_structCscGWX1VTI6mZ_11cbor_encode:
  158|    568|    fn serialize_tuple_struct(
  159|    568|        self,
  160|    568|        name: &'static str,
  161|    568|        len: usize,
  162|    568|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    568|        self.0.serialize_tuple_struct(name, len)
  164|    568|    }
_RINvXs_CscJLBHdvVoP8_11serde_tupleINtB5_12DeserializerQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEENtNtCs77tOt2sgSgh_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtB3R_7PayloadNtB2E_11Deserialize11deserialize1__NtB3O_5InnerB4D_11deserialize9___VisitorECscGWX1VTI6mZ_11cbor_encode:
  353|    284|    fn deserialize_tuple_struct<V>(
  354|    284|        self,
  355|    284|        name: &'static str,
  356|    284|        len: usize,
  357|    284|        visitor: V,
  358|    284|    ) -> Result<V::Value, Self::Error>
  359|    284|    where
  360|    284|        V: serde::de::Visitor<'de>,
  361|    284|    {
  362|    284|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    284|    }

_RNvNtCs59C3yQdmOZP_15unsigned_varint6decode3u64CscGWX1VTI6mZ_11cbor_encode:
  122|  1.12k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.12k|    decode!(buf, 9, u64)
  124|  1.12k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6decode7is_lastCscGWX1VTI6mZ_11cbor_encode:
   90|  3.09k|pub fn is_last(b: u8) -> bool {
   91|  3.09k|    b & 0x80 == 0
   92|  3.09k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6decode7is_lastCs7QinNm6NElH_10fvm_shared:
   90|  30.8k|pub fn is_last(b: u8) -> bool {
   91|  30.8k|    b & 0x80 == 0
   92|  30.8k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6decode3u64Cs7QinNm6NElH_10fvm_shared:
  122|  3.52k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  3.52k|    decode!(buf, 9, u64)
  124|  3.52k|}

_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode3u64CscGWX1VTI6mZ_11cbor_encode:
   69|  1.68k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.68k|    encode!(number, buf)
   71|  1.68k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode2u8CscGWX1VTI6mZ_11cbor_encode:
   45|    568|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    568|    encode!(number, buf)
   47|    568|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode9u8_bufferCscGWX1VTI6mZ_11cbor_encode:
  101|    568|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    568|    [0; U8_LEN]
  103|    568|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode10u64_bufferCscGWX1VTI6mZ_11cbor_encode:
  119|  2.80k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  2.80k|    [0; U64_LEN]
  121|  2.80k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode3u64Cs7QinNm6NElH_10fvm_shared:
   69|  7.04k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  7.04k|    encode!(number, buf)
   71|  7.04k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode10u64_bufferCs7QinNm6NElH_10fvm_shared:
  119|  7.04k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  7.04k|    [0; U64_LEN]
  121|  7.04k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode10u64_bufferCsEhuTxxpSM_17fvm_ipld_bitfield:
  119|  5.02k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  5.02k|    [0; U64_LEN]
  121|  5.02k|}
_RNvNtCs59C3yQdmOZP_15unsigned_varint6encode3u64CsEhuTxxpSM_17fvm_ipld_bitfield:
   69|  5.02k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  5.02k|    encode!(number, buf)
   71|  5.02k|}

_RINvNtCs59C3yQdmOZP_15unsigned_varint2io8read_u64QQRShECscGWX1VTI6mZ_11cbor_encode:
   31|  1.12k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.12k|                let mut b = encode::$b();
   33|  1.54k|                for i in 0 .. b.len() {
   34|  1.54k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.54k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.54k|                    }
   38|  1.54k|                    if decode::is_last(b[i]) {
   39|  1.12k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    423|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.12k|            }


_RNvXsh_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs6Rxrjdo8yUg_4core7default7Default7defaultB9_:
  152|    862|#[derive(Default)]
_RNvXsb_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1F_5slice4iter4IterINtNtNtB1F_3ops5range5RangeyEEEEIB1k_INtNtNtB1D_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1B_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1D_6traits8iterator8Iterator4nextB9_:
  438|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  439|  4.95k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.09k|        while let Some(next) = self.iter.peek() {
  444|  3.76k|            if next.start > range.end {
  445|  3.76k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.09k|        Some(range)
  453|  4.95k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1r_8adapters6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  9.91k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.91k|        self.next.as_mut()
  475|  9.91k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1X_5slice4iter4IterINtNtNtB1X_3ops5range5RangeyEEEEIB1C_INtNtNtB1V_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1T_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEE3newB9_:
  468|    862|    fn new(mut iter: I) -> Self {
  469|    862|        let next = iter.next();
  470|    862|        Self { iter, next }
  471|    862|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1X_5slice4iter4IterINtNtNtB1X_3ops5range5RangeyEEEEIB1C_INtNtNtB1V_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1T_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEE4peekB9_:
  473|  4.09k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.09k|        self.next.as_mut()
  475|  4.09k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1r_8adapters6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  1.72k|    fn new(mut iter: I) -> Self {
  469|  1.72k|        let next = iter.next();
  470|  1.72k|        Self { iter, next }
  471|  1.72k|    }
_RNvMs8_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceE10next_rangeB9_:
  354|  4.95k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  4.95k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.09k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    862|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.09k|        if advance_lhs {
  371|  4.09k|            self.lhs.next();
  372|  4.09k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.09k|        range
  377|  4.95k|    }
_RNvMs8_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  4.95k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  4.95k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.09k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    862|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.09k|        if advance_lhs {
  371|  4.09k|            self.lhs.next();
  372|  4.09k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.09k|        range
  377|  4.95k|    }
_RNvXse_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1X_5slice4iter4IterINtNtNtB1X_3ops5range5RangeyEEEEIB1C_INtNtNtB1V_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1T_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3F_NtB5_10DifferenceEENtNtNtB1V_6traits8iterator8Iterator4nextB9_:
  481|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.95k|        let next = self.next.take()?;
  484|  4.09k|        self.next = self.iter.next();
  485|  4.09k|        Some(next)
  486|  4.95k|    }
_RNvXse_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  481|  4.09k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.09k|        let next = self.next.take()?;
  484|  4.09k|        self.next = self.iter.next();
  485|  4.09k|        Some(next)
  486|  4.09k|    }
_RNCNvXs9_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1t_6traits8iterator8Iterator4next0Bb_:
  390|  4.95k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsa_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1T_5slice4iter4IterINtNtNtB1T_3ops5range5RangeyEEEEIB1y_INtNtNtB1R_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1P_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3B_NtB5_10DifferenceEE3newB9_:
  425|    862|    pub fn new(iter: I) -> Self {
  426|    862|        Self {
  427|    862|            iter: Lookahead::new(iter),
  428|    862|        }
  429|    862|    }
_RNvXs9_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  388|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  389|  4.95k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  4.95k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  4.95k|    }
_RNvMsa_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1F_5slice4iter4IterINtNtNtB1F_3ops5range5RangeyEEEEIB1k_INtNtNtB1D_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1B_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    862|    pub fn new(iter: I) -> Self {
  426|    862|        Self {
  427|    862|            iter: Lookahead::new(iter),
  428|    862|        }
  429|    862|    }
_RNvMs8_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    862|    fn new(lhs: A, rhs: B) -> Self {
  344|    862|        Self {
  345|    862|            lhs: Lookahead::new(lhs),
  346|    862|            rhs: Lookahead::new(rhs),
  347|    862|            combinator: Default::default(),
  348|    862|        }
  349|    862|    }
_RNvMs8_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3p_NtB5_10DifferenceE3newB9_:
  343|    862|    fn new(lhs: A, rhs: B) -> Self {
  344|    862|        Self {
  345|    862|            lhs: Lookahead::new(lhs),
  346|    862|            rhs: Lookahead::new(rhs),
  347|    862|            combinator: Default::default(),
  348|    862|        }
  349|    862|    }
_RNCNvXs9_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3r_NtB7_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.09k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEE3newB9_:
  468|    862|    fn new(mut iter: I) -> Self {
  469|    862|        let next = iter.next();
  470|    862|        Self { iter, next }
  471|    862|    }
_RNvXNtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  110|  4.09k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  4.09k|        // the union of a range and an empty range is just that range
  112|  4.09k|        Some(lhs)
  113|  4.09k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    862|    fn new(mut iter: I) -> Self {
  469|    862|        let next = iter.next();
  470|    862|        Self { iter, next }
  471|    862|    }
_RNvXs6_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1r_5slice4iter4IterINtNtNtB1r_3ops5range5RangeyEEEEIB16_INtNtNtB1p_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1n_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1p_6traits8iterator8Iterator4nextB9_:
  311|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  312|  4.95k|        self.0.next()
  313|  4.95k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  4.09k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.09k|        self.next.as_mut()
  475|  4.09k|    }
_RNvXsf_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs6Rxrjdo8yUg_4core7default7Default7defaultB9_:
   87|    862|#[derive(Default)]
_RNvMs5_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1r_5slice4iter4IterINtNtNtB1r_3ops5range5RangeyEEEEIB16_INtNtNtB1p_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1n_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    862|    pub fn new(a: A, b: B) -> Self {
  299|    862|        Self(Merge::new(_Combine::new(a, b)))
  300|    862|    }
_RNvXse_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  481|  4.09k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.09k|        let next = self.next.take()?;
  484|  4.09k|        self.next = self.iter.next();
  485|  4.09k|        Some(next)
  486|  4.09k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    862|    fn new(mut iter: I) -> Self {
  469|    862|        let next = iter.next();
  470|    862|        Self { iter, next }
  471|    862|    }
_RNvXs6_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBS_INtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3d_NtB5_10DifferenceENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  311|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  312|  4.95k|        self.0.next()
  313|  4.95k|    }
_RNvXse_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.95k|        let next = self.next.take()?;
  484|  4.09k|        self.next = self.iter.next();
  485|  4.09k|        Some(next)
  486|  4.95k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  4.95k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.95k|        self.next.as_mut()
  475|  4.95k|    }
_RNvMsd_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEE4peekB9_:
  473|  4.95k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.95k|        self.next.as_mut()
  475|  4.95k|    }
_RNvXs9_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  388|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  389|  4.95k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  4.95k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  4.95k|    }
_RNCNvXs9_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3r_NtB7_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4next0Bb_:
  390|  4.95k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs5_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBS_INtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3d_NtB5_10DifferenceE3newB9_:
  298|    862|    pub fn new(a: A, b: B) -> Self {
  299|    862|        Self(Merge::new(_Combine::new(a, b)))
  300|    862|    }
_RNvXsb_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1T_5slice4iter4IterINtNtNtB1T_3ops5range5RangeyEEEEIB1y_INtNtNtB1R_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1P_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3B_NtB5_10DifferenceEENtNtNtB1R_6traits8iterator8Iterator4nextB9_:
  438|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  439|  4.95k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.09k|        while let Some(next) = self.iter.peek() {
  444|  3.76k|            if next.start > range.end {
  445|  3.76k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.09k|        Some(range)
  453|  4.95k|    }
_RNvXs0_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  182|  4.09k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  4.09k|        // the difference between a range and an empty range is just that range
  184|  4.09k|        Some(lhs)
  185|  4.09k|    }
_RNCNvXs9_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1t_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.09k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())

_RNvXs3_NtCsEhuTxxpSM_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB11_8adapters6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtNtNtB11_6traits8iterator8Iterator4nextB7_:
  154|  1.72k|    fn next(&mut self) -> Option<Self::Item> {
  155|  1.72k|        self.0.next()
  156|  1.72k|    }
_RNCINvNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0B6_:
  167|  1.72k|    Ranges::new(iter::from_fn(move || {
  168|  1.72k|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|  1.72k|    }))
_RINvNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEEB4_:
  164|  1.72k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|  1.72k|    let mut iter = bits.into_iter().peekable();
  166|  1.72k|
  167|  1.72k|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|  1.72k|    }))
  181|  1.72k|}
_RINvYINtNtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB1m_5slice4iter4IterINtNtNtB1m_3ops5range5RangeyEEEEIB11_INtNtNtB1k_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1i_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB34_EBa_:
   32|    862|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    862|        Combine::new(self, other)
   34|    862|    }
_RNvXs3_NtCsEhuTxxpSM_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB13_5slice4iter4IterINtNtNtB13_3ops5range5RangeyEEEENtNtNtB11_6traits8iterator8Iterator4nextB7_:
  154|  4.95k|    fn next(&mut self) -> Option<Self::Item> {
  155|  4.95k|        self.0.next()
  156|  4.95k|    }
_RINvYINtNtCsEhuTxxpSM_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtBY_5slice4iter4IterINtNtNtBY_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBW_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBU_6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    862|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    862|        Combine::new(self, other)
   24|    862|    }
_RINvMs2_NtCsEhuTxxpSM_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB12_8adapters6copied6CopiedINtNtNtNtCs6x7to2Pm9RJ_5alloc11collections5btree3set4IteryEEE0EE3newBV_EB8_:
  140|  1.72k|    pub fn new<II>(iter: II) -> Self
  141|  1.72k|    where
  142|  1.72k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  1.72k|    {
  144|  1.72k|        Self(iter.into_iter())
  145|  1.72k|    }
_RINvMs2_NtCsEhuTxxpSM_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs6Rxrjdo8yUg_4core4iter8adapters6cloned6ClonedINtNtNtB14_5slice4iter4IterINtNtNtB14_3ops5range5RangeyEEEE3newBV_EB8_:
  140|    862|    pub fn new<II>(iter: II) -> Self
  141|    862|    where
  142|    862|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    862|    {
  144|    862|        Self(iter.into_iter())
  145|    862|    }

_RNvMs4_CsEhuTxxpSM_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  283|    862|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|    862|        iter::Ranges::new(self.ranges.iter().cloned())
  285|    862|    }
_RNvMs4_CsEhuTxxpSM_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|    862|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|    862|        self.inner_ranges()
  291|    862|            .union(ranges_from_bits(self.set.iter().copied()))
  292|    862|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|    862|    }
_RNvXsa_CsEhuTxxpSM_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs6Rxrjdo8yUg_4core7default7Default7defaultB5_:
   42|  1.02k|#[derive(Debug, Default, Clone)]

_RNvXNtCsEhuTxxpSM_17fvm_ipld_bitfield5rangeINtNtNtCs6Rxrjdo8yUg_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  4.09k|    fn size(&self) -> Self::Idx {
   17|  4.09k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  4.09k|            self.end - self.start
   21|       |        }
   22|  4.09k|    }

_RINvXs_NtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   99|    284|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    284|    where
  101|    284|        D: Deserializer<'de>,
  102|    284|    {
  103|    284|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    284|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    284|        }
  110|    284|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    284|    }
_RINvXNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   83|    704|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    704|    where
   85|    704|        S: Serializer,
   86|    704|    {
   87|    704|        let bytes = self.to_bytes();
   88|    704|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    704|        }
   94|    704|        strict_bytes::serialize(&bytes, serializer)
   95|    704|    }
_RNvXs0_NtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hint:
  151|    740|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  152|    740|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  153|    740|    }
_RNvXs0_NtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary:
  115|    738|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  116|    738|        let mut next_value: bool = bool::arbitrary(u)?;
  117|    738|        let mut ranges = Vec::new();
  118|    738|        let mut index = 0u64;
  119|    738|        let mut total_len: u64 = 0;
  120|       |
  121|    738|        let size = u.arbitrary_len::<(u64, u8)>()?;
  122|       |
  123|    738|        for _ in 0..size {
  124|       |            // 3 line crappy "power-law" distribution
  125|  4.74k|            let len = u64::arbitrary(u)?;
  126|  4.74k|            let shift = u.int_in_range(0..=63)?;
  127|  4.74k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  128|  4.74k|
  129|  4.74k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  130|  4.74k|            if ovf {
  131|     19|                break;
  132|  4.72k|            }
  133|  4.72k|            total_len = new_total_len;
  134|  4.72k|            let start = index;
  135|  4.72k|            index += len;
  136|  4.72k|            let end = index;
  137|  4.72k|
  138|  4.72k|            if next_value {
  139|  2.39k|                ranges.push(start..end);
  140|  2.39k|            }
  141|       |
  142|  4.72k|            next_value = !next_value;
  143|       |        }
  144|       |
  145|    738|        Ok(Self {
  146|    738|            ranges,
  147|    738|            ..Default::default()
  148|    738|        })
  149|    738|    }
_RNvMs1_NtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    284|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    284|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    284|        let version = reader.read(2);
  162|    284|        if version != 0 {
  163|      0|            return Err(Error::UnsupportedVersion);
  164|    284|        }
  165|    284|
  166|    284|        let mut next_value = reader.read(1) == 1;
  167|    284|        let mut ranges = Vec::new();
  168|    284|        let mut index = 0u64;
  169|    284|        let mut total_len: u64 = 0;
  170|       |
  171|  4.03k|        while let Some(len) = reader.read_len()? {
  172|  3.75k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  3.75k|            if ovf {
  174|      0|                return Err(Error::RLEOverflow);
  175|  3.75k|            }
  176|  3.75k|            total_len = new_total_len;
  177|  3.75k|            let start = index;
  178|  3.75k|            index += len;
  179|  3.75k|            let end = index;
  180|  3.75k|
  181|  3.75k|            if next_value {
  182|  1.90k|                ranges.push(start..end);
  183|  1.90k|            }
  184|       |
  185|  3.75k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    284|        if next_value {
  191|      0|            return Err(Error::NotMinimal);
  192|    284|        }
  193|    284|
  194|    284|        Ok(Self {
  195|    284|            ranges,
  196|    284|            ..Default::default()
  197|    284|        })
  198|    284|    }
_RNvMs1_NtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    862|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    862|        let mut iter = self.ranges();
  203|       |
  204|    862|        let first_range = match iter.next() {
  205|    329|            Some(range) => range,
  206|    533|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    329|        let mut writer = BitWriter::new();
  210|    329|        writer.write(0, 2); // version 00
  211|    329|
  212|    329|        if first_range.start == 0 {
  213|    144|            writer.write(1, 1); // the first bit is a 1
  214|    185|        } else {
  215|    185|            writer.write(0, 1); // the first bit is a 0
  216|    185|            writer.write_len(first_range.start); // the number of leading 0s
  217|    185|        }
  218|       |
  219|    329|        writer.write_len(first_range.size());
  220|    329|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  4.09k|        for range in iter {
  225|  3.76k|            writer.write_len(range.start - index); // zeros
  226|  3.76k|            writer.write_len(range.size()); // ones
  227|  3.76k|            index = range.end;
  228|  3.76k|        }
  229|       |
  230|    329|        writer.finish()
  231|    862|    }

_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  15.8k|    pub fn drop(&mut self, num_bits: u32) {
   62|  15.8k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  15.8k|        self.bits >>= num_bits;
   66|  15.8k|        self.num_bits -= num_bits;
   67|  15.8k|
   68|  15.8k|        // not sure why this being outside of the if improves the performance
   69|  15.8k|        // bit it does, probably related to keeping caches warm
   70|  15.8k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  15.8k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  15.8k|
   73|  15.8k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  15.8k|        if self.num_bits < 8 {
   75|  12.7k|            self.num_bits += 8;
   76|  12.7k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  12.7k|        }
   78|  15.8k|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    284|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    284|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    284|        // data.
   29|    284|        if bytes.last() == Some(&0) {
   30|      0|            return Err(Error::NotMinimal);
   31|    284|        }
   32|    284|        let mut bits = 0u64;
   33|    852|        for i in 0..2 {
   34|    568|            let byte = bytes.get(i).unwrap_or(&0);
   35|    568|            bits |= (*byte as u64) << (8 * i);
   36|    568|        }
   37|       |
   38|    284|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    284|
   40|    284|        Ok(Self {
   41|    284|            bytes,
   42|    284|            bits,
   43|    284|            num_bits: 16,
   44|    284|        })
   45|    284|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  4.03k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  4.03k|        // We're done.
  121|  4.03k|        if !self.has_more() {
  122|    284|            return Ok(None);
  123|  3.75k|        }
  124|  3.75k|
  125|  3.75k|        let peek6 = self.peek(6);
  126|       |
  127|  3.75k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|    727|            self.drop(1);
  130|    727|            1
  131|  3.02k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|    742|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|    742|            self.drop(6);
  135|    742|            if val < 2 {
  136|      0|                return Err(Error::NotMinimal);
  137|    742|            }
  138|    742|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  2.28k|            self.drop(2);
  142|  2.28k|            let val = self.read_varint()?;
  143|  2.28k|            if val < 16 {
  144|      0|                return Err(Error::NotMinimal);
  145|  2.28k|            }
  146|  2.28k|            val
  147|       |        };
  148|       |
  149|  3.75k|        Ok(Some(len))
  150|  4.03k|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  12.1k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  12.1k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  12.1k|        let res = self.peek(num_bits);
   86|  12.1k|        self.drop(num_bits);
   87|  12.1k|
   88|  12.1k|        res
   89|  12.1k|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  15.8k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  15.8k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  15.8k|        let mask = (1 << num_bits) - 1;
   56|  15.8k|        (self.bits & mask) as u8
   57|  15.8k|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_more:
  153|  4.03k|    pub fn has_more(&self) -> bool {
  154|  4.03k|        self.bits != 0 || !self.bytes.is_empty()
  155|  4.03k|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  2.28k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  2.28k|        let mut len = 0u64;
   95|       |
   96|  11.5k|        for i in 0..VARINT_MAX_BYTES {
   97|  11.5k|            let byte = self.read(8);
   98|  11.5k|
   99|  11.5k|            // strip off the most significant bit and add
  100|  11.5k|            // it to the output
  101|  11.5k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  11.5k|
  103|  11.5k|            // if the most significant bit is a 0, we've
  104|  11.5k|            // reached the end of the varint
  105|  11.5k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  2.28k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      0|                    break;
  110|  2.28k|                }
  111|  2.28k|                return Ok(len);
  112|  9.27k|            }
  113|       |        }
  114|       |
  115|      0|        Err(Error::InvalidVarint)
  116|  2.28k|    }

_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    329|    pub fn finish(mut self) -> Vec<u8> {
   62|    329|        if self.bits > 0 {
   63|    171|            self.bytes.push(self.bits as u8);
   64|    171|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    329|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    329|        self.bytes
   72|    329|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3new:
   18|    329|    pub fn new() -> Self {
   19|    329|        Default::default()
   20|    329|    }
_RNvXs_NtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs6Rxrjdo8yUg_4core7default7Default7defaultB8_:
    5|    329|#[derive(Default, Clone, Debug)]
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  36.3k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  36.3k|        debug_assert!(num_bits <= 8);
   25|  36.3k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  36.3k|        self.bits |= (byte as u16) << self.num_bits;
   28|  36.3k|        self.num_bits += num_bits;
   29|  36.3k|
   30|  36.3k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  36.3k|        if self.num_bits >= 8 {
   32|  28.6k|            self.bytes.push(self.bits as u8);
   33|  28.6k|            self.bits >>= 8;
   34|  28.6k|            self.num_bits -= 8;
   35|  28.6k|        }
   36|  36.3k|    }
_RNvMNtNtCsEhuTxxpSM_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  8.04k|    pub fn write_len(&mut self, len: u64) {
   40|  8.04k|        debug_assert!(len > 0);
   41|       |
   42|  8.04k|        if len == 1 {
   43|  1.48k|            // Block Single (prefix 1)
   44|  1.48k|            self.write(1, 1);
   45|  6.56k|        } else if len < 16 {
   46|  1.53k|            // Block Short (prefix 01)
   47|  1.53k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.53k|            self.write(len as u8, 4);
   49|  1.53k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  5.02k|            self.write(0, 2);
   52|  5.02k|
   53|  5.02k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  26.1k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  26.1k|                self.write(byte, 8);
   56|  26.1k|            }
   57|       |        }
   58|  8.04k|    }

_RINvXNvNtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   36|    568|#[derive(Debug, Serialize)]
_RINvXs4_NtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   94|    284|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    284|    where
   96|    284|        D: Deserializer<'de>,
   97|    284|    {
   98|    284|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    284|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    284|        }
  105|    284|        Ok(Self::Unvalidated(bytes))
  106|    284|    }
_RINvXNvXNvNtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1l_9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   36|    432|#[derive(Debug, Serialize)]
_RNvXs1_NtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary:
   62|    369|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   63|    369|        let bf: BitField = u.arbitrary()?;
   64|    369|        Ok(if *u.choose(&[true, false])? {
   65|    211|            Self::Validated(bf)
   66|       |        } else {
   67|    158|            Self::Unvalidated(bf.to_bytes())
   68|       |        })
   69|    369|    }
_RNvXs1_NtCsEhuTxxpSM_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hint:
   71|    370|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   72|    370|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   73|    370|    }

_RINvXNtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   35|  1.70k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  1.70k|        where
   37|  1.70k|            S: Serializer,
   38|  1.70k|        {
   39|  1.70k|            serializer.serialize_bytes(self.as_ref())
   40|  1.70k|        }
_RINvXNvXs0_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs77tOt2sgSgh_5serde2de7Visitor20visit_borrowed_bytesINtNtCs65CDL91s1dP_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6Rxrjdo8yUg_4core7convert10InfallibleEECscGWX1VTI6mZ_11cbor_encode:
   89|  4.61k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  4.61k|                where
   91|  4.61k|                    E: Error,
   92|  4.61k|                {
   93|  4.61k|                    Ok(Cow::Borrowed(v))
   94|  4.61k|                }
_RINvXNtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   35|  8.66k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  8.66k|        where
   37|  8.66k|            S: Serializer,
   38|  8.66k|        {
   39|  8.66k|            serializer.serialize_bytes(self.as_ref())
   40|  8.66k|        }
_RINvNtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  162|    568|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    568|    where
  164|    568|        T: Deserialize<'de>,
  165|    568|        D: Deserializer<'de>,
  166|    568|    {
  167|    568|        Deserialize::deserialize(deserializer)
  168|    568|    }
_RINvNtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  154|  1.13k|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|  1.13k|    where
  156|  1.13k|        T: ?Sized + AsRef<[u8]>,
  157|  1.13k|        S: Serializer,
  158|  1.13k|    {
  159|  1.13k|        Serialize::serialize(bytes.as_ref(), serializer)
  160|  1.13k|    }
_RINvNtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCs6x7to2Pm9RJ_5alloc3vec3VechEQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  154|    568|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    568|    where
  156|    568|        T: ?Sized + AsRef<[u8]>,
  157|    568|        S: Serializer,
  158|    568|    {
  159|    568|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    568|    }
_RINvNtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCs6x7to2Pm9RJ_5alloc6borrow3CowShEQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  162|    284|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    284|    where
  164|    284|        T: Deserialize<'de>,
  165|    284|        D: Deserializer<'de>,
  166|    284|    {
  167|    284|        Deserialize::deserialize(deserializer)
  168|    284|    }
_RINvXNvXs_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs77tOt2sgSgh_5serde2de7Visitor11visit_bytesINtNtCs65CDL91s1dP_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs6Rxrjdo8yUg_4core7convert10InfallibleEECscGWX1VTI6mZ_11cbor_encode:
   57|    568|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    568|                where
   59|    568|                    E: Error,
   60|    568|                {
   61|    568|                    Ok(v.into())
   62|    568|                }
_RINvXs_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   44|    568|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    568|        where
   46|    568|            D: Deserializer<'de>,
   47|    568|        {
   48|    568|            struct VecVisitor;
   49|    568|
   50|    568|            impl<'de> Visitor<'de> for VecVisitor {
   51|    568|                type Value = Vec<u8>;
   52|    568|
   53|    568|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    568|                    formatter.write_str("byte array")
   55|    568|                }
   56|    568|
   57|    568|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    568|                where
   59|    568|                    E: Error,
   60|    568|                {
   61|    568|                    Ok(v.into())
   62|    568|                }
   63|    568|
   64|    568|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    568|                where
   66|    568|                    E: Error,
   67|    568|                {
   68|    568|                    Ok(v)
   69|    568|                }
   70|    568|            }
   71|    568|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    568|        }
_RINvXs0_NtNtCskbDStf4k6dT_17fvm_ipld_encoding5bytes12strict_bytesINtNtCs6x7to2Pm9RJ_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   76|  4.61k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  4.61k|        where
   78|  4.61k|            D: Deserializer<'de>,
   79|  4.61k|        {
   80|  4.61k|            struct CowVisitor;
   81|  4.61k|
   82|  4.61k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  4.61k|                type Value = Cow<'de, [u8]>;
   84|  4.61k|
   85|  4.61k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  4.61k|                    formatter.write_str("a byte array")
   87|  4.61k|                }
   88|  4.61k|
   89|  4.61k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  4.61k|                where
   91|  4.61k|                    E: Error,
   92|  4.61k|                {
   93|  4.61k|                    Ok(Cow::Borrowed(v))
   94|  4.61k|                }
   95|  4.61k|
   96|  4.61k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  4.61k|                where
   98|  4.61k|                    E: Error,
   99|  4.61k|                {
  100|  4.61k|                    Ok(Cow::Owned(v.to_vec()))
  101|  4.61k|                }
  102|  4.61k|
  103|  4.61k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  4.61k|                where
  105|  4.61k|                    E: Error,
  106|  4.61k|                {
  107|  4.61k|                    Ok(Cow::Owned(v))
  108|  4.61k|                }
  109|  4.61k|            }
  110|  4.61k|            deserializer.deserialize_bytes(CowVisitor)
  111|  4.61k|        }

_RINvCskbDStf4k6dT_17fvm_ipld_encoding10from_sliceNtNtCslLXdxknstrT_11common_fuzz4cbor7PayloadECscGWX1VTI6mZ_11cbor_encode:
   61|    284|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    284|where
   63|    284|    T: de::Deserialize<'a>,
   64|    284|{
   65|    284|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    284|}
_RINvCskbDStf4k6dT_17fvm_ipld_encoding6to_vecNtNtCslLXdxknstrT_11common_fuzz4cbor7PayloadECscGWX1VTI6mZ_11cbor_encode:
   44|    568|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    568|where
   46|    568|    T: ser::Serialize + ?Sized,
   47|    568|{
   48|    568|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    568|}

_RNCNvXNvNtCs7QinNm6NElH_10fvm_shared7address1__NtB6_7AddressNtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hint0CscGWX1VTI6mZ_11cbor_encode:
   72|    370|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs2_NtCs7QinNm6NElH_10fvm_shared7addressNtB6_7AddressNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
  348|  8.66k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  349|  8.66k|    where
  350|  8.66k|        S: Serializer,
  351|  8.66k|    {
  352|  8.66k|        let address_bytes = self.to_bytes();
  353|  8.66k|        strict_bytes::Serialize::serialize(&address_bytes, s)
  354|  8.66k|    }
_RINvXs3_NtCs7QinNm6NElH_10fvm_shared7addressNtB6_7AddressNtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
  358|  4.33k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  359|  4.33k|    where
  360|  4.33k|        D: Deserializer<'de>,
  361|  4.33k|    {
  362|  4.33k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  363|       |
  364|       |        // Create and return created address of unmarshalled bytes
  365|  4.33k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  366|  4.33k|    }
_RNvMNtCs7QinNm6NElH_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  4.33k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  4.33k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  4.33k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  4.33k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  4.33k|    }
_RNCNvXNvNtCs7QinNm6NElH_10fvm_shared7address1__NtB6_7AddressNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrarys_0B8_:
   72|  4.92k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvNtCs7QinNm6NElH_10fvm_shared7address12to_leb_bytes:
  369|  7.04k|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  370|  7.04k|    // write id to buffer in leb128 format
  371|  7.04k|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  372|  7.04k|}
_RNvMNtCs7QinNm6NElH_10fvm_shared7addressNtB2_7Address3new:
   79|  4.33k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  4.33k|        Ok(Self {
   81|  4.33k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  4.33k|    }
_RNvNtCs7QinNm6NElH_10fvm_shared7address14from_leb_bytes:
  374|  2.47k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  375|       |    // write id to buffer in leb128 format
  376|  2.47k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  377|  2.47k|    if !remaining.is_empty() {
  378|      0|        return Err(Error::InvalidPayload);
  379|  2.47k|    }
  380|  2.47k|    Ok(id)
  381|  2.47k|}
_RNvXNvNtCs7QinNm6NElH_10fvm_shared7address1__NtB4_7AddressNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary:
   72|  14.7k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtCs7QinNm6NElH_10fvm_shared7address1__NtB6_7AddressNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrarys0_0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCs7QinNm6NElH_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|  8.66k|    pub fn to_bytes(self) -> Vec<u8> {
  169|  8.66k|        self.payload.to_bytes()
  170|  8.66k|    }
_RNCNvXNvNtCs7QinNm6NElH_10fvm_shared7address1__NtB6_7AddressNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNvNtCs7QinNm6NElH_10fvm_shared7address1__23RECURSIVE_COUNT_Address7___getit0B9_:
   72|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNCNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address7payload1__NtB6_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hint0CscGWX1VTI6mZ_11cbor_encode:
   86|    370|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvNvNvNtNtCs7QinNm6NElH_10fvm_shared7address7payload1__23RECURSIVE_COUNT_Payload7___getit0Bb_:
   86|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|  2.09k|    pub fn subaddress(&self) -> &[u8] {
   80|  2.09k|        &self.buffer[..self.length]
   81|  2.09k|    }
_RNvXs3_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCs6Rxrjdo8yUg_4core7convert4FromNtB5_7PayloadE4from:
  166|  8.66k|    fn from(pl: Payload) -> Self {
  167|  8.66k|        match pl {
  168|  4.94k|            Payload::ID(_) => Self::ID,
  169|    768|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    586|            Payload::Actor(_) => Self::Actor,
  171|    272|            Payload::BLS(_) => Self::BLS,
  172|  2.09k|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|  8.66k|    }
_RNvXs_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtB4_16DelegatedAddressNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary:
   40|  1.30k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   41|  1.30k|        let length = u.int_in_range(0usize..=MAX_SUBADDRESS_LEN)?;
   42|  1.30k|        let mut buffer = [0u8; MAX_SUBADDRESS_LEN];
   43|  10.3k|        for b in buffer.iter_mut().take(length) {
   44|  10.3k|            *b = arbitrary::Arbitrary::arbitrary(u)?;
   45|       |        }
   46|  1.30k|        let addr = DelegatedAddress {
   47|  1.30k|            namespace: arbitrary::Arbitrary::arbitrary(u)?,
   48|  1.30k|            length,
   49|  1.30k|            buffer,
   50|  1.30k|        };
   51|  1.30k|        Ok(addr)
   52|  1.30k|    }
_RNvMs0_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|  2.09k|    pub fn namespace(&self) -> ActorID {
   74|  2.09k|        self.namespace
   75|  2.09k|    }
_RNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address7payload1__NtB4_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary:
   86|  14.7k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address7payload1__NtB6_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrarys_0Ba_:
   86|  4.92k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs2_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|  8.66k|    pub fn to_bytes(self) -> Vec<u8> {
  132|  8.66k|        let mut bz = self.to_raw_bytes();
  133|  8.66k|        bz.insert(0, Protocol::from(self) as u8);
  134|  8.66k|        bz
  135|  8.66k|    }
_RNCNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address7payload1__NtB6_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrary0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs0_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|  1.04k|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|  1.04k|        let length = subaddress.len();
   59|  1.04k|        if length > MAX_SUBADDRESS_LEN {
   60|      0|            return Err(Error::InvalidPayloadLength(length));
   61|  1.04k|        }
   62|  1.04k|        let mut addr = DelegatedAddress {
   63|  1.04k|            namespace,
   64|  1.04k|            length,
   65|  1.04k|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|  1.04k|        };
   67|  1.04k|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|  1.04k|        Ok(addr)
   69|  1.04k|    }
_RNCNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address7payload1__NtB6_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary9arbitrarys0_0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs2_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|  8.66k|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|  8.66k|        use Payload::*;
  117|  8.66k|        match self {
  118|  4.94k|            ID(i) => to_leb_bytes(i),
  119|    768|            Secp256k1(arr) => arr.to_vec(),
  120|    586|            Actor(arr) => arr.to_vec(),
  121|    272|            BLS(arr) => arr.to_vec(),
  122|  2.09k|            Delegated(addr) => {
  123|  2.09k|                let mut buf = to_leb_bytes(addr.namespace());
  124|  2.09k|                buf.extend(addr.subaddress());
  125|  2.09k|                buf
  126|       |            }
  127|       |        }
  128|  8.66k|    }
_RNvMs2_NtNtCs7QinNm6NElH_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  4.33k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  4.33k|        let payload = match protocol {
  140|  2.47k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    384|                payload
  143|    384|                    .try_into()
  144|    384|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    293|                payload
  148|    293|                    .try_into()
  149|    293|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    136|                payload
  153|    136|                    .try_into()
  154|    136|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|  1.04k|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|  1.04k|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  4.33k|        Ok(payload)
  162|  4.33k|    }

_RNvMNtNtCs7QinNm6NElH_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  4.33k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  4.33k|        FromPrimitive::from_u8(b)
   31|  4.33k|    }
_RNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs2hqiZpTxZpq_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  4.33k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvXNvNtNtCs7QinNm6NElH_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs2hqiZpTxZpq_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  4.33k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RNCNvXNvNtCslLXdxknstrT_11common_fuzz4cbor1__NtB6_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary9size_hint0CscGWX1VTI6mZ_11cbor_encode:
   12|    370|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCslLXdxknstrT_11common_fuzz4cborNtB3_7PayloadNtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   12|    284|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtB8_7PayloadNtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCscJLBHdvVoP8_11serde_tuple12DeserializerQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEEECscGWX1VTI6mZ_11cbor_encode:
   12|    284|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCslLXdxknstrT_11common_fuzz4cborNtBd_7PayloadNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   12|    568|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCslLXdxknstrT_11common_fuzz4cborNtB5_7PayloadNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEECscGWX1VTI6mZ_11cbor_encode:
   12|    568|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtBe_7PayloadNtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de12DeserializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEECscGWX1VTI6mZ_11cbor_encode:
   12|    284|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCslLXdxknstrT_11common_fuzz4cborNtBa_7PayloadNtNtCs77tOt2sgSgh_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCscJLBHdvVoP8_11serde_tuple10SerializerQINtNtCs65CDL91s1dP_18serde_ipld_dagcbor3ser10SerializerNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils9BufWriterEEECscGWX1VTI6mZ_11cbor_encode:
   12|    568|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCslLXdxknstrT_11common_fuzz4cborNtBd_7PayloadNtNtCs77tOt2sgSgh_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCs65CDL91s1dP_18serde_ipld_dagcbor2de8AccessorNtNtNtCstW2XqJyaU4_7cbor4ii4core5utils11SliceReaderEE0CscGWX1VTI6mZ_11cbor_encode:
   12|    284|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCslLXdxknstrT_11common_fuzz4cbor1__NtB6_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
   12|    369|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXNvNtCslLXdxknstrT_11common_fuzz4cbor1__NtB4_7PayloadNtCscUi5i6CgS3t_9arbitrary9Arbitrary19arbitrary_take_rest:
   12|  1.10k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

