_RNCNvXs8_Csk1x3PqaaJir_9arbitraryAhj30_NtB7_9Arbitrary9size_hint0Csgr0kjOx7ttC_11cbor_encode:
  656|  18.7k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  18.7k|            <T as Arbitrary>::size_hint(d)
  658|  18.7k|        }))
_RNvXs8_Csk1x3PqaaJir_9arbitraryAhj14_NtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  655|    782|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    782|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    782|        }))
  659|    782|    }
_RNvXs8_Csk1x3PqaaJir_9arbitraryAhj2_NtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  655|    391|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    391|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    391|        }))
  659|    391|    }
_RNCNvXs8_Csk1x3PqaaJir_9arbitraryAhj14_NtB7_9Arbitrary9size_hint0Csgr0kjOx7ttC_11cbor_encode:
  656|  15.6k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  15.6k|            <T as Arbitrary>::size_hint(d)
  658|  15.6k|        }))
_RNCNvXs8_Csk1x3PqaaJir_9arbitraryAhj3_NtB7_9Arbitrary9size_hint0Csgr0kjOx7ttC_11cbor_encode:
  656|  1.17k|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|  1.17k|            <T as Arbitrary>::size_hint(d)
  658|  1.17k|        }))
_RNvXs8_Csk1x3PqaaJir_9arbitraryAhj30_NtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  655|    391|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    391|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    391|        }))
  659|    391|    }
_RNvXsa_Csk1x3PqaaJir_9arbitraryINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  688|    391|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|    391|        (0, None)
  690|    391|    }
_RNvXsJ_Csk1x3PqaaJir_9arbitraryyNtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  320|    782|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    782|                    let n = mem::size_of::<$ty>();
  322|    782|                    (n, Some(n))
  323|    782|                }
_RNvYNtNtNtCscxungraXhZF_10fvm_shared7address7payload16DelegatedAddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  277|    391|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  278|    391|        let _ = depth;
  279|    391|        (0, None)
  280|    391|    }
_RNvXsG_Csk1x3PqaaJir_9arbitraryhNtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  320|  36.7k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  36.7k|                    let n = mem::size_of::<$ty>();
  322|  36.7k|                    (n, Some(n))
  323|  36.7k|                }
_RNCNvXs8_Csk1x3PqaaJir_9arbitraryAhj2_NtB7_9Arbitrary9size_hint0Csgr0kjOx7ttC_11cbor_encode:
  656|    782|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|    782|            <T as Arbitrary>::size_hint(d)
  658|    782|        }))
_RNvXsI_Csk1x3PqaaJir_9arbitrarymNtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  320|    391|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    391|                    let n = mem::size_of::<$ty>();
  322|    391|                    (n, Some(n))
  323|    391|                }
_RNvXsa_Csk1x3PqaaJir_9arbitraryINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  688|    391|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  689|    391|        (0, None)
  690|    391|    }
_RNvXs8_Csk1x3PqaaJir_9arbitraryAhj3_NtB5_9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
  655|    391|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    391|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    391|        }))
  659|    391|    }
_RNvXsa_Csk1x3PqaaJir_9arbitraryINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB5_9Arbitrary9arbitraryCseGqCtrHvTDC_11common_fuzz:
  679|    390|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    390|        u.arbitrary_iter()?.collect()
  681|    390|    }
_RNvYINtNtCsdutg7qHs94C_3cid3cid3CidKj40_ENtCsk1x3PqaaJir_9arbitrary9Arbitrary19arbitrary_take_restCseGqCtrHvTDC_11common_fuzz:
  189|    390|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    390|        Self::arbitrary(&mut u)
  191|    390|    }
_RNvXsa_Csk1x3PqaaJir_9arbitraryINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB5_9Arbitrary9arbitraryCseGqCtrHvTDC_11common_fuzz:
  679|    390|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  680|    390|        u.arbitrary_iter()?.collect()
  681|    390|    }
_RNvXs8_Csk1x3PqaaJir_9arbitraryAhj30_NtB5_9Arbitrary9arbitraryCscxungraXhZF_10fvm_shared:
  641|    226|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  642|    226|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  643|    226|    }
_RINvCsk1x3PqaaJir_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj30_NtB2_9Arbitrary9arbitrary0hKBV_ECscxungraXhZF_10fvm_shared:
  615|    226|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  616|    226|where
  617|    226|    F: FnMut(usize) -> Result<T>,
  618|    226|{
  619|    226|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  620|    226|    let array_ptr = array.as_mut_ptr();
  621|    226|    let dst = array_ptr as _;
  622|    226|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  623|    226|        dst,
  624|    226|        initialized: 0,
  625|    226|    };
  626|       |    unsafe {
  627|  10.8k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  628|  10.8k|            core::ptr::write(value_ptr, cb(idx)?);
  629|  10.8k|            guard.initialized += 1;
  630|       |        }
  631|    226|        mem::forget(guard);
  632|    226|        Ok(array.assume_init())
  633|       |    }
  634|    226|}
_RNCNvXs8_Csk1x3PqaaJir_9arbitraryAhj14_NtB7_9Arbitrary9arbitrary0CscxungraXhZF_10fvm_shared:
  642|  16.8k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RINvCsk1x3PqaaJir_9arbitrary16try_create_arrayNCNvXs8_B2_Ahj14_NtB2_9Arbitrary9arbitrary0hKBV_ECscxungraXhZF_10fvm_shared:
  615|    844|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  616|    844|where
  617|    844|    F: FnMut(usize) -> Result<T>,
  618|    844|{
  619|    844|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  620|    844|    let array_ptr = array.as_mut_ptr();
  621|    844|    let dst = array_ptr as _;
  622|    844|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  623|    844|        dst,
  624|    844|        initialized: 0,
  625|    844|    };
  626|       |    unsafe {
  627|  16.8k|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  628|  16.8k|            core::ptr::write(value_ptr, cb(idx)?);
  629|  16.8k|            guard.initialized += 1;
  630|       |        }
  631|    844|        mem::forget(guard);
  632|    844|        Ok(array.assume_init())
  633|       |    }
  634|    844|}
_RNvXs8_Csk1x3PqaaJir_9arbitraryAhj14_NtB5_9Arbitrary9arbitraryCscxungraXhZF_10fvm_shared:
  641|    844|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  642|    844|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  643|    844|    }
_RNCNvXs8_Csk1x3PqaaJir_9arbitraryAhj30_NtB7_9Arbitrary9arbitrary0CscxungraXhZF_10fvm_shared:
  642|  10.8k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs1n_Csk1x3PqaaJir_9arbitraryTyhENtB6_9Arbitrary9size_hintCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  587|    780|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  588|    780|                crate::size_hint::and_all(&[
  589|    780|                    <$last as Arbitrary>::size_hint(depth),
  590|    780|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  591|    780|                ])
  592|    780|            }
_RNvXsL_Csk1x3PqaaJir_9arbitraryjNtB5_9Arbitrary9size_hintCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  320|    782|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    782|                    let n = mem::size_of::<$ty>();
  322|    782|                    (n, Some(n))
  323|    782|                }
_RNvXsG_Csk1x3PqaaJir_9arbitraryhNtB5_9Arbitrary9size_hintCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  320|    780|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    780|                    let n = mem::size_of::<$ty>();
  322|    780|                    (n, Some(n))
  323|    780|                }
_RNvXsJ_Csk1x3PqaaJir_9arbitraryyNtB5_9Arbitrary9size_hintCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  320|    780|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    780|                    let n = mem::size_of::<$ty>();
  322|    780|                    (n, Some(n))
  323|    780|                }
_RNvXsG_Csk1x3PqaaJir_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  51.8k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  51.8k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  51.8k|                    u.fill_buffer(&mut buf)?;
  312|  51.8k|                    let mut x: $unsigned = 0;
  313|  51.8k|                    for i in 0..mem::size_of::<$ty>() {
  314|  51.8k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  51.8k|                    }
  316|  51.8k|                    Ok(x as $ty)
  317|  51.8k|                }
_RNvXs_Csk1x3PqaaJir_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|  9.93k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|  9.93k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|  9.93k|    }
_RNvXsI_Csk1x3PqaaJir_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  6.08k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  6.08k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  6.08k|                    u.fill_buffer(&mut buf)?;
  312|  6.08k|                    let mut x: $unsigned = 0;
  313|  24.3k|                    for i in 0..mem::size_of::<$ty>() {
  314|  24.3k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  24.3k|                    }
  316|  6.08k|                    Ok(x as $ty)
  317|  6.08k|                }
_RNvXsJ_Csk1x3PqaaJir_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  9.82k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  9.82k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  9.82k|                    u.fill_buffer(&mut buf)?;
  312|  9.82k|                    let mut x: $unsigned = 0;
  313|  78.5k|                    for i in 0..mem::size_of::<$ty>() {
  314|  78.5k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  78.5k|                    }
  316|  9.82k|                    Ok(x as $ty)
  317|  9.82k|                }

_RINvNtCsk1x3PqaaJir_9arbitrary9size_hint15recursion_guardNCNvXNvNtCscxungraXhZF_10fvm_shared7address1__NtB10_7AddressNtB4_9Arbitrary9size_hint0ECsgr0kjOx7ttC_11cbor_encode:
   12|    391|pub fn recursion_guard(
   13|    391|    depth: usize,
   14|    391|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    391|) -> (usize, Option<usize>) {
   16|    391|    const MAX_DEPTH: usize = 20;
   17|    391|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    391|        f(depth + 1)
   21|       |    }
   22|    391|}
_RINvNtCsk1x3PqaaJir_9arbitrary9size_hint15recursion_guardNCNvXNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECsgr0kjOx7ttC_11cbor_encode:
   12|    391|pub fn recursion_guard(
   13|    391|    depth: usize,
   14|    391|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    391|) -> (usize, Option<usize>) {
   16|    391|    const MAX_DEPTH: usize = 20;
   17|    391|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    391|        f(depth + 1)
   21|       |    }
   22|    391|}
_RNvNtCsk1x3PqaaJir_9arbitrary9size_hint2orCsgr0kjOx7ttC_11cbor_encode:
   44|  1.95k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.95k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.95k|    let upper = lhs
   47|  1.95k|        .1
   48|  1.95k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.95k|    (lower, upper)
   50|  1.95k|}
_RNvNtCsk1x3PqaaJir_9arbitrary9size_hint7and_allCsgr0kjOx7ttC_11cbor_encode:
   37|  5.08k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  5.08k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  5.08k|}
_RINvNtCsk1x3PqaaJir_9arbitrary9size_hint15recursion_guardNCNvXNvNtCseGqCtrHvTDC_11common_fuzz4cbor1__NtB10_7PayloadNtB4_9Arbitrary9size_hint0ECsgr0kjOx7ttC_11cbor_encode:
   12|    391|pub fn recursion_guard(
   13|    391|    depth: usize,
   14|    391|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    391|) -> (usize, Option<usize>) {
   16|    391|    const MAX_DEPTH: usize = 20;
   17|    391|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    391|        f(depth + 1)
   21|       |    }
   22|    391|}
_RNCNvNtCsk1x3PqaaJir_9arbitrary9size_hint3and0Csgr0kjOx7ttC_11cbor_encode:
   28|  41.4k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCsk1x3PqaaJir_9arbitrary9size_hint2or00Csgr0kjOx7ttC_11cbor_encode:
   48|  1.56k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNvNtCsk1x3PqaaJir_9arbitrary9size_hint2or0Csgr0kjOx7ttC_11cbor_encode:
   48|  1.95k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNvNtCsk1x3PqaaJir_9arbitrary9size_hint6or_allCsgr0kjOx7ttC_11cbor_encode:
   57|    391|pub fn or_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   58|    391|    if let Some(head) = hints.first().copied() {
   59|    391|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    391|}
_RNvNtCsk1x3PqaaJir_9arbitrary9size_hint3andCsgr0kjOx7ttC_11cbor_encode:
   26|  43.7k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  43.7k|    let lower = lhs.0 + rhs.0;
   28|  43.7k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  43.7k|    (lower, upper)
   30|  43.7k|}
_RNCNCNvNtCsk1x3PqaaJir_9arbitrary9size_hint3and00Csgr0kjOx7ttC_11cbor_encode:
   28|  39.8k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsk1x3PqaaJir_9arbitrary9size_hint7and_allCsaKmXn3VhZf2_17fvm_ipld_bitfield:
   37|    780|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    780|    hints.iter().copied().fold((0, Some(0)), and)
   39|    780|}
_RNCNvNtCsk1x3PqaaJir_9arbitrary9size_hint3and0CsaKmXn3VhZf2_17fvm_ipld_bitfield:
   28|  2.34k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsk1x3PqaaJir_9arbitrary9size_hint3andCsaKmXn3VhZf2_17fvm_ipld_bitfield:
   26|  2.73k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.73k|    let lower = lhs.0 + rhs.0;
   28|  2.73k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.73k|    (lower, upper)
   30|  2.73k|}
_RNCNCNvNtCsk1x3PqaaJir_9arbitrary9size_hint3and00CsaKmXn3VhZf2_17fvm_ipld_bitfield:
   28|  1.56k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured3newCsgr0kjOx7ttC_11cbor_encode:
   85|    390|    pub fn new(data: &'a [u8]) -> Self {
   86|    390|        Unstructured { data }
   87|    390|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECseGqCtrHvTDC_11common_fuzz:
  302|    299|    fn int_in_range_impl<T>(
  303|    299|        range: ops::RangeInclusive<T>,
  304|    299|        mut bytes: impl Iterator<Item = u8>,
  305|    299|    ) -> Result<(T, usize)>
  306|    299|    where
  307|    299|        T: Int,
  308|    299|    {
  309|    299|        let start = *range.start();
  310|    299|        let end = *range.end();
  311|    299|        assert!(
  312|    299|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    299|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    299|        }
  321|    299|
  322|    299|        // From here on out we work with the unsigned representation. All of the
  323|    299|        // operations performed below work out just as well whether or not `T`
  324|    299|        // is a signed or unsigned integer.
  325|    299|        let start = start.to_unsigned();
  326|    299|        let end = end.to_unsigned();
  327|    299|
  328|    299|        let delta = end.wrapping_sub(start);
  329|    299|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    299|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    299|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    324|        while (bytes_consumed < mem::size_of::<T>())
  339|    324|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    299|            let byte = match bytes.next() {
  342|    274|                None => break,
  343|     25|                Some(b) => b,
  344|     25|            };
  345|     25|            bytes_consumed += 1;
  346|     25|
  347|     25|            // Combine this byte into our arbitrary integer, but avoid
  348|     25|            // overflowing the shift for `u8` and `i8`.
  349|     25|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|     25|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    299|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    299|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    299|        let result = start.wrapping_add(offset);
  365|    299|
  366|    299|        // And convert back to our maybe-signed representation.
  367|    299|        let result = T::from_unsigned(result);
  368|    299|        debug_assert!(*range.start() <= result);
  369|    299|        debug_assert!(result <= *range.end());
  370|       |
  371|    299|        Ok((result, bytes_consumed))
  372|    299|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECseGqCtrHvTDC_11common_fuzz:
  293|    390|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    390|    where
  295|    390|        T: Int,
  296|    390|    {
  297|    390|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    390|        self.data = &self.data[bytes_consumed..];
  299|    390|        Ok(result)
  300|    390|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int7from_u8CseGqCtrHvTDC_11common_fuzz:
  821|     25|                fn from_u8(b: u8) -> Self {
  822|     25|                    b as Self
  823|     25|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int13from_unsignedCseGqCtrHvTDC_11common_fuzz:
  845|    299|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    299|                    unsigned as Self
  847|    299|                }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCseGqCtrHvTDC_11common_fuzz:
  132|    390|    pub fn is_empty(&self) -> bool {
  133|    390|        self.len() == 0
  134|    390|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int11to_unsignedCseGqCtrHvTDC_11common_fuzz:
  841|    598|                fn to_unsigned(self) -> Self::Unsigned {
  842|    598|                    self as $unsigned_ty
  843|    598|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int12wrapping_subCseGqCtrHvTDC_11common_fuzz:
  837|    299|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    299|                    <$ty>::wrapping_sub(self, rhs)
  839|    299|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int12wrapping_addCseGqCtrHvTDC_11common_fuzz:
  833|    299|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    299|                    <$ty>::wrapping_add(self, rhs)
  835|    299|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryINtNtCsjIAJgk4Fm4y_9multihash9multihash9MultihashKj40_EECseGqCtrHvTDC_11common_fuzz:
  167|    299|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    299|    where
  169|    299|        A: Arbitrary<'a>,
  170|    299|    {
  171|    299|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    299|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterNtNtCscxungraXhZF_10fvm_shared7address7AddressECseGqCtrHvTDC_11common_fuzz:
  606|    390|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    390|        &'b mut self,
  608|    390|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    390|        Ok(ArbitraryIter {
  610|    390|            u: &mut *self,
  611|    390|            _marker: PhantomData,
  612|    390|        })
  613|    390|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECseGqCtrHvTDC_11common_fuzz:
  302|    390|    fn int_in_range_impl<T>(
  303|    390|        range: ops::RangeInclusive<T>,
  304|    390|        mut bytes: impl Iterator<Item = u8>,
  305|    390|    ) -> Result<(T, usize)>
  306|    390|    where
  307|    390|        T: Int,
  308|    390|    {
  309|    390|        let start = *range.start();
  310|    390|        let end = *range.end();
  311|    390|        assert!(
  312|    390|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    390|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    390|        }
  321|    390|
  322|    390|        // From here on out we work with the unsigned representation. All of the
  323|    390|        // operations performed below work out just as well whether or not `T`
  324|    390|        // is a signed or unsigned integer.
  325|    390|        let start = start.to_unsigned();
  326|    390|        let end = end.to_unsigned();
  327|    390|
  328|    390|        let delta = end.wrapping_sub(start);
  329|    390|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    390|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    390|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    696|        while (bytes_consumed < mem::size_of::<T>())
  339|    696|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    390|            let byte = match bytes.next() {
  342|     84|                None => break,
  343|    306|                Some(b) => b,
  344|    306|            };
  345|    306|            bytes_consumed += 1;
  346|    306|
  347|    306|            // Combine this byte into our arbitrary integer, but avoid
  348|    306|            // overflowing the shift for `u8` and `i8`.
  349|    306|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    306|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    390|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    390|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    390|        let result = start.wrapping_add(offset);
  365|    390|
  366|    390|        // And convert back to our maybe-signed representation.
  367|    390|        let result = T::from_unsigned(result);
  368|    390|        debug_assert!(*range.start() <= result);
  369|    390|        debug_assert!(result <= *range.end());
  370|       |
  371|    390|        Ok((result, bytes_consumed))
  372|    390|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECseGqCtrHvTDC_11common_fuzz:
  293|    299|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    299|    where
  295|    299|        T: Int,
  296|    299|    {
  297|    299|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    299|        self.data = &self.data[bytes_consumed..];
  299|    299|        Ok(result)
  300|    299|    }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int7from_u8CseGqCtrHvTDC_11common_fuzz:
  821|    306|                fn from_u8(b: u8) -> Self {
  822|    306|                    b as Self
  823|    306|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryhECseGqCtrHvTDC_11common_fuzz:
  167|  1.54k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  1.54k|    where
  169|  1.54k|        A: Arbitrary<'a>,
  170|  1.54k|    {
  171|  1.54k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  1.54k|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured9arbitrarybECseGqCtrHvTDC_11common_fuzz:
  167|  9.15k|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|  9.15k|    where
  169|  9.15k|        A: Arbitrary<'a>,
  170|  9.15k|    {
  171|  9.15k|        <A as Arbitrary<'a>>::arbitrary(self)
  172|  9.15k|    }
_RNvXs_NtCsk1x3PqaaJir_9arbitrary12unstructuredINtB4_13ArbitraryIterNtNtCscxungraXhZF_10fvm_shared7address7AddressENtNtNtNtCs9SrTLDOTsEo_4core4iter6traits8iterator8Iterator4nextCseGqCtrHvTDC_11common_fuzz:
  720|  6.08k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  6.08k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  6.08k|        if keep_going {
  723|  5.69k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    390|            None
  726|       |        }
  727|  6.08k|    }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int12wrapping_subCseGqCtrHvTDC_11common_fuzz:
  837|    390|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    390|                    <$ty>::wrapping_sub(self, rhs)
  839|    390|                }
_RNvXs_NtCsk1x3PqaaJir_9arbitrary12unstructuredINtB4_13ArbitraryIterhENtNtNtNtCs9SrTLDOTsEo_4core4iter6traits8iterator8Iterator4nextCseGqCtrHvTDC_11common_fuzz:
  720|  3.07k|    fn next(&mut self) -> Option<Result<ElementType>> {
  721|  3.07k|        let keep_going = self.u.arbitrary().unwrap_or(false);
  722|  3.07k|        if keep_going {
  723|  2.68k|            Some(Arbitrary::arbitrary(self.u))
  724|       |        } else {
  725|    390|            None
  726|       |        }
  727|  3.07k|    }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int12wrapping_addCseGqCtrHvTDC_11common_fuzz:
  833|    390|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    390|                    <$ty>::wrapping_add(self, rhs)
  835|    390|                }
_RNvXs9_NtCsk1x3PqaaJir_9arbitrary12unstructuredlNtB5_3Int13from_unsignedCseGqCtrHvTDC_11common_fuzz:
  845|    390|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    390|                    unsigned as Self
  847|    390|                }
_RNvXs9_NtCsk1x3PqaaJir_9arbitrary12unstructuredlNtB5_3Int11to_unsignedCseGqCtrHvTDC_11common_fuzz:
  841|    780|                fn to_unsigned(self) -> Self::Unsigned {
  842|    780|                    self as $unsigned_ty
  843|    780|                }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int10from_usizeCseGqCtrHvTDC_11common_fuzz:
  825|    696|                fn from_usize(u: usize) -> Self {
  826|    696|                    u as Self
  827|    696|                }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured3lenCseGqCtrHvTDC_11common_fuzz:
  108|    390|    pub fn len(&self) -> usize {
  109|    390|        self.data.len()
  110|    390|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured5ratiolECseGqCtrHvTDC_11common_fuzz:
  483|    390|    pub fn ratio<T>(&mut self, numerator: T, denominator: T) -> Result<bool>
  484|    390|    where
  485|    390|        T: Int,
  486|    390|    {
  487|    390|        assert!(T::ZERO < numerator);
  488|    390|        assert!(numerator <= denominator);
  489|    390|        let x = self.int_in_range(T::ONE..=denominator)?;
  490|    390|        Ok(x <= numerator)
  491|    390|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured14arbitrary_iterhECseGqCtrHvTDC_11common_fuzz:
  606|    390|    pub fn arbitrary_iter<'b, ElementType: Arbitrary<'a>>(
  607|    390|        &'b mut self,
  608|    390|    ) -> Result<ArbitraryIter<'a, 'b, ElementType>> {
  609|    390|        Ok(ArbitraryIter {
  610|    390|            u: &mut *self,
  611|    390|            _marker: PhantomData,
  612|    390|        })
  613|    390|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int10from_usizeCseGqCtrHvTDC_11common_fuzz:
  825|    324|                fn from_usize(u: usize) -> Self {
  826|    324|                    u as Self
  827|    324|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int12wrapping_addCscxungraXhZF_10fvm_shared:
  833|  1.47k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  1.47k|                    <$ty>::wrapping_add(self, rhs)
  835|  1.47k|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int13from_unsignedCscxungraXhZF_10fvm_shared:
  845|  1.47k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  1.47k|                    unsigned as Self
  847|  1.47k|                }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured3lenCscxungraXhZF_10fvm_shared:
  108|  12.1k|    pub fn len(&self) -> usize {
  109|  12.1k|        self.data.len()
  110|  12.1k|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECscxungraXhZF_10fvm_shared:
  302|  1.47k|    fn int_in_range_impl<T>(
  303|  1.47k|        range: ops::RangeInclusive<T>,
  304|  1.47k|        mut bytes: impl Iterator<Item = u8>,
  305|  1.47k|    ) -> Result<(T, usize)>
  306|  1.47k|    where
  307|  1.47k|        T: Int,
  308|  1.47k|    {
  309|  1.47k|        let start = *range.start();
  310|  1.47k|        let end = *range.end();
  311|  1.47k|        assert!(
  312|  1.47k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  1.47k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  1.47k|        }
  321|  1.47k|
  322|  1.47k|        // From here on out we work with the unsigned representation. All of the
  323|  1.47k|        // operations performed below work out just as well whether or not `T`
  324|  1.47k|        // is a signed or unsigned integer.
  325|  1.47k|        let start = start.to_unsigned();
  326|  1.47k|        let end = end.to_unsigned();
  327|  1.47k|
  328|  1.47k|        let delta = end.wrapping_sub(start);
  329|  1.47k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  1.47k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  1.47k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  2.95k|        while (bytes_consumed < mem::size_of::<T>())
  339|  2.95k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  1.47k|            let byte = match bytes.next() {
  342|      1|                None => break,
  343|  1.47k|                Some(b) => b,
  344|  1.47k|            };
  345|  1.47k|            bytes_consumed += 1;
  346|  1.47k|
  347|  1.47k|            // Combine this byte into our arbitrary integer, but avoid
  348|  1.47k|            // overflowing the shift for `u8` and `i8`.
  349|  1.47k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  1.47k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  1.47k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  1.47k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  1.47k|        let result = start.wrapping_add(offset);
  365|  1.47k|
  366|  1.47k|        // And convert back to our maybe-signed representation.
  367|  1.47k|        let result = T::from_unsigned(result);
  368|  1.47k|        debug_assert!(*range.start() <= result);
  369|  1.47k|        debug_assert!(result <= *range.end());
  370|       |
  371|  1.47k|        Ok((result, bytes_consumed))
  372|  1.47k|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejECscxungraXhZF_10fvm_shared:
  293|  1.47k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  1.47k|    where
  295|  1.47k|        T: Int,
  296|  1.47k|    {
  297|  1.47k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  1.47k|        self.data = &self.data[bytes_consumed..];
  299|  1.47k|        Ok(result)
  300|  1.47k|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int7from_u8CscxungraXhZF_10fvm_shared:
  821|  1.47k|                fn from_u8(b: u8) -> Self {
  822|  1.47k|                    b as Self
  823|  1.47k|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int12wrapping_subCscxungraXhZF_10fvm_shared:
  837|  1.47k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  1.47k|                    <$ty>::wrapping_sub(self, rhs)
  839|  1.47k|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int10from_usizeCscxungraXhZF_10fvm_shared:
  825|  2.95k|                fn from_usize(u: usize) -> Self {
  826|  2.95k|                    u as Self
  827|  2.95k|                }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCscxungraXhZF_10fvm_shared:
  132|  12.1k|    pub fn is_empty(&self) -> bool {
  133|  12.1k|        self.len() == 0
  134|  12.1k|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int11to_unsignedCscxungraXhZF_10fvm_shared:
  841|  2.95k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  2.95k|                    self as $unsigned_ty
  843|  2.95k|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured6choosebECsaKmXn3VhZf2_17fvm_ipld_bitfield:
  408|    390|    pub fn choose<'b, T>(&mut self, choices: &'b [T]) -> Result<&'b T> {
  409|    390|        let idx = self.choose_index(choices.len())?;
  410|    390|        Ok(&choices[idx])
  411|    390|    }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int7from_u8CsaKmXn3VhZf2_17fvm_ipld_bitfield:
  821|  4.42k|                fn from_u8(b: u8) -> Self {
  822|  4.42k|                    b as Self
  823|  4.42k|                }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int12wrapping_subCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  837|  4.42k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  4.42k|                    <$ty>::wrapping_sub(self, rhs)
  839|  4.42k|                }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int12wrapping_addCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  833|  4.42k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  4.42k|                    <$ty>::wrapping_add(self, rhs)
  835|  4.42k|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsaKmXn3VhZf2_17fvm_ipld_bitfield:
  293|  4.42k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  4.42k|    where
  295|  4.42k|        T: Int,
  296|  4.42k|    {
  297|  4.42k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  4.42k|        self.data = &self.data[bytes_consumed..];
  299|  4.42k|        Ok(result)
  300|  4.42k|    }
_RNvXs9_NtCsk1x3PqaaJir_9arbitrary12unstructuredlNtB5_3Int13from_unsignedCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  845|  4.42k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  4.42k|                    unsigned as Self
  847|  4.42k|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsaKmXn3VhZf2_17fvm_ipld_bitfield:
  302|  4.42k|    fn int_in_range_impl<T>(
  303|  4.42k|        range: ops::RangeInclusive<T>,
  304|  4.42k|        mut bytes: impl Iterator<Item = u8>,
  305|  4.42k|    ) -> Result<(T, usize)>
  306|  4.42k|    where
  307|  4.42k|        T: Int,
  308|  4.42k|    {
  309|  4.42k|        let start = *range.start();
  310|  4.42k|        let end = *range.end();
  311|  4.42k|        assert!(
  312|  4.42k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  4.42k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  4.42k|        }
  321|  4.42k|
  322|  4.42k|        // From here on out we work with the unsigned representation. All of the
  323|  4.42k|        // operations performed below work out just as well whether or not `T`
  324|  4.42k|        // is a signed or unsigned integer.
  325|  4.42k|        let start = start.to_unsigned();
  326|  4.42k|        let end = end.to_unsigned();
  327|  4.42k|
  328|  4.42k|        let delta = end.wrapping_sub(start);
  329|  4.42k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  4.42k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  4.42k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  8.84k|        while (bytes_consumed < mem::size_of::<T>())
  339|  8.84k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  4.42k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  4.42k|                Some(b) => b,
  344|  4.42k|            };
  345|  4.42k|            bytes_consumed += 1;
  346|  4.42k|
  347|  4.42k|            // Combine this byte into our arbitrary integer, but avoid
  348|  4.42k|            // overflowing the shift for `u8` and `i8`.
  349|  4.42k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  4.42k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  4.42k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  4.42k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  4.42k|        let result = start.wrapping_add(offset);
  365|  4.42k|
  366|  4.42k|        // And convert back to our maybe-signed representation.
  367|  4.42k|        let result = T::from_unsigned(result);
  368|  4.42k|        debug_assert!(*range.start() <= result);
  369|  4.42k|        debug_assert!(result <= *range.end());
  370|       |
  371|  4.42k|        Ok((result, bytes_consumed))
  372|  4.42k|    }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured9arbitraryNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldEB1c_:
  167|    390|    pub fn arbitrary<A>(&mut self) -> Result<A>
  168|    390|    where
  169|    390|        A: Arbitrary<'a>,
  170|    390|    {
  171|    390|        <A as Arbitrary<'a>>::arbitrary(self)
  172|    390|    }
_RNvXs9_NtCsk1x3PqaaJir_9arbitrary12unstructuredlNtB5_3Int11to_unsignedCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  841|  8.84k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  8.84k|                    self as $unsigned_ty
  843|  8.84k|                }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int10from_usizeCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  825|  8.84k|                fn from_usize(u: usize) -> Self {
  826|  8.84k|                    u as Self
  827|  8.84k|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsaKmXn3VhZf2_17fvm_ipld_bitfield:
  213|    780|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|    780|    where
  215|    780|        ElementType: Arbitrary<'a>,
  216|    780|    {
  217|    780|        let byte_size = self.arbitrary_byte_size()?;
  218|    780|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|    780|        let elem_size = upper.unwrap_or(lower * 2);
  220|    780|        let elem_size = std::cmp::max(1, elem_size);
  221|    780|        Ok(byte_size / elem_size)
  222|    780|    }
_RNvXs1_NtCsk1x3PqaaJir_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  841|  1.19k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  1.19k|                    self as $unsigned_ty
  843|  1.19k|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangejEB5_:
  293|    390|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|    390|    where
  295|    390|        T: Int,
  296|    390|    {
  297|    390|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|    390|        self.data = &self.data[bytes_consumed..];
  299|    390|        Ok(result)
  300|    390|    }
_RNvXs2_NtCsk1x3PqaaJir_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  837|     54|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|     54|                    <$ty>::wrapping_sub(self, rhs)
  839|     54|                }
_RNvXs2_NtCsk1x3PqaaJir_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  829|     54|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|     54|                    <$ty>::checked_add(self, rhs)
  831|     54|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int11to_unsignedB7_:
  841|    780|                fn to_unsigned(self) -> Self::Unsigned {
  842|    780|                    self as $unsigned_ty
  843|    780|                }
_RNvXs2_NtCsk1x3PqaaJir_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  825|    108|                fn from_usize(u: usize) -> Self {
  826|    108|                    u as Self
  827|    108|                }
_RNvXs1_NtCsk1x3PqaaJir_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  821|    598|                fn from_u8(b: u8) -> Self {
  822|    598|                    b as Self
  823|    598|                }
_RNvXs2_NtCsk1x3PqaaJir_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  845|     54|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|     54|                    unsigned as Self
  847|     54|                }
_RNvXs1_NtCsk1x3PqaaJir_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  837|    598|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    598|                    <$ty>::wrapping_sub(self, rhs)
  839|    598|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int7from_u8B7_:
  821|    316|                fn from_u8(b: u8) -> Self {
  822|    316|                    b as Self
  823|    316|                }
_RNvXs1_NtCsk1x3PqaaJir_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  833|    598|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    598|                    <$ty>::wrapping_add(self, rhs)
  835|    598|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|     54|    fn int_in_range_impl<T>(
  303|     54|        range: ops::RangeInclusive<T>,
  304|     54|        mut bytes: impl Iterator<Item = u8>,
  305|     54|    ) -> Result<(T, usize)>
  306|     54|    where
  307|     54|        T: Int,
  308|     54|    {
  309|     54|        let start = *range.start();
  310|     54|        let end = *range.end();
  311|     54|        assert!(
  312|     54|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|     54|        if start == end {
  319|      0|            return Ok((start, 0));
  320|     54|        }
  321|     54|
  322|     54|        // From here on out we work with the unsigned representation. All of the
  323|     54|        // operations performed below work out just as well whether or not `T`
  324|     54|        // is a signed or unsigned integer.
  325|     54|        let start = start.to_unsigned();
  326|     54|        let end = end.to_unsigned();
  327|     54|
  328|     54|        let delta = end.wrapping_sub(start);
  329|     54|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|     54|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|     54|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    161|        while (bytes_consumed < mem::size_of::<T>())
  339|    108|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    107|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    107|                Some(b) => b,
  344|    107|            };
  345|    107|            bytes_consumed += 1;
  346|    107|
  347|    107|            // Combine this byte into our arbitrary integer, but avoid
  348|    107|            // overflowing the shift for `u8` and `i8`.
  349|    107|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    107|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|     54|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|     54|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|     54|        let result = start.wrapping_add(offset);
  365|     54|
  366|     54|        // And convert back to our maybe-signed representation.
  367|     54|        let result = T::from_unsigned(result);
  368|     54|        debug_assert!(*range.start() <= result);
  369|     54|        debug_assert!(result <= *range.end());
  370|       |
  371|     54|        Ok((result, bytes_consumed))
  372|     54|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int12wrapping_addB7_:
  833|    390|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    390|                    <$ty>::wrapping_add(self, rhs)
  835|    390|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int11checked_add:
  829|  2.16k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  2.16k|                    <$ty>::checked_add(self, rhs)
  831|  2.16k|                }
_RNvXs2_NtCsk1x3PqaaJir_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  841|    108|                fn to_unsigned(self) -> Self::Unsigned {
  842|    108|                    self as $unsigned_ty
  843|    108|                }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured12choose_index:
  450|    390|    pub fn choose_index(&mut self, len: usize) -> Result<usize> {
  451|    390|        if len == 0 {
  452|      0|            return Err(Error::EmptyChoose);
  453|    390|        }
  454|    390|        let idx = self.int_in_range(0..=len - 1)?;
  455|    390|        Ok(idx)
  456|    390|    }
_RNvXs1_NtCsk1x3PqaaJir_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|    597|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|    597|                    <$ty>::checked_add(self, rhs)
  831|    597|                }
_RNvXs3_NtCsk1x3PqaaJir_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  829|  4.81k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  4.81k|                    <$ty>::checked_add(self, rhs)
  831|  4.81k|                }
_RNvXs1_NtCsk1x3PqaaJir_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  825|    598|                fn from_usize(u: usize) -> Self {
  826|    598|                    u as Self
  827|    598|                }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  67.7k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  67.7k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  67.7k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  67.7k|        for byte in buffer[n..].iter_mut() {
  525|  2.62k|            *byte = 0;
  526|  2.62k|        }
  527|  67.7k|        self.data = &self.data[n..];
  528|  67.7k|        Ok(())
  529|  67.7k|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int12wrapping_subB7_:
  837|    390|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    390|                    <$ty>::wrapping_sub(self, rhs)
  839|    390|                }
_RNvXs1_NtCsk1x3PqaaJir_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  845|    598|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    598|                    unsigned as Self
  847|    598|                }
_RNvXs2_NtCsk1x3PqaaJir_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  821|    107|                fn from_u8(b: u8) -> Self {
  822|    107|                    b as Self
  823|    107|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    598|    fn int_in_range_impl<T>(
  303|    598|        range: ops::RangeInclusive<T>,
  304|    598|        mut bytes: impl Iterator<Item = u8>,
  305|    598|    ) -> Result<(T, usize)>
  306|    598|    where
  307|    598|        T: Int,
  308|    598|    {
  309|    598|        let start = *range.start();
  310|    598|        let end = *range.end();
  311|    598|        assert!(
  312|    598|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    598|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    598|        }
  321|    598|
  322|    598|        // From here on out we work with the unsigned representation. All of the
  323|    598|        // operations performed below work out just as well whether or not `T`
  324|    598|        // is a signed or unsigned integer.
  325|    598|        let start = start.to_unsigned();
  326|    598|        let end = end.to_unsigned();
  327|    598|
  328|    598|        let delta = end.wrapping_sub(start);
  329|    598|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    598|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    598|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  1.19k|        while (bytes_consumed < mem::size_of::<T>())
  339|    598|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    598|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    598|                Some(b) => b,
  344|    598|            };
  345|    598|            bytes_consumed += 1;
  346|    598|
  347|    598|            // Combine this byte into our arbitrary integer, but avoid
  348|    598|            // overflowing the shift for `u8` and `i8`.
  349|    598|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|    598|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    598|        let offset = if delta == T::Unsigned::MAX {
  357|      1|            arbitrary_int
  358|       |        } else {
  359|    597|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    598|        let result = start.wrapping_add(offset);
  365|    598|
  366|    598|        // And convert back to our maybe-signed representation.
  367|    598|        let result = T::from_unsigned(result);
  368|    598|        debug_assert!(*range.start() <= result);
  369|    598|        debug_assert!(result <= *range.end());
  370|       |
  371|    598|        Ok((result, bytes_consumed))
  372|    598|    }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured5bytes:
  548|    390|    pub fn bytes(&mut self, size: usize) -> Result<&'a [u8]> {
  549|    390|        if self.data.len() < size {
  550|     86|            return Err(Error::NotEnoughData);
  551|    304|        }
  552|    304|
  553|    304|        let (for_buf, rest) = self.data.split_at(size);
  554|    304|        self.data = rest;
  555|    304|        Ok(for_buf)
  556|    390|    }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int10from_usizeB7_:
  825|    706|                fn from_usize(u: usize) -> Self {
  826|    706|                    u as Self
  827|    706|                }
_RNvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|    780|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|    780|        if self.data.is_empty() {
  226|    126|            Ok(0)
  227|    654|        } else if self.data.len() == 1 {
  228|      2|            self.data = &[];
  229|      2|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    652|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    598|                let bytes = 1;
  242|    598|                let max_size = self.data.len() - bytes;
  243|    598|                let (rest, for_size) = self.data.split_at(max_size);
  244|    598|                self.data = rest;
  245|    598|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|     54|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|     54|                let bytes = 2;
  248|     54|                let max_size = self.data.len() - bytes;
  249|     54|                let (rest, for_size) = self.data.split_at(max_size);
  250|     54|                self.data = rest;
  251|     54|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    652|            Ok(len)
  267|       |        }
  268|    780|    }
_RNvXs2_NtCsk1x3PqaaJir_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  833|     54|                fn wrapping_add(self, rhs: Self) -> Self {
  834|     54|                    <$ty>::wrapping_add(self, rhs)
  835|     54|                }
_RNvXs6_NtCsk1x3PqaaJir_9arbitrary12unstructuredjNtB5_3Int13from_unsignedB7_:
  845|    390|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    390|                    unsigned as Self
  847|    390|                }
_RINvMNtCsk1x3PqaaJir_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impljINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    390|    fn int_in_range_impl<T>(
  303|    390|        range: ops::RangeInclusive<T>,
  304|    390|        mut bytes: impl Iterator<Item = u8>,
  305|    390|    ) -> Result<(T, usize)>
  306|    390|    where
  307|    390|        T: Int,
  308|    390|    {
  309|    390|        let start = *range.start();
  310|    390|        let end = *range.end();
  311|    390|        assert!(
  312|    390|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    390|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    390|        }
  321|    390|
  322|    390|        // From here on out we work with the unsigned representation. All of the
  323|    390|        // operations performed below work out just as well whether or not `T`
  324|    390|        // is a signed or unsigned integer.
  325|    390|        let start = start.to_unsigned();
  326|    390|        let end = end.to_unsigned();
  327|    390|
  328|    390|        let delta = end.wrapping_sub(start);
  329|    390|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    390|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    390|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    706|        while (bytes_consumed < mem::size_of::<T>())
  339|    706|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    390|            let byte = match bytes.next() {
  342|     74|                None => break,
  343|    316|                Some(b) => b,
  344|    316|            };
  345|    316|            bytes_consumed += 1;
  346|    316|
  347|    316|            // Combine this byte into our arbitrary integer, but avoid
  348|    316|            // overflowing the shift for `u8` and `i8`.
  349|    316|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    316|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    390|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    390|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    390|        let result = start.wrapping_add(offset);
  365|    390|
  366|    390|        // And convert back to our maybe-signed representation.
  367|    390|        let result = T::from_unsigned(result);
  368|    390|        debug_assert!(*range.start() <= result);
  369|    390|        debug_assert!(result <= *range.end());
  370|       |
  371|    390|        Ok((result, bytes_consumed))
  372|    390|    }

_RINvXs5_NtNtCs1YscacFooSg_7cbor4ii4core3decINtNtB8_5types5BytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShEENtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  510|  6.65k|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  511|  6.65k|        use crate::alloc::borrow::Cow;
  512|  6.65k|
  513|  6.65k|        let mut buf = Vec::new();
  514|  6.65k|        Ok(types::Bytes(if let Some(longbuf) = decode_buf(major::BYTES, byte, reader, &mut buf)? {
  515|  6.65k|            Cow::Borrowed(longbuf)
  516|       |        } else {
  517|      0|            Cow::Owned(buf)
  518|       |        }))
  519|  6.65k|    }
_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec8pull_oneNtNtB4_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  125|  8.64k|pub(crate) fn pull_one<'a, R: Read<'a>>(reader: &mut R) -> Result<u8, Error<R::Error>> {
  126|  8.64k|    let b = reader.fill(1)?
  127|  8.64k|        .as_ref()
  128|  8.64k|        .get(0)
  129|  8.64k|        .copied()
  130|  8.64k|        .ok_or(Error::Eof)?;
  131|  8.64k|    reader.advance(1);
  132|  8.64k|    Ok(b)
  133|  8.64k|}
_RINvYINtNtNtCs1YscacFooSg_7cbor4ii4core5types5BytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShEENtNtB8_3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
   73|  6.65k|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|  6.65k|        let byte = pull_one(reader)?;
   75|  6.65k|        Self::decode_with(byte, reader)
   76|  6.65k|    }
_RINvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB6_7TypeNum10decode_u64NtNtB8_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  227|  7.87k|    pub(crate) fn decode_u64<'a, R: Read<'a>>(self, reader: &mut R) -> Result<u64, Error<R::Error>> {
  228|  7.87k|        match self.byte & self.major_limit {
  229|  7.87k|            x @ 0 ..= 0x17 => Ok(x.into()),
  230|    770|            0x18 => pull_one(reader).map(Into::into),
  231|       |            0x19 => {
  232|     30|                let mut buf = [0; 2];
  233|     30|                pull_exact(reader, &mut buf)?;
  234|     30|                Ok(u16::from_be_bytes(buf).into())
  235|       |            },
  236|       |            0x1a => {
  237|     25|                let mut buf = [0; 4];
  238|     25|                pull_exact(reader, &mut buf)?;
  239|     25|                Ok(u32::from_be_bytes(buf).into())
  240|       |            },
  241|       |            0x1b => {
  242|    251|                let mut buf = [0; 8];
  243|    251|                pull_exact(reader, &mut buf)?;
  244|    251|                Ok(u64::from_be_bytes(buf))
  245|       |            },
  246|      0|            _ => Err(Error::mismatch(self.major_limit, self.byte))
  247|       |        }
  248|  7.87k|    }
_RNvMNtNtCs1YscacFooSg_7cbor4ii4core3decNtB2_9Reference6as_refCsgr0kjOx7ttC_11cbor_encode:
   81|  8.94k|    pub(crate) const fn as_ref(&self) -> &[u8] {
   82|  8.94k|        match self {
   83|  8.94k|            Reference::Long(buf) => buf,
   84|      0|            Reference::Short(buf) => buf
   85|       |        }
   86|  8.94k|    }
_RNvNtNtCs1YscacFooSg_7cbor4ii4core3dec8if_majorCsgr0kjOx7ttC_11cbor_encode:
  894|    304|pub fn if_major(byte: u8) -> u8 {
  895|    304|    byte >> 5
  896|    304|}
_RINvXss_NtNtCs1YscacFooSg_7cbor4ii4core3decyNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  256|    304|                fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  257|    304|                    TypeNum::new(!(major::UNSIGNED << 5), byte).$decode_fn(reader)
  258|    304|                }
_RINvYNtNtNtCs1YscacFooSg_7cbor4ii4core3dec10ArrayStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
   73|    608|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    608|        let byte = pull_one(reader)?;
   75|    608|        Self::decode_with(byte, reader)
   76|    608|    }
_RINvYNtNtNtCs1YscacFooSg_7cbor4ii4core3dec8TagStartNtB5_6Decode6decodeNtNtB7_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
   73|    304|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    304|        let byte = pull_one(reader)?;
   75|    304|        Self::decode_with(byte, reader)
   76|    304|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB5_7TypeNum3newCsgr0kjOx7ttC_11cbor_encode:
  179|  7.87k|    pub(crate) const fn new(major_limit: u8, byte: u8) -> TypeNum {
  180|  7.87k|        TypeNum { major_limit, byte }
  181|  7.87k|    }
_RINvXsc_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB6_10ArrayStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  615|    608|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  616|    608|        decode_len(major::ARRAY, byte, reader).map(ArrayStart)
  617|    608|    }
_RINvYyNtNtNtCs1YscacFooSg_7cbor4ii4core3dec6Decode6decodeNtNtB8_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
   73|    304|    fn decode<R: Read<'a>>(reader: &mut R) -> Result<Self, Error<R::Error>> {
   74|    304|        let byte = pull_one(reader)?;
   75|    304|        Self::decode_with(byte, reader)
   76|    304|    }
_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec10decode_lenNtNtB4_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  599|  7.26k|fn decode_len<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R)
  600|  7.26k|    -> Result<Option<usize>, Error<R::Error>>
  601|  7.26k|{
  602|  7.26k|    if byte != (marker::START | (major << 5)) {
  603|  7.26k|        let len = TypeNum::new(!(major << 5), byte).decode_u64(reader)?;
  604|  7.26k|        let len = usize::try_from(len).map_err(Error::CastOverflow)?;
  605|  7.26k|        Ok(Some(len))
  606|       |    } else {
  607|      0|        Ok(None)
  608|       |    }
  609|  7.26k|}
_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec10decode_bufNtNtB4_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  431|  6.65k|fn decode_buf<'a, R: Read<'a>>(major: u8, byte: u8, reader: &mut R, buf: &mut Vec<u8>)
  432|  6.65k|    -> Result<Option<&'a [u8]>, Error<R::Error>>
  433|  6.65k|{
  434|       |    const CAP_LIMIT: usize = 16 * 1024;
  435|       |
  436|  6.65k|    if let Some(mut len) = decode_len(major, byte, reader)? {
  437|       |        // try long lifetime buffer
  438|  6.65k|        if let Reference::Long(buf) = reader.fill(len)? {
  439|  6.65k|            if buf.len() >= len {
  440|  6.65k|                reader.advance(len);
  441|  6.65k|                return Ok(Some(&buf[..len]));
  442|      0|            }
  443|      0|        }
  444|       |
  445|      0|        buf.reserve(core::cmp::min(len, CAP_LIMIT)); // TODO try_reserve ?
  446|       |
  447|      0|        while len != 0 {
  448|      0|            let readbuf = reader.fill(len)?;
  449|      0|            let readbuf = readbuf.as_ref();
  450|      0|
  451|      0|            if readbuf.is_empty() {
  452|      0|                return Err(Error::Eof);
  453|      0|            }
  454|      0|
  455|      0|            let readlen = core::cmp::min(readbuf.len(), len);
  456|      0|
  457|      0|            buf.extend_from_slice(&readbuf[..readlen]);
  458|      0|            reader.advance(readlen);
  459|      0|            len -= readlen;
  460|       |        }
  461|       |
  462|      0|        Ok(None)
  463|       |    } else {
  464|       |        // bytes sequence
  465|       |        loop {
  466|      0|            let byte = pull_one(reader)?;
  467|       |
  468|      0|            if byte == marker::BREAK {
  469|      0|                break
  470|      0|            }
  471|      0|
  472|      0|            if !reader.step_in() {
  473|      0|                return Err(Error::DepthLimit);
  474|      0|            }
  475|      0|            let mut reader = ScopeGuard(reader, |reader| reader.step_out());
  476|      0|            let reader = &mut *reader;
  477|       |
  478|      0|            if let Some(longbuf) = decode_buf(major, byte, reader, buf)? {
  479|      0|                buf.extend_from_slice(longbuf);
  480|      0|            }
  481|       |        }
  482|       |
  483|      0|        Ok(None)
  484|       |    }
  485|  6.65k|}
_RINvNtNtCs1YscacFooSg_7cbor4ii4core3dec10pull_exactNtNtB4_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  136|    306|fn pull_exact<'a, R: Read<'a>>(reader: &mut R, mut buf: &mut [u8]) -> Result<(), Error<R::Error>> {
  137|    612|    while !buf.is_empty() {
  138|    306|        let readbuf = reader.fill(buf.len())?;
  139|    306|        let readbuf = readbuf.as_ref();
  140|    306|
  141|    306|        if readbuf.is_empty() {
  142|      0|            return Err(Error::Eof);
  143|    306|        }
  144|    306|
  145|    306|        let len = core::cmp::min(buf.len(), readbuf.len());
  146|    306|        buf[..len].copy_from_slice(&readbuf[..len]);
  147|    306|        reader.advance(len);
  148|    306|        buf = &mut buf[len..];
  149|       |    }
  150|       |
  151|    306|    Ok(())
  152|    306|}
_RINvXsg_NtNtCs1YscacFooSg_7cbor4ii4core3decNtB6_8TagStartNtB6_6Decode11decode_withNtNtB8_5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
  707|    304|    fn decode_with<R: Read<'a>>(byte: u8, reader: &mut R) -> Result<Self, Error<R::Error>> {
  708|    304|        TypeNum::new(!(major::TAG << 5), byte).decode_u64(reader).map(TagStart)
  709|    304|    }

_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNumtE3newCsgr0kjOx7ttC_11cbor_encode:
   52|  15.1k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  15.1k|        TypeNum { type_, value }
   54|  15.1k|    }
_RINvXs4_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
   98|  15.7k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|  15.7k|        match u32::try_from(self.value) {
  100|  15.2k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|    502|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|    502|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|  15.7k|        Ok(())
  107|  15.7k|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNumyE3newCsgr0kjOx7ttC_11cbor_encode:
   52|  15.7k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  15.7k|        TypeNum { type_, value }
   54|  15.7k|    }
_RINvXs1_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
   59|  15.1k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|  15.1k|        match self.value {
   61|  15.1k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|  1.54k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|  15.1k|        Ok(())
   65|  15.1k|    }
_RINvXsi_NtNtCs1YscacFooSg_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
  316|    608|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  317|    608|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|    608|        self.1.encode(writer)
  319|    608|    }
_RINvXs2_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
   70|  15.1k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|  15.1k|        match u8::try_from(self.value) {
   72|  15.1k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|     60|                let [x0, x1] = self.value.to_be_bytes();
   75|     60|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|  15.1k|        Ok(())
   79|  15.1k|    }
_RINvXs3_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
   84|  15.2k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|  15.2k|        match u16::try_from(self.value) {
   86|  15.1k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|     50|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|     50|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|  15.2k|        Ok(())
   93|  15.2k|    }
_RINvXs7_NtNtCs1YscacFooSg_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
  208|  13.3k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  209|  13.3k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|  13.3k|        writer.push(self.0)?;
  211|  13.3k|        Ok(())
  212|  13.3k|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNummE3newCsgr0kjOx7ttC_11cbor_encode:
   52|  15.2k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  15.2k|        TypeNum { type_, value }
   54|  15.2k|    }
_RINvXsu_NtNtCs1YscacFooSg_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
  159|    608|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|    608|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|    608|                }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core3encINtB5_7TypeNumhE3newCsgr0kjOx7ttC_11cbor_encode:
   52|  15.1k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|  15.1k|        TypeNum { type_, value }
   54|  15.1k|    }
_RINvXsd_NtNtCs1YscacFooSg_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsgr0kjOx7ttC_11cbor_encode:
  269|  1.21k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  270|  1.21k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|  1.21k|        Ok(())
  272|  1.21k|    }

_RNvMNtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB2_9BufWriter10into_innerCsgr0kjOx7ttC_11cbor_encode:
   24|    608|    pub fn into_inner(self) -> Vec<u8> {
   25|    608|        self.0
   26|    608|    }
_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read8step_outCsgr0kjOx7ttC_11cbor_encode:
   84|    608|    fn step_out(&mut self) {
   85|    608|        self.limit += 1;
   86|    608|    }
_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read4fillCsgr0kjOx7ttC_11cbor_encode:
   62|  16.2k|    fn fill<'b>(&'b mut self, want: usize) -> Result<dec::Reference<'de, 'b>, Self::Error> {
   63|  16.2k|        let len = core::cmp::min(self.buf.len(), want);
   64|  16.2k|        Ok(dec::Reference::Long(&self.buf[..len]))
   65|  16.2k|    }
_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7step_inCsgr0kjOx7ttC_11cbor_encode:
   74|    608|    fn step_in(&mut self) -> bool {
   75|    608|        if let Some(limit) = self.limit.checked_sub(1) {
   76|    608|            self.limit = limit;
   77|    608|            true
   78|       |        } else {
   79|      0|            false
   80|       |        }
   81|    608|    }
_RNvMs0_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReader3newCsgr0kjOx7ttC_11cbor_encode:
   53|    304|    pub fn new(buf: &[u8]) -> SliceReader<'_> {
   54|    304|        SliceReader { buf, limit: 256 }
   55|    304|    }
_RNvXs1_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB5_11SliceReaderNtNtB7_3dec4Read7advanceCsgr0kjOx7ttC_11cbor_encode:
   68|  15.6k|    fn advance(&mut self, n: usize) {
   69|  15.6k|        let len = core::cmp::min(self.buf.len(), n);
   70|  15.6k|        self.buf = &self.buf[len..];
   71|  15.6k|    }
_RNvMNtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB2_9BufWriter3newCsgr0kjOx7ttC_11cbor_encode:
   14|    608|    pub fn new(buf: Vec<u8>) -> Self {
   15|    608|       BufWriter(buf)
   16|    608|    }
_RNvXs_NtNtCs1YscacFooSg_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsgr0kjOx7ttC_11cbor_encode:
   39|  29.0k|    fn push(&mut self, input: &[u8]) -> Result<(), Self::Error> {
   40|  29.0k|        self.0.try_reserve(input.len())?;
   41|  29.0k|        self.0.extend_from_slice(input);
   42|  29.0k|        Ok(())
   43|  29.0k|    }

_RNvXs0_NtCsdutg7qHs94C_3cid3arbINtNtB7_3cid3CidKj40_ENtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
   85|    391|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   86|    391|        let v1 = size_hint::and_all(&[
   87|    391|            <[u8; 2]>::size_hint(depth),
   88|    391|            (0, Some(8)),
   89|    391|            <MultihashGeneric<S> as arbitrary::Arbitrary>::size_hint(depth),
   90|    391|        ]);
   91|    391|        if S >= 32 {
   92|    391|            size_hint::and(<u8>::size_hint(depth), size_hint::or((32, Some(32)), v1))
   93|       |        } else {
   94|      0|            v1
   95|       |        }
   96|    391|    }
_RNCNvXs0_NtCsdutg7qHs94C_3cid3arbINtNtB9_3cid3CidKj40_ENtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary0CseGqCtrHvTDC_11common_fuzz:
   74|    517|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs0_NtCsdutg7qHs94C_3cid3arbINtNtB7_3cid3CidKj40_ENtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitraryCseGqCtrHvTDC_11common_fuzz:
   58|    390|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   59|    390|        if S >= 32 && u.ratio(1, 10)? {
   60|     91|            let mh = MultihashGeneric::wrap(Code::Sha2_256.into(), u.bytes(32)?).unwrap();
   61|      6|            return Ok(CidGeneric::new_v0(mh).expect("32 bytes is correct for v0"));
   62|    299|        }
   63|    299|
   64|    299|        let mut codec = 0u64;
   65|    299|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   66|       |
   67|    816|        while len_choice & 1 == 1 {
   68|    517|            len_choice >>= 1;
   69|    517|
   70|    517|            let x = u.arbitrary::<u8>();
   71|    517|            let next = codec
   72|    517|                .checked_shl(8)
   73|    517|                .zip(x.ok())
   74|    517|                .map(|(next, x)| next.saturating_add(x as u64));
   75|    517|
   76|    517|            match next {
   77|      0|                None => break,
   78|    517|                Some(next) => codec = next,
   79|       |            }
   80|       |        }
   81|       |
   82|    299|        Ok(CidGeneric::new_v1(codec, u.arbitrary()?))
   83|    390|    }

_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E3newCsgr0kjOx7ttC_11cbor_encode:
   99|    298|    pub const fn new(version: Version, codec: u64, hash: Multihash<S>) -> Result<Self> {
  100|    298|        match version {
  101|       |            Version::V0 => {
  102|      0|                if codec != DAG_PB {
  103|      0|                    return Err(Error::InvalidCidV0Codec);
  104|      0|                }
  105|      0|                Self::new_v0(hash)
  106|       |            }
  107|    298|            Version::V1 => Ok(Self::new_v1(codec, hash)),
  108|       |        }
  109|    298|    }
_RNvXs6_NtCsdutg7qHs94C_3cid3cidINtB5_3CidKj40_EINtNtCs9SrTLDOTsEo_4core7convert7TryFromRShE8try_fromCsgr0kjOx7ttC_11cbor_encode:
  353|    304|    fn try_from(mut bytes: &[u8]) -> Result<Self> {
  354|    304|        Self::read_bytes(&mut bytes)
  355|    304|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E6new_v0Csgr0kjOx7ttC_11cbor_encode:
   78|      6|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      6|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      6|        }
   82|      6|        Ok(Self {
   83|      6|            version: Version::V0,
   84|      6|            codec: DAG_PB,
   85|      6|            hash,
   86|      6|        })
   87|      6|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E8to_bytesCsgr0kjOx7ttC_11cbor_encode:
  205|    608|    pub fn to_bytes(&self) -> Vec<u8> {
  206|    608|        let mut bytes = Vec::new();
  207|    608|        let written = self.write_bytes(&mut bytes).unwrap();
  208|    608|        debug_assert_eq!(written, bytes.len());
  209|    608|        bytes
  210|    608|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E6new_v1Csgr0kjOx7ttC_11cbor_encode:
   90|    298|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    298|        Self {
   92|    298|            version: Version::V1,
   93|    298|            codec,
   94|    298|            hash,
   95|    298|        }
   96|    298|    }
_RINvMNtCsdutg7qHs94C_3cid3cidINtB3_3CidKj40_E10read_bytesQRShECsgr0kjOx7ttC_11cbor_encode:
  140|    304|    pub fn read_bytes<R: io::Read>(mut r: R) -> Result<Self> {
  141|    304|        let version = varint_read_u64(&mut r)?;
  142|    304|        let codec = varint_read_u64(&mut r)?;
  143|       |
  144|       |        // CIDv0 has the fixed `0x12 0x20` prefix
  145|    304|        if [version, codec] == [0x12, 0x20] {
  146|      6|            let mut digest = [0u8; 32];
  147|      6|            r.read_exact(&mut digest)?;
  148|      6|            let mh = Multihash::wrap(version, &digest).expect("Digest is always 32 bytes.");
  149|      6|            return Self::new_v0(mh);
  150|    298|        }
  151|       |
  152|    298|        let version = Version::try_from(version)?;
  153|    298|        match version {
  154|      0|            Version::V0 => Err(Error::InvalidExplicitCidV0),
  155|       |            Version::V1 => {
  156|    298|                let mh = Multihash::read(r)?;
  157|    298|                Self::new(version, codec, mh)
  158|       |            }
  159|       |        }
  160|    304|    }
_RINvMNtCsdutg7qHs94C_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECsgr0kjOx7ttC_11cbor_encode:
  179|    608|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|    608|        let written = match self.version {
  181|     12|            Version::V0 => self.hash.write(w)?,
  182|    596|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|    608|        Ok(written)
  185|    608|    }
_RINvMNtCsdutg7qHs94C_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECsgr0kjOx7ttC_11cbor_encode:
  162|    596|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|    596|        let mut version_buf = varint_encode::u64_buffer();
  164|    596|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|    596|
  166|    596|        let mut codec_buf = varint_encode::u64_buffer();
  167|    596|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|    596|
  169|    596|        let mut written = version.len() + codec.len();
  170|    596|
  171|    596|        w.write_all(version)?;
  172|    596|        w.write_all(codec)?;
  173|    596|        written += self.hash.write(&mut w)?;
  174|       |
  175|    596|        Ok(written)
  176|    596|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E6new_v0CseGqCtrHvTDC_11common_fuzz:
   78|      6|    pub const fn new_v0(hash: Multihash<S>) -> Result<Self> {
   79|      6|        if hash.code() != SHA2_256 || hash.size() != 32 {
   80|      0|            return Err(Error::InvalidCidV0Multihash);
   81|      6|        }
   82|      6|        Ok(Self {
   83|      6|            version: Version::V0,
   84|      6|            codec: DAG_PB,
   85|      6|            hash,
   86|      6|        })
   87|      6|    }
_RNvMNtCsdutg7qHs94C_3cid3cidINtB2_3CidKj40_E6new_v1CseGqCtrHvTDC_11common_fuzz:
   90|    298|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|    298|        Self {
   92|    298|            version: Version::V1,
   93|    298|            codec,
   94|    298|            hash,
   95|    298|        }
   96|    298|    }

_RINvXNtCsdutg7qHs94C_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   29|    608|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|    608|    where
   31|    608|        S: ser::Serializer,
   32|    608|    {
   33|    608|        let value = ByteBuf::from(self.to_bytes());
   34|    608|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|    608|    }
_RINvXNvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtBb_3cid3CidKpENtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeINtB3_16MainEntryVisitorKj40_ENtBU_7Visitor20visit_newtype_structQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de15CidDeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   97|    304|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    304|            where
   99|    304|                D: de::Deserializer<'de>,
  100|    304|            {
  101|    304|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    304|            }
_RINvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtB8_3cid3CidKj40_ENtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   79|    304|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   80|    304|    where
   81|    304|        D: de::Deserializer<'de>,
   82|    304|    {
   83|    304|        /// Main visitor to deserialize a CID.
   84|    304|        ///
   85|    304|        /// This visitor has only a single entry point to deserialize CIDs, it's
   86|    304|        /// `visit_new_type_struct()`. This ensures that it isn't accidentally used to decode CIDs
   87|    304|        /// to bytes.
   88|    304|        struct MainEntryVisitor<const SIZE: usize>;
   89|    304|
   90|    304|        impl<'de, const SIZE: usize> de::Visitor<'de> for MainEntryVisitor<SIZE> {
   91|    304|            type Value = CidGeneric<SIZE>;
   92|    304|
   93|    304|            fn expecting(&self, fmt: &mut fmt::Formatter) -> fmt::Result {
   94|    304|                write!(fmt, "a valid CID in bytes, wrapped in an newtype struct")
   95|    304|            }
   96|    304|
   97|    304|            fn visit_newtype_struct<D>(self, deserializer: D) -> Result<Self::Value, D::Error>
   98|    304|            where
   99|    304|                D: de::Deserializer<'de>,
  100|    304|            {
  101|    304|                deserializer.deserialize_bytes(BytesToCidVisitor)
  102|    304|            }
  103|    304|        }
  104|    304|
  105|    304|        deserializer.deserialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, MainEntryVisitor)
  106|    304|    }
_RINvXs_NtCsdutg7qHs94C_3cid5serdeNtB5_17BytesToCidVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor11visit_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECsgr0kjOx7ttC_11cbor_encode:
   48|    304|    fn visit_bytes<E>(self, value: &[u8]) -> Result<Self::Value, E>
   49|    304|    where
   50|    304|        E: de::Error,
   51|    304|    {
   52|    304|        CidGeneric::<SIZE>::try_from(value)
   53|    304|            .map_err(|err| de::Error::custom(format!("Failed to deserialize CID: {}", err)))
   54|    304|    }

_RNvXs_NtCsdutg7qHs94C_3cid7versionNtB4_7VersionINtNtCs9SrTLDOTsEo_4core7convert7TryFromyE8try_fromCsgr0kjOx7ttC_11cbor_encode:
   34|    298|    fn try_from(raw: u64) -> Result<Self> {
   35|    298|        match raw {
   36|      0|            0 => Ok(Self::V0),
   37|    298|            1 => Ok(Self::V1),
   38|      0|            _ => Err(Error::InvalidCidVersion),
   39|       |        }
   40|    298|    }
_RNvXs0_NtCsdutg7qHs94C_3cid7versionyINtNtCs9SrTLDOTsEo_4core7convert4FromNtB5_7VersionE4fromCsgr0kjOx7ttC_11cbor_encode:
   44|    596|    fn from(ver: Version) -> u64 {
   45|    596|        match ver {
   46|      0|            Version::V0 => 0,
   47|    596|            Version::V1 => 1,
   48|       |        }
   49|    596|    }

_RNvNvCsgr0kjOx7ttC_11cbor_encode1__19___libfuzzer_sys_run:
  303|    304|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|       |                $body
  305|    304|            }
_RNvXCsa6haWA5TwtQ_13libfuzzer_sysNtB2_6CorpusINtNtCs9SrTLDOTsEo_4core7convert4FromuE4fromCsgr0kjOx7ttC_11cbor_encode:
   30|    304|    fn from(_: ()) -> Self {
   31|    304|        Self::Keep
   32|    304|    }
rust_fuzzer_test_input:
  259|    391|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    391|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    391|
  262|    391|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    391|                // implementation. This helps the fuzzer avoid exploring all the
  264|    391|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    391|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    391|                // get to longer inputs that actually lead to interesting executions
  267|    391|                // quicker.
  268|    391|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    390|                }
  271|    390|
  272|    390|                let mut u = Unstructured::new(bytes);
  273|    390|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    390|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    390|                }
  291|       |
  292|    390|                let data = match data {
  293|    304|                    Ok(d) => d,
  294|     86|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    304|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    304|                result.to_libfuzzer_code()
  299|    391|            }
_RNvMs_Csa6haWA5TwtQ_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCsgr0kjOx7ttC_11cbor_encode:
   40|    304|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    304|        match self {
   42|    304|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    304|    }
LLVMFuzzerTestOneInput:
   58|    391|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    391|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    391|    });
   63|    391|
   64|    391|    match test_input {
   65|    391|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    391|}
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}
_RNCNvCsa6haWA5TwtQ_13libfuzzer_sys15test_input_wrap0B3_:
   59|    391|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    391|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    391|        rust_fuzzer_test_input(data_slice)
   62|    391|    });

_RNvXs_NtCsjIAJgk4Fm4y_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
   65|    391|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   66|    391|        size_hint::and(<[u8; 3]>::size_hint(depth), (0, Some(S + 8)))
   67|    391|    }
_RNCNvXs_NtCsjIAJgk4Fm4y_9multihash3arbINtNtB8_9multihash9MultihashKj40_ENtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary0CseGqCtrHvTDC_11common_fuzz:
   51|    431|                .map(|(next, x)| next.saturating_add(x as u64));
_RNvXs_NtCsjIAJgk4Fm4y_9multihash3arbINtNtB6_9multihash9MultihashKj40_ENtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitraryCseGqCtrHvTDC_11common_fuzz:
   40|    299|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   41|    299|        let mut code = 0u64;
   42|    299|        let mut len_choice = u.arbitrary::<u8>()? | 1;
   43|       |
   44|    730|        while len_choice & 1 == 1 {
   45|    431|            len_choice >>= 1;
   46|    431|
   47|    431|            let x = u.arbitrary::<u8>();
   48|    431|            let next = code
   49|    431|                .checked_shl(8)
   50|    431|                .zip(x.ok())
   51|    431|                .map(|(next, x)| next.saturating_add(x as u64));
   52|    431|
   53|    431|            match next {
   54|      0|                None => break,
   55|    431|                Some(next) => code = next,
   56|       |            }
   57|       |        }
   58|       |
   59|    299|        let size = u.int_in_range(0..=S)?;
   60|    299|        let data = u.bytes(size)?;
   61|       |
   62|    298|        Ok(MultihashGeneric::wrap(code, data).unwrap())
   63|    299|    }

_RINvNtCsjIAJgk4Fm4y_9multihash9multihash15write_multihashQQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECsgr0kjOx7ttC_11cbor_encode:
  310|    596|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|    596|where
  312|    596|    W: io::Write,
  313|    596|{
  314|    596|    let mut code_buf = varint_encode::u64_buffer();
  315|    596|    let code = varint_encode::u64(code, &mut code_buf);
  316|    596|
  317|    596|    let mut size_buf = varint_encode::u8_buffer();
  318|    596|    let size = varint_encode::u8(size, &mut size_buf);
  319|    596|
  320|    596|    let written = code.len() + size.len() + digest.len();
  321|    596|
  322|    596|    w.write_all(code)?;
  323|    596|    w.write_all(size)?;
  324|    596|    w.write_all(digest)?;
  325|       |
  326|    596|    Ok(written)
  327|    596|}
_RINvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB5_9MultihashKj40_E5writeQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECsgr0kjOx7ttC_11cbor_encode:
  163|     12|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|     12|        write_multihash(w, self.code(), self.size(), self.digest())
  165|     12|    }
_RINvNtCsjIAJgk4Fm4y_9multihash9multihash14read_multihashQRShKj40_ECsgr0kjOx7ttC_11cbor_encode:
  335|    298|pub fn read_multihash<R, const S: usize>(mut r: R) -> Result<(u64, u8, [u8; S]), Error>
  336|    298|where
  337|    298|    R: io::Read,
  338|    298|{
  339|    298|    let code = read_u64(&mut r)?;
  340|    298|    let size = read_u64(&mut r)?;
  341|       |
  342|    298|    if size > S as u64 || size > u8::MAX as u64 {
  343|      0|        return Err(Error::InvalidSize(size));
  344|    298|    }
  345|    298|
  346|    298|    let mut digest = [0; S];
  347|    298|    r.read_exact(&mut digest[..size as usize])?;
  348|    298|    Ok((code, size as u8, digest))
  349|    298|}
_RINvNtCsjIAJgk4Fm4y_9multihash9multihash15write_multihashQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECsgr0kjOx7ttC_11cbor_encode:
  310|     12|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|     12|where
  312|     12|    W: io::Write,
  313|     12|{
  314|     12|    let mut code_buf = varint_encode::u64_buffer();
  315|     12|    let code = varint_encode::u64(code, &mut code_buf);
  316|     12|
  317|     12|    let mut size_buf = varint_encode::u8_buffer();
  318|     12|    let size = varint_encode::u8(size, &mut size_buf);
  319|     12|
  320|     12|    let written = code.len() + size.len() + digest.len();
  321|     12|
  322|     12|    w.write_all(code)?;
  323|     12|    w.write_all(size)?;
  324|     12|    w.write_all(digest)?;
  325|       |
  326|     12|    Ok(written)
  327|     12|}
_RINvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB5_9MultihashKj40_E4readQRShECsgr0kjOx7ttC_11cbor_encode:
  135|    298|    pub fn read<R: io::Read>(r: R) -> Result<Self, Error>
  136|    298|    where
  137|    298|        Self: Sized,
  138|    298|    {
  139|    298|        let (code, size, digest) = read_multihash(r)?;
  140|    298|        Ok(Self { code, size, digest })
  141|    298|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E6digestCsgr0kjOx7ttC_11cbor_encode:
  130|    608|    pub fn digest(&self) -> &[u8] {
  131|    608|        &self.digest[..self.size as usize]
  132|    608|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4wrapCsgr0kjOx7ttC_11cbor_encode:
  101|      6|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|      6|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|      6|        }
  105|      6|        let size = input_digest.len();
  106|      6|        let mut digest = [0; S];
  107|      6|        let mut i = 0;
  108|    198|        while i < size {
  109|    192|            digest[i] = input_digest[i];
  110|    192|            i += 1;
  111|    192|        }
  112|      6|        Ok(Self {
  113|      6|            code,
  114|      6|            size: size as u8,
  115|      6|            digest,
  116|      6|        })
  117|      6|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsgr0kjOx7ttC_11cbor_encode:
  125|    614|    pub const fn size(&self) -> u8 {
  126|    614|        self.size
  127|    614|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4codeCsgr0kjOx7ttC_11cbor_encode:
  120|    614|    pub const fn code(&self) -> u64 {
  121|    614|        self.code
  122|    614|    }
_RINvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECsgr0kjOx7ttC_11cbor_encode:
  163|    596|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|    596|        write_multihash(w, self.code(), self.size(), self.digest())
  165|    596|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4sizeCseGqCtrHvTDC_11common_fuzz:
  125|      6|    pub const fn size(&self) -> u8 {
  126|      6|        self.size
  127|      6|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4wrapCseGqCtrHvTDC_11common_fuzz:
  101|    304|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|    304|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|    304|        }
  105|    304|        let size = input_digest.len();
  106|    304|        let mut digest = [0; S];
  107|    304|        let mut i = 0;
  108|    647|        while i < size {
  109|    343|            digest[i] = input_digest[i];
  110|    343|            i += 1;
  111|    343|        }
  112|    304|        Ok(Self {
  113|    304|            code,
  114|    304|            size: size as u8,
  115|    304|            digest,
  116|    304|        })
  117|    304|    }
_RNvMs_NtCsjIAJgk4Fm4y_9multihash9multihashINtB4_9MultihashKj40_E4codeCseGqCtrHvTDC_11common_fuzz:
  120|      6|    pub const fn code(&self) -> u64 {
  121|      6|        self.code
  122|      6|    }

_RNvXs4_NtCsjIAJgk4Fm4y_9multihash14multihash_implyINtNtCs9SrTLDOTsEo_4core7convert4FromNtB5_4CodeE4fromCseGqCtrHvTDC_11common_fuzz:
   11|     91|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvYNtNtNtCscxungraXhZF_10fvm_shared7address8protocol8ProtocolNtNtCs1o5kPwn786I_10num_traits4cast13FromPrimitive7from_u8B8_:
  448|  5.44k|    fn from_u8(n: u8) -> Option<Self> {
  449|  5.44k|        FromPrimitive::from_u64(From::from(n))
  450|  5.44k|    }

_RNvMs2_NtCsl7lNOXGcE0N_9once_cell3impINtB5_8OnceCellNtNtCsfyv4r1PwjHS_5alloc6string6StringE14is_initializedCsgr0kjOx7ttC_11cbor_encode:
   49|    390|    pub(crate) fn is_initialized(&self) -> bool {
   50|    390|        // An `Acquire` load is enough because that makes all the initialization
   51|    390|        // operations visible to us, and, this being a fast path, weaker
   52|    390|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    390|        // `SeqCst` operations on the slow path.
   54|    390|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    390|    }

_RNvMs4_NtCsl7lNOXGcE0N_9once_cell4syncINtB5_8OnceCellNtNtCsfyv4r1PwjHS_5alloc6string6StringE3getCsgr0kjOx7ttC_11cbor_encode:
  965|    390|        pub fn get(&self) -> Option<&T> {
  966|    390|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    390|                None
  971|       |            }
  972|    390|        }

_RNvMs1_CsacNEgsRTSCS_10scopeguardINtB5_10ScopeGuardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBN_EuE13with_strategyCsgr0kjOx7ttC_11cbor_encode:
  326|    608|    pub fn with_strategy(v: T, dropfn: F) -> ScopeGuard<T, F, S> {
  327|    608|        ScopeGuard {
  328|    608|            value: ManuallyDrop::new(v),
  329|    608|            dropfn: ManuallyDrop::new(dropfn),
  330|    608|            strategy: PhantomData,
  331|    608|        }
  332|    608|    }
_RNvXs4_CsacNEgsRTSCS_10scopeguardINtB5_10ScopeGuardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs9SrTLDOTsEo_4core3ops5deref8DerefMut9deref_mutCsgr0kjOx7ttC_11cbor_encode:
  460|    608|    fn deref_mut(&mut self) -> &mut T {
  461|    608|        &mut *self.value
  462|    608|    }
_RINvCsacNEgsRTSCS_10scopeguard5guardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBy_EuECsgr0kjOx7ttC_11cbor_encode:
  375|    608|pub fn guard<T, F>(v: T, dropfn: F) -> ScopeGuard<T, F, Always>
  376|    608|where
  377|    608|    F: FnOnce(T),
  378|    608|{
  379|    608|    ScopeGuard::with_strategy(v, dropfn)
  380|    608|}
_RNvXCsacNEgsRTSCS_10scopeguardNtB2_6AlwaysNtB2_8Strategy10should_run:
  231|    608|    fn should_run() -> bool {
  232|    608|        true
  233|    608|    }
_RNvXs5_CsacNEgsRTSCS_10scopeguardINtB5_10ScopeGuardQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEFBN_EuENtNtNtCs9SrTLDOTsEo_4core3ops4drop4Drop4dropCsgr0kjOx7ttC_11cbor_encode:
  470|    608|    fn drop(&mut self) {
  471|    608|        // This is OK because the fields are `ManuallyDrop`s
  472|    608|        // which will not be dropped by the compiler.
  473|    608|        let (value, dropfn) = unsafe { (ptr::read(&*self.value), ptr::read(&*self.dropfn)) };
  474|    608|        if S::should_run() {
  475|    608|            dropfn(value);
  476|    608|        }
  477|    608|    }

_RINvXNvXsX_NtNtCs2xjNbAYLrNs_5serde2de5implsyNtBb_11Deserialize11deserializeNtB3_16PrimitiveVisitorNtBb_7Visitor9visit_u64INtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECsgr0kjOx7ttC_11cbor_encode:
  136|    304|        fn $visit<E>(self, v: $ty) -> Result<Self::Value, E>
  137|    304|        where
  138|    304|            E: Error,
  139|    304|        {
  140|    304|            Ok(v)
  141|    304|        }
_RINvXNvXsh_NtNtCs2xjNbAYLrNs_5serde2de5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecpENtBb_11Deserialize11deserializeINtB3_10VecVisitorNtNtCscxungraXhZF_10fvm_shared7address7AddressENtBb_7Visitor9visit_seqINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
 1027|    304|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|    304|            where
 1029|    304|                A: SeqAccess<'de>,
 1030|    304|            {
 1031|    304|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|    304|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|       |
 1034|  5.44k|                while let Some(value) = tri!(seq.next_element()) {
 1035|  5.13k|                    values.push(value);
 1036|  5.13k|                }
 1037|       |
 1038|    304|                Ok(values)
 1039|    304|            }
_RINvXsh_NtNtCs2xjNbAYLrNs_5serde2de5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB8_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
 1009|    304|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
 1010|    304|    where
 1011|    304|        D: Deserializer<'de>,
 1012|    304|    {
 1013|    304|        struct VecVisitor<T> {
 1014|    304|            marker: PhantomData<T>,
 1015|    304|        }
 1016|    304|
 1017|    304|        impl<'de, T> Visitor<'de> for VecVisitor<T>
 1018|    304|        where
 1019|    304|            T: Deserialize<'de>,
 1020|    304|        {
 1021|    304|            type Value = Vec<T>;
 1022|    304|
 1023|    304|            fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
 1024|    304|                formatter.write_str("a sequence")
 1025|    304|            }
 1026|    304|
 1027|    304|            fn visit_seq<A>(self, mut seq: A) -> Result<Self::Value, A::Error>
 1028|    304|            where
 1029|    304|                A: SeqAccess<'de>,
 1030|    304|            {
 1031|    304|                let capacity = size_hint::cautious::<T>(seq.size_hint());
 1032|    304|                let mut values = Vec::<T>::with_capacity(capacity);
 1033|    304|
 1034|    304|                while let Some(value) = tri!(seq.next_element()) {
 1035|    304|                    values.push(value);
 1036|    304|                }
 1037|    304|
 1038|    304|                Ok(values)
 1039|    304|            }
 1040|    304|        }
 1041|    304|
 1042|    304|        let visitor = VecVisitor {
 1043|    304|            marker: PhantomData,
 1044|    304|        };
 1045|    304|        deserializer.deserialize_seq(visitor)
 1046|    304|    }
_RINvXsX_NtNtCs2xjNbAYLrNs_5serde2de5implsyNtB8_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  111|    304|            fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  112|    304|            where
  113|    304|                D: Deserializer<'de>,
  114|    304|            {
  115|    304|                struct PrimitiveVisitor;
  116|    304|
  117|    304|                impl<'de> Visitor<'de> for PrimitiveVisitor {
  118|    304|                    type Value = $primitive;
  119|    304|
  120|    304|                    fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
  121|    304|                        formatter.write_str(stringify!($primitive))
  122|    304|                    }
  123|    304|
  124|    304|                    $($($method!($val : $visit);)*)*
  125|    304|                }
  126|    304|
  127|    304|                deserializer.$deserialize(PrimitiveVisitor)
  128|    304|            }

_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsgr0kjOx7ttC_11cbor_encode:
 1722|    304|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    304|    where
 1724|    304|        T: Deserialize<'de>,
 1725|    304|    {
 1726|    304|        self.next_element_seed(PhantomData)
 1727|    304|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementyECsgr0kjOx7ttC_11cbor_encode:
 1722|    304|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    304|    where
 1724|    304|        T: Deserialize<'de>,
 1725|    304|    {
 1726|    304|        self.next_element_seed(PhantomData)
 1727|    304|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  790|    304|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    304|    where
  792|    304|        D: Deserializer<'de>,
  793|    304|    {
  794|    304|        T::deserialize(deserializer)
  795|    304|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDatayENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  790|    304|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    304|    where
  792|    304|        D: Deserializer<'de>,
  793|    304|    {
  794|    304|        T::deserialize(deserializer)
  795|    304|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  790|    304|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    304|    where
  792|    304|        D: Deserializer<'de>,
  793|    304|    {
  794|    304|        T::deserialize(deserializer)
  795|    304|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  790|  5.44k|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|  5.44k|    where
  792|  5.44k|        D: Deserializer<'de>,
  793|  5.44k|    {
  794|  5.44k|        T::deserialize(deserializer)
  795|  5.44k|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldECsgr0kjOx7ttC_11cbor_encode:
 1722|    304|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    304|    where
 1724|    304|        T: Deserialize<'de>,
 1725|    304|    {
 1726|    304|        self.next_element_seed(PhantomData)
 1727|    304|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  790|    304|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    304|    where
  792|    304|        D: Deserializer<'de>,
  793|    304|    {
  794|    304|        T::deserialize(deserializer)
  795|    304|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEECsgr0kjOx7ttC_11cbor_encode:
 1722|    304|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    304|    where
 1724|    304|        T: Deserialize<'de>,
 1725|    304|    {
 1726|    304|        self.next_element_seed(PhantomData)
 1727|    304|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  790|    304|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    304|    where
  792|    304|        D: Deserializer<'de>,
  793|    304|    {
  794|    304|        T::deserialize(deserializer)
  795|    304|    }
_RINvYNtNtCsdutg7qHs94C_3cid5serde17BytesToCidVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor20visit_borrowed_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECsgr0kjOx7ttC_11cbor_encode:
 1562|    304|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    304|    where
 1564|    304|        E: Error,
 1565|    304|    {
 1566|    304|        self.visit_bytes(v)
 1567|    304|    }
_RINvYNtNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtBa_11Deserialize11deserialize10VecVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor20visit_borrowed_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECsgr0kjOx7ttC_11cbor_encode:
 1562|    608|    fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
 1563|    608|    where
 1564|    608|        E: Error,
 1565|    608|    {
 1566|    608|        self.visit_bytes(v)
 1567|    608|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EECsgr0kjOx7ttC_11cbor_encode:
 1722|    304|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    304|    where
 1724|    304|        T: Deserialize<'de>,
 1725|    304|    {
 1726|    304|        self.next_element_seed(PhantomData)
 1727|    304|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtNtCscxungraXhZF_10fvm_shared7address7AddressECsgr0kjOx7ttC_11cbor_encode:
 1722|  5.74k|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|  5.74k|    where
 1724|  5.74k|        T: Deserialize<'de>,
 1725|  5.74k|    {
 1726|  5.74k|        self.next_element_seed(PhantomData)
 1727|  5.74k|    }
_RINvYINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess12next_elementNtNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB2L_7PayloadNtB1L_11Deserialize11deserialize1__NtB2I_5InnerB3x_11deserializeNtB2D_9___VisitorNtB1L_7Visitor9visit_seq17___DeserializeWithECsgr0kjOx7ttC_11cbor_encode:
 1722|    304|    fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
 1723|    304|    where
 1724|    304|        T: Deserialize<'de>,
 1725|    304|    {
 1726|    304|        self.next_element_seed(PhantomData)
 1727|    304|    }
_RINvXs3_NtCs2xjNbAYLrNs_5serde2deINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB1q_7PayloadNtB6_11Deserialize11deserialize1__NtB1n_5InnerB2c_11deserializeNtB1i_9___VisitorNtB6_7Visitor9visit_seq17___DeserializeWithENtB6_15DeserializeSeed11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  790|    304|    fn deserialize<D>(self, deserializer: D) -> Result<T, D::Error>
  791|    304|    where
  792|    304|        D: Deserializer<'de>,
  793|    304|    {
  794|    304|        T::deserialize(deserializer)
  795|    304|    }

_RINvNtNtCs2xjNbAYLrNs_5serde2de9size_hint8cautiousNtNtCscxungraXhZF_10fvm_shared7address7AddressECsgr0kjOx7ttC_11cbor_encode:
   11|    304|pub fn cautious<Element>(hint: Option<usize>) -> usize {
   12|    304|    const MAX_PREALLOC_BYTES: usize = 1024 * 1024;
   13|    304|
   14|    304|    if mem::size_of::<Element>() == 0 {
   15|      0|        0
   16|       |    } else {
   17|    304|        cmp::min(
   18|    304|            hint.unwrap_or(0),
   19|    304|            MAX_PREALLOC_BYTES / mem::size_of::<Element>(),
   20|    304|        )
   21|       |    }
   22|    304|}

_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRyNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  452|    608|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    608|            where
  454|    608|                S: Serializer,
  455|    608|            {
  456|    608|                (**self).serialize(serializer)
  457|    608|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRNtNtCscxungraXhZF_10fvm_shared7address7AddressNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  452|  10.8k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  10.8k|            where
  454|  10.8k|                S: Serializer,
  455|  10.8k|            {
  456|  10.8k|                (**self).serialize(serializer)
  457|  10.8k|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  452|    608|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    608|            where
  454|    608|                S: Serializer,
  455|    608|            {
  456|    608|                (**self).serialize(serializer)
  457|    608|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldNtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  452|    608|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    608|            where
  454|    608|                S: Serializer,
  455|    608|            {
  456|    608|                (**self).serialize(serializer)
  457|    608|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  452|    608|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    608|            where
  454|    608|                S: Serializer,
  455|    608|            {
  456|    608|                (**self).serialize(serializer)
  457|    608|            }
_RINvXs1m_NtNtCs2xjNbAYLrNs_5serde3ser5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressENtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  190|    608|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|    608|            where
  192|    608|                S: Serializer,
  193|    608|            {
  194|    608|                serializer.collect_seq(self)
  195|    608|            }
_RINvXs1G_NtNtCs2xjNbAYLrNs_5serde3ser5implsRINtNtCsdutg7qHs94C_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  452|    608|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|    608|            where
  454|    608|                S: Serializer,
  455|    608|            {
  456|    608|                (**self).serialize(serializer)
  457|    608|            }
_RINvXsH_NtNtCs2xjNbAYLrNs_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   11|    608|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|    608|            where
   13|    608|                S: Serializer,
   14|    608|            {
   15|    608|                serializer.$method(*self $($cast)*)
   16|    608|            }

_RNCINvYQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer11collect_seqRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEE0Csgr0kjOx7ttC_11cbor_encode:
 1278|  10.2k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer11collect_seqRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEECsgr0kjOx7ttC_11cbor_encode:
 1271|    608|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|    608|    where
 1273|    608|        I: IntoIterator,
 1274|    608|        <I as IntoIterator>::Item: Serialize,
 1275|    608|    {
 1276|    608|        let mut iter = iter.into_iter();
 1277|    608|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|    608|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|    608|        serializer.end()
 1280|    608|    }
_RINvNtCs2xjNbAYLrNs_5serde3ser17iterator_len_hintINtNtNtCs9SrTLDOTsEo_4core5slice4iter4IterNtNtCscxungraXhZF_10fvm_shared7address7AddressEECsgr0kjOx7ttC_11cbor_encode:
 1944|    608|fn iterator_len_hint<I>(iter: &I) -> Option<usize>
 1945|    608|where
 1946|    608|    I: Iterator,
 1947|    608|{
 1948|    608|    match iter.size_hint() {
 1949|    608|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|    608|}

_RINvMNtCshC5wrnBZx9o_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCsfyv4r1PwjHS_5alloc3vec3VechEECsgr0kjOx7ttC_11cbor_encode:
   60|    608|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|    608|        ByteBuf {
   62|    608|            bytes: bytes.into(),
   63|    608|        }
   64|    608|    }
_RINvXsc_NtCshC5wrnBZx9o_11serde_bytes7bytebufNtB6_7ByteBufNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  186|    608|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|    608|    where
  188|    608|        S: Serializer,
  189|    608|    {
  190|    608|        serializer.serialize_bytes(&self.bytes)
  191|    608|    }

_RINvNtCsazDgIAEeCwb_18serde_ipld_dagcbor14cbor4ii_nonpub8peek_oneNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderECsgr0kjOx7ttC_11cbor_encode:
   26|    608|pub(crate) fn peek_one<'a, R: dec::Read<'a>>(reader: &mut R) -> Result<u8, DecodeError<R::Error>> {
   27|    608|    let buf = match reader.fill(1)? {
   28|    608|        dec::Reference::Long(buf) => buf,
   29|      0|        dec::Reference::Short(buf) => buf,
   30|       |    };
   31|    608|    let byte = buf.first().copied().ok_or(DecodeError::Eof)?;
   32|    304|    Ok(byte)
   33|    608|}

_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer20deserialize_byte_bufNtNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB33_11Deserialize11deserialize10VecVisitorECsgr0kjOx7ttC_11cbor_encode:
  250|    608|    fn deserialize_byte_buf<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  251|    608|    where
  252|    608|        V: Visitor<'de>,
  253|    608|    {
  254|    608|        self.deserialize_bytes(visitor)
  255|    608|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer15deserialize_u64NtNvXsX_NtB1X_5implsyNtB1X_11Deserialize11deserialize16PrimitiveVisitorECsgr0kjOx7ttC_11cbor_encode:
  142|    304|        fn $name<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  143|    304|        where V: Visitor<'de>
  144|    304|        {
  145|    304|            let value = <$t>::decode(&mut self.reader)?;
  146|    304|            visitor.$visit(value)
  147|    304|        }
_RNvMs1_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE5tupleCsgr0kjOx7ttC_11cbor_encode:
  442|    304|    pub fn tuple(
  443|    304|        de: &'a mut Deserializer<R>,
  444|    304|        len: usize,
  445|    304|    ) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  446|    304|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  447|       |
  448|    304|        if array_start.0 == Some(len) {
  449|    304|            Ok(Accessor { de, len })
  450|       |        } else {
  451|      0|            Err(DecodeError::RequireLength {
  452|      0|                name: "tuple",
  453|      0|                expect: len,
  454|      0|                value: array_start.0.unwrap_or(0),
  455|      0|            })
  456|       |        }
  457|    304|    }
_RNCNvMs1_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB7_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE5arrays_0Csgr0kjOx7ttC_11cbor_encode:
  437|    304|            move |len| Ok(Accessor { de, len }),
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldEECsgr0kjOx7ttC_11cbor_encode:
  476|    304|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    304|    where
  478|    304|        T: de::DeserializeSeed<'de>,
  479|    304|    {
  480|    304|        if self.len > 0 {
  481|    304|            self.len -= 1;
  482|    304|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    304|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldEECsgr0kjOx7ttC_11cbor_encode:
  476|    304|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    304|    where
  478|    304|        T: de::DeserializeSeed<'de>,
  479|    304|    {
  480|    304|        if self.len > 0 {
  481|    304|            self.len -= 1;
  482|    304|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    304|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_tupleNtNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB33_7PayloadNtB1X_11Deserialize11deserialize1__NtB30_5InnerB3P_11deserialize9___VisitorECsgr0kjOx7ttC_11cbor_encode:
  343|    304|    fn deserialize_tuple<V>(self, len: usize, visitor: V) -> Result<V::Value, Self::Error>
  344|    304|    where
  345|    304|        V: Visitor<'de>,
  346|    304|    {
  347|    304|        let mut de = self.try_step()?;
  348|    304|        let seq = Accessor::tuple(&mut de, len)?;
  349|    304|        visitor.visit_seq(seq)
  350|    304|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3E_7PayloadNtB1R_11Deserialize11deserialize1__NtB3B_5InnerB4q_11deserializeNtB3w_9___VisitorNtB1R_7Visitor9visit_seq17___DeserializeWithEECsgr0kjOx7ttC_11cbor_encode:
  476|    304|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    304|    where
  478|    304|        T: de::DeserializeSeed<'de>,
  479|    304|    {
  480|    304|        if self.len > 0 {
  481|    304|            self.len -= 1;
  482|    304|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    304|    }
_RNCNvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE8try_step0Csgr0kjOx7ttC_11cbor_encode:
  106|    608|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_bytesNtNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB30_11Deserialize11deserialize10VecVisitorECsgr0kjOx7ttC_11cbor_encode:
  239|    608|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|    608|    where
  241|    608|        V: Visitor<'de>,
  242|    608|    {
  243|    608|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|    608|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|    608|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer26deserialize_newtype_structINtNvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtB3d_3cid3CidKpENtB1X_11Deserialize11deserialize16MainEntryVisitorKj40_EECsgr0kjOx7ttC_11cbor_encode:
  317|    304|    fn deserialize_newtype_struct<V>(
  318|    304|        self,
  319|    304|        name: &'static str,
  320|    304|        visitor: V,
  321|    304|    ) -> Result<V::Value, Self::Error>
  322|    304|    where
  323|    304|        V: Visitor<'de>,
  324|    304|    {
  325|    304|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  326|    304|            self.deserialize_cid(visitor)
  327|       |        } else {
  328|      0|            visitor.visit_newtype_struct(self)
  329|       |        }
  330|    304|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEEECsgr0kjOx7ttC_11cbor_encode:
  476|    304|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    304|    where
  478|    304|        T: de::DeserializeSeed<'de>,
  479|    304|    {
  480|    304|        if self.len > 0 {
  481|    304|            self.len -= 1;
  482|    304|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    304|    }
_RINvXs7_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_15CidDeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_bytesNtNtCsdutg7qHs94C_3cid5serde17BytesToCidVisitorECsgr0kjOx7ttC_11cbor_encode:
  628|    304|    fn deserialize_bytes<V: de::Visitor<'de>>(self, visitor: V) -> Result<V::Value, Self::Error> {
  629|    304|        let byte = peek_one(&mut self.0.reader)?;
  630|    304|        match dec::if_major(byte) {
  631|       |            major::BYTES => {
  632|       |                // CBOR encoded CIDs have a zero byte prefix we have to remove.
  633|    304|                match <types::Bytes<Cow<[u8]>>>::decode(&mut self.0.reader)?.0 {
  634|    304|                    Cow::Borrowed(buf) => {
  635|    304|                        if buf.len() <= 1 || buf[0] != 0 {
  636|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  637|       |                        } else {
  638|    304|                            visitor.visit_borrowed_bytes(&buf[1..])
  639|       |                        }
  640|       |                    }
  641|      0|                    Cow::Owned(mut buf) => {
  642|      0|                        if buf.len() <= 1 || buf[0] != 0 {
  643|      0|                            Err(DecodeError::Msg("Invalid CID".into()))
  644|       |                        } else {
  645|      0|                            buf.remove(0);
  646|      0|                            visitor.visit_byte_buf(buf)
  647|       |                        }
  648|       |                    }
  649|       |                }
  650|       |            }
  651|      0|            _ => Err(DecodeError::Unsupported { byte }),
  652|       |        }
  653|    304|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataNtNtCscxungraXhZF_10fvm_shared7address7AddressEECsgr0kjOx7ttC_11cbor_encode:
  476|  5.74k|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|  5.74k|    where
  478|  5.74k|        T: de::DeserializeSeed<'de>,
  479|  5.74k|    {
  480|  5.74k|        if self.len > 0 {
  481|  5.44k|            self.len -= 1;
  482|  5.44k|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|    304|            Ok(None)
  485|       |        }
  486|  5.74k|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDataINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EEECsgr0kjOx7ttC_11cbor_encode:
  476|    304|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    304|    where
  478|    304|        T: de::DeserializeSeed<'de>,
  479|    304|    {
  480|    304|        if self.len > 0 {
  481|    304|            self.len -= 1;
  482|    304|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    304|    }
_RNvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE8try_stepCsgr0kjOx7ttC_11cbor_encode:
  101|    608|    fn try_step<'a>(
  102|    608|        &'a mut self,
  103|    608|    ) -> Result<scopeguard::ScopeGuard<&'a mut Self, fn(&'a mut Self) -> ()>, DecodeError<R::Error>>
  104|    608|    {
  105|    608|        if self.reader.step_in() {
  106|    608|            Ok(scopeguard::guard(self, |de| de.reader.step_out()))
  107|       |        } else {
  108|      0|            Err(DecodeError::DepthLimit)
  109|       |        }
  110|    608|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3a_7PayloadNtB1X_11Deserialize11deserialize1__NtB37_5InnerB3W_11deserialize9___VisitorECsgr0kjOx7ttC_11cbor_encode:
  353|    304|    fn deserialize_tuple_struct<V>(
  354|    304|        self,
  355|    304|        _name: &'static str,
  356|    304|        len: usize,
  357|    304|        visitor: V,
  358|    304|    ) -> Result<V::Value, Self::Error>
  359|    304|    where
  360|    304|        V: Visitor<'de>,
  361|    304|    {
  362|    304|        self.deserialize_tuple(len, visitor)
  363|    304|    }
_RNvMs1_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE5arrayCsgr0kjOx7ttC_11cbor_encode:
  433|    304|    pub fn array(de: &'a mut Deserializer<R>) -> Result<Accessor<'a, R>, DecodeError<R::Error>> {
  434|    304|        let array_start = dec::ArrayStart::decode(&mut de.reader)?;
  435|    304|        array_start.0.map_or_else(
  436|    304|            || Err(DecodeError::IndefiniteSize),
  437|    304|            move |len| Ok(Accessor { de, len }),
  438|    304|        )
  439|    304|    }
_RNvMNtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB2_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE11from_readerCsgr0kjOx7ttC_11cbor_encode:
   93|    304|    pub fn from_reader(reader: R) -> Deserializer<R> {
   94|    304|        Deserializer { reader }
   95|    304|    }
_RINvNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de10from_sliceNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECsgr0kjOx7ttC_11cbor_encode:
   40|    304|pub fn from_slice<'a, T>(buf: &'a [u8]) -> Result<T, DecodeError<Infallible>>
   41|    304|where
   42|    304|    T: de::Deserialize<'a>,
   43|    304|{
   44|    304|    let reader = SliceReader::new(buf);
   45|    304|    let mut deserializer = Deserializer::from_reader(reader);
   46|    304|    let value = serde::Deserialize::deserialize(&mut deserializer)?;
   47|    304|    deserializer.end()?;
   48|    304|    Ok(value)
   49|    304|}
_RNvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB4_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE3endCsgr0kjOx7ttC_11cbor_encode:
  130|    304|    pub fn end(&mut self) -> Result<(), DecodeError<R::Error>> {
  131|    304|        match peek_one(&mut self.reader) {
  132|      0|            Ok(_) => Err(DecodeError::TrailingData),
  133|    304|            Err(DecodeError::Eof) => Ok(()),
  134|      0|            Err(error) => Err(error),
  135|       |        }
  136|    304|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer17deserialize_bytesNtNvXs0_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShENtB31_11Deserialize11deserialize10CowVisitorECsgr0kjOx7ttC_11cbor_encode:
  239|  5.74k|    fn deserialize_bytes<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  240|  5.74k|    where
  241|  5.74k|        V: Visitor<'de>,
  242|  5.74k|    {
  243|  5.74k|        match <types::Bytes<Cow<[u8]>>>::decode(&mut self.reader)?.0 {
  244|  5.74k|            Cow::Borrowed(buf) => visitor.visit_borrowed_bytes(buf),
  245|      0|            Cow::Owned(buf) => visitor.visit_byte_buf(buf),
  246|       |        }
  247|  5.74k|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB6_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess17next_element_seedINtNtCs9SrTLDOTsEo_4core6marker11PhantomDatayEECsgr0kjOx7ttC_11cbor_encode:
  476|    304|    fn next_element_seed<T>(&mut self, seed: T) -> Result<Option<T::Value>, Self::Error>
  477|    304|    where
  478|    304|        T: de::DeserializeSeed<'de>,
  479|    304|    {
  480|    304|        if self.len > 0 {
  481|    304|            self.len -= 1;
  482|    304|            Ok(Some(seed.deserialize(&mut *self.de)?))
  483|       |        } else {
  484|      0|            Ok(None)
  485|       |        }
  486|    304|    }
_RNvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de9SeqAccess9size_hintCsgr0kjOx7ttC_11cbor_encode:
  489|    304|    fn size_hint(&self) -> Option<usize> {
  490|    304|        Some(self.len)
  491|    304|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deQINtB6_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderENtNtCs2xjNbAYLrNs_5serde2de12Deserializer15deserialize_seqINtNvXsh_NtB1X_5implsINtNtCsfyv4r1PwjHS_5alloc3vec3VecpENtB1X_11Deserialize11deserialize10VecVisitorNtNtCscxungraXhZF_10fvm_shared7address7AddressEECsgr0kjOx7ttC_11cbor_encode:
  333|    304|    fn deserialize_seq<V>(self, visitor: V) -> Result<V::Value, Self::Error>
  334|    304|    where
  335|    304|        V: Visitor<'de>,
  336|    304|    {
  337|    304|        let mut de = self.try_step()?;
  338|    304|        let seq = Accessor::array(&mut de)?;
  339|    304|        visitor.visit_seq(seq)
  340|    304|    }
_RINvMs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor2deINtB5_12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderE15deserialize_cidINtNvXs0_NtCsdutg7qHs94C_3cid5serdeINtNtB2l_3cid3CidKpENtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize16MainEntryVisitorKj40_EECsgr0kjOx7ttC_11cbor_encode:
  113|    304|    fn deserialize_cid<V>(&mut self, visitor: V) -> Result<V::Value, DecodeError<R::Error>>
  114|    304|    where
  115|    304|        V: Visitor<'de>,
  116|    304|    {
  117|    304|        let tag = dec::TagStart::decode(&mut self.reader)?;
  118|       |
  119|    304|        match tag.0 {
  120|    304|            CBOR_TAGS_CID => visitor.visit_newtype_struct(&mut CidDeserializer(self)),
  121|      0|            _ => Err(DecodeError::TypeMismatch {
  122|      0|                name: "CBOR tag",
  123|      0|                byte: tag.0 as u8,
  124|      0|            }),
  125|       |        }
  126|    304|    }

_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldNtNvXNvNvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtB3b_7PayloadNtB1W_9Serialize9serialize1__NtB36_5InnerB3X_9serialize15___SerializeWithECsgr0kjOx7ttC_11cbor_encode:
  414|    608|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    608|        value.serialize(&mut *self.ser)
  416|    608|    }
_RINvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser12SerializeSeq17serialize_elementRNtNtCscxungraXhZF_10fvm_shared7address7AddressECsgr0kjOx7ttC_11cbor_encode:
  380|  10.2k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  10.2k|        value.serialize(&mut *self.ser)
  382|  10.2k|    }
_RNvMNtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterE3newCsgr0kjOx7ttC_11cbor_encode:
   51|    608|    pub fn new(writer: W) -> Serializer<W> {
   52|    608|        Serializer { writer }
   53|    608|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRyECsgr0kjOx7ttC_11cbor_encode:
  414|    608|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    608|        value.serialize(&mut *self.ser)
  416|    608|    }
_RNvMNtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterE10into_innerCsgr0kjOx7ttC_11cbor_encode:
   56|    608|    pub fn into_inner(self) -> W {
   57|    608|        self.writer
   58|    608|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCscxungraXhZF_10fvm_shared7address7AddressECsgr0kjOx7ttC_11cbor_encode:
  414|    608|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    608|        value.serialize(&mut *self.ser)
  416|    608|    }
_RINvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer24serialize_newtype_structNtNtCshC5wrnBZx9o_11serde_bytes7bytebuf7ByteBufECsgr0kjOx7ttC_11cbor_encode:
  199|    608|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|    608|        self,
  201|    608|        name: &'static str,
  202|    608|        value: &T,
  203|    608|    ) -> Result<Self::Ok, Self::Error> {
  204|    608|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|    608|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|    608|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer13serialize_seqCsgr0kjOx7ttC_11cbor_encode:
  225|    608|    fn serialize_seq(self, len: Option<usize>) -> Result<Self::SerializeSeq, Self::Error> {
  226|    608|        if let Some(len) = len {
  227|    608|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|    608|        Ok(Collect {
  232|    608|            bounded: len.is_some(),
  233|    608|            ser: self,
  234|    608|        })
  235|    608|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsfyv4r1PwjHS_5alloc3vec3VecNtNtCscxungraXhZF_10fvm_shared7address7AddressEECsgr0kjOx7ttC_11cbor_encode:
  414|    608|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    608|        value.serialize(&mut *self.ser)
  416|    608|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer22serialize_tuple_structCsgr0kjOx7ttC_11cbor_encode:
  244|    608|    fn serialize_tuple_struct(
  245|    608|        self,
  246|    608|        _name: &'static str,
  247|    608|        len: usize,
  248|    608|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|    608|        self.serialize_tuple(len)
  250|    608|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRNtCsaKmXn3VhZf2_17fvm_ipld_bitfield8BitFieldECsgr0kjOx7ttC_11cbor_encode:
  414|    608|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    608|        value.serialize(&mut *self.ser)
  416|    608|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer13serialize_u64Csgr0kjOx7ttC_11cbor_encode:
  122|    608|    fn serialize_u64(self, v: u64) -> Result<Self::Ok, Self::Error> {
  123|    608|        v.encode(&mut self.writer)?;
  124|    608|        Ok(())
  125|    608|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer15serialize_bytesCsgr0kjOx7ttC_11cbor_encode:
  159|  12.7k|    fn serialize_bytes(self, v: &[u8]) -> Result<Self::Ok, Self::Error> {
  160|  12.7k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  12.7k|        Ok(())
  162|  12.7k|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated19UnvalidatedBitFieldECsgr0kjOx7ttC_11cbor_encode:
  414|    608|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    608|        value.serialize(&mut *self.ser)
  416|    608|    }
_RNvXs_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer15serialize_tupleCsgr0kjOx7ttC_11cbor_encode:
  238|    608|    fn serialize_tuple(self, len: usize) -> Result<Self::SerializeTuple, Self::Error> {
  239|    608|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|    608|        Ok(BoundedCollect { ser: self })
  241|    608|    }
_RINvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct15serialize_fieldRINtNtCsdutg7qHs94C_3cid3cid3CidKj40_EECsgr0kjOx7ttC_11cbor_encode:
  414|    608|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|    608|        value.serialize(&mut *self.ser)
  416|    608|    }
_RNvXs0_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser12SerializeSeq3endCsgr0kjOx7ttC_11cbor_encode:
  385|    608|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|    608|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|    608|        }
  389|       |
  390|    608|        Ok(())
  391|    608|    }
_RNvXs7_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser10Serializer15serialize_bytesCsgr0kjOx7ttC_11cbor_encode:
  561|    608|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|    608|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|    608|        let prefixed = [&[0x00], value].concat();
  564|    608|        // CIDs are serialized with CBOR tag 42.
  565|    608|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|    608|        Ok(())
  567|    608|    }
_RINvNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser6to_vecNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECsgr0kjOx7ttC_11cbor_encode:
   23|    608|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|    608|where
   25|    608|    T: Serialize + ?Sized,
   26|    608|{
   27|    608|    let writer = BufWriter::new(Vec::new());
   28|    608|    let mut serializer = Serializer::new(writer);
   29|    608|    value.serialize(&mut serializer)?;
   30|    608|    Ok(serializer.into_inner().into_inner())
   31|    608|}
_RNvXs2_NtCsazDgIAEeCwb_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterENtNtCs2xjNbAYLrNs_5serde3ser20SerializeTupleStruct3endCsgr0kjOx7ttC_11cbor_encode:
  419|    608|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|    608|        Ok(())
  421|    608|    }

_RINvXs_Cs8RS3iyFEIvR_11serde_tupleINtB5_12DeserializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEENtNtCs2xjNbAYLrNs_5serde2de12Deserializer24deserialize_tuple_structNtNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3S_7PayloadNtB2F_11Deserialize11deserialize1__NtB3P_5InnerB4E_11deserialize9___VisitorECsgr0kjOx7ttC_11cbor_encode:
  353|    304|    fn deserialize_tuple_struct<V>(
  354|    304|        self,
  355|    304|        name: &'static str,
  356|    304|        len: usize,
  357|    304|        visitor: V,
  358|    304|    ) -> Result<V::Value, Self::Error>
  359|    304|    where
  360|    304|        V: serde::de::Visitor<'de>,
  361|    304|    {
  362|    304|        self.0.deserialize_tuple_struct(name, len, visitor)
  363|    304|    }
_RNvXCs8RS3iyFEIvR_11serde_tupleINtB2_10SerializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEENtNtCs2xjNbAYLrNs_5serde3ser10Serializer22serialize_tuple_structCsgr0kjOx7ttC_11cbor_encode:
  158|    608|    fn serialize_tuple_struct(
  159|    608|        self,
  160|    608|        name: &'static str,
  161|    608|        len: usize,
  162|    608|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  163|    608|        self.0.serialize_tuple_struct(name, len)
  164|    608|    }

_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode7is_lastCsgr0kjOx7ttC_11cbor_encode:
   90|  3.23k|pub fn is_last(b: u8) -> bool {
   91|  3.23k|    b & 0x80 == 0
   92|  3.23k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode3u64Csgr0kjOx7ttC_11cbor_encode:
  122|  1.20k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  1.20k|    decode!(buf, 9, u64)
  124|  1.20k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode7is_lastCscxungraXhZF_10fvm_shared:
   90|  34.8k|pub fn is_last(b: u8) -> bool {
   91|  34.8k|    b & 0x80 == 0
   92|  34.8k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6decode3u64CscxungraXhZF_10fvm_shared:
  122|  4.59k|pub fn u64(buf: &[u8]) -> Result<(u64, &[u8]), Error> {
  123|  4.59k|    decode!(buf, 9, u64)
  124|  4.59k|}

_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode2u8Csgr0kjOx7ttC_11cbor_encode:
   45|    608|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|    608|    encode!(number, buf)
   47|    608|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode10u64_bufferCsgr0kjOx7ttC_11cbor_encode:
  119|  3.00k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  3.00k|    [0; U64_LEN]
  121|  3.00k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode3u64Csgr0kjOx7ttC_11cbor_encode:
   69|  1.80k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  1.80k|    encode!(number, buf)
   71|  1.80k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode9u8_bufferCsgr0kjOx7ttC_11cbor_encode:
  101|    608|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|    608|    [0; U8_LEN]
  103|    608|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode3u64CscxungraXhZF_10fvm_shared:
   69|  9.19k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  9.19k|    encode!(number, buf)
   71|  9.19k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode10u64_bufferCscxungraXhZF_10fvm_shared:
  119|  9.19k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  9.19k|    [0; U64_LEN]
  121|  9.19k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode3u64CsaKmXn3VhZf2_17fvm_ipld_bitfield:
   69|  5.00k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|  5.00k|    encode!(number, buf)
   71|  5.00k|}
_RNvNtCsh1OwLNxVWDy_15unsigned_varint6encode10u64_bufferCsaKmXn3VhZf2_17fvm_ipld_bitfield:
  119|  5.00k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|  5.00k|    [0; U64_LEN]
  121|  5.00k|}

_RINvNtCsh1OwLNxVWDy_15unsigned_varint2io8read_u64QQRShECsgr0kjOx7ttC_11cbor_encode:
   31|  1.20k|            pub fn $name<R: io::Read>(mut reader: R) -> Result<$t, ReadError> {
   32|  1.20k|                let mut b = encode::$b();
   33|  1.61k|                for i in 0 .. b.len() {
   34|  1.61k|                    let n = reader.read(&mut b[i .. i + 1])?;
   35|  1.61k|                    if n == 0 {
   36|      0|                        return Err(ReadError::Io(io::ErrorKind::UnexpectedEof.into()))
   37|  1.61k|                    }
   38|  1.61k|                    if decode::is_last(b[i]) {
   39|  1.20k|                        return Ok(decode::$t(&b[..= i])?.0)
   40|    415|                    }
   41|       |                }
   42|      0|                Err(decode::Error::Overflow.into())
   43|  1.20k|            }


_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  4.06k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.06k|        let next = self.next.take()?;
  484|  4.06k|        self.next = self.iter.next();
  485|  4.06k|        Some(next)
  486|  4.06k|    }
_RNvMsa_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|    921|    pub fn new(iter: I) -> Self {
  426|    921|        Self {
  427|    921|            iter: Lookahead::new(iter),
  428|    921|        }
  429|    921|    }
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  4.98k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.06k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.98k|        let next = self.next.take()?;
  484|  4.06k|        self.next = self.iter.next();
  485|  4.06k|        Some(next)
  486|  4.98k|    }
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  4.06k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|  4.98k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  4.98k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.06k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    921|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.06k|        if advance_lhs {
  371|  4.06k|            self.lhs.next();
  372|  4.06k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.06k|        range
  377|  4.98k|    }
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|    921|    fn new(lhs: A, rhs: B) -> Self {
  344|    921|        Self {
  345|    921|            lhs: Lookahead::new(lhs),
  346|    921|            rhs: Lookahead::new(rhs),
  347|    921|            combinator: Default::default(),
  348|    921|        }
  349|    921|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|    921|    fn new(mut iter: I) -> Self {
  469|    921|        let next = iter.next();
  470|    921|        Self { iter, next }
  471|    921|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  4.06k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.06k|        self.next.as_mut()
  475|  4.06k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  4.06k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.06k|        self.next.as_mut()
  475|  4.06k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    921|    fn new(mut iter: I) -> Self {
  469|    921|        let next = iter.next();
  470|    921|        Self { iter, next }
  471|    921|    }
_RNvXs6_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  312|  4.98k|        self.0.next()
  313|  4.98k|    }
_RNvMsa_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|    921|    pub fn new(iter: I) -> Self {
  426|    921|        Self {
  427|    921|            iter: Lookahead::new(iter),
  428|    921|        }
  429|    921|    }
_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  4.06k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.06k|        let next = self.next.take()?;
  484|  4.06k|        self.next = self.iter.next();
  485|  4.06k|        Some(next)
  486|  4.06k|    }
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  4.98k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  4.98k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  4.06k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    921|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  4.06k|        if advance_lhs {
  371|  4.06k|            self.lhs.next();
  372|  4.06k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  4.06k|        range
  377|  4.98k|    }
_RNvXsf_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB9_:
   87|    921|#[derive(Default)]
_RNvXs6_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  312|  4.98k|        self.0.next()
  313|  4.98k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  9.97k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.97k|        self.next.as_mut()
  475|  9.97k|    }
_RNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  389|  4.98k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  4.98k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  4.98k|    }
_RNvXs0_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tailB9_:
  182|  4.06k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  4.06k|        // the difference between a range and an empty range is just that range
  184|  4.06k|        Some(lhs)
  185|  4.06k|    }
_RNvMs5_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|    921|    pub fn new(a: A, b: B) -> Self {
  299|    921|        Self(Merge::new(_Combine::new(a, b)))
  300|    921|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  1.84k|    fn new(mut iter: I) -> Self {
  469|  1.84k|        let next = iter.next();
  470|  1.84k|        Self { iter, next }
  471|  1.84k|    }
_RNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  389|  4.98k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  4.98k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  4.98k|    }
_RNvXNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tailB6_:
  110|  4.06k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  4.06k|        // the union of a range and an empty range is just that range
  112|  4.06k|        Some(lhs)
  113|  4.06k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  4.98k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.98k|        self.next.as_mut()
  475|  4.98k|    }
_RNvMs5_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|    921|    pub fn new(a: A, b: B) -> Self {
  299|    921|        Self(Merge::new(_Combine::new(a, b)))
  300|    921|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|    921|    fn new(mut iter: I) -> Self {
  469|    921|        let next = iter.next();
  470|    921|        Self { iter, next }
  471|    921|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|    921|    fn new(mut iter: I) -> Self {
  469|    921|        let next = iter.next();
  470|    921|        Self { iter, next }
  471|    921|    }
_RNCNvXs9_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|  4.98k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  4.98k|        let next = self.next.take()?;
  484|  4.06k|        self.next = self.iter.next();
  485|  4.06k|        Some(next)
  486|  4.98k|    }
_RNvXsh_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB9_:
  152|    921|#[derive(Default)]
_RNvXsb_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  439|  4.98k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.06k|        while let Some(next) = self.iter.peek() {
  444|  3.73k|            if next.start > range.end {
  445|  3.73k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.06k|        Some(range)
  453|  4.98k|    }
_RNvMsd_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|  4.98k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  4.98k|        self.next.as_mut()
  475|  4.98k|    }
_RNvXsb_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  439|  4.98k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  4.06k|        while let Some(next) = self.iter.peek() {
  444|  3.73k|            if next.start > range.end {
  445|  3.73k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  4.06k|        Some(range)
  453|  4.98k|    }
_RNvMs8_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|    921|    fn new(lhs: A, rhs: B) -> Self {
  344|    921|        Self {
  345|    921|            lhs: Lookahead::new(lhs),
  346|    921|            rhs: Lookahead::new(rhs),
  347|    921|            combinator: Default::default(),
  348|    921|        }
  349|    921|    }

_RNvXs3_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  1.84k|    fn next(&mut self) -> Option<Self::Item> {
  155|  1.84k|        self.0.next()
  156|  1.84k|    }
_RINvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEEB4_:
  164|  1.84k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|  1.84k|    let mut iter = bits.into_iter().peekable();
  166|  1.84k|
  167|  1.84k|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|  1.84k|    }))
  181|  1.84k|}
_RINvMs2_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|    921|    pub fn new<II>(iter: II) -> Self
  141|    921|    where
  142|    921|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|    921|    {
  144|    921|        Self(iter.into_iter())
  145|    921|    }
_RNvXs3_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  4.98k|    fn next(&mut self) -> Option<Self::Item> {
  155|  4.98k|        self.0.next()
  156|  4.98k|    }
_RINvMs2_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|  1.84k|    pub fn new<II>(iter: II) -> Self
  141|  1.84k|    where
  142|  1.84k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  1.84k|    {
  144|  1.84k|        Self(iter.into_iter())
  145|  1.84k|    }
_RNCINvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0B6_:
  167|  1.84k|    Ranges::new(iter::from_fn(move || {
  168|  1.84k|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|  1.84k|    }))
_RINvYINtNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|    921|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|    921|        Combine::new(self, other)
   34|    921|    }
_RINvYINtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs9SrTLDOTsEo_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsfyv4r1PwjHS_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|    921|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|    921|        Combine::new(self, other)
   24|    921|    }

_RNvXsa_CsaKmXn3VhZf2_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB5_:
   42|  1.08k|#[derive(Debug, Default, Clone)]
_RNvMs4_CsaKmXn3VhZf2_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|    921|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|    921|        self.inner_ranges()
  291|    921|            .union(ranges_from_bits(self.set.iter().copied()))
  292|    921|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|    921|    }
_RNvMs4_CsaKmXn3VhZf2_17fvm_ipld_bitfieldNtB5_8BitField12inner_rangesB5_:
  283|    921|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|    921|        iter::Ranges::new(self.ranges.iter().cloned())
  285|    921|    }

_RNvXNtCsaKmXn3VhZf2_17fvm_ipld_bitfield5rangeINtNtNtCs9SrTLDOTsEo_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  4.06k|    fn size(&self) -> Self::Idx {
   17|  4.06k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  4.06k|            self.end - self.start
   21|       |        }
   22|  4.06k|    }

_RINvXs_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   99|    304|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
  100|    304|    where
  101|    304|        D: Deserializer<'de>,
  102|    304|    {
  103|    304|        let bytes: Cow<'de, [u8]> = strict_bytes::deserialize(deserializer)?;
  104|    304|        if bytes.len() > MAX_ENCODED_SIZE {
  105|      0|            return Err(serde::de::Error::custom(format!(
  106|      0|                "encoded bitfield was too large {}",
  107|      0|                bytes.len()
  108|      0|            )));
  109|    304|        }
  110|    304|        Self::from_bytes(&bytes).map_err(serde::de::Error::custom)
  111|    304|    }
_RINvXNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB5_8BitFieldNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   83|    757|    fn serialize<S>(&self, serializer: S) -> std::result::Result<S::Ok, S::Error>
   84|    757|    where
   85|    757|        S: Serializer,
   86|    757|    {
   87|    757|        let bytes = self.to_bytes();
   88|    757|        if bytes.len() > MAX_ENCODED_SIZE {
   89|      0|            return Err(serde::ser::Error::custom(format!(
   90|      0|                "encoded bitfield was too large {}",
   91|      0|                bytes.len()
   92|      0|            )));
   93|    757|        }
   94|    757|        strict_bytes::serialize(&bytes, serializer)
   95|    757|    }
_RNvXs0_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hint:
  151|    782|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  152|    782|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  153|    782|    }
_RNvMs1_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitField8to_bytes:
  201|    921|    pub fn to_bytes(&self) -> Vec<u8> {
  202|    921|        let mut iter = self.ranges();
  203|       |
  204|    921|        let first_range = match iter.next() {
  205|    329|            Some(range) => range,
  206|    592|            None => return Default::default(),
  207|       |        };
  208|       |
  209|    329|        let mut writer = BitWriter::new();
  210|    329|        writer.write(0, 2); // version 00
  211|    329|
  212|    329|        if first_range.start == 0 {
  213|    151|            writer.write(1, 1); // the first bit is a 1
  214|    178|        } else {
  215|    178|            writer.write(0, 1); // the first bit is a 0
  216|    178|            writer.write_len(first_range.start); // the number of leading 0s
  217|    178|        }
  218|       |
  219|    329|        writer.write_len(first_range.size());
  220|    329|        let mut index = first_range.end;
  221|       |
  222|       |        // for each range of 1s we first encode the number of 0s that came prior
  223|       |        // before encoding the number of 1s
  224|  4.06k|        for range in iter {
  225|  3.73k|            writer.write_len(range.start - index); // zeros
  226|  3.73k|            writer.write_len(range.size()); // ones
  227|  3.73k|            index = range.end;
  228|  3.73k|        }
  229|       |
  230|    329|        writer.finish()
  231|    921|    }
_RNvMs1_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitField10from_bytes:
  158|    304|    pub fn from_bytes(bytes: &[u8]) -> Result<Self, Error> {
  159|    304|        let mut reader = BitReader::new(bytes)?;
  160|       |
  161|    304|        let version = reader.read(2);
  162|    304|        if version != 0 {
  163|      0|            return Err(Error::UnsupportedVersion);
  164|    304|        }
  165|    304|
  166|    304|        let mut next_value = reader.read(1) == 1;
  167|    304|        let mut ranges = Vec::new();
  168|    304|        let mut index = 0u64;
  169|    304|        let mut total_len: u64 = 0;
  170|       |
  171|  4.04k|        while let Some(len) = reader.read_len()? {
  172|  3.74k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  173|  3.74k|            if ovf {
  174|      0|                return Err(Error::RLEOverflow);
  175|  3.74k|            }
  176|  3.74k|            total_len = new_total_len;
  177|  3.74k|            let start = index;
  178|  3.74k|            index += len;
  179|  3.74k|            let end = index;
  180|  3.74k|
  181|  3.74k|            if next_value {
  182|  1.89k|                ranges.push(start..end);
  183|  1.89k|            }
  184|       |
  185|  3.74k|            next_value = !next_value;
  186|       |        }
  187|       |
  188|       |        // next_value equal true means we just read a run of zeros
  189|       |        // which means that there is a trailing run of zeros
  190|    304|        if next_value {
  191|      0|            return Err(Error::NotMinimal);
  192|    304|        }
  193|    304|
  194|    304|        Ok(Self {
  195|    304|            ranges,
  196|    304|            ..Default::default()
  197|    304|        })
  198|    304|    }
_RNvXs0_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary:
  115|    780|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  116|    780|        let mut next_value: bool = bool::arbitrary(u)?;
  117|    780|        let mut ranges = Vec::new();
  118|    780|        let mut index = 0u64;
  119|    780|        let mut total_len: u64 = 0;
  120|       |
  121|    780|        let size = u.arbitrary_len::<(u64, u8)>()?;
  122|       |
  123|    780|        for _ in 0..size {
  124|       |            // 3 line crappy "power-law" distribution
  125|  4.42k|            let len = u64::arbitrary(u)?;
  126|  4.42k|            let shift = u.int_in_range(0..=63)?;
  127|  4.42k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  128|  4.42k|
  129|  4.42k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  130|  4.42k|            if ovf {
  131|     15|                break;
  132|  4.40k|            }
  133|  4.40k|            total_len = new_total_len;
  134|  4.40k|            let start = index;
  135|  4.40k|            index += len;
  136|  4.40k|            let end = index;
  137|  4.40k|
  138|  4.40k|            if next_value {
  139|  2.24k|                ranges.push(start..end);
  140|  2.24k|            }
  141|       |
  142|  4.40k|            next_value = !next_value;
  143|       |        }
  144|       |
  145|    780|        Ok(Self {
  146|    780|            ranges,
  147|    780|            ..Default::default()
  148|    780|        })
  149|    780|    }

_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4read:
   82|  12.2k|    pub fn read(&mut self, num_bits: u32) -> u8 {
   83|  12.2k|        debug_assert!(num_bits <= 8);
   84|       |
   85|  12.2k|        let res = self.peek(num_bits);
   86|  12.2k|        self.drop(num_bits);
   87|  12.2k|
   88|  12.2k|        res
   89|  12.2k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4peek:
   50|  15.9k|    pub fn peek(&self, num_bits: u32) -> u8 {
   51|  15.9k|        debug_assert!(num_bits <= 8);
   52|       |
   53|       |        // creates a mask with a `num_bits` number of 1s in order
   54|       |        // to get only the bits we need from `self.bits`
   55|  15.9k|        let mask = (1 << num_bits) - 1;
   56|  15.9k|        (self.bits & mask) as u8
   57|  15.9k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader4drop:
   61|  15.9k|    pub fn drop(&mut self, num_bits: u32) {
   62|  15.9k|        debug_assert!(num_bits <= 8);
   63|       |
   64|       |        // removes the bits
   65|  15.9k|        self.bits >>= num_bits;
   66|  15.9k|        self.num_bits -= num_bits;
   67|  15.9k|
   68|  15.9k|        // not sure why this being outside of the if improves the performance
   69|  15.9k|        // bit it does, probably related to keeping caches warm
   70|  15.9k|        let byte = self.bytes.first().unwrap_or(&0);
   71|  15.9k|        self.bits |= (*byte as u64) << self.num_bits;
   72|  15.9k|
   73|  15.9k|        // if fewer than 8 bits remain, we skip to loading the next byte
   74|  15.9k|        if self.num_bits < 8 {
   75|  12.8k|            self.num_bits += 8;
   76|  12.8k|            self.bytes = self.bytes.get(1..).unwrap_or(&[]);
   77|  12.8k|        }
   78|  15.9k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8read_len:
  119|  4.04k|    pub fn read_len(&mut self) -> Result<Option<u64>, Error> {
  120|  4.04k|        // We're done.
  121|  4.04k|        if !self.has_more() {
  122|    304|            return Ok(None);
  123|  3.74k|        }
  124|  3.74k|
  125|  3.74k|        let peek6 = self.peek(6);
  126|       |
  127|  3.74k|        let len = if peek6 & 0b01 != 0 {
  128|       |            // Block Single (prefix 1)
  129|    713|            self.drop(1);
  130|    713|            1
  131|  3.03k|        } else if peek6 & 0b10 != 0 {
  132|       |            // Block Short (prefix 01)
  133|    735|            let val = ((peek6 >> 2) & 0x0f) as u64;
  134|    735|            self.drop(6);
  135|    735|            if val < 2 {
  136|      0|                return Err(Error::NotMinimal);
  137|    735|            }
  138|    735|            val
  139|       |        } else {
  140|       |            // Block Long (prefix 00)
  141|  2.29k|            self.drop(2);
  142|  2.29k|            let val = self.read_varint()?;
  143|  2.29k|            if val < 16 {
  144|      0|                return Err(Error::NotMinimal);
  145|  2.29k|            }
  146|  2.29k|            val
  147|       |        };
  148|       |
  149|  3.74k|        Ok(Some(len))
  150|  4.04k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader3new:
   26|    304|    pub fn new(bytes: &'a [u8]) -> Result<Self, Error> {
   27|    304|        // There are infinite implicit "0"s, so we don't expect any trailing zeros in the actual
   28|    304|        // data.
   29|    304|        if bytes.last() == Some(&0) {
   30|      0|            return Err(Error::NotMinimal);
   31|    304|        }
   32|    304|        let mut bits = 0u64;
   33|    912|        for i in 0..2 {
   34|    608|            let byte = bytes.get(i).unwrap_or(&0);
   35|    608|            bits |= (*byte as u64) << (8 * i);
   36|    608|        }
   37|       |
   38|    304|        let bytes = bytes.get(2..).unwrap_or(&[]);
   39|    304|
   40|    304|        Ok(Self {
   41|    304|            bytes,
   42|    304|            bits,
   43|    304|            num_bits: 16,
   44|    304|        })
   45|    304|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader8has_moreB6_:
  153|  4.04k|    pub fn has_more(&self) -> bool {
  154|  4.04k|        self.bits != 0 || !self.bytes.is_empty()
  155|  4.04k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6readerNtB2_9BitReader11read_varint:
   93|  2.29k|    fn read_varint(&mut self) -> Result<u64, Error> {
   94|  2.29k|        let mut len = 0u64;
   95|       |
   96|  11.6k|        for i in 0..VARINT_MAX_BYTES {
   97|  11.6k|            let byte = self.read(8);
   98|  11.6k|
   99|  11.6k|            // strip off the most significant bit and add
  100|  11.6k|            // it to the output
  101|  11.6k|            len |= (byte as u64 & 0x7f) << (i * 7);
  102|  11.6k|
  103|  11.6k|            // if the most significant bit is a 0, we've
  104|  11.6k|            // reached the end of the varint
  105|  11.6k|            if byte & 0x80 == 0 {
  106|       |                // 1. We only allow the 9th byte to be 1 (overflows u64).
  107|       |                // 2. The last byte cannot be 0 (not minimally encoded).
  108|  2.29k|                if (i == 9 && byte > 1) || (byte == 0 && i != 0) {
  109|      0|                    break;
  110|  2.29k|                }
  111|  2.29k|                return Ok(len);
  112|  9.34k|            }
  113|       |        }
  114|       |
  115|      0|        Err(Error::InvalidVarint)
  116|  2.29k|    }

_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter6finish:
   61|    329|    pub fn finish(mut self) -> Vec<u8> {
   62|    329|        if self.bits > 0 {
   63|    181|            self.bytes.push(self.bits as u8);
   64|    181|        }
   65|       |
   66|       |        // This check should not be necessary, but as a sanity check to make sure 0 bytes
   67|       |        // aren't added at the end of the bytes
   68|    329|        while let Some(0) = self.bytes.last() {
   69|      0|            self.bytes.pop();
   70|      0|        }
   71|    329|        self.bytes
   72|    329|    }
_RNvXs_NtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB4_9BitWriterNtNtCs9SrTLDOTsEo_4core7default7Default7defaultB8_:
    5|    329|#[derive(Default, Clone, Debug)]
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter9write_len:
   39|  7.97k|    pub fn write_len(&mut self, len: u64) {
   40|  7.97k|        debug_assert!(len > 0);
   41|       |
   42|  7.97k|        if len == 1 {
   43|  1.45k|            // Block Single (prefix 1)
   44|  1.45k|            self.write(1, 1);
   45|  6.52k|        } else if len < 16 {
   46|  1.52k|            // Block Short (prefix 01)
   47|  1.52k|            self.write(2, 2); // 2 == 01 with the least significant bit first
   48|  1.52k|            self.write(len as u8, 4);
   49|  1.52k|        } else {
   50|       |            // Block Long (prefix 00)
   51|  5.00k|            self.write(0, 2);
   52|  5.00k|
   53|  5.00k|            let mut buffer = unsigned_varint::encode::u64_buffer();
   54|  26.0k|            for &byte in unsigned_varint::encode::u64(len, &mut buffer) {
   55|  26.0k|                self.write(byte, 8);
   56|  26.0k|            }
   57|       |        }
   58|  7.97k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter5write:
   23|  36.2k|    pub fn write(&mut self, byte: u8, num_bits: u32) {
   24|  36.2k|        debug_assert!(num_bits <= 8);
   25|  36.2k|        debug_assert!(8 - byte.leading_zeros() <= num_bits);
   26|       |
   27|  36.2k|        self.bits |= (byte as u16) << self.num_bits;
   28|  36.2k|        self.num_bits += num_bits;
   29|  36.2k|
   30|  36.2k|        // when we have a full byte in `self.bits`, we write it to `self.bytes`
   31|  36.2k|        if self.num_bits >= 8 {
   32|  28.6k|            self.bytes.push(self.bits as u8);
   33|  28.6k|            self.bits >>= 8;
   34|  28.6k|            self.num_bits -= 8;
   35|  28.6k|        }
   36|  36.2k|    }
_RNvMNtNtCsaKmXn3VhZf2_17fvm_ipld_bitfield7rleplus6writerNtB2_9BitWriter3newB6_:
   18|    329|    pub fn new() -> Self {
   19|    329|        Default::default()
   20|    329|    }

_RINvXNvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated1__NtB5_19UnvalidatedBitFieldNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   36|    608|#[derive(Debug, Serialize)]
_RINvXNvXNvNtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidated1__NtB8_19UnvalidatedBitFieldNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeNtB3_15___SerializeWithB1n_9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   36|    459|#[derive(Debug, Serialize)]
_RINvXs4_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidatedNtB6_19UnvalidatedBitFieldNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   94|    304|    fn deserialize<D>(deserializer: D) -> std::result::Result<Self, D::Error>
   95|    304|    where
   96|    304|        D: Deserializer<'de>,
   97|    304|    {
   98|    304|        let bytes: Vec<u8> = strict_bytes::deserialize(deserializer)?;
   99|    304|        if bytes.len() > MAX_ENCODED_SIZE {
  100|      0|            return Err(serde::de::Error::custom(format!(
  101|      0|                "encoded bitfield was too large {}",
  102|      0|                bytes.len()
  103|      0|            )));
  104|    304|        }
  105|    304|        Ok(Self::Unvalidated(bytes))
  106|    304|    }
_RNvXs1_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hint:
   71|    391|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
   72|    391|        arbitrary::size_hint::and(BitField::size_hint(depth), (1, Some(1)))
   73|    391|    }
_RNvXs1_NtCsaKmXn3VhZf2_17fvm_ipld_bitfield11unvalidatedNtB5_19UnvalidatedBitFieldNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary:
   62|    390|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
   63|    390|        let bf: BitField = u.arbitrary()?;
   64|    390|        Ok(if *u.choose(&[true, false])? {
   65|    226|            Self::Validated(bf)
   66|       |        } else {
   67|    164|            Self::Unvalidated(bf.to_bytes())
   68|       |        })
   69|    390|    }

_RINvXs0_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShENtB6_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   76|  5.74k|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   77|  5.74k|        where
   78|  5.74k|            D: Deserializer<'de>,
   79|  5.74k|        {
   80|  5.74k|            struct CowVisitor;
   81|  5.74k|
   82|  5.74k|            impl<'de> Visitor<'de> for CowVisitor {
   83|  5.74k|                type Value = Cow<'de, [u8]>;
   84|  5.74k|
   85|  5.74k|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   86|  5.74k|                    formatter.write_str("a byte array")
   87|  5.74k|                }
   88|  5.74k|
   89|  5.74k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  5.74k|                where
   91|  5.74k|                    E: Error,
   92|  5.74k|                {
   93|  5.74k|                    Ok(Cow::Borrowed(v))
   94|  5.74k|                }
   95|  5.74k|
   96|  5.74k|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Self::Value, E>
   97|  5.74k|                where
   98|  5.74k|                    E: Error,
   99|  5.74k|                {
  100|  5.74k|                    Ok(Cow::Owned(v.to_vec()))
  101|  5.74k|                }
  102|  5.74k|
  103|  5.74k|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Self::Value, E>
  104|  5.74k|                where
  105|  5.74k|                    E: Error,
  106|  5.74k|                {
  107|  5.74k|                    Ok(Cow::Owned(v))
  108|  5.74k|                }
  109|  5.74k|            }
  110|  5.74k|            deserializer.deserialize_bytes(CowVisitor)
  111|  5.74k|        }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes9serializeINtNtCsfyv4r1PwjHS_5alloc3vec3VechEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  154|  1.21k|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|  1.21k|    where
  156|  1.21k|        T: ?Sized + AsRef<[u8]>,
  157|  1.21k|        S: Serializer,
  158|  1.21k|    {
  159|  1.21k|        Serialize::serialize(bytes.as_ref(), serializer)
  160|  1.21k|    }
_RINvXNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   35|  1.82k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  1.82k|        where
   37|  1.82k|            S: Serializer,
   38|  1.82k|        {
   39|  1.82k|            serializer.serialize_bytes(self.as_ref())
   40|  1.82k|        }
_RINvXNvXs0_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShENtB9_11Deserialize11deserializeNtB3_10CowVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor20visit_borrowed_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECsgr0kjOx7ttC_11cbor_encode:
   89|  5.74k|                fn visit_borrowed_bytes<E>(self, v: &'de [u8]) -> Result<Self::Value, E>
   90|  5.74k|                where
   91|  5.74k|                    E: Error,
   92|  5.74k|                {
   93|  5.74k|                    Ok(Cow::Borrowed(v))
   94|  5.74k|                }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsfyv4r1PwjHS_5alloc6borrow3CowShEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  162|    304|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    304|    where
  164|    304|        T: Deserialize<'de>,
  165|    304|        D: Deserializer<'de>,
  166|    304|    {
  167|    304|        Deserialize::deserialize(deserializer)
  168|    304|    }
_RINvXNvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB8_11Deserialize11deserializeNtB3_10VecVisitorNtNtCs2xjNbAYLrNs_5serde2de7Visitor11visit_bytesINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor5error11DecodeErrorNtNtCs9SrTLDOTsEo_4core7convert10InfallibleEECsgr0kjOx7ttC_11cbor_encode:
   57|    608|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    608|                where
   59|    608|                    E: Error,
   60|    608|                {
   61|    608|                    Ok(v.into())
   62|    608|                }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes9serializeRINtNtCsfyv4r1PwjHS_5alloc3vec3VechEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  154|    608|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|    608|    where
  156|    608|        T: ?Sized + AsRef<[u8]>,
  157|    608|        S: Serializer,
  158|    608|    {
  159|    608|        Serialize::serialize(bytes.as_ref(), serializer)
  160|    608|    }
_RINvXs_NtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB5_11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   44|    608|        fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
   45|    608|        where
   46|    608|            D: Deserializer<'de>,
   47|    608|        {
   48|    608|            struct VecVisitor;
   49|    608|
   50|    608|            impl<'de> Visitor<'de> for VecVisitor {
   51|    608|                type Value = Vec<u8>;
   52|    608|
   53|    608|                fn expecting(&self, formatter: &mut fmt::Formatter) -> fmt::Result {
   54|    608|                    formatter.write_str("byte array")
   55|    608|                }
   56|    608|
   57|    608|                fn visit_bytes<E>(self, v: &[u8]) -> Result<Vec<u8>, E>
   58|    608|                where
   59|    608|                    E: Error,
   60|    608|                {
   61|    608|                    Ok(v.into())
   62|    608|                }
   63|    608|
   64|    608|                fn visit_byte_buf<E>(self, v: Vec<u8>) -> Result<Vec<u8>, E>
   65|    608|                where
   66|    608|                    E: Error,
   67|    608|                {
   68|    608|                    Ok(v)
   69|    608|                }
   70|    608|            }
   71|    608|            deserializer.deserialize_byte_buf(VecVisitor)
   72|    608|        }
_RINvXNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytesINtNtCsfyv4r1PwjHS_5alloc3vec3VechENtB3_9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   35|  10.8k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  10.8k|        where
   37|  10.8k|            S: Serializer,
   38|  10.8k|        {
   39|  10.8k|            serializer.serialize_bytes(self.as_ref())
   40|  10.8k|        }
_RINvNtNtCs6vxvMFpiYEV_17fvm_ipld_encoding5bytes12strict_bytes11deserializeINtNtCsfyv4r1PwjHS_5alloc3vec3VechEQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  162|    608|    pub fn deserialize<'de, T, D>(deserializer: D) -> Result<T, D::Error>
  163|    608|    where
  164|    608|        T: Deserialize<'de>,
  165|    608|        D: Deserializer<'de>,
  166|    608|    {
  167|    608|        Deserialize::deserialize(deserializer)
  168|    608|    }

_RINvCs6vxvMFpiYEV_17fvm_ipld_encoding6to_vecNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECsgr0kjOx7ttC_11cbor_encode:
   44|    608|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|    608|where
   46|    608|    T: ser::Serialize + ?Sized,
   47|    608|{
   48|    608|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|    608|}
_RINvCs6vxvMFpiYEV_17fvm_ipld_encoding10from_sliceNtNtCseGqCtrHvTDC_11common_fuzz4cbor7PayloadECsgr0kjOx7ttC_11cbor_encode:
   61|    304|pub fn from_slice<'a, T>(slice: &'a [u8]) -> Result<T, Error>
   62|    304|where
   63|    304|    T: de::Deserialize<'a>,
   64|    304|{
   65|    304|    serde_ipld_dagcbor::from_slice(slice).map_err(Into::into)
   66|    304|}

_RNCNvXNvNtCscxungraXhZF_10fvm_shared7address1__NtB6_7AddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hint0Csgr0kjOx7ttC_11cbor_encode:
   72|    391|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXNvNtCscxungraXhZF_10fvm_shared7address1__NtB4_7AddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
   72|    391|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RINvXs4_NtCscxungraXhZF_10fvm_shared7addressNtB6_7AddressNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
  367|  5.44k|    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
  368|  5.44k|    where
  369|  5.44k|        D: Deserializer<'de>,
  370|  5.44k|    {
  371|  5.44k|        let bz: Cow<'de, [u8]> = strict_bytes::Deserialize::deserialize(deserializer)?;
  372|       |
  373|       |        // Create and return created address of unmarshalled bytes
  374|  5.44k|        Address::from_bytes(&bz).map_err(de::Error::custom)
  375|  5.44k|    }
_RINvXs3_NtCscxungraXhZF_10fvm_shared7addressNtB6_7AddressNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
  357|  10.8k|    fn serialize<S>(&self, s: S) -> Result<S::Ok, S::Error>
  358|  10.8k|    where
  359|  10.8k|        S: Serializer,
  360|  10.8k|    {
  361|  10.8k|        let address_bytes = self.to_bytes();
  362|  10.8k|        strict_bytes::Serialize::serialize(&address_bytes, s)
  363|  10.8k|    }
_RNvNtCscxungraXhZF_10fvm_shared7address14from_leb_bytes:
  383|  3.43k|pub(crate) fn from_leb_bytes(bz: &[u8]) -> Result<u64, Error> {
  384|       |    // write id to buffer in leb128 format
  385|  3.43k|    let (id, remaining) = unsigned_varint::decode::u64(bz)?;
  386|  3.43k|    if !remaining.is_empty() {
  387|      0|        return Err(Error::InvalidPayload);
  388|  3.43k|    }
  389|  3.43k|    Ok(id)
  390|  3.43k|}
_RNCNvXNvNtCscxungraXhZF_10fvm_shared7address1__NtB6_7AddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrarys0_0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCscxungraXhZF_10fvm_shared7addressNtB2_7Address3new:
   79|  5.44k|    fn new(protocol: Protocol, bz: &[u8]) -> Result<Self, Error> {
   80|  5.44k|        Ok(Self {
   81|  5.44k|            payload: Payload::new(protocol, bz)?,
   82|       |        })
   83|  5.44k|    }
_RNCNvXNvNtCscxungraXhZF_10fvm_shared7address1__NtB6_7AddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrarys_0B8_:
   72|  6.08k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCscxungraXhZF_10fvm_shared7addressNtB2_7Address10from_bytes:
   86|  5.44k|    pub fn from_bytes(bz: &[u8]) -> Result<Self, Error> {
   87|  5.44k|        if bz.len() < 2 {
   88|      0|            Err(Error::InvalidLength)
   89|       |        } else {
   90|  5.44k|            let protocol = Protocol::from_byte(bz[0]).ok_or(Error::UnknownProtocol)?;
   91|  5.44k|            Self::new(protocol, &bz[1..])
   92|       |        }
   93|  5.44k|    }
_RNCNvNvNvNtCscxungraXhZF_10fvm_shared7address1__23RECURSIVE_COUNT_Address7___getit0B9_:
   72|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvNtCscxungraXhZF_10fvm_shared7address12to_leb_bytes:
  378|  9.19k|pub(crate) fn to_leb_bytes(id: u64) -> Vec<u8> {
  379|  9.19k|    // write id to buffer in leb128 format
  380|  9.19k|    unsigned_varint::encode::u64(id, &mut unsigned_varint::encode::u64_buffer()).into()
  381|  9.19k|}
_RNCNvXNvNtCscxungraXhZF_10fvm_shared7address1__NtB6_7AddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary0B8_:
   72|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvXNvNtCscxungraXhZF_10fvm_shared7address1__NtB4_7AddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary:
   72|  18.2k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMNtCscxungraXhZF_10fvm_shared7addressNtB2_7Address8to_bytes:
  168|  10.8k|    pub fn to_bytes(self) -> Vec<u8> {
  169|  10.8k|        self.payload.to_bytes()
  170|  10.8k|    }

_RNvXNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__NtB4_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
   86|    391|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__NtB6_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hint0Csgr0kjOx7ttC_11cbor_encode:
   86|    391|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_7Payload12to_raw_bytes:
  115|  10.8k|    pub fn to_raw_bytes(self) -> Vec<u8> {
  116|  10.8k|        use Payload::*;
  117|  10.8k|        match self {
  118|  6.86k|            ID(i) => to_leb_bytes(i),
  119|    666|            Secp256k1(arr) => arr.to_vec(),
  120|    684|            Actor(arr) => arr.to_vec(),
  121|    336|            BLS(arr) => arr.to_vec(),
  122|  2.32k|            Delegated(addr) => {
  123|  2.32k|                let mut buf = to_leb_bytes(addr.namespace());
  124|  2.32k|                buf.extend(addr.subaddress());
  125|  2.32k|                buf
  126|       |            }
  127|       |        }
  128|  10.8k|    }
_RNvMs0_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_16DelegatedAddress10subaddressB9_:
   79|  2.32k|    pub fn subaddress(&self) -> &[u8] {
   80|  2.32k|        &self.buffer[..self.length]
   81|  2.32k|    }
_RNvMs0_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_16DelegatedAddress3new:
   57|  1.16k|    pub fn new(namespace: ActorID, subaddress: &[u8]) -> Result<Self, Error> {
   58|  1.16k|        let length = subaddress.len();
   59|  1.16k|        if length > MAX_SUBADDRESS_LEN {
   60|      0|            return Err(Error::InvalidPayloadLength(length));
   61|  1.16k|        }
   62|  1.16k|        let mut addr = DelegatedAddress {
   63|  1.16k|            namespace,
   64|  1.16k|            length,
   65|  1.16k|            buffer: [0u8; MAX_SUBADDRESS_LEN],
   66|  1.16k|        };
   67|  1.16k|        addr.buffer[..length].copy_from_slice(&subaddress[..length]);
   68|  1.16k|        Ok(addr)
   69|  1.16k|    }
_RNvXs_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB4_16DelegatedAddressNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary:
   40|  1.47k|    fn arbitrary(u: &mut arbitrary::Unstructured<'a>) -> arbitrary::Result<Self> {
   41|  1.47k|        let length = u.int_in_range(0usize..=MAX_SUBADDRESS_LEN)?;
   42|  1.47k|        let mut buffer = [0u8; MAX_SUBADDRESS_LEN];
   43|  9.94k|        for b in buffer.iter_mut().take(length) {
   44|  9.94k|            *b = arbitrary::Arbitrary::arbitrary(u)?;
   45|       |        }
   46|  1.47k|        let addr = DelegatedAddress {
   47|  1.47k|            namespace: arbitrary::Arbitrary::arbitrary(u)?,
   48|  1.47k|            length,
   49|  1.47k|            buffer,
   50|  1.47k|        };
   51|  1.47k|        Ok(addr)
   52|  1.47k|    }
_RNvXs3_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtNtB7_8protocol8ProtocolINtNtCs9SrTLDOTsEo_4core7convert4FromNtB5_7PayloadE4fromB9_:
  166|  10.8k|    fn from(pl: Payload) -> Self {
  167|  10.8k|        match pl {
  168|  6.86k|            Payload::ID(_) => Self::ID,
  169|    666|            Payload::Secp256k1(_) => Self::Secp256k1,
  170|    684|            Payload::Actor(_) => Self::Actor,
  171|    336|            Payload::BLS(_) => Self::BLS,
  172|  2.32k|            Payload::Delegated { .. } => Self::Delegated,
  173|       |        }
  174|  10.8k|    }
_RNCNvNvNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__23RECURSIVE_COUNT_Payload7___getit0Bb_:
   86|      1|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_7Payload3new:
  138|  5.44k|    pub fn new(protocol: Protocol, payload: &[u8]) -> Result<Self, Error> {
  139|  5.44k|        let payload = match protocol {
  140|  3.43k|            Protocol::ID => Self::ID(from_leb_bytes(payload)?),
  141|       |            Protocol::Secp256k1 => Self::Secp256k1(
  142|    333|                payload
  143|    333|                    .try_into()
  144|    333|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  145|       |            ),
  146|       |            Protocol::Actor => Self::Actor(
  147|    342|                payload
  148|    342|                    .try_into()
  149|    342|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  150|       |            ),
  151|       |            Protocol::BLS => Self::BLS(
  152|    168|                payload
  153|    168|                    .try_into()
  154|    168|                    .map_err(|_| Error::InvalidPayloadLength(payload.len()))?,
  155|       |            ),
  156|       |            Protocol::Delegated => {
  157|  1.16k|                let (id, remaining) = unsigned_varint::decode::u64(payload)?;
  158|  1.16k|                Self::Delegated(DelegatedAddress::new(id, remaining)?)
  159|       |            }
  160|       |        };
  161|  5.44k|        Ok(payload)
  162|  5.44k|    }
_RNvMs0_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_16DelegatedAddress9namespaceB9_:
   73|  2.32k|    pub fn namespace(&self) -> ActorID {
   74|  2.32k|        self.namespace
   75|  2.32k|    }
_RNvXNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__NtB4_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary:
   86|  18.2k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNvMs2_NtNtCscxungraXhZF_10fvm_shared7address7payloadNtB5_7Payload8to_bytes:
  131|  10.8k|    pub fn to_bytes(self) -> Vec<u8> {
  132|  10.8k|        let mut bz = self.to_raw_bytes();
  133|  10.8k|        bz.insert(0, Protocol::from(self) as u8);
  134|  10.8k|        bz
  135|  10.8k|    }
_RNCNvXNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__NtB6_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrarys_0Ba_:
   86|  6.08k|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__NtB6_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrarys0_0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]
_RNCNvXNvNtNtCscxungraXhZF_10fvm_shared7address7payload1__NtB6_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9arbitrary0Ba_:
   86|     15|#[cfg_attr(feature = "arb", derive(arbitrary::Arbitrary))]

_RNvXNvNtNtCscxungraXhZF_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs1o5kPwn786I_10num_traits4cast13FromPrimitive8from_u64B8_:
   12|  5.44k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]
_RNvMNtNtCscxungraXhZF_10fvm_shared7address8protocolNtB2_8Protocol9from_byte:
   29|  5.44k|    pub(super) fn from_byte(b: u8) -> Option<Protocol> {
   30|  5.44k|        FromPrimitive::from_u8(b)
   31|  5.44k|    }
_RNvXNvNtNtCscxungraXhZF_10fvm_shared7address8protocol36__IMPL_NUM_FromPrimitive_FOR_ProtocolNtB4_8ProtocolNtNtCs1o5kPwn786I_10num_traits4cast13FromPrimitive8from_i64B8_:
   12|  5.44k|#[derive(PartialEq, Eq, Copy, Clone, FromPrimitive, Debug, Hash)]

_RINvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB8_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtB5_5InnerBT_11deserializeINtCs8RS3iyFEIvR_11serde_tuple12DeserializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEEECsgr0kjOx7ttC_11cbor_encode:
   12|    304|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtBd_7PayloadNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serialize1__NtB8_5InnerBY_9serializeNtB3_15___SerializeWithBY_9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   12|    608|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtBb_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtB8_5InnerBW_11deserializeNtB3_9___VisitorNtBY_7Visitor9visit_seqINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   12|    304|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXNvNtCseGqCtrHvTDC_11common_fuzz4cbor1__NtB4_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hintCsgr0kjOx7ttC_11cbor_encode:
   12|    391|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCseGqCtrHvTDC_11common_fuzz4cbor1__NtB6_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary9size_hint0Csgr0kjOx7ttC_11cbor_encode:
   12|    391|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNtCseGqCtrHvTDC_11common_fuzz4cborNtB3_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   12|    304|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCINvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtBd_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtBa_5InnerBY_11deserializeNtB5_9___VisitorNtB10_7Visitor9visit_seqINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de8AccessorNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEE0Csgr0kjOx7ttC_11cbor_encode:
   12|    304|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtB5_7PayloadNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEECsgr0kjOx7ttC_11cbor_encode:
   12|    608|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvXNvXNvNvXNtCseGqCtrHvTDC_11common_fuzz4cborNtBe_7PayloadNtNtCs2xjNbAYLrNs_5serde2de11Deserialize11deserialize1__NtBb_5InnerBZ_11deserializeNtB6_9___VisitorNtB11_7Visitor9visit_seqNtB3_17___DeserializeWithBZ_11deserializeQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor2de12DeserializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils11SliceReaderEECsgr0kjOx7ttC_11cbor_encode:
   12|    304|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RINvXNvNvXs_NtCseGqCtrHvTDC_11common_fuzz4cborNtBa_7PayloadNtNtCs2xjNbAYLrNs_5serde3ser9Serialize9serialize1__NtB5_5InnerBV_9serializeINtCs8RS3iyFEIvR_11serde_tuple10SerializerQINtNtCsazDgIAEeCwb_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs1YscacFooSg_7cbor4ii4core5utils9BufWriterEEECsgr0kjOx7ttC_11cbor_encode:
   12|    608|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNvXNvNtCseGqCtrHvTDC_11common_fuzz4cbor1__NtB4_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary19arbitrary_take_rest:
   12|  1.17k|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]
_RNCNvXNvNtCseGqCtrHvTDC_11common_fuzz4cbor1__NtB6_7PayloadNtCsk1x3PqaaJir_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
   12|    390|#[derive(Deserialize_tuple, Serialize_tuple, Arbitrary, Debug)]

