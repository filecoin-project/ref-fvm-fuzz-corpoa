_RNvXs8_Cs9dKaaryarQ0_9arbitraryANtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary19arbitrary_take_restCsbVNlHXpVYm3_7rle_ops:
  648|    283|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  649|    283|        let mut array = Self::arbitrary(&mut u)?;
  650|    283|        if let Some(last) = array.last_mut() {
  651|    283|            *last = Arbitrary::arbitrary_take_rest(u)?;
  652|      0|        }
  653|    283|        Ok(array)
  654|    283|    }
_RNCNvXs8_Cs9dKaaryarQ0_9arbitraryANtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9size_hint0CsbVNlHXpVYm3_7rle_ops:
  658|    852|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|    852|            <T as Arbitrary>::size_hint(d)
  660|    852|        }))
_RINvCs9dKaaryarQ0_9arbitrary16try_create_arrayNCNvXs8_B2_ANtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9arbitrary0BU_KB1C_ECsbVNlHXpVYm3_7rle_ops:
  617|    283|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    283|where
  619|    283|    F: FnMut(usize) -> Result<T>,
  620|    283|{
  621|    283|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    283|    let array_ptr = array.as_mut_ptr();
  623|    283|    let dst = array_ptr as _;
  624|    283|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    283|        dst,
  626|    283|        initialized: 0,
  627|    283|    };
  628|       |    unsafe {
  629|    849|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|    849|            core::ptr::write(value_ptr, cb(idx)?);
  631|    849|            guard.initialized += 1;
  632|       |        }
  633|    283|        mem::forget(guard);
  634|    283|        Ok(array.assume_init())
  635|       |    }
  636|    283|}
_RNvXs8_Cs9dKaaryarQ0_9arbitraryANtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9size_hintCsbVNlHXpVYm3_7rle_ops:
  657|    284|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    284|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    284|        }))
  661|    284|    }
_RINvCs9dKaaryarQ0_9arbitrary12create_arrayNCNvXs8_B2_ANtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9size_hint0TjINtNtCscpdcbW9XHDL_4core6option6OptionjEEKB1y_ECsbVNlHXpVYm3_7rle_ops:
  596|    284|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    284|where
  598|    284|    F: FnMut(usize) -> T,
  599|    284|{
  600|    284|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    284|    let array_ptr = array.as_mut_ptr();
  602|    284|    let dst = array_ptr as _;
  603|    284|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    284|        dst,
  605|    284|        initialized: 0,
  606|    284|    };
  607|       |    unsafe {
  608|    852|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|    852|            core::ptr::write(value_ptr, cb(idx));
  610|    852|            guard.initialized += 1;
  611|    852|        }
  612|    284|        mem::forget(guard);
  613|    284|        array.assume_init()
  614|    284|    }
  615|    284|}
_RNvXs8_Cs9dKaaryarQ0_9arbitraryANtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9arbitraryCsbVNlHXpVYm3_7rle_ops:
  643|    283|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    283|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    283|    }
_RNCNvXs8_Cs9dKaaryarQ0_9arbitraryANtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9arbitrary0CsbVNlHXpVYm3_7rle_ops:
  644|    849|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvYNtCs5jCt6HDvTDF_17fvm_ipld_bitfield8BitFieldNtCs9dKaaryarQ0_9arbitrary9Arbitrary19arbitrary_take_restCsbVNlHXpVYm3_7rle_ops:
  182|    283|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    283|        Self::arbitrary(&mut u)
  184|    283|    }
_RNvXsC_Cs9dKaaryarQ0_9arbitraryhNtB5_9Arbitrary9size_hintCs5jCt6HDvTDF_17fvm_ipld_bitfield:
  302|  1.13k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.13k|                    let n = mem::size_of::<$ty>();
  304|  1.13k|                    (n, Some(n))
  305|  1.13k|                }
_RNvXsF_Cs9dKaaryarQ0_9arbitraryyNtB5_9Arbitrary9size_hintCs5jCt6HDvTDF_17fvm_ipld_bitfield:
  302|  1.13k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.13k|                    let n = mem::size_of::<$ty>();
  304|  1.13k|                    (n, Some(n))
  305|  1.13k|                }
_RNvXsH_Cs9dKaaryarQ0_9arbitraryjNtB5_9Arbitrary9size_hintCs5jCt6HDvTDF_17fvm_ipld_bitfield:
  302|    852|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    852|                    let n = mem::size_of::<$ty>();
  304|    852|                    (n, Some(n))
  305|    852|                }
_RNvXs1j_Cs9dKaaryarQ0_9arbitraryTyhENtB6_9Arbitrary9size_hintCs5jCt6HDvTDF_17fvm_ipld_bitfield:
  568|  1.13k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  1.13k|                crate::size_hint::and_all(&[
  570|  1.13k|                    <$last as Arbitrary>::size_hint(depth),
  571|  1.13k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  1.13k|                ])
  573|  1.13k|            }
_RNvXsC_Cs9dKaaryarQ0_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  1.13k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  1.13k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  1.13k|                    u.fill_buffer(&mut buf)?;
  294|  1.13k|                    let mut x: $unsigned = 0;
  295|  1.13k|                    for i in 0..mem::size_of::<$ty>() {
  296|  1.13k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  1.13k|                    }
  298|  1.13k|                    Ok(x as $ty)
  299|  1.13k|                }
_RNvXsF_Cs9dKaaryarQ0_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  12.5k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  12.5k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  12.5k|                    u.fill_buffer(&mut buf)?;
  294|  12.5k|                    let mut x: $unsigned = 0;
  295|   100k|                    for i in 0..mem::size_of::<$ty>() {
  296|   100k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   100k|                    }
  298|  12.5k|                    Ok(x as $ty)
  299|  12.5k|                }
_RNvXs_Cs9dKaaryarQ0_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  1.13k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  1.13k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  1.13k|    }

_RNvNtCs9dKaaryarQ0_9arbitrary9size_hint7and_allCsbVNlHXpVYm3_7rle_ops:
   37|    284|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    284|    hints.iter().copied().fold((0, Some(0)), and)
   39|    284|}
_RNCNvNtCs9dKaaryarQ0_9arbitrary9size_hint3and0CsbVNlHXpVYm3_7rle_ops:
   28|    284|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs9dKaaryarQ0_9arbitrary9size_hint3andCsbVNlHXpVYm3_7rle_ops:
   26|    852|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|    852|    let lower = lhs.0 + rhs.0;
   28|    852|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|    852|    (lower, upper)
   30|    852|}
_RNvNtCs9dKaaryarQ0_9arbitrary9size_hint7and_allCs5jCt6HDvTDF_17fvm_ipld_bitfield:
   37|  1.13k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.13k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.13k|}
_RNCNvNtCs9dKaaryarQ0_9arbitrary9size_hint3and0Cs5jCt6HDvTDF_17fvm_ipld_bitfield:
   28|  3.11k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNCNvNtCs9dKaaryarQ0_9arbitrary9size_hint3and00Cs5jCt6HDvTDF_17fvm_ipld_bitfield:
   28|  2.26k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs9dKaaryarQ0_9arbitrary9size_hint3andCs5jCt6HDvTDF_17fvm_ipld_bitfield:
   26|  3.11k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.11k|    let lower = lhs.0 + rhs.0;
   28|  3.11k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.11k|    (lower, upper)
   30|  3.11k|}

_RINvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECs5jCt6HDvTDF_17fvm_ipld_bitfield:
  213|  1.13k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  1.13k|    where
  215|  1.13k|        ElementType: Arbitrary<'a>,
  216|  1.13k|    {
  217|  1.13k|        let byte_size = self.arbitrary_byte_size()?;
  218|  1.13k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  1.13k|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|  1.13k|        let elem_size = std::cmp::max(1, elem_size);
  221|  1.13k|        Ok(byte_size / elem_size)
  222|  1.13k|    }
_RINvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs5jCt6HDvTDF_17fvm_ipld_bitfield:
  301|  12.5k|    fn int_in_range_impl<T>(
  302|  12.5k|        range: ops::RangeInclusive<T>,
  303|  12.5k|        mut bytes: impl Iterator<Item = u8>,
  304|  12.5k|    ) -> Result<(T, usize)>
  305|  12.5k|    where
  306|  12.5k|        T: Int,
  307|  12.5k|    {
  308|  12.5k|        let start = range.start();
  309|  12.5k|        let end = range.end();
  310|  12.5k|        assert!(
  311|  12.5k|            start <= end,
  312|  12.5k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  12.5k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  12.5k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  12.5k|        }
  320|  12.5k|
  321|  12.5k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  12.5k|        let mut result = T::Widest::ZERO;
  323|  12.5k|        let mut offset: usize = 0;
  324|       |
  325|  25.0k|        while offset < mem::size_of::<T>()
  326|  25.0k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  12.5k|        {
  328|  12.5k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  12.5k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  12.5k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  12.5k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  12.5k|            result = result % range;
  336|  12.5k|        }
  337|       |
  338|  12.5k|        Ok((
  339|  12.5k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  12.5k|            offset,
  341|  12.5k|        ))
  342|  12.5k|    }
_RINvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECs5jCt6HDvTDF_17fvm_ipld_bitfield:
  292|  12.5k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  12.5k|    where
  294|  12.5k|        T: Int,
  295|  12.5k|    {
  296|  12.5k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  12.5k|        self.data = &self.data[bytes_consumed..];
  298|  12.5k|        Ok(result)
  299|  12.5k|    }
_RNvXs9_NtCs9dKaaryarQ0_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  12.5k|                fn from_widest(w: Self::Widest) -> Self {
  772|  12.5k|                    let x = <$ty>::max_value().as_widest();
  773|  12.5k|                    (w % x) as Self
  774|  12.5k|                }
_RNvXsb_NtCs9dKaaryarQ0_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  12.5k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  12.5k|                    <$ty>::wrapping_add(self, rhs)
  790|  12.5k|                }
_RINvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    754|    fn int_in_range_impl<T>(
  302|    754|        range: ops::RangeInclusive<T>,
  303|    754|        mut bytes: impl Iterator<Item = u8>,
  304|    754|    ) -> Result<(T, usize)>
  305|    754|    where
  306|    754|        T: Int,
  307|    754|    {
  308|    754|        let start = range.start();
  309|    754|        let end = range.end();
  310|    754|        assert!(
  311|    754|            start <= end,
  312|    754|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    754|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    754|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    754|        }
  320|    754|
  321|    754|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    754|        let mut result = T::Widest::ZERO;
  323|    754|        let mut offset: usize = 0;
  324|       |
  325|  1.50k|        while offset < mem::size_of::<T>()
  326|    754|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    754|        {
  328|    754|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    754|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    754|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    754|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    754|            result = result % range;
  336|    754|        }
  337|       |
  338|    754|        Ok((
  339|    754|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    754|            offset,
  341|    754|        ))
  342|    754|    }
_RNvXsb_NtCs9dKaaryarQ0_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  12.5k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  12.5k|                    <$ty>::checked_add(self, rhs)
  786|  12.5k|                }
_RNvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    283|    pub fn new(data: &'a [u8]) -> Self {
   86|    283|        Unstructured { data }
   87|    283|    }
_RNvXsb_NtCs9dKaaryarQ0_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  25.0k|                fn from_usize(u: usize) -> Self {
  781|  25.0k|                    u as Self
  782|  25.0k|                }
_RNvXs1_NtCs9dKaaryarQ0_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  3.01k|                fn as_widest(self) -> Self::Widest {
  768|  3.01k|                    self as $widest
  769|  3.01k|                }
_RNvXs9_NtCs9dKaaryarQ0_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  50.0k|                fn as_widest(self) -> Self::Widest {
  768|  50.0k|                    self as $widest
  769|  50.0k|                }
_RNvXs5_NtCs9dKaaryarQ0_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|    954|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|    954|                    <$ty>::checked_add(self, rhs)
  786|    954|                }
_RNvXs2_NtCs9dKaaryarQ0_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|    200|                fn from_widest(w: Self::Widest) -> Self {
  772|    200|                    let x = <$ty>::max_value().as_widest();
  773|    200|                    (w % x) as Self
  774|    200|                }
_RNvXs5_NtCs9dKaaryarQ0_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.15k|                fn from_u8(b: u8) -> Self {
  777|  1.15k|                    b as Self
  778|  1.15k|                }
_RNvXsb_NtCs9dKaaryarQ0_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  12.5k|                fn from_u8(b: u8) -> Self {
  777|  12.5k|                    b as Self
  778|  12.5k|                }
_RNvXs5_NtCs9dKaaryarQ0_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|    954|                fn wrapping_add(self, rhs: Self) -> Self {
  789|    954|                    <$ty>::wrapping_add(self, rhs)
  790|    954|                }
_RNvXs5_NtCs9dKaaryarQ0_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  1.15k|                fn from_usize(u: usize) -> Self {
  781|  1.15k|                    u as Self
  782|  1.15k|                }
_RINvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    200|    fn int_in_range_impl<T>(
  302|    200|        range: ops::RangeInclusive<T>,
  303|    200|        mut bytes: impl Iterator<Item = u8>,
  304|    200|    ) -> Result<(T, usize)>
  305|    200|    where
  306|    200|        T: Int,
  307|    200|    {
  308|    200|        let start = range.start();
  309|    200|        let end = range.end();
  310|    200|        assert!(
  311|    200|            start <= end,
  312|    200|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    200|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    200|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    200|        }
  320|    200|
  321|    200|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    200|        let mut result = T::Widest::ZERO;
  323|    200|        let mut offset: usize = 0;
  324|       |
  325|    598|        while offset < mem::size_of::<T>()
  326|    400|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    398|        {
  328|    398|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    398|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    398|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    200|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    200|            result = result % range;
  336|    200|        }
  337|       |
  338|    200|        Ok((
  339|    200|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    200|            offset,
  341|    200|        ))
  342|    200|    }
_RNvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  1.13k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  1.13k|        if self.data.is_empty() {
  226|    144|            Ok(0)
  227|    988|        } else if self.data.len() == 1 {
  228|     34|            self.data = &[];
  229|     34|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    954|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    754|                let bytes = 1;
  241|    754|                let max_size = self.data.len() - bytes;
  242|    754|                let (rest, for_size) = self.data.split_at(max_size);
  243|    754|                self.data = rest;
  244|    754|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|    200|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|    200|                let bytes = 2;
  247|    200|                let max_size = self.data.len() - bytes;
  248|    200|                let (rest, for_size) = self.data.split_at(max_size);
  249|    200|                self.data = rest;
  250|    200|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    954|            Ok(len)
  266|       |        }
  267|  1.13k|    }
_RNvMNtCs9dKaaryarQ0_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  13.6k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  13.6k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  13.6k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  13.6k|        for byte in buffer[n..].iter_mut() {
  453|    112|            *byte = 0;
  454|    112|        }
  455|  13.6k|        self.data = &self.data[n..];
  456|  13.6k|        Ok(())
  457|  13.6k|    }
_RNvXs1_NtCs9dKaaryarQ0_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    754|                fn from_widest(w: Self::Widest) -> Self {
  772|    754|                    let x = <$ty>::max_value().as_widest();
  773|    754|                    (w % x) as Self
  774|    754|                }
_RNvXs2_NtCs9dKaaryarQ0_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    800|                fn as_widest(self) -> Self::Widest {
  768|    800|                    self as $widest
  769|    800|                }

rust_fuzzer_test_input:
  167|    284|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    284|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    284|
  170|    284|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    284|            // implementation. This helps the fuzzer avoid exploring all the
  172|    284|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    284|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    284|            // get to longer inputs that actually lead to interesting executions
  175|    284|            // quicker.
  176|    284|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    283|            }
  179|    283|
  180|    283|            let mut u = Unstructured::new(bytes);
  181|    283|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    283|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    283|            }
  199|       |
  200|    283|            let $data = match data {
  201|    283|                Ok(d) => d,
  202|      0|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    284|        }
_RNCNvCs1ZM2o36pyw7_13libfuzzer_sys15test_input_wrap0B3_:
   28|    284|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    284|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    284|        rust_fuzzer_test_input(data_slice);
   31|    284|    });
LLVMFuzzerTestOneInput:
   27|    284|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    284|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    284|    });
   32|    284|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    284|    }
   37|    284|    0
   38|    284|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvMs2_NtCs9rwjox2lc69_9once_cell3impINtB5_8OnceCellNtNtCscMnS7pKLK13_5alloc6string6StringE14is_initializedCsbVNlHXpVYm3_7rle_ops:
   74|    283|    pub(crate) fn is_initialized(&self) -> bool {
   75|    283|        // An `Acquire` load is enough because that makes all the initialization
   76|    283|        // operations visible to us, and, this being a fast path, weaker
   77|    283|        // ordering helps with performance. This `Acquire` synchronizes with
   78|    283|        // `SeqCst` operations on the slow path.
   79|    283|        self.state_and_queue.load(Ordering::Acquire) == COMPLETE
   80|    283|    }

_RNvMs4_NtCs9rwjox2lc69_9once_cell4syncINtB5_8OnceCellNtNtCscMnS7pKLK13_5alloc6string6StringE3getCsbVNlHXpVYm3_7rle_ops:
  850|    283|        pub fn get(&self) -> Option<&T> {
  851|    283|            if self.0.is_initialized() {
  852|       |                // Safe b/c value is initialized.
  853|      0|                Some(unsafe { self.get_unchecked() })
  854|       |            } else {
  855|    283|                None
  856|       |            }
  857|    283|        }

_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EEE4peekCsbVNlHXpVYm3_7rle_ops:
  473|   146k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   146k|        self.next.as_mut()
  475|   146k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  71.8k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  71.8k|        let next = self.next.take()?;
  484|  66.6k|        self.next = self.iter.next();
  485|  66.6k|        Some(next)
  486|  71.8k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4next0CsbVNlHXpVYm3_7rle_ops:
  390|  32.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  387|  66.6k|    fn next(&mut self) -> Option<Self::Item> {
  388|  66.6k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  66.6k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  66.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  66.6k|    }
_RNvMsa_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EE3newCsbVNlHXpVYm3_7rle_ops:
  425|  1.98k|    pub fn new(iter: I) -> Self {
  426|  1.98k|        Self {
  427|  1.98k|            iter: Lookahead::new(iter),
  428|  1.98k|        }
  429|  1.98k|    }
_RNvXsf_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCscpdcbW9XHDL_4core7default7Default7defaultCsbVNlHXpVYm3_7rle_ops:
   86|  1.98k|#[derive(Default)]
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E10next_rangeCsbVNlHXpVYm3_7rle_ops:
  353|  29.9k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  29.9k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  13.7k|            (Some(lhs), Some(rhs)) => {
  356|  13.7k|                // if both iterators are non-empty, we advance the one whichever's
  357|  13.7k|                // corresponding range has a smaller upper bound
  358|  13.7k|                if lhs.end <= rhs.end {
  359|  7.49k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  6.29k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  14.4k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    425|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  1.27k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  28.7k|        if advance_lhs {
  370|  21.9k|            self.lhs.next();
  371|  21.9k|        } else {
  372|  6.72k|            self.rhs.next();
  373|  6.72k|        }
  374|       |
  375|  28.7k|        range
  376|  29.9k|    }
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionENtNtNtB1M_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  387|  11.9k|    fn next(&mut self) -> Option<Self::Item> {
  388|  11.9k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  11.9k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  11.9k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  11.9k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0CsbVNlHXpVYm3_7rle_ops:
  390|  30.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  387|  79.6k|    fn next(&mut self) -> Option<Self::Item> {
  388|  79.6k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  79.6k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  79.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  79.6k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE10next_rangeCsbVNlHXpVYm3_7rle_ops:
  353|  19.3k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  19.3k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  17.0k|            (Some(lhs), Some(rhs)) => {
  356|  17.0k|                // if both iterators are non-empty, we advance the one whichever's
  357|  17.0k|                // corresponding range has a smaller upper bound
  358|  17.0k|                if lhs.end <= rhs.end {
  359|  9.13k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  7.95k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  1.08k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  1.00k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    168|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  19.1k|        if advance_lhs {
  370|  10.2k|            self.lhs.next();
  371|  10.2k|        } else {
  372|  8.96k|            self.rhs.next();
  373|  8.96k|        }
  374|       |
  375|  19.1k|        range
  376|  19.3k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeCsbVNlHXpVYm3_7rle_ops:
  353|  79.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  79.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  71.8k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  7.77k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  71.8k|        if advance_lhs {
  370|  71.8k|            self.lhs.next();
  371|  71.8k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  71.8k|        range
  376|  79.6k|    }
_RNvMs5_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_E3newCsbVNlHXpVYm3_7rle_ops:
  297|  1.98k|    pub fn new(a: A, b: B) -> Self {
  298|  1.98k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.98k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE3newCsbVNlHXpVYm3_7rle_ops:
  468|  2.26k|    fn new(mut iter: I) -> Self {
  469|  2.26k|        let next = iter.next();
  470|  2.26k|        Self { iter, next }
  471|  2.26k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4next0CsbVNlHXpVYm3_7rle_ops:
  390|  19.3k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0CsbVNlHXpVYm3_7rle_ops:
  390|  66.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newCsbVNlHXpVYm3_7rle_ops:
  468|  11.8k|    fn new(mut iter: I) -> Self {
  469|  11.8k|        let next = iter.next();
  470|  11.8k|        Self { iter, next }
  471|  11.8k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionENtNtNtB1z_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  310|  11.9k|    fn next(&mut self) -> Option<Self::Item> {
  311|  11.9k|        self.0.next()
  312|  11.9k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  310|  90.0k|    fn next(&mut self) -> Option<Self::Item> {
  311|  90.0k|        self.0.next()
  312|  90.0k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE4peekCsbVNlHXpVYm3_7rle_ops:
  473|  21.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  21.6k|        self.next.as_mut()
  475|  21.6k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4nexts_0CsbVNlHXpVYm3_7rle_ops:
  390|  17.0k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0CsbVNlHXpVYm3_7rle_ops:
  390|  62.4k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekCsbVNlHXpVYm3_7rle_ops:
  473|  79.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  79.6k|        self.next.as_mut()
  475|  79.6k|    }
_RNvMsa_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EE3newCsbVNlHXpVYm3_7rle_ops:
  425|  1.69k|    pub fn new(iter: I) -> Self {
  426|  1.69k|        Self {
  427|  1.69k|            iter: Lookahead::new(iter),
  428|  1.69k|        }
  429|  1.69k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_ENtNtNtB1z_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  310|  23.9k|    fn next(&mut self) -> Option<Self::Item> {
  311|  23.9k|        self.0.next()
  312|  23.9k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_ENtNtNtB1z_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  310|  23.3k|    fn next(&mut self) -> Option<Self::Item> {
  311|  23.3k|        self.0.next()
  312|  23.3k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEENtNtNtB22_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  11.9k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  11.9k|        let next = self.next.take()?;
  484|  9.68k|        self.next = self.iter.next();
  485|  9.68k|        Some(next)
  486|  11.9k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E3newCsbVNlHXpVYm3_7rle_ops:
  342|  1.69k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.69k|        Self {
  344|  1.69k|            lhs: Lookahead::new(lhs),
  345|  1.69k|            rhs: Lookahead::new(rhs),
  346|  1.69k|            combinator: Default::default(),
  347|  1.69k|        }
  348|  1.69k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsbVNlHXpVYm3_7rle_ops:
  473|  66.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  66.6k|        self.next.as_mut()
  475|  66.6k|    }
_RNvMsa_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEE3newCsbVNlHXpVYm3_7rle_ops:
  425|  2.26k|    pub fn new(iter: I) -> Self {
  426|  2.26k|        Self {
  427|  2.26k|            iter: Lookahead::new(iter),
  428|  2.26k|        }
  429|  2.26k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E3newCsbVNlHXpVYm3_7rle_ops:
  342|  1.98k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.98k|        Self {
  344|  1.98k|            lhs: Lookahead::new(lhs),
  345|  1.98k|            rhs: Lookahead::new(rhs),
  346|  1.98k|            combinator: Default::default(),
  347|  1.98k|        }
  348|  1.98k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE4peekCsbVNlHXpVYm3_7rle_ops:
  473|  30.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  30.2k|        self.next.as_mut()
  475|  30.2k|    }
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_ENtNtNtB1M_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  387|  32.2k|    fn next(&mut self) -> Option<Self::Item> {
  388|  32.2k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  32.2k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  32.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  32.2k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEENtNtNtB1Y_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  438|  11.9k|    fn next(&mut self) -> Option<Self::Item> {
  439|  11.9k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  9.68k|        while let Some(next) = self.iter.peek() {
  444|  8.55k|            if next.start > range.end {
  445|  8.55k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  9.68k|        Some(range)
  453|  11.9k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  78.1k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  78.1k|        let next = self.next.take()?;
  484|  78.1k|        self.next = self.iter.next();
  485|  78.1k|        Some(next)
  486|  78.1k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsbVNlHXpVYm3_7rle_ops:
  473|  79.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  79.6k|        self.next.as_mut()
  475|  79.6k|    }
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_ENtNtNtB1M_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  387|  23.3k|    fn next(&mut self) -> Option<Self::Item> {
  388|  23.3k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  23.3k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  23.3k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  23.3k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  62.4k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  62.4k|        let next = self.next.take()?;
  484|  62.4k|        self.next = self.iter.next();
  485|  62.4k|        Some(next)
  486|  62.4k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeCsbVNlHXpVYm3_7rle_ops:
  353|  66.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  66.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  62.4k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  4.21k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  62.4k|        if advance_lhs {
  370|  62.4k|            self.lhs.next();
  371|  62.4k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  62.4k|        range
  376|  66.6k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  71.8k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  71.8k|        let next = self.next.take()?;
  484|  71.8k|        self.next = self.iter.next();
  485|  71.8k|        Some(next)
  486|  71.8k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0CsbVNlHXpVYm3_7rle_ops:
  390|  71.8k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE3newCsbVNlHXpVYm3_7rle_ops:
  468|  1.69k|    fn new(mut iter: I) -> Self {
  469|  1.69k|        let next = iter.next();
  470|  1.69k|        Self { iter, next }
  471|  1.69k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0CsbVNlHXpVYm3_7rle_ops:
  390|  79.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4next0CsbVNlHXpVYm3_7rle_ops:
  390|  29.9k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E10next_rangeCsbVNlHXpVYm3_7rle_ops:
  353|  32.2k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  32.2k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  13.8k|            (Some(lhs), Some(rhs)) => {
  356|  13.8k|                // if both iterators are non-empty, we advance the one whichever's
  357|  13.8k|                // corresponding range has a smaller upper bound
  358|  13.8k|                if lhs.end <= rhs.end {
  359|  7.23k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  6.61k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  8.82k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  7.59k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  1.98k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  30.2k|        if advance_lhs {
  370|  16.0k|            self.lhs.next();
  371|  16.0k|        } else {
  372|  14.2k|            self.rhs.next();
  373|  14.2k|        }
  374|       |
  375|  30.2k|        range
  376|  32.2k|    }
_RNvMs5_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionE3newCsbVNlHXpVYm3_7rle_ops:
  297|  2.26k|    pub fn new(a: A, b: B) -> Self {
  298|  2.26k|        Self(Merge::new(_Combine::new(a, b)))
  299|  2.26k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0CsbVNlHXpVYm3_7rle_ops:
  390|  28.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE3newCsbVNlHXpVYm3_7rle_ops:
  468|  1.98k|    fn new(mut iter: I) -> Self {
  469|  1.98k|        let next = iter.next();
  470|  1.98k|        Self { iter, next }
  471|  1.98k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  310|  71.8k|    fn next(&mut self) -> Option<Self::Item> {
  311|  71.8k|        self.0.next()
  312|  71.8k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  438|  71.8k|    fn next(&mut self) -> Option<Self::Item> {
  439|  71.8k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  66.6k|        while let Some(next) = self.iter.peek() {
  444|  62.4k|            if next.start > range.end {
  445|  62.4k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  66.6k|        Some(range)
  453|  71.8k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE3newCsbVNlHXpVYm3_7rle_ops:
  342|  2.26k|    fn new(lhs: A, rhs: B) -> Self {
  343|  2.26k|        Self {
  344|  2.26k|            lhs: Lookahead::new(lhs),
  345|  2.26k|            rhs: Lookahead::new(rhs),
  346|  2.26k|            combinator: Default::default(),
  347|  2.26k|        }
  348|  2.26k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE4peekCsbVNlHXpVYm3_7rle_ops:
  473|  9.68k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.68k|        self.next.as_mut()
  475|  9.68k|    }
_RNvMs5_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_E3newCsbVNlHXpVYm3_7rle_ops:
  297|  1.69k|    pub fn new(a: A, b: B) -> Self {
  298|  1.69k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.69k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  438|  23.9k|    fn next(&mut self) -> Option<Self::Item> {
  439|  23.9k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  30.2k|        while let Some(next) = self.iter.peek() {
  444|  28.4k|            if next.start > range.end {
  445|  20.1k|                break;
  446|  8.34k|            }
  447|  8.34k|
  448|  8.34k|            range.end = cmp::max(range.end, next.end);
  449|  8.34k|            self.iter.next();
  450|       |        }
  451|       |
  452|  21.9k|        Some(range)
  453|  23.9k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EENtNtNtB22_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  23.3k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  23.3k|        let next = self.next.take()?;
  484|  21.6k|        self.next = self.iter.next();
  485|  21.6k|        Some(next)
  486|  23.3k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  90.0k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  90.0k|        let next = self.next.take()?;
  484|  79.6k|        self.next = self.iter.next();
  485|  79.6k|        Some(next)
  486|  90.0k|    }
_RNvXsg_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_12IntersectionNtNtCscpdcbW9XHDL_4core7default7Default7defaultCsbVNlHXpVYm3_7rle_ops:
  122|  2.26k|#[derive(Default)]
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekCsbVNlHXpVYm3_7rle_ops:
  473|  66.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  66.6k|        self.next.as_mut()
  475|  66.6k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekCsbVNlHXpVYm3_7rle_ops:
  473|   163k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   163k|        self.next.as_mut()
  475|   163k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  438|  23.3k|    fn next(&mut self) -> Option<Self::Item> {
  439|  23.3k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  21.6k|        while let Some(next) = self.iter.peek() {
  444|  20.1k|            if next.start > range.end {
  445|  20.1k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  21.6k|        Some(range)
  453|  23.3k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  438|  90.0k|    fn next(&mut self) -> Option<Self::Item> {
  439|  90.0k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  79.6k|        while let Some(next) = self.iter.peek() {
  444|  71.8k|            if next.start > range.end {
  445|  71.8k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  79.6k|        Some(range)
  453|  90.0k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EENtNtNtB22_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  481|  32.2k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  32.2k|        let next = self.next.take()?;
  484|  30.2k|        self.next = self.iter.next();
  485|  30.2k|        Some(next)
  486|  32.2k|    }
_RNvXsh_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCscpdcbW9XHDL_4core7default7Default7defaultCsbVNlHXpVYm3_7rle_ops:
  151|  1.69k|#[derive(Default)]
_RNvXNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|  6.61k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|  6.61k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|  6.61k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  28.3k|    fn new(mut iter: I) -> Self {
  469|  28.3k|        let next = iter.next();
  470|  28.3k|        Self { iter, next }
  471|  28.3k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|   174k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs4_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_rhs:
  267|  3.52k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  268|  3.52k|        let cut = self.offset(lhs.start..cmp::min(lhs.end, rhs.start));
  269|  3.52k|        lhs.start = cmp::max(lhs.start, rhs.end);
  270|  3.52k|        self.offset += rhs.size();
  271|  3.52k|        cut
  272|  3.52k|    }
_RNvXs_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_lhs:
  126|  9.13k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  127|  9.13k|        // lhs:     xx----      xxxx--      --xx--
  128|  9.13k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  129|  9.13k|        // output:  ------      --xx--      --xx--
  130|  9.13k|
  131|  9.13k|        cmp::max(lhs.start, rhs.start)..lhs.end
  132|  9.13k|    }
_RNvXs0_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|   249k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|   249k|        // the difference between a range and an empty range is just that range
  183|   249k|        Some(lhs)
  184|   249k|    }
_RNvXsj_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtNtCscpdcbW9XHDL_4core7default7Default7defaultB9_:
  247|    283|#[derive(Default)]
_RNvMsa_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEE3newB9_:
  425|  3.67k|    pub fn new(iter: I) -> Self {
  426|  3.67k|        Self {
  427|  3.67k|            iter: Lookahead::new(iter),
  428|  3.67k|        }
  429|  3.67k|    }
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|   197k|    fn next(&mut self) -> Option<Self::Item> {
  388|   197k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   197k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   197k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   197k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEE3newB9_:
  468|    283|    fn new(mut iter: I) -> Self {
  469|    283|        let next = iter.next();
  470|    283|        Self { iter, next }
  471|    283|    }
_RNvXNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|  7.59k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|  7.59k|        Some(rhs)
  116|  7.59k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|  55.7k|    fn next(&mut self) -> Option<Self::Item> {
  311|  55.7k|        self.0.next()
  312|  55.7k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  7.58k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs4_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator16advance_rhs_tail:
  278|    260|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  279|    260|        None
  280|    260|    }
_RNvMs5_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceE3newB9_:
  297|  3.67k|    pub fn new(a: A, b: B) -> Self {
  298|  3.67k|        Self(Merge::new(_Combine::new(a, b)))
  299|  3.67k|    }
_RNvMs5_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutE3newB9_:
  297|    283|    pub fn new(a: A, b: B) -> Self {
  298|    283|        Self(Merge::new(_Combine::new(a, b)))
  299|    283|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   169k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   169k|        self.next.as_mut()
  475|   169k|    }
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|   182k|    fn next(&mut self) -> Option<Self::Item> {
  388|   182k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   182k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   182k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   182k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|   197k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   197k|        self.next.as_mut()
  475|   197k|    }
_RNvXs0_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|    425|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|    425|        // the difference between an empty range and a range is an empty range
  188|    425|        None
  189|    425|    }
_RNvXsh_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCscpdcbW9XHDL_4core7default7Default7defaultB9_:
  151|  28.3k|#[derive(Default)]
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE10next_rangeB9_:
  353|  68.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  68.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  33.8k|            (Some(lhs), Some(rhs)) => {
  356|  33.8k|                // if both iterators are non-empty, we advance the one whichever's
  357|  33.8k|                // corresponding range has a smaller upper bound
  358|  33.8k|                if lhs.end <= rhs.end {
  359|  18.5k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  15.2k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  21.9k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  9.20k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  3.67k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  64.9k|        if advance_lhs {
  370|  40.5k|            self.lhs.next();
  371|  40.5k|        } else {
  372|  24.4k|            self.rhs.next();
  373|  24.4k|        }
  374|       |
  375|  64.9k|        range
  376|  68.6k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|   197k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsa_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|  28.3k|    pub fn new(iter: I) -> Self {
  426|  28.3k|        Self {
  427|  28.3k|            iter: Lookahead::new(iter),
  428|  28.3k|        }
  429|  28.3k|    }
_RNvXsi_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtNtCscpdcbW9XHDL_4core7default7Default7defaultB9_:
  195|  3.67k|#[derive(Default)]
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|  28.3k|    fn new(mut iter: I) -> Self {
  469|  28.3k|        let next = iter.next();
  470|  28.3k|        Self { iter, next }
  471|  28.3k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|   182k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|  56.6k|    fn next(&mut self) -> Option<Self::Item> {
  388|  56.6k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  56.6k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  56.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  56.6k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|  55.7k|    fn next(&mut self) -> Option<Self::Item> {
  439|  55.7k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  52.9k|        while let Some(next) = self.iter.peek() {
  444|  49.8k|            if next.start > range.end {
  445|  48.9k|                break;
  446|    950|            }
  447|    950|
  448|    950|            range.end = cmp::max(range.end, next.end);
  449|    950|            self.iter.next();
  450|       |        }
  451|       |
  452|  52.0k|        Some(range)
  453|  55.7k|    }
_RNvXs2_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_lhs_tail:
  233|  21.9k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  234|  21.9k|        // the symmetric difference of a range and an empty range is just that range
  235|  21.9k|        Some(lhs)
  236|  21.9k|    }
_RNvMs5_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  28.3k|    pub fn new(a: A, b: B) -> Self {
  298|  28.3k|        Self(Merge::new(_Combine::new(a, b)))
  299|  28.3k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE3newB9_:
  342|  3.67k|    fn new(lhs: A, rhs: B) -> Self {
  343|  3.67k|        Self {
  344|  3.67k|            lhs: Lookahead::new(lhs),
  345|  3.67k|            rhs: Lookahead::new(rhs),
  346|  3.67k|            combinator: Default::default(),
  347|  3.67k|        }
  348|  3.67k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|    283|    fn next(&mut self) -> Option<Self::Item> {
  439|    283|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|      0|        while let Some(next) = self.iter.peek() {
  444|      0|            if next.start > range.end {
  445|      0|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|      0|        Some(range)
  453|    283|    }
_RNvMs1_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifference7advance:
  201|  33.8k|    fn advance(left: Range<u64>, right: &mut Range<u64>) -> Range<u64> {
  202|  33.8k|        if left.start <= right.start {
  203|       |            // left:       xxxx--      xx----
  204|       |            // right:      --xxxx  or  ----xx
  205|       |            // output:     xx----      xx----
  206|       |            // new right:  ----xx      ----xx
  207|       |
  208|  22.8k|            let difference = left.start..cmp::min(left.end, right.start);
  209|  22.8k|            right.start = cmp::max(right.start, left.end);
  210|  22.8k|            difference
  211|       |        } else {
  212|       |            // left:       --xx--
  213|       |            // right:      xxxxxx
  214|       |            // output:     xx----
  215|       |            // new right:  ----xx
  216|       |
  217|  10.9k|            let difference = right.start..left.start;
  218|  10.9k|            right.start = left.end;
  219|  10.9k|            difference
  220|       |        }
  221|  33.8k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  64.9k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs3_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_3Cut6offset:
  256|  7.30k|    fn offset(&self, range: Range<u64>) -> Range<u64> {
  257|  7.30k|        (range.start - self.offset)..(range.end - self.offset)
  258|  7.30k|    }
_RNvXNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|   245k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|   245k|        // the union of a range and an empty range is just that range
  111|   245k|        Some(lhs)
  112|   245k|    }
_RNvMsa_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEE3newB9_:
  425|    283|    pub fn new(iter: I) -> Self {
  426|    283|        Self {
  427|    283|            iter: Lookahead::new(iter),
  428|    283|        }
  429|    283|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  68.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  481|  72.5k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  72.5k|        let next = self.next.take()?;
  484|  72.5k|        self.next = self.iter.next();
  485|  72.5k|        Some(next)
  486|  72.5k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|  56.6k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  56.6k|        let next = self.next.take()?;
  484|  52.9k|        self.next = self.iter.next();
  485|  52.9k|        Some(next)
  486|  56.6k|    }
_RNvMsa_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|  28.3k|    pub fn new(iter: I) -> Self {
  426|  28.3k|        Self {
  427|  28.3k|            iter: Lookahead::new(iter),
  428|  28.3k|        }
  429|  28.3k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|  28.3k|    fn new(lhs: A, rhs: B) -> Self {
  343|  28.3k|        Self {
  344|  28.3k|            lhs: Lookahead::new(lhs),
  345|  28.3k|            rhs: Lookahead::new(rhs),
  346|  28.3k|            combinator: Default::default(),
  347|  28.3k|        }
  348|  28.3k|    }
_RNvXs0_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|  7.49k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|  7.49k|        // lhs:     xx----      xxxx--      --xx--
  157|  7.49k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|  7.49k|        // output:  xx----      xx----      ------
  159|  7.49k|
  160|  7.49k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|  7.49k|    }
_RNvXsf_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCscpdcbW9XHDL_4core7default7Default7defaultB9_:
   86|  28.3k|#[derive(Default)]
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE10next_rangeB9_:
  353|  7.58k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.58k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  7.30k|            (Some(lhs), Some(rhs)) => {
  356|  7.30k|                // if both iterators are non-empty, we advance the one whichever's
  357|  7.30k|                // corresponding range has a smaller upper bound
  358|  7.30k|                if lhs.end <= rhs.end {
  359|  3.78k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  3.52k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|      0|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    260|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|     23|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.56k|        if advance_lhs {
  370|  3.78k|            self.lhs.next();
  371|  3.78k|        } else {
  372|  3.78k|            self.rhs.next();
  373|  3.78k|        }
  374|       |
  375|  7.56k|        range
  376|  7.58k|    }
_RNvXNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  7.23k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  7.23k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  7.23k|        // to ensure that the lower bounds are monotonically increasing
   93|  7.23k|        //
   94|  7.23k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  7.23k|        // `xxxx--` and then `xxxxxx`, not
   96|  7.23k|        // `--xx--` and then `xxxxxx`
   97|  7.23k|        //
   98|  7.23k|        // lhs:     xx----      xxxx--      --xx--
   99|  7.23k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  7.23k|        // output:  xx----      xxxx--      xxxx--
  101|  7.23k|
  102|  7.23k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  7.23k|    }
_RNvXs_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_rhs_tail:
  143|  1.00k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  144|  1.00k|        None
  145|  1.00k|    }
_RNvXs2_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_rhs_tail:
  238|  9.20k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  239|  9.20k|        Some(rhs)
  240|  9.20k|    }
_RNvXs4_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_lhs:
  262|  3.78k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  263|  3.78k|        // apart from the offset, these implementations are identical to those of the `Difference` combinator
  264|  3.78k|        self.offset(lhs.start..cmp::min(lhs.end, rhs.start))
  265|  3.78k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|   170k|    fn next(&mut self) -> Option<Self::Item> {
  311|   170k|        self.0.next()
  312|   170k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  7.30k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs0_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|  6.29k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|  6.29k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|  6.29k|        // to avoid it from returning invalid bits in the next iteration
  166|  6.29k|        //
  167|  6.29k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|  6.29k|        // `------` and then `----xx`, not
  169|  6.29k|        // `------` and then `--xxxx`
  170|  6.29k|        //
  171|  6.29k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|  6.29k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|  6.29k|        // output:   ------      ------      xx----
  174|  6.29k|        // new lhs:  ----xx      ----xx      ----xx
  175|  6.29k|
  176|  6.29k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|  6.29k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|  6.29k|        difference
  179|  6.29k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|   170k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   170k|        let next = self.next.take()?;
  484|   154k|        self.next = self.iter.next();
  485|   154k|        Some(next)
  486|   170k|    }
_RNvXs2_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_rhs:
  229|  15.2k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  230|  15.2k|        Self::advance(rhs, lhs)
  231|  15.2k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|   191k|    fn next(&mut self) -> Option<Self::Item> {
  311|   191k|        self.0.next()
  312|   191k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   182k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   182k|        self.next.as_mut()
  475|   182k|    }
_RNvXs_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_rhs:
  134|  7.95k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  135|  7.95k|        cmp::max(lhs.start, rhs.start)..rhs.end
  136|  7.95k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|   163k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   163k|        let next = self.next.take()?;
  484|   163k|        self.next = self.iter.next();
  485|   163k|        Some(next)
  486|   163k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|   197k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   197k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   174k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  23.2k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   174k|        if advance_lhs {
  370|   174k|            self.lhs.next();
  371|   174k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   174k|        range
  376|   197k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newB9_:
  468|  7.92k|    fn new(mut iter: I) -> Self {
  469|  7.92k|        let next = iter.next();
  470|  7.92k|        Self { iter, next }
  471|  7.92k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE3newB9_:
  468|  3.67k|    fn new(mut iter: I) -> Self {
  469|  3.67k|        let next = iter.next();
  470|  3.67k|        Self { iter, next }
  471|  3.67k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|   380k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   380k|        self.next.as_mut()
  475|   380k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE3newB9_:
  342|    283|    fn new(lhs: A, rhs: B) -> Self {
  343|    283|        Self {
  344|    283|            lhs: Lookahead::new(lhs),
  345|    283|            rhs: Lookahead::new(rhs),
  346|    283|            combinator: Default::default(),
  347|    283|        }
  348|    283|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|   154k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   154k|        self.next.as_mut()
  475|   154k|    }
_RNvXs2_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_lhs:
  225|  18.5k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  226|  18.5k|        Self::advance(lhs, rhs)
  227|  18.5k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|   182k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   182k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   163k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  19.4k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   163k|        if advance_lhs {
  370|   163k|            self.lhs.next();
  371|   163k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   163k|        range
  376|   182k|    }
_RNCNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|   163k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|    283|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|    283|        let next = self.next.take()?;
  484|      0|        self.next = self.iter.next();
  485|      0|        Some(next)
  486|    283|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|  28.3k|    fn new(mut iter: I) -> Self {
  469|  28.3k|        let next = iter.next();
  470|  28.3k|        Self { iter, next }
  471|  28.3k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  28.3k|    fn new(mut iter: I) -> Self {
  469|  28.3k|        let next = iter.next();
  470|  28.3k|        Self { iter, next }
  471|  28.3k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|   191k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   191k|        let next = self.next.take()?;
  484|   169k|        self.next = self.iter.next();
  485|   169k|        Some(next)
  486|   191k|    }
_RNvXse_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|   174k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   174k|        let next = self.next.take()?;
  484|   174k|        self.next = self.iter.next();
  485|   174k|        Some(next)
  486|   174k|    }
_RNvXs6_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|    283|    fn next(&mut self) -> Option<Self::Item> {
  311|    283|        self.0.next()
  312|    283|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|   170k|    fn next(&mut self) -> Option<Self::Item> {
  439|   170k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   154k|        while let Some(next) = self.iter.peek() {
  444|   142k|            if next.start > range.end {
  445|   142k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   154k|        Some(range)
  453|   170k|    }
_RNvXs_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_lhs_tail:
  138|  1.08k|    fn advance_lhs_tail(&mut self, _lhs: Range<u64>) -> Option<Range<u64>> {
  139|  1.08k|        // the intersection of a range and an empty range is an empty range
  140|  1.08k|        None
  141|  1.08k|    }
_RNvMs8_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  28.3k|    fn new(lhs: A, rhs: B) -> Self {
  343|  28.3k|        Self {
  344|  28.3k|            lhs: Lookahead::new(lhs),
  345|  28.3k|            rhs: Lookahead::new(rhs),
  346|  28.3k|            combinator: Default::default(),
  347|  28.3k|        }
  348|  28.3k|    }
_RNvMs5_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|  28.3k|    pub fn new(a: A, b: B) -> Self {
  298|  28.3k|        Self(Merge::new(_Combine::new(a, b)))
  299|  28.3k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  56.6k|    fn new(mut iter: I) -> Self {
  469|  56.6k|        let next = iter.next();
  470|  56.6k|        Self { iter, next }
  471|  56.6k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekB9_:
  473|   152k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   152k|        self.next.as_mut()
  475|   152k|    }
_RNvMsd_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE4peekB9_:
  473|  52.9k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  52.9k|        self.next.as_mut()
  475|  52.9k|    }
_RNvXsb_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|   191k|    fn next(&mut self) -> Option<Self::Item> {
  439|   191k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   169k|        while let Some(next) = self.iter.peek() {
  444|   153k|            if next.start > range.end {
  445|   153k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   169k|        Some(range)
  453|   191k|    }
_RNvXs9_NtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|    283|    fn next(&mut self) -> Option<Self::Item> {
  388|    283|        // we repeatedly compute the next range until we find one that is non-empty
  389|    283|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|    283|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|    283|    }

_RNvXs3_NtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextCsbVNlHXpVYm3_7rle_ops:
  153|  62.4k|    fn next(&mut self) -> Option<Self::Item> {
  154|  62.4k|        self.0.next()
  155|  62.4k|    }
_RINvYINtNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator10differenceB3_ECsbVNlHXpVYm3_7rle_ops:
   31|  1.69k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  1.69k|        Combine::new(self, other)
   33|  1.69k|    }
_RINvYINtNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator12intersectionB3_ECsbVNlHXpVYm3_7rle_ops:
   26|  2.26k|    fn intersection<R: RangeIterator>(self, other: R) -> Combine<Self, R, Intersection> {
   27|  2.26k|        Combine::new(self, other)
   28|  2.26k|    }
_RINvYINtNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator5unionB3_ECsbVNlHXpVYm3_7rle_ops:
   21|  1.98k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  1.98k|        Combine::new(self, other)
   23|  1.98k|    }
_RINvYINtNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|  28.3k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  28.3k|        Combine::new(self, other)
   33|  28.3k|    }
_RNvXs3_NtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   202k|    fn next(&mut self) -> Option<Self::Item> {
  154|   202k|        self.0.next()
  155|   202k|    }
_RINvNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEEB4_:
  163|  56.6k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  56.6k|    let mut iter = bits.into_iter().peekable();
  165|  56.6k|
  166|  56.6k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  56.6k|    }))
  180|  56.6k|}
_RINvYINtNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator3cutB3_EBa_:
   53|    283|    fn cut<R: RangeIterator>(self, other: R) -> Combine<Self, R, Cut> {
   54|    283|        Combine::new(self, other)
   55|    283|    }
_RINvMs2_NtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|  28.3k|    pub fn new<II>(iter: II) -> Self
  140|  28.3k|    where
  141|  28.3k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  28.3k|    {
  143|  28.3k|        Self(iter.into_iter())
  144|  28.3k|    }
_RNCINvNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  56.6k|    Ranges::new(iter::from_fn(move || {
  167|  56.6k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  56.6k|    }))
_RINvYINtNtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator20symmetric_differenceB3_EBa_:
   36|  3.67k|    fn symmetric_difference<R: RangeIterator>(
   37|  3.67k|        self,
   38|  3.67k|        other: R,
   39|  3.67k|    ) -> Combine<Self, R, SymmetricDifference> {
   40|  3.67k|        Combine::new(self, other)
   41|  3.67k|    }
_RINvYINtNtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  28.3k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  28.3k|        Combine::new(self, other)
   23|  28.3k|    }
_RNvXs3_NtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  56.6k|    fn next(&mut self) -> Option<Self::Item> {
  154|  56.6k|        self.0.next()
  155|  56.6k|    }
_RINvMs2_NtCs5jCt6HDvTDF_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  56.6k|    pub fn new<II>(iter: II) -> Self
  140|  56.6k|    where
  141|  56.6k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  56.6k|    {
  143|  56.6k|        Self(iter.into_iter())
  144|  56.6k|    }

_RINvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_12IntersectionEECsbVNlHXpVYm3_7rle_ops:
  135|  2.26k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  2.26k|        Self {
  137|  2.26k|            ranges: iter.collect(),
  138|  2.26k|            ..Default::default()
  139|  2.26k|        }
  140|  2.26k|    }
_RNvXsi_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCscpdcbW9XHDL_4core7default7Default7defaultCsbVNlHXpVYm3_7rle_ops:
   36|  5.94k|#[derive(Debug, Default, Clone)]
_RINvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6y_EECsbVNlHXpVYm3_7rle_ops:
  135|  1.69k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  1.69k|        Self {
  137|  1.69k|            ranges: iter.collect(),
  138|  1.69k|            ..Default::default()
  139|  1.69k|        }
  140|  1.69k|    }
_RNvXs9_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCscpdcbW9XHDL_4core3ops5arith3Sub3subCsbVNlHXpVYm3_7rle_ops:
  379|  1.69k|    fn sub(self, rhs: &BitField) -> Self::Output {
  380|  1.69k|        BitField::from_ranges(self.ranges().difference(rhs.ranges()))
  381|  1.69k|    }
_RNvXs5_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCscpdcbW9XHDL_4core3ops3bit5BitOr5bitorCsbVNlHXpVYm3_7rle_ops:
  347|  1.98k|    fn bitor(self, rhs: &BitField) -> Self::Output {
  348|  1.98k|        BitField::from_ranges(self.ranges().union(rhs.ranges()))
  349|  1.98k|    }
_RINvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6h_EECsbVNlHXpVYm3_7rle_ops:
  135|  1.98k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  1.98k|        Self {
  137|  1.98k|            ranges: iter.collect(),
  138|  1.98k|            ..Default::default()
  139|  1.98k|        }
  140|  1.98k|    }
_RNvXs7_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCscpdcbW9XHDL_4core3ops3bit6BitAnd6bitandCsbVNlHXpVYm3_7rle_ops:
  363|  2.26k|    fn bitand(self, rhs: &BitField) -> Self::Output {
  364|  2.26k|        BitField::from_ranges(self.ranges().intersection(rhs.ranges()))
  365|  2.26k|    }
_RINvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_3CutEEB6_:
  135|    283|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|    283|        Self {
  137|    283|            ranges: iter.collect(),
  138|    283|            ..Default::default()
  139|    283|        }
  140|    283|    }
_RINvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCscpdcbW9XHDL_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCscMnS7pKLK13_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_19SymmetricDifferenceEEB6_:
  135|  3.67k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  3.67k|        Self {
  137|  3.67k|            ranges: iter.collect(),
  138|  3.67k|            ..Default::default()
  139|  3.67k|        }
  140|  3.67k|    }
_RNvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  279|  28.3k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  280|  28.3k|        self.inner_ranges()
  281|  28.3k|            .union(ranges_from_bits(self.set.iter().copied()))
  282|  28.3k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  283|  28.3k|    }
_RNvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB5_8BitField3new:
  130|    566|    pub fn new() -> Self {
  131|    566|        Self::default()
  132|    566|    }
_RNvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB5_8BitField3cut:
  323|    283|    pub fn cut(&self, other: &Self) -> Self {
  324|    283|        Self::from_ranges(self.ranges().cut(other.ranges()))
  325|    283|    }
_RNvXs_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCscpdcbW9XHDL_4core3cmp9PartialEq2eq:
   47|  4.24k|    fn eq(&self, other: &Self) -> bool {
   48|  4.24k|        Iterator::eq(self.ranges(), other.ranges())
   49|  4.24k|    }
_RNvXsi_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCscpdcbW9XHDL_4core7default7Default7defaultB5_:
   36|  5.66k|#[derive(Debug, Default, Clone)]
_RNvXsb_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCscpdcbW9XHDL_4core3ops3bit6BitXor6bitxor:
  394|  3.67k|    fn bitxor(self, rhs: &BitField) -> Self::Output {
  395|  3.67k|        BitField::from_ranges(self.ranges().symmetric_difference(rhs.ranges()))
  396|  3.67k|    }
_RNvMs4_Cs5jCt6HDvTDF_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  273|  28.3k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  274|  28.3k|        iter::Ranges::new(self.ranges.iter().cloned())
  275|  28.3k|    }

_RNvXNtCs5jCt6HDvTDF_17fvm_ipld_bitfield5rangeINtNtNtCscpdcbW9XHDL_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  3.52k|    fn size(&self) -> Self::Idx {
   15|  3.52k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  3.52k|            self.end - self.start
   19|       |        }
   20|  3.52k|    }

_RNvXs0_NtCs5jCt6HDvTDF_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs9dKaaryarQ0_9arbitrary9Arbitrary9size_hint:
  155|    852|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  156|    852|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  157|    852|    }
_RNvXs0_NtCs5jCt6HDvTDF_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs9dKaaryarQ0_9arbitrary9Arbitrary9arbitrary:
  119|  1.13k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  120|  1.13k|        let mut next_value: bool = bool::arbitrary(u)?;
  121|  1.13k|        let mut ranges = Vec::new();
  122|  1.13k|        let mut index = 0u64;
  123|  1.13k|        let mut total_len: u64 = 0;
  124|       |
  125|  1.13k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  126|       |
  127|  1.13k|        for _ in 0..size {
  128|       |            // 3 line crappy "power-law" distribution
  129|  12.5k|            let len = u64::arbitrary(u)?;
  130|  12.5k|            let shift = u.int_in_range(0..=63)?;
  131|  12.5k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  132|  12.5k|
  133|  12.5k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  134|  12.5k|            if ovf {
  135|     59|                break;
  136|  12.4k|            }
  137|  12.4k|            total_len = new_total_len;
  138|  12.4k|            let start = index;
  139|  12.4k|            index += len;
  140|  12.4k|            let end = index;
  141|  12.4k|
  142|  12.4k|            if next_value {
  143|  6.36k|                ranges.push(start..end);
  144|  6.36k|            }
  145|       |
  146|  12.4k|            next_value = !next_value;
  147|       |        }
  148|       |
  149|  1.13k|        Ok(Self {
  150|  1.13k|            ranges,
  151|  1.13k|            ..Default::default()
  152|  1.13k|        })
  153|  1.13k|    }

