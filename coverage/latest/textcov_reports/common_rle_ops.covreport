_RNvYNtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldNtCs1AwR3pUWJf5_9arbitrary9Arbitrary19arbitrary_take_restCsd9h5hTIV0Wd_7rle_ops:
  182|    294|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    294|        Self::arbitrary(&mut u)
  184|    294|    }
_RINvCs1AwR3pUWJf5_9arbitrary12create_arrayNCNvXs8_B2_ANtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9size_hint0TjINtNtCs472D01UEnsx_4core6option6OptionjEEKB1y_ECsd9h5hTIV0Wd_7rle_ops:
  596|    295|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    295|where
  598|    295|    F: FnMut(usize) -> T,
  599|    295|{
  600|    295|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    295|    let array_ptr = array.as_mut_ptr();
  602|    295|    let dst = array_ptr as _;
  603|    295|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    295|        dst,
  605|    295|        initialized: 0,
  606|    295|    };
  607|       |    unsafe {
  608|    885|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|    885|            core::ptr::write(value_ptr, cb(idx));
  610|    885|            guard.initialized += 1;
  611|    885|        }
  612|    295|        mem::forget(guard);
  613|    295|        array.assume_init()
  614|    295|    }
  615|    295|}
_RNvXs8_Cs1AwR3pUWJf5_9arbitraryANtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9size_hintCsd9h5hTIV0Wd_7rle_ops:
  657|    295|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    295|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    295|        }))
  661|    295|    }
_RNCNvXs8_Cs1AwR3pUWJf5_9arbitraryANtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9size_hint0Csd9h5hTIV0Wd_7rle_ops:
  658|    885|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|    885|            <T as Arbitrary>::size_hint(d)
  660|    885|        }))
_RNCNvXs8_Cs1AwR3pUWJf5_9arbitraryANtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9arbitrary0Csd9h5hTIV0Wd_7rle_ops:
  644|    882|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvXs8_Cs1AwR3pUWJf5_9arbitraryANtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9arbitraryCsd9h5hTIV0Wd_7rle_ops:
  643|    294|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    294|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    294|    }
_RINvCs1AwR3pUWJf5_9arbitrary16try_create_arrayNCNvXs8_B2_ANtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9arbitrary0BU_KB1C_ECsd9h5hTIV0Wd_7rle_ops:
  617|    294|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    294|where
  619|    294|    F: FnMut(usize) -> Result<T>,
  620|    294|{
  621|    294|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    294|    let array_ptr = array.as_mut_ptr();
  623|    294|    let dst = array_ptr as _;
  624|    294|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    294|        dst,
  626|    294|        initialized: 0,
  627|    294|    };
  628|       |    unsafe {
  629|    882|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|    882|            core::ptr::write(value_ptr, cb(idx)?);
  631|    882|            guard.initialized += 1;
  632|       |        }
  633|    294|        mem::forget(guard);
  634|    294|        Ok(array.assume_init())
  635|       |    }
  636|    294|}
_RNvXs8_Cs1AwR3pUWJf5_9arbitraryANtCsf8uUQSMUSUi_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary19arbitrary_take_restCsd9h5hTIV0Wd_7rle_ops:
  648|    294|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  649|    294|        let mut array = Self::arbitrary(&mut u)?;
  650|    294|        if let Some(last) = array.last_mut() {
  651|    294|            *last = Arbitrary::arbitrary_take_rest(u)?;
  652|      0|        }
  653|    294|        Ok(array)
  654|    294|    }
_RNvXsF_Cs1AwR3pUWJf5_9arbitraryyNtB5_9Arbitrary9size_hintCsf8uUQSMUSUi_17fvm_ipld_bitfield:
  302|  1.17k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.17k|                    let n = mem::size_of::<$ty>();
  304|  1.17k|                    (n, Some(n))
  305|  1.17k|                }
_RNvXs1j_Cs1AwR3pUWJf5_9arbitraryTyhENtB6_9Arbitrary9size_hintCsf8uUQSMUSUi_17fvm_ipld_bitfield:
  568|  1.17k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  1.17k|                crate::size_hint::and_all(&[
  570|  1.17k|                    <$last as Arbitrary>::size_hint(depth),
  571|  1.17k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  1.17k|                ])
  573|  1.17k|            }
_RNvXsC_Cs1AwR3pUWJf5_9arbitraryhNtB5_9Arbitrary9size_hintCsf8uUQSMUSUi_17fvm_ipld_bitfield:
  302|  1.17k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.17k|                    let n = mem::size_of::<$ty>();
  304|  1.17k|                    (n, Some(n))
  305|  1.17k|                }
_RNvXsH_Cs1AwR3pUWJf5_9arbitraryjNtB5_9Arbitrary9size_hintCsf8uUQSMUSUi_17fvm_ipld_bitfield:
  302|    885|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    885|                    let n = mem::size_of::<$ty>();
  304|    885|                    (n, Some(n))
  305|    885|                }
_RNvXsC_Cs1AwR3pUWJf5_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  1.17k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  1.17k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  1.17k|                    u.fill_buffer(&mut buf)?;
  294|  1.17k|                    let mut x: $unsigned = 0;
  295|  1.17k|                    for i in 0..mem::size_of::<$ty>() {
  296|  1.17k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  1.17k|                    }
  298|  1.17k|                    Ok(x as $ty)
  299|  1.17k|                }
_RNvXs_Cs1AwR3pUWJf5_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  1.17k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  1.17k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  1.17k|    }
_RNvXsF_Cs1AwR3pUWJf5_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  13.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  13.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  13.4k|                    u.fill_buffer(&mut buf)?;
  294|  13.4k|                    let mut x: $unsigned = 0;
  295|   107k|                    for i in 0..mem::size_of::<$ty>() {
  296|   107k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   107k|                    }
  298|  13.4k|                    Ok(x as $ty)
  299|  13.4k|                }

_RNvNtCs1AwR3pUWJf5_9arbitrary9size_hint7and_allCsd9h5hTIV0Wd_7rle_ops:
   37|    295|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    295|    hints.iter().copied().fold((0, Some(0)), and)
   39|    295|}
_RNCNvNtCs1AwR3pUWJf5_9arbitrary9size_hint3and0Csd9h5hTIV0Wd_7rle_ops:
   28|    295|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs1AwR3pUWJf5_9arbitrary9size_hint3andCsd9h5hTIV0Wd_7rle_ops:
   26|    885|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|    885|    let lower = lhs.0 + rhs.0;
   28|    885|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|    885|    (lower, upper)
   30|    885|}
_RNCNCNvNtCs1AwR3pUWJf5_9arbitrary9size_hint3and00Csf8uUQSMUSUi_17fvm_ipld_bitfield:
   28|  2.35k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCs1AwR3pUWJf5_9arbitrary9size_hint3and0Csf8uUQSMUSUi_17fvm_ipld_bitfield:
   28|  3.23k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs1AwR3pUWJf5_9arbitrary9size_hint3andCsf8uUQSMUSUi_17fvm_ipld_bitfield:
   26|  3.23k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.23k|    let lower = lhs.0 + rhs.0;
   28|  3.23k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.23k|    (lower, upper)
   30|  3.23k|}
_RNvNtCs1AwR3pUWJf5_9arbitrary9size_hint7and_allCsf8uUQSMUSUi_17fvm_ipld_bitfield:
   37|  1.17k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.17k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.17k|}

_RINvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsf8uUQSMUSUi_17fvm_ipld_bitfield:
  213|  1.17k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  1.17k|    where
  215|  1.17k|        ElementType: Arbitrary<'a>,
  216|  1.17k|    {
  217|  1.17k|        let byte_size = self.arbitrary_byte_size()?;
  218|  1.17k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  1.17k|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|  1.17k|        let elem_size = std::cmp::max(1, elem_size);
  221|  1.17k|        Ok(byte_size / elem_size)
  222|  1.17k|    }
_RINvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsf8uUQSMUSUi_17fvm_ipld_bitfield:
  301|  13.4k|    fn int_in_range_impl<T>(
  302|  13.4k|        range: ops::RangeInclusive<T>,
  303|  13.4k|        mut bytes: impl Iterator<Item = u8>,
  304|  13.4k|    ) -> Result<(T, usize)>
  305|  13.4k|    where
  306|  13.4k|        T: Int,
  307|  13.4k|    {
  308|  13.4k|        let start = range.start();
  309|  13.4k|        let end = range.end();
  310|  13.4k|        assert!(
  311|  13.4k|            start <= end,
  312|  13.4k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  13.4k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  13.4k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  13.4k|        }
  320|  13.4k|
  321|  13.4k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  13.4k|        let mut result = T::Widest::ZERO;
  323|  13.4k|        let mut offset: usize = 0;
  324|       |
  325|  26.9k|        while offset < mem::size_of::<T>()
  326|  26.9k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  13.4k|        {
  328|  13.4k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  13.4k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  13.4k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  13.4k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  13.4k|            result = result % range;
  336|  13.4k|        }
  337|       |
  338|  13.4k|        Ok((
  339|  13.4k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  13.4k|            offset,
  341|  13.4k|        ))
  342|  13.4k|    }
_RINvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsf8uUQSMUSUi_17fvm_ipld_bitfield:
  292|  13.4k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  13.4k|    where
  294|  13.4k|        T: Int,
  295|  13.4k|    {
  296|  13.4k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  13.4k|        self.data = &self.data[bytes_consumed..];
  298|  13.4k|        Ok(result)
  299|  13.4k|    }
_RNvXs1_NtCs1AwR3pUWJf5_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    787|                fn from_widest(w: Self::Widest) -> Self {
  772|    787|                    let x = <$ty>::max_value().as_widest();
  773|    787|                    (w % x) as Self
  774|    787|                }
_RINvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs472D01UEnsx_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    211|    fn int_in_range_impl<T>(
  302|    211|        range: ops::RangeInclusive<T>,
  303|    211|        mut bytes: impl Iterator<Item = u8>,
  304|    211|    ) -> Result<(T, usize)>
  305|    211|    where
  306|    211|        T: Int,
  307|    211|    {
  308|    211|        let start = range.start();
  309|    211|        let end = range.end();
  310|    211|        assert!(
  311|    211|            start <= end,
  312|    211|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    211|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    211|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    211|        }
  320|    211|
  321|    211|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    211|        let mut result = T::Widest::ZERO;
  323|    211|        let mut offset: usize = 0;
  324|       |
  325|    631|        while offset < mem::size_of::<T>()
  326|    422|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    420|        {
  328|    420|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    420|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    420|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    211|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    211|            result = result % range;
  336|    211|        }
  337|       |
  338|    211|        Ok((
  339|    211|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    211|            offset,
  341|    211|        ))
  342|    211|    }
_RINvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs472D01UEnsx_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    787|    fn int_in_range_impl<T>(
  302|    787|        range: ops::RangeInclusive<T>,
  303|    787|        mut bytes: impl Iterator<Item = u8>,
  304|    787|    ) -> Result<(T, usize)>
  305|    787|    where
  306|    787|        T: Int,
  307|    787|    {
  308|    787|        let start = range.start();
  309|    787|        let end = range.end();
  310|    787|        assert!(
  311|    787|            start <= end,
  312|    787|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    787|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    787|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    787|        }
  320|    787|
  321|    787|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    787|        let mut result = T::Widest::ZERO;
  323|    787|        let mut offset: usize = 0;
  324|       |
  325|  1.57k|        while offset < mem::size_of::<T>()
  326|    787|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    787|        {
  328|    787|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    787|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    787|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    787|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    787|            result = result % range;
  336|    787|        }
  337|       |
  338|    787|        Ok((
  339|    787|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    787|            offset,
  341|    787|        ))
  342|    787|    }
_RNvXs5_NtCs1AwR3pUWJf5_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.20k|                fn from_u8(b: u8) -> Self {
  777|  1.20k|                    b as Self
  778|  1.20k|                }
_RNvXsb_NtCs1AwR3pUWJf5_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  13.4k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  13.4k|                    <$ty>::wrapping_add(self, rhs)
  790|  13.4k|                }
_RNvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  14.6k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  14.6k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  14.6k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  14.6k|        for byte in buffer[n..].iter_mut() {
  453|    111|            *byte = 0;
  454|    111|        }
  455|  14.6k|        self.data = &self.data[n..];
  456|  14.6k|        Ok(())
  457|  14.6k|    }
_RNvXs5_NtCs1AwR3pUWJf5_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  1.20k|                fn from_usize(u: usize) -> Self {
  781|  1.20k|                    u as Self
  782|  1.20k|                }
_RNvXs1_NtCs1AwR3pUWJf5_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  3.14k|                fn as_widest(self) -> Self::Widest {
  768|  3.14k|                    self as $widest
  769|  3.14k|                }
_RNvXs9_NtCs1AwR3pUWJf5_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  53.8k|                fn as_widest(self) -> Self::Widest {
  768|  53.8k|                    self as $widest
  769|  53.8k|                }
_RNvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    294|    pub fn new(data: &'a [u8]) -> Self {
   86|    294|        Unstructured { data }
   87|    294|    }
_RNvXs5_NtCs1AwR3pUWJf5_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|    998|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|    998|                    <$ty>::checked_add(self, rhs)
  786|    998|                }
_RNvXs2_NtCs1AwR3pUWJf5_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|    211|                fn from_widest(w: Self::Widest) -> Self {
  772|    211|                    let x = <$ty>::max_value().as_widest();
  773|    211|                    (w % x) as Self
  774|    211|                }
_RNvXs2_NtCs1AwR3pUWJf5_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    844|                fn as_widest(self) -> Self::Widest {
  768|    844|                    self as $widest
  769|    844|                }
_RNvXsb_NtCs1AwR3pUWJf5_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  13.4k|                fn from_u8(b: u8) -> Self {
  777|  13.4k|                    b as Self
  778|  13.4k|                }
_RNvXs5_NtCs1AwR3pUWJf5_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|    998|                fn wrapping_add(self, rhs: Self) -> Self {
  789|    998|                    <$ty>::wrapping_add(self, rhs)
  790|    998|                }
_RNvXs9_NtCs1AwR3pUWJf5_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  13.4k|                fn from_widest(w: Self::Widest) -> Self {
  772|  13.4k|                    let x = <$ty>::max_value().as_widest();
  773|  13.4k|                    (w % x) as Self
  774|  13.4k|                }
_RNvXsb_NtCs1AwR3pUWJf5_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  13.4k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  13.4k|                    <$ty>::checked_add(self, rhs)
  786|  13.4k|                }
_RNvXsb_NtCs1AwR3pUWJf5_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  26.9k|                fn from_usize(u: usize) -> Self {
  781|  26.9k|                    u as Self
  782|  26.9k|                }
_RNvMNtCs1AwR3pUWJf5_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  1.17k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  1.17k|        if self.data.is_empty() {
  226|    144|            Ok(0)
  227|  1.03k|        } else if self.data.len() == 1 {
  228|     34|            self.data = &[];
  229|     34|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    998|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    787|                let bytes = 1;
  241|    787|                let max_size = self.data.len() - bytes;
  242|    787|                let (rest, for_size) = self.data.split_at(max_size);
  243|    787|                self.data = rest;
  244|    787|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|    211|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|    211|                let bytes = 2;
  247|    211|                let max_size = self.data.len() - bytes;
  248|    211|                let (rest, for_size) = self.data.split_at(max_size);
  249|    211|                self.data = rest;
  250|    211|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    998|            Ok(len)
  266|       |        }
  267|  1.17k|    }

rust_fuzzer_test_input:
  167|    295|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    295|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    295|
  170|    295|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    295|            // implementation. This helps the fuzzer avoid exploring all the
  172|    295|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    295|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    295|            // get to longer inputs that actually lead to interesting executions
  175|    295|            // quicker.
  176|    295|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    294|            }
  179|    294|
  180|    294|            let mut u = Unstructured::new(bytes);
  181|    294|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    294|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    294|            }
  199|       |
  200|    294|            let $data = match data {
  201|    294|                Ok(d) => d,
  202|      0|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    295|        }
LLVMFuzzerTestOneInput:
   27|    295|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    295|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    295|    });
   32|    295|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    295|    }
   37|    295|    0
   38|    295|}
_RNCNvCs97NgvzQEang_13libfuzzer_sys15test_input_wrap0B3_:
   28|    295|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    295|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    295|        rust_fuzzer_test_input(data_slice);
   31|    295|    });
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvMs2_NtCs8yMMl6aNXJa_9once_cell3impINtB5_8OnceCellNtNtCs96C4YhxZz6N_5alloc6string6StringE14is_initializedCsd9h5hTIV0Wd_7rle_ops:
   74|    294|    pub(crate) fn is_initialized(&self) -> bool {
   75|    294|        // An `Acquire` load is enough because that makes all the initialization
   76|    294|        // operations visible to us, and, this being a fast path, weaker
   77|    294|        // ordering helps with performance. This `Acquire` synchronizes with
   78|    294|        // `SeqCst` operations on the slow path.
   79|    294|        self.state_and_queue.load(Ordering::Acquire) == COMPLETE
   80|    294|    }

_RNvMs4_NtCs8yMMl6aNXJa_9once_cell4syncINtB5_8OnceCellNtNtCs96C4YhxZz6N_5alloc6string6StringE3getCsd9h5hTIV0Wd_7rle_ops:
  850|    294|        pub fn get(&self) -> Option<&T> {
  851|    294|            if self.0.is_initialized() {
  852|       |                // Safe b/c value is initialized.
  853|      0|                Some(unsafe { self.get_unchecked() })
  854|       |            } else {
  855|    294|                None
  856|       |            }
  857|    294|        }

_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|  9.68k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  9.68k|        self.next.as_mut()
  475|  9.68k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE10next_rangeCsd9h5hTIV0Wd_7rle_ops:
  353|  20.5k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  20.5k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  18.2k|            (Some(lhs), Some(rhs)) => {
  356|  18.2k|                // if both iterators are non-empty, we advance the one whichever's
  357|  18.2k|                // corresponding range has a smaller upper bound
  358|  18.2k|                if lhs.end <= rhs.end {
  359|  9.82k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  8.41k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  1.13k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  1.04k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    168|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  20.4k|        if advance_lhs {
  370|  10.9k|            self.lhs.next();
  371|  10.9k|        } else {
  372|  9.46k|            self.rhs.next();
  373|  9.46k|        }
  374|       |
  375|  20.4k|        range
  376|  20.5k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Csd9h5hTIV0Wd_7rle_ops:
  390|  85.8k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|  72.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  72.2k|        self.next.as_mut()
  475|  72.2k|    }
_RNvXsf_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs472D01UEnsx_4core7default7Default7defaultCsd9h5hTIV0Wd_7rle_ops:
   86|  2.05k|#[derive(Default)]
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4next0Csd9h5hTIV0Wd_7rle_ops:
  390|  20.5k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_ENtNtNtB1M_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  387|  25.1k|    fn next(&mut self) -> Option<Self::Item> {
  388|  25.1k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  25.1k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  25.1k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  25.1k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E10next_rangeCsd9h5hTIV0Wd_7rle_ops:
  353|  32.5k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  32.5k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  14.9k|            (Some(lhs), Some(rhs)) => {
  356|  14.9k|                // if both iterators are non-empty, we advance the one whichever's
  357|  14.9k|                // corresponding range has a smaller upper bound
  358|  14.9k|                if lhs.end <= rhs.end {
  359|  8.14k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  6.78k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  15.8k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    433|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  1.33k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  31.2k|        if advance_lhs {
  370|  24.0k|            self.lhs.next();
  371|  24.0k|        } else {
  372|  7.21k|            self.rhs.next();
  373|  7.21k|        }
  374|       |
  375|  31.2k|        range
  376|  32.5k|    }
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionENtNtNtB1z_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  310|  12.0k|    fn next(&mut self) -> Option<Self::Item> {
  311|  12.0k|        self.0.next()
  312|  12.0k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4nexts_0Csd9h5hTIV0Wd_7rle_ops:
  390|  18.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE3newCsd9h5hTIV0Wd_7rle_ops:
  468|  1.76k|    fn new(mut iter: I) -> Self {
  469|  1.76k|        let next = iter.next();
  470|  1.76k|        Self { iter, next }
  471|  1.76k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  77.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  77.7k|        let next = self.next.take()?;
  484|  72.2k|        self.next = self.iter.next();
  485|  72.2k|        Some(next)
  486|  77.7k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeCsd9h5hTIV0Wd_7rle_ops:
  353|  72.2k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  72.2k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  67.7k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  4.44k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  67.7k|        if advance_lhs {
  370|  67.7k|            self.lhs.next();
  371|  67.7k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  67.7k|        range
  376|  72.2k|    }
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionENtNtNtB1M_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  387|  12.0k|    fn next(&mut self) -> Option<Self::Item> {
  388|  12.0k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  12.0k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  12.0k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  12.0k|    }
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  438|  26.4k|    fn next(&mut self) -> Option<Self::Item> {
  439|  26.4k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  32.6k|        while let Some(next) = self.iter.peek() {
  444|  30.7k|            if next.start > range.end {
  445|  22.4k|                break;
  446|  8.24k|            }
  447|  8.24k|
  448|  8.24k|            range.end = cmp::max(range.end, next.end);
  449|  8.24k|            self.iter.next();
  450|       |        }
  451|       |
  452|  24.3k|        Some(range)
  453|  26.4k|    }
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_ENtNtNtB1z_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  310|  25.1k|    fn next(&mut self) -> Option<Self::Item> {
  311|  25.1k|        self.0.next()
  312|  25.1k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4next0Csd9h5hTIV0Wd_7rle_ops:
  390|  34.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs5_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_E3newCsd9h5hTIV0Wd_7rle_ops:
  297|  2.05k|    pub fn new(a: A, b: B) -> Self {
  298|  2.05k|        Self(Merge::new(_Combine::new(a, b)))
  299|  2.05k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|   175k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   175k|        self.next.as_mut()
  475|   175k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE3newCsd9h5hTIV0Wd_7rle_ops:
  468|  2.35k|    fn new(mut iter: I) -> Self {
  469|  2.35k|        let next = iter.next();
  470|  2.35k|        Self { iter, next }
  471|  2.35k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|  72.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  72.2k|        self.next.as_mut()
  475|  72.2k|    }
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  438|  96.6k|    fn next(&mut self) -> Option<Self::Item> {
  439|  96.6k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  85.8k|        while let Some(next) = self.iter.peek() {
  444|  77.7k|            if next.start > range.end {
  445|  77.7k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  85.8k|        Some(range)
  453|  96.6k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EENtNtNtB22_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  25.1k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  25.1k|        let next = self.next.take()?;
  484|  23.4k|        self.next = self.iter.next();
  485|  23.4k|        Some(next)
  486|  25.1k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E3newCsd9h5hTIV0Wd_7rle_ops:
  342|  2.05k|    fn new(lhs: A, rhs: B) -> Self {
  343|  2.05k|        Self {
  344|  2.05k|            lhs: Lookahead::new(lhs),
  345|  2.05k|            rhs: Lookahead::new(rhs),
  346|  2.05k|            combinator: Default::default(),
  347|  2.05k|        }
  348|  2.05k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EEE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|   158k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   158k|        self.next.as_mut()
  475|   158k|    }
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEENtNtNtB1Y_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  438|  12.0k|    fn next(&mut self) -> Option<Self::Item> {
  439|  12.0k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  9.68k|        while let Some(next) = self.iter.peek() {
  444|  8.51k|            if next.start > range.end {
  445|  8.51k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  9.68k|        Some(range)
  453|  12.0k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Csd9h5hTIV0Wd_7rle_ops:
  390|  32.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  310|  96.6k|    fn next(&mut self) -> Option<Self::Item> {
  311|  96.6k|        self.0.next()
  312|  96.6k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Csd9h5hTIV0Wd_7rle_ops:
  390|  72.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  387|  72.2k|    fn next(&mut self) -> Option<Self::Item> {
  388|  72.2k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  72.2k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  72.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  72.2k|    }
_RNvMsa_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EE3newCsd9h5hTIV0Wd_7rle_ops:
  425|  1.76k|    pub fn new(iter: I) -> Self {
  426|  1.76k|        Self {
  427|  1.76k|            iter: Lookahead::new(iter),
  428|  1.76k|        }
  429|  1.76k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEENtNtNtB22_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  12.0k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  12.0k|        let next = self.next.take()?;
  484|  9.68k|        self.next = self.iter.next();
  485|  9.68k|        Some(next)
  486|  12.0k|    }
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  387|  85.8k|    fn next(&mut self) -> Option<Self::Item> {
  388|  85.8k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  85.8k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  85.8k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  85.8k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Csd9h5hTIV0Wd_7rle_ops:
  390|  77.7k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Csd9h5hTIV0Wd_7rle_ops:
  390|  67.7k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  438|  25.1k|    fn next(&mut self) -> Option<Self::Item> {
  439|  25.1k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  23.4k|        while let Some(next) = self.iter.peek() {
  444|  21.9k|            if next.start > range.end {
  445|  21.9k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  23.4k|        Some(range)
  453|  25.1k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  77.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  77.7k|        let next = self.next.take()?;
  484|  77.7k|        self.next = self.iter.next();
  485|  77.7k|        Some(next)
  486|  77.7k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  96.6k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  96.6k|        let next = self.next.take()?;
  484|  85.8k|        self.next = self.iter.next();
  485|  85.8k|        Some(next)
  486|  96.6k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EENtNtNtB22_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  34.6k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  34.6k|        let next = self.next.take()?;
  484|  32.6k|        self.next = self.iter.next();
  485|  32.6k|        Some(next)
  486|  34.6k|    }
_RNvMsa_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEE3newCsd9h5hTIV0Wd_7rle_ops:
  425|  2.35k|    pub fn new(iter: I) -> Self {
  426|  2.35k|        Self {
  427|  2.35k|            iter: Lookahead::new(iter),
  428|  2.35k|        }
  429|  2.35k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|  32.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  32.6k|        self.next.as_mut()
  475|  32.6k|    }
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_ENtNtNtB1M_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  387|  34.6k|    fn next(&mut self) -> Option<Self::Item> {
  388|  34.6k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  34.6k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  34.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  34.6k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newCsd9h5hTIV0Wd_7rle_ops:
  468|  12.3k|    fn new(mut iter: I) -> Self {
  469|  12.3k|        let next = iter.next();
  470|  12.3k|        Self { iter, next }
  471|  12.3k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E10next_rangeCsd9h5hTIV0Wd_7rle_ops:
  353|  34.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  34.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  14.6k|            (Some(lhs), Some(rhs)) => {
  356|  14.6k|                // if both iterators are non-empty, we advance the one whichever's
  357|  14.6k|                // corresponding range has a smaller upper bound
  358|  14.6k|                if lhs.end <= rhs.end {
  359|  7.67k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  6.93k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  9.65k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  8.35k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  2.05k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  32.6k|        if advance_lhs {
  370|  17.3k|            self.lhs.next();
  371|  17.3k|        } else {
  372|  15.2k|            self.rhs.next();
  373|  15.2k|        }
  374|       |
  375|  32.6k|        range
  376|  34.6k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4next0Csd9h5hTIV0Wd_7rle_ops:
  390|  32.5k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  438|  77.7k|    fn next(&mut self) -> Option<Self::Item> {
  439|  77.7k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  72.2k|        while let Some(next) = self.iter.peek() {
  444|  67.7k|            if next.start > range.end {
  445|  67.7k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  72.2k|        Some(range)
  453|  77.7k|    }
_RNvMsa_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EE3newCsd9h5hTIV0Wd_7rle_ops:
  425|  2.05k|    pub fn new(iter: I) -> Self {
  426|  2.05k|        Self {
  427|  2.05k|            iter: Lookahead::new(iter),
  428|  2.05k|        }
  429|  2.05k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE3newCsd9h5hTIV0Wd_7rle_ops:
  342|  2.35k|    fn new(lhs: A, rhs: B) -> Self {
  343|  2.35k|        Self {
  344|  2.35k|            lhs: Lookahead::new(lhs),
  345|  2.35k|            rhs: Lookahead::new(rhs),
  346|  2.35k|            combinator: Default::default(),
  347|  2.35k|        }
  348|  2.35k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Csd9h5hTIV0Wd_7rle_ops:
  390|  30.7k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_ENtNtNtB1z_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  310|  26.4k|    fn next(&mut self) -> Option<Self::Item> {
  311|  26.4k|        self.0.next()
  312|  26.4k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeCsd9h5hTIV0Wd_7rle_ops:
  353|  85.8k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  85.8k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  77.7k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  8.07k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  77.7k|        if advance_lhs {
  370|  77.7k|            self.lhs.next();
  371|  77.7k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  77.7k|        range
  376|  85.8k|    }
_RNvMs5_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_E3newCsd9h5hTIV0Wd_7rle_ops:
  297|  1.76k|    pub fn new(a: A, b: B) -> Self {
  298|  1.76k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.76k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E3newCsd9h5hTIV0Wd_7rle_ops:
  342|  1.76k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.76k|        Self {
  344|  1.76k|            lhs: Lookahead::new(lhs),
  345|  1.76k|            rhs: Lookahead::new(rhs),
  346|  1.76k|            combinator: Default::default(),
  347|  1.76k|        }
  348|  1.76k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|  23.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  23.4k|        self.next.as_mut()
  475|  23.4k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  84.2k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  84.2k|        let next = self.next.take()?;
  484|  84.2k|        self.next = self.iter.next();
  485|  84.2k|        Some(next)
  486|  84.2k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  481|  67.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  67.7k|        let next = self.next.take()?;
  484|  67.7k|        self.next = self.iter.next();
  485|  67.7k|        Some(next)
  486|  67.7k|    }
_RNvXsg_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_12IntersectionNtNtCs472D01UEnsx_4core7default7Default7defaultCsd9h5hTIV0Wd_7rle_ops:
  122|  2.35k|#[derive(Default)]
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|  85.8k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  85.8k|        self.next.as_mut()
  475|  85.8k|    }
_RNvMs5_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionE3newCsd9h5hTIV0Wd_7rle_ops:
  297|  2.35k|    pub fn new(a: A, b: B) -> Self {
  298|  2.35k|        Self(Merge::new(_Combine::new(a, b)))
  299|  2.35k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekCsd9h5hTIV0Wd_7rle_ops:
  473|  85.8k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  85.8k|        self.next.as_mut()
  475|  85.8k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE3newCsd9h5hTIV0Wd_7rle_ops:
  468|  2.05k|    fn new(mut iter: I) -> Self {
  469|  2.05k|        let next = iter.next();
  470|  2.05k|        Self { iter, next }
  471|  2.05k|    }
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  310|  77.7k|    fn next(&mut self) -> Option<Self::Item> {
  311|  77.7k|        self.0.next()
  312|  77.7k|    }
_RNvXsh_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs472D01UEnsx_4core7default7Default7defaultCsd9h5hTIV0Wd_7rle_ops:
  151|  1.76k|#[derive(Default)]
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|   183k|    fn next(&mut self) -> Option<Self::Item> {
  439|   183k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   166k|        while let Some(next) = self.iter.peek() {
  444|   154k|            if next.start > range.end {
  445|   154k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   166k|        Some(range)
  453|   183k|    }
_RNvXs0_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|    433|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|    433|        // the difference between an empty range and a range is an empty range
  188|    433|        None
  189|    433|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  70.1k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|   211k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   211k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   187k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  24.0k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   187k|        if advance_lhs {
  370|   187k|            self.lhs.next();
  371|   187k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   187k|        range
  376|   211k|    }
_RNvMsa_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|  29.4k|    pub fn new(iter: I) -> Self {
  426|  29.4k|        Self {
  427|  29.4k|            iter: Lookahead::new(iter),
  428|  29.4k|        }
  429|  29.4k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newB9_:
  468|  8.23k|    fn new(mut iter: I) -> Self {
  469|  8.23k|        let next = iter.next();
  470|  8.23k|        Self { iter, next }
  471|  8.23k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  481|  78.3k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  78.3k|        let next = self.next.take()?;
  484|  78.3k|        self.next = self.iter.next();
  485|  78.3k|        Some(next)
  486|  78.3k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEE3newB9_:
  468|    294|    fn new(mut iter: I) -> Self {
  469|    294|        let next = iter.next();
  470|    294|        Self { iter, next }
  471|    294|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  8.26k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs5_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutE3newB9_:
  297|    294|    pub fn new(a: A, b: B) -> Self {
  298|    294|        Self(Merge::new(_Combine::new(a, b)))
  299|    294|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|  29.4k|    fn new(mut iter: I) -> Self {
  469|  29.4k|        let next = iter.next();
  470|  29.4k|        Self { iter, next }
  471|  29.4k|    }
_RNvXNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|   264k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|   264k|        // the union of a range and an empty range is just that range
  111|   264k|        Some(lhs)
  112|   264k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  29.4k|    fn new(lhs: A, rhs: B) -> Self {
  343|  29.4k|        Self {
  344|  29.4k|            lhs: Lookahead::new(lhs),
  345|  29.4k|            rhs: Lookahead::new(rhs),
  346|  29.4k|            combinator: Default::default(),
  347|  29.4k|        }
  348|  29.4k|    }
_RNvXs0_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|  8.14k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|  8.14k|        // lhs:     xx----      xxxx--      --xx--
  157|  8.14k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|  8.14k|        // output:  xx----      xx----      ------
  159|  8.14k|
  160|  8.14k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|  8.14k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|   183k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   183k|        let next = self.next.take()?;
  484|   166k|        self.next = self.iter.next();
  485|   166k|        Some(next)
  486|   183k|    }
_RNvXsf_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs472D01UEnsx_4core7default7Default7defaultB9_:
   86|  29.4k|#[derive(Default)]
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  73.9k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs4_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_rhs:
  267|  3.85k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  268|  3.85k|        let cut = self.offset(lhs.start..cmp::min(lhs.end, rhs.start));
  269|  3.85k|        lhs.start = cmp::max(lhs.start, rhs.end);
  270|  3.85k|        self.offset += rhs.size();
  271|  3.85k|        cut
  272|  3.85k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|   187k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  58.8k|    fn new(mut iter: I) -> Self {
  469|  58.8k|        let next = iter.next();
  470|  58.8k|        Self { iter, next }
  471|  58.8k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  29.4k|    fn new(mut iter: I) -> Self {
  469|  29.4k|        let next = iter.next();
  470|  29.4k|        Self { iter, next }
  471|  29.4k|    }
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|   205k|    fn next(&mut self) -> Option<Self::Item> {
  439|   205k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   182k|        while let Some(next) = self.iter.peek() {
  444|   165k|            if next.start > range.end {
  445|   165k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   182k|        Some(range)
  453|   205k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|   175k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   175k|        let next = self.next.take()?;
  484|   175k|        self.next = self.iter.next();
  485|   175k|        Some(next)
  486|   175k|    }
_RNvXs4_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_lhs:
  262|  4.12k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  263|  4.12k|        // apart from the offset, these implementations are identical to those of the `Difference` combinator
  264|  4.12k|        self.offset(lhs.start..cmp::min(lhs.end, rhs.start))
  265|  4.12k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|   195k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|   205k|    fn next(&mut self) -> Option<Self::Item> {
  311|   205k|        self.0.next()
  312|   205k|    }
_RNvXNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|  8.35k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|  8.35k|        Some(rhs)
  116|  8.35k|    }
_RNvXs4_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator16advance_rhs_tail:
  278|    271|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  279|    271|        None
  280|    271|    }
_RNvXs2_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_rhs:
  229|  16.1k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  230|  16.1k|        Self::advance(rhs, lhs)
  231|  16.1k|    }
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|    294|    fn next(&mut self) -> Option<Self::Item> {
  439|    294|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|      0|        while let Some(next) = self.iter.peek() {
  444|      0|            if next.start > range.end {
  445|      0|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|      0|        Some(range)
  453|    294|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE10next_rangeB9_:
  353|  73.9k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  73.9k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  35.9k|            (Some(lhs), Some(rhs)) => {
  356|  35.9k|                // if both iterators are non-empty, we advance the one whichever's
  357|  35.9k|                // corresponding range has a smaller upper bound
  358|  35.9k|                if lhs.end <= rhs.end {
  359|  19.7k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  16.1k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  24.1k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  9.99k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  3.82k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  70.1k|        if advance_lhs {
  370|  43.9k|            self.lhs.next();
  371|  43.9k|        } else {
  372|  26.1k|            self.rhs.next();
  373|  26.1k|        }
  374|       |
  375|  70.1k|        range
  376|  73.9k|    }
_RNvMsa_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEE3newB9_:
  425|    294|    pub fn new(iter: I) -> Self {
  426|    294|        Self {
  427|    294|            iter: Lookahead::new(iter),
  428|    294|        }
  429|    294|    }
_RNvXs_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_rhs:
  134|  8.41k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  135|  8.41k|        cmp::max(lhs.start, rhs.start)..rhs.end
  136|  8.41k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|   187k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   187k|        let next = self.next.take()?;
  484|   187k|        self.next = self.iter.next();
  485|   187k|        Some(next)
  486|   187k|    }
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|   211k|    fn next(&mut self) -> Option<Self::Item> {
  388|   211k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   211k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   211k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   211k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|   205k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   205k|        let next = self.next.take()?;
  484|   182k|        self.next = self.iter.next();
  485|   182k|        Some(next)
  486|   205k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|   166k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   166k|        self.next.as_mut()
  475|   166k|    }
_RNvXsh_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs472D01UEnsx_4core7default7Default7defaultB9_:
  151|  29.4k|#[derive(Default)]
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE4peekB9_:
  473|  56.8k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  56.8k|        self.next.as_mut()
  475|  56.8k|    }
_RNvXs2_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_lhs:
  225|  19.7k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  226|  19.7k|        Self::advance(lhs, rhs)
  227|  19.7k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE10next_rangeB9_:
  353|  8.26k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  8.26k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  7.97k|            (Some(lhs), Some(rhs)) => {
  356|  7.97k|                // if both iterators are non-empty, we advance the one whichever's
  357|  7.97k|                // corresponding range has a smaller upper bound
  358|  7.97k|                if lhs.end <= rhs.end {
  359|  4.12k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  3.85k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|      0|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    271|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|     23|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  8.24k|        if advance_lhs {
  370|  4.12k|            self.lhs.next();
  371|  4.12k|        } else {
  372|  4.12k|            self.rhs.next();
  373|  4.12k|        }
  374|       |
  375|  8.24k|        range
  376|  8.26k|    }
_RNvMsa_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEE3newB9_:
  425|  3.82k|    pub fn new(iter: I) -> Self {
  426|  3.82k|        Self {
  427|  3.82k|            iter: Lookahead::new(iter),
  428|  3.82k|        }
  429|  3.82k|    }
_RNvXsi_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtNtCs472D01UEnsx_4core7default7Default7defaultB9_:
  195|  3.82k|#[derive(Default)]
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE3newB9_:
  468|  3.82k|    fn new(mut iter: I) -> Self {
  469|  3.82k|        let next = iter.next();
  470|  3.82k|        Self { iter, next }
  471|  3.82k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|   175k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs5_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceE3newB9_:
  297|  3.82k|    pub fn new(a: A, b: B) -> Self {
  298|  3.82k|        Self(Merge::new(_Combine::new(a, b)))
  299|  3.82k|    }
_RNvXs2_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_lhs_tail:
  233|  24.1k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  234|  24.1k|        // the symmetric difference of a range and an empty range is just that range
  235|  24.1k|        Some(lhs)
  236|  24.1k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  7.97k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|   183k|    fn next(&mut self) -> Option<Self::Item> {
  311|   183k|        self.0.next()
  312|   183k|    }
_RNvXsb_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|  59.8k|    fn next(&mut self) -> Option<Self::Item> {
  439|  59.8k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  56.8k|        while let Some(next) = self.iter.peek() {
  444|  53.6k|            if next.start > range.end {
  445|  52.8k|                break;
  446|    829|            }
  447|    829|
  448|    829|            range.end = cmp::max(range.end, next.end);
  449|    829|            self.iter.next();
  450|       |        }
  451|       |
  452|  56.0k|        Some(range)
  453|  59.8k|    }
_RNvXs_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_lhs_tail:
  138|  1.13k|    fn advance_lhs_tail(&mut self, _lhs: Range<u64>) -> Option<Range<u64>> {
  139|  1.13k|        // the intersection of a range and an empty range is an empty range
  140|  1.13k|        None
  141|  1.13k|    }
_RNvMs5_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|  29.4k|    pub fn new(a: A, b: B) -> Self {
  298|  29.4k|        Self(Merge::new(_Combine::new(a, b)))
  299|  29.4k|    }
_RNvMs1_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifference7advance:
  201|  35.9k|    fn advance(left: Range<u64>, right: &mut Range<u64>) -> Range<u64> {
  202|  35.9k|        if left.start <= right.start {
  203|       |            // left:       xxxx--      xx----
  204|       |            // right:      --xxxx  or  ----xx
  205|       |            // output:     xx----      xx----
  206|       |            // new right:  ----xx      ----xx
  207|       |
  208|  25.3k|            let difference = left.start..cmp::min(left.end, right.start);
  209|  25.3k|            right.start = cmp::max(right.start, left.end);
  210|  25.3k|            difference
  211|       |        } else {
  212|       |            // left:       --xx--
  213|       |            // right:      xxxxxx
  214|       |            // output:     xx----
  215|       |            // new right:  ----xx
  216|       |
  217|  10.5k|            let difference = right.start..left.start;
  218|  10.5k|            right.start = left.end;
  219|  10.5k|            difference
  220|       |        }
  221|  35.9k|    }
_RNvMs5_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  29.4k|    pub fn new(a: A, b: B) -> Self {
  298|  29.4k|        Self(Merge::new(_Combine::new(a, b)))
  299|  29.4k|    }
_RNvMs3_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_3Cut6offset:
  256|  7.97k|    fn offset(&self, range: Range<u64>) -> Range<u64> {
  257|  7.97k|        (range.start - self.offset)..(range.end - self.offset)
  258|  7.97k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   195k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   195k|        self.next.as_mut()
  475|   195k|    }
_RNvXNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|  6.93k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|  6.93k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|  6.93k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  29.4k|    fn new(mut iter: I) -> Self {
  469|  29.4k|        let next = iter.next();
  470|  29.4k|        Self { iter, next }
  471|  29.4k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|  29.4k|    fn new(mut iter: I) -> Self {
  469|  29.4k|        let next = iter.next();
  470|  29.4k|        Self { iter, next }
  471|  29.4k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE3newB9_:
  342|    294|    fn new(lhs: A, rhs: B) -> Self {
  343|    294|        Self {
  344|    294|            lhs: Lookahead::new(lhs),
  345|    294|            rhs: Lookahead::new(rhs),
  346|    294|            combinator: Default::default(),
  347|    294|        }
  348|    294|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|   195k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   195k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   175k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  20.1k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   175k|        if advance_lhs {
  370|   175k|            self.lhs.next();
  371|   175k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   175k|        range
  376|   195k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|   407k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   407k|        self.next.as_mut()
  475|   407k|    }
_RNvXs_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_lhs:
  126|  9.82k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  127|  9.82k|        // lhs:     xx----      xxxx--      --xx--
  128|  9.82k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  129|  9.82k|        // output:  ------      --xx--      --xx--
  130|  9.82k|
  131|  9.82k|        cmp::max(lhs.start, rhs.start)..lhs.end
  132|  9.82k|    }
_RNvXs0_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|   269k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|   269k|        // the difference between a range and an empty range is just that range
  183|   269k|        Some(lhs)
  184|   269k|    }
_RNvXsj_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtNtCs472D01UEnsx_4core7default7Default7defaultB9_:
  247|    294|#[derive(Default)]
_RNvXNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  7.67k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  7.67k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  7.67k|        // to ensure that the lower bounds are monotonically increasing
   93|  7.67k|        //
   94|  7.67k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  7.67k|        // `xxxx--` and then `xxxxxx`, not
   96|  7.67k|        // `--xx--` and then `xxxxxx`
   97|  7.67k|        //
   98|  7.67k|        // lhs:     xx----      xxxx--      --xx--
   99|  7.67k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  7.67k|        // output:  xx----      xxxx--      xxxx--
  101|  7.67k|
  102|  7.67k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  7.67k|    }
_RNCNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|   211k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE3newB9_:
  342|  3.82k|    fn new(lhs: A, rhs: B) -> Self {
  343|  3.82k|        Self {
  344|  3.82k|            lhs: Lookahead::new(lhs),
  345|  3.82k|            rhs: Lookahead::new(rhs),
  346|  3.82k|            combinator: Default::default(),
  347|  3.82k|        }
  348|  3.82k|    }
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|   195k|    fn next(&mut self) -> Option<Self::Item> {
  388|   195k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   195k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   195k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   195k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|    294|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|    294|        let next = self.next.take()?;
  484|      0|        self.next = self.iter.next();
  485|      0|        Some(next)
  486|    294|    }
_RNvXs_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_rhs_tail:
  143|  1.04k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  144|  1.04k|        None
  145|  1.04k|    }
_RNvXs2_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_rhs_tail:
  238|  9.99k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  239|  9.99k|        Some(rhs)
  240|  9.99k|    }
_RNvMs8_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|  29.4k|    fn new(lhs: A, rhs: B) -> Self {
  343|  29.4k|        Self {
  344|  29.4k|            lhs: Lookahead::new(lhs),
  345|  29.4k|            rhs: Lookahead::new(rhs),
  346|  29.4k|            combinator: Default::default(),
  347|  29.4k|        }
  348|  29.4k|    }
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|    294|    fn next(&mut self) -> Option<Self::Item> {
  311|    294|        self.0.next()
  312|    294|    }
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|  60.7k|    fn next(&mut self) -> Option<Self::Item> {
  388|  60.7k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  60.7k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  60.7k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  60.7k|    }
_RNvMsa_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|  29.4k|    pub fn new(iter: I) -> Self {
  426|  29.4k|        Self {
  427|  29.4k|            iter: Lookahead::new(iter),
  428|  29.4k|        }
  429|  29.4k|    }
_RNvXs0_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|  6.78k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|  6.78k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|  6.78k|        // to avoid it from returning invalid bits in the next iteration
  166|  6.78k|        //
  167|  6.78k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|  6.78k|        // `------` and then `----xx`, not
  169|  6.78k|        // `------` and then `--xxxx`
  170|  6.78k|        //
  171|  6.78k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|  6.78k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|  6.78k|        // output:   ------      ------      xx----
  174|  6.78k|        // new lhs:  ----xx      ----xx      ----xx
  175|  6.78k|
  176|  6.78k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|  6.78k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|  6.78k|        difference
  179|  6.78k|    }
_RNvXse_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|  60.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  60.7k|        let next = self.next.take()?;
  484|  56.8k|        self.next = self.iter.next();
  485|  56.8k|        Some(next)
  486|  60.7k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   182k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   182k|        self.next.as_mut()
  475|   182k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|   211k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   211k|        self.next.as_mut()
  475|   211k|    }
_RNvMsd_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekB9_:
  473|   164k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   164k|        self.next.as_mut()
  475|   164k|    }
_RNvXs6_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|  59.8k|    fn next(&mut self) -> Option<Self::Item> {
  311|  59.8k|        self.0.next()
  312|  59.8k|    }
_RNvXs9_NtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|    294|    fn next(&mut self) -> Option<Self::Item> {
  388|    294|        // we repeatedly compute the next range until we find one that is non-empty
  389|    294|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|    294|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|    294|    }

_RNvXs3_NtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextCsd9h5hTIV0Wd_7rle_ops:
  153|  67.7k|    fn next(&mut self) -> Option<Self::Item> {
  154|  67.7k|        self.0.next()
  155|  67.7k|    }
_RINvYINtNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator5unionB3_ECsd9h5hTIV0Wd_7rle_ops:
   21|  2.05k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  2.05k|        Combine::new(self, other)
   23|  2.05k|    }
_RINvYINtNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator12intersectionB3_ECsd9h5hTIV0Wd_7rle_ops:
   26|  2.35k|    fn intersection<R: RangeIterator>(self, other: R) -> Combine<Self, R, Intersection> {
   27|  2.35k|        Combine::new(self, other)
   28|  2.35k|    }
_RINvYINtNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator10differenceB3_ECsd9h5hTIV0Wd_7rle_ops:
   31|  1.76k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  1.76k|        Combine::new(self, other)
   33|  1.76k|    }
_RINvYINtNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator3cutB3_EBa_:
   53|    294|    fn cut<R: RangeIterator>(self, other: R) -> Combine<Self, R, Cut> {
   54|    294|        Combine::new(self, other)
   55|    294|    }
_RINvMs2_NtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|  29.4k|    pub fn new<II>(iter: II) -> Self
  140|  29.4k|    where
  141|  29.4k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  29.4k|    {
  143|  29.4k|        Self(iter.into_iter())
  144|  29.4k|    }
_RINvYINtNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator20symmetric_differenceB3_EBa_:
   36|  3.82k|    fn symmetric_difference<R: RangeIterator>(
   37|  3.82k|        self,
   38|  3.82k|        other: R,
   39|  3.82k|    ) -> Combine<Self, R, SymmetricDifference> {
   40|  3.82k|        Combine::new(self, other)
   41|  3.82k|    }
_RNvXs3_NtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs472D01UEnsx_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  58.8k|    fn next(&mut self) -> Option<Self::Item> {
  154|  58.8k|        self.0.next()
  155|  58.8k|    }
_RINvYINtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  29.4k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  29.4k|        Combine::new(self, other)
   23|  29.4k|    }
_RNCINvNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs472D01UEnsx_4core4iter8adapters6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  58.8k|    Ranges::new(iter::from_fn(move || {
  167|  58.8k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  58.8k|    }))
_RINvYINtNtNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|  29.4k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  29.4k|        Combine::new(self, other)
   33|  29.4k|    }
_RNvXs3_NtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   216k|    fn next(&mut self) -> Option<Self::Item> {
  154|   216k|        self.0.next()
  155|   216k|    }
_RINvMs2_NtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs472D01UEnsx_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  58.8k|    pub fn new<II>(iter: II) -> Self
  140|  58.8k|    where
  141|  58.8k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  58.8k|    {
  143|  58.8k|        Self(iter.into_iter())
  144|  58.8k|    }
_RINvNtCsf8uUQSMUSUi_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs472D01UEnsx_4core4iter8adapters6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEEB4_:
  163|  58.8k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  58.8k|    let mut iter = bits.into_iter().peekable();
  165|  58.8k|
  166|  58.8k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  58.8k|    }))
  180|  58.8k|}

_RINvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6y_EECsd9h5hTIV0Wd_7rle_ops:
  135|  1.76k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  1.76k|        Self {
  137|  1.76k|            ranges: iter.collect(),
  138|  1.76k|            ..Default::default()
  139|  1.76k|        }
  140|  1.76k|    }
_RNvXs7_Csf8uUQSMUSUi_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs472D01UEnsx_4core3ops3bit6BitAnd6bitandCsd9h5hTIV0Wd_7rle_ops:
  363|  2.35k|    fn bitand(self, rhs: &BitField) -> Self::Output {
  364|  2.35k|        BitField::from_ranges(self.ranges().intersection(rhs.ranges()))
  365|  2.35k|    }
_RNvXs5_Csf8uUQSMUSUi_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs472D01UEnsx_4core3ops3bit5BitOr5bitorCsd9h5hTIV0Wd_7rle_ops:
  347|  2.05k|    fn bitor(self, rhs: &BitField) -> Self::Output {
  348|  2.05k|        BitField::from_ranges(self.ranges().union(rhs.ranges()))
  349|  2.05k|    }
_RNvXs9_Csf8uUQSMUSUi_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs472D01UEnsx_4core3ops5arith3Sub3subCsd9h5hTIV0Wd_7rle_ops:
  379|  1.76k|    fn sub(self, rhs: &BitField) -> Self::Output {
  380|  1.76k|        BitField::from_ranges(self.ranges().difference(rhs.ranges()))
  381|  1.76k|    }
_RNvXsi_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs472D01UEnsx_4core7default7Default7defaultCsd9h5hTIV0Wd_7rle_ops:
   36|  6.17k|#[derive(Debug, Default, Clone)]
_RINvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6h_EECsd9h5hTIV0Wd_7rle_ops:
  135|  2.05k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  2.05k|        Self {
  137|  2.05k|            ranges: iter.collect(),
  138|  2.05k|            ..Default::default()
  139|  2.05k|        }
  140|  2.05k|    }
_RINvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_12IntersectionEECsd9h5hTIV0Wd_7rle_ops:
  135|  2.35k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  2.35k|        Self {
  137|  2.35k|            ranges: iter.collect(),
  138|  2.35k|            ..Default::default()
  139|  2.35k|        }
  140|  2.35k|    }
_RINvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_3CutEEB6_:
  135|    294|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|    294|        Self {
  137|    294|            ranges: iter.collect(),
  138|    294|            ..Default::default()
  139|    294|        }
  140|    294|    }
_RINvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs472D01UEnsx_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs96C4YhxZz6N_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_19SymmetricDifferenceEEB6_:
  135|  3.82k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  3.82k|        Self {
  137|  3.82k|            ranges: iter.collect(),
  138|  3.82k|            ..Default::default()
  139|  3.82k|        }
  140|  3.82k|    }
_RNvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  273|  29.4k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  274|  29.4k|        iter::Ranges::new(self.ranges.iter().cloned())
  275|  29.4k|    }
_RNvXs_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCs472D01UEnsx_4core3cmp9PartialEq2eq:
   47|  4.41k|    fn eq(&self, other: &Self) -> bool {
   48|  4.41k|        Iterator::eq(self.ranges(), other.ranges())
   49|  4.41k|    }
_RNvXsb_Csf8uUQSMUSUi_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs472D01UEnsx_4core3ops3bit6BitXor6bitxor:
  394|  3.82k|    fn bitxor(self, rhs: &BitField) -> Self::Output {
  395|  3.82k|        BitField::from_ranges(self.ranges().symmetric_difference(rhs.ranges()))
  396|  3.82k|    }
_RNvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB5_8BitField3new:
  130|    588|    pub fn new() -> Self {
  131|    588|        Self::default()
  132|    588|    }
_RNvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB5_8BitField3cut:
  323|    294|    pub fn cut(&self, other: &Self) -> Self {
  324|    294|        Self::from_ranges(self.ranges().cut(other.ranges()))
  325|    294|    }
_RNvXsi_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs472D01UEnsx_4core7default7Default7defaultB5_:
   36|  5.88k|#[derive(Debug, Default, Clone)]
_RNvMs4_Csf8uUQSMUSUi_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  279|  29.4k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  280|  29.4k|        self.inner_ranges()
  281|  29.4k|            .union(ranges_from_bits(self.set.iter().copied()))
  282|  29.4k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  283|  29.4k|    }

_RNvXNtCsf8uUQSMUSUi_17fvm_ipld_bitfield5rangeINtNtNtCs472D01UEnsx_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  3.85k|    fn size(&self) -> Self::Idx {
   15|  3.85k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  3.85k|            self.end - self.start
   19|       |        }
   20|  3.85k|    }

_RNvXs0_NtCsf8uUQSMUSUi_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs1AwR3pUWJf5_9arbitrary9Arbitrary9arbitrary:
  119|  1.17k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  120|  1.17k|        let mut next_value: bool = bool::arbitrary(u)?;
  121|  1.17k|        let mut ranges = Vec::new();
  122|  1.17k|        let mut index = 0u64;
  123|  1.17k|        let mut total_len: u64 = 0;
  124|       |
  125|  1.17k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  126|       |
  127|  1.17k|        for _ in 0..size {
  128|       |            // 3 line crappy "power-law" distribution
  129|  13.4k|            let len = u64::arbitrary(u)?;
  130|  13.4k|            let shift = u.int_in_range(0..=63)?;
  131|  13.4k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  132|  13.4k|
  133|  13.4k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  134|  13.4k|            if ovf {
  135|     58|                break;
  136|  13.4k|            }
  137|  13.4k|            total_len = new_total_len;
  138|  13.4k|            let start = index;
  139|  13.4k|            index += len;
  140|  13.4k|            let end = index;
  141|  13.4k|
  142|  13.4k|            if next_value {
  143|  6.84k|                ranges.push(start..end);
  144|  6.84k|            }
  145|       |
  146|  13.4k|            next_value = !next_value;
  147|       |        }
  148|       |
  149|  1.17k|        Ok(Self {
  150|  1.17k|            ranges,
  151|  1.17k|            ..Default::default()
  152|  1.17k|        })
  153|  1.17k|    }
_RNvXs0_NtCsf8uUQSMUSUi_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs1AwR3pUWJf5_9arbitrary9Arbitrary9size_hint:
  155|    885|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  156|    885|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  157|    885|    }

