_RNCNvXs8_Cs4d2vEZvX996_9arbitraryANtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9arbitrary0Cs6W19jUNyVKq_7rle_ops:
  642|    780|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvYNtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldNtCs4d2vEZvX996_9arbitrary9Arbitrary19arbitrary_take_restCs6W19jUNyVKq_7rle_ops:
  189|    260|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    260|        Self::arbitrary(&mut u)
  191|    260|    }
_RNCNvXs8_Cs4d2vEZvX996_9arbitraryANtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9size_hint0Cs6W19jUNyVKq_7rle_ops:
  656|    783|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|    783|            <T as Arbitrary>::size_hint(d)
  658|    783|        }))
_RINvCs4d2vEZvX996_9arbitrary16try_create_arrayNCNvXs8_B2_ANtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9arbitrary0BU_KB1C_ECs6W19jUNyVKq_7rle_ops:
  615|    260|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  616|    260|where
  617|    260|    F: FnMut(usize) -> Result<T>,
  618|    260|{
  619|    260|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  620|    260|    let array_ptr = array.as_mut_ptr();
  621|    260|    let dst = array_ptr as _;
  622|    260|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  623|    260|        dst,
  624|    260|        initialized: 0,
  625|    260|    };
  626|       |    unsafe {
  627|    780|        for (idx, value_ptr) in (*array.as_mut_ptr()).iter_mut().enumerate() {
  628|    780|            core::ptr::write(value_ptr, cb(idx)?);
  629|    780|            guard.initialized += 1;
  630|       |        }
  631|    260|        mem::forget(guard);
  632|    260|        Ok(array.assume_init())
  633|       |    }
  634|    260|}
_RNvXs8_Cs4d2vEZvX996_9arbitraryANtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary19arbitrary_take_restCs6W19jUNyVKq_7rle_ops:
  646|    260|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  647|    260|        let mut array = Self::arbitrary(&mut u)?;
  648|    260|        if let Some(last) = array.last_mut() {
  649|    260|            *last = Arbitrary::arbitrary_take_rest(u)?;
  650|      0|        }
  651|    260|        Ok(array)
  652|    260|    }
_RNvXs8_Cs4d2vEZvX996_9arbitraryANtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9size_hintCs6W19jUNyVKq_7rle_ops:
  655|    261|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  656|    261|        crate::size_hint::and_all(&array::from_fn::<_, N, _>(|_| {
  657|       |            <T as Arbitrary>::size_hint(d)
  658|    261|        }))
  659|    261|    }
_RNvXs8_Cs4d2vEZvX996_9arbitraryANtCsbsVpavNDNjO_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9arbitraryCs6W19jUNyVKq_7rle_ops:
  641|    260|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  642|    260|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  643|    260|    }
_RNvXsI_Cs4d2vEZvX996_9arbitraryhNtB5_9Arbitrary9size_hintCsbsVpavNDNjO_17fvm_ipld_bitfield:
  320|  1.04k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  1.04k|                    let n = mem::size_of::<$ty>();
  322|  1.04k|                    (n, Some(n))
  323|  1.04k|                }
_RNvXs1p_Cs4d2vEZvX996_9arbitraryTyhENtB6_9Arbitrary9size_hintCsbsVpavNDNjO_17fvm_ipld_bitfield:
  587|  1.04k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  588|  1.04k|                crate::size_hint::and_all(&[
  589|  1.04k|                    <$last as Arbitrary>::size_hint(depth),
  590|  1.04k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  591|  1.04k|                ])
  592|  1.04k|            }
_RNvXsL_Cs4d2vEZvX996_9arbitraryyNtB5_9Arbitrary9size_hintCsbsVpavNDNjO_17fvm_ipld_bitfield:
  320|  1.04k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  1.04k|                    let n = mem::size_of::<$ty>();
  322|  1.04k|                    (n, Some(n))
  323|  1.04k|                }
_RNvXsN_Cs4d2vEZvX996_9arbitraryjNtB5_9Arbitrary9size_hintCsbsVpavNDNjO_17fvm_ipld_bitfield:
  320|    783|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    783|                    let n = mem::size_of::<$ty>();
  322|    783|                    (n, Some(n))
  323|    783|                }
_RNvXs_Cs4d2vEZvX996_9arbitrarybNtB4_9Arbitrary9arbitrary:
  295|  1.04k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  296|  1.04k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  297|  1.04k|    }
_RNvXsL_Cs4d2vEZvX996_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  10.1k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  10.1k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  10.1k|                    u.fill_buffer(&mut buf)?;
  312|  10.1k|                    let mut x: $unsigned = 0;
  313|  80.9k|                    for i in 0..mem::size_of::<$ty>() {
  314|  80.9k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  80.9k|                    }
  316|  10.1k|                    Ok(x as $ty)
  317|  10.1k|                }
_RNvXsI_Cs4d2vEZvX996_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|  1.04k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  1.04k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  1.04k|                    u.fill_buffer(&mut buf)?;
  312|  1.04k|                    let mut x: $unsigned = 0;
  313|  1.04k|                    for i in 0..mem::size_of::<$ty>() {
  314|  1.04k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  1.04k|                    }
  316|  1.04k|                    Ok(x as $ty)
  317|  1.04k|                }

_RNvNtCs4d2vEZvX996_9arbitrary9size_hint3andCs6W19jUNyVKq_7rle_ops:
   26|    783|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|    783|    let lower = lhs.0 + rhs.0;
   28|    783|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|    783|    (lower, upper)
   30|    783|}
_RNvNtCs4d2vEZvX996_9arbitrary9size_hint7and_allCs6W19jUNyVKq_7rle_ops:
   37|    261|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    261|    hints.iter().copied().fold((0, Some(0)), and)
   39|    261|}
_RNCNvNtCs4d2vEZvX996_9arbitrary9size_hint3and0Cs6W19jUNyVKq_7rle_ops:
   28|    261|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCs4d2vEZvX996_9arbitrary9size_hint3and0CsbsVpavNDNjO_17fvm_ipld_bitfield:
   28|  2.86k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCs4d2vEZvX996_9arbitrary9size_hint3andCsbsVpavNDNjO_17fvm_ipld_bitfield:
   26|  2.86k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.86k|    let lower = lhs.0 + rhs.0;
   28|  2.86k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.86k|    (lower, upper)
   30|  2.86k|}
_RNvNtCs4d2vEZvX996_9arbitrary9size_hint7and_allCsbsVpavNDNjO_17fvm_ipld_bitfield:
   37|  1.04k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.04k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.04k|}
_RNCNCNvNtCs4d2vEZvX996_9arbitrary9size_hint3and00CsbsVpavNDNjO_17fvm_ipld_bitfield:
   28|  2.08k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RNvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB2_12Unstructured3newCs6W19jUNyVKq_7rle_ops:
   85|    260|    pub fn new(data: &'a [u8]) -> Self {
   86|    260|        Unstructured { data }
   87|    260|    }
_RINvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsbsVpavNDNjO_17fvm_ipld_bitfield:
  213|  1.04k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  1.04k|    where
  215|  1.04k|        ElementType: Arbitrary<'a>,
  216|  1.04k|    {
  217|  1.04k|        let byte_size = self.arbitrary_byte_size()?;
  218|  1.04k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  1.04k|        let elem_size = upper.unwrap_or(lower * 2);
  220|  1.04k|        let elem_size = std::cmp::max(1, elem_size);
  221|  1.04k|        Ok(byte_size / elem_size)
  222|  1.04k|    }
_RNvXs3_NtCs4d2vEZvX996_9arbitrary12unstructuredmNtB5_3Int7from_u8CsbsVpavNDNjO_17fvm_ipld_bitfield:
  821|  10.1k|                fn from_u8(b: u8) -> Self {
  822|  10.1k|                    b as Self
  823|  10.1k|                }
_RNvXs3_NtCs4d2vEZvX996_9arbitrary12unstructuredmNtB5_3Int12wrapping_addCsbsVpavNDNjO_17fvm_ipld_bitfield:
  833|  10.1k|                fn wrapping_add(self, rhs: Self) -> Self {
  834|  10.1k|                    <$ty>::wrapping_add(self, rhs)
  835|  10.1k|                }
_RNvXs9_NtCs4d2vEZvX996_9arbitrary12unstructuredlNtB5_3Int13from_unsignedCsbsVpavNDNjO_17fvm_ipld_bitfield:
  845|  10.1k|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|  10.1k|                    unsigned as Self
  847|  10.1k|                }
_RNvXs3_NtCs4d2vEZvX996_9arbitrary12unstructuredmNtB5_3Int12wrapping_subCsbsVpavNDNjO_17fvm_ipld_bitfield:
  837|  10.1k|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|  10.1k|                    <$ty>::wrapping_sub(self, rhs)
  839|  10.1k|                }
_RNvXs9_NtCs4d2vEZvX996_9arbitrary12unstructuredlNtB5_3Int11to_unsignedCsbsVpavNDNjO_17fvm_ipld_bitfield:
  841|  20.2k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  20.2k|                    self as $unsigned_ty
  843|  20.2k|                }
_RNvXs3_NtCs4d2vEZvX996_9arbitrary12unstructuredmNtB5_3Int10from_usizeCsbsVpavNDNjO_17fvm_ipld_bitfield:
  825|  20.2k|                fn from_usize(u: usize) -> Self {
  826|  20.2k|                    u as Self
  827|  20.2k|                }
_RINvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsbsVpavNDNjO_17fvm_ipld_bitfield:
  302|  10.1k|    fn int_in_range_impl<T>(
  303|  10.1k|        range: ops::RangeInclusive<T>,
  304|  10.1k|        mut bytes: impl Iterator<Item = u8>,
  305|  10.1k|    ) -> Result<(T, usize)>
  306|  10.1k|    where
  307|  10.1k|        T: Int,
  308|  10.1k|    {
  309|  10.1k|        let start = *range.start();
  310|  10.1k|        let end = *range.end();
  311|  10.1k|        assert!(
  312|  10.1k|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|  10.1k|        if start == end {
  319|      0|            return Ok((start, 0));
  320|  10.1k|        }
  321|  10.1k|
  322|  10.1k|        // From here on out we work with the unsigned representation. All of the
  323|  10.1k|        // operations performed below work out just as well whether or not `T`
  324|  10.1k|        // is a signed or unsigned integer.
  325|  10.1k|        let start = start.to_unsigned();
  326|  10.1k|        let end = end.to_unsigned();
  327|  10.1k|
  328|  10.1k|        let delta = end.wrapping_sub(start);
  329|  10.1k|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|  10.1k|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|  10.1k|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  20.2k|        while (bytes_consumed < mem::size_of::<T>())
  339|  20.2k|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|  10.1k|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|  10.1k|                Some(b) => b,
  344|  10.1k|            };
  345|  10.1k|            bytes_consumed += 1;
  346|  10.1k|
  347|  10.1k|            // Combine this byte into our arbitrary integer, but avoid
  348|  10.1k|            // overflowing the shift for `u8` and `i8`.
  349|  10.1k|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|  10.1k|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|  10.1k|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|  10.1k|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|  10.1k|        let result = start.wrapping_add(offset);
  365|  10.1k|
  366|  10.1k|        // And convert back to our maybe-signed representation.
  367|  10.1k|        let result = T::from_unsigned(result);
  368|  10.1k|        debug_assert!(*range.start() <= result);
  369|  10.1k|        debug_assert!(result <= *range.end());
  370|       |
  371|  10.1k|        Ok((result, bytes_consumed))
  372|  10.1k|    }
_RINvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsbsVpavNDNjO_17fvm_ipld_bitfield:
  293|  10.1k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  294|  10.1k|    where
  295|  10.1k|        T: Int,
  296|  10.1k|    {
  297|  10.1k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  298|  10.1k|        self.data = &self.data[bytes_consumed..];
  299|  10.1k|        Ok(result)
  300|  10.1k|    }
_RNvXs3_NtCs4d2vEZvX996_9arbitrary12unstructuredmNtB5_3Int11checked_add:
  829|  10.1k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|  10.1k|                    <$ty>::checked_add(self, rhs)
  831|  10.1k|                }
_RINvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    722|    fn int_in_range_impl<T>(
  303|    722|        range: ops::RangeInclusive<T>,
  304|    722|        mut bytes: impl Iterator<Item = u8>,
  305|    722|    ) -> Result<(T, usize)>
  306|    722|    where
  307|    722|        T: Int,
  308|    722|    {
  309|    722|        let start = *range.start();
  310|    722|        let end = *range.end();
  311|    722|        assert!(
  312|    722|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    722|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    722|        }
  321|    722|
  322|    722|        // From here on out we work with the unsigned representation. All of the
  323|    722|        // operations performed below work out just as well whether or not `T`
  324|    722|        // is a signed or unsigned integer.
  325|    722|        let start = start.to_unsigned();
  326|    722|        let end = end.to_unsigned();
  327|    722|
  328|    722|        let delta = end.wrapping_sub(start);
  329|    722|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    722|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    722|        let mut bytes_consumed: usize = 0;
  337|       |
  338|  1.44k|        while (bytes_consumed < mem::size_of::<T>())
  339|    722|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    722|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    722|                Some(b) => b,
  344|    722|            };
  345|    722|            bytes_consumed += 1;
  346|    722|
  347|    722|            // Combine this byte into our arbitrary integer, but avoid
  348|    722|            // overflowing the shift for `u8` and `i8`.
  349|    722|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|    722|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|      0|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    722|        let offset = if delta == T::Unsigned::MAX {
  357|      3|            arbitrary_int
  358|       |        } else {
  359|    719|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    722|        let result = start.wrapping_add(offset);
  365|    722|
  366|    722|        // And convert back to our maybe-signed representation.
  367|    722|        let result = T::from_unsigned(result);
  368|    722|        debug_assert!(*range.start() <= result);
  369|    722|        debug_assert!(result <= *range.end());
  370|       |
  371|    722|        Ok((result, bytes_consumed))
  372|    722|    }
_RNvXs2_NtCs4d2vEZvX996_9arbitrary12unstructuredtNtB5_3Int7from_u8B7_:
  821|    308|                fn from_u8(b: u8) -> Self {
  822|    308|                    b as Self
  823|    308|                }
_RNvXs1_NtCs4d2vEZvX996_9arbitrary12unstructuredhNtB5_3Int11to_unsignedB7_:
  841|  1.44k|                fn to_unsigned(self) -> Self::Unsigned {
  842|  1.44k|                    self as $unsigned_ty
  843|  1.44k|                }
_RNvXs2_NtCs4d2vEZvX996_9arbitrary12unstructuredtNtB5_3Int12wrapping_subB7_:
  837|    155|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    155|                    <$ty>::wrapping_sub(self, rhs)
  839|    155|                }
_RINvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  302|    155|    fn int_in_range_impl<T>(
  303|    155|        range: ops::RangeInclusive<T>,
  304|    155|        mut bytes: impl Iterator<Item = u8>,
  305|    155|    ) -> Result<(T, usize)>
  306|    155|    where
  307|    155|        T: Int,
  308|    155|    {
  309|    155|        let start = *range.start();
  310|    155|        let end = *range.end();
  311|    155|        assert!(
  312|    155|            start <= end,
  313|      0|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  314|       |        );
  315|       |
  316|       |        // When there is only one possible choice, don't waste any entropy from
  317|       |        // the underlying data.
  318|    155|        if start == end {
  319|      0|            return Ok((start, 0));
  320|    155|        }
  321|    155|
  322|    155|        // From here on out we work with the unsigned representation. All of the
  323|    155|        // operations performed below work out just as well whether or not `T`
  324|    155|        // is a signed or unsigned integer.
  325|    155|        let start = start.to_unsigned();
  326|    155|        let end = end.to_unsigned();
  327|    155|
  328|    155|        let delta = end.wrapping_sub(start);
  329|    155|        debug_assert_ne!(delta, T::Unsigned::ZERO);
  330|       |
  331|       |        // Compute an arbitrary integer offset from the start of the range. We
  332|       |        // do this by consuming `size_of(T)` bytes from the input to create an
  333|       |        // arbitrary integer and then clamping that int into our range bounds
  334|       |        // with a modulo operation.
  335|    155|        let mut arbitrary_int = T::Unsigned::ZERO;
  336|    155|        let mut bytes_consumed: usize = 0;
  337|       |
  338|    463|        while (bytes_consumed < mem::size_of::<T>())
  339|    310|            && (delta >> T::Unsigned::from_usize(bytes_consumed * 8)) > T::Unsigned::ZERO
  340|       |        {
  341|    308|            let byte = match bytes.next() {
  342|      0|                None => break,
  343|    308|                Some(b) => b,
  344|    308|            };
  345|    308|            bytes_consumed += 1;
  346|    308|
  347|    308|            // Combine this byte into our arbitrary integer, but avoid
  348|    308|            // overflowing the shift for `u8` and `i8`.
  349|    308|            arbitrary_int = if mem::size_of::<T>() == 1 {
  350|      0|                T::Unsigned::from_u8(byte)
  351|       |            } else {
  352|    308|                (arbitrary_int << 8) | T::Unsigned::from_u8(byte)
  353|       |            };
  354|       |        }
  355|       |
  356|    155|        let offset = if delta == T::Unsigned::MAX {
  357|      0|            arbitrary_int
  358|       |        } else {
  359|    155|            arbitrary_int % (delta.checked_add(T::Unsigned::ONE).unwrap())
  360|       |        };
  361|       |
  362|       |        // Finally, we add `start` to our offset from `start` to get the result
  363|       |        // actual value within the range.
  364|    155|        let result = start.wrapping_add(offset);
  365|    155|
  366|    155|        // And convert back to our maybe-signed representation.
  367|    155|        let result = T::from_unsigned(result);
  368|    155|        debug_assert!(*range.start() <= result);
  369|    155|        debug_assert!(result <= *range.end());
  370|       |
  371|    155|        Ok((result, bytes_consumed))
  372|    155|    }
_RNvXs2_NtCs4d2vEZvX996_9arbitrary12unstructuredtNtB5_3Int11checked_add:
  829|    155|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|    155|                    <$ty>::checked_add(self, rhs)
  831|    155|                }
_RNvXs2_NtCs4d2vEZvX996_9arbitrary12unstructuredtNtB5_3Int10from_usizeB7_:
  825|    310|                fn from_usize(u: usize) -> Self {
  826|    310|                    u as Self
  827|    310|                }
_RNvXs1_NtCs4d2vEZvX996_9arbitrary12unstructuredhNtB5_3Int7from_u8B7_:
  821|    722|                fn from_u8(b: u8) -> Self {
  822|    722|                    b as Self
  823|    722|                }
_RNvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  1.04k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  1.04k|        if self.data.is_empty() {
  226|    147|            Ok(0)
  227|    893|        } else if self.data.len() == 1 {
  228|     16|            self.data = &[];
  229|     16|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|       |            // Note: We cast to u64 so we don't overflow when checking std::u32::MAX + 4 on 32-bit archs
  240|    877|            let len = if self.data.len() as u64 <= std::u8::MAX as u64 + 1 {
  241|    722|                let bytes = 1;
  242|    722|                let max_size = self.data.len() - bytes;
  243|    722|                let (rest, for_size) = self.data.split_at(max_size);
  244|    722|                self.data = rest;
  245|    722|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  246|    155|            } else if self.data.len() as u64 <= std::u16::MAX as u64 + 2 {
  247|    155|                let bytes = 2;
  248|    155|                let max_size = self.data.len() - bytes;
  249|    155|                let (rest, for_size) = self.data.split_at(max_size);
  250|    155|                self.data = rest;
  251|    155|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  252|      0|            } else if self.data.len() as u64 <= std::u32::MAX as u64 + 4 {
  253|      0|                let bytes = 4;
  254|      0|                let max_size = self.data.len() - bytes;
  255|      0|                let (rest, for_size) = self.data.split_at(max_size);
  256|      0|                self.data = rest;
  257|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  258|       |            } else {
  259|      0|                let bytes = 8;
  260|      0|                let max_size = self.data.len() - bytes;
  261|      0|                let (rest, for_size) = self.data.split_at(max_size);
  262|      0|                self.data = rest;
  263|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  264|       |            };
  265|       |
  266|    877|            Ok(len)
  267|       |        }
  268|  1.04k|    }
_RNvXs1_NtCs4d2vEZvX996_9arbitrary12unstructuredhNtB5_3Int12wrapping_addB7_:
  833|    722|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    722|                    <$ty>::wrapping_add(self, rhs)
  835|    722|                }
_RNvMNtCs4d2vEZvX996_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  11.1k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  11.1k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  11.1k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  11.1k|        for byte in buffer[n..].iter_mut() {
  525|    117|            *byte = 0;
  526|    117|        }
  527|  11.1k|        self.data = &self.data[n..];
  528|  11.1k|        Ok(())
  529|  11.1k|    }
_RNvXs2_NtCs4d2vEZvX996_9arbitrary12unstructuredtNtB5_3Int12wrapping_addB7_:
  833|    155|                fn wrapping_add(self, rhs: Self) -> Self {
  834|    155|                    <$ty>::wrapping_add(self, rhs)
  835|    155|                }
_RNvXs2_NtCs4d2vEZvX996_9arbitrary12unstructuredtNtB5_3Int13from_unsignedB7_:
  845|    155|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    155|                    unsigned as Self
  847|    155|                }
_RNvXs2_NtCs4d2vEZvX996_9arbitrary12unstructuredtNtB5_3Int11to_unsignedB7_:
  841|    310|                fn to_unsigned(self) -> Self::Unsigned {
  842|    310|                    self as $unsigned_ty
  843|    310|                }
_RNvXs1_NtCs4d2vEZvX996_9arbitrary12unstructuredhNtB5_3Int12wrapping_subB7_:
  837|    722|                fn wrapping_sub(self, rhs: Self) -> Self {
  838|    722|                    <$ty>::wrapping_sub(self, rhs)
  839|    722|                }
_RNvXs1_NtCs4d2vEZvX996_9arbitrary12unstructuredhNtB5_3Int11checked_add:
  829|    719|                fn checked_add(self, rhs: Self) -> Option<Self> {
  830|    719|                    <$ty>::checked_add(self, rhs)
  831|    719|                }
_RNvXs1_NtCs4d2vEZvX996_9arbitrary12unstructuredhNtB5_3Int10from_usizeB7_:
  825|    722|                fn from_usize(u: usize) -> Self {
  826|    722|                    u as Self
  827|    722|                }
_RNvXs1_NtCs4d2vEZvX996_9arbitrary12unstructuredhNtB5_3Int13from_unsignedB7_:
  845|    722|                fn from_unsigned(unsigned: $unsigned_ty) -> Self {
  846|    722|                    unsigned as Self
  847|    722|                }

rust_fuzzer_test_input:
  259|    261|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    261|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    261|
  262|    261|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    261|                // implementation. This helps the fuzzer avoid exploring all the
  264|    261|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    261|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    261|                // get to longer inputs that actually lead to interesting executions
  267|    261|                // quicker.
  268|    261|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    260|                }
  271|    260|
  272|    260|                let mut u = Unstructured::new(bytes);
  273|    260|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    260|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    260|                }
  291|       |
  292|    260|                let data = match data {
  293|    260|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    260|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    260|                result.to_libfuzzer_code()
  299|    261|            }
_RNvMs_CsiMb3OhXOi17_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_codeCs6W19jUNyVKq_7rle_ops:
   40|    260|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    260|        match self {
   42|    260|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    260|    }
_RNvXCsiMb3OhXOi17_13libfuzzer_sysNtB2_6CorpusINtNtCskiyb6Qz9mfK_4core7convert4FromuE4fromCs6W19jUNyVKq_7rle_ops:
   30|    260|    fn from(_: ()) -> Self {
   31|    260|        Self::Keep
   32|    260|    }
_RNvNvCs6W19jUNyVKq_7rle_ops1__19___libfuzzer_sys_run:
  303|    260|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    260|                $body
  305|    260|            }
LLVMFuzzerTestOneInput:
   58|    261|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    261|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    261|    });
   63|    261|
   64|    261|    match test_input {
   65|    261|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    261|}
_RNCNvCsiMb3OhXOi17_13libfuzzer_sys15test_input_wrap0B3_:
   59|    261|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    261|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    261|        rust_fuzzer_test_input(data_slice)
   62|    261|    });
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvMs2_NtCsew1LUT3qeEx_9once_cell3impINtB5_8OnceCellNtNtCsbJTWGl6dkHx_5alloc6string6StringE14is_initializedCs6W19jUNyVKq_7rle_ops:
   49|    260|    pub(crate) fn is_initialized(&self) -> bool {
   50|    260|        // An `Acquire` load is enough because that makes all the initialization
   51|    260|        // operations visible to us, and, this being a fast path, weaker
   52|    260|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    260|        // `SeqCst` operations on the slow path.
   54|    260|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    260|    }

_RNvMs4_NtCsew1LUT3qeEx_9once_cell4syncINtB5_8OnceCellNtNtCsbJTWGl6dkHx_5alloc6string6StringE3getCs6W19jUNyVKq_7rle_ops:
  965|    260|        pub fn get(&self) -> Option<&T> {
  966|    260|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    260|                None
  971|       |            }
  972|    260|        }

_RNvXsi_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtNtCskiyb6Qz9mfK_4core7default7Default7defaultCs6W19jUNyVKq_7rle_ops:
  196|  2.32k|#[derive(Default)]
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newCs6W19jUNyVKq_7rle_ops:
  468|  11.9k|    fn new(mut iter: I) -> Self {
  469|  11.9k|        let next = iter.next();
  470|  11.9k|        Self { iter, next }
  471|  11.9k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4next0Cs6W19jUNyVKq_7rle_ops:
  390|  21.2k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEENtNtNtB1Y_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  438|  35.9k|    fn next(&mut self) -> Option<Self::Item> {
  439|  35.9k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  34.3k|        while let Some(next) = self.iter.peek() {
  444|  32.3k|            if next.start > range.end {
  445|  31.5k|                break;
  446|    764|            }
  447|    764|
  448|    764|            range.end = cmp::max(range.end, next.end);
  449|    764|            self.iter.next();
  450|       |        }
  451|       |
  452|  33.5k|        Some(range)
  453|  35.9k|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  388|   100k|    fn next(&mut self) -> Option<Self::Item> {
  389|   100k|        // we repeatedly compute the next range until we find one that is non-empty
  390|   100k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|   100k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE4peekCs6W19jUNyVKq_7rle_ops:
  473|  20.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  20.0k|        self.next.as_mut()
  475|  20.0k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Cs6W19jUNyVKq_7rle_ops:
  390|  76.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceENtNtNtB1M_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  388|  36.6k|    fn next(&mut self) -> Option<Self::Item> {
  389|  36.6k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  36.6k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  36.6k|    }
_RNvXsg_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_12IntersectionNtNtCskiyb6Qz9mfK_4core7default7Default7defaultCs6W19jUNyVKq_7rle_ops:
  123|  1.40k|#[derive(Default)]
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4nexts_0Cs6W19jUNyVKq_7rle_ops:
  390|  44.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_E3newCs6W19jUNyVKq_7rle_ops:
  298|  1.19k|    pub fn new(a: A, b: B) -> Self {
  299|  1.19k|        Self(Merge::new(_Combine::new(a, b)))
  300|  1.19k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|   111k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   111k|        let next = self.next.take()?;
  484|   100k|        self.next = self.iter.next();
  485|   100k|        Some(next)
  486|   111k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Cs6W19jUNyVKq_7rle_ops:
  390|   100k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE3newCs6W19jUNyVKq_7rle_ops:
  468|  1.05k|    fn new(mut iter: I) -> Self {
  469|  1.05k|        let next = iter.next();
  470|  1.05k|        Self { iter, next }
  471|  1.05k|    }
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EE3newCs6W19jUNyVKq_7rle_ops:
  425|  1.19k|    pub fn new(iter: I) -> Self {
  426|  1.19k|        Self {
  427|  1.19k|            iter: Lookahead::new(iter),
  428|  1.19k|        }
  429|  1.19k|    }
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceE3newCs6W19jUNyVKq_7rle_ops:
  298|  2.32k|    pub fn new(a: A, b: B) -> Self {
  299|  2.32k|        Self(Merge::new(_Combine::new(a, b)))
  300|  2.32k|    }
_RNvXs2_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_rhs_tailCs6W19jUNyVKq_7rle_ops:
  239|  5.05k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  240|  5.05k|        Some(rhs)
  241|  5.05k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCs6W19jUNyVKq_7rle_ops:
  473|   100k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   100k|        self.next.as_mut()
  475|   100k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_ENtNtNtB1z_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  311|  15.2k|    fn next(&mut self) -> Option<Self::Item> {
  312|  15.2k|        self.0.next()
  313|  15.2k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Cs6W19jUNyVKq_7rle_ops:
  390|  82.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_lhs_tailCs6W19jUNyVKq_7rle_ops:
  139|    699|    fn advance_lhs_tail(&mut self, _lhs: Range<u64>) -> Option<Range<u64>> {
  140|    699|        // the intersection of a range and an empty range is an empty range
  141|    699|        None
  142|    699|    }
_RNvXs0_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tailCs6W19jUNyVKq_7rle_ops:
  187|    344|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  188|    344|        // the difference between an empty range and a range is an empty range
  189|    344|        None
  190|    344|    }
_RNvXs2_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_lhs_tailCs6W19jUNyVKq_7rle_ops:
  234|  12.6k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  235|  12.6k|        // the symmetric difference of a range and an empty range is just that range
  236|  12.6k|        Some(lhs)
  237|  12.6k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Cs6W19jUNyVKq_7rle_ops:
  390|  88.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEE3newCs6W19jUNyVKq_7rle_ops:
  425|  2.32k|    pub fn new(iter: I) -> Self {
  426|  2.32k|        Self {
  427|  2.32k|            iter: Lookahead::new(iter),
  428|  2.32k|        }
  429|  2.32k|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_ENtNtNtB1M_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  388|  15.2k|    fn next(&mut self) -> Option<Self::Item> {
  389|  15.2k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  15.2k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  15.2k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  438|   111k|    fn next(&mut self) -> Option<Self::Item> {
  439|   111k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   100k|        while let Some(next) = self.iter.peek() {
  444|  88.7k|            if next.start > range.end {
  445|  88.7k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   100k|        Some(range)
  453|   111k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Cs6W19jUNyVKq_7rle_ops:
  390|  20.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  99.3k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  99.3k|        let next = self.next.take()?;
  484|  99.3k|        self.next = self.iter.next();
  485|  99.3k|        Some(next)
  486|  99.3k|    }
_RNvXs0_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tailCs6W19jUNyVKq_7rle_ops:
  182|  97.4k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  97.4k|        // the difference between a range and an empty range is just that range
  184|  97.4k|        Some(lhs)
  185|  97.4k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EENtNtNtB1Y_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  438|  14.8k|    fn next(&mut self) -> Option<Self::Item> {
  439|  14.8k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  20.0k|        while let Some(next) = self.iter.peek() {
  444|  18.9k|            if next.start > range.end {
  445|  12.4k|                break;
  446|  6.43k|            }
  447|  6.43k|
  448|  6.43k|            range.end = cmp::max(range.end, next.end);
  449|  6.43k|            self.iter.next();
  450|       |        }
  451|       |
  452|  13.6k|        Some(range)
  453|  14.8k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekCs6W19jUNyVKq_7rle_ops:
  473|  82.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  82.0k|        self.next.as_mut()
  475|  82.0k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE4peekCs6W19jUNyVKq_7rle_ops:
  473|  14.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  14.2k|        self.next.as_mut()
  475|  14.2k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEENtNtNtB1Y_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  438|  8.75k|    fn next(&mut self) -> Option<Self::Item> {
  439|  8.75k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  7.35k|        while let Some(next) = self.iter.peek() {
  444|  6.18k|            if next.start > range.end {
  445|  6.18k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  7.35k|        Some(range)
  453|  8.75k|    }
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_E3newCs6W19jUNyVKq_7rle_ops:
  298|  1.05k|    pub fn new(a: A, b: B) -> Self {
  299|  1.05k|        Self(Merge::new(_Combine::new(a, b)))
  300|  1.05k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceENtNtNtB1z_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  311|  35.9k|    fn next(&mut self) -> Option<Self::Item> {
  312|  35.9k|        self.0.next()
  313|  35.9k|    }
_RNvXsf_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCskiyb6Qz9mfK_4core7default7Default7defaultCs6W19jUNyVKq_7rle_ops:
   87|  1.19k|#[derive(Default)]
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE3newCs6W19jUNyVKq_7rle_ops:
  343|  2.32k|    fn new(lhs: A, rhs: B) -> Self {
  344|  2.32k|        Self {
  345|  2.32k|            lhs: Lookahead::new(lhs),
  346|  2.32k|            rhs: Lookahead::new(rhs),
  347|  2.32k|            combinator: Default::default(),
  348|  2.32k|        }
  349|  2.32k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_ENtNtNtB1z_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  311|  14.8k|    fn next(&mut self) -> Option<Self::Item> {
  312|  14.8k|        self.0.next()
  313|  14.8k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EENtNtNtB22_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  15.2k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  15.2k|        let next = self.next.take()?;
  484|  14.2k|        self.next = self.iter.next();
  485|  14.2k|        Some(next)
  486|  15.2k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE3newCs6W19jUNyVKq_7rle_ops:
  468|  1.19k|    fn new(mut iter: I) -> Self {
  469|  1.19k|        let next = iter.next();
  470|  1.19k|        Self { iter, next }
  471|  1.19k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeCs6W19jUNyVKq_7rle_ops:
  354|  82.0k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  82.0k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  76.7k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  5.28k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  76.7k|        if advance_lhs {
  371|  76.7k|            self.lhs.next();
  372|  76.7k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  76.7k|        range
  377|  82.0k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionENtNtNtB1z_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  311|  8.75k|    fn next(&mut self) -> Option<Self::Item> {
  312|  8.75k|        self.0.next()
  313|  8.75k|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  388|  82.0k|    fn next(&mut self) -> Option<Self::Item> {
  389|  82.0k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  82.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  82.0k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  76.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  76.7k|        let next = self.next.take()?;
  484|  76.7k|        self.next = self.iter.next();
  485|  76.7k|        Some(next)
  486|  76.7k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Cs6W19jUNyVKq_7rle_ops:
  390|  19.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4nexts_0Cs6W19jUNyVKq_7rle_ops:
  390|  13.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tailCs6W19jUNyVKq_7rle_ops:
  115|  4.15k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  116|  4.15k|        Some(rhs)
  117|  4.15k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E10next_rangeCs6W19jUNyVKq_7rle_ops:
  354|  21.2k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  21.2k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|  10.8k|            (Some(lhs), Some(rhs)) => {
  357|  10.8k|                // if both iterators are non-empty, we advance the one whichever's
  358|  10.8k|                // corresponding range has a smaller upper bound
  359|  10.8k|                if lhs.end <= rhs.end {
  360|  5.64k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|  5.20k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  5.10k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|  4.15k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  1.19k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  20.0k|        if advance_lhs {
  371|  10.7k|            self.lhs.next();
  372|  10.7k|        } else {
  373|  9.35k|            self.rhs.next();
  374|  9.35k|        }
  375|       |
  376|  20.0k|        range
  377|  21.2k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EEE4peekCs6W19jUNyVKq_7rle_ops:
  473|   182k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   182k|        self.next.as_mut()
  475|   182k|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_ENtNtNtB1M_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  388|  21.2k|    fn next(&mut self) -> Option<Self::Item> {
  389|  21.2k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  21.2k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  21.2k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  88.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  88.7k|        let next = self.next.take()?;
  484|  82.0k|        self.next = self.iter.next();
  485|  82.0k|        Some(next)
  486|  88.7k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeCs6W19jUNyVKq_7rle_ops:
  354|   100k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|   100k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  88.7k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  11.3k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  88.7k|        if advance_lhs {
  371|  88.7k|            self.lhs.next();
  372|  88.7k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  88.7k|        range
  377|   100k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekCs6W19jUNyVKq_7rle_ops:
  473|   207k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   207k|        self.next.as_mut()
  475|   207k|    }
_RNvXNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tailCs6W19jUNyVKq_7rle_ops:
  110|  81.8k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  81.8k|        // the union of a range and an empty range is just that range
  112|  81.8k|        Some(lhs)
  113|  81.8k|    }
_RNvXs_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_rhs_tailCs6W19jUNyVKq_7rle_ops:
  144|    701|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  145|    701|        None
  146|    701|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  438|  88.7k|    fn next(&mut self) -> Option<Self::Item> {
  439|  88.7k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  82.0k|        while let Some(next) = self.iter.peek() {
  444|  76.7k|            if next.start > range.end {
  445|  76.7k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  82.0k|        Some(range)
  453|  88.7k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE10next_rangeCs6W19jUNyVKq_7rle_ops:
  354|  47.1k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  47.1k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|  27.0k|            (Some(lhs), Some(rhs)) => {
  357|  27.0k|                // if both iterators are non-empty, we advance the one whichever's
  358|  27.0k|                // corresponding range has a smaller upper bound
  359|  27.0k|                if lhs.end <= rhs.end {
  360|  14.7k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|  12.3k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  12.6k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|  5.05k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  2.32k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  44.7k|        if advance_lhs {
  371|  27.4k|            self.lhs.next();
  372|  27.4k|        } else {
  373|  17.3k|            self.rhs.next();
  374|  17.3k|        }
  375|       |
  376|  44.7k|        range
  377|  47.1k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE3newCs6W19jUNyVKq_7rle_ops:
  343|  1.40k|    fn new(lhs: A, rhs: B) -> Self {
  344|  1.40k|        Self {
  345|  1.40k|            lhs: Lookahead::new(lhs),
  346|  1.40k|            rhs: Lookahead::new(rhs),
  347|  1.40k|            combinator: Default::default(),
  348|  1.40k|        }
  349|  1.40k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE4peekCs6W19jUNyVKq_7rle_ops:
  473|  7.35k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  7.35k|        self.next.as_mut()
  475|  7.35k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EENtNtNtB1Y_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  438|  15.2k|    fn next(&mut self) -> Option<Self::Item> {
  439|  15.2k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  14.2k|        while let Some(next) = self.iter.peek() {
  444|  13.3k|            if next.start > range.end {
  445|  13.3k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  14.2k|        Some(range)
  453|  15.2k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E3newCs6W19jUNyVKq_7rle_ops:
  343|  1.05k|    fn new(lhs: A, rhs: B) -> Self {
  344|  1.05k|        Self {
  345|  1.05k|            lhs: Lookahead::new(lhs),
  346|  1.05k|            rhs: Lookahead::new(rhs),
  347|  1.05k|            combinator: Default::default(),
  348|  1.05k|        }
  349|  1.05k|    }
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEE3newCs6W19jUNyVKq_7rle_ops:
  425|  1.40k|    pub fn new(iter: I) -> Self {
  426|  1.40k|        Self {
  427|  1.40k|            iter: Lookahead::new(iter),
  428|  1.40k|        }
  429|  1.40k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  88.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  88.7k|        let next = self.next.take()?;
  484|  88.7k|        self.next = self.iter.next();
  485|  88.7k|        Some(next)
  486|  88.7k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekCs6W19jUNyVKq_7rle_ops:
  473|   100k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   100k|        self.next.as_mut()
  475|   100k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  311|   111k|    fn next(&mut self) -> Option<Self::Item> {
  312|   111k|        self.0.next()
  313|   111k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEENtNtNtB22_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  8.75k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  8.75k|        let next = self.next.take()?;
  484|  7.35k|        self.next = self.iter.next();
  485|  7.35k|        Some(next)
  486|  8.75k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE4peekCs6W19jUNyVKq_7rle_ops:
  473|  34.3k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  34.3k|        self.next.as_mut()
  475|  34.3k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E10next_rangeCs6W19jUNyVKq_7rle_ops:
  354|  20.4k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  20.4k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|  10.7k|            (Some(lhs), Some(rhs)) => {
  357|  10.7k|                // if both iterators are non-empty, we advance the one whichever's
  358|  10.7k|                // corresponding range has a smaller upper bound
  359|  10.7k|                if lhs.end <= rhs.end {
  360|  5.75k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|  5.00k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  8.64k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|    344|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|    710|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  19.7k|        if advance_lhs {
  371|  14.3k|            self.lhs.next();
  372|  14.3k|        } else {
  373|  5.35k|            self.rhs.next();
  374|  5.35k|        }
  375|       |
  376|  19.7k|        range
  377|  20.4k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4next0Cs6W19jUNyVKq_7rle_ops:
  390|  47.1k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EENtNtNtB22_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  21.2k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  21.2k|        let next = self.next.take()?;
  484|  20.0k|        self.next = self.iter.next();
  485|  20.0k|        Some(next)
  486|  21.2k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE3newCs6W19jUNyVKq_7rle_ops:
  468|  2.32k|    fn new(mut iter: I) -> Self {
  469|  2.32k|        let next = iter.next();
  470|  2.32k|        Self { iter, next }
  471|  2.32k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE10next_rangeCs6W19jUNyVKq_7rle_ops:
  354|  14.7k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  14.7k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|  13.3k|            (Some(lhs), Some(rhs)) => {
  357|  13.3k|                // if both iterators are non-empty, we advance the one whichever's
  358|  13.3k|                // corresponding range has a smaller upper bound
  359|  13.3k|                if lhs.end <= rhs.end {
  360|  7.06k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|  6.26k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|    699|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|    701|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|      0|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  14.7k|        if advance_lhs {
  371|  7.76k|            self.lhs.next();
  372|  7.76k|        } else {
  373|  6.96k|            self.rhs.next();
  374|  6.96k|        }
  375|       |
  376|  14.7k|        range
  377|  14.7k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  311|  88.7k|    fn next(&mut self) -> Option<Self::Item> {
  312|  88.7k|        self.0.next()
  313|  88.7k|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionENtNtNtB1M_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  388|  8.75k|    fn next(&mut self) -> Option<Self::Item> {
  389|  8.75k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  8.75k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  8.75k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCs6W19jUNyVKq_7rle_ops:
  473|  82.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  82.0k|        self.next.as_mut()
  475|  82.0k|    }
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionE3newCs6W19jUNyVKq_7rle_ops:
  298|  1.40k|    pub fn new(a: A, b: B) -> Self {
  299|  1.40k|        Self(Merge::new(_Combine::new(a, b)))
  300|  1.40k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEENtNtNtB22_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  481|  36.6k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  36.6k|        let next = self.next.take()?;
  484|  34.3k|        self.next = self.iter.next();
  485|  34.3k|        Some(next)
  486|  36.6k|    }
_RNvXsh_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCskiyb6Qz9mfK_4core7default7Default7defaultCs6W19jUNyVKq_7rle_ops:
  152|  1.05k|#[derive(Default)]
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E3newCs6W19jUNyVKq_7rle_ops:
  343|  1.19k|    fn new(lhs: A, rhs: B) -> Self {
  344|  1.19k|        Self {
  345|  1.19k|            lhs: Lookahead::new(lhs),
  346|  1.19k|            rhs: Lookahead::new(rhs),
  347|  1.19k|            combinator: Default::default(),
  348|  1.19k|        }
  349|  1.19k|    }
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EE3newCs6W19jUNyVKq_7rle_ops:
  425|  1.05k|    pub fn new(iter: I) -> Self {
  426|  1.05k|        Self {
  427|  1.05k|            iter: Lookahead::new(iter),
  428|  1.05k|        }
  429|  1.05k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4next0Cs6W19jUNyVKq_7rle_ops:
  390|  20.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4next0Cs6W19jUNyVKq_7rle_ops:
  390|  14.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE3newCs6W19jUNyVKq_7rle_ops:
  468|  1.40k|    fn new(mut iter: I) -> Self {
  469|  1.40k|        let next = iter.next();
  470|  1.40k|        Self { iter, next }
  471|  1.40k|    }
_RNvXs4_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator16advance_rhs_tailB9_:
  279|    241|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  280|    241|        None
  281|    241|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  354|  94.3k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  94.3k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  86.0k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  8.32k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  86.0k|        if advance_lhs {
  371|  86.0k|            self.lhs.next();
  372|  86.0k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  86.0k|        range
  377|  94.3k|    }
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  298|  20.2k|    pub fn new(a: A, b: B) -> Self {
  299|  20.2k|        Self(Merge::new(_Combine::new(a, b)))
  300|  20.2k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|  20.2k|    fn new(mut iter: I) -> Self {
  469|  20.2k|        let next = iter.next();
  470|  20.2k|        Self { iter, next }
  471|  20.2k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE10next_rangeB9_:
  354|  6.60k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|  6.60k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|  6.34k|            (Some(lhs), Some(rhs)) => {
  357|  6.34k|                // if both iterators are non-empty, we advance the one whichever's
  358|  6.34k|                // corresponding range has a smaller upper bound
  359|  6.34k|                if lhs.end <= rhs.end {
  360|  3.29k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|  3.05k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|      0|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|    241|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|     19|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  6.58k|        if advance_lhs {
  371|  3.29k|            self.lhs.next();
  372|  3.29k|        } else {
  373|  3.29k|            self.rhs.next();
  374|  3.29k|        }
  375|       |
  376|  6.58k|        range
  377|  6.60k|    }
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  298|  20.2k|    pub fn new(a: A, b: B) -> Self {
  299|  20.2k|        Self(Merge::new(_Combine::new(a, b)))
  300|  20.2k|    }
_RNvXs0_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tailB9_:
  182|  86.0k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  183|  86.0k|        // the difference between a range and an empty range is just that range
  184|  86.0k|        Some(lhs)
  185|  86.0k|    }
_RNvXs2_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_rhs:
  230|  12.3k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  231|  12.3k|        Self::advance(rhs, lhs)
  232|  12.3k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|   106k|    fn next(&mut self) -> Option<Self::Item> {
  439|   106k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  93.2k|        while let Some(next) = self.iter.peek() {
  444|  81.1k|            if next.start > range.end {
  445|  81.1k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  93.2k|        Some(range)
  453|   106k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|   113k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   113k|        self.next.as_mut()
  475|   113k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|    260|    fn next(&mut self) -> Option<Self::Item> {
  439|    260|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|      0|        while let Some(next) = self.iter.peek() {
  444|      0|            if next.start > range.end {
  445|      0|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|      0|        Some(range)
  453|    260|    }
_RNvMs1_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifference7advance:
  202|  27.0k|    fn advance(left: Range<u64>, right: &mut Range<u64>) -> Range<u64> {
  203|  27.0k|        if left.start <= right.start {
  204|       |            // left:       xxxx--      xx----
  205|       |            // right:      --xxxx  or  ----xx
  206|       |            // output:     xx----      xx----
  207|       |            // new right:  ----xx      ----xx
  208|       |
  209|  19.0k|            let difference = left.start..cmp::min(left.end, right.start);
  210|  19.0k|            right.start = cmp::max(right.start, left.end);
  211|  19.0k|            difference
  212|       |        } else {
  213|       |            // left:       --xx--
  214|       |            // right:      xxxxxx
  215|       |            // output:     xx----
  216|       |            // new right:  ----xx
  217|       |
  218|  8.03k|            let difference = right.start..left.start;
  219|  8.03k|            right.start = left.end;
  220|  8.03k|            difference
  221|       |        }
  222|  27.0k|    }
_RNvXNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tailB6_:
  110|  98.9k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  111|  98.9k|        // the union of a range and an empty range is just that range
  112|  98.9k|        Some(lhs)
  113|  98.9k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|  20.2k|    fn new(mut iter: I) -> Self {
  469|  20.2k|        let next = iter.next();
  470|  20.2k|        Self { iter, next }
  471|  20.2k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|  40.5k|    fn new(mut iter: I) -> Self {
  469|  40.5k|        let next = iter.next();
  470|  40.5k|        Self { iter, next }
  471|  40.5k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  94.3k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  94.3k|        self.next.as_mut()
  475|  94.3k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|  82.3k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  82.3k|        let next = self.next.take()?;
  484|  74.0k|        self.next = self.iter.next();
  485|  74.0k|        Some(next)
  486|  82.3k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|   113k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newB9_:
  468|    520|    fn new(mut iter: I) -> Self {
  469|    520|        let next = iter.next();
  470|    520|        Self { iter, next }
  471|    520|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|  86.0k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  86.0k|        let next = self.next.take()?;
  484|  86.0k|        self.next = self.iter.next();
  485|  86.0k|        Some(next)
  486|  86.0k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE3newB9_:
  343|    260|    fn new(lhs: A, rhs: B) -> Self {
  344|    260|        Self {
  345|    260|            lhs: Lookahead::new(lhs),
  346|    260|            rhs: Lookahead::new(rhs),
  347|    260|            combinator: Default::default(),
  348|    260|        }
  349|    260|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|   106k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   106k|        let next = self.next.take()?;
  484|  93.2k|        self.next = self.iter.next();
  485|  93.2k|        Some(next)
  486|   106k|    }
_RNvXsh_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB9_:
  152|  20.2k|#[derive(Default)]
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|  20.2k|    pub fn new(iter: I) -> Self {
  426|  20.2k|        Self {
  427|  20.2k|            iter: Lookahead::new(iter),
  428|  20.2k|        }
  429|  20.2k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  354|   113k|    fn next_range(&mut self) -> Option<Range<u64>> {
  355|   113k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  356|      0|            (Some(lhs), Some(rhs)) => {
  357|      0|                // if both iterators are non-empty, we advance the one whichever's
  358|      0|                // corresponding range has a smaller upper bound
  359|      0|                if lhs.end <= rhs.end {
  360|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  361|       |                } else {
  362|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  363|       |                }
  364|       |            }
  365|  98.9k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  366|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  367|  14.5k|            (None, None) => return None,
  368|       |        };
  369|       |
  370|  98.9k|        if advance_lhs {
  371|  98.9k|            self.lhs.next();
  372|  98.9k|        } else {
  373|      0|            self.rhs.next();
  374|      0|        }
  375|       |
  376|  98.9k|        range
  377|   113k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  343|  20.2k|    fn new(lhs: A, rhs: B) -> Self {
  344|  20.2k|        Self {
  345|  20.2k|            lhs: Lookahead::new(lhs),
  346|  20.2k|            rhs: Lookahead::new(rhs),
  347|  20.2k|            combinator: Default::default(),
  348|  20.2k|        }
  349|  20.2k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  6.60k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs0_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  164|  5.00k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  165|  5.00k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  166|  5.00k|        // to avoid it from returning invalid bits in the next iteration
  167|  5.00k|        //
  168|  5.00k|        // e.g. `--xxxx`, `xxxx--` should first produce
  169|  5.00k|        // `------` and then `----xx`, not
  170|  5.00k|        // `------` and then `--xxxx`
  171|  5.00k|        //
  172|  5.00k|        // lhs:      ----xx      --xxxx      xxxxxx
  173|  5.00k|        // rhs:      xx----  or  xxxx--  or  --xx--
  174|  5.00k|        // output:   ------      ------      xx----
  175|  5.00k|        // new lhs:  ----xx      ----xx      ----xx
  176|  5.00k|
  177|  5.00k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  178|  5.00k|        lhs.start = cmp::max(lhs.start, rhs.end);
  179|  5.00k|        difference
  180|  5.00k|    }
_RNvXs2_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_lhs:
  226|  14.7k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  227|  14.7k|        Self::advance(lhs, rhs)
  228|  14.7k|    }
_RNvMs3_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_3Cut6offset:
  257|  6.34k|    fn offset(&self, range: Range<u64>) -> Range<u64> {
  258|  6.34k|        (range.start - self.offset)..(range.end - self.offset)
  259|  6.34k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  311|    260|    fn next(&mut self) -> Option<Self::Item> {
  312|    260|        self.0.next()
  313|    260|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|  93.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  93.2k|        self.next.as_mut()
  475|  93.2k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|  98.9k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  98.9k|        let next = self.next.take()?;
  484|  98.9k|        self.next = self.iter.next();
  485|  98.9k|        Some(next)
  486|  98.9k|    }
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  311|   106k|    fn next(&mut self) -> Option<Self::Item> {
  312|   106k|        self.0.next()
  313|   106k|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  388|  94.3k|    fn next(&mut self) -> Option<Self::Item> {
  389|  94.3k|        // we repeatedly compute the next range until we find one that is non-empty
  390|  94.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|  94.3k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|  94.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  311|  82.3k|    fn next(&mut self) -> Option<Self::Item> {
  312|  82.3k|        self.0.next()
  313|  82.3k|    }
_RNvXNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  106|  5.20k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  107|  5.20k|        cmp::min(lhs.start, rhs.start)..rhs.end
  108|  5.20k|    }
_RNvXs4_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_rhs:
  268|  3.05k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  269|  3.05k|        let cut = self.offset(lhs.start..cmp::min(lhs.end, rhs.start));
  270|  3.05k|        lhs.start = cmp::max(lhs.start, rhs.end);
  271|  3.05k|        self.offset += rhs.size();
  272|  3.05k|        cut
  273|  3.05k|    }
_RNvXNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   91|  5.64k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   92|  5.64k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   93|  5.64k|        // to ensure that the lower bounds are monotonically increasing
   94|  5.64k|        //
   95|  5.64k|        // e.g. `--xx--`, `xxxxxx` should first produce
   96|  5.64k|        // `xxxx--` and then `xxxxxx`, not
   97|  5.64k|        // `--xx--` and then `xxxxxx`
   98|  5.64k|        //
   99|  5.64k|        // lhs:     xx----      xxxx--      --xx--
  100|  5.64k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  101|  5.64k|        // output:  xx----      xxxx--      xxxx--
  102|  5.64k|
  103|  5.64k|        cmp::min(lhs.start, rhs.start)..lhs.end
  104|  5.64k|    }
_RNvXs_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_rhs:
  135|  6.26k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  136|  6.26k|        cmp::max(lhs.start, rhs.start)..rhs.end
  137|  6.26k|    }
_RNvXs4_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_lhs:
  263|  3.29k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  264|  3.29k|        // apart from the offset, these implementations are identical to those of the `Difference` combinator
  265|  3.29k|        self.offset(lhs.start..cmp::min(lhs.end, rhs.start))
  266|  3.29k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEE3newB9_:
  468|    260|    fn new(mut iter: I) -> Self {
  469|    260|        let next = iter.next();
  470|    260|        Self { iter, next }
  471|    260|    }
_RNvXs_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_lhs:
  127|  7.06k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  128|  7.06k|        // lhs:     xx----      xxxx--      --xx--
  129|  7.06k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  130|  7.06k|        // output:  ------      --xx--      --xx--
  131|  7.06k|
  132|  7.06k|        cmp::max(lhs.start, rhs.start)..lhs.end
  133|  7.06k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  20.2k|    fn new(mut iter: I) -> Self {
  469|  20.2k|        let next = iter.next();
  470|  20.2k|        Self { iter, next }
  471|  20.2k|    }
_RNvMs8_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  343|  20.2k|    fn new(lhs: A, rhs: B) -> Self {
  344|  20.2k|        Self {
  345|  20.2k|            lhs: Lookahead::new(lhs),
  346|  20.2k|            rhs: Lookahead::new(rhs),
  347|  20.2k|            combinator: Default::default(),
  348|  20.2k|        }
  349|  20.2k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|  86.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMs5_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutE3newB9_:
  298|    260|    pub fn new(a: A, b: B) -> Self {
  299|    260|        Self(Merge::new(_Combine::new(a, b)))
  300|    260|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  481|  6.58k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  6.58k|        let next = self.next.take()?;
  484|  6.58k|        self.next = self.iter.next();
  485|  6.58k|        Some(next)
  486|  6.58k|    }
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEE3newB9_:
  425|    260|    pub fn new(iter: I) -> Self {
  426|    260|        Self {
  427|    260|            iter: Lookahead::new(iter),
  428|    260|        }
  429|    260|    }
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  388|   113k|    fn next(&mut self) -> Option<Self::Item> {
  389|   113k|        // we repeatedly compute the next range until we find one that is non-empty
  390|   113k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|   113k|    }
_RNvXsb_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|  82.3k|    fn next(&mut self) -> Option<Self::Item> {
  439|  82.3k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  74.0k|        while let Some(next) = self.iter.peek() {
  444|  68.1k|            if next.start > range.end {
  445|  68.1k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  74.0k|        Some(range)
  453|  82.3k|    }
_RNvXsj_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB9_:
  248|    260|#[derive(Default)]
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  6.34k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  388|    260|    fn next(&mut self) -> Option<Self::Item> {
  389|    260|        // we repeatedly compute the next range until we find one that is non-empty
  390|    260|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  391|    260|    }
_RNvMsa_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|  20.2k|    pub fn new(iter: I) -> Self {
  426|  20.2k|        Self {
  427|  20.2k|            iter: Lookahead::new(iter),
  428|  20.2k|        }
  429|  20.2k|    }
_RNCNvXs9_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|  98.9k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekB9_:
  473|  13.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  13.2k|        self.next.as_mut()
  475|  13.2k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  20.2k|    fn new(mut iter: I) -> Self {
  469|  20.2k|        let next = iter.next();
  470|  20.2k|        Self { iter, next }
  471|  20.2k|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|   207k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   207k|        self.next.as_mut()
  475|   207k|    }
_RNvXse_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|    260|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|    260|        let next = self.next.take()?;
  484|      0|        self.next = self.iter.next();
  485|      0|        Some(next)
  486|    260|    }
_RNvMsd_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|  74.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  74.0k|        self.next.as_mut()
  475|  74.0k|    }
_RNvXsf_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB9_:
   87|  20.2k|#[derive(Default)]
_RNvXs0_NtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  156|  5.75k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  157|  5.75k|        // lhs:     xx----      xxxx--      --xx--
  158|  5.75k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  159|  5.75k|        // output:  xx----      xx----      ------
  160|  5.75k|
  161|  5.75k|        lhs.start..cmp::min(lhs.end, rhs.start)
  162|  5.75k|    }

_RINvYINtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator10differenceB3_ECs6W19jUNyVKq_7rle_ops:
   32|  1.05k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|  1.05k|        Combine::new(self, other)
   34|  1.05k|    }
_RINvYINtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator12intersectionB3_ECs6W19jUNyVKq_7rle_ops:
   27|  1.40k|    fn intersection<R: RangeIterator>(self, other: R) -> Combine<Self, R, Intersection> {
   28|  1.40k|        Combine::new(self, other)
   29|  1.40k|    }
_RINvYINtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator20symmetric_differenceB3_ECs6W19jUNyVKq_7rle_ops:
   37|  2.32k|    fn symmetric_difference<R: RangeIterator>(
   38|  2.32k|        self,
   39|  2.32k|        other: R,
   40|  2.32k|    ) -> Combine<Self, R, SymmetricDifference> {
   41|  2.32k|        Combine::new(self, other)
   42|  2.32k|    }
_RNvXs3_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextCs6W19jUNyVKq_7rle_ops:
  154|  76.7k|    fn next(&mut self) -> Option<Self::Item> {
  155|  76.7k|        self.0.next()
  156|  76.7k|    }
_RINvYINtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator5unionB3_ECs6W19jUNyVKq_7rle_ops:
   22|  1.19k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|  1.19k|        Combine::new(self, other)
   24|  1.19k|    }
_RINvYINtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator3cutB3_EBa_:
   54|    260|    fn cut<R: RangeIterator>(self, other: R) -> Combine<Self, R, Cut> {
   55|    260|        Combine::new(self, other)
   56|    260|    }
_RINvYINtNtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   32|  20.2k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   33|  20.2k|        Combine::new(self, other)
   34|  20.2k|    }
_RINvMs2_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  140|  20.2k|    pub fn new<II>(iter: II) -> Self
  141|  20.2k|    where
  142|  20.2k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  20.2k|    {
  144|  20.2k|        Self(iter.into_iter())
  145|  20.2k|    }
_RNCINvNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0B6_:
  167|  40.5k|    Ranges::new(iter::from_fn(move || {
  168|  40.5k|        let start = iter.next()?;
  169|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|      0|        while let Some(&next) = iter.peek() {
  171|      0|            if next < end {
  172|      0|                panic!("out of order bitfield")
  173|      0|            } else if next > end {
  174|      0|                break;
  175|      0|            }
  176|      0|            end = end.checked_add(1).expect("bitfield overflow");
  177|      0|            iter.next();
  178|       |        }
  179|      0|        Some(start..end)
  180|  40.5k|    }))
_RINvNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEEB4_:
  164|  40.5k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  165|  40.5k|    let mut iter = bits.into_iter().peekable();
  166|  40.5k|
  167|  40.5k|    Ranges::new(iter::from_fn(move || {
  168|       |        let start = iter.next()?;
  169|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  170|       |        while let Some(&next) = iter.peek() {
  171|       |            if next < end {
  172|       |                panic!("out of order bitfield")
  173|       |            } else if next > end {
  174|       |                break;
  175|       |            }
  176|       |            end = end.checked_add(1).expect("bitfield overflow");
  177|       |            iter.next();
  178|       |        }
  179|       |        Some(start..end)
  180|  40.5k|    }))
  181|  40.5k|}
_RNvXs3_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|  40.5k|    fn next(&mut self) -> Option<Self::Item> {
  155|  40.5k|        self.0.next()
  156|  40.5k|    }
_RINvMs2_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  140|  40.5k|    pub fn new<II>(iter: II) -> Self
  141|  40.5k|    where
  142|  40.5k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  143|  40.5k|    {
  144|  40.5k|        Self(iter.into_iter())
  145|  40.5k|    }
_RINvYINtNtCsbsVpavNDNjO_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   22|  20.2k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   23|  20.2k|        Combine::new(self, other)
   24|  20.2k|    }
_RNvXs3_NtCsbsVpavNDNjO_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  154|   119k|    fn next(&mut self) -> Option<Self::Item> {
  155|   119k|        self.0.next()
  156|   119k|    }

_RINvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_19SymmetricDifferenceEECs6W19jUNyVKq_7rle_ops:
  145|  2.32k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  146|  2.32k|        Self {
  147|  2.32k|            ranges: iter.collect(),
  148|  2.32k|            ..Default::default()
  149|  2.32k|        }
  150|  2.32k|    }
_RNvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitField18is_trivially_emptyCs6W19jUNyVKq_7rle_ops:
  306|  16.2k|    fn is_trivially_empty(&self) -> bool {
  307|  16.2k|        self.set.is_empty() && self.ranges.is_empty()
  308|  16.2k|    }
_RINvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6y_EECs6W19jUNyVKq_7rle_ops:
  145|  1.05k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  146|  1.05k|        Self {
  147|  1.05k|            ranges: iter.collect(),
  148|  1.05k|            ..Default::default()
  149|  1.05k|        }
  150|  1.05k|    }
_RNvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitField3newCs6W19jUNyVKq_7rle_ops:
  136|  1.20k|    pub const fn new() -> Self {
  137|  1.20k|        Self {
  138|  1.20k|            ranges: Vec::new(),
  139|  1.20k|            set: BTreeSet::new(),
  140|  1.20k|            unset: BTreeSet::new(),
  141|  1.20k|        }
  142|  1.20k|    }
_RINvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6h_EECs6W19jUNyVKq_7rle_ops:
  145|  1.19k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  146|  1.19k|        Self {
  147|  1.19k|            ranges: iter.collect(),
  148|  1.19k|            ..Default::default()
  149|  1.19k|        }
  150|  1.19k|    }
_RNvXsa_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCskiyb6Qz9mfK_4core7default7Default7defaultCs6W19jUNyVKq_7rle_ops:
   42|  5.96k|#[derive(Debug, Default, Clone)]
_RNvXsb_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCskiyb6Qz9mfK_4core5clone5Clone5cloneCs6W19jUNyVKq_7rle_ops:
   42|  2.19k|#[derive(Debug, Default, Clone)]
_RINvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_12IntersectionEECs6W19jUNyVKq_7rle_ops:
  145|  1.40k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  146|  1.40k|        Self {
  147|  1.40k|            ranges: iter.collect(),
  148|  1.40k|            ..Default::default()
  149|  1.40k|        }
  150|  1.40k|    }
_RNvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  289|  20.2k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  290|  20.2k|        self.inner_ranges()
  291|  20.2k|            .union(ranges_from_bits(self.set.iter().copied()))
  292|  20.2k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  293|  20.2k|    }
_RINvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCskiyb6Qz9mfK_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbJTWGl6dkHx_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_3CutEEB6_:
  145|    260|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  146|    260|        Self {
  147|    260|            ranges: iter.collect(),
  148|    260|            ..Default::default()
  149|    260|        }
  150|    260|    }
_RNvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitField12inner_rangesB5_:
  283|  20.2k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  284|  20.2k|        iter::Ranges::new(self.ranges.iter().cloned())
  285|  20.2k|    }
_RNvMs4_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitField3cut:
  339|    260|    pub fn cut(&self, other: &Self) -> Self {
  340|    260|        Self::from_ranges(self.ranges().cut(other.ranges()))
  341|    260|    }
_RNvXsa_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCskiyb6Qz9mfK_4core7default7Default7defaultB5_:
   42|  1.30k|#[derive(Debug, Default, Clone)]
_RNvXs_CsbsVpavNDNjO_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCskiyb6Qz9mfK_4core3cmp9PartialEq2eq:
   53|  3.90k|    fn eq(&self, other: &Self) -> bool {
   54|  3.90k|        Iterator::eq(self.ranges(), other.ranges())
   55|  3.90k|    }

_RNvXNtCsbsVpavNDNjO_17fvm_ipld_bitfield3opsRNtB4_8BitFieldNtNtNtCskiyb6Qz9mfK_4core3ops3bit5BitOr5bitorCs6W19jUNyVKq_7rle_ops:
   18|  1.82k|    fn bitor(self, rhs: &BitField) -> Self::Output {
   19|  1.82k|        if self.is_trivially_empty() {
   20|    365|            rhs.clone()
   21|  1.45k|        } else if rhs.is_trivially_empty() {
   22|    262|            self.clone()
   23|       |        } else {
   24|  1.19k|            BitField::from_ranges(self.ranges().union(rhs.ranges()))
   25|       |        }
   26|  1.82k|    }
_RNvXsa_NtCsbsVpavNDNjO_17fvm_ipld_bitfield3opsRNtB7_8BitFieldNtNtNtCskiyb6Qz9mfK_4core3ops5arith3Sub3subCs6W19jUNyVKq_7rle_ops:
  155|  1.56k|    fn sub(self, rhs: &BitField) -> Self::Output {
  156|  1.56k|        if self.is_trivially_empty() || rhs.is_trivially_empty() {
  157|    506|            self.clone()
  158|       |        } else {
  159|  1.05k|            BitField::from_ranges(self.ranges().difference(rhs.ranges()))
  160|       |        }
  161|  1.56k|    }
_RNvXs4_NtCsbsVpavNDNjO_17fvm_ipld_bitfield3opsRNtB7_8BitFieldNtNtNtCskiyb6Qz9mfK_4core3ops3bit6BitAnd6bitandCs6W19jUNyVKq_7rle_ops:
   92|  2.08k|    fn bitand(self, rhs: &BitField) -> Self::Output {
   93|  2.08k|        if self.is_trivially_empty() || rhs.is_trivially_empty() {
   94|    680|            BitField::new()
   95|       |        } else {
   96|  1.40k|            BitField::from_ranges(self.ranges().intersection(rhs.ranges()))
   97|       |        }
   98|  2.08k|    }
_RNvXsg_NtCsbsVpavNDNjO_17fvm_ipld_bitfield3opsRNtB7_8BitFieldNtNtNtCskiyb6Qz9mfK_4core3ops3bit6BitXor6bitxorCs6W19jUNyVKq_7rle_ops:
  222|  3.38k|    fn bitxor(self, rhs: &BitField) -> Self::Output {
  223|  3.38k|        if self.is_trivially_empty() {
  224|    477|            rhs.clone()
  225|  2.90k|        } else if rhs.is_trivially_empty() {
  226|    583|            self.clone()
  227|       |        } else {
  228|  2.32k|            BitField::from_ranges(self.ranges().symmetric_difference(rhs.ranges()))
  229|       |        }
  230|  3.38k|    }

_RNvXNtCsbsVpavNDNjO_17fvm_ipld_bitfield5rangeINtNtNtCskiyb6Qz9mfK_4core3ops5range5RangeyENtB2_9RangeSize4size:
   16|  3.05k|    fn size(&self) -> Self::Idx {
   17|  3.05k|        if self.end <= self.start {
   18|      0|            0
   19|       |        } else {
   20|  3.05k|            self.end - self.start
   21|       |        }
   22|  3.05k|    }

_RNvXs0_NtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs4d2vEZvX996_9arbitrary9Arbitrary9size_hint:
  151|    783|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  152|    783|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  153|    783|    }
_RNvXs0_NtCsbsVpavNDNjO_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCs4d2vEZvX996_9arbitrary9Arbitrary9arbitrary:
  115|  1.04k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  116|  1.04k|        let mut next_value: bool = bool::arbitrary(u)?;
  117|  1.04k|        let mut ranges = Vec::new();
  118|  1.04k|        let mut index = 0u64;
  119|  1.04k|        let mut total_len: u64 = 0;
  120|       |
  121|  1.04k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  122|       |
  123|  1.04k|        for _ in 0..size {
  124|       |            // 3 line crappy "power-law" distribution
  125|  10.1k|            let len = u64::arbitrary(u)?;
  126|  10.1k|            let shift = u.int_in_range(0..=63)?;
  127|  10.1k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  128|  10.1k|
  129|  10.1k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  130|  10.1k|            if ovf {
  131|     52|                break;
  132|  10.0k|            }
  133|  10.0k|            total_len = new_total_len;
  134|  10.0k|            let start = index;
  135|  10.0k|            index += len;
  136|  10.0k|            let end = index;
  137|  10.0k|
  138|  10.0k|            if next_value {
  139|  5.19k|                ranges.push(start..end);
  140|  5.19k|            }
  141|       |
  142|  10.0k|            next_value = !next_value;
  143|       |        }
  144|       |
  145|  1.04k|        Ok(Self {
  146|  1.04k|            ranges,
  147|  1.04k|            ..Default::default()
  148|  1.04k|        })
  149|  1.04k|    }

