_RINvCsb8G4YbINvyB_9arbitrary16try_create_arrayNCNvXs8_B2_ANtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9arbitrary0BU_KB1C_ECsjdxco8xy17q_7rle_ops:
  617|    756|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    756|where
  619|    756|    F: FnMut(usize) -> Result<T>,
  620|    756|{
  621|    756|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    756|    let array_ptr = array.as_mut_ptr();
  623|    756|    let dst = array_ptr as _;
  624|    756|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    756|        dst,
  626|    756|        initialized: 0,
  627|    756|    };
  628|       |    unsafe {
  629|  2.26k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  2.26k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  2.26k|            guard.initialized += 1;
  632|       |        }
  633|    756|        mem::forget(guard);
  634|    756|        Ok(array.assume_init())
  635|       |    }
  636|    756|}
_RNvXs8_Csb8G4YbINvyB_9arbitraryANtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary19arbitrary_take_restCsjdxco8xy17q_7rle_ops:
  648|    756|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  649|    756|        let mut array = Self::arbitrary(&mut u)?;
  650|    756|        if let Some(last) = array.last_mut() {
  651|    756|            *last = Arbitrary::arbitrary_take_rest(u)?;
  652|      0|        }
  653|    756|        Ok(array)
  654|    756|    }
_RNCNvXs8_Csb8G4YbINvyB_9arbitraryANtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9arbitrary0Csjdxco8xy17q_7rle_ops:
  644|  2.26k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNCNvXs8_Csb8G4YbINvyB_9arbitraryANtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9size_hint0Csjdxco8xy17q_7rle_ops:
  658|  2.31k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  2.31k|            <T as Arbitrary>::size_hint(d)
  660|  2.31k|        }))
_RNvXs8_Csb8G4YbINvyB_9arbitraryANtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9arbitraryCsjdxco8xy17q_7rle_ops:
  643|    756|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    756|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    756|    }
_RNvXs8_Csb8G4YbINvyB_9arbitraryANtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9size_hintCsjdxco8xy17q_7rle_ops:
  657|    770|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    770|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    770|        }))
  661|    770|    }
_RINvCsb8G4YbINvyB_9arbitrary12create_arrayNCNvXs8_B2_ANtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9size_hint0TjINtNtCsagdPUWTkxFn_4core6option6OptionjEEKB1y_ECsjdxco8xy17q_7rle_ops:
  596|    770|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    770|where
  598|    770|    F: FnMut(usize) -> T,
  599|    770|{
  600|    770|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    770|    let array_ptr = array.as_mut_ptr();
  602|    770|    let dst = array_ptr as _;
  603|    770|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    770|        dst,
  605|    770|        initialized: 0,
  606|    770|    };
  607|       |    unsafe {
  608|  2.31k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  2.31k|            core::ptr::write(value_ptr, cb(idx));
  610|  2.31k|            guard.initialized += 1;
  611|  2.31k|        }
  612|    770|        mem::forget(guard);
  613|    770|        array.assume_init()
  614|    770|    }
  615|    770|}
_RNvYNtCs9j0B7lO3VOx_17fvm_ipld_bitfield8BitFieldNtCsb8G4YbINvyB_9arbitrary9Arbitrary19arbitrary_take_restCsjdxco8xy17q_7rle_ops:
  182|    756|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    756|        Self::arbitrary(&mut u)
  184|    756|    }
_RNvXs1j_Csb8G4YbINvyB_9arbitraryTyhENtB6_9Arbitrary9size_hintCs9j0B7lO3VOx_17fvm_ipld_bitfield:
  568|  3.02k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  3.02k|                crate::size_hint::and_all(&[
  570|  3.02k|                    <$last as Arbitrary>::size_hint(depth),
  571|  3.02k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  3.02k|                ])
  573|  3.02k|            }
_RNvXsH_Csb8G4YbINvyB_9arbitraryjNtB5_9Arbitrary9size_hintCs9j0B7lO3VOx_17fvm_ipld_bitfield:
  302|  2.31k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  2.31k|                    let n = mem::size_of::<$ty>();
  304|  2.31k|                    (n, Some(n))
  305|  2.31k|                }
_RNvXsF_Csb8G4YbINvyB_9arbitraryyNtB5_9Arbitrary9size_hintCs9j0B7lO3VOx_17fvm_ipld_bitfield:
  302|  3.02k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  3.02k|                    let n = mem::size_of::<$ty>();
  304|  3.02k|                    (n, Some(n))
  305|  3.02k|                }
_RNvXsC_Csb8G4YbINvyB_9arbitraryhNtB5_9Arbitrary9size_hintCs9j0B7lO3VOx_17fvm_ipld_bitfield:
  302|  3.02k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  3.02k|                    let n = mem::size_of::<$ty>();
  304|  3.02k|                    (n, Some(n))
  305|  3.02k|                }
_RNvXs_Csb8G4YbINvyB_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  3.02k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  3.02k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  3.02k|    }
_RNvXsF_Csb8G4YbINvyB_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  48.7k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  48.7k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  48.7k|                    u.fill_buffer(&mut buf)?;
  294|  48.7k|                    let mut x: $unsigned = 0;
  295|   389k|                    for i in 0..mem::size_of::<$ty>() {
  296|   389k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   389k|                    }
  298|  48.7k|                    Ok(x as $ty)
  299|  48.7k|                }
_RNvXsC_Csb8G4YbINvyB_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  3.02k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  3.02k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  3.02k|                    u.fill_buffer(&mut buf)?;
  294|  3.02k|                    let mut x: $unsigned = 0;
  295|  3.02k|                    for i in 0..mem::size_of::<$ty>() {
  296|  3.02k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  3.02k|                    }
  298|  3.02k|                    Ok(x as $ty)
  299|  3.02k|                }

_RNCNvNtCsb8G4YbINvyB_9arbitrary9size_hint3and0Csjdxco8xy17q_7rle_ops:
   28|    770|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsb8G4YbINvyB_9arbitrary9size_hint7and_allCsjdxco8xy17q_7rle_ops:
   37|    770|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    770|    hints.iter().copied().fold((0, Some(0)), and)
   39|    770|}
_RNvNtCsb8G4YbINvyB_9arbitrary9size_hint3andCsjdxco8xy17q_7rle_ops:
   26|  2.31k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  2.31k|    let lower = lhs.0 + rhs.0;
   28|  2.31k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  2.31k|    (lower, upper)
   30|  2.31k|}
_RNvNtCsb8G4YbINvyB_9arbitrary9size_hint7and_allCs9j0B7lO3VOx_17fvm_ipld_bitfield:
   37|  3.02k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  3.02k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  3.02k|}
_RNCNvNtCsb8G4YbINvyB_9arbitrary9size_hint3and0Cs9j0B7lO3VOx_17fvm_ipld_bitfield:
   28|  8.35k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsb8G4YbINvyB_9arbitrary9size_hint3andCs9j0B7lO3VOx_17fvm_ipld_bitfield:
   26|  8.35k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  8.35k|    let lower = lhs.0 + rhs.0;
   28|  8.35k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  8.35k|    (lower, upper)
   30|  8.35k|}
_RNCNCNvNtCsb8G4YbINvyB_9arbitrary9size_hint3and00Cs9j0B7lO3VOx_17fvm_ipld_bitfield:
   28|  6.04k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECs9j0B7lO3VOx_17fvm_ipld_bitfield:
  301|  48.7k|    fn int_in_range_impl<T>(
  302|  48.7k|        range: ops::RangeInclusive<T>,
  303|  48.7k|        mut bytes: impl Iterator<Item = u8>,
  304|  48.7k|    ) -> Result<(T, usize)>
  305|  48.7k|    where
  306|  48.7k|        T: Int,
  307|  48.7k|    {
  308|  48.7k|        let start = range.start();
  309|  48.7k|        let end = range.end();
  310|  48.7k|        assert!(
  311|  48.7k|            start <= end,
  312|  48.7k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  48.7k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  48.7k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  48.7k|        }
  320|  48.7k|
  321|  48.7k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  48.7k|        let mut result = T::Widest::ZERO;
  323|  48.7k|        let mut offset: usize = 0;
  324|       |
  325|  97.4k|        while offset < mem::size_of::<T>()
  326|  97.4k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  48.7k|        {
  328|  48.7k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  48.7k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  48.7k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  48.7k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  48.7k|            result = result % range;
  336|  48.7k|        }
  337|       |
  338|  48.7k|        Ok((
  339|  48.7k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  48.7k|            offset,
  341|  48.7k|        ))
  342|  48.7k|    }
_RINvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECs9j0B7lO3VOx_17fvm_ipld_bitfield:
  213|  3.02k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  3.02k|    where
  215|  3.02k|        ElementType: Arbitrary<'a>,
  216|  3.02k|    {
  217|  3.02k|        let byte_size = self.arbitrary_byte_size()?;
  218|  3.02k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  3.02k|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|  3.02k|        let elem_size = std::cmp::max(1, elem_size);
  221|  3.02k|        Ok(byte_size / elem_size)
  222|  3.02k|    }
_RINvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECs9j0B7lO3VOx_17fvm_ipld_bitfield:
  292|  48.7k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  48.7k|    where
  294|  48.7k|        T: Int,
  295|  48.7k|    {
  296|  48.7k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  48.7k|        self.data = &self.data[bytes_consumed..];
  298|  48.7k|        Ok(result)
  299|  48.7k|    }
_RNvXs5_NtCsb8G4YbINvyB_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  3.65k|                fn from_usize(u: usize) -> Self {
  781|  3.65k|                    u as Self
  782|  3.65k|                }
_RINvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    791|    fn int_in_range_impl<T>(
  302|    791|        range: ops::RangeInclusive<T>,
  303|    791|        mut bytes: impl Iterator<Item = u8>,
  304|    791|    ) -> Result<(T, usize)>
  305|    791|    where
  306|    791|        T: Int,
  307|    791|    {
  308|    791|        let start = range.start();
  309|    791|        let end = range.end();
  310|    791|        assert!(
  311|    791|            start <= end,
  312|    791|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    791|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    791|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    791|        }
  320|    791|
  321|    791|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    791|        let mut result = T::Widest::ZERO;
  323|    791|        let mut offset: usize = 0;
  324|       |
  325|  2.37k|        while offset < mem::size_of::<T>()
  326|  1.58k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  1.57k|        {
  328|  1.57k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  1.57k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  1.57k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    791|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    791|            result = result % range;
  336|    791|        }
  337|       |
  338|    791|        Ok((
  339|    791|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    791|            offset,
  341|    791|        ))
  342|    791|    }
_RINvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|  2.06k|    fn int_in_range_impl<T>(
  302|  2.06k|        range: ops::RangeInclusive<T>,
  303|  2.06k|        mut bytes: impl Iterator<Item = u8>,
  304|  2.06k|    ) -> Result<(T, usize)>
  305|  2.06k|    where
  306|  2.06k|        T: Int,
  307|  2.06k|    {
  308|  2.06k|        let start = range.start();
  309|  2.06k|        let end = range.end();
  310|  2.06k|        assert!(
  311|  2.06k|            start <= end,
  312|  2.06k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  2.06k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  2.06k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  2.06k|        }
  320|  2.06k|
  321|  2.06k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  2.06k|        let mut result = T::Widest::ZERO;
  323|  2.06k|        let mut offset: usize = 0;
  324|       |
  325|  4.13k|        while offset < mem::size_of::<T>()
  326|  2.06k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  2.06k|        {
  328|  2.06k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  2.06k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  2.06k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  2.06k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  2.06k|            result = result % range;
  336|  2.06k|        }
  337|       |
  338|  2.06k|        Ok((
  339|  2.06k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  2.06k|            offset,
  341|  2.06k|        ))
  342|  2.06k|    }
_RNvXs1_NtCsb8G4YbINvyB_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|  2.06k|                fn from_widest(w: Self::Widest) -> Self {
  772|  2.06k|                    let x = <$ty>::max_value().as_widest();
  773|  2.06k|                    (w % x) as Self
  774|  2.06k|                }
_RNvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  3.02k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  3.02k|        if self.data.is_empty() {
  226|    101|            Ok(0)
  227|  2.92k|        } else if self.data.len() == 1 {
  228|     63|            self.data = &[];
  229|     63|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|  2.86k|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|  2.06k|                let bytes = 1;
  241|  2.06k|                let max_size = self.data.len() - bytes;
  242|  2.06k|                let (rest, for_size) = self.data.split_at(max_size);
  243|  2.06k|                self.data = rest;
  244|  2.06k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|    791|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|    791|                let bytes = 2;
  247|    791|                let max_size = self.data.len() - bytes;
  248|    791|                let (rest, for_size) = self.data.split_at(max_size);
  249|    791|                self.data = rest;
  250|    791|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|  2.86k|            Ok(len)
  266|       |        }
  267|  3.02k|    }
_RNvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  51.7k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  51.7k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  51.7k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  51.7k|        for byte in buffer[n..].iter_mut() {
  453|     75|            *byte = 0;
  454|     75|        }
  455|  51.7k|        self.data = &self.data[n..];
  456|  51.7k|        Ok(())
  457|  51.7k|    }
_RNvXs2_NtCsb8G4YbINvyB_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|  3.16k|                fn as_widest(self) -> Self::Widest {
  768|  3.16k|                    self as $widest
  769|  3.16k|                }
_RNvXs9_NtCsb8G4YbINvyB_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  48.7k|                fn from_widest(w: Self::Widest) -> Self {
  772|  48.7k|                    let x = <$ty>::max_value().as_widest();
  773|  48.7k|                    (w % x) as Self
  774|  48.7k|                }
_RNvXsb_NtCsb8G4YbINvyB_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  48.7k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  48.7k|                    <$ty>::wrapping_add(self, rhs)
  790|  48.7k|                }
_RNvXsb_NtCsb8G4YbINvyB_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  48.7k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  48.7k|                    <$ty>::checked_add(self, rhs)
  786|  48.7k|                }
_RNvXsb_NtCsb8G4YbINvyB_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  97.4k|                fn from_usize(u: usize) -> Self {
  781|  97.4k|                    u as Self
  782|  97.4k|                }
_RNvXs1_NtCsb8G4YbINvyB_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  8.27k|                fn as_widest(self) -> Self::Widest {
  768|  8.27k|                    self as $widest
  769|  8.27k|                }
_RNvXs9_NtCsb8G4YbINvyB_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|   194k|                fn as_widest(self) -> Self::Widest {
  768|   194k|                    self as $widest
  769|   194k|                }
_RNvXs5_NtCsb8G4YbINvyB_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|  2.86k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  2.86k|                    <$ty>::checked_add(self, rhs)
  786|  2.86k|                }
_RNvMNtCsb8G4YbINvyB_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    756|    pub fn new(data: &'a [u8]) -> Self {
   86|    756|        Unstructured { data }
   87|    756|    }
_RNvXs2_NtCsb8G4YbINvyB_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|    791|                fn from_widest(w: Self::Widest) -> Self {
  772|    791|                    let x = <$ty>::max_value().as_widest();
  773|    791|                    (w % x) as Self
  774|    791|                }
_RNvXs5_NtCsb8G4YbINvyB_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  3.64k|                fn from_u8(b: u8) -> Self {
  777|  3.64k|                    b as Self
  778|  3.64k|                }
_RNvXsb_NtCsb8G4YbINvyB_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  48.7k|                fn from_u8(b: u8) -> Self {
  777|  48.7k|                    b as Self
  778|  48.7k|                }
_RNvXs5_NtCsb8G4YbINvyB_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|  2.86k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  2.86k|                    <$ty>::wrapping_add(self, rhs)
  790|  2.86k|                }

rust_fuzzer_test_input:
  167|    770|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    770|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    770|
  170|    770|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    770|            // implementation. This helps the fuzzer avoid exploring all the
  172|    770|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    770|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    770|            // get to longer inputs that actually lead to interesting executions
  175|    770|            // quicker.
  176|    770|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|     14|                return;
  178|    756|            }
  179|    756|
  180|    756|            let mut u = Unstructured::new(bytes);
  181|    756|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    756|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    756|            }
  199|       |
  200|    756|            let $data = match data {
  201|    756|                Ok(d) => d,
  202|      0|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    770|        }
LLVMFuzzerTestOneInput:
   27|    770|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    770|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    770|    });
   32|    770|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    770|    }
   37|    770|    0
   38|    770|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}
_RNCNvCshMAttTgSXs1_13libfuzzer_sys15test_input_wrap0B3_:
   28|    770|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    770|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    770|        rust_fuzzer_test_input(data_slice);
   31|    770|    });

_RNvMs2_NtCs2AwG9govxjq_9once_cell3impINtB5_8OnceCellNtNtCsbjf6Uqnv9QZ_5alloc6string6StringE14is_initializedCsjdxco8xy17q_7rle_ops:
   74|    756|    pub(crate) fn is_initialized(&self) -> bool {
   75|    756|        // An `Acquire` load is enough because that makes all the initialization
   76|    756|        // operations visible to us, and, this being a fast path, weaker
   77|    756|        // ordering helps with performance. This `Acquire` synchronizes with
   78|    756|        // `SeqCst` operations on the slow path.
   79|    756|        self.state_and_queue.load(Ordering::Acquire) == COMPLETE
   80|    756|    }

_RNvMs4_NtCs2AwG9govxjq_9once_cell4syncINtB5_8OnceCellNtNtCsbjf6Uqnv9QZ_5alloc6string6StringE3getCsjdxco8xy17q_7rle_ops:
  850|    756|        pub fn get(&self) -> Option<&T> {
  851|    756|            if self.0.is_initialized() {
  852|       |                // Safe b/c value is initialized.
  853|      0|                Some(unsafe { self.get_unchecked() })
  854|       |            } else {
  855|    756|                None
  856|       |            }
  857|    756|        }

_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E3newCsjdxco8xy17q_7rle_ops:
  342|  5.29k|    fn new(lhs: A, rhs: B) -> Self {
  343|  5.29k|        Self {
  344|  5.29k|            lhs: Lookahead::new(lhs),
  345|  5.29k|            rhs: Lookahead::new(rhs),
  346|  5.29k|            combinator: Default::default(),
  347|  5.29k|        }
  348|  5.29k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Csjdxco8xy17q_7rle_ops:
  390|   252k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE4peekCsjdxco8xy17q_7rle_ops:
  473|   110k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   110k|        self.next.as_mut()
  475|   110k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE4peekCsjdxco8xy17q_7rle_ops:
  473|  74.2k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  74.2k|        self.next.as_mut()
  475|  74.2k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_ENtNtNtB1M_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  387|   115k|    fn next(&mut self) -> Option<Self::Item> {
  388|   115k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   115k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   115k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   115k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E10next_rangeCsjdxco8xy17q_7rle_ops:
  353|   104k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   104k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  56.9k|            (Some(lhs), Some(rhs)) => {
  356|  56.9k|                // if both iterators are non-empty, we advance the one whichever's
  357|  56.9k|                // corresponding range has a smaller upper bound
  358|  56.9k|                if lhs.end <= rhs.end {
  359|  31.2k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  25.6k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  43.0k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  1.32k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  3.20k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   101k|        if advance_lhs {
  370|  74.3k|            self.lhs.next();
  371|  74.3k|        } else {
  372|  26.9k|            self.rhs.next();
  373|  26.9k|        }
  374|       |
  375|   101k|        range
  376|   104k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsjdxco8xy17q_7rle_ops:
  473|   252k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   252k|        self.next.as_mut()
  475|   252k|    }
_RNvMs5_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionE3newCsjdxco8xy17q_7rle_ops:
  297|  6.04k|    pub fn new(a: A, b: B) -> Self {
  298|  6.04k|        Self(Merge::new(_Combine::new(a, b)))
  299|  6.04k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Csjdxco8xy17q_7rle_ops:
  390|   237k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeCsjdxco8xy17q_7rle_ops:
  353|   292k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   292k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   270k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  22.0k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   270k|        if advance_lhs {
  370|   270k|            self.lhs.next();
  371|   270k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   270k|        range
  376|   292k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE4peekCsjdxco8xy17q_7rle_ops:
  473|  37.6k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  37.6k|        self.next.as_mut()
  475|  37.6k|    }
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_ENtNtNtB1z_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  310|  78.7k|    fn next(&mut self) -> Option<Self::Item> {
  311|  78.7k|        self.0.next()
  312|  78.7k|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  438|   319k|    fn next(&mut self) -> Option<Self::Item> {
  439|   319k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   292k|        while let Some(next) = self.iter.peek() {
  444|   270k|            if next.start > range.end {
  445|   270k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   292k|        Some(range)
  453|   319k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEENtNtNtB22_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|  43.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  43.7k|        let next = self.next.take()?;
  484|  37.6k|        self.next = self.iter.next();
  485|  37.6k|        Some(next)
  486|  43.7k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|   270k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   270k|        let next = self.next.take()?;
  484|   270k|        self.next = self.iter.next();
  485|   270k|        Some(next)
  486|   270k|    }
_RNvMsa_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEE3newCsjdxco8xy17q_7rle_ops:
  425|  6.04k|    pub fn new(iter: I) -> Self {
  426|  6.04k|        Self {
  427|  6.04k|            iter: Lookahead::new(iter),
  428|  6.04k|        }
  429|  6.04k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|   270k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   270k|        let next = self.next.take()?;
  484|   252k|        self.next = self.iter.next();
  485|   252k|        Some(next)
  486|   270k|    }
_RNvXsg_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_12IntersectionNtNtCsagdPUWTkxFn_4core7default7Default7defaultCsjdxco8xy17q_7rle_ops:
  122|  6.04k|#[derive(Default)]
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsjdxco8xy17q_7rle_ops:
  473|   292k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   292k|        self.next.as_mut()
  475|   292k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_ENtNtNtB1M_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  387|  78.7k|    fn next(&mut self) -> Option<Self::Item> {
  388|  78.7k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  78.7k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  78.7k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  78.7k|    }
_RNvXsh_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsagdPUWTkxFn_4core7default7Default7defaultCsjdxco8xy17q_7rle_ops:
  151|  4.53k|#[derive(Default)]
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E10next_rangeCsjdxco8xy17q_7rle_ops:
  353|   115k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   115k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  57.7k|            (Some(lhs), Some(rhs)) => {
  356|  57.7k|                // if both iterators are non-empty, we advance the one whichever's
  357|  57.7k|                // corresponding range has a smaller upper bound
  358|  57.7k|                if lhs.end <= rhs.end {
  359|  29.8k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  27.8k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  27.8k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  24.8k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  5.29k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   110k|        if advance_lhs {
  370|  57.6k|            self.lhs.next();
  371|  57.6k|        } else {
  372|  52.7k|            self.rhs.next();
  373|  52.7k|        }
  374|       |
  375|   110k|        range
  376|   115k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE3newCsjdxco8xy17q_7rle_ops:
  468|  5.29k|    fn new(mut iter: I) -> Self {
  469|  5.29k|        let next = iter.next();
  470|  5.29k|        Self { iter, next }
  471|  5.29k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE3newCsjdxco8xy17q_7rle_ops:
  468|  4.53k|    fn new(mut iter: I) -> Self {
  469|  4.53k|        let next = iter.next();
  470|  4.53k|        Self { iter, next }
  471|  4.53k|    }
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  310|   319k|    fn next(&mut self) -> Option<Self::Item> {
  311|   319k|        self.0.next()
  312|   319k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionENtNtNtB1M_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  387|  43.7k|    fn next(&mut self) -> Option<Self::Item> {
  388|  43.7k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  43.7k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  43.7k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  43.7k|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  438|  83.6k|    fn next(&mut self) -> Option<Self::Item> {
  439|  83.6k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   110k|        while let Some(next) = self.iter.peek() {
  444|   105k|            if next.start > range.end {
  445|  73.2k|                break;
  446|  32.0k|            }
  447|  32.0k|
  448|  32.0k|            range.end = cmp::max(range.end, next.end);
  449|  32.0k|            self.iter.next();
  450|       |        }
  451|       |
  452|  78.3k|        Some(range)
  453|  83.6k|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  438|  78.7k|    fn next(&mut self) -> Option<Self::Item> {
  439|  78.7k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  74.2k|        while let Some(next) = self.iter.peek() {
  444|  70.2k|            if next.start > range.end {
  445|  70.2k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  74.2k|        Some(range)
  453|  78.7k|    }
_RNvXsf_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsagdPUWTkxFn_4core7default7Default7defaultCsjdxco8xy17q_7rle_ops:
   86|  5.29k|#[derive(Default)]
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EEE4peekCsjdxco8xy17q_7rle_ops:
  473|   545k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   545k|        self.next.as_mut()
  475|   545k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EENtNtNtB22_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|   115k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   115k|        let next = self.next.take()?;
  484|   110k|        self.next = self.iter.next();
  485|   110k|        Some(next)
  486|   115k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Csjdxco8xy17q_7rle_ops:
  390|   270k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE3newCsjdxco8xy17q_7rle_ops:
  468|  6.04k|    fn new(mut iter: I) -> Self {
  469|  6.04k|        let next = iter.next();
  470|  6.04k|        Self { iter, next }
  471|  6.04k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EENtNtNtB22_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|  78.7k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  78.7k|        let next = self.next.take()?;
  484|  74.2k|        self.next = self.iter.next();
  485|  74.2k|        Some(next)
  486|  78.7k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4next0Csjdxco8xy17q_7rle_ops:
  390|  76.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Csjdxco8xy17q_7rle_ops:
  390|   292k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionENtNtNtB1z_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  310|  43.7k|    fn next(&mut self) -> Option<Self::Item> {
  311|  43.7k|        self.0.next()
  312|  43.7k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeCsjdxco8xy17q_7rle_ops:
  353|   252k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   252k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   237k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  15.1k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   237k|        if advance_lhs {
  370|   237k|            self.lhs.next();
  371|   237k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   237k|        range
  376|   252k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4next0Csjdxco8xy17q_7rle_ops:
  390|   115k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4next0Csjdxco8xy17q_7rle_ops:
  390|   104k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4nexts_0Csjdxco8xy17q_7rle_ops:
  390|  70.5k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsa_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EE3newCsjdxco8xy17q_7rle_ops:
  425|  5.29k|    pub fn new(iter: I) -> Self {
  426|  5.29k|        Self {
  427|  5.29k|            iter: Lookahead::new(iter),
  428|  5.29k|        }
  429|  5.29k|    }
_RNvMsa_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EE3newCsjdxco8xy17q_7rle_ops:
  425|  4.53k|    pub fn new(iter: I) -> Self {
  426|  4.53k|        Self {
  427|  4.53k|            iter: Lookahead::new(iter),
  428|  4.53k|        }
  429|  4.53k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE3newCsjdxco8xy17q_7rle_ops:
  342|  6.04k|    fn new(lhs: A, rhs: B) -> Self {
  343|  6.04k|        Self {
  344|  6.04k|            lhs: Lookahead::new(lhs),
  345|  6.04k|            rhs: Lookahead::new(rhs),
  346|  6.04k|            combinator: Default::default(),
  347|  6.04k|        }
  348|  6.04k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekCsjdxco8xy17q_7rle_ops:
  473|   593k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   593k|        self.next.as_mut()
  475|   593k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekCsjdxco8xy17q_7rle_ops:
  473|   252k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   252k|        self.next.as_mut()
  475|   252k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Csjdxco8xy17q_7rle_ops:
  390|   110k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Csjdxco8xy17q_7rle_ops:
  390|  99.9k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  310|   270k|    fn next(&mut self) -> Option<Self::Item> {
  311|   270k|        self.0.next()
  312|   270k|    }
_RNvMs5_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_E3newCsjdxco8xy17q_7rle_ops:
  297|  5.29k|    pub fn new(a: A, b: B) -> Self {
  298|  5.29k|        Self(Merge::new(_Combine::new(a, b)))
  299|  5.29k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  387|   292k|    fn next(&mut self) -> Option<Self::Item> {
  388|   292k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   292k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   292k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   292k|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  438|   270k|    fn next(&mut self) -> Option<Self::Item> {
  439|   270k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   252k|        while let Some(next) = self.iter.peek() {
  444|   237k|            if next.start > range.end {
  445|   237k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   252k|        Some(range)
  453|   270k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|   288k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   288k|        let next = self.next.take()?;
  484|   288k|        self.next = self.iter.next();
  485|   288k|        Some(next)
  486|   288k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|   319k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   319k|        let next = self.next.take()?;
  484|   292k|        self.next = self.iter.next();
  485|   292k|        Some(next)
  486|   319k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E3newCsjdxco8xy17q_7rle_ops:
  342|  4.53k|    fn new(lhs: A, rhs: B) -> Self {
  343|  4.53k|        Self {
  344|  4.53k|            lhs: Lookahead::new(lhs),
  345|  4.53k|            rhs: Lookahead::new(rhs),
  346|  4.53k|            combinator: Default::default(),
  347|  4.53k|        }
  348|  4.53k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekCsjdxco8xy17q_7rle_ops:
  473|   292k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   292k|        self.next.as_mut()
  475|   292k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  387|   252k|    fn next(&mut self) -> Option<Self::Item> {
  388|   252k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   252k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   252k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   252k|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEENtNtNtB1Y_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  438|  43.7k|    fn next(&mut self) -> Option<Self::Item> {
  439|  43.7k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  37.6k|        while let Some(next) = self.iter.peek() {
  444|  34.1k|            if next.start > range.end {
  445|  34.1k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  37.6k|        Some(range)
  453|  43.7k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  481|   237k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   237k|        let next = self.next.take()?;
  484|   237k|        self.next = self.iter.next();
  485|   237k|        Some(next)
  486|   237k|    }
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_ENtNtNtB1z_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  310|  83.6k|    fn next(&mut self) -> Option<Self::Item> {
  311|  83.6k|        self.0.next()
  312|  83.6k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE10next_rangeCsjdxco8xy17q_7rle_ops:
  353|  76.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  76.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  70.5k|            (Some(lhs), Some(rhs)) => {
  356|  70.5k|                // if both iterators are non-empty, we advance the one whichever's
  357|  70.5k|                // corresponding range has a smaller upper bound
  358|  70.5k|                if lhs.end <= rhs.end {
  359|  37.1k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  33.4k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  2.97k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  2.84k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    228|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  76.3k|        if advance_lhs {
  370|  40.1k|            self.lhs.next();
  371|  40.1k|        } else {
  372|  36.2k|            self.rhs.next();
  373|  36.2k|        }
  374|       |
  375|  76.3k|        range
  376|  76.6k|    }
_RNvMs5_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_E3newCsjdxco8xy17q_7rle_ops:
  297|  4.53k|    pub fn new(a: A, b: B) -> Self {
  298|  4.53k|        Self(Merge::new(_Combine::new(a, b)))
  299|  4.53k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newCsjdxco8xy17q_7rle_ops:
  468|  31.7k|    fn new(mut iter: I) -> Self {
  469|  31.7k|        let next = iter.next();
  470|  31.7k|        Self { iter, next }
  471|  31.7k|    }
_RNvXs0_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|  31.2k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|  31.2k|        // lhs:     xx----      xxxx--      --xx--
  157|  31.2k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|  31.2k|        // output:  xx----      xx----      ------
  159|  31.2k|
  160|  31.2k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|  31.2k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  75.6k|    fn new(mut iter: I) -> Self {
  469|  75.6k|        let next = iter.next();
  470|  75.6k|        Self { iter, next }
  471|  75.6k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE10next_rangeB9_:
  353|   243k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   243k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|   134k|            (Some(lhs), Some(rhs)) => {
  356|   134k|                // if both iterators are non-empty, we advance the one whichever's
  357|   134k|                // corresponding range has a smaller upper bound
  358|   134k|                if lhs.end <= rhs.end {
  359|  73.6k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  61.2k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  68.2k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  30.6k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  9.82k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   233k|        if advance_lhs {
  370|   141k|            self.lhs.next();
  371|   141k|        } else {
  372|  91.9k|            self.rhs.next();
  373|  91.9k|        }
  374|       |
  375|   233k|        range
  376|   243k|    }
_RNvMsa_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|  75.6k|    pub fn new(iter: I) -> Self {
  426|  75.6k|        Self {
  427|  75.6k|            iter: Lookahead::new(iter),
  428|  75.6k|        }
  429|  75.6k|    }
_RNvXNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  29.8k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  29.8k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  29.8k|        // to ensure that the lower bounds are monotonically increasing
   93|  29.8k|        //
   94|  29.8k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  29.8k|        // `xxxx--` and then `xxxxxx`, not
   96|  29.8k|        // `--xx--` and then `xxxxxx`
   97|  29.8k|        //
   98|  29.8k|        // lhs:     xx----      xxxx--      --xx--
   99|  29.8k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  29.8k|        // output:  xx----      xxxx--      xxxx--
  101|  29.8k|
  102|  29.8k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  29.8k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  481|   258k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   258k|        let next = self.next.take()?;
  484|   258k|        self.next = self.iter.next();
  485|   258k|        Some(next)
  486|   258k|    }
_RNvXs_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_rhs_tail:
  143|  2.84k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  144|  2.84k|        None
  145|  2.84k|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|   601k|    fn next(&mut self) -> Option<Self::Item> {
  439|   601k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   557k|        while let Some(next) = self.iter.peek() {
  444|   523k|            if next.start > range.end {
  445|   523k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   557k|        Some(range)
  453|   601k|    }
_RNvXs2_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_rhs_tail:
  238|  30.6k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  239|  30.6k|        Some(rhs)
  240|  30.6k|    }
_RNvMsa_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|  75.6k|    pub fn new(iter: I) -> Self {
  426|  75.6k|        Self {
  427|  75.6k|            iter: Lookahead::new(iter),
  428|  75.6k|        }
  429|  75.6k|    }
_RNvXs4_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_lhs:
  262|  12.6k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  263|  12.6k|        // apart from the offset, these implementations are identical to those of the `Difference` combinator
  264|  12.6k|        self.offset(lhs.start..cmp::min(lhs.end, rhs.start))
  265|  12.6k|    }
_RNvXs0_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|  25.6k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|  25.6k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|  25.6k|        // to avoid it from returning invalid bits in the next iteration
  166|  25.6k|        //
  167|  25.6k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|  25.6k|        // `------` and then `----xx`, not
  169|  25.6k|        // `------` and then `--xxxx`
  170|  25.6k|        //
  171|  25.6k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|  25.6k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|  25.6k|        // output:   ------      ------      xx----
  174|  25.6k|        // new lhs:  ----xx      ----xx      ----xx
  175|  25.6k|
  176|  25.6k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|  25.6k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|  25.6k|        difference
  179|  25.6k|    }
_RNvMsa_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEE3newB9_:
  425|    756|    pub fn new(iter: I) -> Self {
  426|    756|        Self {
  427|    756|            iter: Lookahead::new(iter),
  428|    756|        }
  429|    756|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|  75.6k|    fn new(lhs: A, rhs: B) -> Self {
  343|  75.6k|        Self {
  344|  75.6k|            lhs: Lookahead::new(lhs),
  345|  75.6k|            rhs: Lookahead::new(rhs),
  346|  75.6k|            combinator: Default::default(),
  347|  75.6k|        }
  348|  75.6k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEE3newB9_:
  468|    756|    fn new(mut iter: I) -> Self {
  469|    756|        let next = iter.next();
  470|    756|        Self { iter, next }
  471|    756|    }
_RNvXs2_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_rhs:
  229|  61.2k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  230|  61.2k|        Self::advance(rhs, lhs)
  231|  61.2k|    }
_RNvXs_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_rhs:
  134|  33.4k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  135|  33.4k|        cmp::max(lhs.start, rhs.start)..rhs.end
  136|  33.4k|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|   201k|    fn next(&mut self) -> Option<Self::Item> {
  439|   201k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   194k|        while let Some(next) = self.iter.peek() {
  444|   185k|            if next.start > range.end {
  445|   183k|                break;
  446|  2.57k|            }
  447|  2.57k|
  448|  2.57k|            range.end = cmp::max(range.end, next.end);
  449|  2.57k|            self.iter.next();
  450|       |        }
  451|       |
  452|   191k|        Some(range)
  453|   201k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  25.2k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs5_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutE3newB9_:
  297|    756|    pub fn new(a: A, b: B) -> Self {
  298|    756|        Self(Merge::new(_Combine::new(a, b)))
  299|    756|    }
_RNvMsa_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEE3newB9_:
  425|  9.82k|    pub fn new(iter: I) -> Self {
  426|  9.82k|        Self {
  427|  9.82k|            iter: Lookahead::new(iter),
  428|  9.82k|        }
  429|  9.82k|    }
_RNvXs2_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_lhs:
  225|  73.6k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  226|  73.6k|        Self::advance(lhs, rhs)
  227|  73.6k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|    756|    fn next(&mut self) -> Option<Self::Item> {
  388|    756|        // we repeatedly compute the next range until we find one that is non-empty
  389|    756|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|    756|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|    756|    }
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|    756|    fn next(&mut self) -> Option<Self::Item> {
  439|    756|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|      0|        while let Some(next) = self.iter.peek() {
  444|      0|            if next.start > range.end {
  445|      0|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|      0|        Some(range)
  453|    756|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|   233k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|   622k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   622k|        let next = self.next.take()?;
  484|   622k|        self.next = self.iter.next();
  485|   622k|        Some(next)
  486|   622k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|   583k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   583k|        let next = self.next.take()?;
  484|   583k|        self.next = self.iter.next();
  485|   583k|        Some(next)
  486|   583k|    }
_RNvXsh_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCsagdPUWTkxFn_4core7default7Default7defaultB9_:
  151|  75.6k|#[derive(Default)]
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|   201k|    fn next(&mut self) -> Option<Self::Item> {
  311|   201k|        self.0.next()
  312|   201k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newB9_:
  468|  21.1k|    fn new(mut iter: I) -> Self {
  469|  21.1k|        let next = iter.next();
  470|  21.1k|        Self { iter, next }
  471|  21.1k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|   622k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|   679k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_lhs_tail:
  138|  2.97k|    fn advance_lhs_tail(&mut self, _lhs: Range<u64>) -> Option<Range<u64>> {
  139|  2.97k|        // the intersection of a range and an empty range is an empty range
  140|  2.97k|        None
  141|  2.97k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   632k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   632k|        self.next.as_mut()
  475|   632k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|   658k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   658k|        let next = self.next.take()?;
  484|   604k|        self.next = self.iter.next();
  485|   604k|        Some(next)
  486|   658k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|   204k|    fn next(&mut self) -> Option<Self::Item> {
  388|   204k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   204k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   204k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   204k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE3newB9_:
  342|    756|    fn new(lhs: A, rhs: B) -> Self {
  343|    756|        Self {
  344|    756|            lhs: Lookahead::new(lhs),
  345|    756|            rhs: Lookahead::new(rhs),
  346|    756|            combinator: Default::default(),
  347|    756|        }
  348|    756|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE4peekB9_:
  473|   194k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   194k|        self.next.as_mut()
  475|   194k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|  75.6k|    fn new(mut iter: I) -> Self {
  469|  75.6k|        let next = iter.next();
  470|  75.6k|        Self { iter, next }
  471|  75.6k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|   632k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   632k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   583k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  49.6k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   583k|        if advance_lhs {
  370|   583k|            self.lhs.next();
  371|   583k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   583k|        range
  376|   632k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  1.31M|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  1.31M|        self.next.as_mut()
  475|  1.31M|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|   601k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   601k|        let next = self.next.take()?;
  484|   557k|        self.next = self.iter.next();
  485|   557k|        Some(next)
  486|   601k|    }
_RNvXNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|  27.8k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|  27.8k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|  27.8k|    }
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|   679k|    fn next(&mut self) -> Option<Self::Item> {
  388|   679k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   679k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   679k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   679k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|    756|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|    756|        let next = self.next.take()?;
  484|      0|        self.next = self.iter.next();
  485|      0|        Some(next)
  486|    756|    }
_RNvXs4_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_rhs:
  267|  11.8k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  268|  11.8k|        let cut = self.offset(lhs.start..cmp::min(lhs.end, rhs.start));
  269|  11.8k|        lhs.start = cmp::max(lhs.start, rhs.end);
  270|  11.8k|        self.offset += rhs.size();
  271|  11.8k|        cut
  272|  11.8k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  75.6k|    fn new(lhs: A, rhs: B) -> Self {
  343|  75.6k|        Self {
  344|  75.6k|            lhs: Lookahead::new(lhs),
  345|  75.6k|            rhs: Lookahead::new(rhs),
  346|  75.6k|            combinator: Default::default(),
  347|  75.6k|        }
  348|  75.6k|    }
_RNvXs_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_lhs:
  126|  37.1k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  127|  37.1k|        // lhs:     xx----      xxxx--      --xx--
  128|  37.1k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  129|  37.1k|        // output:  ------      --xx--      --xx--
  130|  37.1k|
  131|  37.1k|        cmp::max(lhs.start, rhs.start)..lhs.end
  132|  37.1k|    }
_RNvXs0_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|   897k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|   897k|        // the difference between a range and an empty range is just that range
  183|   897k|        Some(lhs)
  184|   897k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|   151k|    fn new(mut iter: I) -> Self {
  469|   151k|        let next = iter.next();
  470|   151k|        Self { iter, next }
  471|   151k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|   557k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   557k|        self.next.as_mut()
  475|   557k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE3newB9_:
  342|  9.82k|    fn new(lhs: A, rhs: B) -> Self {
  343|  9.82k|        Self {
  344|  9.82k|            lhs: Lookahead::new(lhs),
  345|  9.82k|            rhs: Lookahead::new(rhs),
  346|  9.82k|            combinator: Default::default(),
  347|  9.82k|        }
  348|  9.82k|    }
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|    756|    fn next(&mut self) -> Option<Self::Item> {
  311|    756|        self.0.next()
  312|    756|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE3newB9_:
  468|  9.82k|    fn new(mut iter: I) -> Self {
  469|  9.82k|        let next = iter.next();
  470|  9.82k|        Self { iter, next }
  471|  9.82k|    }
_RNvXse_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|   204k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   204k|        let next = self.next.take()?;
  484|   194k|        self.next = self.iter.next();
  485|   194k|        Some(next)
  486|   204k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|  75.6k|    fn new(mut iter: I) -> Self {
  469|  75.6k|        let next = iter.next();
  470|  75.6k|        Self { iter, next }
  471|  75.6k|    }
_RNvMs5_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|  75.6k|    pub fn new(a: A, b: B) -> Self {
  298|  75.6k|        Self(Merge::new(_Combine::new(a, b)))
  299|  75.6k|    }
_RNvXNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|  24.8k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|  24.8k|        Some(rhs)
  116|  24.8k|    }
_RNvMs5_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  75.6k|    pub fn new(a: A, b: B) -> Self {
  298|  75.6k|        Self(Merge::new(_Combine::new(a, b)))
  299|  75.6k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   604k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   604k|        self.next.as_mut()
  475|   604k|    }
_RNvXs4_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator16advance_rhs_tail:
  278|    715|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  279|    715|        None
  280|    715|    }
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|   658k|    fn next(&mut self) -> Option<Self::Item> {
  311|   658k|        self.0.next()
  312|   658k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekB9_:
  473|   537k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   537k|        self.next.as_mut()
  475|   537k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  24.5k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|   632k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs5_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceE3newB9_:
  297|  9.82k|    pub fn new(a: A, b: B) -> Self {
  298|  9.82k|        Self(Merge::new(_Combine::new(a, b)))
  299|  9.82k|    }
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|   679k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   679k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   622k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  57.6k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   622k|        if advance_lhs {
  370|   622k|            self.lhs.next();
  371|   622k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   622k|        range
  376|   679k|    }
_RNvXs0_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|  1.32k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|  1.32k|        // the difference between an empty range and a range is an empty range
  188|  1.32k|        None
  189|  1.32k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|   679k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   679k|        self.next.as_mut()
  475|   679k|    }
_RNvXsf_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCsagdPUWTkxFn_4core7default7Default7defaultB9_:
   86|  75.6k|#[derive(Default)]
_RNvMs8_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE10next_rangeB9_:
  353|  25.2k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  25.2k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  24.5k|            (Some(lhs), Some(rhs)) => {
  356|  24.5k|                // if both iterators are non-empty, we advance the one whichever's
  357|  24.5k|                // corresponding range has a smaller upper bound
  358|  24.5k|                if lhs.end <= rhs.end {
  359|  12.6k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  11.8k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|      0|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    715|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|     41|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  25.2k|        if advance_lhs {
  370|  12.6k|            self.lhs.next();
  371|  12.6k|        } else {
  372|  12.6k|            self.rhs.next();
  373|  12.6k|        }
  374|       |
  375|  25.2k|        range
  376|  25.2k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|   243k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXsb_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|   658k|    fn next(&mut self) -> Option<Self::Item> {
  439|   658k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   604k|        while let Some(next) = self.iter.peek() {
  444|   562k|            if next.start > range.end {
  445|   562k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   604k|        Some(range)
  453|   658k|    }
_RNvXsi_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtNtCsagdPUWTkxFn_4core7default7Default7defaultB9_:
  195|  9.82k|#[derive(Default)]
_RNvXsj_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtNtCsagdPUWTkxFn_4core7default7Default7defaultB9_:
  247|    756|#[derive(Default)]
_RNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|   632k|    fn next(&mut self) -> Option<Self::Item> {
  388|   632k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   632k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   632k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   632k|    }
_RNvXs2_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_lhs_tail:
  233|  68.2k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  234|  68.2k|        // the symmetric difference of a range and an empty range is just that range
  235|  68.2k|        Some(lhs)
  236|  68.2k|    }
_RNvMsd_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|  75.6k|    fn new(mut iter: I) -> Self {
  469|  75.6k|        let next = iter.next();
  470|  75.6k|        Self { iter, next }
  471|  75.6k|    }
_RNCNvXs9_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|   583k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs1_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifference7advance:
  201|   134k|    fn advance(left: Range<u64>, right: &mut Range<u64>) -> Range<u64> {
  202|   134k|        if left.start <= right.start {
  203|       |            // left:       xxxx--      xx----
  204|       |            // right:      --xxxx  or  ----xx
  205|       |            // output:     xx----      xx----
  206|       |            // new right:  ----xx      ----xx
  207|       |
  208|  89.0k|            let difference = left.start..cmp::min(left.end, right.start);
  209|  89.0k|            right.start = cmp::max(right.start, left.end);
  210|  89.0k|            difference
  211|       |        } else {
  212|       |            // left:       --xx--
  213|       |            // right:      xxxxxx
  214|       |            // output:     xx----
  215|       |            // new right:  ----xx
  216|       |
  217|  45.7k|            let difference = right.start..left.start;
  218|  45.7k|            right.start = left.end;
  219|  45.7k|            difference
  220|       |        }
  221|   134k|    }
_RNvXs6_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|   601k|    fn next(&mut self) -> Option<Self::Item> {
  311|   601k|        self.0.next()
  312|   601k|    }
_RNvMs3_NtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB5_3Cut6offset:
  256|  24.5k|    fn offset(&self, range: Range<u64>) -> Range<u64> {
  257|  24.5k|        (range.start - self.offset)..(range.end - self.offset)
  258|  24.5k|    }
_RNvXNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|   887k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|   887k|        // the union of a range and an empty range is just that range
  111|   887k|        Some(lhs)
  112|   887k|    }

_RNvXs3_NtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextCsjdxco8xy17q_7rle_ops:
  153|   237k|    fn next(&mut self) -> Option<Self::Item> {
  154|   237k|        self.0.next()
  155|   237k|    }
_RINvYINtNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator12intersectionB3_ECsjdxco8xy17q_7rle_ops:
   26|  6.04k|    fn intersection<R: RangeIterator>(self, other: R) -> Combine<Self, R, Intersection> {
   27|  6.04k|        Combine::new(self, other)
   28|  6.04k|    }
_RINvYINtNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator5unionB3_ECsjdxco8xy17q_7rle_ops:
   21|  5.29k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  5.29k|        Combine::new(self, other)
   23|  5.29k|    }
_RINvYINtNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator10differenceB3_ECsjdxco8xy17q_7rle_ops:
   31|  4.53k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  4.53k|        Combine::new(self, other)
   33|  4.53k|    }
_RINvMs2_NtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|  75.6k|    pub fn new<II>(iter: II) -> Self
  140|  75.6k|    where
  141|  75.6k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  75.6k|    {
  143|  75.6k|        Self(iter.into_iter())
  144|  75.6k|    }
_RINvNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEEB4_:
  163|   151k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|   151k|    let mut iter = bits.into_iter().peekable();
  165|   151k|
  166|   151k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|   151k|    }))
  180|   151k|}
_RNCINvNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0B6_:
  166|   151k|    Ranges::new(iter::from_fn(move || {
  167|   151k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|   151k|    }))
_RNvXs3_NtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   151k|    fn next(&mut self) -> Option<Self::Item> {
  154|   151k|        self.0.next()
  155|   151k|    }
_RINvYINtNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator3cutB3_EBa_:
   53|    756|    fn cut<R: RangeIterator>(self, other: R) -> Combine<Self, R, Cut> {
   54|    756|        Combine::new(self, other)
   55|    756|    }
_RINvYINtNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|  75.6k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  75.6k|        Combine::new(self, other)
   33|  75.6k|    }
_RINvYINtNtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator20symmetric_differenceB3_EBa_:
   36|  9.82k|    fn symmetric_difference<R: RangeIterator>(
   37|  9.82k|        self,
   38|  9.82k|        other: R,
   39|  9.82k|    ) -> Combine<Self, R, SymmetricDifference> {
   40|  9.82k|        Combine::new(self, other)
   41|  9.82k|    }
_RNvXs3_NtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   697k|    fn next(&mut self) -> Option<Self::Item> {
  154|   697k|        self.0.next()
  155|   697k|    }
_RINvYINtNtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  75.6k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  75.6k|        Combine::new(self, other)
   23|  75.6k|    }
_RINvMs2_NtCs9j0B7lO3VOx_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|   151k|    pub fn new<II>(iter: II) -> Self
  140|   151k|    where
  141|   151k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|   151k|    {
  143|   151k|        Self(iter.into_iter())
  144|   151k|    }

_RINvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_12IntersectionEECsjdxco8xy17q_7rle_ops:
  135|  6.04k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  6.04k|        Self {
  137|  6.04k|            ranges: iter.collect(),
  138|  6.04k|            ..Default::default()
  139|  6.04k|        }
  140|  6.04k|    }
_RINvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6y_EECsjdxco8xy17q_7rle_ops:
  135|  4.53k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  4.53k|        Self {
  137|  4.53k|            ranges: iter.collect(),
  138|  4.53k|            ..Default::default()
  139|  4.53k|        }
  140|  4.53k|    }
_RNvXs9_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCsagdPUWTkxFn_4core3ops5arith3Sub3subCsjdxco8xy17q_7rle_ops:
  379|  4.53k|    fn sub(self, rhs: &BitField) -> Self::Output {
  380|  4.53k|        BitField::from_ranges(self.ranges().difference(rhs.ranges()))
  381|  4.53k|    }
_RINvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6h_EECsjdxco8xy17q_7rle_ops:
  135|  5.29k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  5.29k|        Self {
  137|  5.29k|            ranges: iter.collect(),
  138|  5.29k|            ..Default::default()
  139|  5.29k|        }
  140|  5.29k|    }
_RNvXsi_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsagdPUWTkxFn_4core7default7Default7defaultCsjdxco8xy17q_7rle_ops:
   36|  15.8k|#[derive(Debug, Default, Clone)]
_RNvXs7_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCsagdPUWTkxFn_4core3ops3bit6BitAnd6bitandCsjdxco8xy17q_7rle_ops:
  363|  6.04k|    fn bitand(self, rhs: &BitField) -> Self::Output {
  364|  6.04k|        BitField::from_ranges(self.ranges().intersection(rhs.ranges()))
  365|  6.04k|    }
_RNvXs5_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCsagdPUWTkxFn_4core3ops3bit5BitOr5bitorCsjdxco8xy17q_7rle_ops:
  347|  5.29k|    fn bitor(self, rhs: &BitField) -> Self::Output {
  348|  5.29k|        BitField::from_ranges(self.ranges().union(rhs.ranges()))
  349|  5.29k|    }
_RNvXs_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCsagdPUWTkxFn_4core3cmp9PartialEq2eq:
   47|  11.3k|    fn eq(&self, other: &Self) -> bool {
   48|  11.3k|        Iterator::eq(self.ranges(), other.ranges())
   49|  11.3k|    }
_RINvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_3CutEEB6_:
  135|    756|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|    756|        Self {
  137|    756|            ranges: iter.collect(),
  138|    756|            ..Default::default()
  139|    756|        }
  140|    756|    }
_RNvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  279|  75.6k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  280|  75.6k|        self.inner_ranges()
  281|  75.6k|            .union(ranges_from_bits(self.set.iter().copied()))
  282|  75.6k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  283|  75.6k|    }
_RNvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  273|  75.6k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  274|  75.6k|        iter::Ranges::new(self.ranges.iter().cloned())
  275|  75.6k|    }
_RINvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCsagdPUWTkxFn_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCsbjf6Uqnv9QZ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_19SymmetricDifferenceEEB6_:
  135|  9.82k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  9.82k|        Self {
  137|  9.82k|            ranges: iter.collect(),
  138|  9.82k|            ..Default::default()
  139|  9.82k|        }
  140|  9.82k|    }
_RNvXsb_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCsagdPUWTkxFn_4core3ops3bit6BitXor6bitxor:
  394|  9.82k|    fn bitxor(self, rhs: &BitField) -> Self::Output {
  395|  9.82k|        BitField::from_ranges(self.ranges().symmetric_difference(rhs.ranges()))
  396|  9.82k|    }
_RNvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB5_8BitField3cut:
  323|    756|    pub fn cut(&self, other: &Self) -> Self {
  324|    756|        Self::from_ranges(self.ranges().cut(other.ranges()))
  325|    756|    }
_RNvMs4_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB5_8BitField3new:
  130|  1.51k|    pub fn new() -> Self {
  131|  1.51k|        Self::default()
  132|  1.51k|    }
_RNvXsi_Cs9j0B7lO3VOx_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCsagdPUWTkxFn_4core7default7Default7defaultB5_:
   36|  15.1k|#[derive(Debug, Default, Clone)]

_RNvXNtCs9j0B7lO3VOx_17fvm_ipld_bitfield5rangeINtNtNtCsagdPUWTkxFn_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  11.8k|    fn size(&self) -> Self::Idx {
   15|  11.8k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  11.8k|            self.end - self.start
   19|       |        }
   20|  11.8k|    }

_RNvXs0_NtCs9j0B7lO3VOx_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsb8G4YbINvyB_9arbitrary9Arbitrary9arbitrary:
  113|  3.02k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|  3.02k|        let mut next_value: bool = bool::arbitrary(u)?;
  115|  3.02k|        let mut ranges = Vec::new();
  116|  3.02k|        let mut index = 0u64;
  117|  3.02k|        let mut total_len: u64 = 0;
  118|       |
  119|  3.02k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|  3.02k|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  48.7k|            let len = u64::arbitrary(u)?;
  124|  48.7k|            let shift = u.int_in_range(0..=63)?;
  125|  48.7k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  48.7k|
  127|  48.7k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  48.7k|            if ovf {
  129|    265|                break;
  130|  48.4k|            }
  131|  48.4k|            total_len = new_total_len;
  132|  48.4k|            let start = index;
  133|  48.4k|            index += len;
  134|  48.4k|            let end = index;
  135|  48.4k|
  136|  48.4k|            if next_value {
  137|  24.4k|                ranges.push(start..end);
  138|  24.4k|            }
  139|       |
  140|  48.4k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|  3.02k|        Ok(Self {
  144|  3.02k|            ranges,
  145|  3.02k|            ..Default::default()
  146|  3.02k|        })
  147|  3.02k|    }
_RNvXs0_NtCs9j0B7lO3VOx_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsb8G4YbINvyB_9arbitrary9Arbitrary9size_hint:
  149|  2.31k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|  2.31k|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|  2.31k|    }

