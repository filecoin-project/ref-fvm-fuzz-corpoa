_RNvYNtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldNtCsgo6bQ0OzdqS_9arbitrary9Arbitrary19arbitrary_take_restCsQfMIxJvgQY_7rle_ops:
  182|  1.18k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|  1.18k|        Self::arbitrary(&mut u)
  184|  1.18k|    }
_RNCNvXs8_Csgo6bQ0OzdqS_9arbitraryANtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9size_hint0CsQfMIxJvgQY_7rle_ops:
  658|  3.82k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|  3.82k|            <T as Arbitrary>::size_hint(d)
  660|  3.82k|        }))
_RNvXs8_Csgo6bQ0OzdqS_9arbitraryANtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary19arbitrary_take_restCsQfMIxJvgQY_7rle_ops:
  648|  1.18k|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  649|  1.18k|        let mut array = Self::arbitrary(&mut u)?;
  650|  1.18k|        if let Some(last) = array.last_mut() {
  651|  1.18k|            *last = Arbitrary::arbitrary_take_rest(u)?;
  652|      0|        }
  653|  1.18k|        Ok(array)
  654|  1.18k|    }
_RINvCsgo6bQ0OzdqS_9arbitrary12create_arrayNCNvXs8_B2_ANtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9size_hint0TjINtNtCs6h2lu9gk47e_4core6option6OptionjEEKB1y_ECsQfMIxJvgQY_7rle_ops:
  596|  1.27k|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|  1.27k|where
  598|  1.27k|    F: FnMut(usize) -> T,
  599|  1.27k|{
  600|  1.27k|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|  1.27k|    let array_ptr = array.as_mut_ptr();
  602|  1.27k|    let dst = array_ptr as _;
  603|  1.27k|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|  1.27k|        dst,
  605|  1.27k|        initialized: 0,
  606|  1.27k|    };
  607|       |    unsafe {
  608|  3.82k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|  3.82k|            core::ptr::write(value_ptr, cb(idx));
  610|  3.82k|            guard.initialized += 1;
  611|  3.82k|        }
  612|  1.27k|        mem::forget(guard);
  613|  1.27k|        array.assume_init()
  614|  1.27k|    }
  615|  1.27k|}
_RNvXs8_Csgo6bQ0OzdqS_9arbitraryANtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9size_hintCsQfMIxJvgQY_7rle_ops:
  657|  1.27k|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|  1.27k|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|  1.27k|        }))
  661|  1.27k|    }
_RNCNvXs8_Csgo6bQ0OzdqS_9arbitraryANtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9arbitrary0CsQfMIxJvgQY_7rle_ops:
  644|  3.54k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RINvCsgo6bQ0OzdqS_9arbitrary16try_create_arrayNCNvXs8_B2_ANtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9arbitrary0BU_KB1C_ECsQfMIxJvgQY_7rle_ops:
  617|  1.18k|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|  1.18k|where
  619|  1.18k|    F: FnMut(usize) -> Result<T>,
  620|  1.18k|{
  621|  1.18k|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|  1.18k|    let array_ptr = array.as_mut_ptr();
  623|  1.18k|    let dst = array_ptr as _;
  624|  1.18k|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|  1.18k|        dst,
  626|  1.18k|        initialized: 0,
  627|  1.18k|    };
  628|       |    unsafe {
  629|  3.54k|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|  3.54k|            core::ptr::write(value_ptr, cb(idx)?);
  631|  3.54k|            guard.initialized += 1;
  632|       |        }
  633|  1.18k|        mem::forget(guard);
  634|  1.18k|        Ok(array.assume_init())
  635|       |    }
  636|  1.18k|}
_RNvXs8_Csgo6bQ0OzdqS_9arbitraryANtCsexBJaOrFB56_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9arbitraryCsQfMIxJvgQY_7rle_ops:
  643|  1.18k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|  1.18k|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|  1.18k|    }
_RNvXsH_Csgo6bQ0OzdqS_9arbitraryjNtB5_9Arbitrary9size_hintCsexBJaOrFB56_17fvm_ipld_bitfield:
  302|  3.82k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  3.82k|                    let n = mem::size_of::<$ty>();
  304|  3.82k|                    (n, Some(n))
  305|  3.82k|                }
_RNvXsC_Csgo6bQ0OzdqS_9arbitraryhNtB5_9Arbitrary9size_hintCsexBJaOrFB56_17fvm_ipld_bitfield:
  302|  4.72k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  4.72k|                    let n = mem::size_of::<$ty>();
  304|  4.72k|                    (n, Some(n))
  305|  4.72k|                }
_RNvXsF_Csgo6bQ0OzdqS_9arbitraryyNtB5_9Arbitrary9size_hintCsexBJaOrFB56_17fvm_ipld_bitfield:
  302|  4.72k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  4.72k|                    let n = mem::size_of::<$ty>();
  304|  4.72k|                    (n, Some(n))
  305|  4.72k|                }
_RNvXs1j_Csgo6bQ0OzdqS_9arbitraryTyhENtB6_9Arbitrary9size_hintCsexBJaOrFB56_17fvm_ipld_bitfield:
  568|  4.72k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  4.72k|                crate::size_hint::and_all(&[
  570|  4.72k|                    <$last as Arbitrary>::size_hint(depth),
  571|  4.72k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  4.72k|                ])
  573|  4.72k|            }
_RNvXs_Csgo6bQ0OzdqS_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  4.72k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  4.72k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  4.72k|    }
_RNvXsF_Csgo6bQ0OzdqS_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  69.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  69.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  69.4k|                    u.fill_buffer(&mut buf)?;
  294|  69.4k|                    let mut x: $unsigned = 0;
  295|   555k|                    for i in 0..mem::size_of::<$ty>() {
  296|   555k|                        x |= buf[i] as $unsigned << (i * 8);
  297|   555k|                    }
  298|  69.4k|                    Ok(x as $ty)
  299|  69.4k|                }
_RNvXsC_Csgo6bQ0OzdqS_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  4.72k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  4.72k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  4.72k|                    u.fill_buffer(&mut buf)?;
  294|  4.72k|                    let mut x: $unsigned = 0;
  295|  4.72k|                    for i in 0..mem::size_of::<$ty>() {
  296|  4.72k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  4.72k|                    }
  298|  4.72k|                    Ok(x as $ty)
  299|  4.72k|                }

_RNvNtCsgo6bQ0OzdqS_9arbitrary9size_hint7and_allCsQfMIxJvgQY_7rle_ops:
   37|  1.27k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.27k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.27k|}
_RNvNtCsgo6bQ0OzdqS_9arbitrary9size_hint3andCsQfMIxJvgQY_7rle_ops:
   26|  3.82k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.82k|    let lower = lhs.0 + rhs.0;
   28|  3.82k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.82k|    (lower, upper)
   30|  3.82k|}
_RNCNvNtCsgo6bQ0OzdqS_9arbitrary9size_hint3and0CsQfMIxJvgQY_7rle_ops:
   28|  1.27k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsgo6bQ0OzdqS_9arbitrary9size_hint7and_allCsexBJaOrFB56_17fvm_ipld_bitfield:
   37|  4.72k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  4.72k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  4.72k|}
_RNCNvNtCsgo6bQ0OzdqS_9arbitrary9size_hint3and0CsexBJaOrFB56_17fvm_ipld_bitfield:
   28|  13.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsgo6bQ0OzdqS_9arbitrary9size_hint3andCsexBJaOrFB56_17fvm_ipld_bitfield:
   26|  13.2k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  13.2k|    let lower = lhs.0 + rhs.0;
   28|  13.2k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  13.2k|    (lower, upper)
   30|  13.2k|}
_RNCNCNvNtCsgo6bQ0OzdqS_9arbitrary9size_hint3and00CsexBJaOrFB56_17fvm_ipld_bitfield:
   28|  9.45k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsexBJaOrFB56_17fvm_ipld_bitfield:
  213|  4.72k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  4.72k|    where
  215|  4.72k|        ElementType: Arbitrary<'a>,
  216|  4.72k|    {
  217|  4.72k|        let byte_size = self.arbitrary_byte_size()?;
  218|  4.72k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  4.72k|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|  4.72k|        let elem_size = std::cmp::max(1, elem_size);
  221|  4.72k|        Ok(byte_size / elem_size)
  222|  4.72k|    }
_RINvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsexBJaOrFB56_17fvm_ipld_bitfield:
  301|  69.4k|    fn int_in_range_impl<T>(
  302|  69.4k|        range: ops::RangeInclusive<T>,
  303|  69.4k|        mut bytes: impl Iterator<Item = u8>,
  304|  69.4k|    ) -> Result<(T, usize)>
  305|  69.4k|    where
  306|  69.4k|        T: Int,
  307|  69.4k|    {
  308|  69.4k|        let start = range.start();
  309|  69.4k|        let end = range.end();
  310|  69.4k|        assert!(
  311|  69.4k|            start <= end,
  312|  69.4k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  69.4k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  69.4k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  69.4k|        }
  320|  69.4k|
  321|  69.4k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  69.4k|        let mut result = T::Widest::ZERO;
  323|  69.4k|        let mut offset: usize = 0;
  324|       |
  325|   138k|        while offset < mem::size_of::<T>()
  326|   138k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  69.4k|        {
  328|  69.4k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  69.4k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  69.4k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  69.4k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  69.4k|            result = result % range;
  336|  69.4k|        }
  337|       |
  338|  69.4k|        Ok((
  339|  69.4k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  69.4k|            offset,
  341|  69.4k|        ))
  342|  69.4k|    }
_RINvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsexBJaOrFB56_17fvm_ipld_bitfield:
  292|  69.4k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  69.4k|    where
  294|  69.4k|        T: Int,
  295|  69.4k|    {
  296|  69.4k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  69.4k|        self.data = &self.data[bytes_consumed..];
  298|  69.4k|        Ok(result)
  299|  69.4k|    }
_RINvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|  3.32k|    fn int_in_range_impl<T>(
  302|  3.32k|        range: ops::RangeInclusive<T>,
  303|  3.32k|        mut bytes: impl Iterator<Item = u8>,
  304|  3.32k|    ) -> Result<(T, usize)>
  305|  3.32k|    where
  306|  3.32k|        T: Int,
  307|  3.32k|    {
  308|  3.32k|        let start = range.start();
  309|  3.32k|        let end = range.end();
  310|  3.32k|        assert!(
  311|  3.32k|            start <= end,
  312|  3.32k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  3.32k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  3.32k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  3.32k|        }
  320|  3.32k|
  321|  3.32k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  3.32k|        let mut result = T::Widest::ZERO;
  323|  3.32k|        let mut offset: usize = 0;
  324|       |
  325|  6.64k|        while offset < mem::size_of::<T>()
  326|  3.32k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  3.32k|        {
  328|  3.32k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  3.32k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  3.32k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  3.32k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  3.32k|            result = result % range;
  336|  3.32k|        }
  337|       |
  338|  3.32k|        Ok((
  339|  3.32k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  3.32k|            offset,
  341|  3.32k|        ))
  342|  3.32k|    }
_RNvXs5_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  5.56k|                fn from_usize(u: usize) -> Self {
  781|  5.56k|                    u as Self
  782|  5.56k|                }
_RNvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  4.72k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  4.72k|        if self.data.is_empty() {
  226|    191|            Ok(0)
  227|  4.53k|        } else if self.data.len() == 1 {
  228|     92|            self.data = &[];
  229|     92|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|  4.44k|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|  3.32k|                let bytes = 1;
  241|  3.32k|                let max_size = self.data.len() - bytes;
  242|  3.32k|                let (rest, for_size) = self.data.split_at(max_size);
  243|  3.32k|                self.data = rest;
  244|  3.32k|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|  1.12k|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|  1.12k|                let bytes = 2;
  247|  1.12k|                let max_size = self.data.len() - bytes;
  248|  1.12k|                let (rest, for_size) = self.data.split_at(max_size);
  249|  1.12k|                self.data = rest;
  250|  1.12k|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|  4.44k|            Ok(len)
  266|       |        }
  267|  4.72k|    }
_RNvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  74.1k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  74.1k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  74.1k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  74.1k|        for byte in buffer[n..].iter_mut() {
  453|    133|            *byte = 0;
  454|    133|        }
  455|  74.1k|        self.data = &self.data[n..];
  456|  74.1k|        Ok(())
  457|  74.1k|    }
_RNvXs1_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|  3.32k|                fn from_widest(w: Self::Widest) -> Self {
  772|  3.32k|                    let x = <$ty>::max_value().as_widest();
  773|  3.32k|                    (w % x) as Self
  774|  3.32k|                }
_RINvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|  1.12k|    fn int_in_range_impl<T>(
  302|  1.12k|        range: ops::RangeInclusive<T>,
  303|  1.12k|        mut bytes: impl Iterator<Item = u8>,
  304|  1.12k|    ) -> Result<(T, usize)>
  305|  1.12k|    where
  306|  1.12k|        T: Int,
  307|  1.12k|    {
  308|  1.12k|        let start = range.start();
  309|  1.12k|        let end = range.end();
  310|  1.12k|        assert!(
  311|  1.12k|            start <= end,
  312|  1.12k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  1.12k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  1.12k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  1.12k|        }
  320|  1.12k|
  321|  1.12k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  1.12k|        let mut result = T::Widest::ZERO;
  323|  1.12k|        let mut offset: usize = 0;
  324|       |
  325|  3.36k|        while offset < mem::size_of::<T>()
  326|  2.24k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  2.24k|        {
  328|  2.24k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  2.24k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  2.24k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  1.12k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  1.12k|            result = result % range;
  336|  1.12k|        }
  337|       |
  338|  1.12k|        Ok((
  339|  1.12k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  1.12k|            offset,
  341|  1.12k|        ))
  342|  1.12k|    }
_RNvXs2_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|  4.49k|                fn as_widest(self) -> Self::Widest {
  768|  4.49k|                    self as $widest
  769|  4.49k|                }
_RNvXs9_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  69.4k|                fn from_widest(w: Self::Widest) -> Self {
  772|  69.4k|                    let x = <$ty>::max_value().as_widest();
  773|  69.4k|                    (w % x) as Self
  774|  69.4k|                }
_RNvXsb_NtCsgo6bQ0OzdqS_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  69.4k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  69.4k|                    <$ty>::wrapping_add(self, rhs)
  790|  69.4k|                }
_RNvXsb_NtCsgo6bQ0OzdqS_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  69.4k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  69.4k|                    <$ty>::checked_add(self, rhs)
  786|  69.4k|                }
_RNvXsb_NtCsgo6bQ0OzdqS_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|   138k|                fn from_usize(u: usize) -> Self {
  781|   138k|                    u as Self
  782|   138k|                }
_RNvXs1_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  13.2k|                fn as_widest(self) -> Self::Widest {
  768|  13.2k|                    self as $widest
  769|  13.2k|                }
_RNvXs9_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|   277k|                fn as_widest(self) -> Self::Widest {
  768|   277k|                    self as $widest
  769|   277k|                }
_RNvXs5_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|  4.44k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  4.44k|                    <$ty>::checked_add(self, rhs)
  786|  4.44k|                }
_RNvXs2_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|  1.12k|                fn from_widest(w: Self::Widest) -> Self {
  772|  1.12k|                    let x = <$ty>::max_value().as_widest();
  773|  1.12k|                    (w % x) as Self
  774|  1.12k|                }
_RNvXs5_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  5.56k|                fn from_u8(b: u8) -> Self {
  777|  5.56k|                    b as Self
  778|  5.56k|                }
_RNvXsb_NtCsgo6bQ0OzdqS_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  69.4k|                fn from_u8(b: u8) -> Self {
  777|  69.4k|                    b as Self
  778|  69.4k|                }
_RNvMNtCsgo6bQ0OzdqS_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|  1.18k|    pub fn new(data: &'a [u8]) -> Self {
   86|  1.18k|        Unstructured { data }
   87|  1.18k|    }
_RNvXs5_NtCsgo6bQ0OzdqS_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|  4.44k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  4.44k|                    <$ty>::wrapping_add(self, rhs)
  790|  4.44k|                }

rust_fuzzer_test_input:
  167|  1.27k|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|  1.27k|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|  1.27k|
  170|  1.27k|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|  1.27k|            // implementation. This helps the fuzzer avoid exploring all the
  172|  1.27k|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|  1.27k|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|  1.27k|            // get to longer inputs that actually lead to interesting executions
  175|  1.27k|            // quicker.
  176|  1.27k|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|     93|                return;
  178|  1.18k|            }
  179|  1.18k|
  180|  1.18k|            let mut u = Unstructured::new(bytes);
  181|  1.18k|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|  1.18k|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|  1.18k|            }
  199|       |
  200|  1.18k|            let $data = match data {
  201|  1.18k|                Ok(d) => d,
  202|      0|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|  1.27k|        }
LLVMFuzzerTestOneInput:
   27|  1.27k|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|  1.27k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|  1.27k|    });
   32|  1.27k|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|  1.27k|    }
   37|  1.27k|    0
   38|  1.27k|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}
_RNCNvCs6DTqj998TEC_13libfuzzer_sys15test_input_wrap0B3_:
   28|  1.27k|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|  1.27k|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|  1.27k|        rust_fuzzer_test_input(data_slice);
   31|  1.27k|    });

_RNvMs2_NtCs7rNbtOi1Wvn_9once_cell3impINtB5_8OnceCellNtNtCs2RVQmaBFIXO_5alloc6string6StringE14is_initializedCsQfMIxJvgQY_7rle_ops:
   74|  1.18k|    pub(crate) fn is_initialized(&self) -> bool {
   75|  1.18k|        // An `Acquire` load is enough because that makes all the initialization
   76|  1.18k|        // operations visible to us, and, this being a fast path, weaker
   77|  1.18k|        // ordering helps with performance. This `Acquire` synchronizes with
   78|  1.18k|        // `SeqCst` operations on the slow path.
   79|  1.18k|        self.state_and_queue.load(Ordering::Acquire) == COMPLETE
   80|  1.18k|    }

_RNvMs4_NtCs7rNbtOi1Wvn_9once_cell4syncINtB5_8OnceCellNtNtCs2RVQmaBFIXO_5alloc6string6StringE3getCsQfMIxJvgQY_7rle_ops:
  850|  1.18k|        pub fn get(&self) -> Option<&T> {
  851|  1.18k|            if self.0.is_initialized() {
  852|       |                // Safe b/c value is initialized.
  853|      0|                Some(unsafe { self.get_unchecked() })
  854|       |            } else {
  855|  1.18k|                None
  856|       |            }
  857|  1.18k|        }

_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4next0CsQfMIxJvgQY_7rle_ops:
  390|   166k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4next0CsQfMIxJvgQY_7rle_ops:
  390|   113k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekCsQfMIxJvgQY_7rle_ops:
  473|   861k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   861k|        self.next.as_mut()
  475|   861k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekCsQfMIxJvgQY_7rle_ops:
  473|   362k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   362k|        self.next.as_mut()
  475|   362k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionENtNtNtB1z_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  310|  62.8k|    fn next(&mut self) -> Option<Self::Item> {
  311|  62.8k|        self.0.next()
  312|  62.8k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4next0CsQfMIxJvgQY_7rle_ops:
  390|   150k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0CsQfMIxJvgQY_7rle_ops:
  390|   158k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4nexts_0CsQfMIxJvgQY_7rle_ops:
  390|   104k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE3newCsQfMIxJvgQY_7rle_ops:
  342|  9.45k|    fn new(lhs: A, rhs: B) -> Self {
  343|  9.45k|        Self {
  344|  9.45k|            lhs: Lookahead::new(lhs),
  345|  9.45k|            rhs: Lookahead::new(rhs),
  346|  9.45k|            combinator: Default::default(),
  347|  9.45k|        }
  348|  9.45k|    }
_RNvMsa_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EE3newCsQfMIxJvgQY_7rle_ops:
  425|  7.09k|    pub fn new(iter: I) -> Self {
  426|  7.09k|        Self {
  427|  7.09k|            iter: Lookahead::new(iter),
  428|  7.09k|        }
  429|  7.09k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE3newCsQfMIxJvgQY_7rle_ops:
  468|  8.27k|    fn new(mut iter: I) -> Self {
  469|  8.27k|        let next = iter.next();
  470|  8.27k|        Self { iter, next }
  471|  8.27k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0CsQfMIxJvgQY_7rle_ops:
  390|   143k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  387|   362k|    fn next(&mut self) -> Option<Self::Item> {
  388|   362k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   362k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   362k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   362k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeCsQfMIxJvgQY_7rle_ops:
  353|   362k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   362k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   340k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  22.5k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   340k|        if advance_lhs {
  370|   340k|            self.lhs.next();
  371|   340k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   340k|        range
  376|   362k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsQfMIxJvgQY_7rle_ops:
  473|   362k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   362k|        self.next.as_mut()
  475|   362k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  438|   120k|    fn next(&mut self) -> Option<Self::Item> {
  439|   120k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   158k|        while let Some(next) = self.iter.peek() {
  444|   150k|            if next.start > range.end {
  445|   104k|                break;
  446|  46.4k|            }
  447|  46.4k|
  448|  46.4k|            range.end = cmp::max(range.end, next.end);
  449|  46.4k|            self.iter.next();
  450|       |        }
  451|       |
  452|   112k|        Some(range)
  453|   120k|    }
_RNvXsf_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs6h2lu9gk47e_4core7default7Default7defaultCsQfMIxJvgQY_7rle_ops:
   86|  8.27k|#[derive(Default)]
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E3newCsQfMIxJvgQY_7rle_ops:
  342|  8.27k|    fn new(lhs: A, rhs: B) -> Self {
  343|  8.27k|        Self {
  344|  8.27k|            lhs: Lookahead::new(lhs),
  345|  8.27k|            rhs: Lookahead::new(rhs),
  346|  8.27k|            combinator: Default::default(),
  347|  8.27k|        }
  348|  8.27k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E3newCsQfMIxJvgQY_7rle_ops:
  342|  7.09k|    fn new(lhs: A, rhs: B) -> Self {
  343|  7.09k|        Self {
  344|  7.09k|            lhs: Lookahead::new(lhs),
  345|  7.09k|            rhs: Lookahead::new(rhs),
  346|  7.09k|            combinator: Default::default(),
  347|  7.09k|        }
  348|  7.09k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEENtNtNtB1Y_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  438|  62.8k|    fn next(&mut self) -> Option<Self::Item> {
  439|  62.8k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|  53.4k|        while let Some(next) = self.iter.peek() {
  444|  48.0k|            if next.start > range.end {
  445|  48.0k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|  53.4k|        Some(range)
  453|  62.8k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  310|   389k|    fn next(&mut self) -> Option<Self::Item> {
  311|   389k|        self.0.next()
  312|   389k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|   389k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   389k|        let next = self.next.take()?;
  484|   362k|        self.next = self.iter.next();
  485|   362k|        Some(next)
  486|   389k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|   466k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   466k|        let next = self.next.take()?;
  484|   423k|        self.next = self.iter.next();
  485|   423k|        Some(next)
  486|   466k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newCsQfMIxJvgQY_7rle_ops:
  468|  49.6k|    fn new(mut iter: I) -> Self {
  469|  49.6k|        let next = iter.next();
  470|  49.6k|        Self { iter, next }
  471|  49.6k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0CsQfMIxJvgQY_7rle_ops:
  390|   423k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE10next_rangeCsQfMIxJvgQY_7rle_ops:
  353|   113k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   113k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|   104k|            (Some(lhs), Some(rhs)) => {
  356|   104k|                // if both iterators are non-empty, we advance the one whichever's
  357|   104k|                // corresponding range has a smaller upper bound
  358|   104k|                if lhs.end <= rhs.end {
  359|  54.6k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  49.7k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  4.54k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  4.41k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    494|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   113k|        if advance_lhs {
  370|  59.1k|            self.lhs.next();
  371|  59.1k|        } else {
  372|  54.1k|            self.rhs.next();
  373|  54.1k|        }
  374|       |
  375|   113k|        range
  376|   113k|    }
_RNvMs5_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_E3newCsQfMIxJvgQY_7rle_ops:
  297|  8.27k|    pub fn new(a: A, b: B) -> Self {
  298|  8.27k|        Self(Merge::new(_Combine::new(a, b)))
  299|  8.27k|    }
_RNvMs5_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_E3newCsQfMIxJvgQY_7rle_ops:
  297|  7.09k|    pub fn new(a: A, b: B) -> Self {
  298|  7.09k|        Self(Merge::new(_Combine::new(a, b)))
  299|  7.09k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  310|   466k|    fn next(&mut self) -> Option<Self::Item> {
  311|   466k|        self.0.next()
  312|   466k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|   416k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   416k|        let next = self.next.take()?;
  484|   416k|        self.next = self.iter.next();
  485|   416k|        Some(next)
  486|   416k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|   340k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   340k|        let next = self.next.take()?;
  484|   340k|        self.next = self.iter.next();
  485|   340k|        Some(next)
  486|   340k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE4peekCsQfMIxJvgQY_7rle_ops:
  473|   103k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   103k|        self.next.as_mut()
  475|   103k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  438|   466k|    fn next(&mut self) -> Option<Self::Item> {
  439|   466k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   423k|        while let Some(next) = self.iter.peek() {
  444|   389k|            if next.start > range.end {
  445|   389k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   423k|        Some(range)
  453|   466k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E10next_rangeCsQfMIxJvgQY_7rle_ops:
  353|   166k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   166k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  85.2k|            (Some(lhs), Some(rhs)) => {
  356|  85.2k|                // if both iterators are non-empty, we advance the one whichever's
  357|  85.2k|                // corresponding range has a smaller upper bound
  358|  85.2k|                if lhs.end <= rhs.end {
  359|  43.9k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  41.3k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  38.5k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  34.7k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  8.27k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   158k|        if advance_lhs {
  370|  82.4k|            self.lhs.next();
  371|  82.4k|        } else {
  372|  76.0k|            self.rhs.next();
  373|  76.0k|        }
  374|       |
  375|   158k|        range
  376|   166k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E10next_rangeCsQfMIxJvgQY_7rle_ops:
  353|   150k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   150k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  83.3k|            (Some(lhs), Some(rhs)) => {
  356|  83.3k|                // if both iterators are non-empty, we advance the one whichever's
  357|  83.3k|                // corresponding range has a smaller upper bound
  358|  83.3k|                if lhs.end <= rhs.end {
  359|  44.7k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  38.5k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  59.7k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  2.07k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  5.01k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   145k|        if advance_lhs {
  370|   104k|            self.lhs.next();
  371|   104k|        } else {
  372|  40.6k|            self.rhs.next();
  373|  40.6k|        }
  374|       |
  375|   145k|        range
  376|   150k|    }
_RNvMs5_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionE3newCsQfMIxJvgQY_7rle_ops:
  297|  9.45k|    pub fn new(a: A, b: B) -> Self {
  298|  9.45k|        Self(Merge::new(_Combine::new(a, b)))
  299|  9.45k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  438|   389k|    fn next(&mut self) -> Option<Self::Item> {
  439|   389k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   362k|        while let Some(next) = self.iter.peek() {
  444|   340k|            if next.start > range.end {
  445|   340k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   362k|        Some(range)
  453|   389k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|   389k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   389k|        let next = self.next.take()?;
  484|   389k|        self.next = self.iter.next();
  485|   389k|        Some(next)
  486|   389k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEENtNtNtB22_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|  62.8k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  62.8k|        let next = self.next.take()?;
  484|  53.4k|        self.next = self.iter.next();
  485|  53.4k|        Some(next)
  486|  62.8k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCsQfMIxJvgQY_7rle_ops:
  473|   423k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   423k|        self.next.as_mut()
  475|   423k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE4peekCsQfMIxJvgQY_7rle_ops:
  473|  53.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  53.4k|        self.next.as_mut()
  475|  53.4k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_ENtNtNtB1z_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  310|   120k|    fn next(&mut self) -> Option<Self::Item> {
  311|   120k|        self.0.next()
  312|   120k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_ENtNtNtB1z_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  310|   110k|    fn next(&mut self) -> Option<Self::Item> {
  311|   110k|        self.0.next()
  312|   110k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EENtNtNtB22_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|   166k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   166k|        let next = self.next.take()?;
  484|   158k|        self.next = self.iter.next();
  485|   158k|        Some(next)
  486|   166k|    }
_RNvMsa_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEE3newCsQfMIxJvgQY_7rle_ops:
  425|  9.45k|    pub fn new(iter: I) -> Self {
  426|  9.45k|        Self {
  427|  9.45k|            iter: Lookahead::new(iter),
  428|  9.45k|        }
  429|  9.45k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeCsQfMIxJvgQY_7rle_ops:
  353|   423k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   423k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   389k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  34.3k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   389k|        if advance_lhs {
  370|   389k|            self.lhs.next();
  371|   389k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   389k|        range
  376|   423k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0CsQfMIxJvgQY_7rle_ops:
  390|   362k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE4peekCsQfMIxJvgQY_7rle_ops:
  473|   158k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   158k|        self.next.as_mut()
  475|   158k|    }
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_ENtNtNtB1M_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  387|   166k|    fn next(&mut self) -> Option<Self::Item> {
  388|   166k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   166k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   166k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   166k|    }
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_ENtNtNtB1M_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  387|   110k|    fn next(&mut self) -> Option<Self::Item> {
  388|   110k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   110k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   110k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   110k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EEE4peekCsQfMIxJvgQY_7rle_ops:
  473|   786k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   786k|        self.next.as_mut()
  475|   786k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0CsQfMIxJvgQY_7rle_ops:
  390|   389k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0CsQfMIxJvgQY_7rle_ops:
  390|   340k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsa_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EE3newCsQfMIxJvgQY_7rle_ops:
  425|  8.27k|    pub fn new(iter: I) -> Self {
  426|  8.27k|        Self {
  427|  8.27k|            iter: Lookahead::new(iter),
  428|  8.27k|        }
  429|  8.27k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE3newCsQfMIxJvgQY_7rle_ops:
  468|  7.09k|    fn new(mut iter: I) -> Self {
  469|  7.09k|        let next = iter.next();
  470|  7.09k|        Self { iter, next }
  471|  7.09k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekCsQfMIxJvgQY_7rle_ops:
  473|   423k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   423k|        self.next.as_mut()
  475|   423k|    }
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionENtNtNtB1M_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  387|  62.8k|    fn next(&mut self) -> Option<Self::Item> {
  388|  62.8k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  62.8k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  62.8k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  62.8k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EENtNtNtB1Y_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  438|   110k|    fn next(&mut self) -> Option<Self::Item> {
  439|   110k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   103k|        while let Some(next) = self.iter.peek() {
  444|  97.2k|            if next.start > range.end {
  445|  97.2k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   103k|        Some(range)
  453|   110k|    }
_RNvXsg_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_12IntersectionNtNtCs6h2lu9gk47e_4core7default7Default7defaultCsQfMIxJvgQY_7rle_ops:
  122|  9.45k|#[derive(Default)]
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  387|   423k|    fn next(&mut self) -> Option<Self::Item> {
  388|   423k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   423k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   423k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   423k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EENtNtNtB22_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  481|   110k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   110k|        let next = self.next.take()?;
  484|   103k|        self.next = self.iter.next();
  485|   103k|        Some(next)
  486|   110k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE3newCsQfMIxJvgQY_7rle_ops:
  468|  9.45k|    fn new(mut iter: I) -> Self {
  469|  9.45k|        let next = iter.next();
  470|  9.45k|        Self { iter, next }
  471|  9.45k|    }
_RNvXsh_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs6h2lu9gk47e_4core7default7Default7defaultCsQfMIxJvgQY_7rle_ops:
  151|  7.09k|#[derive(Default)]
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|  1.18k|    fn next(&mut self) -> Option<Self::Item> {
  439|  1.18k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|      0|        while let Some(next) = self.iter.peek() {
  444|      0|            if next.start > range.end {
  445|      0|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|      0|        Some(range)
  453|  1.18k|    }
_RNvXs0_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|  44.7k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|  44.7k|        // lhs:     xx----      xxxx--      --xx--
  157|  44.7k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|  44.7k|        // output:  xx----      xx----      ------
  159|  44.7k|
  160|  44.7k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|  44.7k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newB9_:
  468|  33.0k|    fn new(mut iter: I) -> Self {
  469|  33.0k|        let next = iter.next();
  470|  33.0k|        Self { iter, next }
  471|  33.0k|    }
_RNvXsf_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs6h2lu9gk47e_4core7default7Default7defaultB9_:
   86|   118k|#[derive(Default)]
_RNvMs5_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceE3newB9_:
  297|  15.3k|    pub fn new(a: A, b: B) -> Self {
  298|  15.3k|        Self(Merge::new(_Combine::new(a, b)))
  299|  15.3k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   859k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   859k|        self.next.as_mut()
  475|   859k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|   284k|    fn next(&mut self) -> Option<Self::Item> {
  311|   284k|        self.0.next()
  312|   284k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekB9_:
  473|   768k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   768k|        self.next.as_mut()
  475|   768k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  481|   947k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   947k|        let next = self.next.take()?;
  484|   859k|        self.next = self.iter.next();
  485|   859k|        Some(next)
  486|   947k|    }
_RNvXNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  43.9k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  43.9k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  43.9k|        // to ensure that the lower bounds are monotonically increasing
   93|  43.9k|        //
   94|  43.9k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  43.9k|        // `xxxx--` and then `xxxxxx`, not
   96|  43.9k|        // `--xx--` and then `xxxxxx`
   97|  43.9k|        //
   98|  43.9k|        // lhs:     xx----      xxxx--      --xx--
   99|  43.9k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  43.9k|        // output:  xx----      xxxx--      xxxx--
  101|  43.9k|
  102|  43.9k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  43.9k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  473|   978k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   978k|        self.next.as_mut()
  475|   978k|    }
_RNvXs_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_rhs_tail:
  143|  4.41k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  144|  4.41k|        None
  145|  4.41k|    }
_RNvXs2_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_rhs_tail:
  238|  42.6k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  239|  42.6k|        Some(rhs)
  240|  42.6k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  468|   118k|    fn new(mut iter: I) -> Self {
  469|   118k|        let next = iter.next();
  470|   118k|        Self { iter, next }
  471|   118k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  481|   857k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   857k|        let next = self.next.take()?;
  484|   789k|        self.next = self.iter.next();
  485|   789k|        Some(next)
  486|   857k|    }
_RNvXs4_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_lhs:
  262|  17.7k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  263|  17.7k|        // apart from the offset, these implementations are identical to those of the `Difference` combinator
  264|  17.7k|        self.offset(lhs.start..cmp::min(lhs.end, rhs.start))
  265|  17.7k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|   978k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   978k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   886k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  91.8k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   886k|        if advance_lhs {
  370|   886k|            self.lhs.next();
  371|   886k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   886k|        range
  376|   978k|    }
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|   289k|    fn next(&mut self) -> Option<Self::Item> {
  388|   289k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   289k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   289k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   289k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE10next_rangeB9_:
  353|  35.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  35.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  34.4k|            (Some(lhs), Some(rhs)) => {
  356|  34.4k|                // if both iterators are non-empty, we advance the one whichever's
  357|  34.4k|                // corresponding range has a smaller upper bound
  358|  34.4k|                if lhs.end <= rhs.end {
  359|  17.7k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  16.6k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|      0|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  1.09k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|     91|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  35.5k|        if advance_lhs {
  370|  17.7k|            self.lhs.next();
  371|  17.7k|        } else {
  372|  17.7k|            self.rhs.next();
  373|  17.7k|        }
  374|       |
  375|  35.5k|        range
  376|  35.6k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  390|   828k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs0_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|  38.5k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|  38.5k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|  38.5k|        // to avoid it from returning invalid bits in the next iteration
  166|  38.5k|        //
  167|  38.5k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|  38.5k|        // `------` and then `----xx`, not
  169|  38.5k|        // `------` and then `--xxxx`
  170|  38.5k|        //
  171|  38.5k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|  38.5k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|  38.5k|        // output:   ------      ------      xx----
  174|  38.5k|        // new lhs:  ----xx      ----xx      ----xx
  175|  38.5k|
  176|  38.5k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|  38.5k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|  38.5k|        difference
  179|  38.5k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|   118k|    fn new(lhs: A, rhs: B) -> Self {
  343|   118k|        Self {
  344|   118k|            lhs: Lookahead::new(lhs),
  345|   118k|            rhs: Lookahead::new(rhs),
  346|   118k|            combinator: Default::default(),
  347|   118k|        }
  348|   118k|    }
_RNvXs2_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_rhs:
  229|  89.7k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  230|  89.7k|        Self::advance(rhs, lhs)
  231|  89.7k|    }
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|  1.18k|    fn next(&mut self) -> Option<Self::Item> {
  388|  1.18k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  1.18k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|  1.18k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|  1.18k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  468|   236k|    fn new(mut iter: I) -> Self {
  469|   236k|        let next = iter.next();
  470|   236k|        Self { iter, next }
  471|   236k|    }
_RNvXs_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_rhs:
  134|  49.7k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  135|  49.7k|        cmp::max(lhs.start, rhs.start)..rhs.end
  136|  49.7k|    }
_RNvMsa_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEE3newB9_:
  425|  1.18k|    pub fn new(iter: I) -> Self {
  426|  1.18k|        Self {
  427|  1.18k|            iter: Lookahead::new(iter),
  428|  1.18k|        }
  429|  1.18k|    }
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|   907k|    fn next(&mut self) -> Option<Self::Item> {
  388|   907k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   907k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   907k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   907k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|   118k|    fn new(mut iter: I) -> Self {
  469|   118k|        let next = iter.next();
  470|   118k|        Self { iter, next }
  471|   118k|    }
_RNvXs2_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_lhs:
  225|   106k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  226|   106k|        Self::advance(lhs, rhs)
  227|   106k|    }
_RNvMs5_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|   118k|    pub fn new(a: A, b: B) -> Self {
  298|   118k|        Self(Merge::new(_Combine::new(a, b)))
  299|   118k|    }
_RNvMs5_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|   118k|    pub fn new(a: A, b: B) -> Self {
  298|   118k|        Self(Merge::new(_Combine::new(a, b)))
  299|   118k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|  1.18k|    fn next(&mut self) -> Option<Self::Item> {
  311|  1.18k|        self.0.next()
  312|  1.18k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE3newB9_:
  468|  15.3k|    fn new(mut iter: I) -> Self {
  469|  15.3k|        let next = iter.next();
  470|  15.3k|        Self { iter, next }
  471|  15.3k|    }
_RNvMsa_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEE3newB9_:
  425|  15.3k|    pub fn new(iter: I) -> Self {
  426|  15.3k|        Self {
  427|  15.3k|            iter: Lookahead::new(iter),
  428|  15.3k|        }
  429|  15.3k|    }
_RNvMs5_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutE3newB9_:
  297|  1.18k|    pub fn new(a: A, b: B) -> Self {
  298|  1.18k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.18k|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|   947k|    fn next(&mut self) -> Option<Self::Item> {
  311|   947k|        self.0.next()
  312|   947k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  481|   886k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   886k|        let next = self.next.take()?;
  484|   886k|        self.next = self.iter.next();
  485|   886k|        Some(next)
  486|   886k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  390|   886k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE10next_rangeB9_:
  353|   348k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   348k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|   196k|            (Some(lhs), Some(rhs)) => {
  356|   196k|                // if both iterators are non-empty, we advance the one whichever's
  357|   196k|                // corresponding range has a smaller upper bound
  358|   196k|                if lhs.end <= rhs.end {
  359|   106k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  89.7k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  94.3k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  42.6k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  15.3k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   333k|        if advance_lhs {
  370|   200k|            self.lhs.next();
  371|   200k|        } else {
  372|   132k|            self.rhs.next();
  373|   132k|        }
  374|       |
  375|   333k|        range
  376|   348k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|  34.4k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|  35.6k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE4peekB9_:
  473|   274k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   274k|        self.next.as_mut()
  475|   274k|    }
_RNvXs_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_lhs_tail:
  138|  4.54k|    fn advance_lhs_tail(&mut self, _lhs: Range<u64>) -> Option<Range<u64>> {
  139|  4.54k|        // the intersection of a range and an empty range is an empty range
  140|  4.54k|        None
  141|  4.54k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  438|   947k|    fn next(&mut self) -> Option<Self::Item> {
  439|   947k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   859k|        while let Some(next) = self.iter.peek() {
  444|   794k|            if next.start > range.end {
  445|   794k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   859k|        Some(range)
  453|   947k|    }
_RNvXNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|  41.3k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|  41.3k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|  41.3k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  390|   348k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE3newB9_:
  342|  1.18k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.18k|        Self {
  344|  1.18k|            lhs: Lookahead::new(lhs),
  345|  1.18k|            rhs: Lookahead::new(rhs),
  346|  1.18k|            combinator: Default::default(),
  347|  1.18k|        }
  348|  1.18k|    }
_RNvXs4_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_rhs:
  267|  16.6k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  268|  16.6k|        let cut = self.offset(lhs.start..cmp::min(lhs.end, rhs.start));
  269|  16.6k|        lhs.start = cmp::max(lhs.start, rhs.end);
  270|  16.6k|        self.offset += rhs.size();
  271|  16.6k|        cut
  272|  16.6k|    }
_RNvXs_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_lhs:
  126|  54.6k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  127|  54.6k|        // lhs:     xx----      xxxx--      --xx--
  128|  54.6k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  129|  54.6k|        // output:  ------      --xx--      --xx--
  130|  54.6k|
  131|  54.6k|        cmp::max(lhs.start, rhs.start)..lhs.end
  132|  54.6k|    }
_RNvXs0_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|  1.27M|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|  1.27M|        // the difference between a range and an empty range is just that range
  183|  1.27M|        Some(lhs)
  184|  1.27M|    }
_RNvXs6_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|   857k|    fn next(&mut self) -> Option<Self::Item> {
  311|   857k|        self.0.next()
  312|   857k|    }
_RNvXsj_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtNtCs6h2lu9gk47e_4core7default7Default7defaultB9_:
  247|  1.18k|#[derive(Default)]
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|  1.18k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|  1.18k|        let next = self.next.take()?;
  484|      0|        self.next = self.iter.next();
  485|      0|        Some(next)
  486|  1.18k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  468|   118k|    fn new(mut iter: I) -> Self {
  469|   118k|        let next = iter.next();
  470|   118k|        Self { iter, next }
  471|   118k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  468|   118k|    fn new(mut iter: I) -> Self {
  469|   118k|        let next = iter.next();
  470|   118k|        Self { iter, next }
  471|   118k|    }
_RNvXNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|  34.7k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|  34.7k|        Some(rhs)
  116|  34.7k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  390|   907k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  481|   289k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   289k|        let next = self.next.take()?;
  484|   274k|        self.next = self.iter.next();
  485|   274k|        Some(next)
  486|   289k|    }
_RNvXs4_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator16advance_rhs_tail:
  278|  1.09k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  279|  1.09k|        None
  280|  1.09k|    }
_RNvMsa_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  425|   118k|    pub fn new(iter: I) -> Self {
  426|   118k|        Self {
  427|   118k|            iter: Lookahead::new(iter),
  428|   118k|        }
  429|   118k|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  481|   368k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   368k|        let next = self.next.take()?;
  484|   368k|        self.next = self.iter.next();
  485|   368k|        Some(next)
  486|   368k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  438|   857k|    fn next(&mut self) -> Option<Self::Item> {
  439|   857k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   789k|        while let Some(next) = self.iter.peek() {
  444|   736k|            if next.start > range.end {
  445|   736k|                break;
  446|      0|            }
  447|      0|
  448|      0|            range.end = cmp::max(range.end, next.end);
  449|      0|            self.iter.next();
  450|       |        }
  451|       |
  452|   789k|        Some(range)
  453|   857k|    }
_RNvMsa_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  425|   118k|    pub fn new(iter: I) -> Self {
  426|   118k|        Self {
  427|   118k|            iter: Lookahead::new(iter),
  428|   118k|        }
  429|   118k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  390|   333k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs0_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|  2.07k|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|  2.07k|        // the difference between an empty range and a range is an empty range
  188|  2.07k|        None
  189|  2.07k|    }
_RNvXsh_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs6h2lu9gk47e_4core7default7Default7defaultB9_:
  151|   118k|#[derive(Default)]
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|   118k|    fn new(lhs: A, rhs: B) -> Self {
  343|   118k|        Self {
  344|   118k|            lhs: Lookahead::new(lhs),
  345|   118k|            rhs: Lookahead::new(rhs),
  346|   118k|            combinator: Default::default(),
  347|   118k|        }
  348|   118k|    }
_RNvXsi_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtNtCs6h2lu9gk47e_4core7default7Default7defaultB9_:
  195|  15.3k|#[derive(Default)]
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  473|   907k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   907k|        self.next.as_mut()
  475|   907k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|   907k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   907k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   828k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  78.4k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   828k|        if advance_lhs {
  370|   828k|            self.lhs.next();
  371|   828k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   828k|        range
  376|   907k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  473|  1.88M|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|  1.88M|        self.next.as_mut()
  475|  1.88M|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEE3newB9_:
  468|  1.18k|    fn new(mut iter: I) -> Self {
  469|  1.18k|        let next = iter.next();
  470|  1.18k|        Self { iter, next }
  471|  1.18k|    }
_RNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|   978k|    fn next(&mut self) -> Option<Self::Item> {
  388|   978k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   978k|        // TODO: use `!range.is_empty()` once it stabilizes in Rust 1.47
  390|   978k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
  391|   978k|    }
_RNCNvXs9_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  390|   978k|        iter::from_fn(|| self.next_range()).find(|range| range.start < range.end)
_RNvXs2_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_lhs_tail:
  233|  94.3k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  234|  94.3k|        // the symmetric difference of a range and an empty range is just that range
  235|  94.3k|        Some(lhs)
  236|  94.3k|    }
_RNvXsb_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  438|   284k|    fn next(&mut self) -> Option<Self::Item> {
  439|   284k|        let mut range = self.iter.next()?;
  440|       |
  441|       |        // as long as the next range overlaps with (or touches) current range,
  442|       |        // we merge it into the current range
  443|   274k|        while let Some(next) = self.iter.peek() {
  444|   260k|            if next.start > range.end {
  445|   255k|                break;
  446|  5.37k|            }
  447|  5.37k|
  448|  5.37k|            range.end = cmp::max(range.end, next.end);
  449|  5.37k|            self.iter.next();
  450|       |        }
  451|       |
  452|   268k|        Some(range)
  453|   284k|    }
_RNvMs8_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE3newB9_:
  342|  15.3k|    fn new(lhs: A, rhs: B) -> Self {
  343|  15.3k|        Self {
  344|  15.3k|            lhs: Lookahead::new(lhs),
  345|  15.3k|            rhs: Lookahead::new(rhs),
  346|  15.3k|            combinator: Default::default(),
  347|  15.3k|        }
  348|  15.3k|    }
_RNvMs1_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifference7advance:
  201|   196k|    fn advance(left: Range<u64>, right: &mut Range<u64>) -> Range<u64> {
  202|   196k|        if left.start <= right.start {
  203|       |            // left:       xxxx--      xx----
  204|       |            // right:      --xxxx  or  ----xx
  205|       |            // output:     xx----      xx----
  206|       |            // new right:  ----xx      ----xx
  207|       |
  208|   133k|            let difference = left.start..cmp::min(left.end, right.start);
  209|   133k|            right.start = cmp::max(right.start, left.end);
  210|   133k|            difference
  211|       |        } else {
  212|       |            // left:       --xx--
  213|       |            // right:      xxxxxx
  214|       |            // output:     xx----
  215|       |            // new right:  ----xx
  216|       |
  217|  62.6k|            let difference = right.start..left.start;
  218|  62.6k|            right.start = left.end;
  219|  62.6k|            difference
  220|       |        }
  221|   196k|    }
_RNvMs3_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB5_3Cut6offset:
  256|  34.4k|    fn offset(&self, range: Range<u64>) -> Range<u64> {
  257|  34.4k|        (range.start - self.offset)..(range.end - self.offset)
  258|  34.4k|    }
_RNvXNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|  1.26M|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|  1.26M|        // the union of a range and an empty range is just that range
  111|  1.26M|        Some(lhs)
  112|  1.26M|    }
_RNvXse_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  481|   828k|    fn next(&mut self) -> Option<Self::Item> {
  482|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  483|   828k|        let next = self.next.take()?;
  484|   828k|        self.next = self.iter.next();
  485|   828k|        Some(next)
  486|   828k|    }
_RNvMsd_NtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  473|   789k|    fn peek(&mut self) -> Option<&mut I::Item> {
  474|   789k|        self.next.as_mut()
  475|   789k|    }

_RNvXs3_NtCsexBJaOrFB56_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextCsQfMIxJvgQY_7rle_ops:
  153|   340k|    fn next(&mut self) -> Option<Self::Item> {
  154|   340k|        self.0.next()
  155|   340k|    }
_RINvYINtNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator5unionB3_ECsQfMIxJvgQY_7rle_ops:
   21|  8.27k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  8.27k|        Combine::new(self, other)
   23|  8.27k|    }
_RINvYINtNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator10differenceB3_ECsQfMIxJvgQY_7rle_ops:
   31|  7.09k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  7.09k|        Combine::new(self, other)
   33|  7.09k|    }
_RINvYINtNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator12intersectionB3_ECsQfMIxJvgQY_7rle_ops:
   26|  9.45k|    fn intersection<R: RangeIterator>(self, other: R) -> Combine<Self, R, Intersection> {
   27|  9.45k|        Combine::new(self, other)
   28|  9.45k|    }
_RINvYINtNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator20symmetric_differenceB3_EBa_:
   36|  15.3k|    fn symmetric_difference<R: RangeIterator>(
   37|  15.3k|        self,
   38|  15.3k|        other: R,
   39|  15.3k|    ) -> Combine<Self, R, SymmetricDifference> {
   40|  15.3k|        Combine::new(self, other)
   41|  15.3k|    }
_RINvMs2_NtCsexBJaOrFB56_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|   236k|    pub fn new<II>(iter: II) -> Self
  140|   236k|    where
  141|   236k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|   236k|    {
  143|   236k|        Self(iter.into_iter())
  144|   236k|    }
_RINvYINtNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator3cutB3_EBa_:
   53|  1.18k|    fn cut<R: RangeIterator>(self, other: R) -> Combine<Self, R, Cut> {
   54|  1.18k|        Combine::new(self, other)
   55|  1.18k|    }
_RINvYINtNtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|   118k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|   118k|        Combine::new(self, other)
   33|   118k|    }
_RINvMs2_NtCsexBJaOrFB56_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|   118k|    pub fn new<II>(iter: II) -> Self
  140|   118k|    where
  141|   118k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|   118k|    {
  143|   118k|        Self(iter.into_iter())
  144|   118k|    }
_RNvXs3_NtCsexBJaOrFB56_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   236k|    fn next(&mut self) -> Option<Self::Item> {
  154|   236k|        self.0.next()
  155|   236k|    }
_RINvYINtNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|   118k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|   118k|        Combine::new(self, other)
   23|   118k|    }
_RNCINvNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0B6_:
  166|   236k|    Ranges::new(iter::from_fn(move || {
  167|   236k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|   236k|    }))
_RNvXs3_NtCsexBJaOrFB56_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  1.00M|    fn next(&mut self) -> Option<Self::Item> {
  154|  1.00M|        self.0.next()
  155|  1.00M|    }
_RINvNtCsexBJaOrFB56_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEEB4_:
  163|   236k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|   236k|    let mut iter = bits.into_iter().peekable();
  165|   236k|
  166|   236k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|   236k|    }))
  180|   236k|}

_RNvXs7_CsexBJaOrFB56_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs6h2lu9gk47e_4core3ops3bit6BitAnd6bitandCsQfMIxJvgQY_7rle_ops:
  363|  9.45k|    fn bitand(self, rhs: &BitField) -> Self::Output {
  364|  9.45k|        BitField::from_ranges(self.ranges().intersection(rhs.ranges()))
  365|  9.45k|    }
_RNvXs5_CsexBJaOrFB56_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs6h2lu9gk47e_4core3ops3bit5BitOr5bitorCsQfMIxJvgQY_7rle_ops:
  347|  8.27k|    fn bitor(self, rhs: &BitField) -> Self::Output {
  348|  8.27k|        BitField::from_ranges(self.ranges().union(rhs.ranges()))
  349|  8.27k|    }
_RINvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_12IntersectionEECsQfMIxJvgQY_7rle_ops:
  135|  9.45k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  9.45k|        Self {
  137|  9.45k|            ranges: iter.collect(),
  138|  9.45k|            ..Default::default()
  139|  9.45k|        }
  140|  9.45k|    }
_RNvXsi_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs6h2lu9gk47e_4core7default7Default7defaultCsQfMIxJvgQY_7rle_ops:
   36|  24.8k|#[derive(Debug, Default, Clone)]
_RINvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6h_EECsQfMIxJvgQY_7rle_ops:
  135|  8.27k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  8.27k|        Self {
  137|  8.27k|            ranges: iter.collect(),
  138|  8.27k|            ..Default::default()
  139|  8.27k|        }
  140|  8.27k|    }
_RINvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6y_EECsQfMIxJvgQY_7rle_ops:
  135|  7.09k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  7.09k|        Self {
  137|  7.09k|            ranges: iter.collect(),
  138|  7.09k|            ..Default::default()
  139|  7.09k|        }
  140|  7.09k|    }
_RNvXs9_CsexBJaOrFB56_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs6h2lu9gk47e_4core3ops5arith3Sub3subCsQfMIxJvgQY_7rle_ops:
  379|  7.09k|    fn sub(self, rhs: &BitField) -> Self::Output {
  380|  7.09k|        BitField::from_ranges(self.ranges().difference(rhs.ranges()))
  381|  7.09k|    }
_RNvXsi_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs6h2lu9gk47e_4core7default7Default7defaultB5_:
   36|  23.6k|#[derive(Debug, Default, Clone)]
_RINvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_3CutEEB6_:
  135|  1.18k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  1.18k|        Self {
  137|  1.18k|            ranges: iter.collect(),
  138|  1.18k|            ..Default::default()
  139|  1.18k|        }
  140|  1.18k|    }
_RNvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  273|   118k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  274|   118k|        iter::Ranges::new(self.ranges.iter().cloned())
  275|   118k|    }
_RINvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs6h2lu9gk47e_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs2RVQmaBFIXO_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_19SymmetricDifferenceEEB6_:
  135|  15.3k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  136|  15.3k|        Self {
  137|  15.3k|            ranges: iter.collect(),
  138|  15.3k|            ..Default::default()
  139|  15.3k|        }
  140|  15.3k|    }
_RNvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  279|   118k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  280|   118k|        self.inner_ranges()
  281|   118k|            .union(ranges_from_bits(self.set.iter().copied()))
  282|   118k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  283|   118k|    }
_RNvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB5_8BitField3new:
  130|  2.36k|    pub fn new() -> Self {
  131|  2.36k|        Self::default()
  132|  2.36k|    }
_RNvXsb_CsexBJaOrFB56_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs6h2lu9gk47e_4core3ops3bit6BitXor6bitxor:
  394|  15.3k|    fn bitxor(self, rhs: &BitField) -> Self::Output {
  395|  15.3k|        BitField::from_ranges(self.ranges().symmetric_difference(rhs.ranges()))
  396|  15.3k|    }
_RNvXs_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCs6h2lu9gk47e_4core3cmp9PartialEq2eq:
   47|  17.7k|    fn eq(&self, other: &Self) -> bool {
   48|  17.7k|        Iterator::eq(self.ranges(), other.ranges())
   49|  17.7k|    }
_RNvMs4_CsexBJaOrFB56_17fvm_ipld_bitfieldNtB5_8BitField3cut:
  323|  1.18k|    pub fn cut(&self, other: &Self) -> Self {
  324|  1.18k|        Self::from_ranges(self.ranges().cut(other.ranges()))
  325|  1.18k|    }

_RNvXNtCsexBJaOrFB56_17fvm_ipld_bitfield5rangeINtNtNtCs6h2lu9gk47e_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  16.6k|    fn size(&self) -> Self::Idx {
   15|  16.6k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  16.6k|            self.end - self.start
   19|       |        }
   20|  16.6k|    }

_RNvXs0_NtCsexBJaOrFB56_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsgo6bQ0OzdqS_9arbitrary9Arbitrary9size_hint:
  155|  3.82k|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  156|  3.82k|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  157|  3.82k|    }
_RNvXs0_NtCsexBJaOrFB56_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsgo6bQ0OzdqS_9arbitrary9Arbitrary9arbitrary:
  119|  4.72k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  120|  4.72k|        let mut next_value: bool = bool::arbitrary(u)?;
  121|  4.72k|        let mut ranges = Vec::new();
  122|  4.72k|        let mut index = 0u64;
  123|  4.72k|        let mut total_len: u64 = 0;
  124|       |
  125|  4.72k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  126|       |
  127|  4.72k|        for _ in 0..size {
  128|       |            // 3 line crappy "power-law" distribution
  129|  69.4k|            let len = u64::arbitrary(u)?;
  130|  69.4k|            let shift = u.int_in_range(0..=63)?;
  131|  69.4k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  132|  69.4k|
  133|  69.4k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  134|  69.4k|            if ovf {
  135|    448|                break;
  136|  68.9k|            }
  137|  68.9k|            total_len = new_total_len;
  138|  68.9k|            let start = index;
  139|  68.9k|            index += len;
  140|  68.9k|            let end = index;
  141|  68.9k|
  142|  68.9k|            if next_value {
  143|  34.8k|                ranges.push(start..end);
  144|  34.8k|            }
  145|       |
  146|  68.9k|            next_value = !next_value;
  147|       |        }
  148|       |
  149|  4.72k|        Ok(Self {
  150|  4.72k|            ranges,
  151|  4.72k|            ..Default::default()
  152|  4.72k|        })
  153|  4.72k|    }

