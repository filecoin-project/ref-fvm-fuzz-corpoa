_RNvXs8_Csc5kivX8VefX_9arbitraryANtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary19arbitrary_take_restCs6s2XdU8acmD_7rle_ops:
  648|    279|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  649|    279|        let mut array = Self::arbitrary(&mut u)?;
  650|    279|        if let Some(last) = array.last_mut() {
  651|    279|            *last = Arbitrary::arbitrary_take_rest(u)?;
  652|      0|        }
  653|    279|        Ok(array)
  654|    279|    }
_RINvCsc5kivX8VefX_9arbitrary12create_arrayNCNvXs8_B2_ANtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9size_hint0TjINtNtCs1lFzDPBt5Wg_4core6option6OptionjEEKB1y_ECs6s2XdU8acmD_7rle_ops:
  596|    280|fn create_array<F, T, const N: usize>(mut cb: F) -> [T; N]
  597|    280|where
  598|    280|    F: FnMut(usize) -> T,
  599|    280|{
  600|    280|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  601|    280|    let array_ptr = array.as_mut_ptr();
  602|    280|    let dst = array_ptr as _;
  603|    280|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  604|    280|        dst,
  605|    280|        initialized: 0,
  606|    280|    };
  607|       |    unsafe {
  608|    840|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  609|    840|            core::ptr::write(value_ptr, cb(idx));
  610|    840|            guard.initialized += 1;
  611|    840|        }
  612|    280|        mem::forget(guard);
  613|    280|        array.assume_init()
  614|    280|    }
  615|    280|}
_RINvCsc5kivX8VefX_9arbitrary16try_create_arrayNCNvXs8_B2_ANtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldj3_NtB2_9Arbitrary9arbitrary0BU_KB1C_ECs6s2XdU8acmD_7rle_ops:
  617|    279|fn try_create_array<F, T, const N: usize>(mut cb: F) -> Result<[T; N]>
  618|    279|where
  619|    279|    F: FnMut(usize) -> Result<T>,
  620|    279|{
  621|    279|    let mut array: mem::MaybeUninit<[T; N]> = mem::MaybeUninit::uninit();
  622|    279|    let array_ptr = array.as_mut_ptr();
  623|    279|    let dst = array_ptr as _;
  624|    279|    let mut guard: ArrayGuard<T, N> = ArrayGuard {
  625|    279|        dst,
  626|    279|        initialized: 0,
  627|    279|    };
  628|       |    unsafe {
  629|    837|        for (idx, value_ptr) in (&mut *array.as_mut_ptr()).iter_mut().enumerate() {
  630|    837|            core::ptr::write(value_ptr, cb(idx)?);
  631|    837|            guard.initialized += 1;
  632|       |        }
  633|    279|        mem::forget(guard);
  634|    279|        Ok(array.assume_init())
  635|       |    }
  636|    279|}
_RNCNvXs8_Csc5kivX8VefX_9arbitraryANtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9size_hint0Cs6s2XdU8acmD_7rle_ops:
  658|    840|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|    840|            <T as Arbitrary>::size_hint(d)
  660|    840|        }))
_RNvXs8_Csc5kivX8VefX_9arbitraryANtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9arbitraryCs6s2XdU8acmD_7rle_ops:
  643|    279|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  644|    279|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
  645|    279|    }
_RNCNvXs8_Csc5kivX8VefX_9arbitraryANtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldj3_NtB7_9Arbitrary9arbitrary0Cs6s2XdU8acmD_7rle_ops:
  644|    837|        try_create_array(|_| <T as Arbitrary<'a>>::arbitrary(u))
_RNvYNtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldNtCsc5kivX8VefX_9arbitrary9Arbitrary19arbitrary_take_restCs6s2XdU8acmD_7rle_ops:
  182|    279|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  183|    279|        Self::arbitrary(&mut u)
  184|    279|    }
_RNvXs8_Csc5kivX8VefX_9arbitraryANtCsjfTZYA3YiAH_17fvm_ipld_bitfield8BitFieldj3_NtB5_9Arbitrary9size_hintCs6s2XdU8acmD_7rle_ops:
  657|    280|    fn size_hint(d: usize) -> (usize, Option<usize>) {
  658|    280|        crate::size_hint::and_all(&create_array::<_, (usize, Option<usize>), N>(|_| {
  659|       |            <T as Arbitrary>::size_hint(d)
  660|    280|        }))
  661|    280|    }
_RNvXs1j_Csc5kivX8VefX_9arbitraryTyhENtB6_9Arbitrary9size_hintCsjfTZYA3YiAH_17fvm_ipld_bitfield:
  568|  1.11k|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  569|  1.11k|                crate::size_hint::and_all(&[
  570|  1.11k|                    <$last as Arbitrary>::size_hint(depth),
  571|  1.11k|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  572|  1.11k|                ])
  573|  1.11k|            }
_RNvXsF_Csc5kivX8VefX_9arbitraryyNtB5_9Arbitrary9size_hintCsjfTZYA3YiAH_17fvm_ipld_bitfield:
  302|  1.11k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.11k|                    let n = mem::size_of::<$ty>();
  304|  1.11k|                    (n, Some(n))
  305|  1.11k|                }
_RNvXsC_Csc5kivX8VefX_9arbitraryhNtB5_9Arbitrary9size_hintCsjfTZYA3YiAH_17fvm_ipld_bitfield:
  302|  1.11k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|  1.11k|                    let n = mem::size_of::<$ty>();
  304|  1.11k|                    (n, Some(n))
  305|  1.11k|                }
_RNvXsH_Csc5kivX8VefX_9arbitraryjNtB5_9Arbitrary9size_hintCsjfTZYA3YiAH_17fvm_ipld_bitfield:
  302|    840|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  303|    840|                    let n = mem::size_of::<$ty>();
  304|    840|                    (n, Some(n))
  305|    840|                }
_RNvXs_Csc5kivX8VefX_9arbitrarybNtB4_9Arbitrary9arbitrary:
  277|  1.11k|    fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  278|  1.11k|        Ok(<u8 as Arbitrary<'a>>::arbitrary(u)? & 1 == 1)
  279|  1.11k|    }
_RNvXsF_Csc5kivX8VefX_9arbitraryyNtB5_9Arbitrary9arbitrary:
  291|  12.3k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  12.3k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  12.3k|                    u.fill_buffer(&mut buf)?;
  294|  12.3k|                    let mut x: $unsigned = 0;
  295|  98.4k|                    for i in 0..mem::size_of::<$ty>() {
  296|  98.4k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  98.4k|                    }
  298|  12.3k|                    Ok(x as $ty)
  299|  12.3k|                }
_RNvXsC_Csc5kivX8VefX_9arbitraryhNtB5_9Arbitrary9arbitrary:
  291|  1.11k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  292|  1.11k|                    let mut buf = [0; mem::size_of::<$ty>()];
  293|  1.11k|                    u.fill_buffer(&mut buf)?;
  294|  1.11k|                    let mut x: $unsigned = 0;
  295|  1.11k|                    for i in 0..mem::size_of::<$ty>() {
  296|  1.11k|                        x |= buf[i] as $unsigned << (i * 8);
  297|  1.11k|                    }
  298|  1.11k|                    Ok(x as $ty)
  299|  1.11k|                }

_RNvNtCsc5kivX8VefX_9arbitrary9size_hint7and_allCs6s2XdU8acmD_7rle_ops:
   37|    280|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|    280|    hints.iter().copied().fold((0, Some(0)), and)
   39|    280|}
_RNvNtCsc5kivX8VefX_9arbitrary9size_hint3andCs6s2XdU8acmD_7rle_ops:
   26|    840|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|    840|    let lower = lhs.0 + rhs.0;
   28|    840|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|    840|    (lower, upper)
   30|    840|}
_RNCNvNtCsc5kivX8VefX_9arbitrary9size_hint3and0Cs6s2XdU8acmD_7rle_ops:
   28|    280|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNCNvNtCsc5kivX8VefX_9arbitrary9size_hint3and0CsjfTZYA3YiAH_17fvm_ipld_bitfield:
   28|  3.07k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsc5kivX8VefX_9arbitrary9size_hint3andCsjfTZYA3YiAH_17fvm_ipld_bitfield:
   26|  3.07k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  3.07k|    let lower = lhs.0 + rhs.0;
   28|  3.07k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  3.07k|    (lower, upper)
   30|  3.07k|}
_RNvNtCsc5kivX8VefX_9arbitrary9size_hint7and_allCsjfTZYA3YiAH_17fvm_ipld_bitfield:
   37|  1.11k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  1.11k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  1.11k|}
_RNCNCNvNtCsc5kivX8VefX_9arbitrary9size_hint3and00CsjfTZYA3YiAH_17fvm_ipld_bitfield:
   28|  2.23k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));

_RINvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB3_12Unstructured12int_in_rangelECsjfTZYA3YiAH_17fvm_ipld_bitfield:
  292|  12.3k|    pub fn int_in_range<T>(&mut self, range: ops::RangeInclusive<T>) -> Result<T>
  293|  12.3k|    where
  294|  12.3k|        T: Int,
  295|  12.3k|    {
  296|  12.3k|        let (result, bytes_consumed) = Self::int_in_range_impl(range, self.data.iter().cloned())?;
  297|  12.3k|        self.data = &self.data[bytes_consumed..];
  298|  12.3k|        Ok(result)
  299|  12.3k|    }
_RINvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB3_12Unstructured13arbitrary_lenTyhEECsjfTZYA3YiAH_17fvm_ipld_bitfield:
  213|  1.11k|    pub fn arbitrary_len<ElementType>(&mut self) -> Result<usize>
  214|  1.11k|    where
  215|  1.11k|        ElementType: Arbitrary<'a>,
  216|  1.11k|    {
  217|  1.11k|        let byte_size = self.arbitrary_byte_size()?;
  218|  1.11k|        let (lower, upper) = <ElementType as Arbitrary>::size_hint(0);
  219|  1.11k|        let elem_size = upper.unwrap_or_else(|| lower * 2);
  220|  1.11k|        let elem_size = std::cmp::max(1, elem_size);
  221|  1.11k|        Ok(byte_size / elem_size)
  222|  1.11k|    }
_RINvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impllINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterhEEECsjfTZYA3YiAH_17fvm_ipld_bitfield:
  301|  12.3k|    fn int_in_range_impl<T>(
  302|  12.3k|        range: ops::RangeInclusive<T>,
  303|  12.3k|        mut bytes: impl Iterator<Item = u8>,
  304|  12.3k|    ) -> Result<(T, usize)>
  305|  12.3k|    where
  306|  12.3k|        T: Int,
  307|  12.3k|    {
  308|  12.3k|        let start = range.start();
  309|  12.3k|        let end = range.end();
  310|  12.3k|        assert!(
  311|  12.3k|            start <= end,
  312|  12.3k|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|  12.3k|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|  12.3k|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|  12.3k|        }
  320|  12.3k|
  321|  12.3k|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|  12.3k|        let mut result = T::Widest::ZERO;
  323|  12.3k|        let mut offset: usize = 0;
  324|       |
  325|  24.6k|        while offset < mem::size_of::<T>()
  326|  24.6k|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|  12.3k|        {
  328|  12.3k|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|  12.3k|            result = (result << 8) | T::Widest::from_u8(byte);
  330|  12.3k|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|  12.3k|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|  12.3k|            result = result % range;
  336|  12.3k|        }
  337|       |
  338|  12.3k|        Ok((
  339|  12.3k|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|  12.3k|            offset,
  341|  12.3k|        ))
  342|  12.3k|    }
_RNvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB2_12Unstructured19arbitrary_byte_size:
  224|  1.11k|    fn arbitrary_byte_size(&mut self) -> Result<usize> {
  225|  1.11k|        if self.data.is_empty() {
  226|    171|            Ok(0)
  227|    945|        } else if self.data.len() == 1 {
  228|     28|            self.data = &[];
  229|     28|            Ok(0)
  230|       |        } else {
  231|       |            // Take lengths from the end of the data, since the `libFuzzer` folks
  232|       |            // found that this lets fuzzers more efficiently explore the input
  233|       |            // space.
  234|       |            //
  235|       |            // https://github.com/rust-fuzz/libfuzzer-sys/blob/0c450753/libfuzzer/utils/FuzzedDataProvider.h#L92-L97
  236|       |
  237|       |            // We only consume as many bytes as necessary to cover the entire
  238|       |            // range of the byte string.
  239|    917|            let len = if self.data.len() <= std::u8::MAX as usize + 1 {
  240|    721|                let bytes = 1;
  241|    721|                let max_size = self.data.len() - bytes;
  242|    721|                let (rest, for_size) = self.data.split_at(max_size);
  243|    721|                self.data = rest;
  244|    721|                Self::int_in_range_impl(0..=max_size as u8, for_size.iter().copied())?.0 as usize
  245|    196|            } else if self.data.len() <= std::u16::MAX as usize + 1 {
  246|    196|                let bytes = 2;
  247|    196|                let max_size = self.data.len() - bytes;
  248|    196|                let (rest, for_size) = self.data.split_at(max_size);
  249|    196|                self.data = rest;
  250|    196|                Self::int_in_range_impl(0..=max_size as u16, for_size.iter().copied())?.0 as usize
  251|      0|            } else if self.data.len() <= std::u32::MAX as usize + 1 {
  252|      0|                let bytes = 4;
  253|      0|                let max_size = self.data.len() - bytes;
  254|      0|                let (rest, for_size) = self.data.split_at(max_size);
  255|      0|                self.data = rest;
  256|      0|                Self::int_in_range_impl(0..=max_size as u32, for_size.iter().copied())?.0 as usize
  257|       |            } else {
  258|      0|                let bytes = 8;
  259|      0|                let max_size = self.data.len() - bytes;
  260|      0|                let (rest, for_size) = self.data.split_at(max_size);
  261|      0|                self.data = rest;
  262|      0|                Self::int_in_range_impl(0..=max_size as u64, for_size.iter().copied())?.0 as usize
  263|       |            };
  264|       |
  265|    917|            Ok(len)
  266|       |        }
  267|  1.11k|    }
_RNvXs1_NtCsc5kivX8VefX_9arbitrary12unstructuredhNtB5_3Int11from_widest:
  771|    721|                fn from_widest(w: Self::Widest) -> Self {
  772|    721|                    let x = <$ty>::max_value().as_widest();
  773|    721|                    (w % x) as Self
  774|    721|                }
_RNvXs5_NtCsc5kivX8VefX_9arbitrary12unstructuredoNtB5_3Int7from_u8:
  776|  1.11k|                fn from_u8(b: u8) -> Self {
  777|  1.11k|                    b as Self
  778|  1.11k|                }
_RINvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_impltINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    196|    fn int_in_range_impl<T>(
  302|    196|        range: ops::RangeInclusive<T>,
  303|    196|        mut bytes: impl Iterator<Item = u8>,
  304|    196|    ) -> Result<(T, usize)>
  305|    196|    where
  306|    196|        T: Int,
  307|    196|    {
  308|    196|        let start = range.start();
  309|    196|        let end = range.end();
  310|    196|        assert!(
  311|    196|            start <= end,
  312|    196|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    196|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    196|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    196|        }
  320|    196|
  321|    196|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    196|        let mut result = T::Widest::ZERO;
  323|    196|        let mut offset: usize = 0;
  324|       |
  325|    586|        while offset < mem::size_of::<T>()
  326|    392|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    390|        {
  328|    390|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    390|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    390|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    196|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    196|            result = result % range;
  336|    196|        }
  337|       |
  338|    196|        Ok((
  339|    196|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    196|            offset,
  341|    196|        ))
  342|    196|    }
_RNvXsb_NtCsc5kivX8VefX_9arbitrary12unstructurednNtB5_3Int12wrapping_add:
  788|  12.3k|                fn wrapping_add(self, rhs: Self) -> Self {
  789|  12.3k|                    <$ty>::wrapping_add(self, rhs)
  790|  12.3k|                }
_RINvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB3_12Unstructured17int_in_range_implhINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6copied6CopiedINtNtNtB1t_5slice4iter4IterhEEEB5_:
  301|    721|    fn int_in_range_impl<T>(
  302|    721|        range: ops::RangeInclusive<T>,
  303|    721|        mut bytes: impl Iterator<Item = u8>,
  304|    721|    ) -> Result<(T, usize)>
  305|    721|    where
  306|    721|        T: Int,
  307|    721|    {
  308|    721|        let start = range.start();
  309|    721|        let end = range.end();
  310|    721|        assert!(
  311|    721|            start <= end,
  312|    721|            "`arbitrary::Unstructured::int_in_range` requires a non-empty range"
  313|    721|        );
  314|       |
  315|       |        // When there is only one possible choice, don't waste any entropy from
  316|       |        // the underlying data.
  317|    721|        if start == end {
  318|      0|            return Ok((*start, 0));
  319|    721|        }
  320|    721|
  321|    721|        let range: T::Widest = end.as_widest() - start.as_widest();
  322|    721|        let mut result = T::Widest::ZERO;
  323|    721|        let mut offset: usize = 0;
  324|       |
  325|  1.44k|        while offset < mem::size_of::<T>()
  326|    721|            && (range >> T::Widest::from_usize(offset * 8)) > T::Widest::ZERO
  327|    721|        {
  328|    721|            let byte = bytes.next().ok_or(Error::NotEnoughData)?;
  329|    721|            result = (result << 8) | T::Widest::from_u8(byte);
  330|    721|            offset += 1;
  331|       |        }
  332|       |
  333|       |        // Avoid division by zero.
  334|    721|        if let Some(range) = range.checked_add(T::Widest::ONE) {
  335|    721|            result = result % range;
  336|    721|        }
  337|       |
  338|    721|        Ok((
  339|    721|            T::from_widest(start.as_widest().wrapping_add(result)),
  340|    721|            offset,
  341|    721|        ))
  342|    721|    }
_RNvXs5_NtCsc5kivX8VefX_9arbitrary12unstructuredoNtB5_3Int10from_usize:
  780|  1.11k|                fn from_usize(u: usize) -> Self {
  781|  1.11k|                    u as Self
  782|  1.11k|                }
_RNvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  449|  13.4k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  450|  13.4k|        let n = std::cmp::min(buffer.len(), self.data.len());
  451|  13.4k|        buffer[..n].copy_from_slice(&self.data[..n]);
  452|  13.4k|        for byte in buffer[n..].iter_mut() {
  453|    133|            *byte = 0;
  454|    133|        }
  455|  13.4k|        self.data = &self.data[n..];
  456|  13.4k|        Ok(())
  457|  13.4k|    }
_RNvXs1_NtCsc5kivX8VefX_9arbitrary12unstructuredhNtB5_3Int9as_widest:
  767|  2.88k|                fn as_widest(self) -> Self::Widest {
  768|  2.88k|                    self as $widest
  769|  2.88k|                }
_RNvXs9_NtCsc5kivX8VefX_9arbitrary12unstructuredlNtB5_3Int9as_widest:
  767|  49.2k|                fn as_widest(self) -> Self::Widest {
  768|  49.2k|                    self as $widest
  769|  49.2k|                }
_RNvXs5_NtCsc5kivX8VefX_9arbitrary12unstructuredoNtB5_3Int11checked_add:
  784|    917|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|    917|                    <$ty>::checked_add(self, rhs)
  786|    917|                }
_RNvXs2_NtCsc5kivX8VefX_9arbitrary12unstructuredtNtB5_3Int11from_widest:
  771|    196|                fn from_widest(w: Self::Widest) -> Self {
  772|    196|                    let x = <$ty>::max_value().as_widest();
  773|    196|                    (w % x) as Self
  774|    196|                }
_RNvXs2_NtCsc5kivX8VefX_9arbitrary12unstructuredtNtB5_3Int9as_widest:
  767|    784|                fn as_widest(self) -> Self::Widest {
  768|    784|                    self as $widest
  769|    784|                }
_RNvXsb_NtCsc5kivX8VefX_9arbitrary12unstructurednNtB5_3Int7from_u8:
  776|  12.3k|                fn from_u8(b: u8) -> Self {
  777|  12.3k|                    b as Self
  778|  12.3k|                }
_RNvXs5_NtCsc5kivX8VefX_9arbitrary12unstructuredoNtB5_3Int12wrapping_add:
  788|    917|                fn wrapping_add(self, rhs: Self) -> Self {
  789|    917|                    <$ty>::wrapping_add(self, rhs)
  790|    917|                }
_RNvXs9_NtCsc5kivX8VefX_9arbitrary12unstructuredlNtB5_3Int11from_widest:
  771|  12.3k|                fn from_widest(w: Self::Widest) -> Self {
  772|  12.3k|                    let x = <$ty>::max_value().as_widest();
  773|  12.3k|                    (w % x) as Self
  774|  12.3k|                }
_RNvMNtCsc5kivX8VefX_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    279|    pub fn new(data: &'a [u8]) -> Self {
   86|    279|        Unstructured { data }
   87|    279|    }
_RNvXsb_NtCsc5kivX8VefX_9arbitrary12unstructurednNtB5_3Int11checked_add:
  784|  12.3k|                fn checked_add(self, rhs: Self) -> Option<Self> {
  785|  12.3k|                    <$ty>::checked_add(self, rhs)
  786|  12.3k|                }
_RNvXsb_NtCsc5kivX8VefX_9arbitrary12unstructurednNtB5_3Int10from_usize:
  780|  24.6k|                fn from_usize(u: usize) -> Self {
  781|  24.6k|                    u as Self
  782|  24.6k|                }

rust_fuzzer_test_input:
  167|    280|        pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) {
  168|    280|            use $crate::arbitrary::{Arbitrary, Unstructured};
  169|    280|
  170|    280|            // Early exit if we don't have enough bytes for the `Arbitrary`
  171|    280|            // implementation. This helps the fuzzer avoid exploring all the
  172|    280|            // different not-enough-input-bytes paths inside the `Arbitrary`
  173|    280|            // implementation. Additionally, it exits faster, letting the fuzzer
  174|    280|            // get to longer inputs that actually lead to interesting executions
  175|    280|            // quicker.
  176|    280|            if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  177|      1|                return;
  178|    279|            }
  179|    279|
  180|    279|            let mut u = Unstructured::new(bytes);
  181|    279|            let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  182|       |
  183|       |            // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  184|       |            // formatting of the input to that file. This is only intended for
  185|       |            // `cargo fuzz`'s use!
  186|       |
  187|       |            // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  188|    279|            if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  189|       |                use std::io::Write;
  190|      0|                let mut file = std::fs::File::create(path)
  191|      0|                    .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  192|      0|                (match data {
  193|      0|                    Ok(data) => writeln!(&mut file, "{:#?}", data),
  194|      0|                    Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  195|       |                })
  196|      0|                .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  197|      0|                return;
  198|    279|            }
  199|       |
  200|    279|            let $data = match data {
  201|    279|                Ok(d) => d,
  202|      0|                Err(_) => return,
  203|       |            };
  204|       |
  205|       |            $body
  206|    280|        }
_RNCNvCsjjYbnvqMemd_13libfuzzer_sys15test_input_wrap0B3_:
   28|    280|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|    280|        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|    280|        rust_fuzzer_test_input(data_slice);
   31|    280|    });
LLVMFuzzerTestOneInput:
   27|    280|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   28|    280|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   29|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   30|       |        rust_fuzzer_test_input(data_slice);
   31|    280|    });
   32|    280|    if test_input.err().is_some() {
   33|       |        // hopefully the custom panic hook will be called before and abort the
   34|       |        // process before the stack frames are unwinded.
   35|      0|        ::std::process::abort();
   36|    280|    }
   37|    280|    0
   38|    280|}
LLVMFuzzerInitialize:
   45|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   46|      2|    // Registers a panic hook that aborts the process before unwinding.
   47|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   48|      2|    // able to analyse the process stack frames to tell different bugs appart.
   49|      2|    //
   50|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   51|      2|    // impossible to build code using compiler plugins with this flag.
   52|      2|    // We will be able to remove this code when
   53|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   54|      2|    let default_hook = ::std::panic::take_hook();
   55|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   56|       |        default_hook(panic_info);
   57|       |        ::std::process::abort();
   58|      2|    }));
   59|       |
   60|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   61|       |    // reused with little overhead.
   62|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   63|      0|        RUST_LIBFUZZER_DEBUG_PATH
   64|      0|            .set(path)
   65|      0|            .expect("Since this is initialize it is only called once so can never fail");
   66|      2|    }
   67|      2|    0
   68|      2|}

_RNvMs2_NtCsk8gru2yvLmd_9once_cell3impINtB5_8OnceCellNtNtCs8nhxPzoeGKJ_5alloc6string6StringE14is_initializedCs6s2XdU8acmD_7rle_ops:
   62|    279|    pub(crate) fn is_initialized(&self) -> bool {
   63|    279|        // An `Acquire` load is enough because that makes all the initialization
   64|    279|        // operations visible to us, and, this being a fast path, weaker
   65|    279|        // ordering helps with performance. This `Acquire` synchronizes with
   66|    279|        // `SeqCst` operations on the slow path.
   67|    279|        self.queue.load(Ordering::Acquire) == COMPLETE
   68|    279|    }

_RNvMs4_NtCsk8gru2yvLmd_9once_cell4syncINtB5_8OnceCellNtNtCs8nhxPzoeGKJ_5alloc6string6StringE3getCs6s2XdU8acmD_7rle_ops:
  869|    279|        pub fn get(&self) -> Option<&T> {
  870|    279|            if self.0.is_initialized() {
  871|       |                // Safe b/c value is initialized.
  872|      0|                Some(unsafe { self.get_unchecked() })
  873|       |            } else {
  874|    279|                None
  875|       |            }
  876|    279|        }

_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  310|  71.5k|    fn next(&mut self) -> Option<Self::Item> {
  311|  71.5k|        self.0.next()
  312|  71.5k|    }
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_ENtNtNtB1M_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  387|  31.9k|    fn next(&mut self) -> Option<Self::Item> {
  388|  31.9k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  31.9k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  31.9k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Cs6s2XdU8acmD_7rle_ops:
  389|  62.3k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsa_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEE3newCs6s2XdU8acmD_7rle_ops:
  424|  2.23k|    pub fn new(iter: I) -> Self {
  425|  2.23k|        Self {
  426|  2.23k|            iter: Lookahead::new(iter),
  427|  2.23k|        }
  428|  2.23k|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EENtNtNtB1Y_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  437|  24.0k|    fn next(&mut self) -> Option<Self::Item> {
  438|  24.0k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  22.3k|        while let Some(next) = self.iter.peek() {
  443|  20.9k|            if next.start > range.end {
  444|  20.9k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  22.3k|        Some(range)
  452|  24.0k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE10next_rangeCs6s2XdU8acmD_7rle_ops:
  353|  18.6k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  18.6k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  16.4k|            (Some(lhs), Some(rhs)) => {
  356|  16.4k|                // if both iterators are non-empty, we advance the one whichever's
  357|  16.4k|                // corresponding range has a smaller upper bound
  358|  16.4k|                if lhs.end <= rhs.end {
  359|  8.77k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  7.66k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  1.08k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    983|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|    168|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  18.5k|        if advance_lhs {
  370|  9.85k|            self.lhs.next();
  371|  9.85k|        } else {
  372|  8.65k|            self.rhs.next();
  373|  8.65k|        }
  374|       |
  375|  18.5k|        range
  376|  18.6k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E3newCs6s2XdU8acmD_7rle_ops:
  342|  1.95k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.95k|        Self {
  344|  1.95k|            lhs: Lookahead::new(lhs),
  345|  1.95k|            rhs: Lookahead::new(rhs),
  346|  1.95k|            combinator: Default::default(),
  347|  1.95k|        }
  348|  1.95k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE4peekCs6s2XdU8acmD_7rle_ops:
  472|  30.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  30.0k|        self.next.as_mut()
  474|  30.0k|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  437|  71.5k|    fn next(&mut self) -> Option<Self::Item> {
  438|  71.5k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  66.4k|        while let Some(next) = self.iter.peek() {
  443|  62.3k|            if next.start > range.end {
  444|  62.3k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  66.4k|        Some(range)
  452|  71.5k|    }
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionENtNtNtB1z_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  310|  11.5k|    fn next(&mut self) -> Option<Self::Item> {
  311|  11.5k|        self.0.next()
  312|  11.5k|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  437|  89.3k|    fn next(&mut self) -> Option<Self::Item> {
  438|  89.3k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  79.1k|        while let Some(next) = self.iter.peek() {
  443|  71.5k|            if next.start > range.end {
  444|  71.5k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  79.1k|        Some(range)
  452|  89.3k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EENtNtNtB22_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  31.9k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  31.9k|        let next = self.next.take()?;
  483|  30.0k|        self.next = self.iter.next();
  484|  30.0k|        Some(next)
  485|  31.9k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Cs6s2XdU8acmD_7rle_ops:
  389|  79.1k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXsh_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultCs6s2XdU8acmD_7rle_ops:
  151|  1.67k|#[derive(Default)]
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E10next_rangeCs6s2XdU8acmD_7rle_ops:
  353|  30.4k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  30.4k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  13.3k|            (Some(lhs), Some(rhs)) => {
  356|  13.3k|                // if both iterators are non-empty, we advance the one whichever's
  357|  13.3k|                // corresponding range has a smaller upper bound
  358|  13.3k|                if lhs.end <= rhs.end {
  359|  7.30k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  6.04k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  15.3k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    415|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  1.25k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  29.1k|        if advance_lhs {
  370|  22.6k|            self.lhs.next();
  371|  22.6k|        } else {
  372|  6.45k|            self.rhs.next();
  373|  6.45k|        }
  374|       |
  375|  29.1k|        range
  376|  30.4k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeCs6s2XdU8acmD_7rle_ops:
  353|  66.4k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  66.4k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  62.3k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  4.04k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  62.3k|        if advance_lhs {
  370|  62.3k|            self.lhs.next();
  371|  62.3k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  62.3k|        range
  376|  66.4k|    }
_RNvMs5_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_E3newCs6s2XdU8acmD_7rle_ops:
  297|  1.95k|    pub fn new(a: A, b: B) -> Self {
  298|  1.95k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.95k|    }
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionENtNtNtB1M_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  387|  11.5k|    fn next(&mut self) -> Option<Self::Item> {
  388|  11.5k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  11.5k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  11.5k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE3newCs6s2XdU8acmD_7rle_ops:
  467|  2.23k|    fn new(mut iter: I) -> Self {
  468|  2.23k|        let next = iter.next();
  469|  2.23k|        Self { iter, next }
  470|  2.23k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4next0Cs6s2XdU8acmD_7rle_ops:
  389|  18.6k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekCs6s2XdU8acmD_7rle_ops:
  472|   162k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   162k|        self.next.as_mut()
  474|   162k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekCs6s2XdU8acmD_7rle_ops:
  472|  66.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  66.4k|        self.next.as_mut()
  474|  66.4k|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_12IntersectionEENtNtNtB1Y_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  437|  11.5k|    fn next(&mut self) -> Option<Self::Item> {
  438|  11.5k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  9.31k|        while let Some(next) = self.iter.peek() {
  443|  8.24k|            if next.start > range.end {
  444|  8.24k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|  9.31k|        Some(range)
  452|  11.5k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE4peekCs6s2XdU8acmD_7rle_ops:
  472|  22.3k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  22.3k|        self.next.as_mut()
  474|  22.3k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCs6s2XdU8acmD_7rle_ops:
  472|  66.4k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  66.4k|        self.next.as_mut()
  474|  66.4k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EEE4peekCs6s2XdU8acmD_7rle_ops:
  472|   145k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   145k|        self.next.as_mut()
  474|   145k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6e_EE3newCs6s2XdU8acmD_7rle_ops:
  467|  1.95k|    fn new(mut iter: I) -> Self {
  468|  1.95k|        let next = iter.next();
  469|  1.95k|        Self { iter, next }
  470|  1.95k|    }
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  310|  89.3k|    fn next(&mut self) -> Option<Self::Item> {
  311|  89.3k|        self.0.next()
  312|  89.3k|    }
_RNvXsf_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultCs6s2XdU8acmD_7rle_ops:
   86|  1.95k|#[derive(Default)]
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4next0Cs6s2XdU8acmD_7rle_ops:
  389|  31.9k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_ENtNtNtB1M_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  387|  24.0k|    fn next(&mut self) -> Option<Self::Item> {
  388|  24.0k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  24.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  24.0k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_12IntersectionENtNtNtB1O_6traits8iterator8Iterator4nexts_0Cs6s2XdU8acmD_7rle_ops:
  389|  16.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B5L_ENtNtNtB1z_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  310|  23.9k|    fn next(&mut self) -> Option<Self::Item> {
  311|  23.9k|        self.0.next()
  312|  23.9k|    }
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  387|  66.4k|    fn next(&mut self) -> Option<Self::Item> {
  388|  66.4k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  66.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  66.4k|    }
_RNvXsg_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_12IntersectionNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultCs6s2XdU8acmD_7rle_ops:
  122|  2.23k|#[derive(Default)]
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  387|  79.1k|    fn next(&mut self) -> Option<Self::Item> {
  388|  79.1k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  79.1k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  79.1k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Cs6s2XdU8acmD_7rle_ops:
  389|  71.5k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  71.5k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  71.5k|        let next = self.next.take()?;
  483|  71.5k|        self.next = self.iter.next();
  484|  71.5k|        Some(next)
  485|  71.5k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEENtNtNtB22_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  11.5k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  11.5k|        let next = self.next.take()?;
  483|  9.31k|        self.next = self.iter.next();
  484|  9.31k|        Some(next)
  485|  11.5k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B6e_E3newCs6s2XdU8acmD_7rle_ops:
  342|  1.67k|    fn new(lhs: A, rhs: B) -> Self {
  343|  1.67k|        Self {
  344|  1.67k|            lhs: Lookahead::new(lhs),
  345|  1.67k|            rhs: Lookahead::new(rhs),
  346|  1.67k|            combinator: Default::default(),
  347|  1.67k|        }
  348|  1.67k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4next0Cs6s2XdU8acmD_7rle_ops:
  389|  30.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B60_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Cs6s2XdU8acmD_7rle_ops:
  389|  30.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Cs6s2XdU8acmD_7rle_ops:
  389|  66.4k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsa_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EE3newCs6s2XdU8acmD_7rle_ops:
  424|  1.95k|    pub fn new(iter: I) -> Self {
  425|  1.95k|        Self {
  426|  1.95k|            iter: Lookahead::new(iter),
  427|  1.95k|        }
  428|  1.95k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newCs6s2XdU8acmD_7rle_ops:
  467|  11.7k|    fn new(mut iter: I) -> Self {
  468|  11.7k|        let next = iter.next();
  469|  11.7k|        Self { iter, next }
  470|  11.7k|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6a_EENtNtNtB1Y_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  437|  23.9k|    fn next(&mut self) -> Option<Self::Item> {
  438|  23.9k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  30.0k|        while let Some(next) = self.iter.peek() {
  443|  28.2k|            if next.start > range.end {
  444|  20.2k|                break;
  445|  7.98k|            }
  446|  7.98k|
  447|  7.98k|            range.end = cmp::max(range.end, next.end);
  448|  7.98k|            self.iter.next();
  449|       |        }
  450|       |
  451|  22.0k|        Some(range)
  452|  23.9k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_B6g_ENtNtNtB1O_6traits8iterator8Iterator4nexts_0Cs6s2XdU8acmD_7rle_ops:
  389|  28.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EE3newCs6s2XdU8acmD_7rle_ops:
  467|  1.67k|    fn new(mut iter: I) -> Self {
  468|  1.67k|        let next = iter.next();
  469|  1.67k|        Self { iter, next }
  470|  1.67k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_B5Y_E10next_rangeCs6s2XdU8acmD_7rle_ops:
  353|  31.9k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  31.9k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  13.2k|            (Some(lhs), Some(rhs)) => {
  356|  13.2k|                // if both iterators are non-empty, we advance the one whichever's
  357|  13.2k|                // corresponding range has a smaller upper bound
  358|  13.2k|                if lhs.end <= rhs.end {
  359|  6.94k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  6.35k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  9.13k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  7.58k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  1.95k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  30.0k|        if advance_lhs {
  370|  16.0k|            self.lhs.next();
  371|  16.0k|        } else {
  372|  13.9k|            self.rhs.next();
  373|  13.9k|        }
  374|       |
  375|  30.0k|        range
  376|  31.9k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_12IntersectionE3newCs6s2XdU8acmD_7rle_ops:
  342|  2.23k|    fn new(lhs: A, rhs: B) -> Self {
  343|  2.23k|        Self {
  344|  2.23k|            lhs: Lookahead::new(lhs),
  345|  2.23k|            rhs: Lookahead::new(rhs),
  346|  2.23k|            combinator: Default::default(),
  347|  2.23k|        }
  348|  2.23k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekCs6s2XdU8acmD_7rle_ops:
  472|  79.1k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  79.1k|        self.next.as_mut()
  474|  79.1k|    }
_RNvMs5_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_E3newCs6s2XdU8acmD_7rle_ops:
  297|  1.67k|    pub fn new(a: A, b: B) -> Self {
  298|  1.67k|        Self(Merge::new(_Combine::new(a, b)))
  299|  1.67k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  89.3k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  89.3k|        let next = self.next.take()?;
  483|  79.1k|        self.next = self.iter.next();
  484|  79.1k|        Some(next)
  485|  89.3k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeCs6s2XdU8acmD_7rle_ops:
  353|  79.1k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  79.1k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  71.5k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  7.59k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  71.5k|        if advance_lhs {
  370|  71.5k|            self.lhs.next();
  371|  71.5k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|  71.5k|        range
  376|  79.1k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_B6u_EENtNtNtB22_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  24.0k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  24.0k|        let next = self.next.take()?;
  483|  22.3k|        self.next = self.iter.next();
  484|  22.3k|        Some(next)
  485|  24.0k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  71.5k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  71.5k|        let next = self.next.take()?;
  483|  66.4k|        self.next = self.iter.next();
  484|  66.4k|        Some(next)
  485|  71.5k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  77.6k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  77.6k|        let next = self.next.take()?;
  483|  77.6k|        self.next = self.iter.next();
  484|  77.6k|        Some(next)
  485|  77.6k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  480|  62.3k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  62.3k|        let next = self.next.take()?;
  483|  62.3k|        self.next = self.iter.next();
  484|  62.3k|        Some(next)
  485|  62.3k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekCs6s2XdU8acmD_7rle_ops:
  472|  79.1k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  79.1k|        self.next.as_mut()
  474|  79.1k|    }
_RNvMs5_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_12IntersectionE3newCs6s2XdU8acmD_7rle_ops:
  297|  2.23k|    pub fn new(a: A, b: B) -> Self {
  298|  2.23k|        Self(Merge::new(_Combine::new(a, b)))
  299|  2.23k|    }
_RNvMsa_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_B6q_EE3newCs6s2XdU8acmD_7rle_ops:
  424|  1.67k|    pub fn new(iter: I) -> Self {
  425|  1.67k|        Self {
  426|  1.67k|            iter: Lookahead::new(iter),
  427|  1.67k|        }
  428|  1.67k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_12IntersectionEE4peekCs6s2XdU8acmD_7rle_ops:
  472|  9.31k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  9.31k|        self.next.as_mut()
  474|  9.31k|    }
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_B61_ENtNtNtB1z_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  310|  24.0k|    fn next(&mut self) -> Option<Self::Item> {
  311|  24.0k|        self.0.next()
  312|  24.0k|    }
_RNvMsa_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEE3newB9_:
  424|  3.62k|    pub fn new(iter: I) -> Self {
  425|  3.62k|        Self {
  426|  3.62k|            iter: Lookahead::new(iter),
  427|  3.62k|        }
  428|  3.62k|    }
_RNvXs0_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_rhs_tail:
  186|    415|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  187|    415|        // the difference between an empty range and a range is an empty range
  188|    415|        None
  189|    415|    }
_RNvMs5_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceE3newB9_:
  297|  27.9k|    pub fn new(a: A, b: B) -> Self {
  298|  27.9k|        Self(Merge::new(_Combine::new(a, b)))
  299|  27.9k|    }
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3f_NtB5_10DifferenceENtNtNtB1v_6traits8iterator8Iterator4nextB9_:
  310|   171k|    fn next(&mut self) -> Option<Self::Item> {
  311|   171k|        self.0.next()
  312|   171k|    }
_RNvXsj_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultB9_:
  247|    279|#[derive(Default)]
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  437|    279|    fn next(&mut self) -> Option<Self::Item> {
  438|    279|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|      0|        while let Some(next) = self.iter.peek() {
  443|      0|            if next.start > range.end {
  444|      0|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|      0|        Some(range)
  452|    279|    }
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1r_6traits8iterator8Iterator4nextB9_:
  310|   191k|    fn next(&mut self) -> Option<Self::Item> {
  311|   191k|        self.0.next()
  312|   191k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4next0Bb_:
  389|   182k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|  55.9k|    fn next(&mut self) -> Option<Self::Item> {
  311|  55.9k|        self.0.next()
  312|  55.9k|    }
_RNvMsa_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_3CutEE3newB9_:
  424|    279|    pub fn new(iter: I) -> Self {
  425|    279|        Self {
  426|    279|            iter: Lookahead::new(iter),
  427|    279|        }
  428|    279|    }
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  387|   182k|    fn next(&mut self) -> Option<Self::Item> {
  388|   182k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   182k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|   182k|    }
_RNvXsi_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultB9_:
  195|  3.62k|#[derive(Default)]
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4nexts_0Bb_:
  389|   174k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE3newB9_:
  467|  7.81k|    fn new(mut iter: I) -> Self {
  468|  7.81k|        let next = iter.next();
  469|  7.81k|        Self { iter, next }
  470|  7.81k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE10next_rangeB9_:
  353|  7.85k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  7.85k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  7.57k|            (Some(lhs), Some(rhs)) => {
  356|  7.57k|                // if both iterators are non-empty, we advance the one whichever's
  357|  7.57k|                // corresponding range has a smaller upper bound
  358|  7.57k|                if lhs.end <= rhs.end {
  359|  3.91k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  3.65k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|      0|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|    255|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|     24|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  7.82k|        if advance_lhs {
  370|  3.91k|            self.lhs.next();
  371|  3.91k|        } else {
  372|  3.91k|            self.rhs.next();
  373|  3.91k|        }
  374|       |
  375|  7.82k|        range
  376|  7.85k|    }
_RNvXNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_lhs_tail:
  109|   246k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  110|   246k|        // the union of a range and an empty range is just that range
  111|   246k|        Some(lhs)
  112|   246k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  389|  65.0k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs6_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutENtNtNtB1z_6traits8iterator8Iterator4nextB9_:
  310|    279|    fn next(&mut self) -> Option<Self::Item> {
  311|    279|        self.0.next()
  312|    279|    }
_RNvXs0_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_lhs:
  155|  7.30k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  156|  7.30k|        // lhs:     xx----      xxxx--      --xx--
  157|  7.30k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  158|  7.30k|        // output:  xx----      xx----      ------
  159|  7.30k|
  160|  7.30k|        lhs.start..cmp::min(lhs.end, rhs.start)
  161|  7.30k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|  27.9k|    fn new(mut iter: I) -> Self {
  468|  27.9k|        let next = iter.next();
  469|  27.9k|        Self { iter, next }
  470|  27.9k|    }
_RNvXs4_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_rhs:
  267|  3.65k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  268|  3.65k|        let cut = self.offset(lhs.start..cmp::min(lhs.end, rhs.start));
  269|  3.65k|        lhs.start = cmp::max(lhs.start, rhs.end);
  270|  3.65k|        self.offset += rhs.size();
  271|  3.65k|        cut
  272|  3.65k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE3newB9_:
  467|  27.9k|    fn new(mut iter: I) -> Self {
  468|  27.9k|        let next = iter.next();
  469|  27.9k|        Self { iter, next }
  470|  27.9k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|   182k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   182k|        self.next.as_mut()
  474|   182k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE10next_rangeB9_:
  353|  68.7k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|  68.7k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|  33.0k|            (Some(lhs), Some(rhs)) => {
  356|  33.0k|                // if both iterators are non-empty, we advance the one whichever's
  357|  33.0k|                // corresponding range has a smaller upper bound
  358|  33.0k|                if lhs.end <= rhs.end {
  359|  18.1k|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|  14.9k|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|  23.0k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|  8.96k|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  3.62k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|  65.0k|        if advance_lhs {
  370|  41.1k|            self.lhs.next();
  371|  41.1k|        } else {
  372|  23.8k|            self.rhs.next();
  373|  23.8k|        }
  374|       |
  375|  65.0k|        range
  376|  68.7k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE10next_rangeB9_:
  353|   197k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   197k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   174k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  23.0k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   174k|        if advance_lhs {
  370|   174k|            self.lhs.next();
  371|   174k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   174k|        range
  376|   197k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceE3newB9_:
  342|  3.62k|    fn new(lhs: A, rhs: B) -> Self {
  343|  3.62k|        Self {
  344|  3.62k|            lhs: Lookahead::new(lhs),
  345|  3.62k|            rhs: Lookahead::new(rhs),
  346|  3.62k|            combinator: Default::default(),
  347|  3.62k|        }
  348|  3.62k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE3newB9_:
  467|  3.62k|    fn new(mut iter: I) -> Self {
  468|  3.62k|        let next = iter.next();
  469|  3.62k|        Self { iter, next }
  470|  3.62k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EEE3newB9_:
  467|  55.8k|    fn new(mut iter: I) -> Self {
  468|  55.8k|        let next = iter.next();
  469|  55.8k|        Self { iter, next }
  470|  55.8k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE4peekB9_:
  472|   155k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   155k|        self.next.as_mut()
  474|   155k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  480|  56.6k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  56.6k|        let next = self.next.take()?;
  483|  53.0k|        self.next = self.iter.next();
  484|  53.0k|        Some(next)
  485|  56.6k|    }
_RNvXs4_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator11advance_lhs:
  262|  3.91k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  263|  3.91k|        // apart from the offset, these implementations are identical to those of the `Difference` combinator
  264|  3.91k|        self.offset(lhs.start..cmp::min(lhs.end, rhs.start))
  265|  3.91k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE10next_rangeB9_:
  353|   182k|    fn next_range(&mut self) -> Option<Range<u64>> {
  354|   182k|        let (range, advance_lhs) = match (self.lhs.peek(), self.rhs.peek()) {
  355|      0|            (Some(lhs), Some(rhs)) => {
  356|      0|                // if both iterators are non-empty, we advance the one whichever's
  357|      0|                // corresponding range has a smaller upper bound
  358|      0|                if lhs.end <= rhs.end {
  359|      0|                    (Some(self.combinator.advance_lhs(lhs.clone(), rhs)), true)
  360|       |                } else {
  361|      0|                    (Some(self.combinator.advance_rhs(lhs, rhs.clone())), false)
  362|       |                }
  363|       |            }
  364|   163k|            (Some(lhs), None) => (self.combinator.advance_lhs_tail(lhs.clone()), true),
  365|      0|            (None, Some(rhs)) => (self.combinator.advance_rhs_tail(rhs.clone()), false),
  366|  19.2k|            (None, None) => return None,
  367|       |        };
  368|       |
  369|   163k|        if advance_lhs {
  370|   163k|            self.lhs.next();
  371|   163k|        } else {
  372|      0|            self.rhs.next();
  373|      0|        }
  374|       |
  375|   163k|        range
  376|   182k|    }
_RNvMsa_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEE3newB9_:
  424|  27.9k|    pub fn new(iter: I) -> Self {
  425|  27.9k|        Self {
  426|  27.9k|            iter: Lookahead::new(iter),
  427|  27.9k|        }
  428|  27.9k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  389|  7.85k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  467|  27.9k|    fn new(mut iter: I) -> Self {
  468|  27.9k|        let next = iter.next();
  469|  27.9k|        Self { iter, next }
  470|  27.9k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEE4peekB9_:
  472|   197k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   197k|        self.next.as_mut()
  474|   197k|    }
_RNvXNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator16advance_rhs_tail:
  114|  7.58k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  115|  7.58k|        Some(rhs)
  116|  7.58k|    }
_RNvXs4_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_3CutNtB5_10Combinator16advance_rhs_tail:
  278|    255|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  279|    255|        None
  280|    255|    }
_RNvXs2_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_rhs:
  229|  14.9k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  230|  14.9k|        Self::advance(rhs, lhs)
  231|  14.9k|    }
_RNvXs_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_rhs:
  134|  7.66k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  135|  7.66k|        cmp::max(lhs.start, rhs.start)..rhs.end
  136|  7.66k|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineIB1m_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB20_5slice4iter4IterINtNtNtB20_3ops5range5RangeyEEEEIB1F_INtNtNtB1Y_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1W_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3I_NtB5_10DifferenceEB1l_NtB5_19SymmetricDifferenceEENtNtNtB1Y_6traits8iterator8Iterator4nextB9_:
  437|  55.9k|    fn next(&mut self) -> Option<Self::Item> {
  438|  55.9k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|  53.0k|        while let Some(next) = self.iter.peek() {
  443|  50.0k|            if next.start > range.end {
  444|  49.2k|                break;
  445|    782|            }
  446|    782|
  447|    782|            range.end = cmp::max(range.end, next.end);
  448|    782|            self.iter.next();
  449|       |        }
  450|       |
  451|  52.2k|        Some(range)
  452|  55.9k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutE3newB9_:
  342|    279|    fn new(lhs: A, rhs: B) -> Self {
  343|    279|        Self {
  344|    279|            lhs: Lookahead::new(lhs),
  345|    279|            rhs: Lookahead::new(rhs),
  346|    279|            combinator: Default::default(),
  347|    279|        }
  348|    279|    }
_RNvMs5_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_19SymmetricDifferenceE3newB9_:
  297|  3.62k|    pub fn new(a: A, b: B) -> Self {
  298|  3.62k|        Self(Merge::new(_Combine::new(a, b)))
  299|  3.62k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEE3newB9_:
  467|    279|    fn new(mut iter: I) -> Self {
  468|    279|        let next = iter.next();
  469|    279|        Self { iter, next }
  470|    279|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_3CutEENtNtNtB22_6traits8iterator8Iterator4nextB9_:
  480|    279|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|    279|        let next = self.next.take()?;
  483|      0|        self.next = self.iter.next();
  484|      0|        Some(next)
  485|    279|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1V_5slice4iter4IterINtNtNtB1V_3ops5range5RangeyEEEEIB1A_INtNtNtB1T_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1R_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3D_NtB5_10DifferenceEENtNtNtB1T_6traits8iterator8Iterator4nextB9_:
  437|   171k|    fn next(&mut self) -> Option<Self::Item> {
  438|   171k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|   155k|        while let Some(next) = self.iter.peek() {
  443|   143k|            if next.start > range.end {
  444|   143k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|   155k|        Some(range)
  452|   171k|    }
_RNvXs2_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator11advance_lhs:
  225|  18.1k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  226|  18.1k|        Self::advance(lhs, rhs)
  227|  18.1k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEE4peekB9_:
  472|   153k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   153k|        self.next.as_mut()
  474|   153k|    }
_RNvXsb_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1F_6traits8iterator8Iterator4nextB9_:
  437|   191k|    fn next(&mut self) -> Option<Self::Item> {
  438|   191k|        let mut range = self.iter.next()?;
  439|       |
  440|       |        // as long as the next range overlaps with (or touches) current range,
  441|       |        // we merge it into the current range
  442|   169k|        while let Some(next) = self.iter.peek() {
  443|   154k|            if next.start > range.end {
  444|   154k|                break;
  445|      0|            }
  446|      0|
  447|      0|            range.end = cmp::max(range.end, next.end);
  448|      0|            self.iter.next();
  449|       |        }
  450|       |
  451|   169k|        Some(range)
  452|   191k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  480|  72.9k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|  72.9k|        let next = self.next.take()?;
  483|  72.9k|        self.next = self.iter.next();
  484|  72.9k|        Some(next)
  485|  72.9k|    }
_RNvXsf_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_5UnionNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultB9_:
   86|  27.9k|#[derive(Default)]
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_3CutENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|    279|    fn next(&mut self) -> Option<Self::Item> {
  388|    279|        // we repeatedly compute the next range until we find one that is non-empty
  389|    279|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|    279|    }
_RNvMsa_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_5MergeINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1H_5slice4iter4IterINtNtNtB1H_3ops5range5RangeyEEEEIB1m_INtNtNtB1F_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1D_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE3newB9_:
  424|  27.9k|    pub fn new(iter: I) -> Self {
  425|  27.9k|        Self {
  426|  27.9k|            iter: Lookahead::new(iter),
  427|  27.9k|        }
  428|  27.9k|    }
_RNvMs5_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineIBU_IBU_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1B_5slice4iter4IterINtNtNtB1B_3ops5range5RangeyEEEEIB1g_INtNtNtB1z_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1x_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3j_NtB5_10DifferenceEB17_NtB5_3CutE3newB9_:
  297|    279|    pub fn new(a: A, b: B) -> Self {
  298|    279|        Self(Merge::new(_Combine::new(a, b)))
  299|    279|    }
_RNvXsh_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultB9_:
  151|  27.9k|#[derive(Default)]
_RNvXs2_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_lhs_tail:
  233|  23.0k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  234|  23.0k|        // the symmetric difference of a range and an empty range is just that range
  235|  23.0k|        Some(lhs)
  236|  23.0k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1x_5slice4iter4IterINtNtNtB1x_3ops5range5RangeyEEEEIB1c_INtNtNtB1v_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1t_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionENtNtNtB1v_6traits8iterator8Iterator4next0Bb_:
  389|   197k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  480|   174k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|   174k|        let next = self.next.take()?;
  483|   174k|        self.next = self.iter.next();
  484|   174k|        Some(next)
  485|   174k|    }
_RNvXs_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_lhs_tail:
  138|  1.08k|    fn advance_lhs_tail(&mut self, _lhs: Range<u64>) -> Option<Range<u64>> {
  139|  1.08k|        // the intersection of a range and an empty range is an empty range
  140|  1.08k|        None
  141|  1.08k|    }
_RNvMs1_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifference7advance:
  201|  33.0k|    fn advance(left: Range<u64>, right: &mut Range<u64>) -> Range<u64> {
  202|  33.0k|        if left.start <= right.start {
  203|       |            // left:       xxxx--      xx----
  204|       |            // right:      --xxxx  or  ----xx
  205|       |            // output:     xx----      xx----
  206|       |            // new right:  ----xx      ----xx
  207|       |
  208|  22.5k|            let difference = left.start..cmp::min(left.end, right.start);
  209|  22.5k|            right.start = cmp::max(right.start, left.end);
  210|  22.5k|            difference
  211|       |        } else {
  212|       |            // left:       --xx--
  213|       |            // right:      xxxxxx
  214|       |            // output:     xx----
  215|       |            // new right:  ----xx
  216|       |
  217|  10.5k|            let difference = right.start..left.start;
  218|  10.5k|            right.start = left.end;
  219|  10.5k|            difference
  220|       |        }
  221|  33.0k|    }
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineIB1a_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1O_5slice4iter4IterINtNtNtB1O_3ops5range5RangeyEEEEIB1t_INtNtNtB1M_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1K_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3w_NtB5_10DifferenceEB19_NtB5_19SymmetricDifferenceENtNtNtB1M_6traits8iterator8Iterator4nextB9_:
  387|  56.6k|    fn next(&mut self) -> Option<Self::Item> {
  388|  56.6k|        // we repeatedly compute the next range until we find one that is non-empty
  389|  56.6k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|  56.6k|    }
_RNvMs3_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_3Cut6offset:
  256|  7.57k|    fn offset(&self, range: Range<u64>) -> Range<u64> {
  257|  7.57k|        (range.start - self.offset)..(range.end - self.offset)
  258|  7.57k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEE3newB9_:
  467|  27.9k|    fn new(mut iter: I) -> Self {
  468|  27.9k|        let next = iter.next();
  469|  27.9k|        Self { iter, next }
  470|  27.9k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_19SymmetricDifferenceENtNtNtB1O_6traits8iterator8Iterator4next0Bb_:
  389|  68.7k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineIB1q_INtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB24_5slice4iter4IterINtNtNtB24_3ops5range5RangeyEEEEIB1J_INtNtNtB22_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB20_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3M_NtB5_10DifferenceEB1p_NtB5_19SymmetricDifferenceEE4peekB9_:
  472|  53.0k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|  53.0k|        self.next.as_mut()
  474|  53.0k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtNtB1t_8adapters6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EEE4peekB9_:
  472|   380k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   380k|        self.next.as_mut()
  474|   380k|    }
_RNvMs5_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1t_5slice4iter4IterINtNtNtB1t_3ops5range5RangeyEEEEIB18_INtNtNtB1r_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1p_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  297|  27.9k|    pub fn new(a: A, b: B) -> Self {
  298|  27.9k|        Self(Merge::new(_Combine::new(a, b)))
  299|  27.9k|    }
_RNvXNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_rhs:
  105|  6.35k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  106|  6.35k|        cmp::min(lhs.start, rhs.start)..rhs.end
  107|  6.35k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Z_5slice4iter4IterINtNtNtB1Z_3ops5range5RangeyEEEEIB1E_INtNtNtB1X_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1V_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3H_NtB5_10DifferenceEENtNtNtB1X_6traits8iterator8Iterator4nextB9_:
  480|   171k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|   171k|        let next = self.next.take()?;
  483|   155k|        self.next = self.iter.next();
  484|   155k|        Some(next)
  485|   171k|    }
_RNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionENtNtNtB1t_6traits8iterator8Iterator4nextB9_:
  387|   197k|    fn next(&mut self) -> Option<Self::Item> {
  388|   197k|        // we repeatedly compute the next range until we find one that is non-empty
  389|   197k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
  390|   197k|    }
_RNvXs_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator11advance_lhs:
  126|  8.77k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
  127|  8.77k|        // lhs:     xx----      xxxx--      --xx--
  128|  8.77k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  129|  8.77k|        // output:  ------      --xx--      --xx--
  130|  8.77k|
  131|  8.77k|        cmp::max(lhs.start, rhs.start)..lhs.end
  132|  8.77k|    }
_RNvXs0_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator16advance_lhs_tail:
  181|   250k|    fn advance_lhs_tail(&mut self, lhs: Range<u64>) -> Option<Range<u64>> {
  182|   250k|        // the difference between a range and an empty range is just that range
  183|   250k|        Some(lhs)
  184|   250k|    }
_RNvMsd_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEE4peekB9_:
  472|   169k|    fn peek(&mut self) -> Option<&mut I::Item> {
  473|   169k|        self.next.as_mut()
  474|   169k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1H_6traits8iterator8Iterator4nextB9_:
  480|   163k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|   163k|        let next = self.next.take()?;
  483|   163k|        self.next = self.iter.next();
  484|   163k|        Some(next)
  485|   163k|    }
_RNvXNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB2_5UnionNtB2_10Combinator11advance_lhs:
   90|  6.94k|    fn advance_lhs(&mut self, lhs: Range<u64>, rhs: &mut Range<u64>) -> Range<u64> {
   91|  6.94k|        // the returned range needs to start from the minimum lower bound of the two ranges,
   92|  6.94k|        // to ensure that the lower bounds are monotonically increasing
   93|  6.94k|        //
   94|  6.94k|        // e.g. `--xx--`, `xxxxxx` should first produce
   95|  6.94k|        // `xxxx--` and then `xxxxxx`, not
   96|  6.94k|        // `--xx--` and then `xxxxxx`
   97|  6.94k|        //
   98|  6.94k|        // lhs:     xx----      xxxx--      --xx--
   99|  6.94k|        // rhs:     ----xx  or  --xxxx  or  xxxxxx
  100|  6.94k|        // output:  xx----      xxxx--      xxxx--
  101|  6.94k|
  102|  6.94k|        cmp::min(lhs.start, rhs.start)..lhs.end
  103|  6.94k|    }
_RNvXs_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB4_12IntersectionNtB4_10Combinator16advance_rhs_tail:
  143|    983|    fn advance_rhs_tail(&mut self, _rhs: Range<u64>) -> Option<Range<u64>> {
  144|    983|        None
  145|    983|    }
_RNvXs2_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_19SymmetricDifferenceNtB5_10Combinator16advance_rhs_tail:
  238|  8.96k|    fn advance_rhs_tail(&mut self, rhs: Range<u64>) -> Option<Range<u64>> {
  239|  8.96k|        Some(rhs)
  240|  8.96k|    }
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineINtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3t_NtB7_10DifferenceENtNtNtB1J_6traits8iterator8Iterator4nexts_0Bb_:
  389|   163k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNCNvXs9_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB7_8__CombineINtB7_7CombineIB1c_INtB9_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1Q_5slice4iter4IterINtNtNtB1Q_3ops5range5RangeyEEEEIB1v_INtNtNtB1O_7sources7from_fn6FromFnNCINvB9_16ranges_from_bitsINtNtB1M_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB7_5UnionEB3y_NtB7_10DifferenceEB1b_NtB7_3CutENtNtNtB1O_6traits8iterator8Iterator4nexts_0Bb_:
  389|  7.57k|        iter::from_fn(|| self.next_range()).find(|range| !range.is_empty())
_RNvXs0_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineNtB5_10DifferenceNtB5_10Combinator11advance_rhs:
  163|  6.04k|    fn advance_rhs(&mut self, lhs: &mut Range<u64>, rhs: Range<u64>) -> Range<u64> {
  164|  6.04k|        // since we're advancing the rhs, we need to potentially shorten the lhs
  165|  6.04k|        // to avoid it from returning invalid bits in the next iteration
  166|  6.04k|        //
  167|  6.04k|        // e.g. `--xxxx`, `xxxx--` should first produce
  168|  6.04k|        // `------` and then `----xx`, not
  169|  6.04k|        // `------` and then `--xxxx`
  170|  6.04k|        //
  171|  6.04k|        // lhs:      ----xx      --xxxx      xxxxxx
  172|  6.04k|        // rhs:      xx----  or  xxxx--  or  --xx--
  173|  6.04k|        // output:   ------      ------      xx----
  174|  6.04k|        // new lhs:  ----xx      ----xx      ----xx
  175|  6.04k|
  176|  6.04k|        let difference = lhs.start..cmp::min(lhs.end, rhs.start);
  177|  6.04k|        lhs.start = cmp::max(lhs.start, rhs.end);
  178|  6.04k|        difference
  179|  6.04k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB5_7CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1J_5slice4iter4IterINtNtNtB1J_3ops5range5RangeyEEEEIB1o_INtNtNtB1H_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1F_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEB3r_NtB5_10DifferenceE3newB9_:
  342|  27.9k|    fn new(lhs: A, rhs: B) -> Self {
  343|  27.9k|        Self {
  344|  27.9k|            lhs: Lookahead::new(lhs),
  345|  27.9k|            rhs: Lookahead::new(rhs),
  346|  27.9k|            combinator: Default::default(),
  347|  27.9k|        }
  348|  27.9k|    }
_RNvXse_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_9LookaheadINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1L_5slice4iter4IterINtNtNtB1L_3ops5range5RangeyEEEEIB1q_INtNtNtB1J_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1H_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionEENtNtNtB1J_6traits8iterator8Iterator4nextB9_:
  480|   191k|    fn next(&mut self) -> Option<Self::Item> {
  481|       |        // `self.next` always stores the next element, so if it is `None`, the iterator is empty
  482|   191k|        let next = self.next.take()?;
  483|   169k|        self.next = self.iter.next();
  484|   169k|        Some(next)
  485|   191k|    }
_RNvMs8_NtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combineINtB5_8__CombineINtB7_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1v_5slice4iter4IterINtNtNtB1v_3ops5range5RangeyEEEEIB1a_INtNtNtB1t_7sources7from_fn6FromFnNCINvB7_16ranges_from_bitsINtNtB1r_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB5_5UnionE3newB9_:
  342|  27.9k|    fn new(lhs: A, rhs: B) -> Self {
  343|  27.9k|        Self {
  344|  27.9k|            lhs: Lookahead::new(lhs),
  345|  27.9k|            rhs: Lookahead::new(rhs),
  346|  27.9k|            combinator: Default::default(),
  347|  27.9k|        }
  348|  27.9k|    }

_RINvYINtNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator5unionB3_ECs6s2XdU8acmD_7rle_ops:
   21|  1.95k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  1.95k|        Combine::new(self, other)
   23|  1.95k|    }
_RINvYINtNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator12intersectionB3_ECs6s2XdU8acmD_7rle_ops:
   26|  2.23k|    fn intersection<R: RangeIterator>(self, other: R) -> Combine<Self, R, Intersection> {
   27|  2.23k|        Combine::new(self, other)
   28|  2.23k|    }
_RINvYINtNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator10differenceB3_ECs6s2XdU8acmD_7rle_ops:
   31|  1.67k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  1.67k|        Combine::new(self, other)
   33|  1.67k|    }
_RNvXs3_NtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextCs6s2XdU8acmD_7rle_ops:
  153|  62.3k|    fn next(&mut self) -> Option<Self::Item> {
  154|  62.3k|        self.0.next()
  155|  62.3k|    }
_RINvMs2_NtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB16_5slice4iter4IterINtNtNtB16_3ops5range5RangeyEEEE3newBX_EB8_:
  139|  27.9k|    pub fn new<II>(iter: II) -> Self
  140|  27.9k|    where
  141|  27.9k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  27.9k|    {
  143|  27.9k|        Self(iter.into_iter())
  144|  27.9k|    }
_RINvNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEEB4_:
  163|  55.8k|pub(crate) fn ranges_from_bits(bits: impl IntoIterator<Item = u64>) -> impl RangeIterator {
  164|  55.8k|    let mut iter = bits.into_iter().peekable();
  165|  55.8k|
  166|  55.8k|    Ranges::new(iter::from_fn(move || {
  167|       |        let start = iter.next()?;
  168|       |        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|       |        while let Some(&next) = iter.peek() {
  170|       |            if next < end {
  171|       |                panic!("out of order bitfield")
  172|       |            } else if next > end {
  173|       |                break;
  174|       |            }
  175|       |            end = end.checked_add(1).expect("bitfield overflow");
  176|       |            iter.next();
  177|       |        }
  178|       |        Some(start..end)
  179|  55.8k|    }))
  180|  55.8k|}
_RNvXs3_NtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB15_5slice4iter4IterINtNtNtB15_3ops5range5RangeyEEEENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|   202k|    fn next(&mut self) -> Option<Self::Item> {
  154|   202k|        self.0.next()
  155|   202k|    }
_RNCINvNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter16ranges_from_bitsINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0B6_:
  166|  55.8k|    Ranges::new(iter::from_fn(move || {
  167|  55.8k|        let start = iter.next()?;
  168|      0|        let mut end = start.checked_add(1).expect("bitfield overflow");
  169|      0|        while let Some(&next) = iter.peek() {
  170|      0|            if next < end {
  171|      0|                panic!("out of order bitfield")
  172|      0|            } else if next > end {
  173|      0|                break;
  174|      0|            }
  175|      0|            end = end.checked_add(1).expect("bitfield overflow");
  176|      0|            iter.next();
  177|       |        }
  178|      0|        Some(start..end)
  179|  55.8k|    }))
_RINvYINtNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combine7CombineINtB8_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1o_5slice4iter4IterINtNtNtB1o_3ops5range5RangeyEEEEIB13_INtNtNtB1m_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1k_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionENtB8_13RangeIterator10differenceB36_EBa_:
   31|  27.9k|    fn difference<R: RangeIterator>(self, other: R) -> Combine<Self, R, Difference> {
   32|  27.9k|        Combine::new(self, other)
   33|  27.9k|    }
_RINvYINtNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator3cutB3_EBa_:
   53|    279|    fn cut<R: RangeIterator>(self, other: R) -> Combine<Self, R, Cut> {
   54|    279|        Combine::new(self, other)
   55|    279|    }
_RINvYINtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB10_5slice4iter4IterINtNtNtB10_3ops5range5RangeyEEEENtB6_13RangeIterator5unionIB4_INtNtNtBY_7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtBW_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EEEB8_:
   21|  27.9k|    fn union<R: RangeIterator>(self, other: R) -> Combine<Self, R, Union> {
   22|  27.9k|        Combine::new(self, other)
   23|  27.9k|    }
_RINvMs2_NtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iterINtB6_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter7sources7from_fn6FromFnNCINvB6_16ranges_from_bitsINtNtNtB14_8adapters6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EE3newBX_EB8_:
  139|  55.8k|    pub fn new<II>(iter: II) -> Self
  140|  55.8k|    where
  141|  55.8k|        II: IntoIterator<IntoIter = I, Item = Range<u64>>,
  142|  55.8k|    {
  143|  55.8k|        Self(iter.into_iter())
  144|  55.8k|    }
_RNvXs3_NtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iterINtB5_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter7sources7from_fn6FromFnNCINvB5_16ranges_from_bitsINtNtNtB13_8adapters6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtNtNtB13_6traits8iterator8Iterator4nextB7_:
  153|  55.8k|    fn next(&mut self) -> Option<Self::Item> {
  154|  55.8k|        self.0.next()
  155|  55.8k|    }
_RINvYINtNtNtCsjfTZYA3YiAH_17fvm_ipld_bitfield4iter7combine7CombineIB4_INtB8_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB1s_5slice4iter4IterINtNtNtB1s_3ops5range5RangeyEEEEIB17_INtNtNtB1q_7sources7from_fn6FromFnNCINvB8_16ranges_from_bitsINtNtB1o_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB6_5UnionEB3a_NtB6_10DifferenceENtB8_13RangeIterator20symmetric_differenceB3_EBa_:
   36|  3.62k|    fn symmetric_difference<R: RangeIterator>(
   37|  3.62k|        self,
   38|  3.62k|        other: R,
   39|  3.62k|    ) -> Combine<Self, R, SymmetricDifference> {
   40|  3.62k|        Combine::new(self, other)
   41|  3.62k|    }

_RINvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6y_EECs6s2XdU8acmD_7rle_ops:
  141|  1.67k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  142|  1.67k|        Self {
  143|  1.67k|            ranges: iter.collect(),
  144|  1.67k|            ..Default::default()
  145|  1.67k|        }
  146|  1.67k|    }
_RINvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_12IntersectionEECs6s2XdU8acmD_7rle_ops:
  141|  2.23k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  142|  2.23k|        Self {
  143|  2.23k|            ranges: iter.collect(),
  144|  2.23k|            ..Default::default()
  145|  2.23k|        }
  146|  2.23k|    }
_RNvXs5_CsjfTZYA3YiAH_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs1lFzDPBt5Wg_4core3ops3bit5BitOr5bitorCs6s2XdU8acmD_7rle_ops:
  353|  1.95k|    fn bitor(self, rhs: &BitField) -> Self::Output {
  354|  1.95k|        BitField::from_ranges(self.ranges().union(rhs.ranges()))
  355|  1.95k|    }
_RNvXs7_CsjfTZYA3YiAH_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs1lFzDPBt5Wg_4core3ops3bit6BitAnd6bitandCs6s2XdU8acmD_7rle_ops:
  369|  2.23k|    fn bitand(self, rhs: &BitField) -> Self::Output {
  370|  2.23k|        BitField::from_ranges(self.ranges().intersection(rhs.ranges()))
  371|  2.23k|    }
_RNvXsi_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultCs6s2XdU8acmD_7rle_ops:
   42|  5.85k|#[derive(Debug, Default, Clone)]
_RNvXs9_CsjfTZYA3YiAH_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs1lFzDPBt5Wg_4core3ops5arith3Sub3subCs6s2XdU8acmD_7rle_ops:
  385|  1.67k|    fn sub(self, rhs: &BitField) -> Self::Output {
  386|  1.67k|        BitField::from_ranges(self.ranges().difference(rhs.ranges()))
  387|  1.67k|    }
_RINvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_B6h_EECs6s2XdU8acmD_7rle_ops:
  141|  1.95k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  142|  1.95k|        Self {
  143|  1.95k|            ranges: iter.collect(),
  144|  1.95k|            ..Default::default()
  145|  1.95k|        }
  146|  1.95k|    }
_RNvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB5_8BitField3cut:
  329|    279|    pub fn cut(&self, other: &Self) -> Self {
  330|    279|        Self::from_ranges(self.ranges().cut(other.ranges()))
  331|    279|    }
_RINvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_19SymmetricDifferenceEEB6_:
  141|  3.62k|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  142|  3.62k|        Self {
  143|  3.62k|            ranges: iter.collect(),
  144|  3.62k|            ..Default::default()
  145|  3.62k|        }
  146|  3.62k|    }
_RNvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB5_8BitField6ranges:
  285|  27.9k|    pub fn ranges(&self) -> impl RangeIterator + '_ {
  286|  27.9k|        self.inner_ranges()
  287|  27.9k|            .union(ranges_from_bits(self.set.iter().copied()))
  288|  27.9k|            .difference(ranges_from_bits(self.unset.iter().copied()))
  289|  27.9k|    }
_RNvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB5_8BitField12inner_ranges:
  279|  27.9k|    fn inner_ranges(&self) -> impl RangeIterator + '_ {
  280|  27.9k|        iter::Ranges::new(self.ranges.iter().cloned())
  281|  27.9k|    }
_RNvXs_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB4_8BitFieldNtNtCs1lFzDPBt5Wg_4core3cmp9PartialEq2eq:
   53|  4.18k|    fn eq(&self, other: &Self) -> bool {
   54|  4.18k|        Iterator::eq(self.ranges(), other.ranges())
   55|  4.18k|    }
_RNvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB5_8BitField3new:
  136|    558|    pub fn new() -> Self {
  137|    558|        Self::default()
  138|    558|    }
_RINvMs4_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB6_8BitField11from_rangesINtNtNtB6_4iter7combine7CombineIB15_IB15_INtB19_6RangesINtNtNtNtCs1lFzDPBt5Wg_4core4iter8adapters6cloned6ClonedINtNtNtB26_5slice4iter4IterINtNtNtB26_3ops5range5RangeyEEEEIB1K_INtNtNtB24_7sources7from_fn6FromFnNCINvB19_16ranges_from_bitsINtNtB22_6copied6CopiedINtNtNtNtCs8nhxPzoeGKJ_5alloc11collections5btree3set4IteryEEE0EENtB17_5UnionEB3O_NtB17_10DifferenceEB1z_NtB17_3CutEEB6_:
  141|    279|    pub fn from_ranges(iter: impl RangeIterator) -> Self {
  142|    279|        Self {
  143|    279|            ranges: iter.collect(),
  144|    279|            ..Default::default()
  145|    279|        }
  146|    279|    }
_RNvXsb_CsjfTZYA3YiAH_17fvm_ipld_bitfieldRNtB5_8BitFieldNtNtNtCs1lFzDPBt5Wg_4core3ops3bit6BitXor6bitxor:
  400|  3.62k|    fn bitxor(self, rhs: &BitField) -> Self::Output {
  401|  3.62k|        BitField::from_ranges(self.ranges().symmetric_difference(rhs.ranges()))
  402|  3.62k|    }
_RNvXsi_CsjfTZYA3YiAH_17fvm_ipld_bitfieldNtB5_8BitFieldNtNtCs1lFzDPBt5Wg_4core7default7Default7defaultB5_:
   42|  5.58k|#[derive(Debug, Default, Clone)]

_RNvXNtCsjfTZYA3YiAH_17fvm_ipld_bitfield5rangeINtNtNtCs1lFzDPBt5Wg_4core3ops5range5RangeyENtB2_9RangeSize4size:
   14|  3.65k|    fn size(&self) -> Self::Idx {
   15|  3.65k|        if self.end <= self.start {
   16|      0|            0
   17|       |        } else {
   18|  3.65k|            self.end - self.start
   19|       |        }
   20|  3.65k|    }

_RNvXs0_NtCsjfTZYA3YiAH_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsc5kivX8VefX_9arbitrary9Arbitrary9size_hint:
  149|    840|    fn size_hint(depth: usize) -> (usize, Option<usize>) {
  150|    840|        size_hint::and(<usize as Arbitrary>::size_hint(depth), (0, None))
  151|    840|    }
_RNvXs0_NtCsjfTZYA3YiAH_17fvm_ipld_bitfield7rleplusNtB7_8BitFieldNtCsc5kivX8VefX_9arbitrary9Arbitrary9arbitrary:
  113|  1.11k|    fn arbitrary(u: &mut Unstructured<'a>) -> arbitrary::Result<Self> {
  114|  1.11k|        let mut next_value: bool = bool::arbitrary(u)?;
  115|  1.11k|        let mut ranges = Vec::new();
  116|  1.11k|        let mut index = 0u64;
  117|  1.11k|        let mut total_len: u64 = 0;
  118|       |
  119|  1.11k|        let size = u.arbitrary_len::<(u64, u8)>()?;
  120|       |
  121|  1.11k|        for _ in 0..size {
  122|       |            // 3 line crappy "power-law" distribution
  123|  12.3k|            let len = u64::arbitrary(u)?;
  124|  12.3k|            let shift = u.int_in_range(0..=63)?;
  125|  12.3k|            let len = (len & (u64::MAX >> shift)).saturating_add(1);
  126|  12.3k|
  127|  12.3k|            let (new_total_len, ovf) = total_len.overflowing_add(len);
  128|  12.3k|            if ovf {
  129|     57|                break;
  130|  12.2k|            }
  131|  12.2k|            total_len = new_total_len;
  132|  12.2k|            let start = index;
  133|  12.2k|            index += len;
  134|  12.2k|            let end = index;
  135|  12.2k|
  136|  12.2k|            if next_value {
  137|  6.27k|                ranges.push(start..end);
  138|  6.27k|            }
  139|       |
  140|  12.2k|            next_value = !next_value;
  141|       |        }
  142|       |
  143|  1.11k|        Ok(Self {
  144|  1.11k|            ranges,
  145|  1.11k|            ..Default::default()
  146|  1.11k|        })
  147|  1.11k|    }

