_RNvXs14_NtCskn3PThRdvIh_5ahash7convertAhj40_INtB6_7ConvertAAyj4_j2_E7convert:
   17|      1|            fn convert(self) -> $a {
   18|      1|                unsafe {
   19|      1|                    core::mem::transmute::<$b, $a>(self)
   20|      1|                }
   21|      1|            }

_RNvXs_NtCskn3PThRdvIh_5ahash13fallback_hashNtB4_7AHasherNtNtCshIAt2fZ6DPf_4core4hash6Hasher9write_u64CsdKADRZ4phoq_6simple:
  163|  47.0k|    fn write_u64(&mut self, i: u64) {
  164|  47.0k|        self.update(i as u64);
  165|  47.0k|    }
_RNvMNtCskn3PThRdvIh_5ahash13fallback_hashNtB2_7AHasher6update:
   97|  50.9k|    fn update(&mut self, new_data: u64) {
   98|  50.9k|        self.buffer = folded_multiply(new_data ^ self.buffer, MULTIPLE);
   99|  50.9k|    }
_RNvMNtCskn3PThRdvIh_5ahash13fallback_hashNtB2_7AHasher17from_random_stateCsdKADRZ4phoq_6simple:
   58|  47.0k|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|  47.0k|        AHasher {
   60|  47.0k|            buffer: rand_state.k0,
   61|  47.0k|            pad: rand_state.k1,
   62|  47.0k|            extra_keys: [rand_state.k2, rand_state.k3],
   63|  47.0k|        }
   64|  47.0k|    }
_RNvXs_NtCskn3PThRdvIh_5ahash13fallback_hashNtB4_7AHasherNtNtCshIAt2fZ6DPf_4core4hash6Hasher6finishCsdKADRZ4phoq_6simple:
  212|  47.0k|    fn finish(&self) -> u64 {
  213|  47.0k|        let rot = (self.buffer & 63) as u32;
  214|  47.0k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  47.0k|    }
_RNvXs4_NtCskn3PThRdvIh_5ahash13fallback_hashNtB5_7AHasherNtNtCshIAt2fZ6DPf_4core5clone5Clone5cloneB7_:
   23|  3.14k|#[derive(Debug, Clone)]
_RNvXs_NtCskn3PThRdvIh_5ahash13fallback_hashNtB4_7AHasherNtNtCshIAt2fZ6DPf_4core4hash6Hasher11write_usizeB6_:
  174|    785|    fn write_usize(&mut self, i: usize) {
  175|    785|        self.write_u64(i as u64);
  176|    785|    }
_RNvXs_NtCskn3PThRdvIh_5ahash13fallback_hashNtB4_7AHasherNtNtCshIAt2fZ6DPf_4core4hash6Hasher9write_u64B6_:
  163|  3.92k|    fn write_u64(&mut self, i: u64) {
  164|  3.92k|        self.update(i as u64);
  165|  3.92k|    }
_RNvXs_NtCskn3PThRdvIh_5ahash13fallback_hashNtB4_7AHasherNtNtCshIAt2fZ6DPf_4core4hash6Hasher6finishB6_:
  212|  3.14k|    fn finish(&self) -> u64 {
  213|  3.14k|        let rot = (self.buffer & 63) as u32;
  214|  3.14k|        folded_multiply(self.buffer, self.pad).rotate_left(rot)
  215|  3.14k|    }
_RNvMNtCskn3PThRdvIh_5ahash13fallback_hashNtB2_7AHasher17from_random_stateB4_:
   58|    785|    pub(crate) fn from_random_state(rand_state: &RandomState) -> AHasher {
   59|    785|        AHasher {
   60|    785|            buffer: rand_state.k0,
   61|    785|            pad: rand_state.k1,
   62|    785|            extra_keys: [rand_state.k2, rand_state.k3],
   63|    785|        }
   64|    785|    }

_RNvMs2_NtCskn3PThRdvIh_5ahash8hash_mapINtB5_8AHashMapyyE6insertCsdKADRZ4phoq_6simple:
  164|  20.6k|    pub fn insert(&mut self, k: K, v: V) -> Option<V> {
  165|  20.6k|        self.0.insert(k, v)
  166|  20.6k|    }
_RNvMs0_NtCskn3PThRdvIh_5ahash8hash_mapINtB5_8AHashMapyyE3newCsdKADRZ4phoq_6simple:
   35|    785|    pub fn new() -> Self {
   36|    785|        AHashMap(HashMap::with_hasher(RandomState::default()))
   37|    785|    }
_RINvMs2_NtCskn3PThRdvIh_5ahash8hash_mapINtB6_8AHashMapyyE3getyECsdKADRZ4phoq_6simple:
   79|  4.83k|    pub fn get<Q: ?Sized>(&self, k: &Q) -> Option<&V>
   80|  4.83k|    where
   81|  4.83k|        K: Borrow<Q>,
   82|  4.83k|        Q: Hash + Eq,
   83|  4.83k|    {
   84|  4.83k|        self.0.get(k)
   85|  4.83k|    }
_RINvMs2_NtCskn3PThRdvIh_5ahash8hash_mapINtB6_8AHashMapyyE6removeyECsdKADRZ4phoq_6simple:
  186|  6.39k|    pub fn remove<Q: ?Sized>(&mut self, k: &Q) -> Option<V>
  187|  6.39k|    where
  188|  6.39k|        K: Borrow<Q>,
  189|  6.39k|        Q: Hash + Eq,
  190|  6.39k|    {
  191|  6.39k|        self.0.remove(k)
  192|  6.39k|    }

_RNvNtCskn3PThRdvIh_5ahash10operations15folded_multiply:
   11|   101k|pub(crate) const fn folded_multiply(s: u64, by: u64) -> u64 {
   12|   101k|    let result = (s as u128).wrapping_mul(by as u128);
   13|   101k|    ((result & 0xffff_ffff_ffff_ffff) as u64) ^ ((result >> 64) as u64)
   14|   101k|}

_RNvMs1_NtCskn3PThRdvIh_5ahash12random_stateNtB5_11RandomState3newCsdKADRZ4phoq_6simple:
  196|    785|    pub fn new() -> RandomState {
  197|    785|        let src = Self::get_src();
  198|    785|        let fixed = src.get_fixed_seeds();
  199|    785|        Self::from_keys(&fixed[0], &fixed[1], src.gen_hasher_seed())
  200|    785|    }
_RNCNvMs1_NtCskn3PThRdvIh_5ahash12random_stateNtB7_11RandomState7get_src0CsdKADRZ4phoq_6simple:
  184|      1|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
_RNvXs2_NtCskn3PThRdvIh_5ahash12random_stateNtB5_11RandomStateNtNtCshIAt2fZ6DPf_4core7default7Default7defaultCsdKADRZ4phoq_6simple:
  256|    785|    fn default() -> Self {
  257|    785|        Self::new()
  258|    785|    }
_RNvMs1_NtCskn3PThRdvIh_5ahash12random_stateNtB5_11RandomState7get_srcCsdKADRZ4phoq_6simple:
  183|    785|    fn get_src() -> &'static dyn RandomSource {
  184|    785|        RAND_SOURCE.get_or_init(|| Box::new(Box::new(DefaultRandomSource::new()))).as_ref()
  185|    785|    }
_RNvXs3_NtCskn3PThRdvIh_5ahash12random_stateNtB5_11RandomStateNtNtCshIAt2fZ6DPf_4core4hash11BuildHasher12build_hasherCsdKADRZ4phoq_6simple:
  293|  47.0k|    fn build_hasher(&self) -> AHasher {
  294|  47.0k|        AHasher::from_random_state(self)
  295|  47.0k|    }
_RNCNvMs1_NtCskn3PThRdvIh_5ahash12random_stateNtB7_11RandomState9from_keys0B9_:
  215|  3.14k|        let mix = |k: u64| {
  216|  3.14k|            let mut h = hasher.clone();
  217|  3.14k|            h.write_u64(k);
  218|  3.14k|            h.finish()
  219|  3.14k|        };
_RNvMNtCskn3PThRdvIh_5ahash12random_stateNtB2_19DefaultRandomSource3new:
   80|      1|    fn new() -> DefaultRandomSource {
   81|      1|        DefaultRandomSource {
   82|      1|            counter: AtomicUsize::new(&PI as *const _ as usize),
   83|      1|        }
   84|      1|    }
_RNvXs_NtCskn3PThRdvIh_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15gen_hasher_seed:
  130|    785|    fn gen_hasher_seed(&self) -> usize {
  131|    785|        let stack = self as *const _ as usize;
  132|    785|        self.counter.fetch_add(stack, Ordering::Relaxed)
  133|    785|    }
_RNvMs1_NtCskn3PThRdvIh_5ahash12random_stateNtB5_11RandomState9from_keys:
  211|    785|    fn from_keys(a: &[u64; 4], b: &[u64; 4], c: usize) -> RandomState {
  212|    785|        let &[k0, k1, k2, k3] = a;
  213|    785|        let mut hasher = AHasher::from_random_state(&RandomState { k0, k1, k2, k3 });
  214|    785|        hasher.write_usize(c);
  215|    785|        let mix = |k: u64| {
  216|       |            let mut h = hasher.clone();
  217|       |            h.write_u64(k);
  218|       |            h.finish()
  219|       |        };
  220|    785|        RandomState {
  221|    785|            k0: mix(b[0]),
  222|    785|            k1: mix(b[1]),
  223|    785|            k2: mix(b[2]),
  224|    785|            k3: mix(b[3]),
  225|    785|        }
  226|    785|    }
_RNCNvXs_NtCskn3PThRdvIh_5ahash12random_stateNtB6_19DefaultRandomSourceNtB6_12RandomSource15get_fixed_seeds0B8_:
   99|      1|        SEEDS.get_or_init(|| {
  100|      1|            let mut result: [u8; 64] = [0; 64];
  101|      1|            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|      1|            Box::new(result.convert())
  103|      1|        })
_RNvXs_NtCskn3PThRdvIh_5ahash12random_stateNtB4_19DefaultRandomSourceNtB4_12RandomSource15get_fixed_seeds:
   96|    785|    fn get_fixed_seeds(&self) -> &'static [[u64; 4]; 2] {
   97|    785|        static SEEDS: OnceBox<[[u64; 4]; 2]> = OnceBox::new();
   98|    785|
   99|    785|        SEEDS.get_or_init(|| {
  100|       |            let mut result: [u8; 64] = [0; 64];
  101|       |            getrandom::getrandom(&mut result).expect("getrandom::getrandom() failed.");
  102|       |            Box::new(result.convert())
  103|    785|        })
  104|    785|    }

_RNvXs1j_CsfDlVYfi1rqX_9arbitraryThmmjINtNtCs4fiSK8q0usK_5alloc3vec3VecNtNtCsdKADRZ4phoq_6simple6common9OperationEENtB6_9Arbitrary9size_hintB1a_:
  586|    786|            fn size_hint(depth: usize) -> (usize, Option<usize>) {
  587|    786|                crate::size_hint::and_all(&[
  588|    786|                    <$last as Arbitrary>::size_hint(depth),
  589|    786|                    $( <$xs as Arbitrary>::size_hint(depth) ),*
  590|    786|                ])
  591|    786|            }
_RNvXsI_CsfDlVYfi1rqX_9arbitraryyNtB5_9Arbitrary9size_hintCsdKADRZ4phoq_6simple:
  320|  1.57k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  1.57k|                    let n = mem::size_of::<$ty>();
  322|  1.57k|                    (n, Some(n))
  323|  1.57k|                }
_RNvXsH_CsfDlVYfi1rqX_9arbitrarymNtB5_9Arbitrary9size_hintCsdKADRZ4phoq_6simple:
  320|  2.35k|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|  2.35k|                    let n = mem::size_of::<$ty>();
  322|  2.35k|                    (n, Some(n))
  323|  2.35k|                }
_RNvXsF_CsfDlVYfi1rqX_9arbitraryhNtB5_9Arbitrary9size_hintCsdKADRZ4phoq_6simple:
  320|    786|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    786|                    let n = mem::size_of::<$ty>();
  322|    786|                    (n, Some(n))
  323|    786|                }
_RNvXs1j_CsfDlVYfi1rqX_9arbitraryThmmjINtNtCs4fiSK8q0usK_5alloc3vec3VecNtNtCsdKADRZ4phoq_6simple6common9OperationEENtB6_9Arbitrary19arbitrary_take_restB1a_:
  579|    785|            fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  580|    785|                $(let $xs = $xs::arbitrary(&mut u)?;)*
  581|    785|                let $last = $last::arbitrary_take_rest(u)?;
  582|    785|                Ok(($($xs,)* $last,))
  583|    785|            }
_RNvXsa_CsfDlVYfi1rqX_9arbitraryINtNtCs4fiSK8q0usK_5alloc3vec3VecNtNtCsdKADRZ4phoq_6simple6common9OperationENtB5_9Arbitrary9size_hintB14_:
  687|    786|    fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  688|    786|        (0, None)
  689|    786|    }
_RNvYyNtCsfDlVYfi1rqX_9arbitrary9Arbitrary19arbitrary_take_restCsdKADRZ4phoq_6simple:
  189|    410|    fn arbitrary_take_rest(mut u: Unstructured<'a>) -> Result<Self> {
  190|    410|        Self::arbitrary(&mut u)
  191|    410|    }
_RNvXsK_CsfDlVYfi1rqX_9arbitraryjNtB5_9Arbitrary9size_hintCsdKADRZ4phoq_6simple:
  320|    786|                fn size_hint(_depth: usize) -> (usize, Option<usize>) {
  321|    786|                    let n = mem::size_of::<$ty>();
  322|    786|                    (n, Some(n))
  323|    786|                }
_RNvXsa_CsfDlVYfi1rqX_9arbitraryINtNtCs4fiSK8q0usK_5alloc3vec3VecNtNtCsdKADRZ4phoq_6simple6common9OperationENtB5_9Arbitrary19arbitrary_take_restB14_:
  683|    785|        u.arbitrary_take_rest_iter()?.collect()
  684|    785|    }
_RNvXsK_CsfDlVYfi1rqX_9arbitraryjNtB5_9Arbitrary9arbitrary:
  309|    785|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|    785|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|    785|                    u.fill_buffer(&mut buf)?;
  312|    785|                    let mut x: $unsigned = 0;
  313|  6.28k|                    for i in 0..mem::size_of::<$ty>() {
  314|  6.28k|                        x |= buf[i] as $unsigned << (i * 8);
  315|  6.28k|                    }
  316|    785|                    Ok(x as $ty)
  317|    785|                }
_RNvXsF_CsfDlVYfi1rqX_9arbitraryhNtB5_9Arbitrary9arbitrary:
  309|    785|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|    785|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|    785|                    u.fill_buffer(&mut buf)?;
  312|    785|                    let mut x: $unsigned = 0;
  313|    785|                    for i in 0..mem::size_of::<$ty>() {
  314|    785|                        x |= buf[i] as $unsigned << (i * 8);
  315|    785|                    }
  316|    785|                    Ok(x as $ty)
  317|    785|                }
_RNvXsI_CsfDlVYfi1rqX_9arbitraryyNtB5_9Arbitrary9arbitrary:
  309|  52.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  52.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  52.4k|                    u.fill_buffer(&mut buf)?;
  312|  52.4k|                    let mut x: $unsigned = 0;
  313|   419k|                    for i in 0..mem::size_of::<$ty>() {
  314|   419k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   419k|                    }
  316|  52.4k|                    Ok(x as $ty)
  317|  52.4k|                }
_RNvXsH_CsfDlVYfi1rqX_9arbitrarymNtB5_9Arbitrary9arbitrary:
  309|  33.4k|                fn arbitrary(u: &mut Unstructured<'a>) -> Result<Self> {
  310|  33.4k|                    let mut buf = [0; mem::size_of::<$ty>()];
  311|  33.4k|                    u.fill_buffer(&mut buf)?;
  312|  33.4k|                    let mut x: $unsigned = 0;
  313|   133k|                    for i in 0..mem::size_of::<$ty>() {
  314|   133k|                        x |= buf[i] as $unsigned << (i * 8);
  315|   133k|                    }
  316|  33.4k|                    Ok(x as $ty)
  317|  33.4k|                }

_RNvNtCsfDlVYfi1rqX_9arbitrary9size_hint6or_allCsdKADRZ4phoq_6simple:
   58|    785|    if let Some(head) = hints.first().copied() {
   59|    785|        hints[1..].iter().copied().fold(head, or)
   60|       |    } else {
   61|      0|        (0, Some(0))
   62|       |    }
   63|    785|}
_RNCNvNtCsfDlVYfi1rqX_9arbitrary9size_hint2or0CsdKADRZ4phoq_6simple:
   48|  1.57k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RNCNCNvNtCsfDlVYfi1rqX_9arbitrary9size_hint2or00CsdKADRZ4phoq_6simple:
   48|  1.57k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
_RINvNtCsfDlVYfi1rqX_9arbitrary9size_hint15recursion_guardNCNvXNvNtCsdKADRZ4phoq_6simple6common1__NtB10_9OperationNtB4_9Arbitrary9size_hint0EB12_:
   12|    785|pub fn recursion_guard(
   13|    785|    depth: usize,
   14|    785|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    785|) -> (usize, Option<usize>) {
   16|    785|    const MAX_DEPTH: usize = 20;
   17|    785|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    785|        f(depth + 1)
   21|       |    }
   22|    785|}
_RNvNtCsfDlVYfi1rqX_9arbitrary9size_hint7and_allCsdKADRZ4phoq_6simple:
   37|  3.92k|pub fn and_all(hints: &[(usize, Option<usize>)]) -> (usize, Option<usize>) {
   38|  3.92k|    hints.iter().copied().fold((0, Some(0)), and)
   39|  3.92k|}
_RNvNtCsfDlVYfi1rqX_9arbitrary9size_hint2orCsdKADRZ4phoq_6simple:
   44|  1.57k|pub fn or(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   45|  1.57k|    let lower = std::cmp::min(lhs.0, rhs.0);
   46|  1.57k|    let upper = lhs
   47|  1.57k|        .1
   48|  1.57k|        .and_then(|lhs| rhs.1.map(|rhs| std::cmp::max(lhs, rhs)));
   49|  1.57k|    (lower, upper)
   50|  1.57k|}
_RNCNCNvNtCsfDlVYfi1rqX_9arbitrary9size_hint3and00CsdKADRZ4phoq_6simple:
   28|  3.14k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RINvNtCsfDlVYfi1rqX_9arbitrary9size_hint15recursion_guardNCNvXNvNtCsdKADRZ4phoq_6simple6commons_1__NtB10_6MethodNtB4_9Arbitrary9size_hint0EB12_:
   12|    785|pub fn recursion_guard(
   13|    785|    depth: usize,
   14|    785|    f: impl FnOnce(usize) -> (usize, Option<usize>),
   15|    785|) -> (usize, Option<usize>) {
   16|    785|    const MAX_DEPTH: usize = 20;
   17|    785|    if depth > MAX_DEPTH {
   18|      0|        (0, None)
   19|       |    } else {
   20|    785|        f(depth + 1)
   21|       |    }
   22|    785|}
_RNCNvNtCsfDlVYfi1rqX_9arbitrary9size_hint3and0CsdKADRZ4phoq_6simple:
   28|  3.92k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
_RNvNtCsfDlVYfi1rqX_9arbitrary9size_hint3andCsdKADRZ4phoq_6simple:
   26|  7.07k|pub fn and(lhs: (usize, Option<usize>), rhs: (usize, Option<usize>)) -> (usize, Option<usize>) {
   27|  7.07k|    let lower = lhs.0 + rhs.0;
   28|  7.07k|    let upper = lhs.1.and_then(|lhs| rhs.1.map(|rhs| lhs + rhs));
   29|  7.07k|    (lower, upper)
   30|  7.07k|}

_RINvMNtCsfDlVYfi1rqX_9arbitrary12unstructuredNtB3_12Unstructured24arbitrary_take_rest_iterNtNtCsdKADRZ4phoq_6simple6common9OperationEB1u_:
  620|    785|    pub fn arbitrary_take_rest_iter<ElementType: Arbitrary<'a>>(
  621|    785|        self,
  622|    785|    ) -> Result<ArbitraryTakeRestIter<'a, ElementType>> {
  623|    785|        let (lower, upper) = ElementType::size_hint(0);
  624|    785|
  625|    785|        let elem_size = upper.unwrap_or(lower * 2);
  626|    785|        let elem_size = std::cmp::max(1, elem_size);
  627|    785|        let size = self.len() / elem_size;
  628|    785|        Ok(ArbitraryTakeRestIter {
  629|    785|            size,
  630|    785|            u: Some(self),
  631|    785|            _marker: PhantomData,
  632|    785|        })
  633|    785|    }
_RNvMNtCsfDlVYfi1rqX_9arbitrary12unstructuredNtB2_12Unstructured8is_emptyCsdKADRZ4phoq_6simple:
  132|  63.7k|    pub fn is_empty(&self) -> bool {
  133|  63.7k|        self.len() == 0
  134|  63.7k|    }
_RNvXs0_NtCsfDlVYfi1rqX_9arbitrary12unstructuredINtB5_21ArbitraryTakeRestIterNtNtCsdKADRZ4phoq_6simple6common9OperationENtNtNtNtCshIAt2fZ6DPf_4core4iter6traits8iterator8Iterator4nextB1g_:
  746|  32.6k|        if let Some(mut u) = self.u.take() {
  747|  31.8k|            if self.size == 1 {
  748|    783|                Some(Arbitrary::arbitrary_take_rest(u))
  749|  31.0k|            } else if self.size == 0 {
  750|      2|                None
  751|       |            } else {
  752|  31.0k|                self.size -= 1;
  753|  31.0k|                let ret = Arbitrary::arbitrary(&mut u);
  754|  31.0k|                self.u = Some(u);
  755|  31.0k|                Some(ret)
  756|       |            }
  757|       |        } else {
  758|    783|            None
  759|       |        }
  760|  32.6k|    }
_RNvMNtCsfDlVYfi1rqX_9arbitrary12unstructuredNtB2_12Unstructured3lenCsdKADRZ4phoq_6simple:
  108|  64.5k|    pub fn len(&self) -> usize {
  109|  64.5k|        self.data.len()
  110|  64.5k|    }
_RNvMNtCsfDlVYfi1rqX_9arbitrary12unstructuredNtB2_12Unstructured3new:
   85|    785|    pub fn new(data: &'a [u8]) -> Self {
   86|    785|        Unstructured { data }
   87|    785|    }
_RNvMNtCsfDlVYfi1rqX_9arbitrary12unstructuredNtB2_12Unstructured11fill_buffer:
  521|  87.4k|    pub fn fill_buffer(&mut self, buffer: &mut [u8]) -> Result<()> {
  522|  87.4k|        let n = std::cmp::min(buffer.len(), self.data.len());
  523|  87.4k|        buffer[..n].copy_from_slice(&self.data[..n]);
  524|  87.4k|        for byte in buffer[n..].iter_mut() {
  525|      0|            *byte = 0;
  526|      0|        }
  527|  87.4k|        self.data = &self.data[n..];
  528|  87.4k|        Ok(())
  529|  87.4k|    }

_RINvNvCsaHbZzw2FCN1_12blake2b_simd20state_words_to_bytes9as_arrayshEB4_:
  240|  43.9k|            unsafe fn as_arrays<T>(a: &mut [T; $( $len + )* 0 ]) -> ( $( &mut [T; $len], )* ) {
  241|  43.9k|                let mut p = a.as_mut_ptr();
  242|  43.9k|                ( $( {
  243|  43.9k|                    let aref = &mut *(p as *mut [T; $len]);
  244|  43.9k|                    p = p.add($len);
  245|  43.9k|                    aref
  246|  43.9k|                }, )* )
  247|  43.9k|            }
_RINvNvNtCsaHbZzw2FCN1_12blake2b_simd8portable14compress1_loop8as_arrayhEB6_:
   61|  1.52k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  1.52k|                &*(slice.as_ptr() as *const [_; $len])
   63|  1.52k|            }
_RINvNvNtCsaHbZzw2FCN1_12blake2b_simd4guts11final_block8as_arrayhEB6_:
   61|  2.23k|            unsafe fn as_array<T>(slice: &[T]) -> &[T; $len] {
   62|  2.23k|                &*(slice.as_ptr() as *const [_; $len])
   63|  2.23k|            }
_RINvNvNtCsaHbZzw2FCN1_12blake2b_simd8portable14compress_block9as_arrayshEB6_:
  143|  47.5k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  47.5k|                let mut p = a.as_ptr();
  145|  47.5k|                ( $( {
  146|  47.5k|                    let aref = &*(p as *const [T; $len]);
  147|  47.5k|                    p = p.offset($len as isize);
  148|  47.5k|                    aref
  149|  47.5k|                }, )* )
  150|  47.5k|            }
_RINvNvMCsaHbZzw2FCN1_12blake2b_simdNtB5_6Params8to_wordss_9as_arrayshEB5_:
  143|  43.9k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  43.9k|                let mut p = a.as_ptr();
  145|  43.9k|                ( $( {
  146|  43.9k|                    let aref = &*(p as *const [T; $len]);
  147|  43.9k|                    p = p.offset($len as isize);
  148|  43.9k|                    aref
  149|  43.9k|                }, )* )
  150|  43.9k|            }
_RINvNvMCsaHbZzw2FCN1_12blake2b_simdNtB5_6Params8to_words9as_arrayshEB5_:
  143|  43.9k|            unsafe fn as_arrays<T>(a: &[T; $( $len + )* 0 ]) -> ( $( &[T; $len], )* ) {
  144|  43.9k|                let mut p = a.as_ptr();
  145|  43.9k|                ( $( {
  146|  43.9k|                    let aref = &*(p as *const [T; $len]);
  147|  43.9k|                    p = p.offset($len as isize);
  148|  43.9k|                    aref
  149|  43.9k|                }, )* )
  150|  43.9k|            }

_RNvMs0_NtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB5_8Finalize3yes:
  165|   138k|    pub fn yes(&self) -> bool {
  166|   138k|        match self {
  167|   131k|            Finalize::Yes => true,
  168|  6.30k|            Finalize::No => false,
  169|       |        }
  170|   138k|    }
_RNvMs2_NtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB5_6Stride17padded_blockbytes:
  196|  49.8k|    pub fn padded_blockbytes(&self) -> usize {
  197|  49.8k|        match self {
  198|  49.8k|            Stride::Serial => BLOCKBYTES,
  199|      0|            Stride::Parallel => blake2bp::DEGREE * BLOCKBYTES,
  200|       |        }
  201|  49.8k|    }
_RNvMNtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB2_14Implementation18sse41_if_supported:
   52|  43.9k|    pub fn sse41_if_supported() -> Option<Self> {
   53|  43.9k|        // Check whether SSE4.1 support is assumed by the build.
   54|  43.9k|        #[cfg(target_feature = "sse4.1")]
   55|  43.9k|        {
   56|  43.9k|            return Some(Implementation(Platform::SSE41));
   57|  43.9k|        }
   58|  43.9k|        // Otherwise dynamically check for support if we can.
   59|  43.9k|        #[cfg(feature = "std")]
   60|  43.9k|        {
   61|  43.9k|            if is_x86_feature_detected!("sse4.1") {
   62|  43.9k|                return Some(Implementation(Platform::SSE41));
   63|  43.9k|            }
   64|  43.9k|        }
   65|  43.9k|        None
   66|  43.9k|    }
_RNvMNtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB2_14Implementation8portable:
   46|  43.9k|    pub fn portable() -> Self {
   47|  43.9k|        Implementation(Platform::Portable)
   48|  43.9k|    }
_RNvNtCsaHbZzw2FCN1_12blake2b_simd4guts9flag_word:
  217|  95.1k|pub(crate) fn flag_word(flag: bool) -> Word {
  218|  95.1k|    if flag {
  219|  43.9k|        !0
  220|       |    } else {
  221|  51.1k|        0
  222|       |    }
  223|  95.1k|}
_RNvNtCsaHbZzw2FCN1_12blake2b_simd4guts19input_debug_asserts:
  252|  46.0k|pub fn input_debug_asserts(input: &[u8], finalize: Finalize) {
  253|  46.0k|    // If we're not finalizing, the input must not be empty, and it must be an
  254|  46.0k|    // even multiple of the block size.
  255|  46.0k|    if !finalize.yes() {
  256|  2.10k|        debug_assert!(!input.is_empty());
  257|  2.10k|        debug_assert_eq!(0, input.len() % BLOCKBYTES);
  258|  43.9k|    }
  259|  46.0k|}
_RNvMs1_NtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB5_8LastNode3yes:
  181|  43.9k|    pub fn yes(&self) -> bool {
  182|  43.9k|        match self {
  183|      0|            LastNode::Yes => true,
  184|  43.9k|            LastNode::No => false,
  185|       |        }
  186|  43.9k|    }
_RNvMNtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB2_14Implementation6detect:
   33|  43.9k|            if let Some(avx2_impl) = Self::avx2_if_supported() {
   34|      0|                return avx2_impl;
   35|  43.9k|            }
   36|       |        }
   37|       |        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
   38|       |        {
   39|  43.9k|            if let Some(sse41_impl) = Self::sse41_if_supported() {
   40|      0|                return sse41_impl;
   41|  43.9k|            }
   42|  43.9k|        }
   43|  43.9k|        Self::portable()
   44|  43.9k|    }
_RNvMNtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB2_14Implementation14compress1_loop:
   96|  46.0k|    pub fn compress1_loop(
   97|  46.0k|        &self,
   98|  46.0k|        input: &[u8],
   99|  46.0k|        words: &mut [Word; 8],
  100|  46.0k|        count: Count,
  101|  46.0k|        last_node: LastNode,
  102|  46.0k|        finalize: Finalize,
  103|  46.0k|        stride: Stride,
  104|  46.0k|    ) {
  105|  46.0k|        match self.0 {
  106|       |            #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
  107|      0|            Platform::AVX2 => unsafe {
  108|      0|                avx2::compress1_loop(input, words, count, last_node, finalize, stride);
  109|      0|            },
  110|       |            // Note that there's an SSE version of compress1 in the official C
  111|       |            // implementation, but I haven't ported it yet.
  112|  46.0k|            _ => {
  113|  46.0k|                portable::compress1_loop(input, words, count, last_node, finalize, stride);
  114|  46.0k|            }
  115|       |        }
  116|  46.0k|    }
_RNvNtCsaHbZzw2FCN1_12blake2b_simd4guts10count_high:
  208|  47.5k|pub(crate) fn count_high(count: Count) -> Word {
  209|  47.5k|    (count >> 8 * size_of::<Word>()) as Word
  210|  47.5k|}
_RNvNtCsaHbZzw2FCN1_12blake2b_simd4guts9count_low:
  204|  47.5k|pub(crate) fn count_low(count: Count) -> Word {
  205|  47.5k|    count as Word
  206|  47.5k|}
_RNvMNtCsaHbZzw2FCN1_12blake2b_simd4gutsNtB2_14Implementation17avx2_if_supported:
   70|  43.9k|    pub fn avx2_if_supported() -> Option<Self> {
   71|  43.9k|        // Check whether AVX2 support is assumed by the build.
   72|  43.9k|        #[cfg(target_feature = "avx2")]
   73|  43.9k|        {
   74|  43.9k|            return Some(Implementation(Platform::AVX2));
   75|  43.9k|        }
   76|  43.9k|        // Otherwise dynamically check for support if we can.
   77|  43.9k|        #[cfg(feature = "std")]
   78|  43.9k|        {
   79|  43.9k|            if is_x86_feature_detected!("avx2") {
   80|  43.9k|                return Some(Implementation(Platform::AVX2));
   81|  43.9k|            }
   82|  43.9k|        }
   83|  43.9k|        None
   84|  43.9k|    }
_RNvNtCsaHbZzw2FCN1_12blake2b_simd4guts11final_block:
  232|  46.0k|pub fn final_block<'a>(
  233|  46.0k|    input: &'a [u8],
  234|  46.0k|    offset: usize,
  235|  46.0k|    buffer: &'a mut [u8; BLOCKBYTES],
  236|  46.0k|    stride: Stride,
  237|  46.0k|) -> (&'a [u8; BLOCKBYTES], usize, bool) {
  238|  46.0k|    let capped_offset = cmp::min(offset, input.len());
  239|  46.0k|    let offset_slice = &input[capped_offset..];
  240|  46.0k|    if offset_slice.len() >= BLOCKBYTES {
  241|  2.23k|        let block = array_ref!(offset_slice, 0, BLOCKBYTES);
  242|  2.23k|        let should_finalize = offset_slice.len() <= stride.padded_blockbytes();
  243|  2.23k|        (block, BLOCKBYTES, should_finalize)
  244|       |    } else {
  245|       |        // Copy the final block to the front of the block buffer. The rest of
  246|       |        // the buffer is assumed to be initialized to zero.
  247|  43.8k|        buffer[..offset_slice.len()].copy_from_slice(offset_slice);
  248|  43.8k|        (buffer, offset_slice.len(), true)
  249|       |    }
  250|  46.0k|}

_RNvMCsaHbZzw2FCN1_12blake2b_simdNtB2_6Params3newCs2zC7gxbXiq6_9multihash:
  165|  43.9k|    pub fn new() -> Self {
  166|  43.9k|        Self {
  167|  43.9k|            hash_length: OUTBYTES as u8,
  168|  43.9k|            key_length: 0,
  169|  43.9k|            key_block: [0; BLOCKBYTES],
  170|  43.9k|            salt: [0; SALTBYTES],
  171|  43.9k|            personal: [0; PERSONALBYTES],
  172|  43.9k|            // NOTE: fanout and max_depth don't default to zero!
  173|  43.9k|            fanout: 1,
  174|  43.9k|            max_depth: 1,
  175|  43.9k|            max_leaf_length: 0,
  176|  43.9k|            node_offset: 0,
  177|  43.9k|            node_depth: 0,
  178|  43.9k|            inner_hash_length: 0,
  179|  43.9k|            last_node: guts::LastNode::No,
  180|  43.9k|            implementation: guts::Implementation::detect(),
  181|  43.9k|        }
  182|  43.9k|    }
_RNvMCsaHbZzw2FCN1_12blake2b_simdNtB2_6Params11hash_lengthCs2zC7gxbXiq6_9multihash:
  238|  43.9k|    pub fn hash_length(&mut self, length: usize) -> &mut Self {
  239|  43.9k|        assert!(
  240|  43.9k|            1 <= length && length <= OUTBYTES,
  241|      0|            "Bad hash length: {}",
  242|       |            length
  243|       |        );
  244|  43.9k|        self.hash_length = length as u8;
  245|  43.9k|        self
  246|  43.9k|    }
_RNvMs1_CsaHbZzw2FCN1_12blake2b_simdNtB5_5State8fill_buf:
  424|  43.9k|    fn fill_buf(&mut self, input: &mut &[u8]) {
  425|  43.9k|        let take = cmp::min(BLOCKBYTES - self.buflen as usize, input.len());
  426|  43.9k|        self.buf[self.buflen as usize..self.buflen as usize + take].copy_from_slice(&input[..take]);
  427|  43.9k|        self.buflen += take as u8;
  428|  43.9k|        *input = &input[take..];
  429|  43.9k|    }
_RNvMCsaHbZzw2FCN1_12blake2b_simdNtB2_6Params8to_words:
  185|  43.9k|    fn to_words(&self) -> [Word; 8] {
  186|  43.9k|        let (salt_left, salt_right) = array_refs!(&self.salt, SALTBYTES / 2, SALTBYTES / 2);
  187|  43.9k|        let (personal_left, personal_right) =
  188|  43.9k|            array_refs!(&self.personal, PERSONALBYTES / 2, PERSONALBYTES / 2);
  189|  43.9k|        [
  190|  43.9k|            IV[0]
  191|  43.9k|                ^ self.hash_length as u64
  192|  43.9k|                ^ (self.key_length as u64) << 8
  193|  43.9k|                ^ (self.fanout as u64) << 16
  194|  43.9k|                ^ (self.max_depth as u64) << 24
  195|  43.9k|                ^ (self.max_leaf_length as u64) << 32,
  196|  43.9k|            IV[1] ^ self.node_offset,
  197|  43.9k|            IV[2] ^ self.node_depth as u64 ^ (self.inner_hash_length as u64) << 8,
  198|  43.9k|            IV[3],
  199|  43.9k|            IV[4] ^ Word::from_le_bytes(*salt_left),
  200|  43.9k|            IV[5] ^ Word::from_le_bytes(*salt_right),
  201|  43.9k|            IV[6] ^ Word::from_le_bytes(*personal_left),
  202|  43.9k|            IV[7] ^ Word::from_le_bytes(*personal_right),
  203|  43.9k|        ]
  204|  43.9k|    }
_RNvMs4_CsaHbZzw2FCN1_12blake2b_simdNtB5_4Hash8as_bytes:
  589|  43.9k|    pub fn as_bytes(&self) -> &[u8] {
  590|  43.9k|        &self.bytes[..self.len as usize]
  591|  43.9k|    }
_RNvMs1_CsaHbZzw2FCN1_12blake2b_simdNtB5_5State11with_params:
  406|  43.9k|    fn with_params(params: &Params) -> Self {
  407|  43.9k|        let mut state = Self {
  408|  43.9k|            words: params.to_words(),
  409|  43.9k|            count: 0,
  410|  43.9k|            buf: [0; BLOCKBYTES],
  411|  43.9k|            buflen: 0,
  412|  43.9k|            last_node: params.last_node,
  413|  43.9k|            hash_length: params.hash_length,
  414|  43.9k|            implementation: params.implementation,
  415|  43.9k|            is_keyed: params.key_length > 0,
  416|  43.9k|        };
  417|  43.9k|        if state.is_keyed {
  418|      0|            state.buf = params.key_block;
  419|      0|            state.buflen = state.buf.len() as u8;
  420|  43.9k|        }
  421|  43.9k|        state
  422|  43.9k|    }
_RNvMs1_CsaHbZzw2FCN1_12blake2b_simdNtB5_5State6update:
  453|  43.9k|    pub fn update(&mut self, mut input: &[u8]) -> &mut Self {
  454|  43.9k|        // If we have a partial buffer, try to complete it.
  455|  43.9k|        self.compress_buffer_if_possible(&mut input);
  456|  43.9k|        // While there's more than a block of input left (which also means we cleared the buffer
  457|  43.9k|        // above), compress blocks directly without copying.
  458|  43.9k|        let mut end = input.len().saturating_sub(1);
  459|  43.9k|        end -= end % BLOCKBYTES;
  460|  43.9k|        if end > 0 {
  461|  2.10k|            self.implementation.compress1_loop(
  462|  2.10k|                &input[..end],
  463|  2.10k|                &mut self.words,
  464|  2.10k|                self.count,
  465|  2.10k|                self.last_node,
  466|  2.10k|                guts::Finalize::No,
  467|  2.10k|                guts::Stride::Serial,
  468|  2.10k|            );
  469|  2.10k|            self.count = self.count.wrapping_add(end as Count);
  470|  2.10k|            input = &input[end..];
  471|  41.8k|        }
  472|       |        // Buffer any remaining input, to be either compressed or finalized in a subsequent call.
  473|       |        // Note that this represents some copying overhead, which in theory we could avoid in
  474|       |        // all-at-once setting. A function hardcoded for exactly BLOCKSIZE input bytes is about 10%
  475|       |        // faster than using this implementation for the same input.
  476|  43.9k|        self.fill_buf(&mut input);
  477|  43.9k|        self
  478|  43.9k|    }
_RNvMs1_CsaHbZzw2FCN1_12blake2b_simdNtB5_5State8finalize:
  482|  43.9k|    pub fn finalize(&self) -> Hash {
  483|  43.9k|        let mut words_copy = self.words;
  484|  43.9k|        self.implementation.compress1_loop(
  485|  43.9k|            &self.buf[..self.buflen as usize],
  486|  43.9k|            &mut words_copy,
  487|  43.9k|            self.count,
  488|  43.9k|            self.last_node,
  489|  43.9k|            guts::Finalize::Yes,
  490|  43.9k|            guts::Stride::Serial,
  491|  43.9k|        );
  492|  43.9k|        Hash {
  493|  43.9k|            bytes: state_words_to_bytes(&words_copy),
  494|  43.9k|            len: self.hash_length,
  495|  43.9k|        }
  496|  43.9k|    }
_RNvMCsaHbZzw2FCN1_12blake2b_simdNtB2_6Params8to_state:
  230|  43.9k|    pub fn to_state(&self) -> State {
  231|  43.9k|        State::with_params(self)
  232|  43.9k|    }
_RNvMs1_CsaHbZzw2FCN1_12blake2b_simdNtB5_5State27compress_buffer_if_possible:
  434|  43.9k|    fn compress_buffer_if_possible(&mut self, input: &mut &[u8]) {
  435|  43.9k|        if self.buflen > 0 {
  436|      0|            self.fill_buf(input);
  437|      0|            if !input.is_empty() {
  438|      0|                self.implementation.compress1_loop(
  439|      0|                    &self.buf,
  440|      0|                    &mut self.words,
  441|      0|                    self.count,
  442|      0|                    self.last_node,
  443|      0|                    guts::Finalize::No,
  444|      0|                    guts::Stride::Serial,
  445|      0|                );
  446|      0|                self.count = self.count.wrapping_add(BLOCKBYTES as Count);
  447|      0|                self.buflen = 0;
  448|      0|            }
  449|  43.9k|        }
  450|  43.9k|    }
_RNvCsaHbZzw2FCN1_12blake2b_simd20state_words_to_bytes:
  529|  43.9k|fn state_words_to_bytes(state_words: &[Word; 8]) -> [u8; OUTBYTES] {
  530|  43.9k|    let mut bytes = [0; OUTBYTES];
  531|  43.9k|    {
  532|  43.9k|        const W: usize = size_of::<Word>();
  533|  43.9k|        let refs = mut_array_refs!(&mut bytes, W, W, W, W, W, W, W, W);
  534|  43.9k|        *refs.0 = state_words[0].to_le_bytes();
  535|  43.9k|        *refs.1 = state_words[1].to_le_bytes();
  536|  43.9k|        *refs.2 = state_words[2].to_le_bytes();
  537|  43.9k|        *refs.3 = state_words[3].to_le_bytes();
  538|  43.9k|        *refs.4 = state_words[4].to_le_bytes();
  539|  43.9k|        *refs.5 = state_words[5].to_le_bytes();
  540|  43.9k|        *refs.6 = state_words[6].to_le_bytes();
  541|  43.9k|        *refs.7 = state_words[7].to_le_bytes();
  542|  43.9k|    }
  543|  43.9k|    bytes
  544|  43.9k|}

_RNvNtCsaHbZzw2FCN1_12blake2b_simd8portable5round:
   29|   570k|fn round(r: usize, m: &[Word; 16], v: &mut [Word; 16]) {
   30|   570k|    // Select the message schedule based on the round.
   31|   570k|    let s = SIGMA[r];
   32|   570k|
   33|   570k|    // Mix the columns.
   34|   570k|    g(v, 0, 4, 8, 12, m[s[0] as usize], m[s[1] as usize]);
   35|   570k|    g(v, 1, 5, 9, 13, m[s[2] as usize], m[s[3] as usize]);
   36|   570k|    g(v, 2, 6, 10, 14, m[s[4] as usize], m[s[5] as usize]);
   37|   570k|    g(v, 3, 7, 11, 15, m[s[6] as usize], m[s[7] as usize]);
   38|   570k|
   39|   570k|    // Mix the rows.
   40|   570k|    g(v, 0, 5, 10, 15, m[s[8] as usize], m[s[9] as usize]);
   41|   570k|    g(v, 1, 6, 11, 12, m[s[10] as usize], m[s[11] as usize]);
   42|   570k|    g(v, 2, 7, 8, 13, m[s[12] as usize], m[s[13] as usize]);
   43|   570k|    g(v, 3, 4, 9, 14, m[s[14] as usize], m[s[15] as usize]);
   44|   570k|}
_RNvNtCsaHbZzw2FCN1_12blake2b_simd8portable14compress_block:
   47|  47.5k|fn compress_block(
   48|  47.5k|    block: &[u8; BLOCKBYTES],
   49|  47.5k|    words: &mut [Word; 8],
   50|  47.5k|    count: Count,
   51|  47.5k|    last_block: Word,
   52|  47.5k|    last_node: Word,
   53|  47.5k|) {
   54|  47.5k|    // Initialize the compression state.
   55|  47.5k|    let mut v = [
   56|  47.5k|        words[0],
   57|  47.5k|        words[1],
   58|  47.5k|        words[2],
   59|  47.5k|        words[3],
   60|  47.5k|        words[4],
   61|  47.5k|        words[5],
   62|  47.5k|        words[6],
   63|  47.5k|        words[7],
   64|  47.5k|        IV[0],
   65|  47.5k|        IV[1],
   66|  47.5k|        IV[2],
   67|  47.5k|        IV[3],
   68|  47.5k|        IV[4] ^ count_low(count),
   69|  47.5k|        IV[5] ^ count_high(count),
   70|  47.5k|        IV[6] ^ last_block,
   71|  47.5k|        IV[7] ^ last_node,
   72|  47.5k|    ];
   73|  47.5k|
   74|  47.5k|    // Parse the message bytes as ints in little endian order.
   75|  47.5k|    const W: usize = size_of::<Word>();
   76|  47.5k|    let msg_refs = array_refs!(block, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W);
   77|  47.5k|    let m = [
   78|  47.5k|        Word::from_le_bytes(*msg_refs.0),
   79|  47.5k|        Word::from_le_bytes(*msg_refs.1),
   80|  47.5k|        Word::from_le_bytes(*msg_refs.2),
   81|  47.5k|        Word::from_le_bytes(*msg_refs.3),
   82|  47.5k|        Word::from_le_bytes(*msg_refs.4),
   83|  47.5k|        Word::from_le_bytes(*msg_refs.5),
   84|  47.5k|        Word::from_le_bytes(*msg_refs.6),
   85|  47.5k|        Word::from_le_bytes(*msg_refs.7),
   86|  47.5k|        Word::from_le_bytes(*msg_refs.8),
   87|  47.5k|        Word::from_le_bytes(*msg_refs.9),
   88|  47.5k|        Word::from_le_bytes(*msg_refs.10),
   89|  47.5k|        Word::from_le_bytes(*msg_refs.11),
   90|  47.5k|        Word::from_le_bytes(*msg_refs.12),
   91|  47.5k|        Word::from_le_bytes(*msg_refs.13),
   92|  47.5k|        Word::from_le_bytes(*msg_refs.14),
   93|  47.5k|        Word::from_le_bytes(*msg_refs.15),
   94|  47.5k|    ];
   95|  47.5k|
   96|  47.5k|    round(0, &m, &mut v);
   97|  47.5k|    round(1, &m, &mut v);
   98|  47.5k|    round(2, &m, &mut v);
   99|  47.5k|    round(3, &m, &mut v);
  100|  47.5k|    round(4, &m, &mut v);
  101|  47.5k|    round(5, &m, &mut v);
  102|  47.5k|    round(6, &m, &mut v);
  103|  47.5k|    round(7, &m, &mut v);
  104|  47.5k|    round(8, &m, &mut v);
  105|  47.5k|    round(9, &m, &mut v);
  106|  47.5k|    round(10, &m, &mut v);
  107|  47.5k|    round(11, &m, &mut v);
  108|  47.5k|
  109|  47.5k|    words[0] ^= v[0] ^ v[8];
  110|  47.5k|    words[1] ^= v[1] ^ v[9];
  111|  47.5k|    words[2] ^= v[2] ^ v[10];
  112|  47.5k|    words[3] ^= v[3] ^ v[11];
  113|  47.5k|    words[4] ^= v[4] ^ v[12];
  114|  47.5k|    words[5] ^= v[5] ^ v[13];
  115|  47.5k|    words[6] ^= v[6] ^ v[14];
  116|  47.5k|    words[7] ^= v[7] ^ v[15];
  117|  47.5k|}
_RNvNtCsaHbZzw2FCN1_12blake2b_simd8portable14compress1_loop:
  119|  46.0k|pub fn compress1_loop(
  120|  46.0k|    input: &[u8],
  121|  46.0k|    words: &mut [Word; 8],
  122|  46.0k|    mut count: Count,
  123|  46.0k|    last_node: LastNode,
  124|  46.0k|    finalize: Finalize,
  125|  46.0k|    stride: Stride,
  126|  46.0k|) {
  127|  46.0k|    input_debug_asserts(input, finalize);
  128|  46.0k|
  129|  46.0k|    let mut local_words = *words;
  130|  46.0k|
  131|  46.0k|    let mut fin_offset = input.len().saturating_sub(1);
  132|  46.0k|    fin_offset -= fin_offset % stride.padded_blockbytes();
  133|  46.0k|    let mut buf = [0; BLOCKBYTES];
  134|  46.0k|    let (fin_block, fin_len, _) = final_block(input, fin_offset, &mut buf, stride);
  135|  46.0k|    let fin_last_block = flag_word(finalize.yes());
  136|  46.0k|    let fin_last_node = flag_word(finalize.yes() && last_node.yes());
  137|       |
  138|  46.0k|    let mut offset = 0;
  139|       |    loop {
  140|       |        let block;
  141|       |        let count_delta;
  142|       |        let last_block;
  143|       |        let last_node;
  144|  47.5k|        if offset == fin_offset {
  145|  46.0k|            block = fin_block;
  146|  46.0k|            count_delta = fin_len;
  147|  46.0k|            last_block = fin_last_block;
  148|  46.0k|            last_node = fin_last_node;
  149|  46.0k|        } else {
  150|  1.52k|            block = array_ref!(input, offset, BLOCKBYTES);
  151|  1.52k|            count_delta = BLOCKBYTES;
  152|  1.52k|            last_block = flag_word(false);
  153|  1.52k|            last_node = flag_word(false);
  154|  1.52k|        };
  155|       |
  156|  47.5k|        count = count.wrapping_add(count_delta as Count);
  157|  47.5k|        compress_block(block, &mut local_words, count, last_block, last_node);
  158|  47.5k|
  159|  47.5k|        // Check for termination before bumping the offset, to avoid overflow.
  160|  47.5k|        if offset == fin_offset {
  161|  46.0k|            break;
  162|  1.52k|        }
  163|  1.52k|
  164|  1.52k|        offset += stride.padded_blockbytes();
  165|       |    }
  166|       |
  167|  46.0k|    *words = local_words;
  168|  46.0k|}
_RNvNtCsaHbZzw2FCN1_12blake2b_simd8portable1g:
   15|  4.56M|fn g(v: &mut [Word; 16], a: usize, b: usize, c: usize, d: usize, x: Word, y: Word) {
   16|  4.56M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(x);
   17|  4.56M|    v[d] = (v[d] ^ v[a]).rotate_right(32);
   18|  4.56M|    v[c] = v[c].wrapping_add(v[d]);
   19|  4.56M|    v[b] = (v[b] ^ v[c]).rotate_right(24);
   20|  4.56M|    v[a] = v[a].wrapping_add(v[b]).wrapping_add(y);
   21|  4.56M|    v[d] = (v[d] ^ v[a]).rotate_right(16);
   22|  4.56M|    v[c] = v[c].wrapping_add(v[d]);
   23|  4.56M|    v[b] = (v[b] ^ v[c]).rotate_right(63);
   24|  4.56M|}

_RNvXs0_CsdbHFGlfIxTf_9byteorderNtB5_9BigEndianNtB5_9ByteOrder9write_u64CsdKADRZ4phoq_6simple:
 2032|   175k|    fn write_u64(buf: &mut [u8], n: u64) {
 2033|   175k|        unsafe_write_num_bytes!(u64, 8, n, buf, to_be);
 2034|   175k|    }

_RINvXs9_NtNtCsc2QbebHUrwz_7cbor4ii4core3encReNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
  228|  92.1k|        TypeNum::new(major::STRING << 5, self.len() as u64).encode(writer)?;
  229|  92.1k|        writer.push(self.as_bytes())?;
  230|  92.1k|        Ok(())
  231|  92.1k|    }
_RNvMs0_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB5_7TypeNumyE3newCsdKADRZ4phoq_6simple:
   52|   697k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   697k|        TypeNum { type_, value }
   54|   697k|    }
_RINvXsd_NtNtCsc2QbebHUrwz_7cbor4ii4core3encNtB6_17ArrayStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
  270|   226k|        TypeNum::new(major::ARRAY << 5, self.0 as u64).encode(writer)?;
  271|   226k|        Ok(())
  272|   226k|    }
_RINvXs2_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB6_7TypeNumtENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
   70|   669k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   71|   669k|        match u8::try_from(self.value) {
   72|   667k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   73|       |            Err(_) => {
   74|  2.20k|                let [x0, x1] = self.value.to_be_bytes();
   75|  2.20k|                writer.push(&[self.type_ | 0x19, x0, x1])?
   76|       |            }
   77|       |        }
   78|   669k|        Ok(())
   79|   669k|    }
_RINvXs3_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB6_7TypeNummENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
   84|   674k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   85|   674k|        match u16::try_from(self.value) {
   86|   669k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
   87|       |            Err(_) =>{
   88|  5.27k|                let [x0, x1, x2, x3] = self.value.to_be_bytes();
   89|  5.27k|                writer.push(&[self.type_ | 0x1a, x0, x1, x2, x3])?;
   90|       |            }
   91|       |        }
   92|   674k|        Ok(())
   93|   674k|    }
_RINvXst_NtNtCsc2QbebHUrwz_7cbor4ii4core3encmNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
  159|  50.1k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|  50.1k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|  50.1k|                }
_RINvXsu_NtNtCsc2QbebHUrwz_7cbor4ii4core3encyNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
  159|  92.7k|                fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
  160|  92.7k|                    TypeNum::new(major::UNSIGNED << 5, *self).encode(writer)
  161|  92.7k|                }
_RNvMs0_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB5_7TypeNummE3newCsdKADRZ4phoq_6simple:
   52|   674k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   674k|        TypeNum { type_, value }
   54|   674k|    }
_RNvMs0_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB5_7TypeNumtE3newCsdKADRZ4phoq_6simple:
   52|   669k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   669k|        TypeNum { type_, value }
   54|   669k|    }
_RNvMs0_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB5_7TypeNumhE3newCsdKADRZ4phoq_6simple:
   52|   667k|    const fn new(type_: u8, value: V) -> TypeNum<V> {
   53|   667k|        TypeNum { type_, value }
   54|   667k|    }
_RINvXs1_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB6_7TypeNumhENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
   59|   667k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   60|   667k|        match self.value {
   61|   667k|            x @ 0x00 ..= 0x17 => writer.push(&[self.type_ | x])?,
   62|   105k|            x => writer.push(&[self.type_ | 0x18, x])?
   63|       |        }
   64|   667k|        Ok(())
   65|   667k|    }
_RINvXsg_NtNtCsc2QbebHUrwz_7cbor4ii4core3encNtB6_15MapStartBoundedNtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
  301|  92.1k|        TypeNum::new(major::MAP << 5, self.0 as u64).encode(writer)?;
  302|  92.1k|        Ok(())
  303|  92.1k|    }
_RINvXsi_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtNtB8_5types3TagINtBI_5BytesRShEENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
  317|  50.1k|        TypeNum::new(major::TAG << 5, self.0).encode(writer)?;
  318|  50.1k|        self.1.encode(writer)
  319|  50.1k|    }
_RINvXs7_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtNtB8_5types5BytesRShENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
  209|   144k|        TypeNum::new(major::BYTES << 5, self.0.len() as u64).encode(writer)?;
  210|   144k|        writer.push(self.0)?;
  211|   144k|        Ok(())
  212|   144k|    }
_RINvXs4_NtNtCsc2QbebHUrwz_7cbor4ii4core3encINtB6_7TypeNumyENtB6_6Encode6encodeNtNtB8_5utils9BufWriterECsdKADRZ4phoq_6simple:
   98|   697k|    fn encode<W: Write>(&self, writer: &mut W) -> Result<(), Error<W::Error>> {
   99|   697k|        match u32::try_from(self.value) {
  100|   624k|            Ok(x) => TypeNum::new(self.type_, x).encode(writer)?,
  101|       |            Err(_) => {
  102|  73.2k|                let [x0, x1, x2, x3, x4, x5, x6, x7] = self.value.to_be_bytes();
  103|  73.2k|                writer.push(&[self.type_ | 0x1b, x0, x1, x2, x3, x4, x5, x6, x7])?;
  104|       |            }
  105|       |        }
  106|   697k|        Ok(())
  107|   697k|    }

_RNvXs_NtNtCsc2QbebHUrwz_7cbor4ii4core5utilsNtB4_9BufWriterNtNtB6_3enc5Write4pushCsdKADRZ4phoq_6simple:
   40|   984k|        self.0.try_reserve(input.len())?;
   41|   984k|        self.0.extend_from_slice(input);
   42|   984k|        Ok(())
   43|   984k|    }
_RNvMNtNtCsc2QbebHUrwz_7cbor4ii4core5utilsNtB2_9BufWriter10into_inner:
   24|  43.9k|    pub fn into_inner(self) -> Vec<u8> {
   25|  43.9k|        self.0
   26|  43.9k|    }
_RNvMNtNtCsc2QbebHUrwz_7cbor4ii4core5utilsNtB2_9BufWriter3new:
   14|  43.9k|    pub fn new(buf: Vec<u8>) -> Self {
   15|  43.9k|       BufWriter(buf)
   16|  43.9k|    }

_RNvMNtCseXDvg1ZXkc2_3cid3cidINtB2_3CidKj40_E8to_bytesCsdKADRZ4phoq_6simple:
  205|  50.1k|    pub fn to_bytes(&self) -> Vec<u8> {
  206|  50.1k|        let mut bytes = Vec::new();
  207|  50.1k|        let written = self.write_bytes(&mut bytes).unwrap();
  208|  50.1k|        debug_assert_eq!(written, bytes.len());
  209|  50.1k|        bytes
  210|  50.1k|    }
_RINvMNtCseXDvg1ZXkc2_3cid3cidINtB3_3CidKj40_E14write_bytes_v1QINtNtCs4fiSK8q0usK_5alloc3vec3VechEECsdKADRZ4phoq_6simple:
  162|  50.1k|    fn write_bytes_v1<W: io::Write>(&self, mut w: W) -> Result<usize> {
  163|  50.1k|        let mut version_buf = varint_encode::u64_buffer();
  164|  50.1k|        let version = varint_encode::u64(self.version.into(), &mut version_buf);
  165|  50.1k|
  166|  50.1k|        let mut codec_buf = varint_encode::u64_buffer();
  167|  50.1k|        let codec = varint_encode::u64(self.codec, &mut codec_buf);
  168|  50.1k|
  169|  50.1k|        let mut written = version.len() + codec.len();
  170|  50.1k|
  171|  50.1k|        w.write_all(version)?;
  172|  50.1k|        w.write_all(codec)?;
  173|  50.1k|        written += self.hash.write(&mut w)?;
  174|       |
  175|  50.1k|        Ok(written)
  176|  50.1k|    }
_RNvMNtCseXDvg1ZXkc2_3cid3cidINtB2_3CidKj40_E6new_v1CsdKADRZ4phoq_6simple:
   90|  43.9k|    pub const fn new_v1(codec: u64, hash: Multihash<S>) -> Self {
   91|  43.9k|        Self {
   92|  43.9k|            version: Version::V1,
   93|  43.9k|            codec,
   94|  43.9k|            hash,
   95|  43.9k|        }
   96|  43.9k|    }
_RINvMNtCseXDvg1ZXkc2_3cid3cidINtB3_3CidKj40_E11write_bytesQINtNtCs4fiSK8q0usK_5alloc3vec3VechEECsdKADRZ4phoq_6simple:
  179|  50.1k|    pub fn write_bytes<W: io::Write>(&self, w: W) -> Result<usize> {
  180|  50.1k|        let written = match self.version {
  181|      0|            Version::V0 => self.hash.write(w)?,
  182|  50.1k|            Version::V1 => self.write_bytes_v1(w)?,
  183|       |        };
  184|  50.1k|        Ok(written)
  185|  50.1k|    }
_RINvXsk_NtCseXDvg1ZXkc2_3cid3cidINtB6_3CidKj40_ENtNtCshIAt2fZ6DPf_4core4hash4Hash4hashNtNtNtNtCsh0wwElwy96v_3std11collections4hash3map13DefaultHasherECseMY6HJzIUz9_19fvm_ipld_blockstore:
   64|   100k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]
_RNvXse_NtCseXDvg1ZXkc2_3cid3cidINtB5_3CidKj40_ENtNtCshIAt2fZ6DPf_4core3cmp9PartialEq2eqCseMY6HJzIUz9_19fvm_ipld_blockstore:
   64|  6.01k|#[derive(Copy, PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]

_RINvXNtCseXDvg1ZXkc2_3cid5serdeINtNtB5_3cid3CidKj40_ENtNtCskJYdaI9Vvso_5serde3ser9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   29|  50.1k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   30|  50.1k|    where
   31|  50.1k|        S: ser::Serializer,
   32|  50.1k|    {
   33|  50.1k|        let value = ByteBuf::from(self.to_bytes());
   34|  50.1k|        serializer.serialize_newtype_struct(CID_SERDE_PRIVATE_IDENTIFIER, &value)
   35|  50.1k|    }

_RINvXsa_NtCseXDvg1ZXkc2_3cid7versionNtB6_7VersionNtNtCshIAt2fZ6DPf_4core4hash4Hash4hashNtNtNtNtCsh0wwElwy96v_3std11collections4hash3map13DefaultHasherECseMY6HJzIUz9_19fvm_ipld_blockstore:
    6|   100k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs2_NtCseXDvg1ZXkc2_3cid7versionNtB5_7VersionNtNtCshIAt2fZ6DPf_4core3cmp9PartialEq2eqCseMY6HJzIUz9_19fvm_ipld_blockstore:
    6|  6.01k|#[derive(PartialEq, Eq, PartialOrd, Ord, Clone, Copy, Debug, Hash)]
_RNvXs0_NtCseXDvg1ZXkc2_3cid7versionyINtNtCshIAt2fZ6DPf_4core7convert4FromNtB5_7VersionE4from:
   44|  50.1k|    fn from(ver: Version) -> u64 {
   45|  50.1k|        match ver {
   46|      0|            Version::V0 => 0,
   47|  50.1k|            Version::V1 => 1,
   48|       |        }
   49|  50.1k|    }

_RINvXsb_Cs5tjTGpUF2JX_17forest_hash_utilsyNtB6_4Hash4hashNtNtCsbfz4AvxjbsN_13fvm_ipld_kamt2id14IdentityHasherEBX_:
   27|  38.7k|            fn hash<H: Hasher>(&self, state: &mut H) {
   28|  38.7k|                state.$meth(*self)
   29|  38.7k|            }
_RINvXs4_Cs5tjTGpUF2JX_17forest_hash_utilsRyNtB6_4Hash4hashNtNtCsbfz4AvxjbsN_13fvm_ipld_kamt2id14IdentityHasherEBY_:
  129|  38.7k|    fn hash<H: Hasher>(&self, state: &mut H) {
  130|  38.7k|        (**self).hash(state);
  131|  38.7k|    }

_RNvCsalXeJFv5UpG_9getrandom9getrandomCskn3PThRdvIh_5ahash:
  313|      1|    getrandom_uninit(unsafe { slice_as_uninit_mut(dest) })?;
  314|      1|    Ok(())
  315|      1|}
_RNvCsalXeJFv5UpG_9getrandom16getrandom_uninitCskn3PThRdvIh_5ahash:
  339|      1|pub fn getrandom_uninit(dest: &mut [MaybeUninit<u8>]) -> Result<&mut [u8], Error> {
  340|      1|    if !dest.is_empty() {
  341|      1|        imp::getrandom_inner(dest)?;
  342|      0|    }
  343|       |    // SAFETY: `dest` has been fully initialized by `imp::getrandom_inner`
  344|       |    // since it returned `Ok`.
  345|      1|    Ok(unsafe { slice_assume_init_mut(dest) })
  346|      1|}

_RNvNtCsalXeJFv5UpG_9getrandom3imp22is_getrandom_available:
   29|      1|fn is_getrandom_available() -> bool {
   30|      1|    let res = unsafe { getrandom(core::ptr::null_mut(), 0, libc::GRND_NONBLOCK) };
   31|      1|    if res < 0 {
   32|      0|        match last_os_error().raw_os_error() {
   33|      0|            Some(libc::ENOSYS) => false, // No kernel support
   34|      0|            Some(libc::EPERM) => false,  // Blocked by seccomp
   35|      0|            _ => true,
   36|       |        }
   37|       |    } else {
   38|      1|        true
   39|       |    }
   40|      1|}
_RNvNtCsalXeJFv5UpG_9getrandom3imp9getrandom:
   42|      2|unsafe fn getrandom(
   43|      2|    buf: *mut libc::c_void,
   44|      2|    buflen: libc::size_t,
   45|      2|    flags: libc::c_uint,
   46|      2|) -> libc::ssize_t {
   47|      2|    libc::syscall(libc::SYS_getrandom, buf, buflen, flags) as libc::ssize_t
   48|      2|}
_RNCNvNtCsalXeJFv5UpG_9getrandom3imp15getrandom_inner0B5_:
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|      1|            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
_RNvNtCsalXeJFv5UpG_9getrandom3imp15getrandom_inner:
   17|      1|pub fn getrandom_inner(dest: &mut [MaybeUninit<u8>]) -> Result<(), Error> {
   18|      1|    // getrandom(2) was introduced in Linux 3.17
   19|      1|    static HAS_GETRANDOM: LazyBool = LazyBool::new();
   20|      1|    if HAS_GETRANDOM.unsync_init(is_getrandom_available) {
   21|      1|        sys_fill_exact(dest, |buf| unsafe {
   22|       |            getrandom(buf.as_mut_ptr() as *mut libc::c_void, buf.len(), 0)
   23|      1|        })
   24|       |    } else {
   25|      0|        use_file::getrandom_inner(dest)
   26|       |    }
   27|      1|}

_RINvNtCsalXeJFv5UpG_9getrandom4util21slice_assume_init_muthECskn3PThRdvIh_5ahash:
   74|      1|pub unsafe fn slice_assume_init_mut<T>(slice: &mut [MaybeUninit<T>]) -> &mut [T] {
   75|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
   76|      1|    &mut *(slice as *mut [MaybeUninit<T>] as *mut [T])
   77|      1|}
_RINvNtCsalXeJFv5UpG_9getrandom4util19slice_as_uninit_muthECskn3PThRdvIh_5ahash:
   98|      1|pub unsafe fn slice_as_uninit_mut<T>(slice: &mut [T]) -> &mut [MaybeUninit<T>] {
   99|      1|    // SAFETY: `MaybeUninit<T>` is guaranteed to be layout-compatible with `T`.
  100|      1|    &mut *(slice as *mut [T] as *mut [MaybeUninit<T>])
  101|      1|}
_RINvMNtCsalXeJFv5UpG_9getrandom4utilNtB3_9LazyUsize11unsync_initNCINvMs_B3_NtB3_8LazyBool11unsync_initNvNtB5_3imp22is_getrandom_availableE0EB5_:
   46|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> usize) -> usize {
   47|      1|        // Relaxed ordering is fine, as we only have a single atomic variable.
   48|      1|        let mut val = self.0.load(Relaxed);
   49|      1|        if val == Self::UNINIT {
   50|      1|            val = init();
   51|      1|            self.0.store(val, Relaxed);
   52|      1|        }
   53|      1|        val
   54|      1|    }
_RINvMs_NtCsalXeJFv5UpG_9getrandom4utilNtB5_8LazyBool11unsync_initNvNtB7_3imp22is_getrandom_availableEB7_:
   65|      1|    pub fn unsync_init(&self, init: impl FnOnce() -> bool) -> bool {
   66|      1|        self.0.unsync_init(|| init() as usize) != 0
   67|      1|    }
_RNCINvMs_NtCsalXeJFv5UpG_9getrandom4utilNtB7_8LazyBool11unsync_initNvNtB9_3imp22is_getrandom_availableE0B9_:
   66|      1|        self.0.unsync_init(|| init() as usize) != 0

_RINvNtCsalXeJFv5UpG_9getrandom9util_libc14sys_fill_exactNCNvNtB4_3imp15getrandom_inner0EB4_:
   67|      1|pub fn sys_fill_exact(
   68|      1|    mut buf: &mut [MaybeUninit<u8>],
   69|      1|    sys_fill: impl Fn(&mut [MaybeUninit<u8>]) -> libc::ssize_t,
   70|      1|) -> Result<(), Error> {
   71|      2|    while !buf.is_empty() {
   72|      1|        let res = sys_fill(buf);
   73|      1|        if res < 0 {
   74|      0|            let err = last_os_error();
   75|      0|            // We should try again if the call was interrupted.
   76|      0|            if err.raw_os_error() != Some(libc::EINTR) {
   77|      0|                return Err(err);
   78|      0|            }
   79|      1|        } else {
   80|      1|            // We don't check for EOF (ret = 0) as the data we are reading
   81|      1|            // should be an infinite stream of random bytes.
   82|      1|            let len = min(res as usize, buf.len());
   83|      1|            buf = &mut buf[len..];
   84|      1|        }
   85|       |    }
   86|      1|    Ok(())
   87|      1|}

rust_fuzzer_test_input:
  259|    786|            pub extern "C" fn rust_fuzzer_test_input(bytes: &[u8]) -> i32 {
  260|    786|                use $crate::arbitrary::{Arbitrary, Unstructured};
  261|    786|
  262|    786|                // Early exit if we don't have enough bytes for the `Arbitrary`
  263|    786|                // implementation. This helps the fuzzer avoid exploring all the
  264|    786|                // different not-enough-input-bytes paths inside the `Arbitrary`
  265|    786|                // implementation. Additionally, it exits faster, letting the fuzzer
  266|    786|                // get to longer inputs that actually lead to interesting executions
  267|    786|                // quicker.
  268|    786|                if bytes.len() < <$dty as Arbitrary>::size_hint(0).0 {
  269|      1|                    return -1;
  270|    785|                }
  271|    785|
  272|    785|                let mut u = Unstructured::new(bytes);
  273|    785|                let data = <$dty as Arbitrary>::arbitrary_take_rest(u);
  274|       |
  275|       |                // When `RUST_LIBFUZZER_DEBUG_PATH` is set, write the debug
  276|       |                // formatting of the input to that file. This is only intended for
  277|       |                // `cargo fuzz`'s use!
  278|       |
  279|       |                // `RUST_LIBFUZZER_DEBUG_PATH` is set in initialization.
  280|    785|                if let Some(path) = $crate::RUST_LIBFUZZER_DEBUG_PATH.get() {
  281|       |                    use std::io::Write;
  282|      0|                    let mut file = std::fs::File::create(path)
  283|      0|                        .expect("failed to create `RUST_LIBFUZZER_DEBUG_PATH` file");
  284|      0|                    (match data {
  285|      0|                        Ok(data) => writeln!(&mut file, "{:#?}", data),
  286|      0|                        Err(err) => writeln!(&mut file, "Arbitrary Error: {}", err),
  287|       |                    })
  288|      0|                    .expect("failed to write to `RUST_LIBFUZZER_DEBUG_PATH` file");
  289|      0|                    return -1;
  290|    785|                }
  291|       |
  292|    785|                let data = match data {
  293|    785|                    Ok(d) => d,
  294|      0|                    Err(_) => return -1,
  295|       |                };
  296|       |
  297|    785|                let result = ::libfuzzer_sys::Corpus::from(__libfuzzer_sys_run(data));
  298|    785|                result.to_libfuzzer_code()
  299|    786|            }
_RNvNvCsdKADRZ4phoq_6simple1__19___libfuzzer_sys_run:
  303|    785|            fn __libfuzzer_sys_run($data: $dty) -> $rty {
  304|    785|                $body
  305|    785|            }
_RNvXCsaraa1MN5BaO_13libfuzzer_sysNtB2_6CorpusINtNtCshIAt2fZ6DPf_4core7convert4FromuE4from:
   30|    785|    fn from(_: ()) -> Self {
   31|    785|        Self::Keep
   32|    785|    }
LLVMFuzzerTestOneInput:
   58|    786|pub fn test_input_wrap(data: *const u8, size: usize) -> i32 {
   59|    786|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|       |        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|       |        rust_fuzzer_test_input(data_slice)
   62|    786|    });
   63|    786|
   64|    786|    match test_input {
   65|    786|        Ok(i) => i,
   66|       |        Err(_) => {
   67|       |            // hopefully the custom panic hook will be called before and abort the
   68|       |            // process before the stack frames are unwinded.
   69|      0|            ::std::process::abort();
   70|       |        }
   71|       |    }
   72|    786|}
_RNCNvCsaraa1MN5BaO_13libfuzzer_sys15test_input_wrap0B3_:
   59|    786|    let test_input = ::std::panic::catch_unwind(|| unsafe {
   60|    786|        let data_slice = ::std::slice::from_raw_parts(data, size);
   61|    786|        rust_fuzzer_test_input(data_slice)
   62|    786|    });
_RNvMs_Csaraa1MN5BaO_13libfuzzer_sysNtB4_6Corpus17to_libfuzzer_code:
   40|    785|    pub fn to_libfuzzer_code(self) -> i32 {
   41|    785|        match self {
   42|    785|            Corpus::Keep => 0,
   43|      0|            Corpus::Reject => -1,
   44|       |        }
   45|    785|    }
LLVMFuzzerInitialize:
   79|      2|pub fn initialize(_argc: *const isize, _argv: *const *const *const u8) -> isize {
   80|      2|    // Registers a panic hook that aborts the process before unwinding.
   81|      2|    // It is useful to abort before unwinding so that the fuzzer will then be
   82|      2|    // able to analyse the process stack frames to tell different bugs appart.
   83|      2|    //
   84|      2|    // HACK / FIXME: it would be better to use `-C panic=abort` but it's currently
   85|      2|    // impossible to build code using compiler plugins with this flag.
   86|      2|    // We will be able to remove this code when
   87|      2|    // https://github.com/rust-lang/cargo/issues/5423 is fixed.
   88|      2|    let default_hook = ::std::panic::take_hook();
   89|      2|    ::std::panic::set_hook(Box::new(move |panic_info| {
   90|       |        default_hook(panic_info);
   91|       |        ::std::process::abort();
   92|      2|    }));
   93|       |
   94|       |    // Initialize the `RUST_LIBFUZZER_DEBUG_PATH` cell with the path so it can be
   95|       |    // reused with little overhead.
   96|      2|    if let Ok(path) = std::env::var("RUST_LIBFUZZER_DEBUG_PATH") {
   97|      0|        RUST_LIBFUZZER_DEBUG_PATH
   98|      0|            .set(path)
   99|      0|            .expect("Since this is initialize it is only called once so can never fail");
  100|      2|    }
  101|      2|    0
  102|      2|}

_RNvXs_NtNtCs2zC7gxbXiq6_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher6updateB8_:
   46|  43.9k|            fn update(&mut self, input: &[u8]) {
   47|  43.9k|                self.state.update(input);
   48|  43.9k|            }
_RNvXNtNtCs2zC7gxbXiq6_9multihash11hasher_impl7blake2bINtB2_13Blake2bHasherKj20_ENtNtCshIAt2fZ6DPf_4core7default7Default7defaultB6_:
   35|  43.9k|            fn default() -> Self {
   36|  43.9k|                let mut params = $module::Params::new();
   37|  43.9k|                params.hash_length(S);
   38|  43.9k|                Self {
   39|  43.9k|                    state: params.to_state(),
   40|  43.9k|                    digest: [0; S],
   41|  43.9k|                }
   42|  43.9k|            }
_RNvXs_NtNtCs2zC7gxbXiq6_9multihash11hasher_impl7blake2bINtB4_13Blake2bHasherKj20_ENtNtB8_6hasher6Hasher8finalizeB8_:
   50|  43.9k|            fn finalize(&mut self) -> &[u8] {
   51|  43.9k|                let digest = self.state.finalize();
   52|  43.9k|                let digest_bytes = digest.as_bytes();
   53|  43.9k|                let digest_out = &mut self.digest[..digest_bytes.len().max(S)];
   54|  43.9k|                digest_out.copy_from_slice(digest_bytes);
   55|  43.9k|                digest_out
   56|  43.9k|            }

_RNvMs_NtCs2zC7gxbXiq6_9multihash9multihashINtB4_9MultihashKj40_E4codeCsdKADRZ4phoq_6simple:
  120|  50.1k|    pub const fn code(&self) -> u64 {
  121|  50.1k|        self.code
  122|  50.1k|    }
_RNvMs_NtCs2zC7gxbXiq6_9multihash9multihashINtB4_9MultihashKj40_E6digestCsdKADRZ4phoq_6simple:
  130|  50.1k|    pub fn digest(&self) -> &[u8] {
  131|  50.1k|        &self.digest[..self.size as usize]
  132|  50.1k|    }
_RNvMs_NtCs2zC7gxbXiq6_9multihash9multihashINtB4_9MultihashKj40_E4sizeCsdKADRZ4phoq_6simple:
  125|  50.1k|    pub const fn size(&self) -> u8 {
  126|  50.1k|        self.size
  127|  50.1k|    }
_RINvNtCs2zC7gxbXiq6_9multihash9multihash15write_multihashQQINtNtCs4fiSK8q0usK_5alloc3vec3VechEECsdKADRZ4phoq_6simple:
  310|  50.1k|pub fn write_multihash<W>(mut w: W, code: u64, size: u8, digest: &[u8]) -> Result<usize, Error>
  311|  50.1k|where
  312|  50.1k|    W: io::Write,
  313|  50.1k|{
  314|  50.1k|    let mut code_buf = varint_encode::u64_buffer();
  315|  50.1k|    let code = varint_encode::u64(code, &mut code_buf);
  316|  50.1k|
  317|  50.1k|    let mut size_buf = varint_encode::u8_buffer();
  318|  50.1k|    let size = varint_encode::u8(size, &mut size_buf);
  319|  50.1k|
  320|  50.1k|    let written = code.len() + size.len() + digest.len();
  321|  50.1k|
  322|  50.1k|    w.write_all(code)?;
  323|  50.1k|    w.write_all(size)?;
  324|  50.1k|    w.write_all(digest)?;
  325|       |
  326|  50.1k|    Ok(written)
  327|  50.1k|}
_RINvMs_NtCs2zC7gxbXiq6_9multihash9multihashINtB5_9MultihashKj40_E5writeQQINtNtCs4fiSK8q0usK_5alloc3vec3VechEECsdKADRZ4phoq_6simple:
  163|  50.1k|    pub fn write<W: io::Write>(&self, w: W) -> Result<usize, Error> {
  164|  50.1k|        write_multihash(w, self.code(), self.size(), self.digest())
  165|  50.1k|    }
_RNvMs_NtCs2zC7gxbXiq6_9multihash9multihashINtB4_9MultihashKj40_E6digestCseMY6HJzIUz9_19fvm_ipld_blockstore:
  130|   112k|    pub fn digest(&self) -> &[u8] {
  131|   112k|        &self.digest[..self.size as usize]
  132|   112k|    }
_RINvXs0_NtCs2zC7gxbXiq6_9multihash9multihashINtB6_9MultihashKj40_ENtNtCshIAt2fZ6DPf_4core4hash4Hash4hashNtNtNtNtCsh0wwElwy96v_3std11collections4hash3map13DefaultHasherECseMY6HJzIUz9_19fvm_ipld_blockstore:
  253|   100k|    fn hash<T: core::hash::Hasher>(&self, state: &mut T) {
  254|   100k|        self.code.hash(state);
  255|   100k|        self.digest().hash(state);
  256|   100k|    }
_RNvXs2_NtCs2zC7gxbXiq6_9multihash9multihashINtB5_9MultihashKj40_ENtNtCshIAt2fZ6DPf_4core3cmp9PartialEq2eqCseMY6HJzIUz9_19fvm_ipld_blockstore:
  267|  6.01k|    fn eq(&self, other: &Multihash<B>) -> bool {
  268|  6.01k|        // NOTE: there's no need to explicitly check the sizes, that's implicit in the digest.
  269|  6.01k|        self.code == other.code && self.digest() == other.digest()
  270|  6.01k|    }
_RNvMs_NtCs2zC7gxbXiq6_9multihash9multihashINtB4_9MultihashKj40_E4wrapB6_:
  101|  43.9k|    pub const fn wrap(code: u64, input_digest: &[u8]) -> Result<Self, Error> {
  102|  43.9k|        if input_digest.len() > S {
  103|      0|            return Err(Error::InvalidSize(input_digest.len() as _));
  104|  43.9k|        }
  105|  43.9k|        let size = input_digest.len();
  106|  43.9k|        let mut digest = [0; S];
  107|  43.9k|        let mut i = 0;
  108|  1.44M|        while i < size {
  109|  1.40M|            digest[i] = input_digest[i];
  110|  1.40M|            i += 1;
  111|  1.40M|        }
  112|  43.9k|        Ok(Self {
  113|  43.9k|            code,
  114|  43.9k|            size: size as u8,
  115|  43.9k|            digest,
  116|  43.9k|        })
  117|  43.9k|    }

_RNvXs3_NtCs2zC7gxbXiq6_9multihash14multihash_implNtB5_4CodeINtNtB7_9multihash15MultihashDigestKj40_E6digest:
   11|  43.9k|#[derive(Copy, Clone, Debug, Eq, Multihash, PartialEq)]

_RNvMs2_NtCs8rEvoWP4aQ0_9once_cell3impINtB5_8OnceCellNtNtCs4fiSK8q0usK_5alloc6string6StringE14is_initializedCsdKADRZ4phoq_6simple:
   49|    785|    pub(crate) fn is_initialized(&self) -> bool {
   50|    785|        // An `Acquire` load is enough because that makes all the initialization
   51|    785|        // operations visible to us, and, this being a fast path, weaker
   52|    785|        // ordering helps with performance. This `Acquire` synchronizes with
   53|    785|        // `SeqCst` operations on the slow path.
   54|    785|        self.queue.load(Ordering::Acquire) == COMPLETE_PTR
   55|    785|    }

_RNvXs0_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB5_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1v_2id8IdentityKj20_EEENtNtCshIAt2fZ6DPf_4core7default7Default7defaultCsdKADRZ4phoq_6simple:
  426|  1.97k|        fn default() -> Self {
  427|  1.97k|            Self::new()
  428|  1.97k|        }
_RNvMs6_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB5_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1v_2id8IdentityKj20_EEE3getCsdKADRZ4phoq_6simple:
  485|  42.4k|        pub fn get(&self) -> Option<&T> {
  486|  42.4k|            // Safe due to `inner`'s invariant of being written to at most once.
  487|  42.4k|            // Had multiple writes to `inner` been allowed, a reference to the
  488|  42.4k|            // value we return now would become dangling by a write of a
  489|  42.4k|            // different value later.
  490|  42.4k|            unsafe { &*self.inner.get() }.as_ref()
  491|  42.4k|        }
_RNvMs6_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB5_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1v_2id8IdentityKj20_EEE3newCsdKADRZ4phoq_6simple:
  472|  1.97k|        pub const fn new() -> OnceCell<T> {
  473|  1.97k|            OnceCell { inner: UnsafeCell::new(None) }
  474|  1.97k|        }
_RNvMs4_NtCs8rEvoWP4aQ0_9once_cell4syncINtB5_8OnceCellNtNtCs4fiSK8q0usK_5alloc6string6StringE3getCsdKADRZ4phoq_6simple:
  965|    785|        pub fn get(&self) -> Option<&T> {
  966|    785|            if self.0.is_initialized() {
  967|       |                // Safe b/c value is initialized.
  968|      0|                Some(unsafe { self.get_unchecked() })
  969|       |            } else {
  970|    785|                None
  971|       |            }
  972|    785|        }
_RINvMs6_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB6_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1w_2id8IdentityKj20_EEE15get_or_try_initNCINvMs3_B1u_B1r_8rm_valueyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECsdKADRZ4phoq_6simple:
  624|  5.01k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  5.01k|        where
  626|  5.01k|            F: FnOnce() -> Result<T, E>,
  627|  5.01k|        {
  628|  5.01k|            if let Some(val) = self.get() {
  629|  5.01k|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  5.01k|        }
_RNvXs5_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB5_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1v_2id8IdentityKj20_EEEINtNtCshIAt2fZ6DPf_4core7convert4FromBR_E4fromCsdKADRZ4phoq_6simple:
  465|  39.0k|        fn from(value: T) -> Self {
  466|  39.0k|            OnceCell::with_value(value)
  467|  39.0k|        }
_RNvMs6_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB5_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1v_2id8IdentityKj20_EEE10with_valueCsdKADRZ4phoq_6simple:
  477|  39.0k|        pub const fn with_value(value: T) -> OnceCell<T> {
  478|  39.0k|            OnceCell { inner: UnsafeCell::new(Some(value)) }
  479|  39.0k|        }
_RINvMs6_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB6_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1w_2id8IdentityKj20_EEE15get_or_try_initNCINvMs3_B1u_B1r_12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0NtNtB1w_5error5ErrorECsdKADRZ4phoq_6simple:
  624|  33.6k|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  625|  33.6k|        where
  626|  33.6k|            F: FnOnce() -> Result<T, E>,
  627|  33.6k|        {
  628|  33.6k|            if let Some(val) = self.get() {
  629|  33.6k|                return Ok(val);
  630|      0|            }
  631|      0|            let val = f()?;
  632|       |            // Note that *some* forms of reentrant initialization might lead to
  633|       |            // UB (see `reentrant_init` test). I believe that just removing this
  634|       |            // `assert`, while keeping `set/get` would be sound, but it seems
  635|       |            // better to panic, rather than to silently use an old value.
  636|      0|            assert!(self.set(val).is_ok(), "reentrant init");
  637|      0|            Ok(unsafe { self.get().unwrap_unchecked() })
  638|  33.6k|        }
_RNvMs6_NtCs8rEvoWP4aQ0_9once_cell6unsyncINtB5_8OnceCellINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1v_2id8IdentityKj20_EEE7get_mutCsdKADRZ4phoq_6simple:
  510|  38.7k|        pub fn get_mut(&mut self) -> Option<&mut T> {
  511|  38.7k|            // Safe because we have unique access
  512|  38.7k|            unsafe { &mut *self.inner.get() }.as_mut()
  513|  38.7k|        }

_RINvMs1_NtNtCs8rEvoWP4aQ0_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCs4fiSK8q0usK_5alloc5boxed3BoxDNtNtCskn3PThRdvIh_5ahash12random_state12RandomSourceNtNtCshIAt2fZ6DPf_4core6marker4SyncNtB2s_4SendEL_EE11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0ECsdKADRZ4phoq_6simple:
  367|    785|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|    785|        where
  369|    785|            F: FnOnce() -> Box<T>,
  370|    785|        {
  371|    785|            enum Void {}
  372|    785|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|    785|                Ok(val) => val,
  374|    785|                Err(void) => match void {},
  375|    785|            }
  376|    785|        }
_RINvMs1_NtNtCs8rEvoWP4aQ0_9once_cell4race8once_boxINtB6_7OnceBoxINtNtCs4fiSK8q0usK_5alloc5boxed3BoxDNtNtCskn3PThRdvIh_5ahash12random_state12RandomSourceNtNtCshIAt2fZ6DPf_4core6marker4SyncNtB2s_4SendEL_EE15get_or_try_initNCINvB2_11get_or_initNCNvMs1_B1C_NtB1C_11RandomState7get_src0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidECsdKADRZ4phoq_6simple:
  385|    785|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|    785|        where
  387|    785|            F: FnOnce() -> Result<Box<T>, E>,
  388|    785|        {
  389|    785|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|    785|
  391|    785|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|    784|            };
  405|    785|            Ok(unsafe { &*ptr })
  406|    785|        }
_RNCINvMs1_NtNtCs8rEvoWP4aQ0_9once_cell4race8once_boxINtB8_7OnceBoxINtNtCs4fiSK8q0usK_5alloc5boxed3BoxDNtNtCskn3PThRdvIh_5ahash12random_state12RandomSourceNtNtCshIAt2fZ6DPf_4core6marker4SyncNtB2u_4SendEL_EE11get_or_initNCNvMs1_B1E_NtB1E_11RandomState7get_src0E0CsdKADRZ4phoq_6simple:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
_RINvMs1_NtNtCs8rEvoWP4aQ0_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E15get_or_try_initNCINvB2_11get_or_initNCNvXs_NtCskn3PThRdvIh_5ahash12random_stateNtB1T_19DefaultRandomSourceNtB1T_12RandomSource15get_fixed_seeds0E0NtNvMs1_B6_IBN_pE11get_or_init4VoidEB1V_:
  385|    785|        pub fn get_or_try_init<F, E>(&self, f: F) -> Result<&T, E>
  386|    785|        where
  387|    785|            F: FnOnce() -> Result<Box<T>, E>,
  388|    785|        {
  389|    785|            let mut ptr = self.inner.load(Ordering::Acquire);
  390|    785|
  391|    785|            if ptr.is_null() {
  392|      1|                let val = f()?;
  393|      1|                ptr = Box::into_raw(val);
  394|      1|                let exchange = self.inner.compare_exchange(
  395|      1|                    ptr::null_mut(),
  396|      1|                    ptr,
  397|      1|                    Ordering::AcqRel,
  398|      1|                    Ordering::Acquire,
  399|      1|                );
  400|      1|                if let Err(old) = exchange {
  401|      0|                    drop(unsafe { Box::from_raw(ptr) });
  402|      0|                    ptr = old;
  403|      1|                }
  404|    784|            };
  405|    785|            Ok(unsafe { &*ptr })
  406|    785|        }
_RINvMs1_NtNtCs8rEvoWP4aQ0_9once_cell4race8once_boxINtB6_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCskn3PThRdvIh_5ahash12random_stateNtB1u_19DefaultRandomSourceNtB1u_12RandomSource15get_fixed_seeds0EB1w_:
  367|    785|        pub fn get_or_init<F>(&self, f: F) -> &T
  368|    785|        where
  369|    785|            F: FnOnce() -> Box<T>,
  370|    785|        {
  371|    785|            enum Void {}
  372|    785|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {
  373|    785|                Ok(val) => val,
  374|    785|                Err(void) => match void {},
  375|    785|            }
  376|    785|        }
_RNCINvMs1_NtNtCs8rEvoWP4aQ0_9once_cell4race8once_boxINtB8_7OnceBoxAAyj4_j2_E11get_or_initNCNvXs_NtCskn3PThRdvIh_5ahash12random_stateNtB1w_19DefaultRandomSourceNtB1w_12RandomSource15get_fixed_seeds0E0B1y_:
  372|      1|            match self.get_or_try_init(|| Ok::<Box<T>, Void>(f())) {

_RINvXs1G_NtNtCskJYdaI9Vvso_5serde3ser5implsRINtNtCseXDvg1ZXkc2_3cid3cid3CidKj40_ENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  452|  50.1k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  50.1k|            where
  454|  50.1k|                S: Serializer,
  455|  50.1k|            {
  456|  50.1k|                (**self).serialize(serializer)
  457|  50.1k|            }
_RINvXs1p_NtNtCskJYdaI9Vvso_5serde3ser5implsTRNtNtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfield8BitfieldRINtNtCs4fiSK8q0usK_5alloc3vec3VecINtNtBL_7pointer7PointeryyNtNtBL_2id8IdentityKj20_EEENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  361|  43.9k|                fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  362|  43.9k|                where
  363|  43.9k|                    S: Serializer,
  364|  43.9k|                {
  365|  43.9k|                    let mut tuple = tri!(serializer.serialize_tuple($len));
  366|       |                    $(
  367|  43.9k|                        tri!(tuple.serialize_element(&self.$n));
  368|       |                    )+
  369|  43.9k|                    tuple.end()
  370|  43.9k|                }
_RINvXs1G_NtNtCskJYdaI9Vvso_5serde3ser5implsRSINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  452|  41.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  41.9k|            where
  454|  41.9k|                S: Serializer,
  455|  41.9k|            {
  456|  41.9k|                (**self).serialize(serializer)
  457|  41.9k|            }
_RINvXs1G_NtNtCskJYdaI9Vvso_5serde3ser5implsRINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtBL_2id8IdentityKj20_ENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  452|  92.1k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  92.1k|            where
  454|  92.1k|                S: Serializer,
  455|  92.1k|            {
  456|  92.1k|                (**self).serialize(serializer)
  457|  92.1k|            }
_RINvXs1G_NtNtCskJYdaI9Vvso_5serde3ser5implsRINtNtCs4fiSK8q0usK_5alloc3vec3VecINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtB1i_2id8IdentityKj20_EENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  452|  43.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  43.9k|            where
  454|  43.9k|                S: Serializer,
  455|  43.9k|            {
  456|  43.9k|                (**self).serialize(serializer)
  457|  43.9k|            }
_RINvXs1G_NtNtCskJYdaI9Vvso_5serde3ser5implsRINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  452|  46.3k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  46.3k|            where
  454|  46.3k|                S: Serializer,
  455|  46.3k|            {
  456|  46.3k|                (**self).serialize(serializer)
  457|  46.3k|            }
_RINvXsG_NtNtCskJYdaI9Vvso_5serde3ser5implsmNtB8_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   11|  50.1k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  50.1k|            where
   13|  50.1k|                S: Serializer,
   14|  50.1k|            {
   15|  50.1k|                serializer.$method(*self $($cast)*)
   16|  50.1k|            }
_RINvXs1G_NtNtCskJYdaI9Vvso_5serde3ser5implsRNtNtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfield8BitfieldNtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  452|  43.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  43.9k|            where
  454|  43.9k|                S: Serializer,
  455|  43.9k|            {
  456|  43.9k|                (**self).serialize(serializer)
  457|  43.9k|            }
_RINvXsH_NtNtCskJYdaI9Vvso_5serde3ser5implsyNtB8_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   11|  92.7k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   12|  92.7k|            where
   13|  92.7k|                S: Serializer,
   14|  92.7k|            {
   15|  92.7k|                serializer.$method(*self $($cast)*)
   16|  92.7k|            }
_RINvXs1m_NtNtCskJYdaI9Vvso_5serde3ser5implsINtNtCs4fiSK8q0usK_5alloc3vec3VecINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtB1h_2id8IdentityKj20_EENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  190|  43.9k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  191|  43.9k|            where
  192|  43.9k|                S: Serializer,
  193|  43.9k|            {
  194|  43.9k|                serializer.collect_seq(self)
  195|  43.9k|            }
_RINvXs6_NtNtCskJYdaI9Vvso_5serde3ser5implsSINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyENtB8_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  174|  41.9k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  175|  41.9k|    where
  176|  41.9k|        S: Serializer,
  177|  41.9k|    {
  178|  41.9k|        serializer.collect_seq(self)
  179|  41.9k|    }
_RINvXs1I_NtNtCskJYdaI9Vvso_5serde3ser5implsINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1j_2id8IdentityKj20_EENtB9_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  452|  39.0k|            fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  453|  39.0k|            where
  454|  39.0k|                S: Serializer,
  455|  39.0k|            {
  456|  39.0k|                (**self).serialize(serializer)
  457|  39.0k|            }

_RINvYQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer11collect_seqRSINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyEECsdKADRZ4phoq_6simple:
 1271|  41.9k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  41.9k|    where
 1273|  41.9k|        I: IntoIterator,
 1274|  41.9k|        <I as IntoIterator>::Item: Serialize,
 1275|  41.9k|    {
 1276|  41.9k|        let mut iter = iter.into_iter();
 1277|  41.9k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  41.9k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  41.9k|        serializer.end()
 1280|  41.9k|    }
_RNCINvYQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer11collect_seqRINtNtCs4fiSK8q0usK_5alloc3vec3VecINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtB3h_2id8IdentityKj20_EEE0CsdKADRZ4phoq_6simple:
 1278|  92.1k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvNtCskJYdaI9Vvso_5serde3ser17iterator_len_hintINtNtNtCshIAt2fZ6DPf_4core5slice4iter4IterINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyEEECsdKADRZ4phoq_6simple:
 1948|  41.9k|    match iter.size_hint() {
 1949|  41.9k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  41.9k|}
_RINvNtCskJYdaI9Vvso_5serde3ser17iterator_len_hintINtNtNtCshIAt2fZ6DPf_4core5slice4iter4IterINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtB1w_2id8IdentityKj20_EEECsdKADRZ4phoq_6simple:
 1948|  43.9k|    match iter.size_hint() {
 1949|  43.9k|        (lo, Some(hi)) if lo == hi => Some(lo),
 1950|      0|        _ => None,
 1951|       |    }
 1952|  43.9k|}
_RNCINvYQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer11collect_seqRSINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyEE0CsdKADRZ4phoq_6simple:
 1278|  46.3k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
_RINvYQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer11collect_seqRINtNtCs4fiSK8q0usK_5alloc3vec3VecINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtB3f_2id8IdentityKj20_EEECsdKADRZ4phoq_6simple:
 1271|  43.9k|    fn collect_seq<I>(self, iter: I) -> Result<Self::Ok, Self::Error>
 1272|  43.9k|    where
 1273|  43.9k|        I: IntoIterator,
 1274|  43.9k|        <I as IntoIterator>::Item: Serialize,
 1275|  43.9k|    {
 1276|  43.9k|        let mut iter = iter.into_iter();
 1277|  43.9k|        let mut serializer = tri!(self.serialize_seq(iterator_len_hint(&iter)));
 1278|  43.9k|        tri!(iter.try_for_each(|item| serializer.serialize_element(&item)));
 1279|  43.9k|        serializer.end()
 1280|  43.9k|    }

_RINvXsc_NtCs47oyYel3vAM_11serde_bytes7bytebufNtB6_7ByteBufNtNtCskJYdaI9Vvso_5serde3ser9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser13CidSerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  186|  50.1k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
  187|  50.1k|    where
  188|  50.1k|        S: Serializer,
  189|  50.1k|    {
  190|  50.1k|        serializer.serialize_bytes(&self.bytes)
  191|  50.1k|    }
_RINvMNtCs47oyYel3vAM_11serde_bytes7bytebufNtB3_7ByteBuf4fromINtNtCs4fiSK8q0usK_5alloc3vec3VechEECsdKADRZ4phoq_6simple:
   60|  50.1k|    pub fn from<T: Into<Vec<u8>>>(bytes: T) -> Self {
   61|  50.1k|        ByteBuf {
   62|  50.1k|            bytes: bytes.into(),
   63|  50.1k|        }
   64|  50.1k|    }

_RNvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer13serialize_u64CsdKADRZ4phoq_6simple:
  123|  92.7k|        v.encode(&mut self.writer)?;
  124|  92.7k|        Ok(())
  125|  92.7k|    }
_RINvXs0_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser12SerializeSeq17serialize_elementRINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyEECsdKADRZ4phoq_6simple:
  380|  46.3k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  46.3k|        value.serialize(&mut *self.ser)
  382|  46.3k|    }
_RINvXs1_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser14SerializeTuple17serialize_elementRINtNtCs4fiSK8q0usK_5alloc3vec3VecINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtB3y_2id8IdentityKj20_EEECsdKADRZ4phoq_6simple:
  399|  43.9k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  43.9k|        value.serialize(&mut *self.ser)
  401|  43.9k|    }
_RINvXs1_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser14SerializeTuple17serialize_elementRNtNtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfield8BitfieldECsdKADRZ4phoq_6simple:
  399|  43.9k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  400|  43.9k|        value.serialize(&mut *self.ser)
  401|  43.9k|    }
_RINvXs2_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser20SerializeTupleStruct15serialize_fieldyECsdKADRZ4phoq_6simple:
  414|  92.7k|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  415|  92.7k|        value.serialize(&mut *self.ser)
  416|  92.7k|    }
_RNvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer13serialize_seqCsdKADRZ4phoq_6simple:
  226|  85.9k|        if let Some(len) = len {
  227|  85.9k|            enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  228|       |        } else {
  229|      0|            enc::ArrayStartUnbounded.encode(&mut self.writer)?;
  230|       |        }
  231|  85.9k|        Ok(Collect {
  232|  85.9k|            bounded: len.is_some(),
  233|  85.9k|            ser: self,
  234|  85.9k|        })
  235|  85.9k|    }
_RNvMNtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterE10into_innerCsdKADRZ4phoq_6simple:
   56|  43.9k|    pub fn into_inner(self) -> W {
   57|  43.9k|        self.writer
   58|  43.9k|    }
_RNvXs0_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB5_7CollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser12SerializeSeq3endCsdKADRZ4phoq_6simple:
  385|  85.9k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  386|  85.9k|        if !self.bounded {
  387|      0|            enc::End.encode(&mut self.ser.writer)?;
  388|  85.9k|        }
  389|       |
  390|  85.9k|        Ok(())
  391|  85.9k|    }
_RNvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer15serialize_bytesCsdKADRZ4phoq_6simple:
  160|  94.0k|        types::Bytes(v).encode(&mut self.writer)?;
  161|  94.0k|        Ok(())
  162|  94.0k|    }
_RINvNtCs72RdNaganFG_18serde_ipld_dagcbor3ser6to_vecINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1r_2id8IdentityKj20_EEECsdKADRZ4phoq_6simple:
   23|  39.0k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  39.0k|where
   25|  39.0k|    T: Serialize + ?Sized,
   26|  39.0k|{
   27|  39.0k|    let writer = BufWriter::new(Vec::new());
   28|  39.0k|    let mut serializer = Serializer::new(writer);
   29|  39.0k|    value.serialize(&mut serializer)?;
   30|  39.0k|    Ok(serializer.into_inner().into_inner())
   31|  39.0k|}
_RNvXs1_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser14SerializeTuple3endCsdKADRZ4phoq_6simple:
  404|  43.9k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  405|  43.9k|        Ok(())
  406|  43.9k|    }
_RNvXs2_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser20SerializeTupleStruct3endCsdKADRZ4phoq_6simple:
  419|  46.3k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  420|  46.3k|        Ok(())
  421|  46.3k|    }
_RNvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer13serialize_u32CsdKADRZ4phoq_6simple:
  117|  50.1k|        v.encode(&mut self.writer)?;
  118|  50.1k|        Ok(())
  119|  50.1k|    }
_RINvXs3_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser21SerializeTupleVariant15serialize_fieldNtNtCs2lfHBIbw1gu_17fvm_ipld_encoding5bytes8BytesSerECsdKADRZ4phoq_6simple:
  429|  50.1k|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  430|  50.1k|        value.serialize(&mut *self.ser)
  431|  50.1k|    }
_RINvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer24serialize_newtype_structNtNtCs47oyYel3vAM_11serde_bytes7bytebuf7ByteBufECsdKADRZ4phoq_6simple:
  199|  50.1k|    fn serialize_newtype_struct<T: Serialize + ?Sized>(
  200|  50.1k|        self,
  201|  50.1k|        name: &'static str,
  202|  50.1k|        value: &T,
  203|  50.1k|    ) -> Result<Self::Ok, Self::Error> {
  204|  50.1k|        if name == CID_SERDE_PRIVATE_IDENTIFIER {
  205|  50.1k|            value.serialize(&mut CidSerializer(self))
  206|       |        } else {
  207|      0|            value.serialize(self)
  208|       |        }
  209|  50.1k|    }
_RNvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer22serialize_tuple_structCsdKADRZ4phoq_6simple:
  244|  46.3k|    fn serialize_tuple_struct(
  245|  46.3k|        self,
  246|  46.3k|        _name: &'static str,
  247|  46.3k|        len: usize,
  248|  46.3k|    ) -> Result<Self::SerializeTupleStruct, Self::Error> {
  249|  46.3k|        self.serialize_tuple(len)
  250|  46.3k|    }
_RINvXs3_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser21SerializeTupleVariant15serialize_fieldRINtNtCseXDvg1ZXkc2_3cid3cid3CidKj40_EECsdKADRZ4phoq_6simple:
  429|  50.1k|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  430|  50.1k|        value.serialize(&mut *self.ser)
  431|  50.1k|    }
_RINvNtCs72RdNaganFG_18serde_ipld_dagcbor3ser6to_vecINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtBS_2id8IdentityKj20_EECsdKADRZ4phoq_6simple:
   23|  4.91k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, EncodeError<TryReserveError>>
   24|  4.91k|where
   25|  4.91k|    T: Serialize + ?Sized,
   26|  4.91k|{
   27|  4.91k|    let writer = BufWriter::new(Vec::new());
   28|  4.91k|    let mut serializer = Serializer::new(writer);
   29|  4.91k|    value.serialize(&mut serializer)?;
   30|  4.91k|    Ok(serializer.into_inner().into_inner())
   31|  4.91k|}
_RINvXs0_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_7CollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser12SerializeSeq17serialize_elementRINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer7PointeryyNtNtB2R_2id8IdentityKj20_EECsdKADRZ4phoq_6simple:
  380|  92.1k|    fn serialize_element<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  381|  92.1k|        value.serialize(&mut *self.ser)
  382|  92.1k|    }
_RINvXs3_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB6_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser21SerializeTupleVariant15serialize_fieldmECsdKADRZ4phoq_6simple:
  429|  50.1k|    fn serialize_field<T: Serialize + ?Sized>(&mut self, value: &T) -> Result<(), Self::Error> {
  430|  50.1k|        value.serialize(&mut *self.ser)
  431|  50.1k|    }
_RNvMNtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB2_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterE3newCsdKADRZ4phoq_6simple:
   51|  43.9k|    pub fn new(writer: W) -> Serializer<W> {
   52|  43.9k|        Serializer { writer }
   53|  43.9k|    }
_RNvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer15serialize_tupleCsdKADRZ4phoq_6simple:
  239|  90.3k|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  240|  90.3k|        Ok(BoundedCollect { ser: self })
  241|  90.3k|    }
_RNvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB4_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer23serialize_tuple_variantCsdKADRZ4phoq_6simple:
  260|  50.1k|        enc::MapStartBounded(1).encode(&mut self.writer)?;
  261|  50.1k|        variant.encode(&mut self.writer)?;
  262|  50.1k|        enc::ArrayStartBounded(len).encode(&mut self.writer)?;
  263|  50.1k|        Ok(BoundedCollect { ser: self })
  264|  50.1k|    }
_RNvXs3_NtCs72RdNaganFG_18serde_ipld_dagcbor3serINtB5_14BoundedCollectNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser21SerializeTupleVariant3endCsdKADRZ4phoq_6simple:
  434|  50.1k|    fn end(self) -> Result<Self::Ok, Self::Error> {
  435|  50.1k|        Ok(())
  436|  50.1k|    }
_RNvXs7_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB5_13CidSerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer15serialize_bytesCsdKADRZ4phoq_6simple:
  561|  50.1k|    fn serialize_bytes(self, value: &[u8]) -> Result<Self::Ok, Self::Error> {
  562|  50.1k|        // The bytes of the CID is prefixed with a null byte when encoded as CBOR.
  563|  50.1k|        let prefixed = [&[0x00], value].concat();
  564|  50.1k|        // CIDs are serialized with CBOR tag 42.
  565|  50.1k|        types::Tag(CBOR_TAGS_CID, types::Bytes(&prefixed[..])).encode(&mut self.0.writer)?;
  566|  50.1k|        Ok(())
  567|  50.1k|    }
_RINvXs_NtCs72RdNaganFG_18serde_ipld_dagcbor3serQINtB5_10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterENtNtCskJYdaI9Vvso_5serde3ser10Serializer25serialize_newtype_variantRSINtCsbfz4AvxjbsN_13fvm_ipld_kamt12KeyValuePairyyEECsdKADRZ4phoq_6simple:
  219|  41.9k|        enc::MapStartBounded(1).encode(&mut self.writer)?;
  220|  41.9k|        variant.encode(&mut self.writer)?;
  221|  41.9k|        value.serialize(self)
  222|  41.9k|    }

_RNvNtCs3TQOe4GhxIU_15unsigned_varint6encode3u64CsdKADRZ4phoq_6simple:
   69|   150k|pub fn u64(number: u64, buf: &mut [u8; U64_LEN]) -> &[u8] {
   70|   150k|    encode!(number, buf)
   71|   150k|}
_RNvNtCs3TQOe4GhxIU_15unsigned_varint6encode9u8_bufferCsdKADRZ4phoq_6simple:
  101|  50.1k|pub fn u8_buffer() -> [u8; U8_LEN] {
  102|  50.1k|    [0; U8_LEN]
  103|  50.1k|}
_RNvNtCs3TQOe4GhxIU_15unsigned_varint6encode10u64_bufferCsdKADRZ4phoq_6simple:
  119|   150k|pub fn u64_buffer() -> [u8; U64_LEN] {
  120|   150k|    [0; U64_LEN]
  121|   150k|}
_RNvNtCs3TQOe4GhxIU_15unsigned_varint6encode2u8CsdKADRZ4phoq_6simple:
   45|  50.1k|pub fn u8(number: u8, buf: &mut [u8; U8_LEN]) -> &[u8] {
   46|  50.1k|    encode!(number, buf)
   47|  50.1k|}

_RNvMNtCseMY6HJzIUz9_19fvm_ipld_blockstore5blockINtB2_5BlockRINtNtCs4fiSK8q0usK_5alloc3vec3VechEE3cidCsdKADRZ4phoq_6simple:
   28|  43.9k|    pub fn cid(&self, mh_code: multihash::Code) -> Cid {
   29|  43.9k|        Cid::new_v1(self.codec, mh_code.digest(self.data.as_ref()))
   30|  43.9k|    }
_RNvXs_NtCseMY6HJzIUz9_19fvm_ipld_blockstore5blockINtB4_5BlockRINtNtCs4fiSK8q0usK_5alloc3vec3VechEEINtNtCshIAt2fZ6DPf_4core7convert5AsRefShE6as_refCsdKADRZ4phoq_6simple:
   42|  43.9k|    fn as_ref(&self) -> &[u8] {
   43|  43.9k|        self.data.as_ref()
   44|  43.9k|    }

_RINvYNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtB7_10Blockstore3putRINtNtCs4fiSK8q0usK_5alloc3vec3VechEECsdKADRZ4phoq_6simple:
   40|  43.9k|    fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
   41|  43.9k|    where
   42|  43.9k|        Self: Sized,
   43|  43.9k|        D: AsRef<[u8]>,
   44|  43.9k|    {
   45|  43.9k|        let k = block.cid(mh_code);
   46|  43.9k|        self.put_keyed(&k, block.as_ref())?;
   47|  43.9k|        Ok(k)
   48|  43.9k|    }
_RINvXs0_CseMY6HJzIUz9_19fvm_ipld_blockstoreRNtNtB6_6memory16MemoryBlockstoreNtB6_10Blockstore3putRINtNtCs4fiSK8q0usK_5alloc3vec3VechEECsdKADRZ4phoq_6simple:
  108|  43.9k|                fn put<D>(&self, mh_code: multihash::Code, block: &Block<D>) -> Result<Cid>
  109|  43.9k|                where
  110|  43.9k|                    Self: Sized,
  111|  43.9k|                    D: AsRef<[u8]>,
  112|  43.9k|                {
  113|  43.9k|                    (**self).put(mh_code, block)
  114|  43.9k|                }

_RNvXs1_NtCseMY6HJzIUz9_19fvm_ipld_blockstore6memoryNtB5_16MemoryBlockstoreNtNtCshIAt2fZ6DPf_4core7default7Default7defaultCsdKADRZ4phoq_6simple:
   11|    785|#[derive(Debug, Default, Clone)]
_RNvXs_NtCseMY6HJzIUz9_19fvm_ipld_blockstore6memoryNtB4_16MemoryBlockstoreNtB6_10Blockstore9put_keyed:
   36|  43.9k|    fn put_keyed(&self, k: &Cid, block: &[u8]) -> Result<()> {
   37|  43.9k|        self.blocks.borrow_mut().insert(*k, block.into());
   38|  43.9k|        Ok(())
   39|  43.9k|    }

_RINvNtNtCs2lfHBIbw1gu_17fvm_ipld_encoding5bytes12strict_bytes9serializeRShQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  154|  50.1k|    pub fn serialize<T, S>(bytes: &T, serializer: S) -> Result<S::Ok, S::Error>
  155|  50.1k|    where
  156|  50.1k|        T: ?Sized + AsRef<[u8]>,
  157|  50.1k|        S: Serializer,
  158|  50.1k|    {
  159|  50.1k|        Serialize::serialize(bytes.as_ref(), serializer)
  160|  50.1k|    }
_RINvXNvNtCs2lfHBIbw1gu_17fvm_ipld_encoding5bytes1__NtB5_8BytesSerNtNtCskJYdaI9Vvso_5serde3ser9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
  174|  50.1k|#[derive(serde::Serialize)]
_RINvXNtNtCs2lfHBIbw1gu_17fvm_ipld_encoding5bytes12strict_bytesShNtB3_9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   35|  94.0k|        fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   36|  94.0k|        where
   37|  94.0k|            S: Serializer,
   38|  94.0k|        {
   39|  94.0k|            serializer.serialize_bytes(self.as_ref())
   40|  94.0k|        }

_RINvYRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs2lfHBIbw1gu_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB2Q_2id8IdentityKj20_EEECsdKADRZ4phoq_6simple:
   30|  39.0k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  39.0k|    where
   32|  39.0k|        S: ser::Serialize,
   33|  39.0k|    {
   34|  39.0k|        let bytes = crate::to_vec(obj)?;
   35|  39.0k|        self.put(
   36|  39.0k|            code,
   37|  39.0k|            &Block {
   38|  39.0k|                codec: DAG_CBOR,
   39|  39.0k|                data: &bytes,
   40|  39.0k|            },
   41|  39.0k|        )
   42|  39.0k|    }
_RINvYRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreNtNtCs2lfHBIbw1gu_17fvm_ipld_encoding10cbor_store9CborStore8put_cborINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB2h_2id8IdentityKj20_EECsdKADRZ4phoq_6simple:
   30|  4.91k|    fn put_cbor<S>(&self, obj: &S, code: multihash::Code) -> anyhow::Result<Cid>
   31|  4.91k|    where
   32|  4.91k|        S: ser::Serialize,
   33|  4.91k|    {
   34|  4.91k|        let bytes = crate::to_vec(obj)?;
   35|  4.91k|        self.put(
   36|  4.91k|            code,
   37|  4.91k|            &Block {
   38|  4.91k|                codec: DAG_CBOR,
   39|  4.91k|                data: &bytes,
   40|  4.91k|            },
   41|  4.91k|        )
   42|  4.91k|    }

_RINvCs2lfHBIbw1gu_17fvm_ipld_encoding6to_vecINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtBL_2id8IdentityKj20_EECsdKADRZ4phoq_6simple:
   44|  4.91k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  4.91k|where
   46|  4.91k|    T: ser::Serialize + ?Sized,
   47|  4.91k|{
   48|  4.91k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  4.91k|}
_RINvCs2lfHBIbw1gu_17fvm_ipld_encoding6to_vecINtNtCs4fiSK8q0usK_5alloc5boxed3BoxINtNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node4NodeyyNtNtB1k_2id8IdentityKj20_EEECsdKADRZ4phoq_6simple:
   44|  39.0k|pub fn to_vec<T>(value: &T) -> Result<Vec<u8>, Error>
   45|  39.0k|where
   46|  39.0k|    T: ser::Serialize + ?Sized,
   47|  39.0k|{
   48|  39.0k|    serde_ipld_dagcbor::to_vec(value).map_err(Into::into)
   49|  39.0k|}

_RNvXNvNtCsdKADRZ4phoq_6simple6commons_1__NtB4_6MethodNtCsfDlVYfi1rqX_9arbitrary9Arbitrary19arbitrary_take_rest:
   15|  2.34k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCsdKADRZ4phoq_6simple6common1__NtB6_9OperationNtCsfDlVYfi1rqX_9arbitrary9Arbitrary9size_hint0B8_:
    9|    785|#[derive(Debug, Arbitrary)]
_RNvXNvNtCsdKADRZ4phoq_6simple6common1__NtB4_9OperationNtCsfDlVYfi1rqX_9arbitrary9Arbitrary19arbitrary_take_rest:
    9|  2.34k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCsdKADRZ4phoq_6simple6commons_1__NtB6_6MethodNtCsfDlVYfi1rqX_9arbitrary9Arbitrary9arbitrarys_0B8_:
   15|  31.0k|#[derive(Debug, Arbitrary)]
_RNvNtCsdKADRZ4phoq_6simple6common3run:
   22|    785|pub fn run(flush_rate: u8, operations: Vec<Operation>, conf: Config) {
   23|    785|    let db = fvm_ipld_blockstore::MemoryBlockstore::default();
   24|    785|    let mut kamt = Kamt::<_, u64, u64, Identity>::new_with_config(&db, conf);
   25|    785|    let mut elements = ahash::AHashMap::new();
   26|    785|
   27|    785|    let flush_rate = (flush_rate as usize).saturating_add(5);
   28|  31.8k|    for (i, Operation { key, method }) in operations.into_iter().enumerate() {
   29|  31.8k|        if i % flush_rate == 0 {
   30|  5.19k|            // Periodic flushing of Kamt to fuzz blockstore usage also
   31|  5.19k|            kamt.flush().unwrap();
   32|  26.6k|        }
   33|       |
   34|  31.8k|        match method {
   35|  20.6k|            Method::Insert(v) => {
   36|  20.6k|                elements.insert(key, v);
   37|  20.6k|                kamt.set(key, v).unwrap();
   38|  20.6k|            }
   39|       |            Method::Remove => {
   40|  6.39k|                let el = elements.remove(&key);
   41|  6.39k|                let kamt_deleted = kamt.delete(&key).unwrap();
   42|  6.39k|                assert_eq!(kamt_deleted, el);
   43|       |            }
   44|       |            Method::Get => {
   45|  4.83k|                let ev = elements.get(&key);
   46|  4.83k|                let av = kamt.get(&key).unwrap();
   47|  4.83k|                assert_eq!(av, ev);
   48|       |            }
   49|       |        }
   50|       |    }
   51|    785|}
_RNCNvXNvNtCsdKADRZ4phoq_6simple6common1__NtB6_9OperationNtCsfDlVYfi1rqX_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
    9|    783|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCsdKADRZ4phoq_6simple6commons_1__NtB6_6MethodNtCsfDlVYfi1rqX_9arbitrary9Arbitrary19arbitrary_take_rests_0B8_:
   15|    783|#[derive(Debug, Arbitrary)]
_RNvXNvNtCsdKADRZ4phoq_6simple6commons_1__NtB4_6MethodNtCsfDlVYfi1rqX_9arbitrary9Arbitrary9arbitrary:
   15|  93.2k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCsdKADRZ4phoq_6simple6commons_1__NtB6_6MethodNtCsfDlVYfi1rqX_9arbitrary9Arbitrary9size_hint0B8_:
   15|    785|#[derive(Debug, Arbitrary)]
_RNvXNvNtCsdKADRZ4phoq_6simple6common1__NtB4_9OperationNtCsfDlVYfi1rqX_9arbitrary9Arbitrary9arbitrary:
    9|  93.2k|#[derive(Debug, Arbitrary)]
_RNCNvXNvNtCsdKADRZ4phoq_6simple6common1__NtB6_9OperationNtCsfDlVYfi1rqX_9arbitrary9Arbitrary9arbitrarys_0B8_:
    9|  31.0k|#[derive(Debug, Arbitrary)]

_RINvXNtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB3_8BitfieldNtNtCskJYdaI9Vvso_5serde3ser9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   16|  43.9k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   17|  43.9k|    where
   18|  43.9k|        S: Serializer,
   19|  43.9k|    {
   20|  43.9k|        let mut v = [0u8; 4 * 8];
   21|  43.9k|        // Big endian ordering, to match go
   22|  43.9k|        BigEndian::write_u64(&mut v[..8], self.0[3]);
   23|  43.9k|        BigEndian::write_u64(&mut v[8..16], self.0[2]);
   24|  43.9k|        BigEndian::write_u64(&mut v[16..24], self.0[1]);
   25|  43.9k|        BigEndian::write_u64(&mut v[24..], self.0[0]);
   26|       |
   27|  1.26M|        for i in 0..v.len() {
   28|  1.26M|            if v[i] != 0 {
   29|  43.1k|                return strict_bytes::Serialize::serialize(&v[i..], serializer);
   30|  1.21M|            }
   31|       |        }
   32|       |
   33|    830|        <[u8] as strict_bytes::Serialize>::serialize(&[], serializer)
   34|  43.9k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield8test_bit:
   72|   150k|    pub fn test_bit(&self, idx: u32) -> bool {
   73|   150k|        let ai = idx / 64;
   74|   150k|        let bi = idx % 64;
   75|   150k|
   76|   150k|        self.0[ai as usize] & (1 << bi) != 0
   77|   150k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield12set_bits_leq:
  121|  65.3k|    pub fn set_bits_leq(mut self, bit: u32) -> Self {
  122|  65.3k|        if bit < 64 {
  123|  52.7k|            self.0[0] = set_bits_leq(self.0[0], bit);
  124|  52.7k|        } else if bit < 128 {
  125|  3.12k|            self.0[0] = std::u64::MAX;
  126|  3.12k|            self.0[1] = set_bits_leq(self.0[1], bit - 64);
  127|  9.49k|        } else if bit < 192 {
  128|  4.77k|            self.0[0] = std::u64::MAX;
  129|  4.77k|            self.0[1] = std::u64::MAX;
  130|  4.77k|            self.0[2] = set_bits_leq(self.0[2], bit - 128);
  131|  4.77k|        } else {
  132|  4.71k|            self.0[0] = std::u64::MAX;
  133|  4.71k|            self.0[1] = std::u64::MAX;
  134|  4.71k|            self.0[2] = std::u64::MAX;
  135|  4.71k|            self.0[3] = set_bits_leq(self.0[3], bit - 192);
  136|  4.71k|        }
  137|       |
  138|  65.3k|        self
  139|  65.3k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield11set_bits_le:
  114|   154k|    pub fn set_bits_le(self, bit: u32) -> Self {
  115|   154k|        if bit == 0 {
  116|  89.1k|            return self;
  117|  65.3k|        }
  118|  65.3k|        self.set_bits_leq(bit - 1)
  119|   154k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield9clear_bit:
   66|  1.72k|    pub fn clear_bit(&mut self, idx: u32) {
   67|  1.72k|        let ai = idx / 64;
   68|  1.72k|        let bi = idx % 64;
   69|  1.72k|        self.0[ai as usize] &= u64::MAX - (1 << bi);
   70|  1.72k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield10count_ones:
   86|   308k|    pub fn count_ones(&self) -> usize {
   87|   308k|        self.0.iter().map(|a| a.count_ones() as usize).sum()
   88|   308k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield4zero:
  110|   241k|    pub fn zero() -> Self {
  111|   241k|        Bitfield([0, 0, 0, 0])
  112|   241k|    }
_RNCNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB7_8Bitfield12last_one_idx0B9_:
   92|  1.53k|        for v in self.0.iter().rev().map(|&v| v.leading_zeros()) {
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield7set_bit:
   79|  26.1k|    pub fn set_bit(&mut self, idx: u32) {
   80|  26.1k|        let ai = idx / 64;
   81|  26.1k|        let bi = idx % 64;
   82|  26.1k|
   83|  26.1k|        self.0[ai as usize] |= 1 << bi;
   84|  26.1k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield3and:
  101|   154k|    pub fn and(self, other: &Self) -> Self {
  102|   154k|        Bitfield([
  103|   154k|            self.0[0] & other.0[0],
  104|   154k|            self.0[1] & other.0[1],
  105|   154k|            self.0[2] & other.0[2],
  106|   154k|            self.0[3] & other.0[3],
  107|   154k|        ])
  108|   154k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB5_8Bitfield12last_one_idx:
   90|    436|    pub fn last_one_idx(&self) -> Option<usize> {
   91|    436|        let mut idx = self.0.len() as u32 * u64::BITS;
   92|  1.53k|        for v in self.0.iter().rev().map(|&v| v.leading_zeros()) {
   93|  1.53k|            idx -= v;
   94|  1.53k|            if v < u64::BITS {
   95|    436|                return Some((idx - 1) as usize);
   96|  1.10k|            }
   97|       |        }
   98|      0|        None
   99|    436|    }
_RNvNtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfield12set_bits_leqB3_:
  143|  65.3k|fn set_bits_leq(v: u64, bit: u32) -> u64 {
  144|  65.3k|    (v as u128 | ((1u128 << (1 + bit)) - 1)) as u64
  145|  65.3k|}
_RNCNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt8bitfieldNtB7_8Bitfield10count_ones0B9_:
   87|  1.23M|        self.0.iter().map(|a| a.count_ones() as usize).sum()

_RNvXs6_NtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB5_9ExtensionNtNtCshIAt2fZ6DPf_4core7default7Default7defaultCsdKADRZ4phoq_6simple:
   15|  75.4k|#[derive(Debug, PartialEq, Eq, Clone, Default)]
_RNCINvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB5_9Extension21longest_common_prefixKj20_E0CsdKADRZ4phoq_6simple:
   83|  6.86k|            .map(|k| HashBits::new_at_index(k, hashed_key.consumed))
_RINvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB3_9Extension21longest_common_prefixKj20_ECsdKADRZ4phoq_6simple:
   76|  4.95k|    pub fn longest_common_prefix<const N: usize>(
   77|  4.95k|        hashed_key: &mut HashBits,
   78|  4.95k|        bit_width: u32,
   79|  4.95k|        hashes: &[HashedKey<N>],
   80|  4.95k|    ) -> Result<Self, Error> {
   81|  4.95k|        let mut hashes = hashes
   82|  4.95k|            .iter()
   83|  4.95k|            .map(|k| HashBits::new_at_index(k, hashed_key.consumed))
   84|  4.95k|            .collect::<Vec<_>>();
   85|  4.95k|
   86|  4.95k|        let mut builder = ExtensionBuilder::new();
   87|  4.95k|        let total_bits = hashed_key.len();
   88|       |
   89|  39.7k|        'consume: while hashed_key.consumed < total_bits {
   90|  39.7k|            let consumed = hashed_key.consumed;
   91|  39.7k|            let n = hashed_key.next(bit_width)?;
   92|       |
   93|  49.5k|            for h in hashes.iter_mut() {
   94|  49.5k|                let nh = h.next(bit_width)?;
   95|  49.5k|                if n != nh {
   96|  4.95k|                    hashed_key.consumed = consumed;
   97|  4.95k|                    break 'consume;
   98|  44.6k|                }
   99|       |            }
  100|       |
  101|  34.8k|            builder.add(bit_width, n as u8)
  102|       |        }
  103|       |
  104|  4.95k|        Ok(builder.build())
  105|  4.95k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension9from_bits:
  145|  11.0k|    pub fn from_bits(bits: &mut HashBits, mut length: u32) -> Result<Extension, Error> {
  146|  11.0k|        let mut builder = ExtensionBuilder::new();
  147|  22.8k|        while length > 0 {
  148|  11.8k|            let i = min(length, 8);
  149|  11.8k|            let n = bits.next(i)? as u8;
  150|  11.8k|            length -= i;
  151|  11.8k|            builder.add(i, n);
  152|       |        }
  153|  11.0k|        Ok(builder.build())
  154|  11.0k|    }
_RINvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB3_9Extension5mergeARBC_j3_EB5_:
  125|    436|    fn merge<'a, I>(exts: I, bit_width: u32) -> Result<Self, Error>
  126|    436|    where
  127|    436|        I: IntoIterator<Item = &'a Self>,
  128|    436|    {
  129|    436|        let mut builder = ExtensionBuilder::new();
  130|  1.74k|        for ext in exts {
  131|  1.30k|            let mut path = ext.path_bits();
  132|  1.30k|            let mut bits_left = ext.length;
  133|  6.53k|            while bits_left > 0 {
  134|  5.22k|                let i = min(bit_width, bits_left);
  135|  5.22k|                let n = path.next(i)?;
  136|  5.22k|                builder.add(i, n as u8);
  137|  5.22k|                bits_left -= i;
  138|       |            }
  139|       |        }
  140|    436|        Ok(builder.build())
  141|    436|    }
_RNvMs_NtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB4_16ExtensionBuilder3add:
  181|  52.3k|    pub fn add(&mut self, bit_width: u32, n: u8) {
  182|  52.3k|        // See how far we have filled the current byte.
  183|  52.3k|        let j = self.written % 8;
  184|  52.3k|        let i = bit_width;
  185|  52.3k|        if j + i > 8 {
  186|    907|            // The next bits don't fit in our current byte. Take the leftmost bits,
  187|    907|            // append the full byte to the path, then start a new one and write the
  188|    907|            // rightmost bits into that.
  189|    907|            let carry = j + i - 8;
  190|    907|            self.out += n >> carry;
  191|    907|            self.path.push(self.out);
  192|    907|            self.out = n & mkmask(carry) as u8;
  193|    907|            self.out <<= 8 - carry;
  194|  51.4k|        } else {
  195|  51.4k|            // Haven't filled the previous byte yet, so just shift the number to
  196|  51.4k|            // be aligned with where we are and fill the next leftmost bits.
  197|  51.4k|            self.out += n << (8 - j - i);
  198|  51.4k|        }
  199|  52.3k|        self.written += i;
  200|  52.3k|
  201|  52.3k|        if self.written % 8 == 0 {
  202|  9.60k|            self.path.push(self.out);
  203|  9.60k|            self.out = 0;
  204|  42.6k|        }
  205|  52.3k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension10path_bytes:
   46|  50.1k|    pub fn path_bytes(&self) -> &[u8] {
   47|  50.1k|        &self.path
   48|  50.1k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension9path_bits:
   42|  56.1k|    pub fn path_bits(&self) -> HashBits {
   43|  56.1k|        HashBits::new_from_slice(&self.path, self.length)
   44|  56.1k|    }
_RNvMs_NtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB4_16ExtensionBuilder5build:
  208|  16.8k|    pub fn build(mut self) -> Extension {
  209|  16.8k|        if self.written % 8 != 0 {
  210|  11.1k|            self.path.push(self.out);
  211|  11.1k|        }
  212|  16.8k|        Extension::new(self.written, self.path)
  213|  16.8k|    }
_RNvMs_NtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB4_16ExtensionBuilder3new:
  172|  16.8k|    pub fn new() -> Self {
  173|  16.8k|        Self {
  174|  16.8k|            written: 0,
  175|  16.8k|            out: 0,
  176|  16.8k|            path: Vec::new(),
  177|  16.8k|        }
  178|  16.8k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension3new:
   34|  16.8k|    pub fn new(length: u32, path: Vec<u8>) -> Self {
   35|  16.8k|        Self { length, path }
   36|  16.8k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension7unsplit:
  119|    436|    pub fn unsplit(ext1: &Self, idx: &Self, ext2: &Self) -> Result<Self, Error> {
  120|    436|        let bit_width = idx.length;
  121|    436|        Self::merge([ext1, idx, ext2], bit_width)
  122|    436|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension8from_idx:
  157|    436|    pub fn from_idx(idx: u8, bit_width: u32) -> Extension {
  158|    436|        let mut builder = ExtensionBuilder::new();
  159|    436|        builder.add(bit_width, idx);
  160|    436|        builder.build()
  161|    436|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension3len:
   38|   102k|    pub fn len(&self) -> u32 {
   39|   102k|        self.length
   40|   102k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension13longest_match:
   56|  47.4k|    pub fn longest_match(&self, hashed_key: &mut HashBits, bit_width: u32) -> Result<u32, Error> {
   57|  47.4k|        let mut path = self.path_bits();
   58|  47.4k|        let mut matched = 0;
   59|   257k|        while matched < self.length {
   60|   215k|            let consumed = hashed_key.consumed;
   61|   215k|            let n1 = hashed_key.next(bit_width)?;
   62|   215k|            let n2 = path.next(bit_width)?;
   63|   215k|            if n1 != n2 {
   64|  5.10k|                hashed_key.consumed = consumed;
   65|  5.10k|                break;
   66|   210k|            }
   67|   210k|            matched += bit_width;
   68|       |        }
   69|  47.4k|        Ok(matched)
   70|  47.4k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension8is_empty:
   50|   108k|    pub fn is_empty(&self) -> bool {
   51|   108k|        self.length == 0
   52|   108k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt3extNtB2_9Extension5split:
  110|  3.68k|    pub fn split(&self, consumed: u32, bit_width: u32) -> Result<(Self, Self, Self), Error> {
  111|  3.68k|        let mut path = self.path_bits();
  112|  3.68k|        let head = Self::from_bits(&mut path, consumed)?;
  113|  3.68k|        let idx = Self::from_bits(&mut path, bit_width)?;
  114|  3.68k|        let tail = Self::from_bits(&mut path, self.length - head.length - idx.length)?;
  115|  3.68k|        Ok((head, idx, tail))
  116|  3.68k|    }

_RINvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt9hash_bitsNtB3_8HashBits3newKj20_ECsdKADRZ4phoq_6simple:
   26|  31.8k|    pub fn new<const N: usize>(hash_buffer: &'a HashedKey<N>) -> HashBits<'a> {
   27|  31.8k|        Self::new_at_index(hash_buffer, 0)
   28|  31.8k|    }
_RINvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt9hash_bitsNtB3_8HashBits12new_at_indexKj20_ECsdKADRZ4phoq_6simple:
   31|  45.5k|    pub fn new_at_index<const N: usize>(
   32|  45.5k|        hash_buffer: &'a HashedKey<N>,
   33|  45.5k|        consumed: u32,
   34|  45.5k|    ) -> HashBits<'a> {
   35|  45.5k|        Self {
   36|  45.5k|            b: hash_buffer,
   37|  45.5k|            length: (hash_buffer.len() as u32) * u8::BITS,
   38|  45.5k|            consumed,
   39|  45.5k|        }
   40|  45.5k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt9hash_bitsNtB2_8HashBits4next:
   53|   695k|    pub fn next(&mut self, i: u32) -> Result<u32, Error> {
   54|   695k|        if i > 8 || i == 0 {
   55|      0|            return Err(Error::InvalidHashBitLen);
   56|   695k|        }
   57|   695k|        if self.consumed >= self.length {
   58|      0|            return Err(Error::MaxDepth);
   59|   695k|        }
   60|   695k|        let maxi = self.length - self.consumed;
   61|   695k|        // Only take what's left. If we consume 5 bits at a time from a 256 bit key,
   62|   695k|        // there will be 1 bit left at the bottom.
   63|   695k|        Ok(self.next_bits(std::cmp::min(i, maxi)))
   64|   695k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt9hash_bitsNtB2_8HashBits9next_bits:
   66|   711k|    fn next_bits(&mut self, i: u32) -> u32 {
   67|   711k|        let curbi = self.consumed / 8;
   68|   711k|        let leftb = 8 - (self.consumed % 8);
   69|   711k|
   70|   711k|        let curb = self.b[curbi as usize] as u32;
   71|   711k|        match i.cmp(&leftb) {
   72|       |            Ordering::Equal => {
   73|       |                // bits to consume is equal to the bits remaining in the currently indexed byte
   74|   108k|                let out = mkmask(i) & curb;
   75|   108k|                self.consumed += i;
   76|   108k|                out
   77|       |            }
   78|       |            Ordering::Less => {
   79|       |                // Consuming less than the remaining bits in the current byte
   80|   586k|                let a = curb & mkmask(leftb);
   81|   586k|                let b = a & !mkmask(leftb - i);
   82|   586k|                let c = b >> (leftb - i);
   83|   586k|                self.consumed += i;
   84|   586k|                c
   85|       |            }
   86|       |            Ordering::Greater => {
   87|       |                // Consumes remaining bits and remaining bits from a recursive call
   88|  16.3k|                let mut out = (mkmask(leftb) & curb) as u64;
   89|  16.3k|                out <<= i - leftb;
   90|  16.3k|                self.consumed += leftb;
   91|  16.3k|                out += self.next_bits(i - leftb) as u64;
   92|  16.3k|                out as u32
   93|       |            }
   94|       |        }
   95|   711k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt9hash_bitsNtB2_8HashBits14new_from_slice:
   43|  56.1k|    pub fn new_from_slice(hash_buffer: &'a HashedKeySlice, length: u32) -> HashBits<'a> {
   44|  56.1k|        Self {
   45|  56.1k|            b: hash_buffer,
   46|  56.1k|            length,
   47|  56.1k|            consumed: 0,
   48|  56.1k|        }
   49|  56.1k|    }
_RNvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt9hash_bitsNtB2_8HashBits3len:
   98|  4.95k|    pub fn len(&self) -> u32 {
   99|  4.95k|        self.length
  100|  4.95k|    }
_RNvNtCsbfz4AvxjbsN_13fvm_ipld_kamt9hash_bits6mkmaskB3_:
   21|  1.29M|pub(crate) fn mkmask(n: u32) -> u32 {
   22|  1.29M|    ((1u64 << n) - 1) as u32
   23|  1.29M|}

_RINvMNtCsbfz4AvxjbsN_13fvm_ipld_kamt2idNtB3_14IdentityHasher4hashRyEB5_:
   50|  38.7k|    pub fn hash<K: Hash>(key: K) -> HashedKey<32> {
   51|  38.7k|        let mut hasher = Self::default();
   52|  38.7k|        key.hash(&mut hasher);
   53|  38.7k|        hasher.bz
   54|  38.7k|    }
_RNvXs_NtCsbfz4AvxjbsN_13fvm_ipld_kamt2idNtB4_14IdentityHasherNtNtCshIAt2fZ6DPf_4core4hash6Hasher5write:
   62|  38.7k|    fn write(&mut self, bytes: &[u8]) {
   63|   309k|        for (i, byte) in bytes.iter().take(self.bz.len()).enumerate() {
   64|   309k|            self.bz[i] = *byte;
   65|   309k|        }
   66|  38.7k|    }
_RNvXse_NtCsbfz4AvxjbsN_13fvm_ipld_kamt2idNtB5_14IdentityHasherNtNtCshIAt2fZ6DPf_4core7default7Default7defaultB7_:
   44|  38.7k|#[derive(Default)]
_RNvXs7_NtCsbfz4AvxjbsN_13fvm_ipld_kamt2idNtB5_8IdentityINtB7_11AsHashedKeyyKj20_E13as_hashed_key:
   32|  38.7k|                fn as_hashed_key(key: &$t) -> Cow<HashedKey<32>> {
   33|  38.7k|                    Cow::Owned(IdentityHasher::hash(key))
   34|  38.7k|                }

_RNvMs0_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4kamtINtB5_4KamtRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyNtNtB7_2id8IdentityE15new_with_configCsdKADRZ4phoq_6simple:
   75|    785|    pub fn new_with_config(store: BS, conf: Config) -> Self {
   76|    785|        Self {
   77|    785|            root: Node::default(),
   78|    785|            store,
   79|    785|            conf,
   80|    785|            flushed_cid: None,
   81|    785|        }
   82|    785|    }
_RINvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4kamtINtB6_4KamtRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyNtNtB8_2id8IdentityE6deleteyECsdKADRZ4phoq_6simple:
  311|  6.39k|    pub fn delete<Q>(&mut self, k: &Q) -> Result<Option<V>, Error>
  312|  6.39k|    where
  313|  6.39k|        K: Borrow<Q>,
  314|  6.39k|        Q: PartialEq,
  315|  6.39k|        H: AsHashedKey<Q, N>,
  316|  6.39k|    {
  317|  6.39k|        let deleted = self.root.remove_entry(k, self.store.borrow(), &self.conf)?;
  318|       |
  319|  6.39k|        if deleted.is_some() {
  320|  1.63k|            self.flushed_cid = None;
  321|  4.76k|        }
  322|       |
  323|  6.39k|        Ok(deleted)
  324|  6.39k|    }
_RNvMs0_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4kamtINtB5_4KamtRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyNtNtB7_2id8IdentityE5flushCsdKADRZ4phoq_6simple:
  128|  5.19k|        if let Some(cid) = self.flushed_cid {
  129|    280|            return Ok(cid);
  130|  4.91k|        }
  131|  4.91k|        self.root.flush(self.store.borrow())?;
  132|  4.91k|        let cid = self.store.put_cbor(&self.root, Code::Blake2b256)?;
  133|  4.91k|        self.flushed_cid = Some(cid);
  134|  4.91k|        Ok(cid)
  135|  5.19k|    }
_RINvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4kamtINtB6_4KamtRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyNtNtB8_2id8IdentityE3getyECsdKADRZ4phoq_6simple:
  256|  4.83k|        match self.root.get(k, self.store.borrow(), &self.conf)? {
  257|    646|            Some(v) => Ok(Some(v)),
  258|  4.19k|            None => Ok(None),
  259|       |        }
  260|  4.83k|    }
_RNvMs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4kamtINtB5_4KamtRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreyyNtNtB7_2id8IdentityE3setCsdKADRZ4phoq_6simple:
  172|  20.6k|    pub fn set(&mut self, key: K, value: V) -> Result<Option<V>, Error>
  173|  20.6k|    where
  174|  20.6k|        V: PartialEq,
  175|  20.6k|    {
  176|  20.6k|        let (old, modified) = self
  177|  20.6k|            .root
  178|  20.6k|            .set(key, value, self.store.borrow(), &self.conf, true)?;
  179|       |
  180|  20.6k|        if modified {
  181|  19.0k|            self.flushed_cid = None;
  182|  19.0k|        }
  183|       |
  184|  20.6k|        Ok(old)
  185|  20.6k|    }

_RNvMs0_Csbfz4AvxjbsN_13fvm_ipld_kamtINtB5_12KeyValuePairyyE3newCsdKADRZ4phoq_6simple:
   97|  21.2k|    pub fn new(key: K, value: V) -> Self {
   98|  21.2k|        KeyValuePair(key, value)
   99|  21.2k|    }
_RINvXNvCsbfz4AvxjbsN_13fvm_ipld_kamt1__INtB5_12KeyValuePairyyENtNtCskJYdaI9Vvso_5serde3ser9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   83|  46.3k|#[derive(Debug, PartialEq, Serialize, Deserialize)]
_RNvMs_Csbfz4AvxjbsN_13fvm_ipld_kamtINtB4_12KeyValuePairyyE5valueCsdKADRZ4phoq_6simple:
   91|  6.89k|    pub fn value(&self) -> &V {
   92|  6.89k|        &self.1
   93|  6.89k|    }
_RNvMs_Csbfz4AvxjbsN_13fvm_ipld_kamtINtB4_12KeyValuePairyyE3keyCsdKADRZ4phoq_6simple:
   87|  38.1k|    pub fn key(&self) -> &K {
   88|  38.1k|        &self.0
   89|  38.1k|    }

_RNCINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB8_4NodeyyNtNtBa_2id8IdentityKj20_E9get_valueyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0CsdKADRZ4phoq_6simple:
  274|    646|                    .map(|kv| kv.value()));
_RINvXs_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_ENtNtCskJYdaI9Vvso_5serde3ser9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   41|  43.9k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   42|  43.9k|    where
   43|  43.9k|        S: Serializer,
   44|  43.9k|    {
   45|  43.9k|        (&self.bitfield, &self.pointers).serialize(serializer)
   46|  43.9k|    }
_RNCINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB8_4NodeyyNtNtBa_2id8IdentityKj20_E12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0CsdKADRZ4phoq_6simple:
  379|  1.93k|                        |midway, idx, tail| {
  380|  1.93k|                            midway.insert_child_dirty(idx, std::mem::take(node), tail);
  381|  1.93k|                        },
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E3getyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
  136|  4.83k|    pub fn get<Q, S: Blockstore>(
  137|  4.83k|        &self,
  138|  4.83k|        key: &Q,
  139|  4.83k|        store: &S,
  140|  4.83k|        conf: &Config,
  141|  4.83k|    ) -> Result<Option<&V>, Error>
  142|  4.83k|    where
  143|  4.83k|        K: Borrow<Q>,
  144|  4.83k|        Q: PartialEq,
  145|  4.83k|        H: AsHashedKey<Q, N>,
  146|  4.83k|    {
  147|  4.83k|        self.search(key, store, conf)
  148|  4.83k|    }
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E13get_child_mutCsdKADRZ4phoq_6simple:
  586|   118k|    fn get_child_mut(&mut self, i: usize) -> &mut Pointer<K, V, H, N> {
  587|   118k|        &mut self.pointers[i]
  588|   118k|    }
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E15split_extensionNCINvB2_12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0ECsdKADRZ4phoq_6simple:
  597|  1.75k|    fn split_extension<F>(
  598|  1.75k|        conf: &Config,
  599|  1.75k|        hashed_key: &mut HashBits,
  600|  1.75k|        part: &PartialMatch,
  601|  1.75k|        key: K,
  602|  1.75k|        value: V,
  603|  1.75k|        insert_pointer: F,
  604|  1.75k|    ) -> Result<Pointer<K, V, H, N>, Error>
  605|  1.75k|    where
  606|  1.75k|        F: FnOnce(&mut Node<K, V, H, N>, u32, Extension),
  607|  1.75k|    {
  608|  1.75k|        // Need a new node at the split point.
  609|  1.75k|        let mut midway = Node::<K, V, H, N>::default();
  610|       |
  611|       |        // Point at the original node the link pointed at in the next nibble of the path after the split.
  612|  1.75k|        let (head, idx, tail) = part.split(conf.bit_width)?;
  613|       |
  614|       |        // Insert pointer to original.
  615|  1.75k|        insert_pointer(&mut midway, idx, tail);
  616|       |
  617|       |        // Insert the value at the next nibble of the hash.
  618|  1.75k|        let idx = hashed_key.next(conf.bit_width)?;
  619|  1.75k|        midway.insert_child(idx, key, value);
  620|  1.75k|
  621|  1.75k|        // Replace the link in this node with one pointing at the midway node.
  622|  1.75k|        Ok(Pointer::Dirty {
  623|  1.75k|            node: Box::new(midway),
  624|  1.75k|            ext: head,
  625|  1.75k|        })
  626|  1.75k|    }
_RNvXs1_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_ENtNtCshIAt2fZ6DPf_4core7default7Default7defaultCsdKADRZ4phoq_6simple:
   64|  86.9k|    fn default() -> Self {
   65|  86.9k|        Node {
   66|  86.9k|            bitfield: Bitfield::zero(),
   67|  86.9k|            pointers: Vec::new(),
   68|  86.9k|        }
   69|  86.9k|    }
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E6searchyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
  209|  4.83k|    fn search<Q, S: Blockstore>(
  210|  4.83k|        &self,
  211|  4.83k|        key: &Q,
  212|  4.83k|        store: &S,
  213|  4.83k|        conf: &Config,
  214|  4.83k|    ) -> Result<Option<&V>, Error>
  215|  4.83k|    where
  216|  4.83k|        K: Borrow<Q>,
  217|  4.83k|        Q: PartialEq,
  218|  4.83k|        H: AsHashedKey<Q, N>,
  219|  4.83k|    {
  220|  4.83k|        self.get_value(
  221|  4.83k|            &mut HashBits::new(H::as_hashed_key(key).as_ref()),
  222|  4.83k|            conf,
  223|  4.83k|            key,
  224|  4.83k|            store,
  225|  4.83k|        )
  226|  4.83k|    }
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E12remove_entryyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
  151|  6.39k|    pub fn remove_entry<Q, S: Blockstore>(
  152|  6.39k|        &mut self,
  153|  6.39k|        key: &Q,
  154|  6.39k|        store: &S,
  155|  6.39k|        conf: &Config,
  156|  6.39k|    ) -> Result<Option<V>, Error>
  157|  6.39k|    where
  158|  6.39k|        K: Borrow<Q>,
  159|  6.39k|        Q: PartialEq,
  160|  6.39k|        H: AsHashedKey<Q, N>,
  161|  6.39k|    {
  162|  6.39k|        self.rm_value(
  163|  6.39k|            &mut HashBits::new(H::as_hashed_key(key).as_ref()),
  164|  6.39k|            conf,
  165|  6.39k|            0,
  166|  6.39k|            key,
  167|  6.39k|            store,
  168|  6.39k|        )
  169|  6.39k|    }
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E18insert_child_dirtyCsdKADRZ4phoq_6simple:
  574|  6.02k|    fn insert_child_dirty(&mut self, idx: u32, node: Box<Node<K, V, H, N>>, ext: Extension) {
  575|  6.02k|        let i = self.index_for_bit_pos(idx);
  576|  6.02k|        self.bitfield.set_bit(idx);
  577|  6.02k|        self.pointers.insert(i, Pointer::Dirty { node, ext })
  578|  6.02k|    }
_RNCINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB8_4NodeyyNtNtBa_2id8IdentityKj20_E12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs3_0CsdKADRZ4phoq_6simple:
  453|  3.92k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
_RNCINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB8_4NodeyyNtNtBa_2id8IdentityKj20_E12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs1_0CsdKADRZ4phoq_6simple:
  388|  17.6k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
_RNCINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB8_4NodeyyNtNtBa_2id8IdentityKj20_E12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0CsdKADRZ4phoq_6simple:
  355|  1.75k|                        |midway, idx, tail| {
  356|  1.75k|                            midway.insert_child_link(idx, *cid, tail, std::mem::take(cache));
  357|  1.75k|                        },
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E8rm_valueyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
  464|  17.5k|    fn rm_value<Q, S: Blockstore>(
  465|  17.5k|        &mut self,
  466|  17.5k|        hashed_key: &mut HashBits,
  467|  17.5k|        conf: &Config,
  468|  17.5k|        depth: u32,
  469|  17.5k|        key: &Q,
  470|  17.5k|        store: &S,
  471|  17.5k|    ) -> Result<Option<V>, Error>
  472|  17.5k|    where
  473|  17.5k|        K: Borrow<Q>,
  474|  17.5k|        Q: PartialEq,
  475|  17.5k|    {
  476|  17.5k|        let idx = hashed_key.next(conf.bit_width)?;
  477|       |
  478|       |        // No existing values at this point.
  479|  17.5k|        if !self.bitfield.test_bit(idx) {
  480|  1.70k|            return Ok(None);
  481|  15.8k|        }
  482|  15.8k|
  483|  15.8k|        let cindex = self.index_for_bit_pos(idx);
  484|  15.8k|        let child = self.get_child_mut(cindex);
  485|  15.8k|
  486|  15.8k|        match child {
  487|  5.44k|            Pointer::Link { cid, cache, ext } => match match_extension(conf, hashed_key, ext)? {
  488|  5.01k|                ExtensionMatch::Full { skipped } => {
  489|  5.01k|                    cache.get_or_try_init(|| {
  490|       |                        store
  491|       |                            .get_cbor(cid)?
  492|       |                            .ok_or_else(|| Error::CidNotFound(cid.to_string()))
  493|  5.01k|                    })?;
  494|  5.01k|                    let child_node = cache.get_mut().expect("filled line above");
  495|       |
  496|  5.01k|                    let deleted =
  497|  5.01k|                        child_node.rm_value(hashed_key, conf, depth + 1 + skipped, key, store)?;
  498|       |
  499|  5.01k|                    if deleted.is_some() {
  500|  2.31k|                        *child = Pointer::Dirty {
  501|  2.31k|                            node: std::mem::take(child_node),
  502|  2.31k|                            ext: std::mem::take(ext),
  503|  2.31k|                        };
  504|  2.31k|                        if Self::clean(child, conf, depth)? {
  505|    260|                            self.rm_child(cindex, idx);
  506|  2.05k|                        }
  507|  2.70k|                    }
  508|       |
  509|  5.01k|                    Ok(deleted)
  510|       |                }
  511|    427|                ExtensionMatch::Partial(_) => Ok(None),
  512|       |            },
  513|  6.62k|            Pointer::Dirty { node, ext } => {
  514|  6.62k|                match match_extension(conf, hashed_key, ext)? {
  515|  6.17k|                    ExtensionMatch::Full { skipped } => {
  516|       |                        // Delete value and return deleted value
  517|  6.17k|                        let deleted =
  518|  6.17k|                            node.rm_value(hashed_key, conf, depth + 1 + skipped, key, store)?;
  519|       |
  520|  6.17k|                        if deleted.is_some() && Self::clean(child, conf, depth)? {
  521|    237|                            self.rm_child(cindex, idx);
  522|  5.93k|                        }
  523|       |
  524|  6.17k|                        Ok(deleted)
  525|       |                    }
  526|    454|                    ExtensionMatch::Partial(_) => Ok(None),
  527|       |                }
  528|       |            }
  529|  3.81k|            Pointer::Values(vals) => {
  530|       |                // Delete value
  531|  5.19k|                for (i, p) in vals.iter().enumerate() {
  532|  5.19k|                    if key.eq(p.key().borrow()) {
  533|  1.63k|                        let old = if vals.len() == 1 {
  534|  1.23k|                            if let Pointer::Values(new_v) = self.rm_child(cindex, idx) {
  535|  1.23k|                                new_v.into_iter().next().unwrap()
  536|       |                            } else {
  537|      0|                                unreachable!()
  538|       |                            }
  539|       |                        } else {
  540|    400|                            vals.remove(i)
  541|       |                        };
  542|  1.63k|                        return Ok(Some(old.1));
  543|  3.56k|                    }
  544|       |                }
  545|       |
  546|  2.17k|                Ok(None)
  547|       |            }
  548|       |        }
  549|  17.5k|    }
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
  290|   120k|    fn modify_value<S: Blockstore>(
  291|   120k|        &mut self,
  292|   120k|        hashed_key: &mut HashBits,
  293|   120k|        conf: &Config,
  294|   120k|        depth: u32,
  295|   120k|        key: K,
  296|   120k|        value: V,
  297|   120k|        store: &S,
  298|   120k|        overwrite: bool,
  299|   120k|    ) -> Result<(Option<V>, bool), Error>
  300|   120k|    where
  301|   120k|        V: PartialEq,
  302|   120k|    {
  303|   120k|        let idx = hashed_key.next(conf.bit_width)?;
  304|       |
  305|       |        // No existing values at this point.
  306|   120k|        if !self.bitfield.test_bit(idx) {
  307|  18.7k|            if conf.min_data_depth <= depth {
  308|  14.6k|                self.insert_child(idx, key, value);
  309|  14.6k|            } else {
  310|       |                // Need to insert some empty nodes reserved for links.
  311|  4.09k|                let mut sub = Node::<K, V, H, N>::default();
  312|  4.09k|                sub.modify_value(hashed_key, conf, depth + 1, key, value, store, overwrite)?;
  313|  4.09k|                self.insert_child_dirty(idx, Box::new(sub), Extension::default());
  314|       |            }
  315|  18.7k|            return Ok((None, true));
  316|   102k|        }
  317|   102k|
  318|   102k|        let cindex = self.index_for_bit_pos(idx);
  319|   102k|        let child = self.get_child_mut(cindex);
  320|   102k|
  321|   102k|        match child {
  322|  35.4k|            Pointer::Link { cid, cache, ext } => match match_extension(conf, hashed_key, ext)? {
  323|  33.6k|                ExtensionMatch::Full { skipped } => {
  324|  33.6k|                    cache.get_or_try_init(|| {
  325|       |                        store
  326|       |                            .get_cbor(cid)?
  327|       |                            .ok_or_else(|| Error::CidNotFound(cid.to_string()))
  328|  33.6k|                    })?;
  329|  33.6k|                    let child_node = cache.get_mut().expect("filled line above");
  330|       |
  331|  33.6k|                    let (old, modified) = child_node.modify_value(
  332|  33.6k|                        hashed_key,
  333|  33.6k|                        conf,
  334|  33.6k|                        depth + 1 + skipped,
  335|  33.6k|                        key,
  336|  33.6k|                        value,
  337|  33.6k|                        store,
  338|  33.6k|                        overwrite,
  339|  33.6k|                    )?;
  340|  33.6k|                    if modified {
  341|  29.9k|                        *child = Pointer::Dirty {
  342|  29.9k|                            node: std::mem::take(child_node),
  343|  29.9k|                            ext: std::mem::take(ext),
  344|  29.9k|                        };
  345|  29.9k|                    }
  346|  33.6k|                    Ok((old, modified))
  347|       |                }
  348|  1.75k|                ExtensionMatch::Partial(part) => {
  349|  1.75k|                    *child = Self::split_extension(
  350|  1.75k|                        conf,
  351|  1.75k|                        hashed_key,
  352|  1.75k|                        &part,
  353|  1.75k|                        key,
  354|  1.75k|                        value,
  355|  1.75k|                        |midway, idx, tail| {
  356|       |                            midway.insert_child_link(idx, *cid, tail, std::mem::take(cache));
  357|  1.75k|                        },
  358|  1.75k|                    )?;
  359|  1.75k|                    Ok((None, true))
  360|       |                }
  361|       |            },
  362|  52.6k|            Pointer::Dirty { node, ext } => match match_extension(conf, hashed_key, ext)? {
  363|  50.6k|                ExtensionMatch::Full { skipped } => node.modify_value(
  364|  50.6k|                    hashed_key,
  365|  50.6k|                    conf,
  366|  50.6k|                    depth + 1 + skipped,
  367|  50.6k|                    key,
  368|  50.6k|                    value,
  369|  50.6k|                    store,
  370|  50.6k|                    overwrite,
  371|  50.6k|                ),
  372|  1.93k|                ExtensionMatch::Partial(part) => {
  373|  1.93k|                    *child = Self::split_extension(
  374|  1.93k|                        conf,
  375|  1.93k|                        hashed_key,
  376|  1.93k|                        &part,
  377|  1.93k|                        key,
  378|  1.93k|                        value,
  379|  1.93k|                        |midway, idx, tail| {
  380|       |                            midway.insert_child_dirty(idx, std::mem::take(node), tail);
  381|  1.93k|                        },
  382|  1.93k|                    )?;
  383|  1.93k|                    Ok((None, true))
  384|       |                }
  385|       |            },
  386|  14.1k|            Pointer::Values(vals) => {
  387|       |                // Update, if the key already exists.
  388|  14.1k|                if let Some(i) = vals.iter().position(|p| p.key() == &key) {
  389|  6.24k|                    if overwrite {
  390|       |                        // If value changed, the parent nodes need to be marked as dirty.
  391|       |                        // ! The assumption here is that `PartialEq` is implemented correctly,
  392|       |                        // ! and that if that is true, the serialized bytes are equal.
  393|       |                        // ! To be absolutely sure, can serialize each value and compare or
  394|       |                        // ! refactor the Hamt to not be type safe and serialize on entry and
  395|       |                        // ! exit. These both come at costs, and this isn't a concern.
  396|  6.24k|                        let value_changed = vals[i].value() != &value;
  397|  6.24k|                        return Ok((
  398|  6.24k|                            Some(std::mem::replace(&mut vals[i].1, value)),
  399|  6.24k|                            value_changed,
  400|  6.24k|                        ));
  401|       |                    } else {
  402|       |                        // Can't overwrite, return None and false that the Node was not modified.
  403|      0|                        return Ok((None, false));
  404|       |                    }
  405|  7.85k|                }
  406|  7.85k|
  407|  7.85k|                // If the array is full, create a subshard and insert everything
  408|  7.85k|                if vals.len() >= conf.max_array_width {
  409|  4.95k|                    let kvs = std::mem::take(vals);
  410|  4.95k|                    let hashes = kvs
  411|  4.95k|                        .iter()
  412|  4.95k|                        .map(|kv| H::as_hashed_key(kv.key()).into_owned())
  413|  4.95k|                        .collect::<Vec<_>>();
  414|       |
  415|       |                    // Find the longest common prefix between the new key and the existing keys that fall into the bucket.
  416|  4.95k|                    let ext = Self::find_longest_extension(conf, hashed_key, &hashes)?;
  417|  4.95k|                    let skipped = ext.len() / conf.bit_width;
  418|  4.95k|
  419|  4.95k|                    let consumed = hashed_key.consumed;
  420|  4.95k|                    let mut sub = Node::<K, V, H, N>::default();
  421|  4.95k|                    let modified = sub.modify_value(
  422|  4.95k|                        hashed_key,
  423|  4.95k|                        conf,
  424|  4.95k|                        depth + 1 + skipped,
  425|  4.95k|                        key,
  426|  4.95k|                        value,
  427|  4.95k|                        store,
  428|  4.95k|                        overwrite,
  429|  4.95k|                    )?;
  430|       |
  431|  6.86k|                    for (kv, h) in kvs.into_iter().zip(hashes) {
  432|  6.86k|                        sub.modify_value(
  433|  6.86k|                            &mut HashBits::new_at_index(&h, consumed),
  434|  6.86k|                            conf,
  435|  6.86k|                            depth + 1 + skipped,
  436|  6.86k|                            kv.0,
  437|  6.86k|                            kv.1,
  438|  6.86k|                            store,
  439|  6.86k|                            overwrite,
  440|  6.86k|                        )?;
  441|       |                    }
  442|       |
  443|  4.95k|                    *child = Pointer::Dirty {
  444|  4.95k|                        node: Box::new(sub),
  445|  4.95k|                        ext,
  446|  4.95k|                    };
  447|  4.95k|
  448|  4.95k|                    return Ok(modified);
  449|  2.90k|                }
  450|  2.90k|
  451|  2.90k|                // Otherwise insert the element into the array in order.
  452|  2.90k|                let max = vals.len();
  453|  2.90k|                let idx = vals.iter().position(|c| c.key() > &key).unwrap_or(max);
  454|  2.90k|
  455|  2.90k|                let np = KeyValuePair::new(key, value);
  456|  2.90k|                vals.insert(idx, np);
  457|  2.90k|
  458|  2.90k|                Ok((None, true))
  459|       |            }
  460|       |        }
  461|   120k|    }
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E8rm_childCsdKADRZ4phoq_6simple:
  551|  1.72k|    fn rm_child(&mut self, i: usize, idx: u32) -> Pointer<K, V, H, N> {
  552|  1.72k|        self.bitfield.clear_bit(idx);
  553|  1.72k|        self.pointers.remove(i)
  554|  1.72k|    }
_RNCINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB8_4NodeyyNtNtBa_2id8IdentityKj20_E9get_valueyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs_0CsdKADRZ4phoq_6simple:
  273|  3.22k|                    .find(|kv| key.eq(kv.key().borrow()))
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E17insert_child_linkCsdKADRZ4phoq_6simple:
  562|  1.75k|    fn insert_child_link(
  563|  1.75k|        &mut self,
  564|  1.75k|        idx: u32,
  565|  1.75k|        cid: Cid,
  566|  1.75k|        ext: Extension,
  567|  1.75k|        cache: OnceCell<Box<Node<K, V, H, N>>>,
  568|  1.75k|    ) {
  569|  1.75k|        let i = self.index_for_bit_pos(idx);
  570|  1.75k|        self.bitfield.set_bit(idx);
  571|  1.75k|        self.pointers.insert(i, Pointer::Link { cid, ext, cache })
  572|  1.75k|    }
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E5cleanCsdKADRZ4phoq_6simple:
  633|  5.23k|        match child.clean(conf, depth) {
  634|  4.73k|            Ok(()) => Ok(false),
  635|    497|            Err(Error::ZeroPointers) if depth < conf.min_data_depth => Ok(true),
  636|      0|            Err(err) => Err(err),
  637|       |        }
  638|  5.23k|    }
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E9get_childCsdKADRZ4phoq_6simple:
  590|  10.3k|    fn get_child(&self, i: usize) -> &Pointer<K, V, H, N> {
  591|  10.3k|        &self.pointers[i]
  592|  10.3k|    }
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E15split_extensionNCINvB2_12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs0_0ECsdKADRZ4phoq_6simple:
  597|  1.93k|    fn split_extension<F>(
  598|  1.93k|        conf: &Config,
  599|  1.93k|        hashed_key: &mut HashBits,
  600|  1.93k|        part: &PartialMatch,
  601|  1.93k|        key: K,
  602|  1.93k|        value: V,
  603|  1.93k|        insert_pointer: F,
  604|  1.93k|    ) -> Result<Pointer<K, V, H, N>, Error>
  605|  1.93k|    where
  606|  1.93k|        F: FnOnce(&mut Node<K, V, H, N>, u32, Extension),
  607|  1.93k|    {
  608|  1.93k|        // Need a new node at the split point.
  609|  1.93k|        let mut midway = Node::<K, V, H, N>::default();
  610|       |
  611|       |        // Point at the original node the link pointed at in the next nibble of the path after the split.
  612|  1.93k|        let (head, idx, tail) = part.split(conf.bit_width)?;
  613|       |
  614|       |        // Insert pointer to original.
  615|  1.93k|        insert_pointer(&mut midway, idx, tail);
  616|       |
  617|       |        // Insert the value at the next nibble of the hash.
  618|  1.93k|        let idx = hashed_key.next(conf.bit_width)?;
  619|  1.93k|        midway.insert_child(idx, key, value);
  620|  1.93k|
  621|  1.93k|        // Replace the link in this node with one pointing at the midway node.
  622|  1.93k|        Ok(Pointer::Dirty {
  623|  1.93k|            node: Box::new(midway),
  624|  1.93k|            ext: head,
  625|  1.93k|        })
  626|  1.93k|    }
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E3setRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
  112|  20.6k|    pub fn set<S: Blockstore>(
  113|  20.6k|        &mut self,
  114|  20.6k|        key: K,
  115|  20.6k|        value: V,
  116|  20.6k|        store: &S,
  117|  20.6k|        conf: &Config,
  118|  20.6k|        overwrite: bool,
  119|  20.6k|    ) -> Result<(Option<V>, bool), Error>
  120|  20.6k|    where
  121|  20.6k|        V: PartialEq,
  122|  20.6k|    {
  123|  20.6k|        let hashed = H::as_hashed_key(&key).into_owned();
  124|  20.6k|        self.modify_value(
  125|  20.6k|            &mut HashBits::new(&hashed),
  126|  20.6k|            conf,
  127|  20.6k|            0,
  128|  20.6k|            key,
  129|  20.6k|            value,
  130|  20.6k|            store,
  131|  20.6k|            overwrite,
  132|  20.6k|        )
  133|  20.6k|    }
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E22find_longest_extensionCsdKADRZ4phoq_6simple:
  642|  4.95k|    fn find_longest_extension(
  643|  4.95k|        conf: &Config,
  644|  4.95k|        hashed_key: &mut HashBits,
  645|  4.95k|        hashes: &[HashedKey<N>],
  646|  4.95k|    ) -> Result<Extension, Error> {
  647|  4.95k|        Extension::longest_common_prefix(hashed_key, conf.bit_width, hashes)
  648|  4.95k|    }
_RNCINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB8_4NodeyyNtNtBa_2id8IdentityKj20_E12modify_valueRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreEs2_0CsdKADRZ4phoq_6simple:
  412|  6.86k|                        .map(|kv| H::as_hashed_key(kv.key()).into_owned())
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E12insert_childCsdKADRZ4phoq_6simple:
  556|  18.3k|    fn insert_child(&mut self, idx: u32, key: K, value: V) {
  557|  18.3k|        let i = self.index_for_bit_pos(idx);
  558|  18.3k|        self.bitfield.set_bit(idx);
  559|  18.3k|        self.pointers.insert(i, Pointer::from_key_value(key, value))
  560|  18.3k|    }
_RNvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB5_4NodeyyNtNtB7_2id8IdentityKj20_E17index_for_bit_posCsdKADRZ4phoq_6simple:
  580|   154k|    fn index_for_bit_pos(&self, bp: u32) -> usize {
  581|   154k|        let mask = Bitfield::zero().set_bits_le(bp);
  582|   154k|        assert_eq!(mask.count_ones(), bp as usize);
  583|   154k|        mask.and(&self.bitfield).count_ones()
  584|   154k|    }
_RINvMs2_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E5flushRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
   77|  43.9k|    pub fn flush<S: Blockstore>(&mut self, store: &S) -> Result<(), Error> {
   78|   136k|        for pointer in &mut self.pointers {
   79|  92.1k|            if let Pointer::Dirty { node, ext } = pointer {
   80|       |                // Flush cached sub node to clear it's cache
   81|  39.0k|                node.flush(store)?;
   82|       |
   83|       |                // Put node in blockstore and retrieve Cid
   84|  39.0k|                let cid = store.put_cbor(node, Code::Blake2b256)?;
   85|       |
   86|       |                // Can keep the flushed node in link cache
   87|  39.0k|                let cache = OnceCell::from(std::mem::take(node));
   88|  39.0k|
   89|  39.0k|                // Replace cached node with Cid link
   90|  39.0k|                *pointer = Pointer::Link {
   91|  39.0k|                    cid,
   92|  39.0k|                    ext: std::mem::take(ext),
   93|  39.0k|                    cache,
   94|  39.0k|                };
   95|  53.1k|            }
   96|       |        }
   97|       |
   98|  43.9k|        Ok(())
   99|  43.9k|    }
_RINvMs3_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeINtB6_4NodeyyNtNtB8_2id8IdentityKj20_E9get_valueyRNtNtCseMY6HJzIUz9_19fvm_ipld_blockstore6memory16MemoryBlockstoreECsdKADRZ4phoq_6simple:
  228|  12.1k|    fn get_value<Q, S: Blockstore>(
  229|  12.1k|        &self,
  230|  12.1k|        hashed_key: &mut HashBits,
  231|  12.1k|        conf: &Config,
  232|  12.1k|        key: &Q,
  233|  12.1k|        store: &S,
  234|  12.1k|    ) -> Result<Option<&V>, Error>
  235|  12.1k|    where
  236|  12.1k|        K: Borrow<Q>,
  237|  12.1k|        Q: PartialEq,
  238|  12.1k|    {
  239|  12.1k|        let idx = hashed_key.next(conf.bit_width)?;
  240|       |
  241|  12.1k|        if !self.bitfield.test_bit(idx) {
  242|  1.87k|            return Ok(None);
  243|  10.3k|        }
  244|  10.3k|
  245|  10.3k|        let cindex = self.index_for_bit_pos(idx);
  246|  10.3k|        let child = self.get_child(cindex);
  247|       |
  248|  10.3k|        let (node, ext) = match child {
  249|  3.70k|            Pointer::Link { cid, cache, ext } => {
  250|  3.70k|                let node = if let Some(cached_node) = cache.get() {
  251|       |                    // Link node is cached
  252|  3.70k|                    cached_node
  253|       |                } else {
  254|      0|                    let node: Box<Node<K, V, H, N>> = if let Some(node) = store.get_cbor(cid)? {
  255|      0|                        node
  256|       |                    } else {
  257|       |                        #[cfg(not(feature = "ignore-dead-links"))]
  258|      0|                        return Err(Error::CidNotFound(cid.to_string()));
  259|       |
  260|       |                        #[cfg(feature = "ignore-dead-links")]
  261|       |                        return Ok(None);
  262|       |                    };
  263|       |                    // Intentionally ignoring error, cache will always be the same.
  264|      0|                    cache.get_or_init(|| node)
  265|       |                };
  266|       |
  267|  3.70k|                (node, ext)
  268|       |            }
  269|  4.18k|            Pointer::Dirty { node, ext } => (node, ext),
  270|  2.42k|            Pointer::Values(vals) => {
  271|  2.42k|                return Ok(vals
  272|  2.42k|                    .iter()
  273|  2.42k|                    .find(|kv| key.eq(kv.key().borrow()))
  274|  2.42k|                    .map(|kv| kv.value()));
  275|       |            }
  276|       |        };
  277|       |
  278|  7.89k|        match match_extension(conf, hashed_key, ext)? {
  279|  7.35k|            ExtensionMatch::Full { .. } => node.get_value(hashed_key, conf, key, store),
  280|    535|            ExtensionMatch::Partial { .. } => Ok(None),
  281|       |        }
  282|  12.1k|    }
_RNvMs4_NtCsbfz4AvxjbsN_13fvm_ipld_kamt4nodeNtB5_12PartialMatch5split:
  692|  3.68k|    pub fn split(&self, bit_width: u32) -> Result<(Extension, u32, Extension), Error> {
  693|  3.68k|        let (head, idx, tail) = self.ext.split(self.matched, bit_width)?;
  694|  3.68k|        let idx = idx.path_bits().next(bit_width)?;
  695|       |
  696|  3.68k|        Ok((head, idx, tail))
  697|  3.68k|    }
_RNvNtCsbfz4AvxjbsN_13fvm_ipld_kamt4node15match_extension:
  654|   108k|fn match_extension<'a>(
  655|   108k|    conf: &Config,
  656|   108k|    hashed_key: &mut HashBits,
  657|   108k|    ext: &'a Extension,
  658|   108k|) -> Result<ExtensionMatch<'a>, Error> {
  659|   108k|    if ext.is_empty() {
  660|  60.5k|        Ok(ExtensionMatch::Full { skipped: 0 })
  661|       |    } else {
  662|  47.4k|        let matched = ext.longest_match(hashed_key, conf.bit_width)?;
  663|  47.4k|        let skipped = matched / conf.bit_width;
  664|  47.4k|
  665|  47.4k|        if matched == ext.len() {
  666|  42.3k|            Ok(ExtensionMatch::Full { skipped })
  667|       |        } else {
  668|  5.10k|            Ok(ExtensionMatch::Partial(PartialMatch { ext, matched }))
  669|       |        }
  670|       |    }
  671|   108k|}

_RINvXNvNvXs_NtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointerINtBa_7PointerpppKpENtNtCskJYdaI9Vvso_5serde3ser9Serialize9serialize1__INtB5_10PointerSeryyEB17_9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   63|  92.1k|        #[derive(Serialize)]
_RNCNvMs2_NtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointerINtB7_7PointeryyNtNtB9_2id8IdentityKj20_E5cleans_0CsdKADRZ4phoq_6simple:
  209|    645|                    child_vals.sort_unstable_by(|a, b| {
  210|    645|                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  211|    645|                    });
_RNCNvMs2_NtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointerINtB7_7PointeryyNtNtB9_2id8IdentityKj20_E5clean0CsdKADRZ4phoq_6simple:
  198|    517|                            if let Pointer::Values(kvs) = p {
  199|    517|                                Some(std::mem::take(kvs))
  200|       |                            } else {
  201|      0|                                None
  202|       |                            }
  203|    517|                        })
_RINvXs_NtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointerINtB5_7PointeryyNtNtB7_2id8IdentityKj20_ENtNtCskJYdaI9Vvso_5serde3ser9Serialize9serializeQINtNtCs72RdNaganFG_18serde_ipld_dagcbor3ser10SerializerNtNtNtCsc2QbebHUrwz_7cbor4ii4core5utils9BufWriterEECsdKADRZ4phoq_6simple:
   59|  92.1k|    fn serialize<S>(&self, serializer: S) -> Result<S::Ok, S::Error>
   60|  92.1k|    where
   61|  92.1k|        S: Serializer,
   62|  92.1k|    {
   63|  92.1k|        #[derive(Serialize)]
   64|  92.1k|        enum PointerSer<'a, K, V> {
   65|  92.1k|            #[serde(rename = "v")]
   66|  92.1k|            Values(&'a [KeyValuePair<K, V>]),
   67|  92.1k|            #[serde(rename = "l")]
   68|  92.1k|            Link(&'a Cid, u32, BytesSer<'a>),
   69|  92.1k|        }
   70|  92.1k|        match self {
   71|  41.9k|            Pointer::Values(vals) => PointerSer::Values(vals),
   72|  50.1k|            Pointer::Link { cid, ext, .. } => {
   73|  50.1k|                PointerSer::Link(cid, ext.len(), BytesSer(ext.path_bytes()))
   74|       |            }
   75|       |            Pointer::Dirty { .. } => {
   76|      0|                return Err(ser::Error::custom("Cannot serialize cached values"))
   77|       |            }
   78|       |        }
   79|  92.1k|        .serialize(serializer)
   80|  92.1k|    }
_RNvMs2_NtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointerINtB5_7PointeryyNtNtB7_2id8IdentityKj20_E14from_key_valueCsdKADRZ4phoq_6simple:
  121|  18.3k|    pub(crate) fn from_key_value(key: K, value: V) -> Self {
  122|  18.3k|        Pointer::Values(vec![KeyValuePair::new(key, value)])
  123|  18.3k|    }
_RNvMs2_NtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointerINtB5_7PointeryyNtNtB7_2id8IdentityKj20_E5cleanCsdKADRZ4phoq_6simple:
  127|  5.23k|    pub(crate) fn clean(&mut self, conf: &Config, depth: u32) -> Result<(), Error> {
  128|  5.23k|        match self {
  129|  5.23k|            Pointer::Dirty { node: n, ext: ext1 } => match n.pointers.len() {
  130|    497|                0 => Err(Error::ZeroPointers),
  131|  4.73k|                _ if depth < conf.min_data_depth => {
  132|    384|                    // We are in the shallows where we don't want key-value pairs, just links,
  133|    384|                    // so as long as they are pointing at non-empty nodes we can keep them.
  134|    384|                    // The rest of the rules would either move key-value pairs up, or undo a split.
  135|    384|                    // But if we use extensions and minimum data depth, splits will only happen after
  136|    384|                    // the minimum data depth as well, and these don't need undoing. So we can skip.
  137|    384|                    Ok(())
  138|       |                }
  139|       |                1 => {
  140|       |                    // Node has only one pointer, swap with parent node
  141|       |                    // If all `self` does is Link to `n`, and all `n` does is Link to `sub`, and we're using extensions,
  142|       |                    // then `self` could Link to `sub` directly. `n` was most likely the result of a split, but one of
  143|       |                    // the nodes it pointed at had been removed since.
  144|       |
  145|    867|                    match &mut n.pointers[0] {
  146|    431|                        Pointer::Values(vals) => {
  147|    431|                            // Take child values, to ensure canonical ordering
  148|    431|                            let values = std::mem::take(vals);
  149|    431|
  150|    431|                            // move parent node up
  151|    431|                            *self = Pointer::Values(values)
  152|       |                        }
  153|       |                        Pointer::Link {
  154|    224|                            cid,
  155|    224|                            ext: ext2,
  156|    224|                            cache,
  157|       |                        } => {
  158|       |                            // Replace `self` with a
  159|    224|                            let ext = unsplit_ext(conf, &n.bitfield, ext1, ext2)?;
  160|    224|                            *self = Pointer::Link {
  161|    224|                                cid: *cid,
  162|    224|                                ext,
  163|    224|                                cache: std::mem::take(cache),
  164|    224|                            }
  165|       |                        }
  166|       |                        Pointer::Dirty {
  167|    212|                            node: sub,
  168|    212|                            ext: ext2,
  169|       |                        } => {
  170|    212|                            let ext = unsplit_ext(conf, &n.bitfield, ext1, ext2)?;
  171|    212|                            *self = Pointer::Dirty {
  172|    212|                                node: std::mem::take(sub),
  173|    212|                                ext,
  174|    212|                            }
  175|       |                        }
  176|       |                    }
  177|    867|                    Ok(())
  178|       |                }
  179|  3.48k|                w if 2 <= w && w <= conf.max_array_width => {
  180|    976|                    // If more child values than max width, nothing to change.
  181|    976|                    let mut children_len = 0;
  182|  1.53k|                    for c in n.pointers.iter() {
  183|  1.53k|                        if let Pointer::Values(vals) = c {
  184|  1.02k|                            children_len += vals.len();
  185|  1.02k|                        } else {
  186|    509|                            return Ok(());
  187|       |                        }
  188|       |                    }
  189|    467|                    if children_len > conf.max_array_width {
  190|    209|                        return Ok(());
  191|    258|                    }
  192|    258|
  193|    258|                    // Collect values from child nodes to collapse.
  194|    258|                    let mut child_vals: Vec<KeyValuePair<K, V>> = n
  195|    258|                        .pointers
  196|    258|                        .iter_mut()
  197|    258|                        .filter_map(|p| {
  198|       |                            if let Pointer::Values(kvs) = p {
  199|       |                                Some(std::mem::take(kvs))
  200|       |                            } else {
  201|       |                                None
  202|       |                            }
  203|    258|                        })
  204|    258|                        .flatten()
  205|    258|                        .collect();
  206|    258|
  207|    258|                    // Sorting by key, values are inserted based on the ordering of the key itself,
  208|    258|                    // so when collapsed, it needs to be ensured that this order is equal.
  209|    258|                    child_vals.sort_unstable_by(|a, b| {
  210|       |                        a.key().partial_cmp(b.key()).unwrap_or(Ordering::Equal)
  211|    258|                    });
  212|    258|
  213|    258|                    // Replace link node with child values
  214|    258|                    *self = Pointer::Values(child_vals);
  215|    258|                    Ok(())
  216|       |                }
  217|  2.51k|                _ => Ok(()),
  218|       |            },
  219|      0|            _ => unreachable!("clean is only called on dirty pointer"),
  220|       |        }
  221|  5.23k|    }
_RNvNtCsbfz4AvxjbsN_13fvm_ipld_kamt7pointer11unsplit_ext:
  225|    436|fn unsplit_ext(
  226|    436|    conf: &Config,
  227|    436|    bf: &Bitfield,
  228|    436|    parent_ext: &Extension,
  229|    436|    child_ext: &Extension,
  230|    436|) -> Result<Extension, Error> {
  231|       |    // Figure out which bucket contains the pointer.
  232|    436|    let idx = bf.last_one_idx().ok_or(Error::ZeroPointers)? as u8;
  233|       |
  234|    436|    let idx = Extension::from_idx(idx, conf.bit_width);
  235|    436|    let ext = Extension::unsplit(parent_ext, &idx, child_ext)?;
  236|       |
  237|    436|    Ok(ext)
  238|    436|}

