

























































































































































































































































































































































































































































































_RNvCsjDHMN5t9uWA_8fvm_fuzz32execute_instantiate_from_scratch:
  206|  2.28k|pub fn execute_instantiate_from_scratch(
  207|  2.28k|    bin: Vec<u8>,
  208|  2.28k|    times_max: u32,
  209|  2.28k|    _original_size: usize,
  210|  2.28k|    _original_gas: i64,
  211|  2.28k|) -> AResult<Vec<(u128, i64)>> {
  212|  2.28k|    let mut result = vec![];
  213|  2.28k|    let mut gases = vec![];
  214|       |
  215|  4.56k|    for _i in 0..=times_max {
  216|  4.56k|        let bs = MemoryBlockstore::default();
  217|  4.56k|        let bundle_root = import_bundle(&bs, actors_v10::BUNDLE_CAR);
  218|  4.56k|        let mut tester =
  219|  4.56k|            Tester::new(NetworkVersion::V18, StateTreeVersion::V4, bundle_root, bs).unwrap();
  220|  4.56k|
  221|  4.56k|        let actor_state = State { empty: true };
  222|  4.56k|        let state_cid = tester.set_state(&actor_state).unwrap();
  223|  4.56k|
  224|  4.56k|        let sender: [Account; 1] = tester.create_accounts().unwrap();
  225|  4.56k|        // let mut consumed_memory = vec![];
  226|  4.56k|        let _first_byte_size = 0;
  227|  4.56k|
  228|  4.56k|        let actor_address = Address::new_id(10000);
  229|  4.56k|        // Set actor state
  230|  4.56k|        tester
  231|  4.56k|            .set_actor_from_bin(&bin, state_cid, actor_address, TokenAmount::zero())
  232|  4.56k|            .unwrap();
  233|  4.56k|        // This takes times, due to the instrumentation for the gas model
  234|  4.56k|        tester.instantiate_machine(DummyExterns).unwrap();
  235|  4.56k|        let _now = Instant::now();
  236|  4.56k|
  237|  4.56k|        let executor = tester.executor.as_mut().unwrap();
  238|  4.56k|        let _first_gas_fixture = 0;
  239|  4.56k|
  240|  4.56k|        // Send message
  241|  4.56k|        let gas_limit = 100000000;
  242|  4.56k|        let message = Message {
  243|  4.56k|            // Different sender to force the machine to execute wasm
  244|  4.56k|            from: sender[0].1,
  245|  4.56k|            to: actor_address,
  246|  4.56k|            gas_limit,
  247|  4.56k|            method_num: 1,
  248|  4.56k|            ..Message::default()
  249|  4.56k|        };
  250|  4.56k|        let r = executor
  251|  4.56k|            .execute_message(message, ApplyKind::Explicit, 100)
  252|  4.56k|            .unwrap();
  253|  4.56k|
  254|  4.56k|        gases.push(gas_limit - r.gas_burned);
  255|  4.56k|    }
  256|       |
  257|  2.28k|    let times: Vec<u128> = TIMES_TRAIL.lock().unwrap().clone();
  258|  2.28k|
  259|  2.28k|    if times.is_empty() {
  260|       |        // Nothing executes, then return an error
  261|     18|        return Err(error::FuzzError::NonExecuted("No executed"));
  262|  2.26k|    }
  263|  2.26k|
  264|  2.26k|    result = vec![
  265|  2.26k|        result,
  266|  2.26k|        times.into_iter().zip(gases.into_iter()).collect::<Vec<_>>(),
  267|  2.26k|    ]
  268|  2.26k|    .concat();
  269|  2.26k|    // TODO, Discard first x elements
  270|  2.26k|    //result = result[10..].to_vec();
  271|  2.26k|
  272|  2.26k|    TIMES_TRAIL.lock().unwrap().clear();
  273|  2.26k|    Ok(result)
  274|  2.28k|}
_RNvCsjDHMN5t9uWA_8fvm_fuzz15get_random_wasm:
  160|  2.28k|pub fn get_random_wasm<'a>(raw: &mut Unstructured<'a>) -> anyhow::Result<wasm_smith::Module> {
  161|  2.28k|    // Get a Wasm smith generated binary.
  162|  2.28k|    // This helps to detect errors in previous stages. For example, the binary should be valid for the FVM
  163|  2.28k|
  164|  2.28k|    let features = get_wasmfeatures();
  165|  2.28k|
  166|  2.28k|    // Create SwarmConfig
  167|  2.28k|    let mut cfg = SwarmConfig::arbitrary(raw).unwrap();
  168|  2.28k|    let available_imports = get_possible_imports();
  169|  2.28k|
  170|  2.28k|    cfg.max_modules = 1;
  171|  2.28k|    // Can only import functions defined in the syscall API
  172|  2.28k|    cfg.available_imports = Some(available_imports);
  173|  2.28k|    // Cannot use reference types.
  174|  2.28k|    cfg.export_everything = false;
  175|  2.28k|    // The customized wasm-smith should ensure that at least one of the exports is an invoke function
  176|  2.28k|    // None table can be exported (this is ensured by setting the max_tables to 0, TODO, check if having tables is a case here)
  177|  2.28k|    //cfg.max_exports = 1;
  178|  2.28k|    cfg.min_exports = 1;
  179|  2.28k|    cfg.min_funcs = 1;
  180|  2.28k|    cfg.min_memories = 1;
  181|  2.28k|    cfg.exceptions_enabled = features.exceptions;
  182|  2.28k|    cfg.threads_enabled = features.threads;
  183|  2.28k|    cfg.simd_enabled = features.simd;
  184|  2.28k|    cfg.multi_value_enabled = features.multi_value;
  185|  2.28k|    cfg.memory64_enabled = features.memory64;
  186|  2.28k|    cfg.canonicalize_nans = true;
  187|  2.28k|    cfg.reference_types_enabled = false;
  188|  2.28k|    cfg.max_tables = 0;
  189|  2.28k|    cfg.max_aliases = 0;
  190|  2.28k|    cfg.max_table_elements = 0;
  191|  2.28k|    cfg.max_memories = 1;
  192|  2.28k|
  193|  2.28k|    let module = wasm_smith::Module::new(cfg, raw);
  194|  2.28k|
  195|  2.28k|    module.map_err(|e| anyhow::anyhow!(e))
  196|  2.28k|}
_RNvCsjDHMN5t9uWA_8fvm_fuzz20get_possible_imports:
  146|  2.28k|pub fn get_possible_imports() -> Vec<u8> {
  147|  2.28k|    // Get this from the buildsys
  148|  2.28k|    // Add the build sys here, one by one.
  149|  2.28k|    // TODO, parse the ref-fvm module to get them all or maybe we can create a function that returns the builtins ?
  150|  2.28k|    wat::parse_str(
  151|  2.28k|        r#"
  152|  2.28k|        (module
  153|  2.28k|
  154|  2.28k|        )
  155|  2.28k|        "#,
  156|  2.28k|    )
  157|  2.28k|    .unwrap()
  158|  2.28k|}
_RNvCsjDHMN5t9uWA_8fvm_fuzz16get_wasmfeatures:
   32|  2.28k|pub fn get_wasmfeatures() -> WasmFeatures {
   33|  2.28k|    let mut features = WasmFeatures::default();
   34|  2.28k|    features.threads = false;
   35|  2.28k|    features.simd = false;
   36|  2.28k|    features.multi_memory = false;
   37|  2.28k|    features.memory64 = false;
   38|  2.28k|    features.bulk_memory = true;
   39|  2.28k|    features.multi_value = false;
   40|  2.28k|    features.reference_types = false;
   41|  2.28k|    features
   42|  2.28k|}
_RINvXCsjDHMN5t9uWA_8fvm_fuzzNtB3_5StateNtNtCsbNqYtCaTmj5_5serde3ser9Serialize9serializeQINtNtCslCSoWdgWuQx_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs3hmswOzWUXR_7cbor4ii4core5utils9BufWriterEEB3_:
  198|  4.56k|#[derive(Serialize_tuple, Deserialize_tuple, Clone, Debug)]
_RNCINvCsjDHMN5t9uWA_8fvm_fuzz13import_bundleNtNtCs7LozHQZ4mYF_19fvm_ipld_blockstore6memory16MemoryBlockstoreE0B4_:
   50|  4.56k|    match &*block_on(async { load_car_unchecked(blockstore, bundle).await }).unwrap() {
_RINvCsjDHMN5t9uWA_8fvm_fuzz13import_bundleNtNtCs7LozHQZ4mYF_19fvm_ipld_blockstore6memory16MemoryBlockstoreEB2_:
   48|  4.56k|pub fn import_bundle(blockstore: &impl Blockstore, bundle: &[u8]) -> Cid {
   49|  4.56k|    // Mutate the initial actor here as well
   50|  4.56k|    match &*block_on(async { load_car_unchecked(blockstore, bundle).await }).unwrap() {
   51|  4.56k|        [root] => *root,
   52|      0|        _ => panic!("multiple root CIDs in bundle"),
   53|       |    }
   54|  4.56k|}
_RINvXNvNvXCsjDHMN5t9uWA_8fvm_fuzzNtB8_5StateNtNtCsbNqYtCaTmj5_5serde3ser9Serialize9serialize1__NtB5_5InnerBG_9serializeINtCsgnH4YNZ2jLB_11serde_tuple10SerializerQINtNtCslCSoWdgWuQx_18serde_ipld_dagcbor3ser10SerializerNtNtNtCs3hmswOzWUXR_7cbor4ii4core5utils9BufWriterEEEB8_:
  198|  4.56k|#[derive(Serialize_tuple, Deserialize_tuple, Clone, Debug)]

set_time:
   38|  4.52k|pub fn set_time(time: u128) {
   39|  4.52k|    TIMES_TRAIL.lock().unwrap().push(time);
   40|  4.52k|}

_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder4callCsl5R1U3jbXkA_18wasmtime_cranelift:
  325|  44.3k|    fn call(mut self, FN: ir::FuncRef, args: &[Value]) -> Inst {
  326|  44.3k|        let mut vlist = ir::ValueList::default();
  327|  44.3k|        {
  328|  44.3k|            let pool = &mut self.data_flow_graph_mut().value_lists;
  329|  44.3k|            vlist.extend(args.iter().cloned(), pool);
  330|  44.3k|        }
  331|  44.3k|        self.Call(Opcode::Call, types::INVALID, FN, vlist).0
  332|  44.3k|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder8udiv_immxECsl5R1U3jbXkA_18wasmtime_cranelift:
 2090|    178|    fn udiv_imm<T1: Into<ir::immediates::Imm64>>(self, x: ir::Value, Y: T1) -> Value {
 2091|    178|        let Y = Y.into();
 2092|    178|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2093|    178|        let (inst, dfg) = self.BinaryImm64(Opcode::UdivImm, ctrl_typevar, Y, x);
 2094|    178|        dfg.first_result(inst)
 2095|    178|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder4LoadCsl5R1U3jbXkA_18wasmtime_cranelift:
 4661|    722|    fn Load(self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4662|    722|        let data = ir::InstructionData::Load {
 4663|    722|            opcode,
 4664|    722|            flags,
 4665|    722|            offset,
 4666|    722|            arg: arg0,
 4667|    722|        };
 4668|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4669|    722|        self.build(data, ctrl_typevar)
 4670|    722|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder12CallIndirectCsl5R1U3jbXkA_18wasmtime_cranelift:
 4478|    272|    fn CallIndirect(self, opcode: Opcode, ctrl_typevar: Type, sig_ref: ir::SigRef, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4479|    272|        let data = ir::InstructionData::CallIndirect {
 4480|    272|            opcode,
 4481|    272|            sig_ref,
 4482|    272|            args,
 4483|    272|        };
 4484|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4485|    272|        self.build(data, ctrl_typevar)
 4486|    272|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder4loadNtNtB8_8memflags8MemFlagslECsl5R1U3jbXkA_18wasmtime_cranelift:
  661|    722|    fn load<T1: Into<ir::MemFlags>, T2: Into<ir::immediates::Offset32>>(self, Mem: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value {
  662|    722|        let MemFlags = MemFlags.into();
  663|    722|        let Offset = Offset.into();
  664|    722|        let (inst, dfg) = self.Load(Opcode::Load, Mem, MemFlags, Offset, p);
  665|    722|        dfg.first_result(inst)
  666|    722|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder13call_indirectCsl5R1U3jbXkA_18wasmtime_cranelift:
  354|    272|    fn call_indirect(mut self, SIG: ir::SigRef, callee: ir::Value, args: &[Value]) -> Inst {
  355|    272|        let ctrl_typevar = self.data_flow_graph().value_type(callee);
  356|    272|        let mut vlist = ir::ValueList::default();
  357|    272|        {
  358|    272|            let pool = &mut self.data_flow_graph_mut().value_lists;
  359|    272|            vlist.push(callee, pool);
  360|    272|            vlist.extend(args.iter().cloned(), pool);
  361|    272|        }
  362|    272|        self.CallIndirect(Opcode::CallIndirect, ctrl_typevar, SIG, vlist).0
  363|    272|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder13call_indirectCsl5R1U3jbXkA_18wasmtime_cranelift:
  354|  4.60k|    fn call_indirect(mut self, SIG: ir::SigRef, callee: ir::Value, args: &[Value]) -> Inst {
  355|  4.60k|        let ctrl_typevar = self.data_flow_graph().value_type(callee);
  356|  4.60k|        let mut vlist = ir::ValueList::default();
  357|  4.60k|        {
  358|  4.60k|            let pool = &mut self.data_flow_graph_mut().value_lists;
  359|  4.60k|            vlist.push(callee, pool);
  360|  4.60k|            vlist.extend(args.iter().cloned(), pool);
  361|  4.60k|        }
  362|  4.60k|        self.CallIndirect(Opcode::CallIndirect, ctrl_typevar, SIG, vlist).0
  363|  4.60k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder4CallCs4atI3LIaNO2_14cranelift_wasm:
 4466|  44.3k|    fn Call(self, opcode: Opcode, ctrl_typevar: Type, func_ref: ir::FuncRef, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4467|  44.3k|        let data = ir::InstructionData::Call {
 4468|  44.3k|            opcode,
 4469|  44.3k|            func_ref,
 4470|  44.3k|            args,
 4471|  44.3k|        };
 4472|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4473|  44.3k|        self.build(data, ctrl_typevar)
 4474|  44.3k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder5truncCs4atI3LIaNO2_14cranelift_wasm:
 3444|      4|    fn trunc(self, x: ir::Value) -> Value {
 3445|      4|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3446|      4|        let (inst, dfg) = self.Unary(Opcode::Trunc, ctrl_typevar, x);
 3447|      4|        dfg.first_result(inst)
 3448|      4|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4fminCs4atI3LIaNO2_14cranelift_wasm:
 3332|      2|    fn fmin(self, x: ir::Value, y: ir::Value) -> Value {
 3333|      2|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3334|      2|        let (inst, dfg) = self.Binary(Opcode::Fmin, ctrl_typevar, x, y);
 3335|      2|        dfg.first_result(inst)
 3336|      2|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder14fcvt_from_sintCs4atI3LIaNO2_14cranelift_wasm:
 4145|     34|    fn fcvt_from_sint(self, FloatTo: crate::ir::Type, x: ir::Value) -> Value {
 4146|     34|        let (inst, dfg) = self.Unary(Opcode::FcvtFromSint, FloatTo, x);
 4147|     34|        dfg.first_result(inst)
 4148|     34|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8HeapAddrCs4atI3LIaNO2_14cranelift_wasm:
 4573|    294|    fn HeapAddr(self, opcode: Opcode, ctrl_typevar: Type, heap: ir::Heap, imm: ir::immediates::Uimm32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4574|    294|        let data = ir::InstructionData::HeapAddr {
 4575|    294|            opcode,
 4576|    294|            heap,
 4577|    294|            imm,
 4578|    294|            arg: arg0,
 4579|    294|        };
 4580|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4581|    294|        self.build(data, ctrl_typevar)
 4582|    294|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder12global_valueCs4atI3LIaNO2_14cranelift_wasm:
 1130|  37.9k|    fn global_value(self, Mem: crate::ir::Type, GV: ir::GlobalValue) -> Value {
 1131|  37.9k|        let (inst, dfg) = self.UnaryGlobalValue(Opcode::GlobalValue, Mem, GV);
 1132|  37.9k|        dfg.first_result(inst)
 1133|  37.9k|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4trapNtNtB19_8trapcode8TrapCodeECs4atI3LIaNO2_14cranelift_wasm:
  199|  9.68k|    fn trap<T1: Into<ir::TrapCode>>(self, code: T1) -> Inst {
  200|  9.68k|        let code = code.into();
  201|  9.68k|        self.Trap(Opcode::Trap, types::INVALID, code).0
  202|  9.68k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder6popcntCs4atI3LIaNO2_14cranelift_wasm:
 3041|     48|    fn popcnt(self, x: ir::Value) -> Value {
 3042|     48|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3043|     48|        let (inst, dfg) = self.Unary(Opcode::Popcnt, ctrl_typevar, x);
 3044|     48|        dfg.first_result(inst)
 3045|     48|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4bxorCs4atI3LIaNO2_14cranelift_wasm:
 2589|      4|    fn bxor(self, x: ir::Value, y: ir::Value) -> Value {
 2590|      4|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2591|      4|        let (inst, dfg) = self.Binary(Opcode::Bxor, ctrl_typevar, x, y);
 2592|      4|        dfg.first_result(inst)
 2593|      4|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7fdemoteCs4atI3LIaNO2_14cranelift_wasm:
 3981|      4|    fn fdemote(self, FloatTo: crate::ir::Type, x: ir::Value) -> Value {
 3982|      4|        let (inst, dfg) = self.Unary(Opcode::Fdemote, FloatTo, x);
 3983|      4|        dfg.first_result(inst)
 3984|      4|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder6selectCs4atI3LIaNO2_14cranelift_wasm:
 1457|    306|    fn select(self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value {
 1458|    306|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1459|    306|        let (inst, dfg) = self.Ternary(Opcode::Select, ctrl_typevar, c, x, y);
 1460|    306|        dfg.first_result(inst)
 1461|    306|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4fnegCs4atI3LIaNO2_14cranelift_wasm:
 3272|     54|    fn fneg(self, x: ir::Value) -> Value {
 3273|     54|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3274|     54|        let (inst, dfg) = self.Unary(Opcode::Fneg, ctrl_typevar, x);
 3275|     54|        dfg.first_result(inst)
 3276|     54|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8f64constNtNtB19_10immediates6Ieee64ECs4atI3LIaNO2_14cranelift_wasm:
 1348|  3.30k|    fn f64const<T1: Into<ir::immediates::Ieee64>>(self, N: T1) -> Value {
 1349|  3.30k|        let N = N.into();
 1350|  3.30k|        let (inst, dfg) = self.UnaryIeee64(Opcode::F64const, types::INVALID, N);
 1351|  3.30k|        dfg.first_result(inst)
 1352|  3.30k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4ceilCs4atI3LIaNO2_14cranelift_wasm:
 3412|     60|    fn ceil(self, x: ir::Value) -> Value {
 3413|     60|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3414|     60|        let (inst, dfg) = self.Unary(Opcode::Ceil, ctrl_typevar, x);
 3415|     60|        dfg.first_result(inst)
 3416|     60|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4iaddCs4atI3LIaNO2_14cranelift_wasm:
 1808|  4.87k|    fn iadd(self, x: ir::Value, y: ir::Value) -> Value {
 1809|  4.87k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1810|  4.87k|        let (inst, dfg) = self.Binary(Opcode::Iadd, ctrl_typevar, x, y);
 1811|  4.87k|        dfg.first_result(inst)
 1812|  4.87k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder3clzCs4atI3LIaNO2_14cranelift_wasm:
 2983|     50|    fn clz(self, x: ir::Value) -> Value {
 2984|     50|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2985|     50|        let (inst, dfg) = self.Unary(Opcode::Clz, ctrl_typevar, x);
 2986|     50|        dfg.first_result(inst)
 2987|     50|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder3borCs4atI3LIaNO2_14cranelift_wasm:
 2572|      4|    fn bor(self, x: ir::Value, y: ir::Value) -> Value {
 2573|      4|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2574|      4|        let (inst, dfg) = self.Binary(Opcode::Bor, ctrl_typevar, x, y);
 2575|      4|        dfg.first_result(inst)
 2576|      4|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4fabsCs4atI3LIaNO2_14cranelift_wasm:
 3290|     22|    fn fabs(self, x: ir::Value) -> Value {
 3291|     22|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3292|     22|        let (inst, dfg) = self.Unary(Opcode::Fabs, ctrl_typevar, x);
 3293|     22|        dfg.first_result(inst)
 3294|     22|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder5storeNtNtB19_8memflags8MemFlagsNtNtB19_10immediates8Offset32ECs4atI3LIaNO2_14cranelift_wasm:
  680|  14.2k|    fn store<T1: Into<ir::MemFlags>, T2: Into<ir::immediates::Offset32>>(self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst {
  681|  14.2k|        let MemFlags = MemFlags.into();
  682|  14.2k|        let Offset = Offset.into();
  683|  14.2k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
  684|  14.2k|        self.Store(Opcode::Store, ctrl_typevar, MemFlags, Offset, x, p).0
  685|  14.2k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder5floorCs4atI3LIaNO2_14cranelift_wasm:
 3428|     64|    fn floor(self, x: ir::Value) -> Value {
 3429|     64|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3430|     64|        let (inst, dfg) = self.Unary(Opcode::Floor, ctrl_typevar, x);
 3431|     64|        dfg.first_result(inst)
 3432|     64|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7TernaryCs4atI3LIaNO2_14cranelift_wasm:
 4782|    306|    fn Ternary(self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value, arg2: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4783|    306|        let data = ir::InstructionData::Ternary {
 4784|    306|            opcode,
 4785|    306|            args: [arg0, arg1, arg2],
 4786|    306|        };
 4787|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4788|    306|        self.build(data, ctrl_typevar)
 4789|    306|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7nearestCs4atI3LIaNO2_14cranelift_wasm:
 3461|     40|    fn nearest(self, x: ir::Value) -> Value {
 3462|     40|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3463|     40|        let (inst, dfg) = self.Unary(Opcode::Nearest, ctrl_typevar, x);
 3464|     40|        dfg.first_result(inst)
 3465|     40|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder12FloatCompareCs4atI3LIaNO2_14cranelift_wasm:
 4525|    302|    fn FloatCompare(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4526|    302|        let data = ir::InstructionData::FloatCompare {
 4527|    302|            opcode,
 4528|    302|            cond,
 4529|    302|            args: [arg0, arg1],
 4530|    302|        };
 4531|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4532|    302|        self.build(data, ctrl_typevar)
 4533|    302|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder3ctzCs4atI3LIaNO2_14cranelift_wasm:
 3023|     56|    fn ctz(self, x: ir::Value) -> Value {
 3024|     56|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3025|     56|        let (inst, dfg) = self.Unary(Opcode::Ctz, ctrl_typevar, x);
 3026|     56|        dfg.first_result(inst)
 3027|     56|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder16UnaryGlobalValueCs4atI3LIaNO2_14cranelift_wasm:
 4849|  38.0k|    fn UnaryGlobalValue(self, opcode: Opcode, ctrl_typevar: Type, global_value: ir::GlobalValue) -> (Inst, &'f mut ir::DataFlowGraph) {
 4850|  38.0k|        let data = ir::InstructionData::UnaryGlobalValue {
 4851|  38.0k|            opcode,
 4852|  38.0k|            global_value,
 4853|  38.0k|        };
 4854|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4855|  38.0k|        self.build(data, ctrl_typevar)
 4856|  38.0k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder11UnaryIeee64Cs4atI3LIaNO2_14cranelift_wasm:
 4871|  3.30k|    fn UnaryIeee64(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee64) -> (Inst, &'f mut ir::DataFlowGraph) {
 4872|  3.30k|        let data = ir::InstructionData::UnaryIeee64 {
 4873|  3.30k|            opcode,
 4874|  3.30k|            imm,
 4875|  3.30k|        };
 4876|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4877|  3.30k|        self.build(data, ctrl_typevar)
 4878|  3.30k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4TrapCs4atI3LIaNO2_14cranelift_wasm:
 4805|  9.68k|    fn Trap(self, opcode: Opcode, ctrl_typevar: Type, code: ir::TrapCode) -> (Inst, &'f mut ir::DataFlowGraph) {
 4806|  9.68k|        let data = ir::InstructionData::Trap {
 4807|  9.68k|            opcode,
 4808|  9.68k|            code,
 4809|  9.68k|        };
 4810|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4811|  9.68k|        self.build(data, ctrl_typevar)
 4812|  9.68k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder14fcvt_from_uintCs4atI3LIaNO2_14cranelift_wasm:
 4124|     34|    fn fcvt_from_uint(self, FloatTo: crate::ir::Type, x: ir::Value) -> Value {
 4125|     34|        let (inst, dfg) = self.Unary(Opcode::FcvtFromUint, FloatTo, x);
 4126|     34|        dfg.first_result(inst)
 4127|     34|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4loadNtNtB19_8memflags8MemFlagsNtNtB19_10immediates8Offset32ECs4atI3LIaNO2_14cranelift_wasm:
  661|  23.7k|    fn load<T1: Into<ir::MemFlags>, T2: Into<ir::immediates::Offset32>>(self, Mem: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value {
  662|  23.7k|        let MemFlags = MemFlags.into();
  663|  23.7k|        let Offset = Offset.into();
  664|  23.7k|        let (inst, dfg) = self.Load(Opcode::Load, Mem, MemFlags, Offset, p);
  665|  23.7k|        dfg.first_result(inst)
  666|  23.7k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7return_Cs4atI3LIaNO2_14cranelift_wasm:
  302|  50.2k|    fn return_(mut self, rvals: &[Value]) -> Inst {
  303|  50.2k|        let mut vlist = ir::ValueList::default();
  304|  50.2k|        {
  305|  50.2k|            let pool = &mut self.data_flow_graph_mut().value_lists;
  306|  50.2k|            vlist.extend(rvals.iter().cloned(), pool);
  307|  50.2k|        }
  308|  50.2k|        self.MultiAry(Opcode::Return, types::INVALID, vlist).0
  309|  50.2k|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8f32constNtNtB19_10immediates6Ieee32ECs4atI3LIaNO2_14cranelift_wasm:
 1330|    552|    fn f32const<T1: Into<ir::immediates::Ieee32>>(self, N: T1) -> Value {
 1331|    552|        let N = N.into();
 1332|    552|        let (inst, dfg) = self.UnaryIeee32(Opcode::F32const, types::INVALID, N);
 1333|    552|        dfg.first_result(inst)
 1334|    552|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8fpromoteCs4atI3LIaNO2_14cranelift_wasm:
 3955|      2|    fn fpromote(self, FloatTo: crate::ir::Type, x: ir::Value) -> Value {
 3956|      2|        let (inst, dfg) = self.Unary(Opcode::Fpromote, FloatTo, x);
 3957|      2|        dfg.first_result(inst)
 3958|      2|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder9heap_addrmECs4atI3LIaNO2_14cranelift_wasm:
 1188|    294|    fn heap_addr<T1: Into<ir::immediates::Uimm32>>(self, iAddr: crate::ir::Type, H: ir::Heap, p: ir::Value, Size: T1) -> Value {
 1189|    294|        let Size = Size.into();
 1190|    294|        let (inst, dfg) = self.HeapAddr(Opcode::HeapAddr, iAddr, H, Size, p);
 1191|    294|        dfg.first_result(inst)
 1192|    294|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7bitcastCs4atI3LIaNO2_14cranelift_wasm:
 3562|     30|    fn bitcast(self, MemTo: crate::ir::Type, x: ir::Value) -> Value {
 3563|     30|        let (inst, dfg) = self.Unary(Opcode::Bitcast, MemTo, x);
 3564|     30|        dfg.first_result(inst)
 3565|     30|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder11UnaryIeee32Cs4atI3LIaNO2_14cranelift_wasm:
 4860|    552|    fn UnaryIeee32(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee32) -> (Inst, &'f mut ir::DataFlowGraph) {
 4861|    552|        let data = ir::InstructionData::UnaryIeee32 {
 4862|    552|            opcode,
 4863|    552|            imm,
 4864|    552|        };
 4865|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4866|    552|        self.build(data, ctrl_typevar)
 4867|    552|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4fcmpNtNtB19_9condcodes7FloatCCECs4atI3LIaNO2_14cranelift_wasm:
 3123|    302|    fn fcmp<T1: Into<ir::condcodes::FloatCC>>(self, Cond: T1, x: ir::Value, y: ir::Value) -> Value {
 3124|    302|        let Cond = Cond.into();
 3125|    302|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3126|    302|        let (inst, dfg) = self.FloatCompare(Opcode::Fcmp, ctrl_typevar, Cond, x, y);
 3127|    302|        dfg.first_result(inst)
 3128|    302|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8MultiAryCs4atI3LIaNO2_14cranelift_wasm:
 4686|  50.2k|    fn MultiAry(self, opcode: Opcode, ctrl_typevar: Type, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4687|  50.2k|        let data = ir::InstructionData::MultiAry {
 4688|  50.2k|            opcode,
 4689|  50.2k|            args,
 4690|  50.2k|        };
 4691|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4692|  50.2k|        self.build(data, ctrl_typevar)
 4693|  50.2k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder12fcvt_to_sintCs4atI3LIaNO2_14cranelift_wasm:
 4068|    216|    fn fcvt_to_sint(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 4069|    216|        let (inst, dfg) = self.Unary(Opcode::FcvtToSint, IntTo, x);
 4070|    216|        dfg.first_result(inst)
 4071|    216|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4imulCs4atI3LIaNO2_14cranelift_wasm:
 1882|      2|    fn imul(self, x: ir::Value, y: ir::Value) -> Value {
 1883|      2|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1884|      2|        let (inst, dfg) = self.Binary(Opcode::Imul, ctrl_typevar, x, y);
 1885|      2|        dfg.first_result(inst)
 1886|      2|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7sextendCs4atI3LIaNO2_14cranelift_wasm:
 3929|     56|    fn sextend(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 3930|     56|        let (inst, dfg) = self.Unary(Opcode::Sextend, IntTo, x);
 3931|     56|        dfg.first_result(inst)
 3932|     56|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4bintCs4atI3LIaNO2_14cranelift_wasm:
 3653|  9.88k|    fn bint(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 3654|  9.88k|        let (inst, dfg) = self.Unary(Opcode::Bint, IntTo, x);
 3655|  9.88k|        dfg.first_result(inst)
 3656|  9.88k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4sqrtCs4atI3LIaNO2_14cranelift_wasm:
 3233|    132|    fn sqrt(self, x: ir::Value) -> Value {
 3234|    132|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3235|    132|        let (inst, dfg) = self.Unary(Opcode::Sqrt, ctrl_typevar, x);
 3236|    132|        dfg.first_result(inst)
 3237|    132|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder12fcvt_to_uintCs4atI3LIaNO2_14cranelift_wasm:
 4048|     30|    fn fcvt_to_uint(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 4049|     30|        let (inst, dfg) = self.Unary(Opcode::FcvtToUint, IntTo, x);
 4050|     30|        dfg.first_result(inst)
 4051|     30|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder12CallIndirectCs4atI3LIaNO2_14cranelift_wasm:
 4478|  4.60k|    fn CallIndirect(self, opcode: Opcode, ctrl_typevar: Type, sig_ref: ir::SigRef, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4479|  4.60k|        let data = ir::InstructionData::CallIndirect {
 4480|  4.60k|            opcode,
 4481|  4.60k|            sig_ref,
 4482|  4.60k|            args,
 4483|  4.60k|        };
 4484|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4485|  4.60k|        self.build(data, ctrl_typevar)
 4486|  4.60k|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4icmpNtNtB19_9condcodes5IntCCEB7_:
 1718|  9.50k|    fn icmp<T1: Into<ir::condcodes::IntCC>>(self, Cond: T1, x: ir::Value, y: ir::Value) -> Value {
 1719|  9.50k|        let Cond = Cond.into();
 1720|  9.50k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1721|  9.50k|        let (inst, dfg) = self.IntCompare(Opcode::Icmp, ctrl_typevar, Cond, x, y);
 1722|  9.50k|        dfg.first_result(inst)
 1723|  9.50k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder5UnaryB6_:
 4816|  10.8k|    fn Unary(self, opcode: Opcode, ctrl_typevar: Type, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4817|  10.8k|        let data = ir::InstructionData::Unary {
 4818|  10.8k|            opcode,
 4819|  10.8k|            arg: arg0,
 4820|  10.8k|        };
 4821|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4822|  10.8k|        self.build(data, ctrl_typevar)
 4823|  10.8k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8UnaryImmB6_:
 4882|  94.5k|    fn UnaryImm(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64) -> (Inst, &'f mut ir::DataFlowGraph) {
 4883|  94.5k|        let mut data = ir::InstructionData::UnaryImm {
 4884|  94.5k|            opcode,
 4885|  94.5k|            imm,
 4886|  94.5k|        };
 4887|  94.5k|        data.sign_extend_immediates(ctrl_typevar);
 4888|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4889|  94.5k|        self.build(data, ctrl_typevar)
 4890|  94.5k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder10IntCompareB6_:
 4586|  9.50k|    fn IntCompare(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4587|  9.50k|        let data = ir::InstructionData::IntCompare {
 4588|  9.50k|            opcode,
 4589|  9.50k|            cond,
 4590|  9.50k|            args: [arg0, arg1],
 4591|  9.50k|        };
 4592|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4593|  9.50k|        self.build(data, ctrl_typevar)
 4594|  9.50k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4JumpB6_:
 4649|  55.6k|    fn Jump(self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4650|  55.6k|        let data = ir::InstructionData::Jump {
 4651|  55.6k|            opcode,
 4652|  55.6k|            destination,
 4653|  55.6k|            args,
 4654|  55.6k|        };
 4655|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4656|  55.6k|        self.build(data, ctrl_typevar)
 4657|  55.6k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder3brzB6_:
   46|  9.43k|    fn brz(mut self, c: ir::Value, block: ir::Block, args: &[Value]) -> Inst {
   47|  9.43k|        let ctrl_typevar = self.data_flow_graph().value_type(c);
   48|  9.43k|        let mut vlist = ir::ValueList::default();
   49|  9.43k|        {
   50|  9.43k|            let pool = &mut self.data_flow_graph_mut().value_lists;
   51|  9.43k|            vlist.push(c, pool);
   52|  9.43k|            vlist.extend(args.iter().cloned(), pool);
   53|  9.43k|        }
   54|  9.43k|        self.Branch(Opcode::Brz, ctrl_typevar, block, vlist).0
   55|  9.43k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7uextendB6_:
 3905|      6|    fn uextend(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 3906|      6|        let (inst, dfg) = self.Unary(Opcode::Uextend, IntTo, x);
 3907|      6|        dfg.first_result(inst)
 3908|      6|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4LoadB6_:
 4661|  28.7k|    fn Load(self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4662|  28.7k|        let data = ir::InstructionData::Load {
 4663|  28.7k|            opcode,
 4664|  28.7k|            flags,
 4665|  28.7k|            offset,
 4666|  28.7k|            arg: arg0,
 4667|  28.7k|        };
 4668|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4669|  28.7k|        self.build(data, ctrl_typevar)
 4670|  28.7k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8br_tableB6_:
  183|      2|    fn br_table(self, x: ir::Value, block: ir::Block, JT: ir::JumpTable) -> Inst {
  184|      2|        self.BranchTable(Opcode::BrTable, types::INVALID, block, JT, x).0
  185|      2|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4brnzB6_:
   68|      2|    fn brnz(mut self, c: ir::Value, block: ir::Block, args: &[Value]) -> Inst {
   69|      2|        let ctrl_typevar = self.data_flow_graph().value_type(c);
   70|      2|        let mut vlist = ir::ValueList::default();
   71|      2|        {
   72|      2|            let pool = &mut self.data_flow_graph_mut().value_lists;
   73|      2|            vlist.push(c, pool);
   74|      2|            vlist.extend(args.iter().cloned(), pool);
   75|      2|        }
   76|      2|        self.Branch(Opcode::Brnz, ctrl_typevar, block, vlist).0
   77|      2|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder11BinaryImm64B6_:
 4377|     28|    fn BinaryImm64(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4378|     28|        let mut data = ir::InstructionData::BinaryImm64 {
 4379|     28|            opcode,
 4380|     28|            imm,
 4381|     28|            arg: arg0,
 4382|     28|        };
 4383|     28|        data.sign_extend_immediates(ctrl_typevar);
 4384|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4385|     28|        self.build(data, ctrl_typevar)
 4386|     28|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4loadNtNtB19_8memflags8MemFlagslEB7_:
  661|  4.77k|    fn load<T1: Into<ir::MemFlags>, T2: Into<ir::immediates::Offset32>>(self, Mem: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value {
  662|  4.77k|        let MemFlags = MemFlags.into();
  663|  4.77k|        let Offset = Offset.into();
  664|  4.77k|        let (inst, dfg) = self.Load(Opcode::Load, Mem, MemFlags, Offset, p);
  665|  4.77k|        dfg.first_result(inst)
  666|  4.77k|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8iadd_immxEB7_:
 2045|     28|    fn iadd_imm<T1: Into<ir::immediates::Imm64>>(self, x: ir::Value, Y: T1) -> Value {
 2046|     28|        let Y = Y.into();
 2047|     28|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2048|     28|        let (inst, dfg) = self.BinaryImm64(Opcode::IaddImm, ctrl_typevar, Y, x);
 2049|     28|        dfg.first_result(inst)
 2050|     28|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder6BranchB6_:
 4402|  9.43k|    fn Branch(self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4403|  9.43k|        let data = ir::InstructionData::Branch {
 4404|  9.43k|            opcode,
 4405|  9.43k|            destination,
 4406|  9.43k|            args,
 4407|  9.43k|        };
 4408|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4409|  9.43k|        self.build(data, ctrl_typevar)
 4410|  9.43k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4jumpB6_:
   26|  55.6k|    fn jump(mut self, block: ir::Block, args: &[Value]) -> Inst {
   27|  55.6k|        let mut vlist = ir::ValueList::default();
   28|  55.6k|        {
   29|  55.6k|            let pool = &mut self.data_flow_graph_mut().value_lists;
   30|  55.6k|            vlist.extend(args.iter().cloned(), pool);
   31|  55.6k|        }
   32|  55.6k|        self.Jump(Opcode::Jump, types::INVALID, block, vlist).0
   33|  55.6k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder6BinaryB6_:
 4366|  14.3k|    fn Binary(self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4367|  14.3k|        let data = ir::InstructionData::Binary {
 4368|  14.3k|            opcode,
 4369|  14.3k|            args: [arg0, arg1],
 4370|  14.3k|        };
 4371|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4372|  14.3k|        self.build(data, ctrl_typevar)
 4373|  14.3k|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder5storeNtNtB19_8memflags8MemFlagslEB7_:
  680|  4.57k|    fn store<T1: Into<ir::MemFlags>, T2: Into<ir::immediates::Offset32>>(self, MemFlags: T1, x: ir::Value, p: ir::Value, Offset: T2) -> Inst {
  681|  4.57k|        let MemFlags = MemFlags.into();
  682|  4.57k|        let Offset = Offset.into();
  683|  4.57k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
  684|  4.57k|        self.Store(Opcode::Store, ctrl_typevar, MemFlags, Offset, x, p).0
  685|  4.57k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder11BranchTableB6_:
 4453|      2|    fn BranchTable(self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, table: ir::JumpTable, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4454|      2|        let data = ir::InstructionData::BranchTable {
 4455|      2|            opcode,
 4456|      2|            destination,
 4457|      2|            table,
 4458|      2|            arg: arg0,
 4459|      2|        };
 4460|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4461|      2|        self.build(data, ctrl_typevar)
 4462|      2|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder8icmp_immNtNtB19_9condcodes5IntCCxEB7_:
 1743|     82|    fn icmp_imm<T1: Into<ir::condcodes::IntCC>, T2: Into<ir::immediates::Imm64>>(self, Cond: T1, x: ir::Value, Y: T2) -> Value {
 1744|     82|        let Cond = Cond.into();
 1745|     82|        let Y = Y.into();
 1746|     82|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1747|     82|        let (inst, dfg) = self.IntCompareImm(Opcode::IcmpImm, ctrl_typevar, Cond, Y, x);
 1748|     82|        dfg.first_result(inst)
 1749|     82|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder4isubB6_:
 1828|  9.42k|    fn isub(self, x: ir::Value, y: ir::Value) -> Value {
 1829|  9.42k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1830|  9.42k|        let (inst, dfg) = self.Binary(Opcode::Isub, ctrl_typevar, x, y);
 1831|  9.42k|        dfg.first_result(inst)
 1832|  9.42k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder7ireduceB6_:
 3691|     58|    fn ireduce(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 3692|     58|        let (inst, dfg) = self.Unary(Opcode::Ireduce, IntTo, x);
 3693|     58|        dfg.first_result(inst)
 3694|     58|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder13IntCompareImmB6_:
 4598|     82|    fn IntCompareImm(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4599|     82|        let mut data = ir::InstructionData::IntCompareImm {
 4600|     82|            opcode,
 4601|     82|            cond,
 4602|     82|            imm,
 4603|     82|            arg: arg0,
 4604|     82|        };
 4605|     82|        data.sign_extend_immediates(ctrl_typevar);
 4606|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4607|     82|        self.build(data, ctrl_typevar)
 4608|     82|    }
_RINvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder6iconstxEB7_:
 1312|  94.5k|    fn iconst<T1: Into<ir::immediates::Imm64>>(self, Int: crate::ir::Type, N: T1) -> Value {
 1313|  94.5k|        let N = N.into();
 1314|  94.5k|        let (inst, dfg) = self.UnaryImm(Opcode::Iconst, Int, N);
 1315|  94.5k|        dfg.first_result(inst)
 1316|  94.5k|    }
_RNvYNtNtCsfUdr7hIf7mV_18cranelift_frontend8frontend15FuncInstBuilderNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder11InstBuilder5StoreB6_:
 4744|  18.8k|    fn Store(self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4745|  18.8k|        let data = ir::InstructionData::Store {
 4746|  18.8k|            opcode,
 4747|  18.8k|            flags,
 4748|  18.8k|            offset,
 4749|  18.8k|            args: [arg0, arg1],
 4750|  18.8k|        };
 4751|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4752|  18.8k|        self.build(data, ctrl_typevar)
 4753|  18.8k|    }
_RINvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB5_11InstBuilder8ushr_immxEB9_:
 2924|    178|    fn ushr_imm<T1: Into<ir::immediates::Imm64>>(self, x: ir::Value, Y: T1) -> Value {
 2925|    178|        let Y = Y.into();
 2926|    178|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2927|    178|        let (inst, dfg) = self.BinaryImm64(Opcode::UshrImm, ctrl_typevar, Y, x);
 2928|    178|        dfg.first_result(inst)
 2929|    178|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder11BinaryImm64B8_:
 4377|  9.92k|    fn BinaryImm64(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4378|  9.92k|        let mut data = ir::InstructionData::BinaryImm64 {
 4379|  9.92k|            opcode,
 4380|  9.92k|            imm,
 4381|  9.92k|            arg: arg0,
 4382|  9.92k|        };
 4383|  9.92k|        data.sign_extend_immediates(ctrl_typevar);
 4384|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4385|  9.92k|        self.build(data, ctrl_typevar)
 4386|  9.92k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder16UnaryGlobalValueB9_:
 4849|    744|    fn UnaryGlobalValue(self, opcode: Opcode, ctrl_typevar: Type, global_value: ir::GlobalValue) -> (Inst, &'f mut ir::DataFlowGraph) {
 4850|    744|        let data = ir::InstructionData::UnaryGlobalValue {
 4851|    744|            opcode,
 4852|    744|            global_value,
 4853|    744|        };
 4854|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4855|    744|        self.build(data, ctrl_typevar)
 4856|    744|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder13IntCompareImmB8_:
 4598|  9.42k|    fn IntCompareImm(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4599|  9.42k|        let mut data = ir::InstructionData::IntCompareImm {
 4600|  9.42k|            opcode,
 4601|  9.42k|            cond,
 4602|  9.42k|            imm,
 4603|  9.42k|            arg: arg0,
 4604|  9.42k|        };
 4605|  9.42k|        data.sign_extend_immediates(ctrl_typevar);
 4606|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4607|  9.42k|        self.build(data, ctrl_typevar)
 4608|  9.42k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder5ifcmpB9_:
 1766|     28|    fn ifcmp(self, x: ir::Value, y: ir::Value) -> Value {
 1767|     28|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1768|     28|        let (inst, dfg) = self.Binary(Opcode::Ifcmp, ctrl_typevar, x, y);
 1769|     28|        dfg.first_result(inst)
 1770|     28|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder12FloatCompareB9_:
 4525|    302|    fn FloatCompare(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::FloatCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4526|    302|        let data = ir::InstructionData::FloatCompare {
 4527|    302|            opcode,
 4528|    302|            cond,
 4529|    302|            args: [arg0, arg1],
 4530|    302|        };
 4531|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4532|    302|        self.build(data, ctrl_typevar)
 4533|    302|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder18InsertReuseBuilderQNtNtB9_6cursor10FuncCursorAINtNtCs8gdQ2z332JV_4core6option6OptionNtNtB7_8entities5ValueEj1_ENtB5_11InstBuilder6selectB9_:
 1457|    302|    fn select(self, c: ir::Value, x: ir::Value, y: ir::Value) -> Value {
 1458|    302|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1459|    302|        let (inst, dfg) = self.Ternary(Opcode::Select, ctrl_typevar, c, x, y);
 1460|    302|        dfg.first_result(inst)
 1461|    302|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder7ireduceB9_:
 3691|    448|    fn ireduce(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 3692|    448|        let (inst, dfg) = self.Unary(Opcode::Ireduce, IntTo, x);
 3693|    448|        dfg.first_result(inst)
 3694|    448|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder5UnaryB9_:
 4816|  1.01k|    fn Unary(self, opcode: Opcode, ctrl_typevar: Type, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4817|  1.01k|        let data = ir::InstructionData::Unary {
 4818|  1.01k|            opcode,
 4819|  1.01k|            arg: arg0,
 4820|  1.01k|        };
 4821|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4822|  1.01k|        self.build(data, ctrl_typevar)
 4823|  1.01k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder11UnaryIeee64B9_:
 4871|    160|    fn UnaryIeee64(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee64) -> (Inst, &'f mut ir::DataFlowGraph) {
 4872|    160|        let data = ir::InstructionData::UnaryIeee64 {
 4873|    160|            opcode,
 4874|    160|            imm,
 4875|    160|        };
 4876|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4877|    160|        self.build(data, ctrl_typevar)
 4878|    160|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder8icmp_immNtNtB8_9condcodes5IntCCxEBa_:
 1743|     28|    fn icmp_imm<T1: Into<ir::condcodes::IntCC>, T2: Into<ir::immediates::Imm64>>(self, Cond: T1, x: ir::Value, Y: T2) -> Value {
 1744|     28|        let Cond = Cond.into();
 1745|     28|        let Y = Y.into();
 1746|     28|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1747|     28|        let (inst, dfg) = self.IntCompareImm(Opcode::IcmpImm, ctrl_typevar, Cond, Y, x);
 1748|     28|        dfg.first_result(inst)
 1749|     28|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder4JumpB9_:
 4649|     28|    fn Jump(self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4650|     28|        let data = ir::InstructionData::Jump {
 4651|     28|            opcode,
 4652|     28|            destination,
 4653|     28|            args,
 4654|     28|        };
 4655|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4656|     28|        self.build(data, ctrl_typevar)
 4657|     28|    }
_RINvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB5_11InstBuilder4loadNtNtB7_8memflags8MemFlagsNtNtB7_10immediates8Offset32EB9_:
  661|  13.9k|    fn load<T1: Into<ir::MemFlags>, T2: Into<ir::immediates::Offset32>>(self, Mem: crate::ir::Type, MemFlags: T1, p: ir::Value, Offset: T2) -> Value {
  662|  13.9k|        let MemFlags = MemFlags.into();
  663|  13.9k|        let Offset = Offset.into();
  664|  13.9k|        let (inst, dfg) = self.Load(Opcode::Load, Mem, MemFlags, Offset, p);
  665|  13.9k|        dfg.first_result(inst)
  666|  13.9k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder4jumpB9_:
   26|     28|    fn jump(mut self, block: ir::Block, args: &[Value]) -> Inst {
   27|     28|        let mut vlist = ir::ValueList::default();
   28|     28|        {
   29|     28|            let pool = &mut self.data_flow_graph_mut().value_lists;
   30|     28|            vlist.extend(args.iter().cloned(), pool);
   31|     28|        }
   32|     28|        self.Jump(Opcode::Jump, types::INVALID, block, vlist).0
   33|     28|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder11UnaryIeee32B9_:
 4860|    142|    fn UnaryIeee32(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Ieee32) -> (Inst, &'f mut ir::DataFlowGraph) {
 4861|    142|        let data = ir::InstructionData::UnaryIeee32 {
 4862|    142|            opcode,
 4863|    142|            imm,
 4864|    142|        };
 4865|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4866|    142|        self.build(data, ctrl_typevar)
 4867|    142|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder11BinaryImm64B9_:
 4377|    178|    fn BinaryImm64(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4378|    178|        let mut data = ir::InstructionData::BinaryImm64 {
 4379|    178|            opcode,
 4380|    178|            imm,
 4381|    178|            arg: arg0,
 4382|    178|        };
 4383|    178|        data.sign_extend_immediates(ctrl_typevar);
 4384|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4385|    178|        self.build(data, ctrl_typevar)
 4386|    178|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder6BinaryB9_:
 4366|     56|    fn Binary(self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4367|     56|        let data = ir::InstructionData::Binary {
 4368|     56|            opcode,
 4369|     56|            args: [arg0, arg1],
 4370|     56|        };
 4371|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4372|     56|        self.build(data, ctrl_typevar)
 4373|     56|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder6trapnzNtNtB8_8trapcode8TrapCodeEBa_:
  241|     28|    fn trapnz<T1: Into<ir::TrapCode>>(self, c: ir::Value, code: T1) -> Inst {
  242|     28|        let code = code.into();
  243|     28|        let ctrl_typevar = self.data_flow_graph().value_type(c);
  244|     28|        self.CondTrap(Opcode::Trapnz, ctrl_typevar, code, c).0
  245|     28|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder4imulB8_:
 1882|      2|    fn imul(self, x: ir::Value, y: ir::Value) -> Value {
 1883|      2|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1884|      2|        let (inst, dfg) = self.Binary(Opcode::Imul, ctrl_typevar, x, y);
 1885|      2|        dfg.first_result(inst)
 1886|      2|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder4trapNtNtB8_8trapcode8TrapCodeEBa_:
  199|     28|    fn trap<T1: Into<ir::TrapCode>>(self, code: T1) -> Inst {
  200|     28|        let code = code.into();
  201|     28|        self.Trap(Opcode::Trap, types::INVALID, code).0
  202|     28|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder3brzB8_:
   46|     28|    fn brz(mut self, c: ir::Value, block: ir::Block, args: &[Value]) -> Inst {
   47|     28|        let ctrl_typevar = self.data_flow_graph().value_type(c);
   48|     28|        let mut vlist = ir::ValueList::default();
   49|     28|        {
   50|     28|            let pool = &mut self.data_flow_graph_mut().value_lists;
   51|     28|            vlist.push(c, pool);
   52|     28|            vlist.extend(args.iter().cloned(), pool);
   53|     28|        }
   54|     28|        self.Branch(Opcode::Brz, ctrl_typevar, block, vlist).0
   55|     28|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder4TrapB9_:
 4805|     28|    fn Trap(self, opcode: Opcode, ctrl_typevar: Type, code: ir::TrapCode) -> (Inst, &'f mut ir::DataFlowGraph) {
 4806|     28|        let data = ir::InstructionData::Trap {
 4807|     28|            opcode,
 4808|     28|            code,
 4809|     28|        };
 4810|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4811|     28|        self.build(data, ctrl_typevar)
 4812|     28|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder8CondTrapB9_:
 4490|     28|    fn CondTrap(self, opcode: Opcode, ctrl_typevar: Type, code: ir::TrapCode, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4491|     28|        let data = ir::InstructionData::CondTrap {
 4492|     28|            opcode,
 4493|     28|            code,
 4494|     28|            arg: arg0,
 4495|     28|        };
 4496|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4497|     28|        self.build(data, ctrl_typevar)
 4498|     28|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder6iconstNtNtB8_10immediates5Imm64EBa_:
 1312|  19.4k|    fn iconst<T1: Into<ir::immediates::Imm64>>(self, Int: crate::ir::Type, N: T1) -> Value {
 1313|  19.4k|        let N = N.into();
 1314|  19.4k|        let (inst, dfg) = self.UnaryImm(Opcode::Iconst, Int, N);
 1315|  19.4k|        dfg.first_result(inst)
 1316|  19.4k|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder4iaddB8_:
 1808|  10.0k|    fn iadd(self, x: ir::Value, y: ir::Value) -> Value {
 1809|  10.0k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1810|  10.0k|        let (inst, dfg) = self.Binary(Opcode::Iadd, ctrl_typevar, x, y);
 1811|  10.0k|        dfg.first_result(inst)
 1812|  10.0k|    }
_RINvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB5_11InstBuilder8icmp_immNtNtB7_9condcodes5IntCCNtNtB7_10immediates5Imm64EB9_:
 1743|  9.42k|    fn icmp_imm<T1: Into<ir::condcodes::IntCC>, T2: Into<ir::immediates::Imm64>>(self, Cond: T1, x: ir::Value, Y: T2) -> Value {
 1744|  9.42k|        let Cond = Cond.into();
 1745|  9.42k|        let Y = Y.into();
 1746|  9.42k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1747|  9.42k|        let (inst, dfg) = self.IntCompareImm(Opcode::IcmpImm, ctrl_typevar, Cond, Y, x);
 1748|  9.42k|        dfg.first_result(inst)
 1749|  9.42k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder7uextendB9_:
 3905|    564|    fn uextend(self, IntTo: crate::ir::Type, x: ir::Value) -> Value {
 3906|    564|        let (inst, dfg) = self.Unary(Opcode::Uextend, IntTo, x);
 3907|    564|        dfg.first_result(inst)
 3908|    564|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder12global_valueB9_:
 1130|    744|    fn global_value(self, Mem: crate::ir::Type, GV: ir::GlobalValue) -> Value {
 1131|    744|        let (inst, dfg) = self.UnaryGlobalValue(Opcode::GlobalValue, Mem, GV);
 1132|    744|        dfg.first_result(inst)
 1133|    744|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder6BinaryB8_:
 4366|  10.2k|    fn Binary(self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4367|  10.2k|        let data = ir::InstructionData::Binary {
 4368|  10.2k|            opcode,
 4369|  10.2k|            args: [arg0, arg1],
 4370|  10.2k|        };
 4371|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4372|  10.2k|        self.build(data, ctrl_typevar)
 4373|  10.2k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder13IntCompareImmB9_:
 4598|     28|    fn IntCompareImm(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, imm: ir::immediates::Imm64, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4599|     28|        let mut data = ir::InstructionData::IntCompareImm {
 4600|     28|            opcode,
 4601|     28|            cond,
 4602|     28|            imm,
 4603|     28|            arg: arg0,
 4604|     28|        };
 4605|     28|        data.sign_extend_immediates(ctrl_typevar);
 4606|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4607|     28|        self.build(data, ctrl_typevar)
 4608|     28|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder8f64constNtNtB8_10immediates6Ieee64EBa_:
 1348|    160|    fn f64const<T1: Into<ir::immediates::Ieee64>>(self, N: T1) -> Value {
 1349|    160|        let N = N.into();
 1350|    160|        let (inst, dfg) = self.UnaryIeee64(Opcode::F64const, types::INVALID, N);
 1351|    160|        dfg.first_result(inst)
 1352|    160|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder8f32constNtNtB8_10immediates6Ieee32EBa_:
 1330|    142|    fn f32const<T1: Into<ir::immediates::Ieee32>>(self, N: T1) -> Value {
 1331|    142|        let N = N.into();
 1332|    142|        let (inst, dfg) = self.UnaryIeee32(Opcode::F32const, types::INVALID, N);
 1333|    142|        dfg.first_result(inst)
 1334|    142|    }
_RINvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB5_11InstBuilder4icmpNtNtB7_9condcodes5IntCCEB9_:
 1718|  9.53k|    fn icmp<T1: Into<ir::condcodes::IntCC>>(self, Cond: T1, x: ir::Value, y: ir::Value) -> Value {
 1719|  9.53k|        let Cond = Cond.into();
 1720|  9.53k|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1721|  9.53k|        let (inst, dfg) = self.IntCompare(Opcode::Icmp, ctrl_typevar, Cond, x, y);
 1722|  9.53k|        dfg.first_result(inst)
 1723|  9.53k|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder3borB8_:
 2572|      4|    fn bor(self, x: ir::Value, y: ir::Value) -> Value {
 2573|      4|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2574|      4|        let (inst, dfg) = self.Binary(Opcode::Bor, ctrl_typevar, x, y);
 2575|      4|        dfg.first_result(inst)
 2576|      4|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder4ushrB8_:
 2864|    178|    fn ushr(self, x: ir::Value, y: ir::Value) -> Value {
 2865|    178|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 2866|    178|        let (inst, dfg) = self.Binary(Opcode::Ushr, ctrl_typevar, x, y);
 2867|    178|        dfg.first_result(inst)
 2868|    178|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder6iconstxEBa_:
 1312|    328|    fn iconst<T1: Into<ir::immediates::Imm64>>(self, Int: crate::ir::Type, N: T1) -> Value {
 1313|    328|        let N = N.into();
 1314|    328|        let (inst, dfg) = self.UnaryImm(Opcode::Iconst, Int, N);
 1315|    328|        dfg.first_result(inst)
 1316|    328|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder10IntCompareB8_:
 4586|  9.53k|    fn IntCompare(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value, arg1: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4587|  9.53k|        let data = ir::InstructionData::IntCompare {
 4588|  9.53k|            opcode,
 4589|  9.53k|            cond,
 4590|  9.53k|            args: [arg0, arg1],
 4591|  9.53k|        };
 4592|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4593|  9.53k|        self.build(data, ctrl_typevar)
 4594|  9.53k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder18InsertReuseBuilderQNtNtB9_6cursor10FuncCursorAINtNtCs8gdQ2z332JV_4core6option6OptionNtNtB7_8entities5ValueEj1_ENtB5_11InstBuilder7TernaryB9_:
 4782|    302|    fn Ternary(self, opcode: Opcode, ctrl_typevar: Type, arg0: Value, arg1: Value, arg2: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4783|    302|        let data = ir::InstructionData::Ternary {
 4784|    302|            opcode,
 4785|    302|            args: [arg0, arg1, arg2],
 4786|    302|        };
 4787|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4788|    302|        self.build(data, ctrl_typevar)
 4789|    302|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder4LoadB8_:
 4661|  13.9k|    fn Load(self, opcode: Opcode, ctrl_typevar: Type, flags: ir::MemFlags, offset: ir::immediates::Offset32, arg0: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4662|  13.9k|        let data = ir::InstructionData::Load {
 4663|  13.9k|            opcode,
 4664|  13.9k|            flags,
 4665|  13.9k|            offset,
 4666|  13.9k|            arg: arg0,
 4667|  13.9k|        };
 4668|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4669|  13.9k|        self.build(data, ctrl_typevar)
 4670|  13.9k|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder4iaddB9_:
 1808|     28|    fn iadd(self, x: ir::Value, y: ir::Value) -> Value {
 1809|     28|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 1810|     28|        let (inst, dfg) = self.Binary(Opcode::Iadd, ctrl_typevar, x, y);
 1811|     28|        dfg.first_result(inst)
 1812|     28|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder9IntSelectB8_:
 4637|     28|    fn IntSelect(self, opcode: Opcode, ctrl_typevar: Type, cond: ir::condcodes::IntCC, arg0: Value, arg1: Value, arg2: Value) -> (Inst, &'f mut ir::DataFlowGraph) {
 4638|     28|        let data = ir::InstructionData::IntSelect {
 4639|     28|            opcode,
 4640|     28|            cond,
 4641|     28|            args: [arg0, arg1, arg2],
 4642|     28|        };
 4643|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4644|     28|        self.build(data, ctrl_typevar)
 4645|     28|    }
_RNvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtB9_6cursor10FuncCursorENtB5_11InstBuilder8UnaryImmB9_:
 4882|  19.8k|    fn UnaryImm(self, opcode: Opcode, ctrl_typevar: Type, imm: ir::immediates::Imm64) -> (Inst, &'f mut ir::DataFlowGraph) {
 4883|  19.8k|        let mut data = ir::InstructionData::UnaryImm {
 4884|  19.8k|            opcode,
 4885|  19.8k|            imm,
 4886|  19.8k|        };
 4887|  19.8k|        data.sign_extend_immediates(ctrl_typevar);
 4888|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4889|  19.8k|        self.build(data, ctrl_typevar)
 4890|  19.8k|    }
_RNvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB4_11InstBuilder6BranchB8_:
 4402|     28|    fn Branch(self, opcode: Opcode, ctrl_typevar: Type, destination: ir::Block, args: ir::ValueList) -> (Inst, &'f mut ir::DataFlowGraph) {
 4403|     28|        let data = ir::InstructionData::Branch {
 4404|     28|            opcode,
 4405|     28|            destination,
 4406|     28|            args,
 4407|     28|        };
 4408|      0|        debug_assert_eq!(opcode.format(), InstructionFormat::from(&data), "Wrong InstructionFormat for Opcode: {}", opcode);
 4409|     28|        self.build(data, ctrl_typevar)
 4410|     28|    }
_RINvYINtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder13InsertBuilderQNtNtBa_6cursor10FuncCursorENtB6_11InstBuilder4fcmpNtNtB8_9condcodes7FloatCCEBa_:
 3123|    302|    fn fcmp<T1: Into<ir::condcodes::FloatCC>>(self, Cond: T1, x: ir::Value, y: ir::Value) -> Value {
 3124|    302|        let Cond = Cond.into();
 3125|    302|        let ctrl_typevar = self.data_flow_graph().value_type(x);
 3126|    302|        let (inst, dfg) = self.FloatCompare(Opcode::Fcmp, ctrl_typevar, Cond, x, y);
 3127|    302|        dfg.first_result(inst)
 3128|    302|    }
_RINvYNtNtNtCsaK1aHRjoYiN_17cranelift_codegen2ir7builder14ReplaceBuilderNtB5_11InstBuilder22selectif_spectre_guardNtNtB7_9condcodes5IntCCEB9_:
 1512|     28|    fn selectif_spectre_guard<T1: Into<ir::condcodes::IntCC>>(self, Any: crate::ir::Type, cc: T1, flags: ir::Value, x: ir::Value, y: ir::Value) -> Value {
 1513|     28|        let cc = cc.into();
 1514|     28|        let (inst, dfg) = self.IntSelect(Opcode::SelectifSpectreGuard, Any, cc, flags, x, y);
 1515|     28|        dfg.first_result(inst)
 1516|     28|    }

_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code17constructor_cmoveINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2848|     28|pub fn constructor_cmove<C: Context>(ctx: &mut C, arg0: Type, arg1: &CC, arg2: &GprMem, arg3: Gpr) -> Option<ConsumesFlags> {
 2849|     28|    let pattern0_0 = arg0;
 2850|     28|    let pattern1_0 = arg1;
 2851|     28|    let pattern2_0 = arg2;
 2852|     28|    let pattern3_0 = arg3;
 2853|     28|    // Rule at src/isa/x64/inst.isle line 2012.
 2854|     28|    let expr0_0 = C::temp_writable_gpr(ctx, );
 2855|     28|    let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern0_0);
 2856|     28|    let expr2_0 = MInst::Cmove {
 2857|     28|        size: expr1_0,
 2858|     28|        cc: pattern1_0.clone(),
 2859|     28|        consequent: pattern2_0.clone(),
 2860|     28|        alternative: pattern3_0,
 2861|     28|        dst: expr0_0,
 2862|     28|    };
 2863|     28|    let expr3_0 = constructor_writable_gpr_to_r_reg(ctx, expr0_0)?;
 2864|     28|    let expr4_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
 2865|     28|        inst: expr2_0,
 2866|     28|        result: expr3_0,
 2867|     28|    };
 2868|     28|    return Some(expr4_0);
 2869|     28|}
_RNvXs4_NtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_codeNtB5_5MInstNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneBf_:
  339|   280k|#[derive(Clone)]
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_x64_setccINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 3141|    156|pub fn constructor_x64_setcc<C: Context>(ctx: &mut C, arg0: &CC) -> Option<ConsumesFlags> {
 3142|    156|    let pattern0_0 = arg0;
 3143|    156|    // Rule at src/isa/x64/inst.isle line 2114.
 3144|    156|    let expr0_0 = C::temp_writable_gpr(ctx, );
 3145|    156|    let expr1_0 = MInst::Setcc {
 3146|    156|        cc: pattern0_0.clone(),
 3147|    156|        dst: expr0_0,
 3148|    156|    };
 3149|    156|    let expr2_0 = constructor_writable_gpr_to_r_reg(ctx, expr0_0)?;
 3150|    156|    let expr3_0 = ConsumesFlags::ConsumesFlagsReturnsReg {
 3151|    156|        inst: expr1_0,
 3152|    156|        result: expr2_0,
 3153|    156|    };
 3154|    156|    return Some(expr3_0);
 3155|    156|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_x64_tzcntINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5006|      2|pub fn constructor_x64_tzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Option<Gpr> {
 5007|      2|    let pattern0_0 = arg0;
 5008|      2|    let pattern1_0 = arg1;
 5009|      2|    // Rule at src/isa/x64/inst.isle line 2945.
 5010|      2|    let expr0_0 = C::temp_writable_gpr(ctx, );
 5011|      2|    let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern0_0);
 5012|      2|    let expr2_0 = UnaryRmROpcode::Tzcnt;
 5013|      2|    let expr3_0 = C::gpr_to_gpr_mem(ctx, pattern1_0);
 5014|      2|    let expr4_0 = MInst::UnaryRmR {
 5015|      2|        size: expr1_0,
 5016|      2|        op: expr2_0,
 5017|      2|        src: expr3_0,
 5018|      2|        dst: expr0_0,
 5019|      2|    };
 5020|      2|    let expr5_0 = C::emit(ctx, &expr4_0);
 5021|      2|    let expr6_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 5022|      2|    return Some(expr6_0);
 5023|      2|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code26constructor_xmm_unary_rm_rINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4496|    214|pub fn constructor_xmm_unary_rm_r<C: Context>(ctx: &mut C, arg0: &SseOpcode, arg1: &XmmMem) -> Option<Xmm> {
 4497|    214|    let pattern0_0 = arg0;
 4498|    214|    let pattern1_0 = arg1;
 4499|    214|    // Rule at src/isa/x64/inst.isle line 2692.
 4500|    214|    let expr0_0 = C::temp_writable_xmm(ctx, );
 4501|    214|    let expr1_0 = MInst::XmmUnaryRmR {
 4502|    214|        op: pattern0_0.clone(),
 4503|    214|        src: pattern1_0.clone(),
 4504|    214|        dst: expr0_0,
 4505|    214|    };
 4506|    214|    let expr2_0 = C::emit(ctx, &expr1_0);
 4507|    214|    let expr3_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 4508|    214|    return Some(expr3_0);
 4509|    214|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code23constructor_x64_roundssINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4353|      4|pub fn constructor_x64_roundss<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Option<Xmm> {
 4354|      4|    let pattern0_0 = arg0;
 4355|      4|    let pattern1_0 = arg1;
 4356|      4|    // Rule at src/isa/x64/inst.isle line 2618.
 4357|      4|    let expr0_0 = SseOpcode::Roundss;
 4358|      4|    let expr1_0 = C::encode_round_imm(ctx, pattern1_0);
 4359|      4|    let expr2_0 = constructor_xmm_unary_rm_r_imm(ctx, &expr0_0, pattern0_0, expr1_0)?;
 4360|      4|    return Some(expr2_0);
 4361|      4|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code20constructor_x64_testINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2827|      6|pub fn constructor_x64_test<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: &GprMemImm, arg2: Gpr) -> Option<ProducesFlags> {
 2828|      6|    let pattern0_0 = arg0;
 2829|      6|    let pattern1_0 = arg1;
 2830|      6|    let pattern2_0 = arg2;
 2831|      6|    // Rule at src/isa/x64/inst.isle line 2000.
 2832|      6|    let expr0_0 = CmpOpcode::Test;
 2833|      6|    let expr1_0 = constructor_cmp_rmi_r(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
 2834|      6|    return Some(expr1_0);
 2835|      6|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_put_in_xmmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1715|    426|pub fn constructor_put_in_xmm<C: Context>(ctx: &mut C, arg0: Value) -> Option<Xmm> {
 1716|    426|    let pattern0_0 = arg0;
 1717|    426|    // Rule at src/isa/x64/inst.isle line 1304.
 1718|    426|    let expr0_0 = C::put_in_reg(ctx, pattern0_0);
 1719|    426|    let expr1_0 = C::xmm_new(ctx, expr0_0);
 1720|    426|    return Some(expr1_0);
 1721|    426|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_x64_andpsINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 3386|      2|pub fn constructor_x64_andps<C: Context>(ctx: &mut C, arg0: Xmm, arg1: &XmmMem) -> Option<Xmm> {
 3387|      2|    let pattern0_0 = arg0;
 3388|      2|    let pattern1_0 = arg1;
 3389|      2|    // Rule at src/isa/x64/inst.isle line 2224.
 3390|      2|    let expr0_0: Type = F32X4;
 3391|      2|    let expr1_0 = SseOpcode::Andps;
 3392|      2|    let expr2_0 = constructor_xmm_rm_r(ctx, expr0_0, &expr1_0, pattern0_0, pattern1_0)?;
 3393|      2|    return Some(expr2_0);
 3394|      2|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_x64_movINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2100|  9.50k|pub fn constructor_x64_mov<C: Context>(ctx: &mut C, arg0: &Amode) -> Option<Reg> {
 2101|  9.50k|    let pattern0_0 = arg0;
 2102|  9.50k|    // Rule at src/isa/x64/inst.isle line 1638.
 2103|  9.50k|    let expr0_0 = C::temp_writable_gpr(ctx, );
 2104|  9.50k|    let expr1_0 = C::amode_to_synthetic_amode(ctx, pattern0_0);
 2105|  9.50k|    let expr2_0 = MInst::Mov64MR {
 2106|  9.50k|        src: expr1_0,
 2107|  9.50k|        dst: expr0_0,
 2108|  9.50k|    };
 2109|  9.50k|    let expr3_0 = C::emit(ctx, &expr2_0);
 2110|  9.50k|    let expr4_0 = constructor_writable_gpr_to_r_reg(ctx, expr0_0)?;
 2111|  9.50k|    return Some(expr4_0);
 2112|  9.50k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code33constructor_cvt_float_to_sint_seqINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5647|    216|pub fn constructor_cvt_float_to_sint_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: bool) -> Option<Gpr> {
 5648|    216|    let pattern0_0 = arg0;
 5649|    216|    let pattern1_0 = arg1;
 5650|    216|    let pattern2_0 = C::value_type(ctx, pattern1_0);
 5651|    216|    let pattern3_0 = arg2;
 5652|    216|    // Rule at src/isa/x64/inst.isle line 3223.
 5653|    216|    let expr0_0 = C::raw_operand_size_of_type(ctx, pattern0_0);
 5654|    216|    let expr1_0 = C::raw_operand_size_of_type(ctx, pattern2_0);
 5655|    216|    let expr2_0 = C::temp_writable_gpr(ctx, );
 5656|    216|    let expr3_0 = C::temp_writable_xmm(ctx, );
 5657|    216|    let expr4_0 = C::temp_writable_gpr(ctx, );
 5658|    216|    let expr5_0 = constructor_put_in_xmm(ctx, pattern1_0)?;
 5659|    216|    let expr6_0 = MInst::CvtFloatToSintSeq {
 5660|    216|        dst_size: expr0_0,
 5661|    216|        src_size: expr1_0,
 5662|    216|        is_saturating: pattern3_0,
 5663|    216|        src: expr5_0,
 5664|    216|        dst: expr2_0,
 5665|    216|        tmp_gpr: expr4_0,
 5666|    216|        tmp_xmm: expr3_0,
 5667|    216|    };
 5668|    216|    let expr7_0 = C::emit(ctx, &expr6_0);
 5669|    216|    let expr8_0 = C::writable_gpr_to_gpr(ctx, expr2_0);
 5670|    216|    return Some(expr8_0);
 5671|    216|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code34constructor_with_flags_side_effectINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1011|  9.46k|pub fn constructor_with_flags_side_effect<C: Context>(ctx: &mut C, arg0: &ProducesFlags, arg1: &ConsumesFlags) -> Option<SideEffectNoResult> {
 1012|  9.46k|    let pattern0_0 = arg0;
 1013|  9.46k|    match pattern0_0 {
 1014|       |        &ProducesFlags::AlreadyExistingFlags  => {
 1015|      0|            let pattern2_0 = arg1;
 1016|      0|            match pattern2_0 {
 1017|      0|                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref pattern3_0 } => {
 1018|      0|                    // Rule at src/prelude.isle line 782.
 1019|      0|                    let expr0_0 = SideEffectNoResult::Inst {
 1020|      0|                        inst: pattern3_0.clone(),
 1021|      0|                    };
 1022|      0|                    return Some(expr0_0);
 1023|       |                }
 1024|      0|                &ConsumesFlags::ConsumesFlagsSideEffect2 { inst1: ref pattern3_0, inst2: ref pattern3_1 } => {
 1025|      0|                    // Rule at src/prelude.isle line 787.
 1026|      0|                    let expr0_0 = SideEffectNoResult::Inst2 {
 1027|      0|                        inst1: pattern3_0.clone(),
 1028|      0|                        inst2: pattern3_1.clone(),
 1029|      0|                    };
 1030|      0|                    return Some(expr0_0);
 1031|       |                }
 1032|      0|                _ => {}
 1033|       |            }
 1034|       |        }
 1035|  9.46k|        &ProducesFlags::ProducesFlagsSideEffect { inst: ref pattern1_0 } => {
 1036|  9.46k|            let pattern2_0 = arg1;
 1037|  9.46k|            match pattern2_0 {
 1038|  9.46k|                &ConsumesFlags::ConsumesFlagsSideEffect { inst: ref pattern3_0 } => {
 1039|  9.46k|                    // Rule at src/prelude.isle line 792.
 1040|  9.46k|                    let expr0_0 = SideEffectNoResult::Inst2 {
 1041|  9.46k|                        inst1: pattern1_0.clone(),
 1042|  9.46k|                        inst2: pattern3_0.clone(),
 1043|  9.46k|                    };
 1044|  9.46k|                    return Some(expr0_0);
 1045|       |                }
 1046|      0|                &ConsumesFlags::ConsumesFlagsSideEffect2 { inst1: ref pattern3_0, inst2: ref pattern3_1 } => {
 1047|      0|                    // Rule at src/prelude.isle line 797.
 1048|      0|                    let expr0_0 = SideEffectNoResult::Inst3 {
 1049|      0|                        inst1: pattern1_0.clone(),
 1050|      0|                        inst2: pattern3_0.clone(),
 1051|      0|                        inst3: pattern3_1.clone(),
 1052|      0|                    };
 1053|      0|                    return Some(expr0_0);
 1054|       |                }
 1055|      0|                _ => {}
 1056|       |            }
 1057|       |        }
 1058|      0|        _ => {}
 1059|       |    }
 1060|      0|    return None;
 1061|  9.46k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code25constructor_extend_to_gprINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1791|    588|pub fn constructor_extend_to_gpr<C: Context>(ctx: &mut C, arg0: Value, arg1: Type, arg2: &ExtendKind) -> Option<Gpr> {
 1792|    588|    let pattern0_0 = arg0;
 1793|    588|    let pattern1_0 = C::value_type(ctx, pattern0_0);
 1794|    588|    let pattern2_0 = arg1;
 1795|    588|    if pattern2_0 == pattern1_0 {
 1796|     76|        let pattern4_0 = arg2;
 1797|       |        // Rule at src/isa/x64/inst.isle line 1493.
 1798|     76|        let expr0_0 = constructor_put_in_gpr(ctx, pattern0_0)?;
 1799|     76|        return Some(expr0_0);
 1800|    512|    }
 1801|    512|    let pattern3_0 = arg2;
 1802|    512|    // Rule at src/isa/x64/inst.isle line 1496.
 1803|    512|    let expr0_0 = C::ty_bits_u16(ctx, pattern1_0);
 1804|    512|    let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern2_0);
 1805|    512|    let expr2_0 = constructor_operand_size_bits(ctx, &expr1_0)?;
 1806|    512|    let expr3_0 = C::ext_mode(ctx, expr0_0, expr2_0);
 1807|    512|    let expr4_0 = constructor_put_in_gpr_mem(ctx, pattern0_0)?;
 1808|    512|    let expr5_0 = constructor_extend(ctx, pattern3_0, pattern2_0, &expr3_0, &expr4_0)?;
 1809|    512|    return Some(expr5_0);
 1810|    588|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_x64_ud2INtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4963|  9.71k|pub fn constructor_x64_ud2<C: Context>(ctx: &mut C, arg0: &TrapCode) -> Option<SideEffectNoResult> {
 4964|  9.71k|    let pattern0_0 = arg0;
 4965|  9.71k|    // Rule at src/isa/x64/inst.isle line 2927.
 4966|  9.71k|    let expr0_0 = MInst::Ud2 {
 4967|  9.71k|        trap_code: pattern0_0.clone(),
 4968|  9.71k|    };
 4969|  9.71k|    let expr1_0 = SideEffectNoResult::Inst {
 4970|  9.71k|        inst: expr0_0,
 4971|  9.71k|    };
 4972|  9.71k|    return Some(expr1_0);
 4973|  9.71k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code34constructor_put_masked_in_imm8_gprINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1640|     76|pub fn constructor_put_masked_in_imm8_gpr<C: Context>(ctx: &mut C, arg0: Value, arg1: Type) -> Option<Imm8Gpr> {
 1641|     76|    let pattern0_0 = arg0;
 1642|     76|    if let Some(pattern1_0) = C::def_inst(ctx, pattern0_0) {
 1643|     76|        let pattern2_0 = C::inst_data(ctx, pattern1_0);
 1644|     76|        if let &InstructionData::UnaryImm { opcode: ref pattern3_0, imm: pattern3_1 } = &pattern2_0 {
 1645|     76|            if let &Opcode::Iconst  = pattern3_0 {
 1646|     76|                let pattern5_0 = C::u64_from_imm64(ctx, pattern3_1);
 1647|     76|                let pattern6_0 = arg1;
 1648|     76|                // Rule at src/isa/x64/inst.isle line 1066.
 1649|     76|                let expr0_0 = C::const_to_type_masked_imm8(ctx, pattern5_0, pattern6_0);
 1650|     76|                return Some(expr0_0);
 1651|      0|            }
 1652|      0|        }
 1653|      0|    }
 1654|      0|    let pattern1_0 = arg1;
 1655|      0|    if let Some(pattern2_0) = C::fits_in_16(ctx, pattern1_0) {
 1656|       |        // Rule at src/isa/x64/inst.isle line 1068.
 1657|      0|        let expr0_0: Type = I64;
 1658|      0|        let expr1_0 = C::put_in_regs(ctx, pattern0_0);
 1659|      0|        let expr2_0: usize = 0i128 as usize;
 1660|      0|        let expr3_0 = constructor_value_regs_get_gpr(ctx, expr1_0, expr2_0)?;
 1661|      0|        let expr4_0 = C::shift_mask(ctx, pattern2_0);
 1662|      0|        let expr5_0 = RegMemImm::Imm {
 1663|      0|            simm32: expr4_0,
 1664|      0|        };
 1665|      0|        let expr6_0 = C::gpr_mem_imm_new(ctx, &expr5_0);
 1666|      0|        let expr7_0 = constructor_x64_and(ctx, expr0_0, expr3_0, &expr6_0)?;
 1667|      0|        let expr8_0 = C::gpr_to_imm8_gpr(ctx, expr7_0);
 1668|      0|        return Some(expr8_0);
 1669|      0|    }
 1670|      0|    // Rule at src/isa/x64/inst.isle line 1070.
 1671|      0|    let expr0_0 = C::put_in_regs(ctx, pattern0_0);
 1672|      0|    let expr1_0: usize = 0i128 as usize;
 1673|      0|    let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 1674|      0|    let expr3_0 = C::gpr_to_imm8_gpr(ctx, expr2_0);
 1675|      0|    return Some(expr3_0);
 1676|     76|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code27constructor_xmm_min_max_seqINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5128|      2|pub fn constructor_xmm_min_max_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: bool, arg2: Xmm, arg3: Xmm) -> Option<Xmm> {
 5129|      2|    let pattern0_0 = arg0;
 5130|      2|    let pattern1_0 = arg1;
 5131|      2|    let pattern2_0 = arg2;
 5132|      2|    let pattern3_0 = arg3;
 5133|      2|    // Rule at src/isa/x64/inst.isle line 3001.
 5134|      2|    let expr0_0 = C::temp_writable_xmm(ctx, );
 5135|      2|    let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern0_0);
 5136|      2|    let expr2_0 = MInst::XmmMinMaxSeq {
 5137|      2|        size: expr1_0,
 5138|      2|        is_min: pattern1_0,
 5139|      2|        lhs: pattern2_0,
 5140|      2|        rhs: pattern3_0,
 5141|      2|        dst: expr0_0,
 5142|      2|    };
 5143|      2|    let expr3_0 = C::emit(ctx, &expr2_0);
 5144|      2|    let expr4_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 5145|      2|    return Some(expr4_0);
 5146|      2|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code33constructor_writable_gpr_to_r_regINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6885|  9.68k|pub fn constructor_writable_gpr_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableGpr) -> Option<Reg> {
 6886|  9.68k|    let pattern0_0 = arg0;
 6887|  9.68k|    // Rule at src/isa/x64/inst.isle line 3829.
 6888|  9.68k|    let expr0_0 = C::writable_gpr_to_reg(ctx, pattern0_0);
 6889|  9.68k|    let expr1_0 = C::writable_reg_to_reg(ctx, expr0_0);
 6890|  9.68k|    return Some(expr1_0);
 6891|  9.68k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code33constructor_writable_xmm_to_r_regINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6912|     52|pub fn constructor_writable_xmm_to_r_reg<C: Context>(ctx: &mut C, arg0: WritableXmm) -> Option<Reg> {
 6913|     52|    let pattern0_0 = arg0;
 6914|     52|    // Rule at src/isa/x64/inst.isle line 3838.
 6915|     52|    let expr0_0 = C::writable_xmm_to_reg(ctx, pattern0_0);
 6916|     52|    let expr1_0 = C::writable_reg_to_reg(ctx, expr0_0);
 6917|     52|    return Some(expr1_0);
 6918|     52|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code26constructor_put_in_gpr_memINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1697|    528|pub fn constructor_put_in_gpr_mem<C: Context>(ctx: &mut C, arg0: Value) -> Option<GprMem> {
 1698|    528|    let pattern0_0 = arg0;
 1699|    528|    // Rule at src/isa/x64/inst.isle line 1290.
 1700|    528|    let expr0_0 = C::put_in_reg_mem(ctx, pattern0_0);
 1701|    528|    let expr1_0 = C::reg_mem_to_gpr_mem(ctx, &expr0_0);
 1702|    528|    return Some(expr1_0);
 1703|    528|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code25constructor_x64_xmm_movrmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2283|      4|pub fn constructor_x64_xmm_movrm<C: Context>(ctx: &mut C, arg0: &SseOpcode, arg1: &SyntheticAmode, arg2: Xmm) -> Option<SideEffectNoResult> {
 2284|      4|    let pattern0_0 = arg0;
 2285|      4|    let pattern1_0 = arg1;
 2286|      4|    let pattern2_0 = arg2;
 2287|      4|    // Rule at src/isa/x64/inst.isle line 1713.
 2288|      4|    let expr0_0 = C::xmm_to_reg(ctx, pattern2_0);
 2289|      4|    let expr1_0 = MInst::XmmMovRM {
 2290|      4|        op: pattern0_0.clone(),
 2291|      4|        src: expr0_0,
 2292|      4|        dst: pattern1_0.clone(),
 2293|      4|    };
 2294|      4|    let expr2_0 = SideEffectNoResult::Inst {
 2295|      4|        inst: expr1_0,
 2296|      4|    };
 2297|      4|    return Some(expr2_0);
 2298|      4|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code24constructor_x64_cvtsi2sdINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5559|      2|pub fn constructor_x64_cvtsi2sd<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Option<Xmm> {
 5560|      2|    let pattern0_0 = arg0;
 5561|      2|    let pattern1_0 = arg1;
 5562|      2|    // Rule at src/isa/x64/inst.isle line 3185.
 5563|      2|    let expr0_0 = C::temp_writable_xmm(ctx, );
 5564|      2|    let expr1_0 = C::raw_operand_size_of_type(ctx, pattern0_0);
 5565|      2|    let expr2_0 = SseOpcode::Cvtsi2sd;
 5566|      2|    let expr3_0 = MInst::GprToXmm {
 5567|      2|        op: expr2_0,
 5568|      2|        src: pattern1_0.clone(),
 5569|      2|        dst: expr0_0,
 5570|      2|        src_size: expr1_0,
 5571|      2|    };
 5572|      2|    let expr4_0 = C::emit(ctx, &expr3_0);
 5573|      2|    let expr5_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 5574|      2|    return Some(expr5_0);
 5575|      2|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_put_in_gprINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1688|  38.5k|pub fn constructor_put_in_gpr<C: Context>(ctx: &mut C, arg0: Value) -> Option<Gpr> {
 1689|  38.5k|    let pattern0_0 = arg0;
 1690|  38.5k|    // Rule at src/isa/x64/inst.isle line 1283.
 1691|  38.5k|    let expr0_0 = C::put_in_reg(ctx, pattern0_0);
 1692|  38.5k|    let expr1_0 = C::gpr_new(ctx, expr0_0);
 1693|  38.5k|    return Some(expr1_0);
 1694|  38.5k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code29constructor_operand_size_bitsINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1125|    512|pub fn constructor_operand_size_bits<C: Context>(ctx: &mut C, arg0: &OperandSize) -> Option<u16> {
 1126|    512|    let pattern0_0 = arg0;
 1127|    512|    match pattern0_0 {
 1128|       |        &OperandSize::Size8  => {
 1129|       |            // Rule at src/isa/x64/inst.isle line 549.
 1130|      0|            let expr0_0: u16 = 8i128 as u16;
 1131|      0|            return Some(expr0_0);
 1132|       |        }
 1133|       |        &OperandSize::Size16  => {
 1134|       |            // Rule at src/isa/x64/inst.isle line 550.
 1135|      0|            let expr0_0: u16 = 16i128 as u16;
 1136|      0|            return Some(expr0_0);
 1137|       |        }
 1138|       |        &OperandSize::Size32  => {
 1139|       |            // Rule at src/isa/x64/inst.isle line 551.
 1140|      4|            let expr0_0: u16 = 32i128 as u16;
 1141|      4|            return Some(expr0_0);
 1142|       |        }
 1143|       |        &OperandSize::Size64  => {
 1144|       |            // Rule at src/isa/x64/inst.isle line 552.
 1145|    508|            let expr0_0: u16 = 64i128 as u16;
 1146|    508|            return Some(expr0_0);
 1147|       |        }
 1148|      0|        _ => {}
 1149|      0|    }
 1150|      0|    return None;
 1151|    512|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code30constructor_bitcast_xmm_to_gprINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6724|      4|pub fn constructor_bitcast_xmm_to_gpr<C: Context>(ctx: &mut C, arg0: Type, arg1: Xmm) -> Option<Gpr> {
 6725|      4|    let pattern0_0 = arg0;
 6726|      4|    if pattern0_0 == F32 {
 6727|      4|        let pattern2_0 = arg1;
 6728|      4|        // Rule at src/isa/x64/inst.isle line 3647.
 6729|      4|        let expr0_0 = SseOpcode::Movd;
 6730|      4|        let expr1_0 = OperandSize::Size32;
 6731|      4|        let expr2_0 = constructor_xmm_to_gpr(ctx, &expr0_0, pattern2_0, &expr1_0)?;
 6732|      4|        return Some(expr2_0);
 6733|      0|    }
 6734|      0|    if pattern0_0 == F64 {
 6735|      0|        let pattern2_0 = arg1;
 6736|      0|        // Rule at src/isa/x64/inst.isle line 3649.
 6737|      0|        let expr0_0 = SseOpcode::Movq;
 6738|      0|        let expr1_0 = OperandSize::Size64;
 6739|      0|        let expr2_0 = constructor_xmm_to_gpr(ctx, &expr0_0, pattern2_0, &expr1_0)?;
 6740|      0|        return Some(expr2_0);
 6741|      0|    }
 6742|      0|    return None;
 6743|      4|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_amode_addINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1230|  38.7k|pub fn constructor_amode_add<C: Context>(ctx: &mut C, arg0: &Amode, arg1: Value) -> Option<Amode> {
 1231|  38.7k|    let pattern0_0 = arg0;
 1232|  38.7k|    match pattern0_0 {
 1233|  38.7k|        &Amode::ImmReg { simm32: pattern1_0, base: pattern1_1, flags: pattern1_2 } => {
 1234|  38.7k|            let pattern2_0 = arg1;
 1235|  38.7k|            if let Some(pattern3_0) = C::def_inst(ctx, pattern2_0) {
 1236|  9.95k|                let pattern4_0 = C::inst_data(ctx, pattern3_0);
 1237|  9.95k|                match &pattern4_0 {
 1238|    224|                    &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 1239|    224|                        match pattern5_0 {
 1240|       |                            &Opcode::Uextend  => {
 1241|    224|                                if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
 1242|    194|                                    let pattern8_0 = C::inst_data(ctx, pattern7_0);
 1243|    194|                                    if let &InstructionData::UnaryImm { opcode: ref pattern9_0, imm: pattern9_1 } = &pattern8_0 {
 1244|      8|                                        if let &Opcode::Iconst  = pattern9_0 {
 1245|      8|                                            if let Some(pattern11_0) = C::simm32(ctx, pattern9_1) {
 1246|      8|                                                if let Some(pattern12_0) = C::u32_nonnegative(ctx, pattern11_0) {
 1247|      4|                                                    let mut closure13 = || {
 1248|       |                                                        let expr0_0 = C::s32_add_fallible(ctx, pattern1_0, pattern12_0)?;
 1249|       |                                                        return Some(expr0_0);
 1250|       |                                                    };
 1251|      4|                                                    if let Some(pattern13_0) = closure13() {
 1252|       |                                                        // Rule at src/isa/x64/inst.isle line 993.
 1253|      4|                                                        let expr0_0 = Amode::ImmReg {
 1254|      4|                                                            simm32: pattern13_0,
 1255|      4|                                                            base: pattern1_1,
 1256|      4|                                                            flags: pattern1_2,
 1257|      4|                                                        };
 1258|      4|                                                        return Some(expr0_0);
 1259|      0|                                                    }
 1260|      4|                                                }
 1261|      0|                                            }
 1262|      0|                                        }
 1263|    186|                                    }
 1264|     30|                                }
 1265|       |                            }
 1266|       |                            &Opcode::Sextend  => {
 1267|      0|                                if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
 1268|      0|                                    let pattern8_0 = C::inst_data(ctx, pattern7_0);
 1269|      0|                                    if let &InstructionData::UnaryImm { opcode: ref pattern9_0, imm: pattern9_1 } = &pattern8_0 {
 1270|      0|                                        if let &Opcode::Iconst  = pattern9_0 {
 1271|      0|                                            if let Some(pattern11_0) = C::simm32(ctx, pattern9_1) {
 1272|      0|                                                let mut closure12 = || {
 1273|       |                                                    let expr0_0 = C::s32_add_fallible(ctx, pattern1_0, pattern11_0)?;
 1274|       |                                                    return Some(expr0_0);
 1275|       |                                                };
 1276|      0|                                                if let Some(pattern12_0) = closure12() {
 1277|       |                                                    // Rule at src/isa/x64/inst.isle line 1003.
 1278|      0|                                                    let expr0_0 = Amode::ImmReg {
 1279|      0|                                                        simm32: pattern12_0,
 1280|      0|                                                        base: pattern1_1,
 1281|      0|                                                        flags: pattern1_2,
 1282|      0|                                                    };
 1283|      0|                                                    return Some(expr0_0);
 1284|      0|                                                }
 1285|      0|                                            }
 1286|      0|                                        }
 1287|      0|                                    }
 1288|      0|                                }
 1289|       |                            }
 1290|      0|                            _ => {}
 1291|       |                        }
 1292|       |                    }
 1293|     28|                    &InstructionData::UnaryImm { opcode: ref pattern5_0, imm: pattern5_1 } => {
 1294|     28|                        if let &Opcode::Iconst  = pattern5_0 {
 1295|     28|                            if let Some(pattern7_0) = C::simm32(ctx, pattern5_1) {
 1296|      0|                                let mut closure8 = || {
 1297|       |                                    let expr0_0 = C::s32_add_fallible(ctx, pattern1_0, pattern7_0)?;
 1298|       |                                    return Some(expr0_0);
 1299|       |                                };
 1300|      0|                                if let Some(pattern8_0) = closure8() {
 1301|       |                                    // Rule at src/isa/x64/inst.isle line 980.
 1302|      0|                                    let expr0_0 = Amode::ImmReg {
 1303|      0|                                        simm32: pattern8_0,
 1304|      0|                                        base: pattern1_1,
 1305|      0|                                        flags: pattern1_2,
 1306|      0|                                    };
 1307|      0|                                    return Some(expr0_0);
 1308|      0|                                }
 1309|     28|                            }
 1310|      0|                        }
 1311|       |                    }
 1312|  9.70k|                    _ => {}
 1313|       |                }
 1314|  28.7k|            }
 1315|       |        }
 1316|      0|        &Amode::ImmRegRegShift { simm32: pattern1_0, base: pattern1_1, index: pattern1_2, shift: pattern1_3, flags: pattern1_4 } => {
 1317|      0|            let pattern2_0 = arg1;
 1318|      0|            if let Some(pattern3_0) = C::def_inst(ctx, pattern2_0) {
 1319|      0|                let pattern4_0 = C::inst_data(ctx, pattern3_0);
 1320|      0|                match &pattern4_0 {
 1321|      0|                    &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 1322|      0|                        match pattern5_0 {
 1323|       |                            &Opcode::Uextend  => {
 1324|      0|                                if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
 1325|      0|                                    let pattern8_0 = C::inst_data(ctx, pattern7_0);
 1326|      0|                                    if let &InstructionData::UnaryImm { opcode: ref pattern9_0, imm: pattern9_1 } = &pattern8_0 {
 1327|      0|                                        if let &Opcode::Iconst  = pattern9_0 {
 1328|      0|                                            if let Some(pattern11_0) = C::simm32(ctx, pattern9_1) {
 1329|      0|                                                if let Some(pattern12_0) = C::u32_nonnegative(ctx, pattern11_0) {
 1330|      0|                                                    let mut closure13 = || {
 1331|       |                                                        let expr0_0 = C::s32_add_fallible(ctx, pattern1_0, pattern12_0)?;
 1332|       |                                                        return Some(expr0_0);
 1333|       |                                                    };
 1334|      0|                                                    if let Some(pattern13_0) = closure13() {
 1335|       |                                                        // Rule at src/isa/x64/inst.isle line 997.
 1336|      0|                                                        let expr0_0 = Amode::ImmRegRegShift {
 1337|      0|                                                            simm32: pattern13_0,
 1338|      0|                                                            base: pattern1_1,
 1339|      0|                                                            index: pattern1_2,
 1340|      0|                                                            shift: pattern1_3,
 1341|      0|                                                            flags: pattern1_4,
 1342|      0|                                                        };
 1343|      0|                                                        return Some(expr0_0);
 1344|      0|                                                    }
 1345|      0|                                                }
 1346|      0|                                            }
 1347|      0|                                        }
 1348|      0|                                    }
 1349|      0|                                }
 1350|       |                            }
 1351|       |                            &Opcode::Sextend  => {
 1352|      0|                                if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
 1353|      0|                                    let pattern8_0 = C::inst_data(ctx, pattern7_0);
 1354|      0|                                    if let &InstructionData::UnaryImm { opcode: ref pattern9_0, imm: pattern9_1 } = &pattern8_0 {
 1355|      0|                                        if let &Opcode::Iconst  = pattern9_0 {
 1356|      0|                                            if let Some(pattern11_0) = C::simm32(ctx, pattern9_1) {
 1357|      0|                                                let mut closure12 = || {
 1358|       |                                                    let expr0_0 = C::s32_add_fallible(ctx, pattern1_0, pattern11_0)?;
 1359|       |                                                    return Some(expr0_0);
 1360|       |                                                };
 1361|      0|                                                if let Some(pattern12_0) = closure12() {
 1362|       |                                                    // Rule at src/isa/x64/inst.isle line 1007.
 1363|      0|                                                    let expr0_0 = Amode::ImmRegRegShift {
 1364|      0|                                                        simm32: pattern12_0,
 1365|      0|                                                        base: pattern1_1,
 1366|      0|                                                        index: pattern1_2,
 1367|      0|                                                        shift: pattern1_3,
 1368|      0|                                                        flags: pattern1_4,
 1369|      0|                                                    };
 1370|      0|                                                    return Some(expr0_0);
 1371|      0|                                                }
 1372|      0|                                            }
 1373|      0|                                        }
 1374|      0|                                    }
 1375|      0|                                }
 1376|       |                            }
 1377|      0|                            _ => {}
 1378|       |                        }
 1379|       |                    }
 1380|      0|                    &InstructionData::UnaryImm { opcode: ref pattern5_0, imm: pattern5_1 } => {
 1381|      0|                        if let &Opcode::Iconst  = pattern5_0 {
 1382|      0|                            if let Some(pattern7_0) = C::simm32(ctx, pattern5_1) {
 1383|      0|                                let mut closure8 = || {
 1384|       |                                    let expr0_0 = C::s32_add_fallible(ctx, pattern1_0, pattern7_0)?;
 1385|       |                                    return Some(expr0_0);
 1386|       |                                };
 1387|      0|                                if let Some(pattern8_0) = closure8() {
 1388|       |                                    // Rule at src/isa/x64/inst.isle line 984.
 1389|      0|                                    let expr0_0 = Amode::ImmRegRegShift {
 1390|      0|                                        simm32: pattern8_0,
 1391|      0|                                        base: pattern1_1,
 1392|      0|                                        index: pattern1_2,
 1393|      0|                                        shift: pattern1_3,
 1394|      0|                                        flags: pattern1_4,
 1395|      0|                                    };
 1396|      0|                                    return Some(expr0_0);
 1397|      0|                                }
 1398|      0|                            }
 1399|      0|                        }
 1400|       |                    }
 1401|      0|                    _ => {}
 1402|       |                }
 1403|      0|            }
 1404|       |        }
 1405|      0|        _ => {}
 1406|       |    }
 1407|  38.7k|    let pattern0_0 = arg0;
 1408|  38.7k|    if let &Amode::ImmReg { simm32: pattern1_0, base: pattern1_1, flags: pattern1_2 } = pattern0_0 {
 1409|  38.7k|        let pattern2_0 = arg1;
 1410|  38.7k|        if let Some(pattern3_0) = C::def_inst(ctx, pattern2_0) {
 1411|  9.95k|            let pattern4_0 = C::inst_data(ctx, pattern3_0);
 1412|  9.95k|            match &pattern4_0 {
 1413|    220|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 1414|    220|                    if let &Opcode::Uextend  = pattern5_0 {
 1415|    220|                        if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
 1416|    190|                            let pattern8_0 = C::inst_data(ctx, pattern7_0);
 1417|    190|                            if let &InstructionData::Binary { opcode: ref pattern9_0, args: ref pattern9_1 } = &pattern8_0 {
 1418|      0|                                if let &Opcode::Ishl  = pattern9_0 {
 1419|      0|                                    let (pattern11_0, pattern11_1) = C::unpack_value_array_2(ctx, pattern9_1);
 1420|      0|                                    if let Some(pattern12_0) = C::def_inst(ctx, pattern11_0) {
 1421|      0|                                        let pattern13_0 = C::inst_data(ctx, pattern12_0);
 1422|      0|                                        if let &InstructionData::Binary { opcode: ref pattern14_0, args: ref pattern14_1 } = &pattern13_0 {
 1423|      0|                                            if let &Opcode::Iadd  = pattern14_0 {
 1424|      0|                                                let (pattern16_0, pattern16_1) = C::unpack_value_array_2(ctx, pattern14_1);
 1425|      0|                                                if let Some(pattern17_0) = C::def_inst(ctx, pattern11_1) {
 1426|      0|                                                    let pattern18_0 = C::inst_data(ctx, pattern17_0);
 1427|      0|                                                    if let &InstructionData::UnaryImm { opcode: ref pattern19_0, imm: pattern19_1 } = &pattern18_0 {
 1428|      0|                                                        if let &Opcode::Iconst  = pattern19_0 {
 1429|      0|                                                            if let Some(pattern21_0) = C::uimm8(ctx, pattern19_1) {
 1430|      0|                                                                let mut closure22 = || {
 1431|       |                                                                    return Some(pattern1_1);
 1432|       |                                                                };
 1433|      0|                                                                if let Some(pattern22_0) = closure22() {
 1434|      0|                                                                    if let Some(()) = C::valid_reg(ctx, pattern22_0) {
 1435|      0|                                                                        let mut closure24 = || {
 1436|       |                                                                            let expr0_0 = C::u8_as_u32(ctx, pattern21_0)?;
 1437|       |                                                                            let expr1_0: u32 = 3i128 as u32;
 1438|       |                                                                            let expr2_0 = C::u32_lteq(ctx, expr0_0, expr1_0)?;
 1439|       |                                                                            return Some(expr2_0);
 1440|       |                                                                        };
 1441|      0|                                                                        if let Some(pattern24_0) = closure24() {
 1442|       |                                                                            // Rule at src/isa/x64/inst.isle line 966.
 1443|      0|                                                                            let expr0_0 = C::gpr_new(ctx, pattern1_1);
 1444|      0|                                                                            let expr1_0 = constructor_put_in_gpr(ctx, pattern11_0)?;
 1445|      0|                                                                            let expr2_0 = Amode::ImmRegRegShift {
 1446|      0|                                                                                simm32: pattern1_0,
 1447|      0|                                                                                base: expr0_0,
 1448|      0|                                                                                index: expr1_0,
 1449|      0|                                                                                shift: pattern21_0,
 1450|      0|                                                                                flags: pattern1_2,
 1451|      0|                                                                            };
 1452|      0|                                                                            return Some(expr2_0);
 1453|      0|                                                                        }
 1454|      0|                                                                    }
 1455|      0|                                                                }
 1456|      0|                                                            }
 1457|      0|                                                        }
 1458|      0|                                                    }
 1459|      0|                                                }
 1460|      0|                                            }
 1461|      0|                                        }
 1462|      0|                                    }
 1463|      0|                                    if let Some(pattern12_0) = C::def_inst(ctx, pattern11_1) {
 1464|      0|                                        let pattern13_0 = C::inst_data(ctx, pattern12_0);
 1465|      0|                                        if let &InstructionData::UnaryImm { opcode: ref pattern14_0, imm: pattern14_1 } = &pattern13_0 {
 1466|      0|                                            if let &Opcode::Iconst  = pattern14_0 {
 1467|      0|                                                if let Some(pattern16_0) = C::uimm8(ctx, pattern14_1) {
 1468|      0|                                                    let mut closure17 = || {
 1469|       |                                                        return Some(pattern1_1);
 1470|       |                                                    };
 1471|      0|                                                    if let Some(pattern17_0) = closure17() {
 1472|      0|                                                        if let Some(()) = C::valid_reg(ctx, pattern17_0) {
 1473|      0|                                                            let mut closure19 = || {
 1474|       |                                                                let expr0_0 = C::u8_as_u32(ctx, pattern16_0)?;
 1475|       |                                                                let expr1_0: u32 = 3i128 as u32;
 1476|       |                                                                let expr2_0 = C::u32_lteq(ctx, expr0_0, expr1_0)?;
 1477|       |                                                                return Some(expr2_0);
 1478|       |                                                            };
 1479|      0|                                                            if let Some(pattern19_0) = closure19() {
 1480|       |                                                                // Rule at src/isa/x64/inst.isle line 955.
 1481|      0|                                                                let expr0_0 = C::gpr_new(ctx, pattern1_1);
 1482|      0|                                                                let expr1_0: Type = I64;
 1483|      0|                                                                let expr2_0 = ExtendKind::Zero;
 1484|      0|                                                                let expr3_0 = constructor_extend_to_gpr(ctx, pattern11_0, expr1_0, &expr2_0)?;
 1485|      0|                                                                let expr4_0 = Amode::ImmRegRegShift {
 1486|      0|                                                                    simm32: pattern1_0,
 1487|      0|                                                                    base: expr0_0,
 1488|      0|                                                                    index: expr3_0,
 1489|      0|                                                                    shift: pattern16_0,
 1490|      0|                                                                    flags: pattern1_2,
 1491|      0|                                                                };
 1492|      0|                                                                return Some(expr4_0);
 1493|      0|                                                            }
 1494|      0|                                                        }
 1495|      0|                                                    }
 1496|      0|                                                }
 1497|      0|                                            }
 1498|      0|                                        }
 1499|      0|                                    }
 1500|      0|                                }
 1501|    190|                            }
 1502|     30|                        }
 1503|      0|                    }
 1504|       |                }
 1505|    252|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 1506|    252|                    if let &Opcode::Ishl  = pattern5_0 {
 1507|      0|                        let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 1508|      0|                        if let Some(pattern8_0) = C::def_inst(ctx, pattern7_1) {
 1509|      0|                            let pattern9_0 = C::inst_data(ctx, pattern8_0);
 1510|      0|                            if let &InstructionData::UnaryImm { opcode: ref pattern10_0, imm: pattern10_1 } = &pattern9_0 {
 1511|      0|                                if let &Opcode::Iconst  = pattern10_0 {
 1512|      0|                                    if let Some(pattern12_0) = C::uimm8(ctx, pattern10_1) {
 1513|      0|                                        let mut closure13 = || {
 1514|       |                                            return Some(pattern1_1);
 1515|       |                                        };
 1516|      0|                                        if let Some(pattern13_0) = closure13() {
 1517|      0|                                            if let Some(()) = C::valid_reg(ctx, pattern13_0) {
 1518|      0|                                                let mut closure15 = || {
 1519|       |                                                    let expr0_0 = C::u8_as_u32(ctx, pattern12_0)?;
 1520|       |                                                    let expr1_0: u32 = 3i128 as u32;
 1521|       |                                                    let expr2_0 = C::u32_lteq(ctx, expr0_0, expr1_0)?;
 1522|       |                                                    return Some(expr2_0);
 1523|       |                                                };
 1524|      0|                                                if let Some(pattern15_0) = closure15() {
 1525|       |                                                    // Rule at src/isa/x64/inst.isle line 951.
 1526|      0|                                                    let expr0_0 = C::gpr_new(ctx, pattern1_1);
 1527|      0|                                                    let expr1_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
 1528|      0|                                                    let expr2_0 = Amode::ImmRegRegShift {
 1529|      0|                                                        simm32: pattern1_0,
 1530|      0|                                                        base: expr0_0,
 1531|      0|                                                        index: expr1_0,
 1532|      0|                                                        shift: pattern12_0,
 1533|      0|                                                        flags: pattern1_2,
 1534|      0|                                                    };
 1535|      0|                                                    return Some(expr2_0);
 1536|      0|                                                }
 1537|      0|                                            }
 1538|      0|                                        }
 1539|      0|                                    }
 1540|      0|                                }
 1541|      0|                            }
 1542|      0|                        }
 1543|    252|                    }
 1544|       |                }
 1545|  9.48k|                _ => {}
 1546|       |            }
 1547|  28.7k|        }
 1548|      0|    }
 1549|  38.7k|    let pattern1_0 = arg1;
 1550|  38.7k|    if let Some(pattern2_0) = C::def_inst(ctx, pattern1_0) {
 1551|  9.95k|        let pattern3_0 = C::inst_data(ctx, pattern2_0);
 1552|  9.95k|        if let &InstructionData::Binary { opcode: ref pattern4_0, args: ref pattern4_1 } = &pattern3_0 {
 1553|    252|            if let &Opcode::Iadd  = pattern4_0 {
 1554|    252|                let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
 1555|       |                // Rule at src/isa/x64/inst.isle line 926.
 1556|    252|                let expr0_0 = constructor_amode_add(ctx, pattern0_0, pattern6_0)?;
 1557|    252|                let expr1_0 = constructor_amode_add(ctx, &expr0_0, pattern6_1)?;
 1558|    252|                return Some(expr1_0);
 1559|      0|            }
 1560|  9.70k|        }
 1561|  28.7k|    }
 1562|  38.4k|    let pattern0_0 = arg0;
 1563|  38.4k|    match pattern0_0 {
 1564|  38.4k|        &Amode::ImmReg { simm32: pattern1_0, base: pattern1_1, flags: pattern1_2 } => {
 1565|  38.4k|            if let Some(()) = C::invalid_reg_etor(ctx, pattern1_1) {
 1566|  38.2k|                let pattern3_0 = arg1;
 1567|  38.2k|                // Rule at src/isa/x64/inst.isle line 935.
 1568|  38.2k|                let expr0_0 = C::put_in_reg(ctx, pattern3_0);
 1569|  38.2k|                let expr1_0 = Amode::ImmReg {
 1570|  38.2k|                    simm32: pattern1_0,
 1571|  38.2k|                    base: expr0_0,
 1572|  38.2k|                    flags: pattern1_2,
 1573|  38.2k|                };
 1574|  38.2k|                return Some(expr1_0);
 1575|    251|            }
 1576|    251|            let pattern2_0 = arg1;
 1577|    251|            let mut closure3 = || {
 1578|       |                return Some(pattern1_1);
 1579|       |            };
 1580|    251|            if let Some(pattern3_0) = closure3() {
 1581|    251|                if let Some(()) = C::valid_reg(ctx, pattern3_0) {
 1582|       |                    // Rule at src/isa/x64/inst.isle line 941.
 1583|    251|                    let expr0_0 = C::gpr_new(ctx, pattern1_1);
 1584|    251|                    let expr1_0 = constructor_put_in_gpr(ctx, pattern2_0)?;
 1585|    248|                    let expr2_0: u8 = 0i128 as u8;
 1586|    248|                    let expr3_0 = Amode::ImmRegRegShift {
 1587|    248|                        simm32: pattern1_0,
 1588|    248|                        base: expr0_0,
 1589|    248|                        index: expr1_0,
 1590|    248|                        shift: expr2_0,
 1591|    248|                        flags: pattern1_2,
 1592|    248|                    };
 1593|    248|                    return Some(expr3_0);
 1594|      0|                }
 1595|      0|            }
 1596|       |        }
 1597|      0|        &Amode::ImmRegRegShift { simm32: pattern1_0, base: pattern1_1, index: pattern1_2, shift: pattern1_3, flags: pattern1_4 } => {
 1598|      0|            let pattern2_0 = arg1;
 1599|      0|            // Rule at src/isa/x64/inst.isle line 1017.
 1600|      0|            let expr0_0: Type = I64;
 1601|      0|            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern2_0)?;
 1602|      0|            let expr2_0 = constructor_x64_add(ctx, expr0_0, pattern1_1, &expr1_0)?;
 1603|      0|            let expr3_0 = Amode::ImmRegRegShift {
 1604|      0|                simm32: pattern1_0,
 1605|      0|                base: expr2_0,
 1606|      0|                index: pattern1_2,
 1607|      0|                shift: pattern1_3,
 1608|      0|                flags: pattern1_4,
 1609|      0|            };
 1610|      0|            return Some(expr3_0);
 1611|       |        }
 1612|      0|        _ => {}
 1613|       |    }
 1614|      0|    return None;
 1615|  38.7k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code35constructor_invert_icmp_cond_resultINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6141|  9.45k|pub fn constructor_invert_icmp_cond_result<C: Context>(ctx: &mut C, arg0: &IcmpCondResult) -> Option<IcmpCondResult> {
 6142|  9.45k|    let pattern0_0 = arg0;
 6143|  9.45k|    if let &IcmpCondResult::Condition { producer: ref pattern1_0, cc: ref pattern1_1 } = pattern0_0 {
 6144|  9.45k|        // Rule at src/isa/x64/inst.isle line 3421.
 6145|  9.45k|        let expr0_0 = C::cc_invert(ctx, pattern1_1);
 6146|  9.45k|        let expr1_0 = constructor_icmp_cond_result(ctx, pattern1_0, &expr0_0)?;
 6147|  9.45k|        return Some(expr1_0);
 6148|       |    }
 6149|       |    return None;
 6150|  9.45k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code36constructor_sink_load_to_gpr_mem_immINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1772|     14|pub fn constructor_sink_load_to_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: &SinkableLoad) -> Option<GprMemImm> {
 1773|     14|    let pattern0_0 = arg0;
 1774|     14|    // Rule at src/isa/x64/inst.isle line 1467.
 1775|     14|    let expr0_0 = C::sink_load(ctx, pattern0_0);
 1776|     14|    let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
 1777|     14|    let expr2_0 = C::gpr_mem_imm_new(ctx, &expr1_0);
 1778|     14|    return Some(expr2_0);
 1779|     14|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code28constructor_amode_to_xmm_memINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6957|    214|pub fn constructor_amode_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> Option<XmmMem> {
 6958|    214|    let pattern0_0 = arg0;
 6959|    214|    // Rule at src/isa/x64/inst.isle line 3854.
 6960|    214|    let expr0_0 = C::amode_to_synthetic_amode(ctx, pattern0_0);
 6961|    214|    let expr1_0 = constructor_synthetic_amode_to_xmm_mem(ctx, &expr0_0)?;
 6962|    214|    return Some(expr1_0);
 6963|    214|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code26constructor_reg_to_xmm_memINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6863|      2|pub fn constructor_reg_to_xmm_mem<C: Context>(ctx: &mut C, arg0: Reg) -> Option<XmmMem> {
 6864|      2|    let pattern0_0 = arg0;
 6865|      2|    // Rule at src/isa/x64/inst.isle line 3822.
 6866|      2|    let expr0_0 = C::xmm_new(ctx, pattern0_0);
 6867|      2|    let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 6868|      2|    return Some(expr1_0);
 6869|      2|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_x64_sqrtssINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5369|     10|pub fn constructor_x64_sqrtss<C: Context>(ctx: &mut C, arg0: Xmm) -> Option<Xmm> {
 5370|     10|    let pattern0_0 = arg0;
 5371|     10|    // Rule at src/isa/x64/inst.isle line 3107.
 5372|     10|    let expr0_0 = C::temp_writable_xmm(ctx, );
 5373|     10|    let expr1_0 = SseOpcode::Sqrtss;
 5374|     10|    let expr2_0 = C::xmm_to_xmm_mem(ctx, pattern0_0);
 5375|     10|    let expr3_0 = MInst::XmmUnaryRmR {
 5376|     10|        op: expr1_0,
 5377|     10|        src: expr2_0,
 5378|     10|        dst: expr0_0,
 5379|     10|    };
 5380|     10|    let expr4_0 = C::emit(ctx, &expr3_0);
 5381|     10|    let expr5_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 5382|     10|    return Some(expr5_0);
 5383|     10|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_x64_movsxINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2131|    124|pub fn constructor_x64_movsx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Option<Gpr> {
 2132|    124|    let pattern0_0 = arg0;
 2133|    124|    let pattern1_0 = arg1;
 2134|    124|    // Rule at src/isa/x64/inst.isle line 1650.
 2135|    124|    let expr0_0 = C::temp_writable_gpr(ctx, );
 2136|    124|    let expr1_0 = MInst::MovsxRmR {
 2137|    124|        ext_mode: pattern0_0.clone(),
 2138|    124|        src: pattern1_0.clone(),
 2139|    124|        dst: expr0_0,
 2140|    124|    };
 2141|    124|    let expr2_0 = C::emit(ctx, &expr1_0);
 2142|    124|    let expr3_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 2143|    124|    return Some(expr3_0);
 2144|    124|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code15constructor_immINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2523|      4|pub fn constructor_imm<C: Context>(ctx: &mut C, arg0: Type, arg1: u64) -> Option<Reg> {
 2524|      4|    let pattern0_0 = arg0;
 2525|      4|    if pattern0_0 == I64 {
 2526|      0|        let pattern2_0 = arg1;
 2527|      0|        if let Some(pattern3_0) = C::nonzero_u64_fits_in_u32(ctx, pattern2_0) {
 2528|       |            // Rule at src/isa/x64/inst.isle line 1877.
 2529|      0|            let expr0_0 = C::temp_writable_gpr(ctx, );
 2530|      0|            let expr1_0 = OperandSize::Size32;
 2531|      0|            let expr2_0 = MInst::Imm {
 2532|      0|                dst_size: expr1_0,
 2533|      0|                simm64: pattern3_0,
 2534|      0|                dst: expr0_0,
 2535|      0|            };
 2536|      0|            let expr3_0 = C::emit(ctx, &expr2_0);
 2537|      0|            let expr4_0 = constructor_writable_gpr_to_r_reg(ctx, expr0_0)?;
 2538|      0|            return Some(expr4_0);
 2539|      0|        }
 2540|      4|    }
 2541|      4|    if pattern0_0 == F32 {
 2542|      2|        let pattern2_0 = arg1;
 2543|      2|        if pattern2_0 == 0i128 as u64  {
 2544|       |            // Rule at src/isa/x64/inst.isle line 1906.
 2545|      0|            let expr0_0 = C::temp_writable_xmm(ctx, );
 2546|      0|            let expr1_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 2547|      0|            let expr2_0 = SseOpcode::Xorps;
 2548|      0|            let expr3_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
 2549|      0|            let expr4_0 = MInst::XmmRmR {
 2550|      0|                op: expr2_0,
 2551|      0|                src1: expr1_0,
 2552|      0|                src2: expr3_0,
 2553|      0|                dst: expr0_0,
 2554|      0|            };
 2555|      0|            let expr5_0 = C::emit(ctx, &expr4_0);
 2556|      0|            let expr6_0 = C::xmm_to_reg(ctx, expr1_0);
 2557|      0|            return Some(expr6_0);
 2558|      2|        }
 2559|      2|        // Rule at src/isa/x64/inst.isle line 1854.
 2560|      2|        let expr0_0 = SseOpcode::Movd;
 2561|      2|        let expr1_0: Type = I32;
 2562|      2|        let expr2_0 = constructor_imm(ctx, expr1_0, pattern2_0)?;
 2563|      2|        let expr3_0 = C::reg_to_gpr_mem(ctx, expr2_0);
 2564|      2|        let expr4_0 = OperandSize::Size32;
 2565|      2|        let expr5_0 = constructor_gpr_to_xmm(ctx, &expr0_0, &expr3_0, &expr4_0)?;
 2566|      2|        let expr6_0 = C::xmm_to_reg(ctx, expr5_0);
 2567|      2|        return Some(expr6_0);
 2568|      2|    }
 2569|      2|    if pattern0_0 == F64 {
 2570|      0|        let pattern2_0 = arg1;
 2571|      0|        if pattern2_0 == 0i128 as u64  {
 2572|       |            // Rule at src/isa/x64/inst.isle line 1918.
 2573|      0|            let expr0_0 = C::temp_writable_xmm(ctx, );
 2574|      0|            let expr1_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 2575|      0|            let expr2_0 = SseOpcode::Xorpd;
 2576|      0|            let expr3_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
 2577|      0|            let expr4_0 = MInst::XmmRmR {
 2578|      0|                op: expr2_0,
 2579|      0|                src1: expr1_0,
 2580|      0|                src2: expr3_0,
 2581|      0|                dst: expr0_0,
 2582|      0|            };
 2583|      0|            let expr5_0 = C::emit(ctx, &expr4_0);
 2584|      0|            let expr6_0 = C::xmm_to_reg(ctx, expr1_0);
 2585|      0|            return Some(expr6_0);
 2586|      0|        }
 2587|      0|        // Rule at src/isa/x64/inst.isle line 1860.
 2588|      0|        let expr0_0 = SseOpcode::Movq;
 2589|      0|        let expr1_0: Type = I64;
 2590|      0|        let expr2_0 = constructor_imm(ctx, expr1_0, pattern2_0)?;
 2591|      0|        let expr3_0 = C::reg_to_gpr_mem(ctx, expr2_0);
 2592|      0|        let expr4_0 = OperandSize::Size64;
 2593|      0|        let expr5_0 = constructor_gpr_to_xmm(ctx, &expr0_0, &expr3_0, &expr4_0)?;
 2594|      0|        let expr6_0 = C::xmm_to_reg(ctx, expr5_0);
 2595|      0|        return Some(expr6_0);
 2596|      2|    }
 2597|      2|    if let Some((pattern1_0, pattern1_1)) = C::multi_lane(ctx, pattern0_0) {
 2598|      0|        let pattern2_0 = arg1;
 2599|      0|        if pattern2_0 == 0i128 as u64  {
 2600|       |            // Rule at src/isa/x64/inst.isle line 1896.
 2601|      0|            let expr0_0 = C::temp_writable_xmm(ctx, );
 2602|      0|            let expr1_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 2603|      0|            let expr2_0 = constructor_sse_xor_op(ctx, pattern0_0)?;
 2604|      0|            let expr3_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
 2605|      0|            let expr4_0 = MInst::XmmRmR {
 2606|      0|                op: expr2_0,
 2607|      0|                src1: expr1_0,
 2608|      0|                src2: expr3_0,
 2609|      0|                dst: expr0_0,
 2610|      0|            };
 2611|      0|            let expr5_0 = C::emit(ctx, &expr4_0);
 2612|      0|            let expr6_0 = C::xmm_to_reg(ctx, expr1_0);
 2613|      0|            return Some(expr6_0);
 2614|      0|        }
 2615|      2|    }
 2616|      2|    if let Some(pattern1_0) = C::fits_in_64(ctx, pattern0_0) {
 2617|      2|        let pattern2_0 = arg1;
 2618|      2|        if pattern2_0 == 0i128 as u64  {
 2619|       |            // Rule at src/isa/x64/inst.isle line 1883.
 2620|      0|            let expr0_0 = C::temp_writable_gpr(ctx, );
 2621|      0|            let expr1_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 2622|      0|            let expr2_0 = C::operand_size_of_type_32_64(ctx, pattern1_0);
 2623|      0|            let expr3_0 = AluRmiROpcode::Xor;
 2624|      0|            let expr4_0 = C::gpr_to_gpr_mem_imm(ctx, expr1_0);
 2625|      0|            let expr5_0 = MInst::AluRmiR {
 2626|      0|                size: expr2_0,
 2627|      0|                op: expr3_0,
 2628|      0|                src1: expr1_0,
 2629|      0|                src2: expr4_0,
 2630|      0|                dst: expr0_0,
 2631|      0|            };
 2632|      0|            let expr6_0 = C::emit(ctx, &expr5_0);
 2633|      0|            let expr7_0 = C::gpr_to_reg(ctx, expr1_0);
 2634|      0|            return Some(expr7_0);
 2635|      2|        }
 2636|      2|        // Rule at src/isa/x64/inst.isle line 1847.
 2637|      2|        let expr0_0 = C::temp_writable_gpr(ctx, );
 2638|      2|        let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern1_0);
 2639|      2|        let expr2_0 = MInst::Imm {
 2640|      2|            dst_size: expr1_0,
 2641|      2|            simm64: pattern2_0,
 2642|      2|            dst: expr0_0,
 2643|      2|        };
 2644|      2|        let expr3_0 = C::emit(ctx, &expr2_0);
 2645|      2|        let expr4_0 = constructor_writable_gpr_to_r_reg(ctx, expr0_0)?;
 2646|      2|        return Some(expr4_0);
 2647|      0|    }
 2648|      0|    return None;
 2649|      4|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_x64_shrINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2716|     76|pub fn constructor_x64_shr<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &Imm8Gpr) -> Option<Gpr> {
 2717|     76|    let pattern0_0 = arg0;
 2718|     76|    let pattern1_0 = arg1;
 2719|     76|    let pattern2_0 = arg2;
 2720|     76|    // Rule at src/isa/x64/inst.isle line 1956.
 2721|     76|    let expr0_0 = ShiftKind::ShiftRightLogical;
 2722|     76|    let expr1_0 = constructor_shift_r(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
 2723|     76|    return Some(expr1_0);
 2724|     76|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code33constructor_cvt_float_to_uint_seqINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5618|     30|pub fn constructor_cvt_float_to_uint_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Value, arg2: bool) -> Option<Gpr> {
 5619|     30|    let pattern0_0 = arg0;
 5620|     30|    let pattern1_0 = arg1;
 5621|     30|    let pattern2_0 = C::value_type(ctx, pattern1_0);
 5622|     30|    let pattern3_0 = arg2;
 5623|     30|    // Rule at src/isa/x64/inst.isle line 3211.
 5624|     30|    let expr0_0 = C::raw_operand_size_of_type(ctx, pattern0_0);
 5625|     30|    let expr1_0 = C::raw_operand_size_of_type(ctx, pattern2_0);
 5626|     30|    let expr2_0 = C::temp_writable_gpr(ctx, );
 5627|     30|    let expr3_0 = C::temp_writable_xmm(ctx, );
 5628|     30|    let expr4_0 = C::temp_writable_xmm(ctx, );
 5629|     30|    let expr5_0 = C::temp_writable_gpr(ctx, );
 5630|     30|    let expr6_0 = constructor_put_in_xmm(ctx, pattern1_0)?;
 5631|     30|    let expr7_0 = MInst::CvtFloatToUintSeq {
 5632|     30|        dst_size: expr0_0,
 5633|     30|        src_size: expr1_0,
 5634|     30|        is_saturating: pattern3_0,
 5635|     30|        src: expr6_0,
 5636|     30|        dst: expr2_0,
 5637|     30|        tmp_gpr: expr5_0,
 5638|     30|        tmp_xmm: expr3_0,
 5639|     30|        tmp_xmm2: expr4_0,
 5640|     30|    };
 5641|     30|    let expr8_0 = C::emit(ctx, &expr7_0);
 5642|     30|    let expr9_0 = C::writable_gpr_to_gpr(ctx, expr2_0);
 5643|     30|    return Some(expr9_0);
 5644|     30|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code24constructor_cmove_or_xmmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 3004|     52|pub fn constructor_cmove_or_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: &CC, arg2: &CC, arg3: &XmmMem, arg4: Xmm) -> Option<ConsumesFlags> {
 3005|     52|    let pattern0_0 = arg0;
 3006|     52|    let pattern1_0 = arg1;
 3007|     52|    let pattern2_0 = arg2;
 3008|     52|    let pattern3_0 = arg3;
 3009|     52|    let pattern4_0 = arg4;
 3010|     52|    // Rule at src/isa/x64/inst.isle line 2073.
 3011|     52|    let expr0_0 = C::temp_writable_xmm(ctx, );
 3012|     52|    let expr1_0 = C::temp_writable_xmm(ctx, );
 3013|     52|    let expr2_0 = MInst::XmmCmove {
 3014|     52|        ty: pattern0_0,
 3015|     52|        cc: pattern1_0.clone(),
 3016|     52|        consequent: pattern3_0.clone(),
 3017|     52|        alternative: pattern4_0,
 3018|     52|        dst: expr1_0,
 3019|     52|    };
 3020|     52|    let expr3_0 = C::writable_xmm_to_xmm(ctx, expr1_0);
 3021|     52|    let expr4_0 = MInst::XmmCmove {
 3022|     52|        ty: pattern0_0,
 3023|     52|        cc: pattern2_0.clone(),
 3024|     52|        consequent: pattern3_0.clone(),
 3025|     52|        alternative: expr3_0,
 3026|     52|        dst: expr0_0,
 3027|     52|    };
 3028|     52|    let expr5_0 = constructor_writable_xmm_to_value_regs(ctx, expr0_0)?;
 3029|     52|    let expr6_0 = ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs {
 3030|     52|        inst1: expr2_0,
 3031|     52|        inst2: expr4_0,
 3032|     52|        result: expr5_0,
 3033|     52|    };
 3034|     52|    return Some(expr6_0);
 3035|     52|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code28constructor_icmp_cond_resultINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6129|  19.0k|pub fn constructor_icmp_cond_result<C: Context>(ctx: &mut C, arg0: &ProducesFlags, arg1: &CC) -> Option<IcmpCondResult> {
 6130|  19.0k|    let pattern0_0 = arg0;
 6131|  19.0k|    let pattern1_0 = arg1;
 6132|  19.0k|    // Rule at src/isa/x64/inst.isle line 3418.
 6133|  19.0k|    let expr0_0 = IcmpCondResult::Condition {
 6134|  19.0k|        producer: pattern0_0.clone(),
 6135|  19.0k|        cc: pattern1_0.clone(),
 6136|  19.0k|    };
 6137|  19.0k|    return Some(expr0_0);
 6138|  19.0k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_x64_andINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2468|    156|pub fn constructor_x64_and<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Option<Gpr> {
 2469|    156|    let pattern0_0 = arg0;
 2470|    156|    let pattern1_0 = arg1;
 2471|    156|    let pattern2_0 = arg2;
 2472|    156|    // Rule at src/isa/x64/inst.isle line 1811.
 2473|    156|    let expr0_0 = AluRmiROpcode::And;
 2474|    156|    let expr1_0 = constructor_alu_rmi_r(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
 2475|    156|    return Some(expr1_0);
 2476|    156|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_x64_ucomisINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2800|     52|pub fn constructor_x64_ucomis<C: Context>(ctx: &mut C, arg0: Value, arg1: Value) -> Option<ProducesFlags> {
 2801|     52|    let pattern0_0 = arg0;
 2802|     52|    let pattern1_0 = C::value_type(ctx, pattern0_0);
 2803|     52|    if pattern1_0 == F32 {
 2804|     32|        let pattern3_0 = arg1;
 2805|     32|        // Rule at src/isa/x64/inst.isle line 1991.
 2806|     32|        let expr0_0 = SseOpcode::Ucomiss;
 2807|     32|        let expr1_0 = constructor_put_in_xmm(ctx, pattern0_0)?;
 2808|     32|        let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
 2809|     32|        let expr3_0 = constructor_put_in_xmm(ctx, pattern3_0)?;
 2810|     32|        let expr4_0 = constructor_xmm_cmp_rm_r(ctx, &expr0_0, &expr2_0, expr3_0)?;
 2811|     32|        return Some(expr4_0);
 2812|     20|    }
 2813|     20|    if pattern1_0 == F64 {
 2814|     20|        let pattern3_0 = arg1;
 2815|     20|        // Rule at src/isa/x64/inst.isle line 1995.
 2816|     20|        let expr0_0 = SseOpcode::Ucomisd;
 2817|     20|        let expr1_0 = constructor_put_in_xmm(ctx, pattern0_0)?;
 2818|     20|        let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
 2819|     20|        let expr3_0 = constructor_put_in_xmm(ctx, pattern3_0)?;
 2820|     20|        let expr4_0 = constructor_xmm_cmp_rm_r(ctx, &expr0_0, &expr2_0, expr3_0)?;
 2821|     20|        return Some(expr4_0);
 2822|      0|    }
 2823|      0|    return None;
 2824|     52|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code38constructor_synthetic_amode_to_gpr_memINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6939|  9.65k|pub fn constructor_synthetic_amode_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Option<GprMem> {
 6940|  9.65k|    let pattern0_0 = arg0;
 6941|  9.65k|    // Rule at src/isa/x64/inst.isle line 3851.
 6942|  9.65k|    let expr0_0 = C::synthetic_amode_to_reg_mem(ctx, pattern0_0);
 6943|  9.65k|    let expr1_0 = C::reg_mem_to_gpr_mem(ctx, &expr0_0);
 6944|  9.65k|    return Some(expr1_0);
 6945|  9.65k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_output_gprINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1724|  20.4k|pub fn constructor_output_gpr<C: Context>(ctx: &mut C, arg0: Gpr) -> Option<InstOutput> {
 1725|  20.4k|    let pattern0_0 = arg0;
 1726|  20.4k|    // Rule at src/isa/x64/inst.isle line 1321.
 1727|  20.4k|    let expr0_0 = C::gpr_to_reg(ctx, pattern0_0);
 1728|  20.4k|    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
 1729|  20.4k|    return Some(expr1_0);
 1730|  20.4k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_x64_movzxINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2115|  10.0k|pub fn constructor_x64_movzx<C: Context>(ctx: &mut C, arg0: &ExtMode, arg1: &GprMem) -> Option<Gpr> {
 2116|  10.0k|    let pattern0_0 = arg0;
 2117|  10.0k|    let pattern1_0 = arg1;
 2118|  10.0k|    // Rule at src/isa/x64/inst.isle line 1644.
 2119|  10.0k|    let expr0_0 = C::temp_writable_gpr(ctx, );
 2120|  10.0k|    let expr1_0 = MInst::MovzxRmR {
 2121|  10.0k|        ext_mode: pattern0_0.clone(),
 2122|  10.0k|        src: pattern1_0.clone(),
 2123|  10.0k|        dst: expr0_0,
 2124|  10.0k|    };
 2125|  10.0k|    let expr2_0 = C::emit(ctx, &expr1_0);
 2126|  10.0k|    let expr3_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 2127|  10.0k|    return Some(expr3_0);
 2128|  10.0k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code20constructor_to_amodeINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1201|  38.2k|pub fn constructor_to_amode<C: Context>(ctx: &mut C, arg0: MemFlags, arg1: Value, arg2: Offset32) -> Option<Amode> {
 1202|  38.2k|    let pattern0_0 = arg0;
 1203|  38.2k|    let pattern1_0 = arg1;
 1204|  38.2k|    let pattern2_0 = arg2;
 1205|       |    // Rule at src/isa/x64/inst.isle line 1022.
 1206|  38.2k|    let expr0_0 = constructor_amode_initial(ctx, pattern0_0, pattern2_0)?;
 1207|  38.2k|    let expr1_0 = constructor_amode_add(ctx, &expr0_0, pattern1_0)?;
 1208|  38.2k|    let expr2_0 = constructor_amode_finalize(ctx, &expr1_0)?;
 1209|  38.2k|    return Some(expr2_0);
 1210|  38.2k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_x64_addINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2339|  4.89k|pub fn constructor_x64_add<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Option<Gpr> {
 2340|  4.89k|    let pattern0_0 = arg0;
 2341|  4.89k|    let pattern1_0 = arg1;
 2342|  4.89k|    let pattern2_0 = arg2;
 2343|  4.89k|    // Rule at src/isa/x64/inst.isle line 1739.
 2344|  4.89k|    let expr0_0 = AluRmiROpcode::Add;
 2345|  4.89k|    let expr1_0 = constructor_alu_rmi_r(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
 2346|  4.89k|    return Some(expr1_0);
 2347|  4.89k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_cmp_rmi_rINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2738|  9.64k|pub fn constructor_cmp_rmi_r<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: &CmpOpcode, arg2: &GprMemImm, arg3: Gpr) -> Option<ProducesFlags> {
 2739|  9.64k|    let pattern0_0 = arg0;
 2740|  9.64k|    let pattern1_0 = arg1;
 2741|  9.64k|    let pattern2_0 = arg2;
 2742|  9.64k|    let pattern3_0 = arg3;
 2743|  9.64k|    // Rule at src/isa/x64/inst.isle line 1966.
 2744|  9.64k|    let expr0_0 = MInst::CmpRmiR {
 2745|  9.64k|        size: pattern0_0.clone(),
 2746|  9.64k|        opcode: pattern1_0.clone(),
 2747|  9.64k|        src: pattern2_0.clone(),
 2748|  9.64k|        dst: pattern3_0,
 2749|  9.64k|    };
 2750|  9.64k|    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect {
 2751|  9.64k|        inst: expr0_0,
 2752|  9.64k|    };
 2753|  9.64k|    return Some(expr1_0);
 2754|  9.64k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code27constructor_generic_sextendINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
14771|      8|pub fn constructor_generic_sextend<C: Context>(ctx: &mut C, arg0: Value, arg1: Type, arg2: Type) -> Option<InstOutput> {
14772|      8|    let pattern0_0 = arg0;
14773|      8|    let pattern1_0 = arg1;
14774|      8|    if let Some(pattern2_0) = C::fits_in_32(ctx, pattern1_0) {
14775|      8|        let pattern3_0 = arg2;
14776|      8|        if let Some(pattern4_0) = C::fits_in_32(ctx, pattern3_0) {
14777|       |            // Rule at src/isa/x64/lower.isle line 2153.
14778|      4|            let expr0_0: Type = I32;
14779|      4|            let expr1_0 = ExtendKind::Sign;
14780|      4|            let expr2_0 = constructor_extend_to_gpr(ctx, pattern0_0, expr0_0, &expr1_0)?;
14781|      4|            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
14782|      4|            return Some(expr3_0);
14783|      4|        }
14784|      4|        if let Some(pattern4_0) = C::ty_int_bool_64(ctx, pattern3_0) {
14785|       |            // Rule at src/isa/x64/lower.isle line 2149.
14786|      4|            let expr0_0: Type = I64;
14787|      4|            let expr1_0 = ExtendKind::Sign;
14788|      4|            let expr2_0 = constructor_extend_to_gpr(ctx, pattern0_0, expr0_0, &expr1_0)?;
14789|      4|            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
14790|      4|            return Some(expr3_0);
14791|      0|        }
14792|      0|        if let Some(pattern4_0) = C::ty_int_bool_128(ctx, pattern3_0) {
14793|       |            // Rule at src/isa/x64/lower.isle line 2143.
14794|      0|            let expr0_0: Type = I64;
14795|      0|            let expr1_0 = ExtendKind::Sign;
14796|      0|            let expr2_0 = constructor_extend_to_gpr(ctx, pattern0_0, expr0_0, &expr1_0)?;
14797|      0|            let expr3_0 = constructor_spread_sign_bit(ctx, expr2_0)?;
14798|      0|            let expr4_0 = C::gpr_to_reg(ctx, expr2_0);
14799|      0|            let expr5_0 = C::gpr_to_reg(ctx, expr3_0);
14800|      0|            let expr6_0 = C::value_regs(ctx, expr4_0, expr5_0);
14801|      0|            let expr7_0 = C::output(ctx, expr6_0);
14802|      0|            return Some(expr7_0);
14803|      0|        }
14804|      0|    }
14805|      0|    if let Some(pattern2_0) = C::ty_int_bool_64(ctx, pattern1_0) {
14806|      0|        let pattern3_0 = arg2;
14807|      0|        if let Some(pattern4_0) = C::ty_int_bool_128(ctx, pattern3_0) {
14808|       |            // Rule at src/isa/x64/lower.isle line 2139.
14809|      0|            let expr0_0 = C::put_in_reg(ctx, pattern0_0);
14810|      0|            let expr1_0 = constructor_put_in_gpr(ctx, pattern0_0)?;
14811|      0|            let expr2_0 = constructor_spread_sign_bit(ctx, expr1_0)?;
14812|      0|            let expr3_0 = C::gpr_to_reg(ctx, expr2_0);
14813|      0|            let expr4_0 = C::value_regs(ctx, expr0_0, expr3_0);
14814|      0|            let expr5_0 = C::output(ctx, expr4_0);
14815|      0|            return Some(expr5_0);
14816|      0|        }
14817|      0|    }
14818|      0|    let pattern2_0 = arg2;
14819|      0|    if pattern2_0 == pattern1_0 {
14820|       |        // Rule at src/isa/x64/lower.isle line 2129.
14821|      0|        let expr0_0 = constructor_output_value(ctx, pattern0_0)?;
14822|      0|        return Some(expr0_0);
14823|      0|    }
14824|      0|    return None;
14825|      8|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_x64_movrmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2265|  14.0k|pub fn constructor_x64_movrm<C: Context>(ctx: &mut C, arg0: Type, arg1: &SyntheticAmode, arg2: Gpr) -> Option<SideEffectNoResult> {
 2266|  14.0k|    let pattern0_0 = arg0;
 2267|  14.0k|    let pattern1_0 = arg1;
 2268|  14.0k|    let pattern2_0 = arg2;
 2269|  14.0k|    // Rule at src/isa/x64/inst.isle line 1708.
 2270|  14.0k|    let expr0_0 = C::raw_operand_size_of_type(ctx, pattern0_0);
 2271|  14.0k|    let expr1_0 = MInst::MovRM {
 2272|  14.0k|        size: expr0_0,
 2273|  14.0k|        src: pattern2_0,
 2274|  14.0k|        dst: pattern1_0.clone(),
 2275|  14.0k|    };
 2276|  14.0k|    let expr2_0 = SideEffectNoResult::Inst {
 2277|  14.0k|        inst: expr1_0,
 2278|  14.0k|    };
 2279|  14.0k|    return Some(expr2_0);
 2280|  14.0k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code32constructor_cmove_or_from_valuesINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 3038|     52|pub fn constructor_cmove_or_from_values<C: Context>(ctx: &mut C, arg0: Type, arg1: &CC, arg2: &CC, arg3: Value, arg4: Value) -> Option<ConsumesFlags> {
 3039|     52|    let pattern0_0 = arg0;
 3040|     52|    if pattern0_0 == I128 {
 3041|      0|        let pattern2_0 = arg1;
 3042|      0|        let pattern3_0 = arg2;
 3043|      0|        let pattern4_0 = arg3;
 3044|      0|        let pattern5_0 = arg4;
 3045|      0|        // Rule at src/isa/x64/inst.isle line 2087.
 3046|      0|        let expr0_0 = C::put_in_regs(ctx, pattern4_0);
 3047|      0|        let expr1_0 = C::put_in_regs(ctx, pattern5_0);
 3048|      0|        let expr2_0 = C::temp_writable_gpr(ctx, );
 3049|      0|        let expr3_0 = C::temp_writable_gpr(ctx, );
 3050|      0|        let expr4_0 = C::temp_writable_gpr(ctx, );
 3051|      0|        let expr5_0 = C::temp_writable_gpr(ctx, );
 3052|      0|        let expr6_0 = OperandSize::Size64;
 3053|      0|        let expr7_0: usize = 0i128 as usize;
 3054|      0|        let expr8_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr7_0)?;
 3055|      0|        let expr9_0 = C::gpr_to_gpr_mem(ctx, expr8_0);
 3056|      0|        let expr10_0: usize = 0i128 as usize;
 3057|      0|        let expr11_0 = constructor_value_regs_get_gpr(ctx, expr1_0, expr10_0)?;
 3058|      0|        let expr12_0 = MInst::Cmove {
 3059|      0|            size: expr6_0,
 3060|      0|            cc: pattern2_0.clone(),
 3061|      0|            consequent: expr9_0,
 3062|      0|            alternative: expr11_0,
 3063|      0|            dst: expr4_0,
 3064|      0|        };
 3065|      0|        let expr13_0: usize = 0i128 as usize;
 3066|      0|        let expr14_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr13_0)?;
 3067|      0|        let expr15_0 = C::gpr_to_gpr_mem(ctx, expr14_0);
 3068|      0|        let expr16_0 = C::writable_gpr_to_gpr(ctx, expr4_0);
 3069|      0|        let expr17_0 = MInst::Cmove {
 3070|      0|            size: expr6_0,
 3071|      0|            cc: pattern3_0.clone(),
 3072|      0|            consequent: expr15_0,
 3073|      0|            alternative: expr16_0,
 3074|      0|            dst: expr2_0,
 3075|      0|        };
 3076|      0|        let expr18_0: usize = 1i128 as usize;
 3077|      0|        let expr19_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr18_0)?;
 3078|      0|        let expr20_0 = C::gpr_to_gpr_mem(ctx, expr19_0);
 3079|      0|        let expr21_0: usize = 1i128 as usize;
 3080|      0|        let expr22_0 = constructor_value_regs_get_gpr(ctx, expr1_0, expr21_0)?;
 3081|      0|        let expr23_0 = MInst::Cmove {
 3082|      0|            size: expr6_0,
 3083|      0|            cc: pattern2_0.clone(),
 3084|      0|            consequent: expr20_0,
 3085|      0|            alternative: expr22_0,
 3086|      0|            dst: expr5_0,
 3087|      0|        };
 3088|      0|        let expr24_0: usize = 1i128 as usize;
 3089|      0|        let expr25_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr24_0)?;
 3090|      0|        let expr26_0 = C::gpr_to_gpr_mem(ctx, expr25_0);
 3091|      0|        let expr27_0 = C::writable_gpr_to_gpr(ctx, expr5_0);
 3092|      0|        let expr28_0 = MInst::Cmove {
 3093|      0|            size: expr6_0,
 3094|      0|            cc: pattern3_0.clone(),
 3095|      0|            consequent: expr26_0,
 3096|      0|            alternative: expr27_0,
 3097|      0|            dst: expr3_0,
 3098|      0|        };
 3099|      0|        let expr29_0 = constructor_writable_gpr_to_r_reg(ctx, expr2_0)?;
 3100|      0|        let expr30_0 = constructor_writable_gpr_to_r_reg(ctx, expr3_0)?;
 3101|      0|        let expr31_0 = C::value_regs(ctx, expr29_0, expr30_0);
 3102|      0|        let expr32_0 = ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs {
 3103|      0|            inst1: expr12_0,
 3104|      0|            inst2: expr17_0,
 3105|      0|            inst3: expr23_0,
 3106|      0|            inst4: expr28_0,
 3107|      0|            result: expr31_0,
 3108|      0|        };
 3109|      0|        return Some(expr32_0);
 3110|     52|    }
 3111|     52|    if let Some(pattern1_0) = C::is_xmm_type(ctx, pattern0_0) {
 3112|     52|        if let Some(pattern2_0) = C::is_single_register_type(ctx, pattern1_0) {
 3113|     52|            let pattern3_0 = arg1;
 3114|     52|            let pattern4_0 = arg2;
 3115|     52|            let pattern5_0 = arg3;
 3116|     52|            let pattern6_0 = arg4;
 3117|     52|            // Rule at src/isa/x64/inst.isle line 2109.
 3118|     52|            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_0);
 3119|     52|            let expr1_0 = constructor_put_in_xmm(ctx, pattern6_0)?;
 3120|     52|            let expr2_0 = constructor_cmove_or_xmm(ctx, pattern2_0, pattern3_0, pattern4_0, &expr0_0, expr1_0)?;
 3121|     52|            return Some(expr2_0);
 3122|      0|        }
 3123|      0|    }
 3124|      0|    if let Some(pattern1_0) = C::is_gpr_type(ctx, pattern0_0) {
 3125|      0|        if let Some(pattern2_0) = C::is_single_register_type(ctx, pattern1_0) {
 3126|      0|            let pattern3_0 = arg1;
 3127|      0|            let pattern4_0 = arg2;
 3128|      0|            let pattern5_0 = arg3;
 3129|      0|            let pattern6_0 = arg4;
 3130|       |            // Rule at src/isa/x64/inst.isle line 2106.
 3131|      0|            let expr0_0 = constructor_put_in_gpr_mem(ctx, pattern5_0)?;
 3132|      0|            let expr1_0 = constructor_put_in_gpr(ctx, pattern6_0)?;
 3133|      0|            let expr2_0 = constructor_cmove_or(ctx, pattern2_0, pattern3_0, pattern4_0, &expr0_0, expr1_0)?;
 3134|      0|            return Some(expr2_0);
 3135|      0|        }
 3136|      0|    }
 3137|      0|    return None;
 3138|     52|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code26constructor_x64_movss_loadINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2147|     18|pub fn constructor_x64_movss_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Option<Xmm> {
 2148|     18|    let pattern0_0 = arg0;
 2149|     18|    // Rule at src/isa/x64/inst.isle line 1656.
 2150|     18|    let expr0_0 = SseOpcode::Movss;
 2151|     18|    let expr1_0 = constructor_xmm_unary_rm_r(ctx, &expr0_0, pattern0_0)?;
 2152|     18|    return Some(expr1_0);
 2153|     18|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_with_flagsINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
  943|    236|pub fn constructor_with_flags<C: Context>(ctx: &mut C, arg0: &ProducesFlags, arg1: &ConsumesFlags) -> Option<ValueRegs> {
  944|    236|    let pattern0_0 = arg0;
  945|    236|    match pattern0_0 {
  946|    236|        &ProducesFlags::ProducesFlagsSideEffect { inst: ref pattern1_0 } => {
  947|    236|            let pattern2_0 = arg1;
  948|    236|            match pattern2_0 {
  949|    184|                &ConsumesFlags::ConsumesFlagsReturnsReg { inst: ref pattern3_0, result: pattern3_1 } => {
  950|    184|                    // Rule at src/prelude.isle line 729.
  951|    184|                    let expr0_0 = C::emit(ctx, pattern1_0);
  952|    184|                    let expr1_0 = C::emit(ctx, pattern3_0);
  953|    184|                    let expr2_0 = C::value_reg(ctx, pattern3_1);
  954|    184|                    return Some(expr2_0);
  955|       |                }
  956|     52|                &ConsumesFlags::ConsumesFlagsTwiceReturnsValueRegs { inst1: ref pattern3_0, inst2: ref pattern3_1, result: pattern3_2 } => {
  957|     52|                    // Rule at src/prelude.isle line 735.
  958|     52|                    let expr0_0 = C::emit(ctx, pattern1_0);
  959|     52|                    let expr1_0 = C::emit(ctx, pattern3_0);
  960|     52|                    let expr2_0 = C::emit(ctx, pattern3_1);
  961|     52|                    return Some(pattern3_2);
  962|       |                }
  963|      0|                &ConsumesFlags::ConsumesFlagsFourTimesReturnsValueRegs { inst1: ref pattern3_0, inst2: ref pattern3_1, inst3: ref pattern3_2, inst4: ref pattern3_3, result: pattern3_4 } => {
  964|      0|                    // Rule at src/prelude.isle line 747.
  965|      0|                    let expr0_0 = C::emit(ctx, pattern1_0);
  966|      0|                    let expr1_0 = C::emit(ctx, pattern3_0);
  967|      0|                    let expr2_0 = C::emit(ctx, pattern3_1);
  968|      0|                    let expr3_0 = C::emit(ctx, pattern3_2);
  969|      0|                    let expr4_0 = C::emit(ctx, pattern3_3);
  970|      0|                    return Some(pattern3_4);
  971|       |                }
  972|      0|                _ => {}
  973|       |            }
  974|       |        }
  975|      0|        &ProducesFlags::ProducesFlagsReturnsResultWithConsumer { inst: ref pattern1_0, result: pattern1_1 } => {
  976|      0|            let pattern2_0 = arg1;
  977|      0|            if let &ConsumesFlags::ConsumesFlagsReturnsResultWithProducer { inst: ref pattern3_0, result: pattern3_1 } = pattern2_0 {
  978|       |                // Rule at src/prelude.isle line 723.
  979|      0|                let expr0_0 = C::emit(ctx, pattern1_0);
  980|      0|                let expr1_0 = C::emit(ctx, pattern3_0);
  981|      0|                let expr2_0 = C::value_regs(ctx, pattern1_1, pattern3_1);
  982|      0|                return Some(expr2_0);
  983|      0|            }
  984|       |        }
  985|      0|        _ => {}
  986|       |    }
  987|      0|    return None;
  988|    236|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_xmm_to_gprINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4849|      4|pub fn constructor_xmm_to_gpr<C: Context>(ctx: &mut C, arg0: &SseOpcode, arg1: Xmm, arg2: &OperandSize) -> Option<Gpr> {
 4850|      4|    let pattern0_0 = arg0;
 4851|      4|    let pattern1_0 = arg1;
 4852|      4|    let pattern2_0 = arg2;
 4853|      4|    // Rule at src/isa/x64/inst.isle line 2876.
 4854|      4|    let expr0_0 = C::temp_writable_gpr(ctx, );
 4855|      4|    let expr1_0 = MInst::XmmToGpr {
 4856|      4|        op: pattern0_0.clone(),
 4857|      4|        src: pattern1_0,
 4858|      4|        dst: expr0_0,
 4859|      4|        dst_size: pattern2_0.clone(),
 4860|      4|    };
 4861|      4|    let expr2_0 = C::emit(ctx, &expr1_0);
 4862|      4|    let expr3_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 4863|      4|    return Some(expr3_0);
 4864|      4|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code30constructor_xmm_unary_rm_r_immINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4335|     14|pub fn constructor_xmm_unary_rm_r_imm<C: Context>(ctx: &mut C, arg0: &SseOpcode, arg1: &XmmMem, arg2: u8) -> Option<Xmm> {
 4336|     14|    let pattern0_0 = arg0;
 4337|     14|    let pattern1_0 = arg1;
 4338|     14|    let pattern2_0 = arg2;
 4339|     14|    // Rule at src/isa/x64/inst.isle line 2611.
 4340|     14|    let expr0_0 = C::temp_writable_xmm(ctx, );
 4341|     14|    let expr1_0 = MInst::XmmUnaryRmRImm {
 4342|     14|        op: pattern0_0.clone(),
 4343|     14|        src: pattern1_0.clone(),
 4344|     14|        imm: pattern2_0,
 4345|     14|        dst: expr0_0,
 4346|     14|    };
 4347|     14|    let expr2_0 = C::emit(ctx, &expr1_0);
 4348|     14|    let expr3_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 4349|     14|    return Some(expr3_0);
 4350|     14|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_shift_rINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2662|     76|pub fn constructor_shift_r<C: Context>(ctx: &mut C, arg0: Type, arg1: &ShiftKind, arg2: Gpr, arg3: &Imm8Gpr) -> Option<Gpr> {
 2663|     76|    let pattern0_0 = arg0;
 2664|     76|    let pattern1_0 = arg1;
 2665|     76|    let pattern2_0 = arg2;
 2666|     76|    let pattern3_0 = arg3;
 2667|     76|    // Rule at src/isa/x64/inst.isle line 1931.
 2668|     76|    let expr0_0 = C::temp_writable_gpr(ctx, );
 2669|     76|    let expr1_0 = C::raw_operand_size_of_type(ctx, pattern0_0);
 2670|     76|    let expr2_0 = MInst::ShiftR {
 2671|     76|        size: expr1_0,
 2672|     76|        kind: pattern1_0.clone(),
 2673|     76|        src: pattern2_0,
 2674|     76|        num_bits: pattern3_0.clone(),
 2675|     76|        dst: expr0_0,
 2676|     76|    };
 2677|     76|    let expr3_0 = C::emit(ctx, &expr2_0);
 2678|     76|    let expr4_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 2679|     76|    return Some(expr4_0);
 2680|     76|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code23constructor_x64_roundsdINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4364|     10|pub fn constructor_x64_roundsd<C: Context>(ctx: &mut C, arg0: &XmmMem, arg1: &RoundImm) -> Option<Xmm> {
 4365|     10|    let pattern0_0 = arg0;
 4366|     10|    let pattern1_0 = arg1;
 4367|     10|    // Rule at src/isa/x64/inst.isle line 2623.
 4368|     10|    let expr0_0 = SseOpcode::Roundsd;
 4369|     10|    let expr1_0 = C::encode_round_imm(ctx, pattern1_0);
 4370|     10|    let expr2_0 = constructor_xmm_unary_rm_r_imm(ctx, &expr0_0, pattern0_0, expr1_0)?;
 4371|     10|    return Some(expr2_0);
 4372|     10|}
_RNvXs5_NtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_codeNtB5_5AmodeNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneBf_:
  701|   404k|#[derive(Clone, Debug)]
_RNCINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_amode_addINtNtNtBe_8machinst4isle11IsleContextNtB4_5MInstNtNtBe_8settings5FlagsNtNtBa_8settings5FlagsKj6_EE0Be_:
 1247|      4|                                                    let mut closure13 = || {
 1248|      4|                                                        let expr0_0 = C::s32_add_fallible(ctx, pattern1_0, pattern12_0)?;
 1249|      4|                                                        return Some(expr0_0);
 1250|      4|                                                    };
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_output_xmmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1744|    272|pub fn constructor_output_xmm<C: Context>(ctx: &mut C, arg0: Xmm) -> Option<InstOutput> {
 1745|    272|    let pattern0_0 = arg0;
 1746|    272|    // Rule at src/isa/x64/inst.isle line 1331.
 1747|    272|    let expr0_0 = C::xmm_to_reg(ctx, pattern0_0);
 1748|    272|    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
 1749|    272|    return Some(expr1_0);
 1750|    272|}
_RNvXs0_NtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_codeNtB5_13ProducesFlagsNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneBf_:
  290|  19.0k|#[derive(Clone, Debug)]
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code24constructor_x64_cvtsi2ssINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5540|     14|pub fn constructor_x64_cvtsi2ss<C: Context>(ctx: &mut C, arg0: Type, arg1: &GprMem) -> Option<Xmm> {
 5541|     14|    let pattern0_0 = arg0;
 5542|     14|    let pattern1_0 = arg1;
 5543|     14|    // Rule at src/isa/x64/inst.isle line 3177.
 5544|     14|    let expr0_0 = C::temp_writable_xmm(ctx, );
 5545|     14|    let expr1_0 = C::raw_operand_size_of_type(ctx, pattern0_0);
 5546|     14|    let expr2_0 = SseOpcode::Cvtsi2ss;
 5547|     14|    let expr3_0 = MInst::GprToXmm {
 5548|     14|        op: expr2_0,
 5549|     14|        src: pattern1_0.clone(),
 5550|     14|        dst: expr0_0,
 5551|     14|        src_size: expr1_0,
 5552|     14|    };
 5553|     14|    let expr4_0 = C::emit(ctx, &expr3_0);
 5554|     14|    let expr5_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 5555|     14|    return Some(expr5_0);
 5556|     14|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_output_regINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
  756|  30.2k|pub fn constructor_output_reg<C: Context>(ctx: &mut C, arg0: Reg) -> Option<InstOutput> {
  757|  30.2k|    let pattern0_0 = arg0;
  758|  30.2k|    // Rule at src/prelude.isle line 118.
  759|  30.2k|    let expr0_0 = C::value_reg(ctx, pattern0_0);
  760|  30.2k|    let expr1_0 = C::output(ctx, expr0_0);
  761|  30.2k|    return Some(expr1_0);
  762|  30.2k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_jmp_knownINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5998|  46.2k|pub fn constructor_jmp_known<C: Context>(ctx: &mut C, arg0: MachLabel) -> Option<SideEffectNoResult> {
 5999|  46.2k|    let pattern0_0 = arg0;
 6000|  46.2k|    // Rule at src/isa/x64/inst.isle line 3328.
 6001|  46.2k|    let expr0_0 = MInst::JmpKnown {
 6002|  46.2k|        dst: pattern0_0,
 6003|  46.2k|    };
 6004|  46.2k|    let expr1_0 = SideEffectNoResult::Inst {
 6005|  46.2k|        inst: expr0_0,
 6006|  46.2k|    };
 6007|  46.2k|    return Some(expr1_0);
 6008|  46.2k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code24constructor_lower_returnINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1104|  89.3k|pub fn constructor_lower_return<C: Context>(ctx: &mut C, arg0: Range, arg1: ValueSlice) -> Option<InstOutput> {
 1105|  89.3k|    let pattern0_0 = arg0;
 1106|  89.3k|    if let Some(()) = C::range_empty(ctx, pattern0_0) {
 1107|  50.2k|        let pattern2_0 = arg1;
 1108|  50.2k|        // Rule at src/prelude.isle line 1026.
 1109|  50.2k|        let expr0_0 = C::output_none(ctx, );
 1110|  50.2k|        return Some(expr0_0);
 1111|  39.0k|    }
 1112|  39.0k|    if let Some((pattern1_0, pattern1_1)) = C::range_unwrap(ctx, pattern0_0) {
 1113|  39.0k|        let pattern2_0 = arg1;
 1114|  39.0k|        // Rule at src/prelude.isle line 1027.
 1115|  39.0k|        let expr0_0 = C::retval(ctx, pattern1_0);
 1116|  39.0k|        let expr1_0 = C::value_slice_get(ctx, pattern2_0, pattern1_0);
 1117|  39.0k|        let expr2_0 = constructor_copy_to_regs(ctx, expr0_0, expr1_0)?;
 1118|  39.0k|        let expr3_0 = constructor_lower_return(ctx, pattern1_1, pattern2_0)?;
 1119|  39.0k|        return Some(expr3_0);
 1120|      0|    }
 1121|      0|    return None;
 1122|  89.3k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code23constructor_x64_add_memINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5851|  4.86k|pub fn constructor_x64_add_mem<C: Context>(ctx: &mut C, arg0: Type, arg1: &Amode, arg2: Gpr) -> Option<SideEffectNoResult> {
 5852|  4.86k|    let pattern0_0 = arg0;
 5853|  4.86k|    let pattern1_0 = arg1;
 5854|  4.86k|    let pattern2_0 = arg2;
 5855|  4.86k|    // Rule at src/isa/x64/inst.isle line 3278.
 5856|  4.86k|    let expr0_0 = AluRmiROpcode::Add;
 5857|  4.86k|    let expr1_0 = constructor_alu_rm(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
 5858|  4.86k|    return Some(expr1_0);
 5859|  4.86k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code23constructor_select_icmpINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6165|     28|pub fn constructor_select_icmp<C: Context>(ctx: &mut C, arg0: &IcmpCondResult, arg1: Value, arg2: Value) -> Option<ValueRegs> {
 6166|     28|    let pattern0_0 = arg0;
 6167|     28|    if let &IcmpCondResult::Condition { producer: ref pattern1_0, cc: ref pattern1_1 } = pattern0_0 {
 6168|     28|        let pattern2_0 = arg1;
 6169|     28|        let pattern3_0 = C::value_type(ctx, pattern2_0);
 6170|     28|        if let Some(pattern4_0) = C::is_gpr_type(ctx, pattern3_0) {
 6171|     28|            if let Some(pattern5_0) = C::is_single_register_type(ctx, pattern4_0) {
 6172|     28|                let pattern6_0 = arg2;
 6173|       |                // Rule at src/isa/x64/inst.isle line 3435.
 6174|     28|                let expr0_0 = constructor_put_in_gpr(ctx, pattern2_0)?;
 6175|     28|                let expr1_0 = C::gpr_to_gpr_mem(ctx, expr0_0);
 6176|     28|                let expr2_0 = constructor_put_in_gpr(ctx, pattern6_0)?;
 6177|     28|                let expr3_0 = constructor_cmove(ctx, pattern5_0, pattern1_1, &expr1_0, expr2_0)?;
 6178|     28|                let expr4_0 = constructor_with_flags(ctx, pattern1_0, &expr3_0)?;
 6179|     28|                return Some(expr4_0);
 6180|      0|            }
 6181|      0|        }
 6182|      0|        let pattern4_0 = arg2;
 6183|       |        // Rule at src/isa/x64/inst.isle line 3439.
 6184|      0|        let expr0_0 = constructor_cmove_from_values(ctx, pattern3_0, pattern1_1, pattern2_0, pattern4_0)?;
 6185|      0|        let expr1_0 = constructor_with_flags(ctx, pattern1_0, &expr0_0)?;
 6186|      0|        return Some(expr1_0);
 6187|       |    }
 6188|       |    return None;
 6189|     28|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code34constructor_reg_mem_to_reg_mem_immINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1154|  4.87k|pub fn constructor_reg_mem_to_reg_mem_imm<C: Context>(ctx: &mut C, arg0: &RegMem) -> Option<RegMemImm> {
 1155|  4.87k|    let pattern0_0 = arg0;
 1156|  4.87k|    match pattern0_0 {
 1157|      0|        &RegMem::Reg { reg: pattern1_0 } => {
 1158|      0|            // Rule at src/isa/x64/inst.isle line 781.
 1159|      0|            let expr0_0 = RegMemImm::Reg {
 1160|      0|                reg: pattern1_0,
 1161|      0|            };
 1162|      0|            return Some(expr0_0);
 1163|       |        }
 1164|  4.87k|        &RegMem::Mem { addr: ref pattern1_0 } => {
 1165|  4.87k|            // Rule at src/isa/x64/inst.isle line 783.
 1166|  4.87k|            let expr0_0 = RegMemImm::Mem {
 1167|  4.87k|                addr: pattern1_0.clone(),
 1168|  4.87k|            };
 1169|  4.87k|            return Some(expr0_0);
 1170|       |        }
 1171|      0|        _ => {}
 1172|      0|    }
 1173|      0|    return None;
 1174|  4.87k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code20constructor_jmp_condINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6026|  9.46k|pub fn constructor_jmp_cond<C: Context>(ctx: &mut C, arg0: &CC, arg1: MachLabel, arg2: MachLabel) -> Option<ConsumesFlags> {
 6027|  9.46k|    let pattern0_0 = arg0;
 6028|  9.46k|    let pattern1_0 = arg1;
 6029|  9.46k|    let pattern2_0 = arg2;
 6030|  9.46k|    // Rule at src/isa/x64/inst.isle line 3337.
 6031|  9.46k|    let expr0_0 = MInst::JmpCond {
 6032|  9.46k|        cc: pattern0_0.clone(),
 6033|  9.46k|        taken: pattern1_0,
 6034|  9.46k|        not_taken: pattern2_0,
 6035|  9.46k|    };
 6036|  9.46k|    let expr1_0 = ConsumesFlags::ConsumesFlagsSideEffect {
 6037|  9.46k|        inst: expr0_0,
 6038|  9.46k|    };
 6039|  9.46k|    return Some(expr1_0);
 6040|  9.46k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_gpr_to_xmmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4897|     16|pub fn constructor_gpr_to_xmm<C: Context>(ctx: &mut C, arg0: &SseOpcode, arg1: &GprMem, arg2: &OperandSize) -> Option<Xmm> {
 4898|     16|    let pattern0_0 = arg0;
 4899|     16|    let pattern1_0 = arg1;
 4900|     16|    let pattern2_0 = arg2;
 4901|     16|    // Rule at src/isa/x64/inst.isle line 2898.
 4902|     16|    let expr0_0 = C::temp_writable_xmm(ctx, );
 4903|     16|    let expr1_0 = MInst::GprToXmm {
 4904|     16|        op: pattern0_0.clone(),
 4905|     16|        src: pattern1_0.clone(),
 4906|     16|        dst: expr0_0,
 4907|     16|        src_size: pattern2_0.clone(),
 4908|     16|    };
 4909|     16|    let expr2_0 = C::emit(ctx, &expr1_0);
 4910|     16|    let expr3_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 4911|     16|    return Some(expr3_0);
 4912|     16|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_x64_lzcntINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 4986|     12|pub fn constructor_x64_lzcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Option<Gpr> {
 4987|     12|    let pattern0_0 = arg0;
 4988|     12|    let pattern1_0 = arg1;
 4989|     12|    // Rule at src/isa/x64/inst.isle line 2937.
 4990|     12|    let expr0_0 = C::temp_writable_gpr(ctx, );
 4991|     12|    let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern0_0);
 4992|     12|    let expr2_0 = UnaryRmROpcode::Lzcnt;
 4993|     12|    let expr3_0 = C::gpr_to_gpr_mem(ctx, pattern1_0);
 4994|     12|    let expr4_0 = MInst::UnaryRmR {
 4995|     12|        size: expr1_0,
 4996|     12|        op: expr2_0,
 4997|     12|        src: expr3_0,
 4998|     12|        dst: expr0_0,
 4999|     12|    };
 5000|     12|    let expr5_0 = C::emit(ctx, &expr4_0);
 5001|     12|    let expr6_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 5002|     12|    return Some(expr6_0);
 5003|     12|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code22constructor_x64_popcntINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5108|     16|pub fn constructor_x64_popcnt<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Option<Gpr> {
 5109|     16|    let pattern0_0 = arg0;
 5110|     16|    let pattern1_0 = arg1;
 5111|     16|    // Rule at src/isa/x64/inst.isle line 2993.
 5112|     16|    let expr0_0 = C::temp_writable_gpr(ctx, );
 5113|     16|    let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern0_0);
 5114|     16|    let expr2_0 = UnaryRmROpcode::Popcnt;
 5115|     16|    let expr3_0 = C::gpr_to_gpr_mem(ctx, pattern1_0);
 5116|     16|    let expr4_0 = MInst::UnaryRmR {
 5117|     16|        size: expr1_0,
 5118|     16|        op: expr2_0,
 5119|     16|        src: expr3_0,
 5120|     16|        dst: expr0_0,
 5121|     16|    };
 5122|     16|    let expr5_0 = C::emit(ctx, &expr4_0);
 5123|     16|    let expr6_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 5124|     16|    return Some(expr6_0);
 5125|     16|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code18constructor_alu_rmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 5830|  4.86k|pub fn constructor_alu_rm<C: Context>(ctx: &mut C, arg0: Type, arg1: &AluRmiROpcode, arg2: &Amode, arg3: Gpr) -> Option<SideEffectNoResult> {
 5831|  4.86k|    let pattern0_0 = arg0;
 5832|  4.86k|    let pattern1_0 = arg1;
 5833|  4.86k|    let pattern2_0 = arg2;
 5834|  4.86k|    let pattern3_0 = arg3;
 5835|  4.86k|    // Rule at src/isa/x64/inst.isle line 3273.
 5836|  4.86k|    let expr0_0 = C::operand_size_of_type_32_64(ctx, pattern0_0);
 5837|  4.86k|    let expr1_0 = C::amode_to_synthetic_amode(ctx, pattern2_0);
 5838|  4.86k|    let expr2_0 = MInst::AluRM {
 5839|  4.86k|        size: expr0_0,
 5840|  4.86k|        op: pattern1_0.clone(),
 5841|  4.86k|        src1_dst: expr1_0,
 5842|  4.86k|        src2: pattern3_0,
 5843|  4.86k|    };
 5844|  4.86k|    let expr3_0 = SideEffectNoResult::Inst {
 5845|  4.86k|        inst: expr2_0,
 5846|  4.86k|    };
 5847|  4.86k|    return Some(expr3_0);
 5848|  4.86k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code23constructor_side_effectINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
  803|  84.2k|pub fn constructor_side_effect<C: Context>(ctx: &mut C, arg0: &SideEffectNoResult) -> Option<InstOutput> {
  804|  84.2k|    let pattern0_0 = arg0;
  805|  84.2k|    match pattern0_0 {
  806|  74.8k|        &SideEffectNoResult::Inst { inst: ref pattern1_0 } => {
  807|  74.8k|            // Rule at src/prelude.isle line 624.
  808|  74.8k|            let expr0_0 = C::emit(ctx, pattern1_0);
  809|  74.8k|            let expr1_0 = C::output_none(ctx, );
  810|  74.8k|            return Some(expr1_0);
  811|       |        }
  812|  9.46k|        &SideEffectNoResult::Inst2 { inst1: ref pattern1_0, inst2: ref pattern1_1 } => {
  813|  9.46k|            // Rule at src/prelude.isle line 627.
  814|  9.46k|            let expr0_0 = C::emit(ctx, pattern1_0);
  815|  9.46k|            let expr1_0 = C::emit(ctx, pattern1_1);
  816|  9.46k|            let expr2_0 = C::output_none(ctx, );
  817|  9.46k|            return Some(expr2_0);
  818|       |        }
  819|      0|        &SideEffectNoResult::Inst3 { inst1: ref pattern1_0, inst2: ref pattern1_1, inst3: ref pattern1_2 } => {
  820|      0|            // Rule at src/prelude.isle line 631.
  821|      0|            let expr0_0 = C::emit(ctx, pattern1_0);
  822|      0|            let expr1_0 = C::emit(ctx, pattern1_1);
  823|      0|            let expr2_0 = C::emit(ctx, pattern1_2);
  824|      0|            let expr3_0 = C::output_none(ctx, );
  825|      0|            return Some(expr3_0);
  826|       |        }
  827|      0|        _ => {}
  828|      0|    }
  829|      0|    return None;
  830|  84.2k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code27constructor_lower_icmp_boolINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6153|    156|pub fn constructor_lower_icmp_bool<C: Context>(ctx: &mut C, arg0: &IcmpCondResult) -> Option<ValueRegs> {
 6154|    156|    let pattern0_0 = arg0;
 6155|    156|    if let &IcmpCondResult::Condition { producer: ref pattern1_0, cc: ref pattern1_1 } = pattern0_0 {
 6156|       |        // Rule at src/isa/x64/inst.isle line 3426.
 6157|    156|        let expr0_0 = constructor_x64_setcc(ctx, pattern1_1)?;
 6158|    156|        let expr1_0 = constructor_with_flags(ctx, pattern1_0, &expr0_0)?;
 6159|    156|        return Some(expr1_0);
 6160|       |    }
 6161|       |    return None;
 6162|    156|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code24constructor_copy_to_regsINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1064|  39.0k|pub fn constructor_copy_to_regs<C: Context>(ctx: &mut C, arg0: WritableValueRegs, arg1: Value) -> Option<Unit> {
 1065|  39.0k|    let pattern0_0 = arg0;
 1066|  39.0k|    let pattern1_0 = arg1;
 1067|  39.0k|    let pattern2_0 = C::value_type(ctx, pattern1_0);
 1068|  39.0k|    // Rule at src/prelude.isle line 1006.
 1069|  39.0k|    let expr0_0 = C::put_in_regs(ctx, pattern1_0);
 1070|  39.0k|    let expr1_0 = constructor_value_regs_range(ctx, expr0_0)?;
 1071|  39.0k|    let expr2_0 = constructor_copy_to_regs_range(ctx, pattern2_0, expr1_0, pattern0_0, expr0_0)?;
 1072|  39.0k|    return Some(expr2_0);
 1073|  39.0k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code20constructor_emit_cmpINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6192|  9.64k|pub fn constructor_emit_cmp<C: Context>(ctx: &mut C, arg0: &IntCC, arg1: Value, arg2: Value) -> Option<IcmpCondResult> {
 6193|  9.64k|    let pattern0_0 = arg0;
 6194|  9.64k|    match pattern0_0 {
 6195|       |        &IntCC::Equal  => {
 6196|     82|            let pattern2_0 = arg1;
 6197|     82|            let pattern3_0 = C::value_type(ctx, pattern2_0);
 6198|     82|            if pattern3_0 == I128 {
 6199|      0|                let pattern5_0 = arg2;
 6200|      0|                // Rule at src/isa/x64/inst.isle line 3460.
 6201|      0|                let expr0_0 = C::put_in_regs(ctx, pattern2_0);
 6202|      0|                let expr1_0: usize = 0i128 as usize;
 6203|      0|                let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 6204|      0|                let expr3_0 = C::put_in_regs(ctx, pattern2_0);
 6205|      0|                let expr4_0: usize = 1i128 as usize;
 6206|      0|                let expr5_0 = constructor_value_regs_get_gpr(ctx, expr3_0, expr4_0)?;
 6207|      0|                let expr6_0 = C::put_in_regs(ctx, pattern5_0);
 6208|      0|                let expr7_0: usize = 0i128 as usize;
 6209|      0|                let expr8_0 = constructor_value_regs_get_gpr(ctx, expr6_0, expr7_0)?;
 6210|      0|                let expr9_0 = C::put_in_regs(ctx, pattern5_0);
 6211|      0|                let expr10_0: usize = 1i128 as usize;
 6212|      0|                let expr11_0 = constructor_value_regs_get_gpr(ctx, expr9_0, expr10_0)?;
 6213|      0|                let expr12_0 = OperandSize::Size64;
 6214|      0|                let expr13_0 = C::gpr_to_gpr_mem_imm(ctx, expr8_0);
 6215|      0|                let expr14_0 = constructor_x64_cmp(ctx, &expr12_0, &expr13_0, expr2_0)?;
 6216|      0|                let expr15_0 = CC::Z;
 6217|      0|                let expr16_0 = constructor_x64_setcc(ctx, &expr15_0)?;
 6218|      0|                let expr17_0 = constructor_with_flags_reg(ctx, &expr14_0, &expr16_0)?;
 6219|      0|                let expr18_0 = OperandSize::Size64;
 6220|      0|                let expr19_0 = C::gpr_to_gpr_mem_imm(ctx, expr11_0);
 6221|      0|                let expr20_0 = constructor_x64_cmp(ctx, &expr18_0, &expr19_0, expr5_0)?;
 6222|      0|                let expr21_0 = CC::Z;
 6223|      0|                let expr22_0 = constructor_x64_setcc(ctx, &expr21_0)?;
 6224|      0|                let expr23_0 = constructor_with_flags_reg(ctx, &expr20_0, &expr22_0)?;
 6225|      0|                let expr24_0: Type = I64;
 6226|      0|                let expr25_0 = C::gpr_new(ctx, expr17_0);
 6227|      0|                let expr26_0 = constructor_reg_to_gpr_mem_imm(ctx, expr23_0)?;
 6228|      0|                let expr27_0 = constructor_x64_and(ctx, expr24_0, expr25_0, &expr26_0)?;
 6229|      0|                let expr28_0 = C::gpr_to_reg(ctx, expr27_0);
 6230|      0|                let expr29_0 = OperandSize::Size64;
 6231|      0|                let expr30_0: u32 = 1i128 as u32;
 6232|      0|                let expr31_0 = RegMemImm::Imm {
 6233|      0|                    simm32: expr30_0,
 6234|      0|                };
 6235|      0|                let expr32_0 = C::gpr_mem_imm_new(ctx, &expr31_0);
 6236|      0|                let expr33_0 = C::gpr_new(ctx, expr28_0);
 6237|      0|                let expr34_0 = constructor_x64_test(ctx, &expr29_0, &expr32_0, expr33_0)?;
 6238|      0|                let expr35_0 = CC::NZ;
 6239|      0|                let expr36_0 = constructor_icmp_cond_result(ctx, &expr34_0, &expr35_0)?;
 6240|      0|                return Some(expr36_0);
 6241|     82|            }
 6242|       |        }
 6243|       |        &IntCC::NotEqual  => {
 6244|      0|            let pattern2_0 = arg1;
 6245|      0|            let pattern3_0 = C::value_type(ctx, pattern2_0);
 6246|      0|            if pattern3_0 == I128 {
 6247|      0|                let pattern5_0 = arg2;
 6248|      0|                // Rule at src/isa/x64/inst.isle line 3481.
 6249|      0|                let expr0_0 = C::put_in_regs(ctx, pattern2_0);
 6250|      0|                let expr1_0: usize = 0i128 as usize;
 6251|      0|                let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 6252|      0|                let expr3_0 = C::put_in_regs(ctx, pattern2_0);
 6253|      0|                let expr4_0: usize = 1i128 as usize;
 6254|      0|                let expr5_0 = constructor_value_regs_get_gpr(ctx, expr3_0, expr4_0)?;
 6255|      0|                let expr6_0 = C::put_in_regs(ctx, pattern5_0);
 6256|      0|                let expr7_0: usize = 0i128 as usize;
 6257|      0|                let expr8_0 = constructor_value_regs_get_gpr(ctx, expr6_0, expr7_0)?;
 6258|      0|                let expr9_0 = C::put_in_regs(ctx, pattern5_0);
 6259|      0|                let expr10_0: usize = 1i128 as usize;
 6260|      0|                let expr11_0 = constructor_value_regs_get_gpr(ctx, expr9_0, expr10_0)?;
 6261|      0|                let expr12_0 = OperandSize::Size64;
 6262|      0|                let expr13_0 = C::gpr_to_gpr_mem_imm(ctx, expr8_0);
 6263|      0|                let expr14_0 = constructor_x64_cmp(ctx, &expr12_0, &expr13_0, expr2_0)?;
 6264|      0|                let expr15_0 = CC::NZ;
 6265|      0|                let expr16_0 = constructor_x64_setcc(ctx, &expr15_0)?;
 6266|      0|                let expr17_0 = constructor_with_flags_reg(ctx, &expr14_0, &expr16_0)?;
 6267|      0|                let expr18_0 = OperandSize::Size64;
 6268|      0|                let expr19_0 = C::gpr_to_gpr_mem_imm(ctx, expr11_0);
 6269|      0|                let expr20_0 = constructor_x64_cmp(ctx, &expr18_0, &expr19_0, expr5_0)?;
 6270|      0|                let expr21_0 = CC::NZ;
 6271|      0|                let expr22_0 = constructor_x64_setcc(ctx, &expr21_0)?;
 6272|      0|                let expr23_0 = constructor_with_flags_reg(ctx, &expr20_0, &expr22_0)?;
 6273|      0|                let expr24_0: Type = I64;
 6274|      0|                let expr25_0 = C::gpr_new(ctx, expr17_0);
 6275|      0|                let expr26_0 = constructor_reg_to_gpr_mem_imm(ctx, expr23_0)?;
 6276|      0|                let expr27_0 = constructor_x64_or(ctx, expr24_0, expr25_0, &expr26_0)?;
 6277|      0|                let expr28_0 = C::gpr_to_reg(ctx, expr27_0);
 6278|      0|                let expr29_0 = OperandSize::Size64;
 6279|      0|                let expr30_0: u32 = 1i128 as u32;
 6280|      0|                let expr31_0 = RegMemImm::Imm {
 6281|      0|                    simm32: expr30_0,
 6282|      0|                };
 6283|      0|                let expr32_0 = C::gpr_mem_imm_new(ctx, &expr31_0);
 6284|      0|                let expr33_0 = C::gpr_new(ctx, expr28_0);
 6285|      0|                let expr34_0 = constructor_x64_test(ctx, &expr29_0, &expr32_0, expr33_0)?;
 6286|      0|                let expr35_0 = CC::NZ;
 6287|      0|                let expr36_0 = constructor_icmp_cond_result(ctx, &expr34_0, &expr35_0)?;
 6288|      0|                return Some(expr36_0);
 6289|      0|            }
 6290|       |        }
 6291|  9.55k|        _ => {}
 6292|       |    }
 6293|  9.64k|    let pattern1_0 = arg1;
 6294|  9.64k|    if let Some(pattern2_0) = C::simm32_from_value(ctx, pattern1_0) {
 6295|      4|        let pattern3_0 = C::value_type(ctx, pattern1_0);
 6296|      4|        let pattern4_0 = arg2;
 6297|      4|        // Rule at src/isa/x64/inst.isle line 3454.
 6298|      4|        let expr0_0 = C::raw_operand_size_of_type(ctx, pattern3_0);
 6299|      4|        let expr1_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
 6300|      4|        let expr2_0 = constructor_x64_cmp(ctx, &expr0_0, &pattern2_0, expr1_0)?;
 6301|      4|        let expr3_0 = C::intcc_reverse(ctx, pattern0_0);
 6302|      4|        let expr4_0 = C::intcc_to_cc(ctx, &expr3_0);
 6303|      4|        let expr5_0 = constructor_icmp_cond_result(ctx, &expr2_0, &expr4_0)?;
 6304|      4|        return Some(expr5_0);
 6305|  9.63k|    }
 6306|  9.63k|    let pattern2_0 = C::value_type(ctx, pattern1_0);
 6307|  9.63k|    if pattern2_0 == I128 {
 6308|      0|        let pattern4_0 = arg2;
 6309|      0|        let mut closure5 = || {
 6310|       |            let expr0_0 = IntCC::Equal;
 6311|       |            let expr1_0 = C::intcc_neq(ctx, pattern0_0, &expr0_0)?;
 6312|       |            return Some(expr1_0);
 6313|       |        };
 6314|      0|        if let Some(pattern5_0) = closure5() {
 6315|      0|            let mut closure6 = || {
 6316|       |                let expr0_0 = IntCC::NotEqual;
 6317|       |                let expr1_0 = C::intcc_neq(ctx, pattern0_0, &expr0_0)?;
 6318|       |                return Some(expr1_0);
 6319|       |            };
 6320|      0|            if let Some(pattern6_0) = closure6() {
 6321|       |                // Rule at src/isa/x64/inst.isle line 3496.
 6322|      0|                let expr0_0 = C::put_in_regs(ctx, pattern1_0);
 6323|      0|                let expr1_0: usize = 0i128 as usize;
 6324|      0|                let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 6325|      0|                let expr3_0 = C::put_in_regs(ctx, pattern1_0);
 6326|      0|                let expr4_0: usize = 1i128 as usize;
 6327|      0|                let expr5_0 = constructor_value_regs_get_gpr(ctx, expr3_0, expr4_0)?;
 6328|      0|                let expr6_0 = C::put_in_regs(ctx, pattern4_0);
 6329|      0|                let expr7_0: usize = 0i128 as usize;
 6330|      0|                let expr8_0 = constructor_value_regs_get_gpr(ctx, expr6_0, expr7_0)?;
 6331|      0|                let expr9_0 = C::put_in_regs(ctx, pattern4_0);
 6332|      0|                let expr10_0: usize = 1i128 as usize;
 6333|      0|                let expr11_0 = constructor_value_regs_get_gpr(ctx, expr9_0, expr10_0)?;
 6334|      0|                let expr12_0 = OperandSize::Size64;
 6335|      0|                let expr13_0 = C::gpr_to_gpr_mem_imm(ctx, expr11_0);
 6336|      0|                let expr14_0 = constructor_x64_cmp(ctx, &expr12_0, &expr13_0, expr5_0)?;
 6337|      0|                let expr15_0 = C::intcc_without_eq(ctx, pattern0_0);
 6338|      0|                let expr16_0 = C::intcc_to_cc(ctx, &expr15_0);
 6339|      0|                let expr17_0 = constructor_x64_setcc(ctx, &expr16_0)?;
 6340|      0|                let expr18_0 = CC::Z;
 6341|      0|                let expr19_0 = constructor_x64_setcc(ctx, &expr18_0)?;
 6342|      0|                let expr20_0 = constructor_consumes_flags_concat(ctx, &expr17_0, &expr19_0)?;
 6343|      0|                let expr21_0 = constructor_with_flags(ctx, &expr14_0, &expr20_0)?;
 6344|      0|                let expr22_0: usize = 0i128 as usize;
 6345|      0|                let expr23_0 = C::value_regs_get(ctx, expr21_0, expr22_0);
 6346|      0|                let expr24_0: usize = 1i128 as usize;
 6347|      0|                let expr25_0 = C::value_regs_get(ctx, expr21_0, expr24_0);
 6348|      0|                let expr26_0 = OperandSize::Size64;
 6349|      0|                let expr27_0 = C::gpr_to_gpr_mem_imm(ctx, expr8_0);
 6350|      0|                let expr28_0 = constructor_x64_cmp(ctx, &expr26_0, &expr27_0, expr2_0)?;
 6351|      0|                let expr29_0 = C::intcc_unsigned(ctx, pattern0_0);
 6352|      0|                let expr30_0 = C::intcc_to_cc(ctx, &expr29_0);
 6353|      0|                let expr31_0 = constructor_x64_setcc(ctx, &expr30_0)?;
 6354|      0|                let expr32_0 = constructor_with_flags_reg(ctx, &expr28_0, &expr31_0)?;
 6355|      0|                let expr33_0: Type = I64;
 6356|      0|                let expr34_0 = C::gpr_new(ctx, expr25_0);
 6357|      0|                let expr35_0 = constructor_reg_to_gpr_mem_imm(ctx, expr32_0)?;
 6358|      0|                let expr36_0 = constructor_x64_and(ctx, expr33_0, expr34_0, &expr35_0)?;
 6359|      0|                let expr37_0 = C::gpr_to_reg(ctx, expr36_0);
 6360|      0|                let expr38_0: Type = I64;
 6361|      0|                let expr39_0 = C::gpr_new(ctx, expr23_0);
 6362|      0|                let expr40_0 = constructor_reg_to_gpr_mem_imm(ctx, expr37_0)?;
 6363|      0|                let expr41_0 = constructor_x64_or(ctx, expr38_0, expr39_0, &expr40_0)?;
 6364|      0|                let expr42_0 = C::gpr_to_reg(ctx, expr41_0);
 6365|      0|                let expr43_0 = OperandSize::Size64;
 6366|      0|                let expr44_0: u32 = 1i128 as u32;
 6367|      0|                let expr45_0 = RegMemImm::Imm {
 6368|      0|                    simm32: expr44_0,
 6369|      0|                };
 6370|      0|                let expr46_0 = C::gpr_mem_imm_new(ctx, &expr45_0);
 6371|      0|                let expr47_0 = C::gpr_new(ctx, expr42_0);
 6372|      0|                let expr48_0 = constructor_x64_test(ctx, &expr43_0, &expr46_0, expr47_0)?;
 6373|      0|                let expr49_0 = CC::NZ;
 6374|      0|                let expr50_0 = constructor_icmp_cond_result(ctx, &expr48_0, &expr49_0)?;
 6375|      0|                return Some(expr50_0);
 6376|      0|            }
 6377|      0|        }
 6378|  9.63k|    }
 6379|  9.63k|    let pattern3_0 = arg2;
 6380|  9.63k|    // Rule at src/isa/x64/inst.isle line 3447.
 6381|  9.63k|    let expr0_0 = C::raw_operand_size_of_type(ctx, pattern2_0);
 6382|  9.63k|    let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern3_0)?;
 6383|  9.63k|    let expr2_0 = constructor_put_in_gpr(ctx, pattern1_0)?;
 6384|  9.63k|    let expr3_0 = constructor_x64_cmp(ctx, &expr0_0, &expr1_0, expr2_0)?;
 6385|  9.63k|    let expr4_0 = C::intcc_to_cc(ctx, pattern0_0);
 6386|  9.63k|    let expr5_0 = constructor_icmp_cond_result(ctx, &expr3_0, &expr4_0)?;
 6387|  9.63k|    return Some(expr5_0);
 6388|  9.64k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code38constructor_writable_xmm_to_value_regsINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6930|     52|pub fn constructor_writable_xmm_to_value_regs<C: Context>(ctx: &mut C, arg0: WritableXmm) -> Option<ValueRegs> {
 6931|     52|    let pattern0_0 = arg0;
 6932|       |    // Rule at src/isa/x64/inst.isle line 3844.
 6933|     52|    let expr0_0 = constructor_writable_xmm_to_r_reg(ctx, pattern0_0)?;
 6934|     52|    let expr1_0 = C::value_reg(ctx, expr0_0);
 6935|     52|    return Some(expr1_0);
 6936|     52|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code18constructor_extendINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1813|    512|pub fn constructor_extend<C: Context>(ctx: &mut C, arg0: &ExtendKind, arg1: Type, arg2: &ExtMode, arg3: &GprMem) -> Option<Gpr> {
 1814|    512|    let pattern0_0 = arg0;
 1815|    512|    match pattern0_0 {
 1816|       |        &ExtendKind::Sign  => {
 1817|      8|            let pattern2_0 = arg1;
 1818|      8|            let pattern3_0 = arg2;
 1819|      8|            let pattern4_0 = arg3;
 1820|       |            // Rule at src/isa/x64/inst.isle line 1516.
 1821|      8|            let expr0_0 = constructor_x64_movsx(ctx, pattern3_0, pattern4_0)?;
 1822|      8|            return Some(expr0_0);
 1823|       |        }
 1824|       |        &ExtendKind::Zero  => {
 1825|    504|            let pattern2_0 = arg1;
 1826|    504|            let pattern3_0 = arg2;
 1827|    504|            let pattern4_0 = arg3;
 1828|       |            // Rule at src/isa/x64/inst.isle line 1512.
 1829|    504|            let expr0_0 = constructor_x64_movzx(ctx, pattern3_0, pattern4_0)?;
 1830|    504|            return Some(expr0_0);
 1831|       |        }
 1832|      0|        _ => {}
 1833|      0|    }
 1834|      0|    return None;
 1835|    512|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code30constructor_put_in_gpr_mem_immINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1706|  14.2k|pub fn constructor_put_in_gpr_mem_imm<C: Context>(ctx: &mut C, arg0: Value) -> Option<GprMemImm> {
 1707|  14.2k|    let pattern0_0 = arg0;
 1708|  14.2k|    // Rule at src/isa/x64/inst.isle line 1297.
 1709|  14.2k|    let expr0_0 = C::put_in_reg_mem_imm(ctx, pattern0_0);
 1710|  14.2k|    let expr1_0 = C::gpr_mem_imm_new(ctx, &expr0_0);
 1711|  14.2k|    return Some(expr1_0);
 1712|  14.2k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code28constructor_value_regs_rangeINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
  783|  39.0k|pub fn constructor_value_regs_range<C: Context>(ctx: &mut C, arg0: ValueRegs) -> Option<Range> {
  784|  39.0k|    let pattern0_0 = arg0;
  785|  39.0k|    // Rule at src/prelude.isle line 188.
  786|  39.0k|    let expr0_0: usize = 0i128 as usize;
  787|  39.0k|    let expr1_0 = C::value_regs_len(ctx, pattern0_0);
  788|  39.0k|    let expr2_0 = C::range(ctx, expr0_0, expr1_0);
  789|  39.0k|    return Some(expr2_0);
  790|  39.0k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code25constructor_jmp_cond_icmpINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6043|  9.45k|pub fn constructor_jmp_cond_icmp<C: Context>(ctx: &mut C, arg0: &IcmpCondResult, arg1: MachLabel, arg2: MachLabel) -> Option<SideEffectNoResult> {
 6044|  9.45k|    let pattern0_0 = arg0;
 6045|  9.45k|    if let &IcmpCondResult::Condition { producer: ref pattern1_0, cc: ref pattern1_1 } = pattern0_0 {
 6046|  9.45k|        let pattern2_0 = arg1;
 6047|  9.45k|        let pattern3_0 = arg2;
 6048|       |        // Rule at src/isa/x64/inst.isle line 3342.
 6049|  9.45k|        let expr0_0 = constructor_jmp_cond(ctx, pattern1_1, pattern2_0, pattern3_0)?;
 6050|  9.45k|        let expr1_0 = constructor_with_flags_side_effect(ctx, pattern1_0, &expr0_0)?;
 6051|  9.45k|        return Some(expr1_0);
 6052|       |    }
 6053|       |    return None;
 6054|  9.45k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_x64_cmpINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2757|  9.64k|pub fn constructor_x64_cmp<C: Context>(ctx: &mut C, arg0: &OperandSize, arg1: &GprMemImm, arg2: Gpr) -> Option<ProducesFlags> {
 2758|  9.64k|    let pattern0_0 = arg0;
 2759|  9.64k|    let pattern1_0 = arg1;
 2760|  9.64k|    let pattern2_0 = arg2;
 2761|  9.64k|    // Rule at src/isa/x64/inst.isle line 1975.
 2762|  9.64k|    let expr0_0 = CmpOpcode::Cmp;
 2763|  9.64k|    let expr1_0 = constructor_cmp_rmi_r(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
 2764|  9.64k|    return Some(expr1_0);
 2765|  9.64k|}
_RNCINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_amode_addINtNtNtBe_8machinst4isle11IsleContextNtB4_5MInstNtNtBe_8settings5FlagsNtNtBa_8settings5FlagsKj6_EEsa_0Be_:
 1577|    248|            let mut closure3 = || {
 1578|    248|                return Some(pattern1_1);
 1579|    248|            };
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code25constructor_amode_initialINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1213|  38.2k|pub fn constructor_amode_initial<C: Context>(ctx: &mut C, arg0: MemFlags, arg1: Offset32) -> Option<Amode> {
 1214|  38.2k|    let pattern0_0 = arg0;
 1215|  38.2k|    let pattern1_0 = arg1;
 1216|  38.2k|    if let Some(pattern2_0) = C::offset32(ctx, pattern1_0) {
 1217|       |        // Rule at src/isa/x64/inst.isle line 912.
 1218|  38.2k|        let expr0_0 = C::invalid_reg(ctx, );
 1219|  38.2k|        let expr1_0 = Amode::ImmReg {
 1220|  38.2k|            simm32: pattern2_0,
 1221|  38.2k|            base: expr0_0,
 1222|  38.2k|            flags: pattern0_0,
 1223|  38.2k|        };
 1224|  38.2k|        return Some(expr1_0);
 1225|      0|    }
 1226|      0|    return None;
 1227|  38.2k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code20constructor_xmm_rm_rINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 3158|      2|pub fn constructor_xmm_rm_r<C: Context>(ctx: &mut C, arg0: Type, arg1: &SseOpcode, arg2: Xmm, arg3: &XmmMem) -> Option<Xmm> {
 3159|      2|    let pattern0_0 = arg0;
 3160|      2|    let pattern1_0 = arg1;
 3161|      2|    let pattern2_0 = arg2;
 3162|      2|    let pattern3_0 = arg3;
 3163|      2|    // Rule at src/isa/x64/inst.isle line 2122.
 3164|      2|    let expr0_0 = C::temp_writable_xmm(ctx, );
 3165|      2|    let expr1_0 = MInst::XmmRmR {
 3166|      2|        op: pattern1_0.clone(),
 3167|      2|        src1: pattern2_0,
 3168|      2|        src2: pattern3_0.clone(),
 3169|      2|        dst: expr0_0,
 3170|      2|    };
 3171|      2|    let expr2_0 = C::emit(ctx, &expr1_0);
 3172|      2|    let expr3_0 = C::writable_xmm_to_xmm(ctx, expr0_0);
 3173|      2|    return Some(expr3_0);
 3174|      2|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code30constructor_copy_to_regs_rangeINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1076|  39.0k|pub fn constructor_copy_to_regs_range<C: Context>(ctx: &mut C, arg0: Type, arg1: Range, arg2: WritableValueRegs, arg3: ValueRegs) -> Option<Unit> {
 1077|  39.0k|    let pattern0_0 = arg0;
 1078|  39.0k|    let pattern1_0 = arg1;
 1079|  39.0k|    if let Some(pattern2_0) = C::range_singleton(ctx, pattern1_0) {
 1080|  39.0k|        let pattern3_0 = arg2;
 1081|  39.0k|        let pattern4_0 = arg3;
 1082|  39.0k|        // Rule at src/prelude.isle line 1014.
 1083|  39.0k|        let expr0_0 = C::writable_regs_get(ctx, pattern3_0, pattern2_0);
 1084|  39.0k|        let expr1_0 = C::value_regs_get(ctx, pattern4_0, pattern2_0);
 1085|  39.0k|        let expr2_0 = C::gen_move(ctx, pattern0_0, expr0_0, expr1_0);
 1086|  39.0k|        let expr3_0 = C::emit(ctx, &expr2_0);
 1087|  39.0k|        return Some(expr3_0);
 1088|      0|    }
 1089|      0|    if let Some((pattern2_0, pattern2_1)) = C::range_unwrap(ctx, pattern1_0) {
 1090|      0|        let pattern3_0 = arg2;
 1091|      0|        let pattern4_0 = arg3;
 1092|      0|        // Rule at src/prelude.isle line 1019.
 1093|      0|        let expr0_0 = C::writable_regs_get(ctx, pattern3_0, pattern2_0);
 1094|      0|        let expr1_0 = C::value_regs_get(ctx, pattern4_0, pattern2_0);
 1095|      0|        let expr2_0 = C::gen_move(ctx, pattern0_0, expr0_0, expr1_0);
 1096|      0|        let expr3_0 = C::emit(ctx, &expr2_0);
 1097|      0|        let expr4_0 = constructor_copy_to_regs_range(ctx, pattern0_0, pattern2_1, pattern3_0, pattern4_0)?;
 1098|      0|        return Some(expr4_0);
 1099|      0|    }
 1100|      0|    return None;
 1101|  39.0k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code17constructor_lowerINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 7005|   158k|pub fn constructor_lower<C: Context>(ctx: &mut C, arg0: Inst) -> Option<InstOutput> {
 7006|   158k|    let pattern0_0 = arg0;
 7007|   158k|    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
 7008|  40.1k|        let pattern2_0 = C::value_type(ctx, pattern1_0);
 7009|  40.1k|        if pattern2_0 == I128 {
 7010|      0|            if let Some(()) = C::use_popcnt(ctx, pattern2_0) {
 7011|      0|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
 7012|      0|                if let &InstructionData::Unary { opcode: ref pattern6_0, arg: pattern6_1 } = &pattern5_0 {
 7013|      0|                    if let &Opcode::Popcnt  = pattern6_0 {
 7014|       |                        // Rule at src/isa/x64/lower.isle line 1825.
 7015|      0|                        let expr0_0: Type = I64;
 7016|      0|                        let expr1_0 = C::put_in_regs(ctx, pattern6_1);
 7017|      0|                        let expr2_0: usize = 0i128 as usize;
 7018|      0|                        let expr3_0 = constructor_value_regs_get_gpr(ctx, expr1_0, expr2_0)?;
 7019|      0|                        let expr4_0 = constructor_x64_popcnt(ctx, expr0_0, expr3_0)?;
 7020|      0|                        let expr5_0: Type = I64;
 7021|      0|                        let expr6_0 = C::put_in_regs(ctx, pattern6_1);
 7022|      0|                        let expr7_0: usize = 1i128 as usize;
 7023|      0|                        let expr8_0 = constructor_value_regs_get_gpr(ctx, expr6_0, expr7_0)?;
 7024|      0|                        let expr9_0 = constructor_x64_popcnt(ctx, expr5_0, expr8_0)?;
 7025|      0|                        let expr10_0: Type = I64;
 7026|      0|                        let expr11_0 = C::gpr_to_gpr_mem_imm(ctx, expr9_0);
 7027|      0|                        let expr12_0 = constructor_x64_add(ctx, expr10_0, expr4_0, &expr11_0)?;
 7028|      0|                        let expr13_0 = C::gpr_to_reg(ctx, expr12_0);
 7029|      0|                        let expr14_0: Type = I64;
 7030|      0|                        let expr15_0: u64 = 0i128 as u64;
 7031|      0|                        let expr16_0 = constructor_imm(ctx, expr14_0, expr15_0)?;
 7032|      0|                        let expr17_0 = C::value_regs(ctx, expr13_0, expr16_0);
 7033|      0|                        let expr18_0 = C::output(ctx, expr17_0);
 7034|      0|                        return Some(expr18_0);
 7035|      0|                    }
 7036|      0|                }
 7037|      0|            }
 7038|  40.1k|        }
 7039|  40.1k|        if pattern2_0 == I8X16 {
 7040|      0|            if let Some(()) = C::avx512vl_enabled(ctx, pattern2_0) {
 7041|      0|                if let Some(()) = C::avx512bitalg_enabled(ctx, pattern2_0) {
 7042|      0|                    let pattern6_0 = C::inst_data(ctx, pattern0_0);
 7043|      0|                    if let &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } = &pattern6_0 {
 7044|      0|                        if let &Opcode::Popcnt  = pattern7_0 {
 7045|       |                            // Rule at src/isa/x64/lower.isle line 1917.
 7046|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 7047|      0|                            let expr1_0 = constructor_x64_vpopcntb(ctx, &expr0_0)?;
 7048|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 7049|      0|                            return Some(expr2_0);
 7050|      0|                        }
 7051|      0|                    }
 7052|      0|                }
 7053|      0|            }
 7054|  40.1k|        }
 7055|  40.1k|        if let Some(()) = C::avx512vl_enabled(ctx, pattern2_0) {
 7056|      0|            if let Some(()) = C::avx512f_enabled(ctx, pattern2_0) {
 7057|      0|                if pattern2_0 == F32X4 {
 7058|      0|                    let pattern6_0 = C::inst_data(ctx, pattern0_0);
 7059|      0|                    if let &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } = &pattern6_0 {
 7060|      0|                        if let &Opcode::FcvtFromUint  = pattern7_0 {
 7061|       |                            // Rule at src/isa/x64/lower.isle line 2996.
 7062|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 7063|      0|                            let expr1_0 = constructor_x64_vcvtudq2ps(ctx, &expr0_0)?;
 7064|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 7065|      0|                            return Some(expr2_0);
 7066|      0|                        }
 7067|      0|                    }
 7068|      0|                }
 7069|      0|            }
 7070|  40.1k|        }
 7071|  40.1k|        if let Some(()) = C::use_fma(ctx, pattern2_0) {
 7072|  40.1k|            if pattern2_0 == F32 {
 7073|     84|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
 7074|     84|                if let &InstructionData::Ternary { opcode: ref pattern6_0, args: ref pattern6_1 } = &pattern5_0 {
 7075|     32|                    if let &Opcode::Fma  = pattern6_0 {
 7076|      0|                        let (pattern8_0, pattern8_1, pattern8_2) = C::unpack_value_array_3(ctx, pattern6_1);
 7077|       |                        // Rule at src/isa/x64/lower.isle line 2483.
 7078|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern8_0)?;
 7079|      0|                        let expr1_0 = constructor_put_in_xmm(ctx, pattern8_1)?;
 7080|      0|                        let expr2_0 = constructor_put_in_xmm(ctx, pattern8_2)?;
 7081|      0|                        let expr3_0 = constructor_x64_vfmadd213ss(ctx, expr0_0, expr1_0, expr2_0)?;
 7082|      0|                        let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
 7083|      0|                        return Some(expr4_0);
 7084|     32|                    }
 7085|     52|                }
 7086|  40.0k|            }
 7087|  40.1k|            if pattern2_0 == F64 {
 7088|    248|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
 7089|    248|                if let &InstructionData::Ternary { opcode: ref pattern6_0, args: ref pattern6_1 } = &pattern5_0 {
 7090|     20|                    if let &Opcode::Fma  = pattern6_0 {
 7091|      0|                        let (pattern8_0, pattern8_1, pattern8_2) = C::unpack_value_array_3(ctx, pattern6_1);
 7092|       |                        // Rule at src/isa/x64/lower.isle line 2485.
 7093|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern8_0)?;
 7094|      0|                        let expr1_0 = constructor_put_in_xmm(ctx, pattern8_1)?;
 7095|      0|                        let expr2_0 = constructor_put_in_xmm(ctx, pattern8_2)?;
 7096|      0|                        let expr3_0 = constructor_x64_vfmadd213sd(ctx, expr0_0, expr1_0, expr2_0)?;
 7097|      0|                        let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
 7098|      0|                        return Some(expr4_0);
 7099|     20|                    }
 7100|    228|                }
 7101|  39.9k|            }
 7102|      0|        }
 7103|  40.1k|        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
 7104|  40.0k|            if let Some(()) = C::use_lzcnt(ctx, pattern2_0) {
 7105|  40.0k|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
 7106|  40.0k|                if let &InstructionData::Unary { opcode: ref pattern6_0, arg: pattern6_1 } = &pattern5_0 {
 7107|  1.34k|                    if let &Opcode::Clz  = pattern6_0 {
 7108|       |                        // Rule at src/isa/x64/lower.isle line 1733.
 7109|     12|                        let expr0_0 = constructor_put_in_gpr(ctx, pattern6_1)?;
 7110|     12|                        let expr1_0 = constructor_x64_lzcnt(ctx, pattern3_0, expr0_0)?;
 7111|     12|                        let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
 7112|     12|                        return Some(expr2_0);
 7113|  1.33k|                    }
 7114|  38.6k|                }
 7115|      0|            }
 7116|  39.9k|            if let Some(()) = C::use_bmi1(ctx, pattern2_0) {
 7117|  39.9k|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
 7118|  39.9k|                if let &InstructionData::Unary { opcode: ref pattern6_0, arg: pattern6_1 } = &pattern5_0 {
 7119|  1.33k|                    if let &Opcode::Ctz  = pattern6_0 {
 7120|       |                        // Rule at src/isa/x64/lower.isle line 1775.
 7121|      2|                        let expr0_0 = constructor_put_in_gpr(ctx, pattern6_1)?;
 7122|      2|                        let expr1_0 = constructor_x64_tzcnt(ctx, pattern3_0, expr0_0)?;
 7123|      2|                        let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
 7124|      2|                        return Some(expr2_0);
 7125|  1.32k|                    }
 7126|  38.6k|                }
 7127|      0|            }
 7128|  39.9k|            if let Some(()) = C::use_popcnt(ctx, pattern2_0) {
 7129|  39.9k|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
 7130|  39.9k|                if let &InstructionData::Unary { opcode: ref pattern6_0, arg: pattern6_1 } = &pattern5_0 {
 7131|  1.32k|                    if let &Opcode::Popcnt  = pattern6_0 {
 7132|       |                        // Rule at src/isa/x64/lower.isle line 1811.
 7133|     16|                        let expr0_0 = constructor_put_in_gpr(ctx, pattern6_1)?;
 7134|     16|                        let expr1_0 = constructor_x64_popcnt(ctx, pattern3_0, expr0_0)?;
 7135|     16|                        let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
 7136|     16|                        return Some(expr2_0);
 7137|  1.31k|                    }
 7138|  38.6k|                }
 7139|      0|            }
 7140|    160|        }
 7141|  40.1k|        if let Some(pattern3_0) = C::ty_8_or_16(ctx, pattern2_0) {
 7142|      4|            if let Some(()) = C::use_popcnt(ctx, pattern2_0) {
 7143|      4|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
 7144|      4|                if let &InstructionData::Unary { opcode: ref pattern6_0, arg: pattern6_1 } = &pattern5_0 {
 7145|      4|                    if let &Opcode::Popcnt  = pattern6_0 {
 7146|       |                        // Rule at src/isa/x64/lower.isle line 1818.
 7147|      0|                        let expr0_0: Type = I32;
 7148|      0|                        let expr1_0: Type = I32;
 7149|      0|                        let expr2_0 = ExtendKind::Zero;
 7150|      0|                        let expr3_0 = constructor_extend_to_gpr(ctx, pattern6_1, expr1_0, &expr2_0)?;
 7151|      0|                        let expr4_0 = constructor_x64_popcnt(ctx, expr0_0, expr3_0)?;
 7152|      0|                        let expr5_0 = constructor_output_gpr(ctx, expr4_0)?;
 7153|      0|                        return Some(expr5_0);
 7154|      4|                    }
 7155|      0|                }
 7156|      0|            }
 7157|  40.1k|        }
 7158|   118k|    }
 7159|   158k|    let pattern0_0 = arg0;
 7160|   158k|    if let Some(pattern1_0) = C::first_result(ctx, pattern0_0) {
 7161|  40.1k|        let pattern2_0 = C::value_type(ctx, pattern1_0);
 7162|  40.1k|        if pattern2_0 == B1 {
 7163|    156|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 7164|    156|            if let &InstructionData::IntCompare { opcode: ref pattern5_0, args: ref pattern5_1, cond: ref pattern5_2 } = &pattern4_0 {
 7165|    156|                if let &Opcode::Icmp  = pattern5_0 {
 7166|    156|                    let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7167|    156|                    if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
 7168|    156|                        let pattern9_0 = C::inst_data(ctx, pattern8_0);
 7169|    156|                        if let &InstructionData::UnaryImm { opcode: ref pattern10_0, imm: pattern10_1 } = &pattern9_0 {
 7170|      8|                            if let &Opcode::Iconst  = pattern10_0 {
 7171|      8|                                let pattern12_0 = C::u64_from_imm64(ctx, pattern10_1);
 7172|      8|                                if pattern12_0 == 0i128 as u64  {
 7173|      0|                                    let pattern14_0 = C::value_type(ctx, pattern7_1);
 7174|      0|                                    if pattern14_0 == I32 {
 7175|      0|                                        match pattern5_2 {
 7176|       |                                            &IntCC::SignedGreaterThan  => {
 7177|       |                                                // Rule at src/isa/x64/lower.isle line 1473.
 7178|      0|                                                let expr0_0: Type = I32;
 7179|      0|                                                let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 7180|      0|                                                let expr2_0: u8 = 31i128 as u8;
 7181|      0|                                                let expr3_0 = Imm8Reg::Imm8 {
 7182|      0|                                                    imm: expr2_0,
 7183|      0|                                                };
 7184|      0|                                                let expr4_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr3_0);
 7185|      0|                                                let expr5_0 = constructor_x64_shr(ctx, expr0_0, expr1_0, &expr4_0)?;
 7186|      0|                                                let expr6_0 = constructor_output_gpr(ctx, expr5_0)?;
 7187|      0|                                                return Some(expr6_0);
 7188|       |                                            }
 7189|       |                                            &IntCC::SignedLessThanOrEqual  => {
 7190|       |                                                // Rule at src/isa/x64/lower.isle line 1477.
 7191|      0|                                                let expr0_0: Type = I32;
 7192|      0|                                                let expr1_0: Type = I64;
 7193|      0|                                                let expr2_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 7194|      0|                                                let expr3_0 = constructor_x64_not(ctx, expr1_0, expr2_0)?;
 7195|      0|                                                let expr4_0: u8 = 31i128 as u8;
 7196|      0|                                                let expr5_0 = Imm8Reg::Imm8 {
 7197|      0|                                                    imm: expr4_0,
 7198|      0|                                                };
 7199|      0|                                                let expr6_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr5_0);
 7200|      0|                                                let expr7_0 = constructor_x64_shr(ctx, expr0_0, expr3_0, &expr6_0)?;
 7201|      0|                                                let expr8_0 = constructor_output_gpr(ctx, expr7_0)?;
 7202|      0|                                                return Some(expr8_0);
 7203|       |                                            }
 7204|      0|                                            _ => {}
 7205|       |                                        }
 7206|      0|                                    }
 7207|      0|                                    if pattern14_0 == I64 {
 7208|      0|                                        match pattern5_2 {
 7209|       |                                            &IntCC::SignedGreaterThan  => {
 7210|       |                                                // Rule at src/isa/x64/lower.isle line 1457.
 7211|      0|                                                let expr0_0: Type = I64;
 7212|      0|                                                let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 7213|      0|                                                let expr2_0: u8 = 63i128 as u8;
 7214|      0|                                                let expr3_0 = Imm8Reg::Imm8 {
 7215|      0|                                                    imm: expr2_0,
 7216|      0|                                                };
 7217|      0|                                                let expr4_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr3_0);
 7218|      0|                                                let expr5_0 = constructor_x64_shr(ctx, expr0_0, expr1_0, &expr4_0)?;
 7219|      0|                                                let expr6_0 = constructor_output_gpr(ctx, expr5_0)?;
 7220|      0|                                                return Some(expr6_0);
 7221|       |                                            }
 7222|       |                                            &IntCC::SignedLessThanOrEqual  => {
 7223|       |                                                // Rule at src/isa/x64/lower.isle line 1461.
 7224|      0|                                                let expr0_0: Type = I64;
 7225|      0|                                                let expr1_0: Type = I64;
 7226|      0|                                                let expr2_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 7227|      0|                                                let expr3_0 = constructor_x64_not(ctx, expr1_0, expr2_0)?;
 7228|      0|                                                let expr4_0: u8 = 63i128 as u8;
 7229|      0|                                                let expr5_0 = Imm8Reg::Imm8 {
 7230|      0|                                                    imm: expr4_0,
 7231|      0|                                                };
 7232|      0|                                                let expr6_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr5_0);
 7233|      0|                                                let expr7_0 = constructor_x64_shr(ctx, expr0_0, expr3_0, &expr6_0)?;
 7234|      0|                                                let expr8_0 = constructor_output_gpr(ctx, expr7_0)?;
 7235|      0|                                                return Some(expr8_0);
 7236|       |                                            }
 7237|      0|                                            _ => {}
 7238|       |                                        }
 7239|      0|                                    }
 7240|      8|                                }
 7241|      0|                            }
 7242|    148|                        }
 7243|      0|                    }
 7244|    156|                    let pattern8_0 = C::value_type(ctx, pattern7_0);
 7245|    156|                    if pattern8_0 == I32 {
 7246|     68|                        if let Some(pattern10_0) = C::def_inst(ctx, pattern7_1) {
 7247|     68|                            let pattern11_0 = C::inst_data(ctx, pattern10_0);
 7248|     68|                            if let &InstructionData::UnaryImm { opcode: ref pattern12_0, imm: pattern12_1 } = &pattern11_0 {
 7249|     68|                                if let &Opcode::Iconst  = pattern12_0 {
 7250|     68|                                    let pattern14_0 = C::u64_from_imm64(ctx, pattern12_1);
 7251|     68|                                    if pattern14_0 == 0i128 as u64  {
 7252|     68|                                        match pattern5_2 {
 7253|       |                                            &IntCC::SignedGreaterThanOrEqual  => {
 7254|       |                                                // Rule at src/isa/x64/lower.isle line 1481.
 7255|      0|                                                let expr0_0: Type = I32;
 7256|      0|                                                let expr1_0: Type = I64;
 7257|      0|                                                let expr2_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
 7258|      0|                                                let expr3_0 = constructor_x64_not(ctx, expr1_0, expr2_0)?;
 7259|      0|                                                let expr4_0: u8 = 31i128 as u8;
 7260|      0|                                                let expr5_0 = Imm8Reg::Imm8 {
 7261|      0|                                                    imm: expr4_0,
 7262|      0|                                                };
 7263|      0|                                                let expr6_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr5_0);
 7264|      0|                                                let expr7_0 = constructor_x64_shr(ctx, expr0_0, expr3_0, &expr6_0)?;
 7265|      0|                                                let expr8_0 = constructor_output_gpr(ctx, expr7_0)?;
 7266|      0|                                                return Some(expr8_0);
 7267|       |                                            }
 7268|       |                                            &IntCC::SignedLessThan  => {
 7269|       |                                                // Rule at src/isa/x64/lower.isle line 1469.
 7270|      0|                                                let expr0_0: Type = I32;
 7271|      0|                                                let expr1_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
 7272|      0|                                                let expr2_0: u8 = 31i128 as u8;
 7273|      0|                                                let expr3_0 = Imm8Reg::Imm8 {
 7274|      0|                                                    imm: expr2_0,
 7275|      0|                                                };
 7276|      0|                                                let expr4_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr3_0);
 7277|      0|                                                let expr5_0 = constructor_x64_shr(ctx, expr0_0, expr1_0, &expr4_0)?;
 7278|      0|                                                let expr6_0 = constructor_output_gpr(ctx, expr5_0)?;
 7279|      0|                                                return Some(expr6_0);
 7280|       |                                            }
 7281|     68|                                            _ => {}
 7282|       |                                        }
 7283|      0|                                    }
 7284|      0|                                }
 7285|      0|                            }
 7286|      0|                        }
 7287|     88|                    }
 7288|    156|                    if pattern8_0 == I64 {
 7289|     88|                        if let Some(pattern10_0) = C::def_inst(ctx, pattern7_1) {
 7290|     88|                            let pattern11_0 = C::inst_data(ctx, pattern10_0);
 7291|     88|                            if let &InstructionData::UnaryImm { opcode: ref pattern12_0, imm: pattern12_1 } = &pattern11_0 {
 7292|     14|                                if let &Opcode::Iconst  = pattern12_0 {
 7293|     14|                                    let pattern14_0 = C::u64_from_imm64(ctx, pattern12_1);
 7294|     14|                                    if pattern14_0 == 0i128 as u64  {
 7295|     14|                                        match pattern5_2 {
 7296|       |                                            &IntCC::SignedGreaterThanOrEqual  => {
 7297|       |                                                // Rule at src/isa/x64/lower.isle line 1465.
 7298|      0|                                                let expr0_0: Type = I64;
 7299|      0|                                                let expr1_0: Type = I64;
 7300|      0|                                                let expr2_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
 7301|      0|                                                let expr3_0 = constructor_x64_not(ctx, expr1_0, expr2_0)?;
 7302|      0|                                                let expr4_0: u8 = 63i128 as u8;
 7303|      0|                                                let expr5_0 = Imm8Reg::Imm8 {
 7304|      0|                                                    imm: expr4_0,
 7305|      0|                                                };
 7306|      0|                                                let expr6_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr5_0);
 7307|      0|                                                let expr7_0 = constructor_x64_shr(ctx, expr0_0, expr3_0, &expr6_0)?;
 7308|      0|                                                let expr8_0 = constructor_output_gpr(ctx, expr7_0)?;
 7309|      0|                                                return Some(expr8_0);
 7310|       |                                            }
 7311|       |                                            &IntCC::SignedLessThan  => {
 7312|       |                                                // Rule at src/isa/x64/lower.isle line 1453.
 7313|      0|                                                let expr0_0: Type = I64;
 7314|      0|                                                let expr1_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
 7315|      0|                                                let expr2_0: u8 = 63i128 as u8;
 7316|      0|                                                let expr3_0 = Imm8Reg::Imm8 {
 7317|      0|                                                    imm: expr2_0,
 7318|      0|                                                };
 7319|      0|                                                let expr4_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr3_0);
 7320|      0|                                                let expr5_0 = constructor_x64_shr(ctx, expr0_0, expr1_0, &expr4_0)?;
 7321|      0|                                                let expr6_0 = constructor_output_gpr(ctx, expr5_0)?;
 7322|      0|                                                return Some(expr6_0);
 7323|       |                                            }
 7324|     14|                                            _ => {}
 7325|       |                                        }
 7326|      0|                                    }
 7327|      0|                                }
 7328|     74|                            }
 7329|      0|                        }
 7330|     68|                    }
 7331|      0|                }
 7332|      0|            }
 7333|  39.9k|        }
 7334|  40.1k|        if pattern2_0 == B128 {
 7335|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 7336|      0|            match &pattern4_0 {
 7337|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 7338|      0|                    if let &Opcode::Bnot  = pattern5_0 {
 7339|       |                        // Rule at src/isa/x64/lower.isle line 1243.
 7340|      0|                        let expr0_0 = constructor_i128_not(ctx, pattern5_1)?;
 7341|      0|                        let expr1_0 = C::output(ctx, expr0_0);
 7342|      0|                        return Some(expr1_0);
 7343|      0|                    }
 7344|       |                }
 7345|      0|                &InstructionData::UnaryBool { opcode: ref pattern5_0, imm: pattern5_1 } => {
 7346|      0|                    if let &Opcode::Bconst  = pattern5_0 {
 7347|      0|                        if pattern5_1 == true {
 7348|       |                            // Rule at src/isa/x64/lower.isle line 44.
 7349|      0|                            let expr0_0: Type = B64;
 7350|      0|                            let expr1_0: u64 = 1i128 as u64;
 7351|      0|                            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 7352|      0|                            let expr3_0: Type = B64;
 7353|      0|                            let expr4_0: u64 = 0i128 as u64;
 7354|      0|                            let expr5_0 = constructor_imm(ctx, expr3_0, expr4_0)?;
 7355|      0|                            let expr6_0 = C::value_regs(ctx, expr2_0, expr5_0);
 7356|      0|                            let expr7_0 = C::output(ctx, expr6_0);
 7357|      0|                            return Some(expr7_0);
 7358|      0|                        }
 7359|      0|                        if pattern5_1 == false {
 7360|       |                            // Rule at src/isa/x64/lower.isle line 39.
 7361|      0|                            let expr0_0: Type = B64;
 7362|      0|                            let expr1_0: u64 = 0i128 as u64;
 7363|      0|                            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 7364|      0|                            let expr3_0: Type = B64;
 7365|      0|                            let expr4_0: u64 = 0i128 as u64;
 7366|      0|                            let expr5_0 = constructor_imm(ctx, expr3_0, expr4_0)?;
 7367|      0|                            let expr6_0 = C::value_regs(ctx, expr2_0, expr5_0);
 7368|      0|                            let expr7_0 = C::output(ctx, expr6_0);
 7369|      0|                            return Some(expr7_0);
 7370|      0|                        }
 7371|      0|                    }
 7372|       |                }
 7373|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 7374|      0|                    match pattern5_0 {
 7375|       |                        &Opcode::Band  => {
 7376|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7377|      0|                            // Rule at src/isa/x64/lower.isle line 318.
 7378|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7379|      0|                            let expr1_0: usize = 0i128 as usize;
 7380|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7381|      0|                            let expr3_0: usize = 1i128 as usize;
 7382|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7383|      0|                            let expr5_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7384|      0|                            let expr6_0: Type = I64;
 7385|      0|                            let expr7_0 = C::gpr_to_gpr_mem_imm(ctx, expr5_0);
 7386|      0|                            let expr8_0 = constructor_x64_and(ctx, expr6_0, expr2_0, &expr7_0)?;
 7387|      0|                            let expr9_0 = constructor_value_gprs(ctx, expr8_0, expr4_0)?;
 7388|      0|                            let expr10_0 = C::output(ctx, expr9_0);
 7389|      0|                            return Some(expr10_0);
 7390|       |                        }
 7391|       |                        &Opcode::Bor  => {
 7392|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7393|      0|                            // Rule at src/isa/x64/lower.isle line 384.
 7394|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7395|      0|                            let expr1_0: usize = 0i128 as usize;
 7396|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7397|      0|                            let expr3_0: usize = 1i128 as usize;
 7398|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7399|      0|                            let expr5_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7400|      0|                            let expr6_0: Type = I64;
 7401|      0|                            let expr7_0 = C::gpr_to_gpr_mem_imm(ctx, expr5_0);
 7402|      0|                            let expr8_0 = constructor_x64_or(ctx, expr6_0, expr2_0, &expr7_0)?;
 7403|      0|                            let expr9_0 = constructor_value_gprs(ctx, expr8_0, expr4_0)?;
 7404|      0|                            let expr10_0 = C::output(ctx, expr9_0);
 7405|      0|                            return Some(expr10_0);
 7406|       |                        }
 7407|       |                        &Opcode::Bxor  => {
 7408|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7409|      0|                            // Rule at src/isa/x64/lower.isle line 442.
 7410|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7411|      0|                            let expr1_0: usize = 0i128 as usize;
 7412|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7413|      0|                            let expr3_0: usize = 1i128 as usize;
 7414|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7415|      0|                            let expr5_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7416|      0|                            let expr6_0: Type = I64;
 7417|      0|                            let expr7_0 = C::gpr_to_gpr_mem_imm(ctx, expr5_0);
 7418|      0|                            let expr8_0 = constructor_x64_xor(ctx, expr6_0, expr2_0, &expr7_0)?;
 7419|      0|                            let expr9_0 = constructor_value_gprs(ctx, expr8_0, expr4_0)?;
 7420|      0|                            let expr10_0 = C::output(ctx, expr9_0);
 7421|      0|                            return Some(expr10_0);
 7422|       |                        }
 7423|      0|                        _ => {}
 7424|       |                    }
 7425|       |                }
 7426|      0|                _ => {}
 7427|       |            }
 7428|  40.1k|        }
 7429|  40.1k|        if pattern2_0 == I8 {
 7430|      2|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 7431|      2|            if let &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } = &pattern4_0 {
 7432|      2|                if let &Opcode::Bitrev  = pattern5_0 {
 7433|       |                    // Rule at src/isa/x64/lower.isle line 1968.
 7434|      0|                    let expr0_0: Type = I32;
 7435|      0|                    let expr1_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
 7436|      0|                    let expr2_0 = constructor_do_bitrev8(ctx, expr0_0, expr1_0)?;
 7437|      0|                    let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
 7438|      0|                    return Some(expr3_0);
 7439|      2|                }
 7440|      0|            }
 7441|  40.1k|        }
 7442|  40.1k|        if pattern2_0 == I16 {
 7443|      2|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 7444|      2|            if let &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } = &pattern4_0 {
 7445|      2|                if let &Opcode::Bitrev  = pattern5_0 {
 7446|       |                    // Rule at src/isa/x64/lower.isle line 1971.
 7447|      0|                    let expr0_0: Type = I32;
 7448|      0|                    let expr1_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
 7449|      0|                    let expr2_0 = constructor_do_bitrev16(ctx, expr0_0, expr1_0)?;
 7450|      0|                    let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
 7451|      0|                    return Some(expr3_0);
 7452|      2|                }
 7453|      0|            }
 7454|  40.1k|        }
 7455|  40.1k|        if pattern2_0 == I32 {
 7456|  24.3k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 7457|  24.3k|            if let &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } = &pattern4_0 {
 7458|    524|                match pattern5_0 {
 7459|       |                    &Opcode::Bitrev  => {
 7460|       |                        // Rule at src/isa/x64/lower.isle line 1974.
 7461|      0|                        let expr0_0: Type = I32;
 7462|      0|                        let expr1_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
 7463|      0|                        let expr2_0 = constructor_do_bitrev32(ctx, expr0_0, expr1_0)?;
 7464|      0|                        let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
 7465|      0|                        return Some(expr3_0);
 7466|       |                    }
 7467|       |                    &Opcode::Bitcast  => {
 7468|      4|                        let pattern7_0 = C::value_type(ctx, pattern5_1);
 7469|      4|                        if pattern7_0 == F32 {
 7470|       |                            // Rule at src/isa/x64/lower.isle line 3307.
 7471|      4|                            let expr0_0: Type = F32;
 7472|      4|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 7473|      4|                            let expr2_0 = constructor_bitcast_xmm_to_gpr(ctx, expr0_0, expr1_0)?;
 7474|      4|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
 7475|      4|                            return Some(expr3_0);
 7476|      0|                        }
 7477|       |                    }
 7478|    520|                    _ => {}
 7479|       |                }
 7480|  23.8k|            }
 7481|  15.7k|        }
 7482|  40.1k|        if pattern2_0 == I64 {
 7483|  15.3k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 7484|  15.3k|            match &pattern4_0 {
 7485|    732|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 7486|    732|                    match pattern5_0 {
 7487|       |                        &Opcode::Bitrev  => {
 7488|       |                            // Rule at src/isa/x64/lower.isle line 1977.
 7489|      0|                            let expr0_0: Type = I64;
 7490|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
 7491|      0|                            let expr2_0 = constructor_do_bitrev64(ctx, expr0_0, expr1_0)?;
 7492|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
 7493|      0|                            return Some(expr3_0);
 7494|       |                        }
 7495|       |                        &Opcode::Bitcast  => {
 7496|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 7497|      0|                            if pattern7_0 == F64 {
 7498|       |                                // Rule at src/isa/x64/lower.isle line 3313.
 7499|      0|                                let expr0_0: Type = F64;
 7500|      0|                                let expr1_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 7501|      0|                                let expr2_0 = constructor_bitcast_xmm_to_gpr(ctx, expr0_0, expr1_0)?;
 7502|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
 7503|      0|                                return Some(expr3_0);
 7504|      0|                            }
 7505|       |                        }
 7506|       |                        &Opcode::Uextend  => {
 7507|    504|                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
 7508|    446|                                if let Some(pattern8_0) = C::first_result(ctx, pattern7_0) {
 7509|    446|                                    let pattern9_0 = C::value_type(ctx, pattern8_0);
 7510|    446|                                    if pattern9_0 == I32 {
 7511|    446|                                        let pattern11_0 = C::inst_data(ctx, pattern7_0);
 7512|    446|                                        match &pattern11_0 {
 7513|     80|                                            &InstructionData::Load { opcode: ref pattern12_0, arg: pattern12_1, flags: pattern12_2, offset: pattern12_3 } => {
 7514|     80|                                                if let &Opcode::Uload32  = pattern12_0 {
 7515|       |                                                    // Rule at src/isa/x64/lower.isle line 2120.
 7516|      0|                                                    let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7517|      0|                                                    return Some(expr0_0);
 7518|     80|                                                }
 7519|       |                                            }
 7520|      0|                                            &InstructionData::Binary { opcode: ref pattern12_0, args: ref pattern12_1 } => {
 7521|      0|                                                match pattern12_0 {
 7522|       |                                                    &Opcode::Iadd  => {
 7523|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7524|       |                                                        // Rule at src/isa/x64/lower.isle line 2093.
 7525|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7526|      0|                                                        return Some(expr0_0);
 7527|       |                                                    }
 7528|       |                                                    &Opcode::Isub  => {
 7529|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7530|       |                                                        // Rule at src/isa/x64/lower.isle line 2099.
 7531|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7532|      0|                                                        return Some(expr0_0);
 7533|       |                                                    }
 7534|       |                                                    &Opcode::Imul  => {
 7535|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7536|       |                                                        // Rule at src/isa/x64/lower.isle line 2102.
 7537|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7538|      0|                                                        return Some(expr0_0);
 7539|       |                                                    }
 7540|       |                                                    &Opcode::IaddIfcout  => {
 7541|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7542|       |                                                        // Rule at src/isa/x64/lower.isle line 2096.
 7543|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7544|      0|                                                        return Some(expr0_0);
 7545|       |                                                    }
 7546|       |                                                    &Opcode::Band  => {
 7547|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7548|       |                                                        // Rule at src/isa/x64/lower.isle line 2105.
 7549|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7550|      0|                                                        return Some(expr0_0);
 7551|       |                                                    }
 7552|       |                                                    &Opcode::Bor  => {
 7553|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7554|       |                                                        // Rule at src/isa/x64/lower.isle line 2108.
 7555|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7556|      0|                                                        return Some(expr0_0);
 7557|       |                                                    }
 7558|       |                                                    &Opcode::Bxor  => {
 7559|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7560|       |                                                        // Rule at src/isa/x64/lower.isle line 2111.
 7561|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7562|      0|                                                        return Some(expr0_0);
 7563|       |                                                    }
 7564|       |                                                    &Opcode::Ishl  => {
 7565|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7566|       |                                                        // Rule at src/isa/x64/lower.isle line 2114.
 7567|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7568|      0|                                                        return Some(expr0_0);
 7569|       |                                                    }
 7570|       |                                                    &Opcode::Ushr  => {
 7571|      0|                                                        let (pattern14_0, pattern14_1) = C::unpack_value_array_2(ctx, pattern12_1);
 7572|       |                                                        // Rule at src/isa/x64/lower.isle line 2117.
 7573|      0|                                                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
 7574|      0|                                                        return Some(expr0_0);
 7575|       |                                                    }
 7576|      0|                                                    _ => {}
 7577|       |                                                }
 7578|       |                                            }
 7579|    366|                                            _ => {}
 7580|       |                                        }
 7581|      0|                                    }
 7582|      0|                                }
 7583|     58|                            }
 7584|    504|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 7585|    504|                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
 7586|       |                                // Rule at src/isa/x64/lower.isle line 2075.
 7587|    504|                                let expr0_0: Type = I64;
 7588|    504|                                let expr1_0 = ExtendKind::Zero;
 7589|    504|                                let expr2_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr0_0, &expr1_0)?;
 7590|    504|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
 7591|    504|                                return Some(expr3_0);
 7592|      0|                            }
 7593|       |                        }
 7594|    228|                        _ => {}
 7595|       |                    }
 7596|       |                }
 7597|      0|                &InstructionData::LoadNoOffset { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2 } => {
 7598|      0|                    if let &Opcode::AtomicLoad  = pattern5_0 {
 7599|       |                        // Rule at src/isa/x64/lower.isle line 2789.
 7600|      0|                        let expr0_0 = C::zero_offset(ctx, );
 7601|      0|                        let expr1_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, expr0_0)?;
 7602|      0|                        let expr2_0 = constructor_x64_mov(ctx, &expr1_0)?;
 7603|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
 7604|      0|                        return Some(expr3_0);
 7605|      0|                    }
 7606|       |                }
 7607|  14.5k|                _ => {}
 7608|       |            }
 7609|  24.8k|        }
 7610|  39.6k|        if pattern2_0 == I128 {
 7611|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 7612|      0|            match &pattern4_0 {
 7613|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 7614|      0|                    match pattern5_0 {
 7615|       |                        &Opcode::Bnot  => {
 7616|       |                            // Rule at src/isa/x64/lower.isle line 1240.
 7617|      0|                            let expr0_0 = constructor_i128_not(ctx, pattern5_1)?;
 7618|      0|                            let expr1_0 = C::output(ctx, expr0_0);
 7619|      0|                            return Some(expr1_0);
 7620|       |                        }
 7621|       |                        &Opcode::Bitrev  => {
 7622|       |                            // Rule at src/isa/x64/lower.isle line 1980.
 7623|      0|                            let expr0_0: Type = I64;
 7624|      0|                            let expr1_0 = C::put_in_regs(ctx, pattern5_1);
 7625|      0|                            let expr2_0: usize = 1i128 as usize;
 7626|      0|                            let expr3_0 = constructor_value_regs_get_gpr(ctx, expr1_0, expr2_0)?;
 7627|      0|                            let expr4_0 = constructor_do_bitrev64(ctx, expr0_0, expr3_0)?;
 7628|      0|                            let expr5_0 = C::gpr_to_reg(ctx, expr4_0);
 7629|      0|                            let expr6_0: Type = I64;
 7630|      0|                            let expr7_0 = C::put_in_regs(ctx, pattern5_1);
 7631|      0|                            let expr8_0: usize = 0i128 as usize;
 7632|      0|                            let expr9_0 = constructor_value_regs_get_gpr(ctx, expr7_0, expr8_0)?;
 7633|      0|                            let expr10_0 = constructor_do_bitrev64(ctx, expr6_0, expr9_0)?;
 7634|      0|                            let expr11_0 = C::gpr_to_reg(ctx, expr10_0);
 7635|      0|                            let expr12_0 = C::value_regs(ctx, expr5_0, expr11_0);
 7636|      0|                            let expr13_0 = C::output(ctx, expr12_0);
 7637|      0|                            return Some(expr13_0);
 7638|       |                        }
 7639|       |                        &Opcode::Clz  => {
 7640|       |                            // Rule at src/isa/x64/lower.isle line 1750.
 7641|      0|                            let expr0_0: Type = I64;
 7642|      0|                            let expr1_0: Type = I64;
 7643|      0|                            let expr2_0 = C::put_in_regs(ctx, pattern5_1);
 7644|      0|                            let expr3_0: usize = 1i128 as usize;
 7645|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr2_0, expr3_0)?;
 7646|      0|                            let expr5_0 = constructor_do_clz(ctx, expr0_0, expr1_0, expr4_0)?;
 7647|      0|                            let expr6_0: Type = I64;
 7648|      0|                            let expr7_0: Type = I64;
 7649|      0|                            let expr8_0: Type = I64;
 7650|      0|                            let expr9_0 = C::put_in_regs(ctx, pattern5_1);
 7651|      0|                            let expr10_0: usize = 0i128 as usize;
 7652|      0|                            let expr11_0 = constructor_value_regs_get_gpr(ctx, expr9_0, expr10_0)?;
 7653|      0|                            let expr12_0 = constructor_do_clz(ctx, expr7_0, expr8_0, expr11_0)?;
 7654|      0|                            let expr13_0: u32 = 64i128 as u32;
 7655|      0|                            let expr14_0 = RegMemImm::Imm {
 7656|      0|                                simm32: expr13_0,
 7657|      0|                            };
 7658|      0|                            let expr15_0 = C::gpr_mem_imm_new(ctx, &expr14_0);
 7659|      0|                            let expr16_0 = constructor_x64_add(ctx, expr6_0, expr12_0, &expr15_0)?;
 7660|      0|                            let expr17_0 = OperandSize::Size64;
 7661|      0|                            let expr18_0: u32 = 64i128 as u32;
 7662|      0|                            let expr19_0 = constructor_x64_cmp_imm(ctx, &expr17_0, expr18_0, expr5_0)?;
 7663|      0|                            let expr20_0: Type = I64;
 7664|      0|                            let expr21_0 = CC::NZ;
 7665|      0|                            let expr22_0 = C::gpr_to_gpr_mem(ctx, expr5_0);
 7666|      0|                            let expr23_0 = constructor_cmove(ctx, expr20_0, &expr21_0, &expr22_0, expr16_0)?;
 7667|      0|                            let expr24_0 = constructor_with_flags_reg(ctx, &expr19_0, &expr23_0)?;
 7668|      0|                            let expr25_0 = C::gpr_new(ctx, expr24_0);
 7669|      0|                            let expr26_0 = C::gpr_to_reg(ctx, expr25_0);
 7670|      0|                            let expr27_0: Type = I64;
 7671|      0|                            let expr28_0: u64 = 0i128 as u64;
 7672|      0|                            let expr29_0 = constructor_imm(ctx, expr27_0, expr28_0)?;
 7673|      0|                            let expr30_0 = C::value_regs(ctx, expr26_0, expr29_0);
 7674|      0|                            let expr31_0 = C::output(ctx, expr30_0);
 7675|      0|                            return Some(expr31_0);
 7676|       |                        }
 7677|       |                        &Opcode::Ctz  => {
 7678|       |                            // Rule at src/isa/x64/lower.isle line 1792.
 7679|      0|                            let expr0_0: Type = I64;
 7680|      0|                            let expr1_0: Type = I64;
 7681|      0|                            let expr2_0 = C::put_in_regs(ctx, pattern5_1);
 7682|      0|                            let expr3_0: usize = 0i128 as usize;
 7683|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr2_0, expr3_0)?;
 7684|      0|                            let expr5_0 = constructor_do_ctz(ctx, expr0_0, expr1_0, expr4_0)?;
 7685|      0|                            let expr6_0: Type = I64;
 7686|      0|                            let expr7_0: Type = I64;
 7687|      0|                            let expr8_0: Type = I64;
 7688|      0|                            let expr9_0 = C::put_in_regs(ctx, pattern5_1);
 7689|      0|                            let expr10_0: usize = 1i128 as usize;
 7690|      0|                            let expr11_0 = constructor_value_regs_get_gpr(ctx, expr9_0, expr10_0)?;
 7691|      0|                            let expr12_0 = constructor_do_ctz(ctx, expr7_0, expr8_0, expr11_0)?;
 7692|      0|                            let expr13_0: u32 = 64i128 as u32;
 7693|      0|                            let expr14_0 = RegMemImm::Imm {
 7694|      0|                                simm32: expr13_0,
 7695|      0|                            };
 7696|      0|                            let expr15_0 = C::gpr_mem_imm_new(ctx, &expr14_0);
 7697|      0|                            let expr16_0 = constructor_x64_add(ctx, expr6_0, expr12_0, &expr15_0)?;
 7698|      0|                            let expr17_0 = OperandSize::Size64;
 7699|      0|                            let expr18_0: u32 = 64i128 as u32;
 7700|      0|                            let expr19_0 = constructor_x64_cmp_imm(ctx, &expr17_0, expr18_0, expr5_0)?;
 7701|      0|                            let expr20_0: Type = I64;
 7702|      0|                            let expr21_0 = CC::Z;
 7703|      0|                            let expr22_0 = C::gpr_to_gpr_mem(ctx, expr16_0);
 7704|      0|                            let expr23_0 = constructor_cmove(ctx, expr20_0, &expr21_0, &expr22_0, expr5_0)?;
 7705|      0|                            let expr24_0 = constructor_with_flags_reg(ctx, &expr19_0, &expr23_0)?;
 7706|      0|                            let expr25_0 = C::gpr_new(ctx, expr24_0);
 7707|      0|                            let expr26_0 = C::gpr_to_reg(ctx, expr25_0);
 7708|      0|                            let expr27_0: Type = I64;
 7709|      0|                            let expr28_0: u64 = 0i128 as u64;
 7710|      0|                            let expr29_0 = constructor_imm(ctx, expr27_0, expr28_0)?;
 7711|      0|                            let expr30_0 = C::value_regs(ctx, expr26_0, expr29_0);
 7712|      0|                            let expr31_0 = C::output(ctx, expr30_0);
 7713|      0|                            return Some(expr31_0);
 7714|       |                        }
 7715|       |                        &Opcode::Popcnt  => {
 7716|       |                            // Rule at src/isa/x64/lower.isle line 1844.
 7717|      0|                            let expr0_0: Type = I64;
 7718|      0|                            let expr1_0 = C::put_in_regs(ctx, pattern5_1);
 7719|      0|                            let expr2_0: usize = 0i128 as usize;
 7720|      0|                            let expr3_0 = constructor_value_regs_get_gpr(ctx, expr1_0, expr2_0)?;
 7721|      0|                            let expr4_0 = constructor_do_popcnt(ctx, expr0_0, expr3_0)?;
 7722|      0|                            let expr5_0: Type = I64;
 7723|      0|                            let expr6_0 = C::put_in_regs(ctx, pattern5_1);
 7724|      0|                            let expr7_0: usize = 1i128 as usize;
 7725|      0|                            let expr8_0 = constructor_value_regs_get_gpr(ctx, expr6_0, expr7_0)?;
 7726|      0|                            let expr9_0 = constructor_do_popcnt(ctx, expr5_0, expr8_0)?;
 7727|      0|                            let expr10_0: Type = I64;
 7728|      0|                            let expr11_0 = C::gpr_to_gpr_mem_imm(ctx, expr9_0);
 7729|      0|                            let expr12_0 = constructor_x64_add(ctx, expr10_0, expr4_0, &expr11_0)?;
 7730|      0|                            let expr13_0 = C::gpr_to_reg(ctx, expr12_0);
 7731|      0|                            let expr14_0: Type = I64;
 7732|      0|                            let expr15_0: u64 = 0i128 as u64;
 7733|      0|                            let expr16_0 = constructor_imm(ctx, expr14_0, expr15_0)?;
 7734|      0|                            let expr17_0 = C::value_regs(ctx, expr13_0, expr16_0);
 7735|      0|                            let expr18_0 = C::output(ctx, expr17_0);
 7736|      0|                            return Some(expr18_0);
 7737|       |                        }
 7738|       |                        &Opcode::Bint  => {
 7739|       |                            // Rule at src/isa/x64/lower.isle line 2195.
 7740|      0|                            let expr0_0: Type = I64;
 7741|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
 7742|      0|                            let expr2_0: u32 = 1i128 as u32;
 7743|      0|                            let expr3_0 = RegMemImm::Imm {
 7744|      0|                                simm32: expr2_0,
 7745|      0|                            };
 7746|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 7747|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 7748|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 7749|      0|                            let expr7_0: Type = I64;
 7750|      0|                            let expr8_0: u64 = 0i128 as u64;
 7751|      0|                            let expr9_0 = constructor_imm(ctx, expr7_0, expr8_0)?;
 7752|      0|                            let expr10_0 = C::value_regs(ctx, expr6_0, expr9_0);
 7753|      0|                            let expr11_0 = C::output(ctx, expr10_0);
 7754|      0|                            return Some(expr11_0);
 7755|       |                        }
 7756|       |                        &Opcode::Uextend  => {
 7757|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 7758|      0|                            if pattern7_0 == I64 {
 7759|       |                                // Rule at src/isa/x64/lower.isle line 2067.
 7760|      0|                                let expr0_0 = C::put_in_reg(ctx, pattern5_1);
 7761|      0|                                let expr1_0: Type = I64;
 7762|      0|                                let expr2_0: u64 = 0i128 as u64;
 7763|      0|                                let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
 7764|      0|                                let expr4_0 = C::value_regs(ctx, expr0_0, expr3_0);
 7765|      0|                                let expr5_0 = C::output(ctx, expr4_0);
 7766|      0|                                return Some(expr5_0);
 7767|      0|                            }
 7768|      0|                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
 7769|       |                                // Rule at src/isa/x64/lower.isle line 2071.
 7770|      0|                                let expr0_0: Type = I64;
 7771|      0|                                let expr1_0 = ExtendKind::Zero;
 7772|      0|                                let expr2_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr0_0, &expr1_0)?;
 7773|      0|                                let expr3_0 = C::gpr_to_reg(ctx, expr2_0);
 7774|      0|                                let expr4_0: Type = I64;
 7775|      0|                                let expr5_0: u64 = 0i128 as u64;
 7776|      0|                                let expr6_0 = constructor_imm(ctx, expr4_0, expr5_0)?;
 7777|      0|                                let expr7_0 = C::value_regs(ctx, expr3_0, expr6_0);
 7778|      0|                                let expr8_0 = C::output(ctx, expr7_0);
 7779|      0|                                return Some(expr8_0);
 7780|      0|                            }
 7781|       |                        }
 7782|      0|                        _ => {}
 7783|       |                    }
 7784|       |                }
 7785|      0|                &InstructionData::UnaryImm { opcode: ref pattern5_0, imm: pattern5_1 } => {
 7786|      0|                    if let &Opcode::Iconst  = pattern5_0 {
 7787|      0|                        let pattern7_0 = C::u64_from_imm64(ctx, pattern5_1);
 7788|      0|                        // Rule at src/isa/x64/lower.isle line 20.
 7789|      0|                        let expr0_0: Type = I64;
 7790|      0|                        let expr1_0 = constructor_imm(ctx, expr0_0, pattern7_0)?;
 7791|      0|                        let expr2_0: Type = I64;
 7792|      0|                        let expr3_0: u64 = 0i128 as u64;
 7793|      0|                        let expr4_0 = constructor_imm(ctx, expr2_0, expr3_0)?;
 7794|      0|                        let expr5_0 = C::value_regs(ctx, expr1_0, expr4_0);
 7795|      0|                        let expr6_0 = C::output(ctx, expr5_0);
 7796|      0|                        return Some(expr6_0);
 7797|      0|                    }
 7798|       |                }
 7799|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 7800|      0|                    match pattern5_0 {
 7801|       |                        &Opcode::Iadd  => {
 7802|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7803|      0|                            // Rule at src/isa/x64/lower.isle line 116.
 7804|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7805|      0|                            let expr1_0: usize = 0i128 as usize;
 7806|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7807|      0|                            let expr3_0: usize = 1i128 as usize;
 7808|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7809|      0|                            let expr5_0 = C::put_in_regs(ctx, pattern7_1);
 7810|      0|                            let expr6_0: usize = 0i128 as usize;
 7811|      0|                            let expr7_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr6_0)?;
 7812|      0|                            let expr8_0: usize = 1i128 as usize;
 7813|      0|                            let expr9_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr8_0)?;
 7814|      0|                            let expr10_0: Type = I64;
 7815|      0|                            let expr11_0 = C::gpr_to_gpr_mem_imm(ctx, expr7_0);
 7816|      0|                            let expr12_0 = constructor_x64_add_with_flags_paired(ctx, expr10_0, expr2_0, &expr11_0)?;
 7817|      0|                            let expr13_0: Type = I64;
 7818|      0|                            let expr14_0 = C::gpr_to_gpr_mem_imm(ctx, expr9_0);
 7819|      0|                            let expr15_0 = constructor_x64_adc_paired(ctx, expr13_0, expr4_0, &expr14_0)?;
 7820|      0|                            let expr16_0 = constructor_with_flags(ctx, &expr12_0, &expr15_0)?;
 7821|      0|                            let expr17_0 = C::output(ctx, expr16_0);
 7822|      0|                            return Some(expr17_0);
 7823|       |                        }
 7824|       |                        &Opcode::Isub  => {
 7825|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7826|      0|                            // Rule at src/isa/x64/lower.isle line 231.
 7827|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7828|      0|                            let expr1_0: usize = 0i128 as usize;
 7829|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7830|      0|                            let expr3_0: usize = 1i128 as usize;
 7831|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7832|      0|                            let expr5_0 = C::put_in_regs(ctx, pattern7_1);
 7833|      0|                            let expr6_0: usize = 0i128 as usize;
 7834|      0|                            let expr7_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr6_0)?;
 7835|      0|                            let expr8_0: usize = 1i128 as usize;
 7836|      0|                            let expr9_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr8_0)?;
 7837|      0|                            let expr10_0: Type = I64;
 7838|      0|                            let expr11_0 = C::gpr_to_gpr_mem_imm(ctx, expr7_0);
 7839|      0|                            let expr12_0 = constructor_x64_sub_with_flags_paired(ctx, expr10_0, expr2_0, &expr11_0)?;
 7840|      0|                            let expr13_0: Type = I64;
 7841|      0|                            let expr14_0 = C::gpr_to_gpr_mem_imm(ctx, expr9_0);
 7842|      0|                            let expr15_0 = constructor_x64_sbb_paired(ctx, expr13_0, expr4_0, &expr14_0)?;
 7843|      0|                            let expr16_0 = constructor_with_flags(ctx, &expr12_0, &expr15_0)?;
 7844|      0|                            let expr17_0 = C::output(ctx, expr16_0);
 7845|      0|                            return Some(expr17_0);
 7846|       |                        }
 7847|       |                        &Opcode::Imul  => {
 7848|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7849|      0|                            // Rule at src/isa/x64/lower.isle line 907.
 7850|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7851|      0|                            let expr1_0: usize = 0i128 as usize;
 7852|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7853|      0|                            let expr3_0: usize = 1i128 as usize;
 7854|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7855|      0|                            let expr5_0 = C::put_in_regs(ctx, pattern7_1);
 7856|      0|                            let expr6_0: usize = 0i128 as usize;
 7857|      0|                            let expr7_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr6_0)?;
 7858|      0|                            let expr8_0: usize = 1i128 as usize;
 7859|      0|                            let expr9_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr8_0)?;
 7860|      0|                            let expr10_0: Type = I64;
 7861|      0|                            let expr11_0 = C::gpr_to_gpr_mem_imm(ctx, expr9_0);
 7862|      0|                            let expr12_0 = constructor_x64_mul(ctx, expr10_0, expr2_0, &expr11_0)?;
 7863|      0|                            let expr13_0: Type = I64;
 7864|      0|                            let expr14_0 = C::gpr_to_gpr_mem_imm(ctx, expr7_0);
 7865|      0|                            let expr15_0 = constructor_x64_mul(ctx, expr13_0, expr4_0, &expr14_0)?;
 7866|      0|                            let expr16_0: Type = I64;
 7867|      0|                            let expr17_0 = C::gpr_to_gpr_mem_imm(ctx, expr15_0);
 7868|      0|                            let expr18_0 = constructor_x64_add(ctx, expr16_0, expr12_0, &expr17_0)?;
 7869|      0|                            let expr19_0: Type = I64;
 7870|      0|                            let expr20_0 = C::gpr_to_gpr_mem(ctx, expr7_0);
 7871|      0|                            let expr21_0 = constructor_mulhi_u(ctx, expr19_0, expr2_0, &expr20_0)?;
 7872|      0|                            let expr22_0: usize = 0i128 as usize;
 7873|      0|                            let expr23_0 = constructor_value_regs_get_gpr(ctx, expr21_0, expr22_0)?;
 7874|      0|                            let expr24_0: usize = 1i128 as usize;
 7875|      0|                            let expr25_0 = constructor_value_regs_get_gpr(ctx, expr21_0, expr24_0)?;
 7876|      0|                            let expr26_0: Type = I64;
 7877|      0|                            let expr27_0 = C::gpr_to_gpr_mem_imm(ctx, expr25_0);
 7878|      0|                            let expr28_0 = constructor_x64_add(ctx, expr26_0, expr18_0, &expr27_0)?;
 7879|      0|                            let expr29_0 = constructor_value_gprs(ctx, expr23_0, expr28_0)?;
 7880|      0|                            let expr30_0 = C::output(ctx, expr29_0);
 7881|      0|                            return Some(expr30_0);
 7882|       |                        }
 7883|       |                        &Opcode::Band  => {
 7884|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7885|      0|                            // Rule at src/isa/x64/lower.isle line 308.
 7886|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7887|      0|                            let expr1_0: usize = 0i128 as usize;
 7888|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7889|      0|                            let expr3_0: usize = 1i128 as usize;
 7890|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7891|      0|                            let expr5_0 = C::put_in_regs(ctx, pattern7_1);
 7892|      0|                            let expr6_0: usize = 0i128 as usize;
 7893|      0|                            let expr7_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr6_0)?;
 7894|      0|                            let expr8_0: usize = 1i128 as usize;
 7895|      0|                            let expr9_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr8_0)?;
 7896|      0|                            let expr10_0: Type = I64;
 7897|      0|                            let expr11_0 = C::gpr_to_gpr_mem_imm(ctx, expr7_0);
 7898|      0|                            let expr12_0 = constructor_x64_and(ctx, expr10_0, expr2_0, &expr11_0)?;
 7899|      0|                            let expr13_0: Type = I64;
 7900|      0|                            let expr14_0 = C::gpr_to_gpr_mem_imm(ctx, expr9_0);
 7901|      0|                            let expr15_0 = constructor_x64_and(ctx, expr13_0, expr4_0, &expr14_0)?;
 7902|      0|                            let expr16_0 = constructor_value_gprs(ctx, expr12_0, expr15_0)?;
 7903|      0|                            let expr17_0 = C::output(ctx, expr16_0);
 7904|      0|                            return Some(expr17_0);
 7905|       |                        }
 7906|       |                        &Opcode::Bor  => {
 7907|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7908|      0|                            // Rule at src/isa/x64/lower.isle line 381.
 7909|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7910|      0|                            let expr1_0 = C::put_in_regs(ctx, pattern7_1);
 7911|      0|                            let expr2_0 = constructor_or_i128(ctx, expr0_0, expr1_0)?;
 7912|      0|                            let expr3_0 = C::output(ctx, expr2_0);
 7913|      0|                            return Some(expr3_0);
 7914|       |                        }
 7915|       |                        &Opcode::Bxor  => {
 7916|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7917|      0|                            // Rule at src/isa/x64/lower.isle line 432.
 7918|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7919|      0|                            let expr1_0: usize = 0i128 as usize;
 7920|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
 7921|      0|                            let expr3_0: usize = 1i128 as usize;
 7922|      0|                            let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
 7923|      0|                            let expr5_0 = C::put_in_regs(ctx, pattern7_1);
 7924|      0|                            let expr6_0: usize = 0i128 as usize;
 7925|      0|                            let expr7_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr6_0)?;
 7926|      0|                            let expr8_0: usize = 1i128 as usize;
 7927|      0|                            let expr9_0 = constructor_value_regs_get_gpr(ctx, expr5_0, expr8_0)?;
 7928|      0|                            let expr10_0: Type = I64;
 7929|      0|                            let expr11_0 = C::gpr_to_gpr_mem_imm(ctx, expr7_0);
 7930|      0|                            let expr12_0 = constructor_x64_xor(ctx, expr10_0, expr2_0, &expr11_0)?;
 7931|      0|                            let expr13_0: Type = I64;
 7932|      0|                            let expr14_0 = C::gpr_to_gpr_mem_imm(ctx, expr9_0);
 7933|      0|                            let expr15_0 = constructor_x64_xor(ctx, expr13_0, expr4_0, &expr14_0)?;
 7934|      0|                            let expr16_0 = constructor_value_gprs(ctx, expr12_0, expr15_0)?;
 7935|      0|                            let expr17_0 = C::output(ctx, expr16_0);
 7936|      0|                            return Some(expr17_0);
 7937|       |                        }
 7938|       |                        &Opcode::Rotl  => {
 7939|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7940|      0|                            // Rule at src/isa/x64/lower.isle line 799.
 7941|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7942|      0|                            let expr1_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7943|      0|                            let expr2_0 = constructor_shl_i128(ctx, expr0_0, expr1_0)?;
 7944|      0|                            let expr3_0: Type = I64;
 7945|      0|                            let expr4_0: Type = I64;
 7946|      0|                            let expr5_0: u64 = 128i128 as u64;
 7947|      0|                            let expr6_0 = constructor_imm(ctx, expr4_0, expr5_0)?;
 7948|      0|                            let expr7_0 = C::gpr_new(ctx, expr6_0);
 7949|      0|                            let expr8_0 = C::gpr_to_gpr_mem_imm(ctx, expr1_0);
 7950|      0|                            let expr9_0 = constructor_x64_sub(ctx, expr3_0, expr7_0, &expr8_0)?;
 7951|      0|                            let expr10_0 = constructor_shr_i128(ctx, expr0_0, expr9_0)?;
 7952|      0|                            let expr11_0 = constructor_or_i128(ctx, expr2_0, expr10_0)?;
 7953|      0|                            let expr12_0 = C::output(ctx, expr11_0);
 7954|      0|                            return Some(expr12_0);
 7955|       |                        }
 7956|       |                        &Opcode::Rotr  => {
 7957|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7958|      0|                            // Rule at src/isa/x64/lower.isle line 820.
 7959|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern7_0);
 7960|      0|                            let expr1_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7961|      0|                            let expr2_0 = constructor_shr_i128(ctx, expr0_0, expr1_0)?;
 7962|      0|                            let expr3_0: Type = I64;
 7963|      0|                            let expr4_0: Type = I64;
 7964|      0|                            let expr5_0: u64 = 128i128 as u64;
 7965|      0|                            let expr6_0 = constructor_imm(ctx, expr4_0, expr5_0)?;
 7966|      0|                            let expr7_0 = C::gpr_new(ctx, expr6_0);
 7967|      0|                            let expr8_0 = C::gpr_to_gpr_mem_imm(ctx, expr1_0);
 7968|      0|                            let expr9_0 = constructor_x64_sub(ctx, expr3_0, expr7_0, &expr8_0)?;
 7969|      0|                            let expr10_0 = constructor_shl_i128(ctx, expr0_0, expr9_0)?;
 7970|      0|                            let expr11_0 = constructor_or_i128(ctx, expr2_0, expr10_0)?;
 7971|      0|                            let expr12_0 = C::output(ctx, expr11_0);
 7972|      0|                            return Some(expr12_0);
 7973|       |                        }
 7974|       |                        &Opcode::Ishl  => {
 7975|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7976|       |                            // Rule at src/isa/x64/lower.isle line 496.
 7977|      0|                            let expr0_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7978|      0|                            let expr1_0 = C::put_in_regs(ctx, pattern7_0);
 7979|      0|                            let expr2_0 = constructor_shl_i128(ctx, expr1_0, expr0_0)?;
 7980|      0|                            let expr3_0 = C::output(ctx, expr2_0);
 7981|      0|                            return Some(expr3_0);
 7982|       |                        }
 7983|       |                        &Opcode::Ushr  => {
 7984|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7985|       |                            // Rule at src/isa/x64/lower.isle line 602.
 7986|      0|                            let expr0_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7987|      0|                            let expr1_0 = C::put_in_regs(ctx, pattern7_0);
 7988|      0|                            let expr2_0 = constructor_shr_i128(ctx, expr1_0, expr0_0)?;
 7989|      0|                            let expr3_0 = C::output(ctx, expr2_0);
 7990|      0|                            return Some(expr3_0);
 7991|       |                        }
 7992|       |                        &Opcode::Sshr  => {
 7993|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 7994|       |                            // Rule at src/isa/x64/lower.isle line 712.
 7995|      0|                            let expr0_0 = constructor_lo_gpr(ctx, pattern7_1)?;
 7996|      0|                            let expr1_0 = C::put_in_regs(ctx, pattern7_0);
 7997|      0|                            let expr2_0 = constructor_sar_i128(ctx, expr1_0, expr0_0)?;
 7998|      0|                            let expr3_0 = C::output(ctx, expr2_0);
 7999|      0|                            return Some(expr3_0);
 8000|       |                        }
 8001|      0|                        _ => {}
 8002|       |                    }
 8003|       |                }
 8004|      0|                _ => {}
 8005|       |            }
 8006|  39.6k|        }
 8007|  39.6k|        if pattern2_0 == F32 {
 8008|     84|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 8009|     84|            match &pattern4_0 {
 8010|     32|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 8011|     32|                    match pattern5_0 {
 8012|       |                        &Opcode::Sqrt  => {
 8013|       |                            // Rule at src/isa/x64/lower.isle line 2261.
 8014|     10|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8015|     10|                            let expr1_0 = constructor_x64_sqrtss(ctx, expr0_0)?;
 8016|     10|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8017|     10|                            return Some(expr2_0);
 8018|       |                        }
 8019|       |                        &Opcode::Fneg  => {
 8020|       |                            // Rule at src/isa/x64/lower.isle line 1207.
 8021|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8022|      0|                            let expr1_0: Type = F32;
 8023|      0|                            let expr2_0: u64 = 2147483648i128 as u64;
 8024|      0|                            let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
 8025|      0|                            let expr4_0 = constructor_reg_to_xmm_mem(ctx, expr3_0)?;
 8026|      0|                            let expr5_0 = constructor_x64_xorps(ctx, expr0_0, &expr4_0)?;
 8027|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8028|      0|                            return Some(expr6_0);
 8029|       |                        }
 8030|       |                        &Opcode::Fabs  => {
 8031|       |                            // Rule at src/isa/x64/lower.isle line 1187.
 8032|      2|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8033|      2|                            let expr1_0: Type = F32;
 8034|      2|                            let expr2_0: u64 = 2147483647i128 as u64;
 8035|      2|                            let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
 8036|      2|                            let expr4_0 = constructor_reg_to_xmm_mem(ctx, expr3_0)?;
 8037|      2|                            let expr5_0 = constructor_x64_andps(ctx, expr0_0, &expr4_0)?;
 8038|      2|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8039|      2|                            return Some(expr6_0);
 8040|       |                        }
 8041|       |                        &Opcode::Bitcast  => {
 8042|      2|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8043|      2|                            if pattern7_0 == I32 {
 8044|       |                                // Rule at src/isa/x64/lower.isle line 3310.
 8045|      2|                                let expr0_0: Type = I32;
 8046|      2|                                let expr1_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
 8047|      2|                                let expr2_0 = constructor_bitcast_gpr_to_xmm(ctx, expr0_0, expr1_0)?;
 8048|      2|                                let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8049|      2|                                return Some(expr3_0);
 8050|      0|                            }
 8051|       |                        }
 8052|       |                        &Opcode::Fdemote  => {
 8053|       |                            // Rule at src/isa/x64/lower.isle line 2279.
 8054|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8055|      0|                            let expr1_0 = constructor_x64_cvtsd2ss(ctx, expr0_0)?;
 8056|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8057|      0|                            return Some(expr2_0);
 8058|       |                        }
 8059|       |                        &Opcode::FcvtFromUint  => {
 8060|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8061|      0|                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
 8062|      0|                                if let Some(pattern9_0) = C::ty_int(ctx, pattern8_0) {
 8063|       |                                    // Rule at src/isa/x64/lower.isle line 2972.
 8064|      0|                                    let expr0_0: Type = I64;
 8065|      0|                                    let expr1_0: Type = I64;
 8066|      0|                                    let expr2_0 = ExtendKind::Zero;
 8067|      0|                                    let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
 8068|      0|                                    let expr4_0 = C::gpr_to_gpr_mem(ctx, expr3_0);
 8069|      0|                                    let expr5_0 = constructor_x64_cvtsi2ss(ctx, expr0_0, &expr4_0)?;
 8070|      0|                                    let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8071|      0|                                    return Some(expr6_0);
 8072|      0|                                }
 8073|      0|                            }
 8074|       |                        }
 8075|       |                        &Opcode::FcvtFromSint  => {
 8076|     14|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8077|     14|                            if pattern7_0 == I8 {
 8078|       |                                // Rule at src/isa/x64/lower.isle line 2944.
 8079|      0|                                let expr0_0: Type = I32;
 8080|      0|                                let expr1_0: Type = I32;
 8081|      0|                                let expr2_0 = ExtendKind::Sign;
 8082|      0|                                let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
 8083|      0|                                let expr4_0 = C::gpr_to_gpr_mem(ctx, expr3_0);
 8084|      0|                                let expr5_0 = constructor_x64_cvtsi2ss(ctx, expr0_0, &expr4_0)?;
 8085|      0|                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8086|      0|                                return Some(expr6_0);
 8087|     14|                            }
 8088|     14|                            if pattern7_0 == I16 {
 8089|       |                                // Rule at src/isa/x64/lower.isle line 2947.
 8090|      0|                                let expr0_0: Type = I32;
 8091|      0|                                let expr1_0: Type = I32;
 8092|      0|                                let expr2_0 = ExtendKind::Sign;
 8093|      0|                                let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
 8094|      0|                                let expr4_0 = C::gpr_to_gpr_mem(ctx, expr3_0);
 8095|      0|                                let expr5_0 = constructor_x64_cvtsi2ss(ctx, expr0_0, &expr4_0)?;
 8096|      0|                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8097|      0|                                return Some(expr6_0);
 8098|     14|                            }
 8099|     14|                            if let Some(pattern8_0) = C::ty_int(ctx, pattern7_0) {
 8100|     14|                                if let Some(pattern9_0) = C::fits_in_64(ctx, pattern8_0) {
 8101|       |                                    // Rule at src/isa/x64/lower.isle line 2950.
 8102|     14|                                    let expr0_0 = constructor_put_in_gpr_mem(ctx, pattern5_1)?;
 8103|     14|                                    let expr1_0 = constructor_x64_cvtsi2ss(ctx, pattern9_0, &expr0_0)?;
 8104|     14|                                    let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8105|     14|                                    return Some(expr2_0);
 8106|      0|                                }
 8107|      0|                            }
 8108|       |                        }
 8109|      4|                        _ => {}
 8110|       |                    }
 8111|       |                }
 8112|     18|                &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } => {
 8113|     18|                    if let &Opcode::Load  = pattern5_0 {
 8114|       |                        // Rule at src/isa/x64/lower.isle line 2526.
 8115|     18|                        let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 8116|     18|                        let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 8117|     18|                        let expr2_0 = constructor_x64_movss_load(ctx, &expr1_0)?;
 8118|     18|                        let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8119|     18|                        return Some(expr3_0);
 8120|      0|                    }
 8121|       |                }
 8122|      0|                &InstructionData::BinaryImm8 { opcode: ref pattern5_0, arg: pattern5_1, imm: pattern5_2 } => {
 8123|      0|                    if let &Opcode::Extractlane  = pattern5_0 {
 8124|      0|                        let pattern7_0 = C::value_type(ctx, pattern5_1);
 8125|      0|                        if let Some(pattern8_0) = C::ty_vec128(ctx, pattern7_0) {
 8126|      0|                            let pattern9_0 = C::u8_from_uimm8(ctx, pattern5_2);
 8127|      0|                            // Rule at src/isa/x64/lower.isle line 3553.
 8128|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8129|      0|                            let expr1_0 = OperandSize::Size32;
 8130|      0|                            let expr2_0 = constructor_x64_pshufd(ctx, &expr0_0, pattern9_0, &expr1_0)?;
 8131|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8132|      0|                            return Some(expr3_0);
 8133|      0|                        }
 8134|      0|                    }
 8135|       |                }
 8136|      2|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 8137|      2|                    match pattern5_0 {
 8138|       |                        &Opcode::Fadd  => {
 8139|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8140|       |                            // Rule at src/isa/x64/lower.isle line 2218.
 8141|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8142|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8143|      0|                            let expr2_0 = constructor_x64_addss(ctx, expr0_0, &expr1_0)?;
 8144|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8145|      0|                            return Some(expr3_0);
 8146|       |                        }
 8147|       |                        &Opcode::Fsub  => {
 8148|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8149|       |                            // Rule at src/isa/x64/lower.isle line 2229.
 8150|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8151|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8152|      0|                            let expr2_0 = constructor_x64_subss(ctx, expr0_0, &expr1_0)?;
 8153|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8154|      0|                            return Some(expr3_0);
 8155|       |                        }
 8156|       |                        &Opcode::Fmul  => {
 8157|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8158|       |                            // Rule at src/isa/x64/lower.isle line 2240.
 8159|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8160|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8161|      0|                            let expr2_0 = constructor_x64_mulss(ctx, expr0_0, &expr1_0)?;
 8162|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8163|      0|                            return Some(expr3_0);
 8164|       |                        }
 8165|       |                        &Opcode::Fdiv  => {
 8166|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8167|       |                            // Rule at src/isa/x64/lower.isle line 2251.
 8168|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8169|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8170|      0|                            let expr2_0 = constructor_x64_divss(ctx, expr0_0, &expr1_0)?;
 8171|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8172|      0|                            return Some(expr3_0);
 8173|       |                        }
 8174|       |                        &Opcode::Fcopysign  => {
 8175|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8176|      0|                            let pattern8_0 = C::value_type(ctx, pattern7_0);
 8177|      0|                            if pattern8_0 == F32 {
 8178|       |                                // Rule at src/isa/x64/lower.isle line 3321.
 8179|      0|                                let expr0_0: Type = F32;
 8180|      0|                                let expr1_0: u64 = 2147483648i128 as u64;
 8181|      0|                                let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 8182|      0|                                let expr3_0 = C::xmm_new(ctx, expr2_0);
 8183|      0|                                let expr4_0 = C::put_in_xmm_mem(ctx, pattern7_0);
 8184|      0|                                let expr5_0 = constructor_x64_andnps(ctx, expr3_0, &expr4_0)?;
 8185|      0|                                let expr6_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8186|      0|                                let expr7_0 = constructor_x64_andps(ctx, expr3_0, &expr6_0)?;
 8187|      0|                                let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 8188|      0|                                let expr9_0 = constructor_x64_orps(ctx, expr5_0, &expr8_0)?;
 8189|      0|                                let expr10_0 = constructor_output_xmm(ctx, expr9_0)?;
 8190|      0|                                return Some(expr10_0);
 8191|      0|                            }
 8192|       |                        }
 8193|       |                        &Opcode::Fmin  => {
 8194|      2|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8195|      2|                            // Rule at src/isa/x64/lower.isle line 2288.
 8196|      2|                            let expr0_0: Type = F32;
 8197|      2|                            let expr1_0: bool = true;
 8198|      2|                            let expr2_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8199|      2|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8200|      2|                            let expr4_0 = constructor_xmm_min_max_seq(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
 8201|      2|                            let expr5_0 = constructor_output_xmm(ctx, expr4_0)?;
 8202|      2|                            return Some(expr5_0);
 8203|       |                        }
 8204|       |                        &Opcode::FminPseudo  => {
 8205|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8206|       |                            // Rule at src/isa/x64/lower.isle line 2457.
 8207|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8208|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8209|      0|                            let expr2_0 = constructor_x64_minss(ctx, expr0_0, expr1_0)?;
 8210|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8211|      0|                            return Some(expr3_0);
 8212|       |                        }
 8213|       |                        &Opcode::Fmax  => {
 8214|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8215|      0|                            // Rule at src/isa/x64/lower.isle line 2360.
 8216|      0|                            let expr0_0: Type = F32;
 8217|      0|                            let expr1_0: bool = false;
 8218|      0|                            let expr2_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8219|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8220|      0|                            let expr4_0 = constructor_xmm_min_max_seq(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
 8221|      0|                            let expr5_0 = constructor_output_xmm(ctx, expr4_0)?;
 8222|      0|                            return Some(expr5_0);
 8223|       |                        }
 8224|       |                        &Opcode::FmaxPseudo  => {
 8225|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8226|       |                            // Rule at src/isa/x64/lower.isle line 2468.
 8227|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8228|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8229|      0|                            let expr2_0 = constructor_x64_maxss(ctx, expr0_0, expr1_0)?;
 8230|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8231|      0|                            return Some(expr3_0);
 8232|       |                        }
 8233|      0|                        _ => {}
 8234|       |                    }
 8235|       |                }
 8236|     32|                &InstructionData::Ternary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 8237|     32|                    if let &Opcode::Fma  = pattern5_0 {
 8238|      0|                        let (pattern7_0, pattern7_1, pattern7_2) = C::unpack_value_array_3(ctx, pattern5_1);
 8239|      0|                        // Rule at src/isa/x64/lower.isle line 2479.
 8240|      0|                        let expr0_0 = LibCall::FmaF32;
 8241|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
 8242|      0|                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
 8243|      0|                        let expr3_0 = C::put_in_reg(ctx, pattern7_2);
 8244|      0|                        let expr4_0 = C::libcall_3(ctx, &expr0_0, expr1_0, expr2_0, expr3_0);
 8245|      0|                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
 8246|      0|                        return Some(expr5_0);
 8247|     32|                    }
 8248|       |                }
 8249|      0|                _ => {}
 8250|       |            }
 8251|  39.5k|        }
 8252|  39.5k|        if pattern2_0 == F64 {
 8253|    248|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 8254|    248|            match &pattern4_0 {
 8255|     24|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 8256|     24|                    match pattern5_0 {
 8257|       |                        &Opcode::Sqrt  => {
 8258|       |                            // Rule at src/isa/x64/lower.isle line 2263.
 8259|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8260|      0|                            let expr1_0 = constructor_x64_sqrtsd(ctx, expr0_0)?;
 8261|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8262|      0|                            return Some(expr2_0);
 8263|       |                        }
 8264|       |                        &Opcode::Fneg  => {
 8265|       |                            // Rule at src/isa/x64/lower.isle line 1210.
 8266|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8267|      0|                            let expr1_0: Type = F64;
 8268|      0|                            let expr2_0: u64 = 9223372036854775808i128 as u64;
 8269|      0|                            let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
 8270|      0|                            let expr4_0 = constructor_reg_to_xmm_mem(ctx, expr3_0)?;
 8271|      0|                            let expr5_0 = constructor_x64_xorpd(ctx, expr0_0, &expr4_0)?;
 8272|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8273|      0|                            return Some(expr6_0);
 8274|       |                        }
 8275|       |                        &Opcode::Fabs  => {
 8276|       |                            // Rule at src/isa/x64/lower.isle line 1190.
 8277|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8278|      0|                            let expr1_0: Type = F64;
 8279|      0|                            let expr2_0: u64 = 9223372036854775807i128 as u64;
 8280|      0|                            let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
 8281|      0|                            let expr4_0 = constructor_reg_to_xmm_mem(ctx, expr3_0)?;
 8282|      0|                            let expr5_0 = constructor_x64_andpd(ctx, expr0_0, &expr4_0)?;
 8283|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8284|      0|                            return Some(expr6_0);
 8285|       |                        }
 8286|       |                        &Opcode::Bitcast  => {
 8287|     12|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8288|     12|                            if pattern7_0 == I64 {
 8289|       |                                // Rule at src/isa/x64/lower.isle line 3316.
 8290|     12|                                let expr0_0: Type = I64;
 8291|     12|                                let expr1_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
 8292|     12|                                let expr2_0 = constructor_bitcast_gpr_to_xmm(ctx, expr0_0, expr1_0)?;
 8293|     12|                                let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8294|     12|                                return Some(expr3_0);
 8295|      0|                            }
 8296|       |                        }
 8297|       |                        &Opcode::Fpromote  => {
 8298|       |                            // Rule at src/isa/x64/lower.isle line 2271.
 8299|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8300|      0|                            let expr1_0 = constructor_x64_cvtss2sd(ctx, expr0_0)?;
 8301|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8302|      0|                            return Some(expr2_0);
 8303|       |                        }
 8304|       |                        &Opcode::FcvtFromUint  => {
 8305|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8306|      0|                            if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
 8307|      0|                                if let Some(pattern9_0) = C::ty_int(ctx, pattern8_0) {
 8308|       |                                    // Rule at src/isa/x64/lower.isle line 2975.
 8309|      0|                                    let expr0_0: Type = I64;
 8310|      0|                                    let expr1_0: Type = I64;
 8311|      0|                                    let expr2_0 = ExtendKind::Zero;
 8312|      0|                                    let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
 8313|      0|                                    let expr4_0 = C::gpr_to_gpr_mem(ctx, expr3_0);
 8314|      0|                                    let expr5_0 = constructor_x64_cvtsi2sd(ctx, expr0_0, &expr4_0)?;
 8315|      0|                                    let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8316|      0|                                    return Some(expr6_0);
 8317|      0|                                }
 8318|      0|                            }
 8319|       |                        }
 8320|       |                        &Opcode::FcvtFromSint  => {
 8321|      2|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8322|      2|                            if pattern7_0 == I8 {
 8323|       |                                // Rule at src/isa/x64/lower.isle line 2953.
 8324|      0|                                let expr0_0: Type = I32;
 8325|      0|                                let expr1_0: Type = I32;
 8326|      0|                                let expr2_0 = ExtendKind::Sign;
 8327|      0|                                let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
 8328|      0|                                let expr4_0 = C::gpr_to_gpr_mem(ctx, expr3_0);
 8329|      0|                                let expr5_0 = constructor_x64_cvtsi2sd(ctx, expr0_0, &expr4_0)?;
 8330|      0|                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8331|      0|                                return Some(expr6_0);
 8332|      2|                            }
 8333|      2|                            if pattern7_0 == I16 {
 8334|       |                                // Rule at src/isa/x64/lower.isle line 2956.
 8335|      0|                                let expr0_0: Type = I32;
 8336|      0|                                let expr1_0: Type = I32;
 8337|      0|                                let expr2_0 = ExtendKind::Sign;
 8338|      0|                                let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
 8339|      0|                                let expr4_0 = C::gpr_to_gpr_mem(ctx, expr3_0);
 8340|      0|                                let expr5_0 = constructor_x64_cvtsi2sd(ctx, expr0_0, &expr4_0)?;
 8341|      0|                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8342|      0|                                return Some(expr6_0);
 8343|      2|                            }
 8344|      2|                            if let Some(pattern8_0) = C::ty_int(ctx, pattern7_0) {
 8345|      2|                                if let Some(pattern9_0) = C::fits_in_64(ctx, pattern8_0) {
 8346|       |                                    // Rule at src/isa/x64/lower.isle line 2959.
 8347|      2|                                    let expr0_0 = constructor_put_in_gpr_mem(ctx, pattern5_1)?;
 8348|      2|                                    let expr1_0 = constructor_x64_cvtsi2sd(ctx, pattern9_0, &expr0_0)?;
 8349|      2|                                    let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8350|      2|                                    return Some(expr2_0);
 8351|      0|                                }
 8352|      0|                            }
 8353|       |                        }
 8354|     10|                        _ => {}
 8355|       |                    }
 8356|       |                }
 8357|    196|                &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } => {
 8358|    196|                    if let &Opcode::Load  = pattern5_0 {
 8359|       |                        // Rule at src/isa/x64/lower.isle line 2528.
 8360|    196|                        let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 8361|    196|                        let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 8362|    196|                        let expr2_0 = constructor_x64_movsd_load(ctx, &expr1_0)?;
 8363|    196|                        let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8364|    196|                        return Some(expr3_0);
 8365|      0|                    }
 8366|       |                }
 8367|      0|                &InstructionData::BinaryImm8 { opcode: ref pattern5_0, arg: pattern5_1, imm: pattern5_2 } => {
 8368|      0|                    if let &Opcode::Extractlane  = pattern5_0 {
 8369|      0|                        let pattern7_0 = C::value_type(ctx, pattern5_1);
 8370|      0|                        if let Some(pattern8_0) = C::ty_vec128(ctx, pattern7_0) {
 8371|      0|                            let pattern9_0 = C::u8_from_uimm8(ctx, pattern5_2);
 8372|      0|                            if pattern9_0 == 1i128 as u8  {
 8373|       |                                // Rule at src/isa/x64/lower.isle line 3558.
 8374|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8375|      0|                                let expr1_0: u8 = 238i128 as u8;
 8376|      0|                                let expr2_0 = OperandSize::Size32;
 8377|      0|                                let expr3_0 = constructor_x64_pshufd(ctx, &expr0_0, expr1_0, &expr2_0)?;
 8378|      0|                                let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
 8379|      0|                                return Some(expr4_0);
 8380|      0|                            }
 8381|      0|                        }
 8382|      0|                    }
 8383|       |                }
 8384|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 8385|      0|                    match pattern5_0 {
 8386|       |                        &Opcode::Fadd  => {
 8387|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8388|       |                            // Rule at src/isa/x64/lower.isle line 2220.
 8389|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8390|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8391|      0|                            let expr2_0 = constructor_x64_addsd(ctx, expr0_0, &expr1_0)?;
 8392|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8393|      0|                            return Some(expr3_0);
 8394|       |                        }
 8395|       |                        &Opcode::Fsub  => {
 8396|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8397|       |                            // Rule at src/isa/x64/lower.isle line 2231.
 8398|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8399|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8400|      0|                            let expr2_0 = constructor_x64_subsd(ctx, expr0_0, &expr1_0)?;
 8401|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8402|      0|                            return Some(expr3_0);
 8403|       |                        }
 8404|       |                        &Opcode::Fmul  => {
 8405|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8406|       |                            // Rule at src/isa/x64/lower.isle line 2242.
 8407|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8408|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8409|      0|                            let expr2_0 = constructor_x64_mulsd(ctx, expr0_0, &expr1_0)?;
 8410|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8411|      0|                            return Some(expr3_0);
 8412|       |                        }
 8413|       |                        &Opcode::Fdiv  => {
 8414|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8415|       |                            // Rule at src/isa/x64/lower.isle line 2253.
 8416|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8417|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8418|      0|                            let expr2_0 = constructor_x64_divsd(ctx, expr0_0, &expr1_0)?;
 8419|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8420|      0|                            return Some(expr3_0);
 8421|       |                        }
 8422|       |                        &Opcode::Fcopysign  => {
 8423|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8424|      0|                            let pattern8_0 = C::value_type(ctx, pattern7_0);
 8425|      0|                            if pattern8_0 == F64 {
 8426|       |                                // Rule at src/isa/x64/lower.isle line 3327.
 8427|      0|                                let expr0_0: Type = F64;
 8428|      0|                                let expr1_0: u64 = 9223372036854775808i128 as u64;
 8429|      0|                                let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 8430|      0|                                let expr3_0 = C::xmm_new(ctx, expr2_0);
 8431|      0|                                let expr4_0 = C::put_in_xmm_mem(ctx, pattern7_0);
 8432|      0|                                let expr5_0 = constructor_x64_andnpd(ctx, expr3_0, &expr4_0)?;
 8433|      0|                                let expr6_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8434|      0|                                let expr7_0 = constructor_x64_andpd(ctx, expr3_0, &expr6_0)?;
 8435|      0|                                let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 8436|      0|                                let expr9_0 = constructor_x64_orpd(ctx, expr5_0, &expr8_0)?;
 8437|      0|                                let expr10_0 = constructor_output_xmm(ctx, expr9_0)?;
 8438|      0|                                return Some(expr10_0);
 8439|      0|                            }
 8440|       |                        }
 8441|       |                        &Opcode::Fmin  => {
 8442|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8443|      0|                            // Rule at src/isa/x64/lower.isle line 2290.
 8444|      0|                            let expr0_0: Type = F64;
 8445|      0|                            let expr1_0: bool = true;
 8446|      0|                            let expr2_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8447|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8448|      0|                            let expr4_0 = constructor_xmm_min_max_seq(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
 8449|      0|                            let expr5_0 = constructor_output_xmm(ctx, expr4_0)?;
 8450|      0|                            return Some(expr5_0);
 8451|       |                        }
 8452|       |                        &Opcode::FminPseudo  => {
 8453|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8454|       |                            // Rule at src/isa/x64/lower.isle line 2459.
 8455|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8456|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8457|      0|                            let expr2_0 = constructor_x64_minsd(ctx, expr0_0, expr1_0)?;
 8458|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8459|      0|                            return Some(expr3_0);
 8460|       |                        }
 8461|       |                        &Opcode::Fmax  => {
 8462|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8463|      0|                            // Rule at src/isa/x64/lower.isle line 2362.
 8464|      0|                            let expr0_0: Type = F64;
 8465|      0|                            let expr1_0: bool = false;
 8466|      0|                            let expr2_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8467|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8468|      0|                            let expr4_0 = constructor_xmm_min_max_seq(ctx, expr0_0, expr1_0, expr2_0, expr3_0)?;
 8469|      0|                            let expr5_0 = constructor_output_xmm(ctx, expr4_0)?;
 8470|      0|                            return Some(expr5_0);
 8471|       |                        }
 8472|       |                        &Opcode::FmaxPseudo  => {
 8473|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8474|       |                            // Rule at src/isa/x64/lower.isle line 2470.
 8475|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 8476|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8477|      0|                            let expr2_0 = constructor_x64_maxsd(ctx, expr0_0, expr1_0)?;
 8478|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8479|      0|                            return Some(expr3_0);
 8480|       |                        }
 8481|      0|                        _ => {}
 8482|       |                    }
 8483|       |                }
 8484|     20|                &InstructionData::Ternary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 8485|     20|                    if let &Opcode::Fma  = pattern5_0 {
 8486|      0|                        let (pattern7_0, pattern7_1, pattern7_2) = C::unpack_value_array_3(ctx, pattern5_1);
 8487|      0|                        // Rule at src/isa/x64/lower.isle line 2481.
 8488|      0|                        let expr0_0 = LibCall::FmaF64;
 8489|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern7_0);
 8490|      0|                        let expr2_0 = C::put_in_reg(ctx, pattern7_1);
 8491|      0|                        let expr3_0 = C::put_in_reg(ctx, pattern7_2);
 8492|      0|                        let expr4_0 = C::libcall_3(ctx, &expr0_0, expr1_0, expr2_0, expr3_0);
 8493|      0|                        let expr5_0 = constructor_output_reg(ctx, expr4_0)?;
 8494|      0|                        return Some(expr5_0);
 8495|     20|                    }
 8496|       |                }
 8497|      8|                _ => {}
 8498|       |            }
 8499|  39.3k|        }
 8500|  39.3k|        if pattern2_0 == I8X16 {
 8501|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 8502|      0|            match &pattern4_0 {
 8503|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 8504|      0|                    match pattern5_0 {
 8505|       |                        &Opcode::Ineg  => {
 8506|       |                            // Rule at src/isa/x64/lower.isle line 839.
 8507|      0|                            let expr0_0: Type = I8X16;
 8508|      0|                            let expr1_0: u64 = 0i128 as u64;
 8509|      0|                            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 8510|      0|                            let expr3_0 = C::xmm_new(ctx, expr2_0);
 8511|      0|                            let expr4_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8512|      0|                            let expr5_0 = constructor_x64_psubb(ctx, expr3_0, &expr4_0)?;
 8513|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8514|      0|                            return Some(expr6_0);
 8515|       |                        }
 8516|       |                        &Opcode::Iabs  => {
 8517|       |                            // Rule at src/isa/x64/lower.isle line 1160.
 8518|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8519|      0|                            let expr1_0 = constructor_x64_pabsb(ctx, &expr0_0)?;
 8520|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8521|      0|                            return Some(expr2_0);
 8522|       |                        }
 8523|       |                        &Opcode::Popcnt  => {
 8524|       |                            // Rule at src/isa/x64/lower.isle line 1951.
 8525|      0|                            let expr0_0 = C::popcount_4bit_table(ctx, );
 8526|      0|                            let expr1_0: Type = I8X16;
 8527|      0|                            let expr2_0 = C::popcount_low_mask(ctx, );
 8528|      0|                            let expr3_0 = constructor_x64_xmm_load_const(ctx, expr1_0, expr2_0)?;
 8529|      0|                            let expr4_0: Type = I8X16;
 8530|      0|                            let expr5_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8531|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
 8532|      0|                            let expr7_0 = constructor_sse_and(ctx, expr4_0, expr5_0, &expr6_0)?;
 8533|      0|                            let expr8_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8534|      0|                            let expr9_0: u32 = 4i128 as u32;
 8535|      0|                            let expr10_0 = RegMemImm::Imm {
 8536|      0|                                simm32: expr9_0,
 8537|      0|                            };
 8538|      0|                            let expr11_0 = constructor_mov_rmi_to_xmm(ctx, &expr10_0)?;
 8539|      0|                            let expr12_0 = constructor_x64_psrlw(ctx, expr8_0, &expr11_0)?;
 8540|      0|                            let expr13_0: Type = I8X16;
 8541|      0|                            let expr14_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
 8542|      0|                            let expr15_0 = constructor_sse_and(ctx, expr13_0, expr12_0, &expr14_0)?;
 8543|      0|                            let expr16_0: Type = I8X16;
 8544|      0|                            let expr17_0 = C::popcount_4bit_table(ctx, );
 8545|      0|                            let expr18_0 = constructor_x64_xmm_load_const(ctx, expr16_0, expr17_0)?;
 8546|      0|                            let expr19_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 8547|      0|                            let expr20_0 = constructor_x64_pshufb(ctx, expr18_0, &expr19_0)?;
 8548|      0|                            let expr21_0 = C::xmm_to_xmm_mem(ctx, expr15_0);
 8549|      0|                            let expr22_0 = constructor_x64_pshufb(ctx, expr18_0, &expr21_0)?;
 8550|      0|                            let expr23_0 = C::xmm_to_xmm_mem(ctx, expr22_0);
 8551|      0|                            let expr24_0 = constructor_x64_paddb(ctx, expr20_0, &expr23_0)?;
 8552|      0|                            let expr25_0 = constructor_output_xmm(ctx, expr24_0)?;
 8553|      0|                            return Some(expr25_0);
 8554|       |                        }
 8555|      0|                        _ => {}
 8556|       |                    }
 8557|       |                }
 8558|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 8559|      0|                    match pattern5_0 {
 8560|       |                        &Opcode::Imin  => {
 8561|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8562|       |                            // Rule at src/isa/x64/lower.isle line 1379.
 8563|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8564|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8565|      0|                            let expr2_0 = constructor_x64_pminsb(ctx, expr0_0, &expr1_0)?;
 8566|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8567|      0|                            return Some(expr3_0);
 8568|       |                        }
 8569|       |                        &Opcode::Umin  => {
 8570|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8571|       |                            // Rule at src/isa/x64/lower.isle line 1401.
 8572|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8573|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8574|      0|                            let expr2_0 = constructor_x64_pminub(ctx, expr0_0, &expr1_0)?;
 8575|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8576|      0|                            return Some(expr3_0);
 8577|       |                        }
 8578|       |                        &Opcode::Imax  => {
 8579|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8580|       |                            // Rule at src/isa/x64/lower.isle line 1368.
 8581|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8582|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8583|      0|                            let expr2_0 = constructor_x64_pmaxsb(ctx, expr0_0, &expr1_0)?;
 8584|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8585|      0|                            return Some(expr3_0);
 8586|       |                        }
 8587|       |                        &Opcode::Umax  => {
 8588|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8589|       |                            // Rule at src/isa/x64/lower.isle line 1390.
 8590|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8591|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8592|      0|                            let expr2_0 = constructor_x64_pmaxub(ctx, expr0_0, &expr1_0)?;
 8593|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8594|      0|                            return Some(expr3_0);
 8595|       |                        }
 8596|       |                        &Opcode::Ishl  => {
 8597|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8598|      0|                            // Rule at src/isa/x64/lower.isle line 508.
 8599|      0|                            let expr0_0: Type = I64;
 8600|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 8601|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 8602|      0|                            let expr3_0 = RegMemImm::Imm {
 8603|      0|                                simm32: expr2_0,
 8604|      0|                            };
 8605|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 8606|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 8607|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 8608|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8609|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 8610|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 8611|      0|                            let expr10_0 = constructor_x64_psllw(ctx, expr7_0, &expr9_0)?;
 8612|      0|                            let expr11_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 8613|      0|                            let expr12_0 = constructor_ishl_i8x16_mask(ctx, &expr11_0)?;
 8614|      0|                            let expr13_0: Type = I8X16;
 8615|      0|                            let expr14_0 = ExtKind::None;
 8616|      0|                            let expr15_0 = constructor_x64_load(ctx, expr13_0, &expr12_0, &expr14_0)?;
 8617|      0|                            let expr16_0: Type = I8X16;
 8618|      0|                            let expr17_0 = RegMem::Reg {
 8619|      0|                                reg: expr15_0,
 8620|      0|                            };
 8621|      0|                            let expr18_0 = C::reg_mem_to_xmm_mem(ctx, &expr17_0);
 8622|      0|                            let expr19_0 = constructor_sse_and(ctx, expr16_0, expr10_0, &expr18_0)?;
 8623|      0|                            let expr20_0 = constructor_output_xmm(ctx, expr19_0)?;
 8624|      0|                            return Some(expr20_0);
 8625|       |                        }
 8626|       |                        &Opcode::Ushr  => {
 8627|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8628|      0|                            // Rule at src/isa/x64/lower.isle line 612.
 8629|      0|                            let expr0_0: Type = I64;
 8630|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 8631|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 8632|      0|                            let expr3_0 = RegMemImm::Imm {
 8633|      0|                                simm32: expr2_0,
 8634|      0|                            };
 8635|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 8636|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 8637|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 8638|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8639|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 8640|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 8641|      0|                            let expr10_0 = constructor_x64_psrlw(ctx, expr7_0, &expr9_0)?;
 8642|      0|                            let expr11_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 8643|      0|                            let expr12_0 = constructor_ushr_i8x16_mask(ctx, &expr11_0)?;
 8644|      0|                            let expr13_0: Type = I8X16;
 8645|      0|                            let expr14_0 = ExtKind::None;
 8646|      0|                            let expr15_0 = constructor_x64_load(ctx, expr13_0, &expr12_0, &expr14_0)?;
 8647|      0|                            let expr16_0: Type = I8X16;
 8648|      0|                            let expr17_0 = RegMem::Reg {
 8649|      0|                                reg: expr15_0,
 8650|      0|                            };
 8651|      0|                            let expr18_0 = C::reg_mem_to_xmm_mem(ctx, &expr17_0);
 8652|      0|                            let expr19_0 = constructor_sse_and(ctx, expr16_0, expr10_0, &expr18_0)?;
 8653|      0|                            let expr20_0 = constructor_output_xmm(ctx, expr19_0)?;
 8654|      0|                            return Some(expr20_0);
 8655|       |                        }
 8656|       |                        &Opcode::Sshr  => {
 8657|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8658|      0|                            let pattern8_0 = C::value_type(ctx, pattern7_1);
 8659|       |                            // Rule at src/isa/x64/lower.isle line 733.
 8660|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8661|      0|                            let expr1_0: Type = I64;
 8662|      0|                            let expr2_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 8663|      0|                            let expr3_0 = C::shift_mask(ctx, pattern2_0);
 8664|      0|                            let expr4_0 = RegMemImm::Imm {
 8665|      0|                                simm32: expr3_0,
 8666|      0|                            };
 8667|      0|                            let expr5_0 = C::gpr_mem_imm_new(ctx, &expr4_0);
 8668|      0|                            let expr6_0 = constructor_x64_and(ctx, expr1_0, expr2_0, &expr5_0)?;
 8669|      0|                            let expr7_0 = C::gpr_to_reg(ctx, expr6_0);
 8670|      0|                            let expr8_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 8671|      0|                            let expr9_0 = constructor_x64_punpcklbw(ctx, expr0_0, &expr8_0)?;
 8672|      0|                            let expr10_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 8673|      0|                            let expr11_0 = constructor_x64_punpckhbw(ctx, expr0_0, &expr10_0)?;
 8674|      0|                            let expr12_0 = C::reg_to_reg_mem_imm(ctx, expr7_0);
 8675|      0|                            let expr13_0 = constructor_sshr_i8x16_bigger_shift(ctx, pattern8_0, &expr12_0)?;
 8676|      0|                            let expr14_0 = constructor_x64_psraw(ctx, expr9_0, &expr13_0)?;
 8677|      0|                            let expr15_0 = constructor_x64_psraw(ctx, expr11_0, &expr13_0)?;
 8678|      0|                            let expr16_0 = C::xmm_to_xmm_mem(ctx, expr15_0);
 8679|      0|                            let expr17_0 = constructor_x64_packsswb(ctx, expr14_0, &expr16_0)?;
 8680|      0|                            let expr18_0 = constructor_output_xmm(ctx, expr17_0)?;
 8681|      0|                            return Some(expr18_0);
 8682|       |                        }
 8683|       |                        &Opcode::Snarrow  => {
 8684|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8685|      0|                            let pattern8_0 = C::value_type(ctx, pattern7_0);
 8686|      0|                            if pattern8_0 == I16X8 {
 8687|       |                                // Rule at src/isa/x64/lower.isle line 3262.
 8688|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8689|      0|                                let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8690|      0|                                let expr2_0 = constructor_x64_packsswb(ctx, expr0_0, &expr1_0)?;
 8691|      0|                                let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8692|      0|                                return Some(expr3_0);
 8693|      0|                            }
 8694|       |                        }
 8695|       |                        &Opcode::Unarrow  => {
 8696|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8697|      0|                            let pattern8_0 = C::value_type(ctx, pattern7_0);
 8698|      0|                            if pattern8_0 == I16X8 {
 8699|       |                                // Rule at src/isa/x64/lower.isle line 3296.
 8700|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8701|      0|                                let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8702|      0|                                let expr2_0 = constructor_x64_packuswb(ctx, expr0_0, &expr1_0)?;
 8703|      0|                                let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8704|      0|                                return Some(expr3_0);
 8705|      0|                            }
 8706|       |                        }
 8707|      0|                        _ => {}
 8708|       |                    }
 8709|       |                }
 8710|      0|                _ => {}
 8711|       |            }
 8712|  39.3k|        }
 8713|  39.3k|        if pattern2_0 == I16X8 {
 8714|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 8715|      0|            match &pattern4_0 {
 8716|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 8717|      0|                    match pattern5_0 {
 8718|       |                        &Opcode::Ineg  => {
 8719|       |                            // Rule at src/isa/x64/lower.isle line 842.
 8720|      0|                            let expr0_0: Type = I16X8;
 8721|      0|                            let expr1_0: u64 = 0i128 as u64;
 8722|      0|                            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 8723|      0|                            let expr3_0 = C::xmm_new(ctx, expr2_0);
 8724|      0|                            let expr4_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8725|      0|                            let expr5_0 = constructor_x64_psubw(ctx, expr3_0, &expr4_0)?;
 8726|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8727|      0|                            return Some(expr6_0);
 8728|       |                        }
 8729|       |                        &Opcode::Iabs  => {
 8730|       |                            // Rule at src/isa/x64/lower.isle line 1163.
 8731|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8732|      0|                            let expr1_0 = constructor_x64_pabsw(ctx, &expr0_0)?;
 8733|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8734|      0|                            return Some(expr2_0);
 8735|       |                        }
 8736|       |                        &Opcode::SwidenLow  => {
 8737|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8738|      0|                            if pattern7_0 == I8X16 {
 8739|       |                                // Rule at src/isa/x64/lower.isle line 3214.
 8740|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8741|      0|                                let expr1_0 = constructor_x64_pmovsxbw(ctx, &expr0_0)?;
 8742|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8743|      0|                                return Some(expr2_0);
 8744|      0|                            }
 8745|       |                        }
 8746|       |                        &Opcode::SwidenHigh  => {
 8747|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8748|      0|                            if pattern7_0 == I8X16 {
 8749|       |                                // Rule at src/isa/x64/lower.isle line 3225.
 8750|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8751|      0|                                let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 8752|      0|                                let expr2_0: u8 = 8i128 as u8;
 8753|      0|                                let expr3_0 = OperandSize::Size32;
 8754|      0|                                let expr4_0 = constructor_x64_palignr(ctx, expr0_0, &expr1_0, expr2_0, &expr3_0)?;
 8755|      0|                                let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
 8756|      0|                                let expr6_0 = constructor_x64_pmovsxbw(ctx, &expr5_0)?;
 8757|      0|                                let expr7_0 = constructor_output_xmm(ctx, expr6_0)?;
 8758|      0|                                return Some(expr7_0);
 8759|      0|                            }
 8760|       |                        }
 8761|       |                        &Opcode::UwidenLow  => {
 8762|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8763|      0|                            if pattern7_0 == I8X16 {
 8764|       |                                // Rule at src/isa/x64/lower.isle line 3238.
 8765|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 8766|      0|                                let expr1_0 = constructor_x64_pmovzxbw(ctx, &expr0_0)?;
 8767|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 8768|      0|                                return Some(expr2_0);
 8769|      0|                            }
 8770|       |                        }
 8771|       |                        &Opcode::UwidenHigh  => {
 8772|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 8773|      0|                            if pattern7_0 == I8X16 {
 8774|       |                                // Rule at src/isa/x64/lower.isle line 3249.
 8775|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 8776|      0|                                let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 8777|      0|                                let expr2_0: u8 = 8i128 as u8;
 8778|      0|                                let expr3_0 = OperandSize::Size32;
 8779|      0|                                let expr4_0 = constructor_x64_palignr(ctx, expr0_0, &expr1_0, expr2_0, &expr3_0)?;
 8780|      0|                                let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
 8781|      0|                                let expr6_0 = constructor_x64_pmovzxbw(ctx, &expr5_0)?;
 8782|      0|                                let expr7_0 = constructor_output_xmm(ctx, expr6_0)?;
 8783|      0|                                return Some(expr7_0);
 8784|      0|                            }
 8785|       |                        }
 8786|      0|                        _ => {}
 8787|       |                    }
 8788|       |                }
 8789|      0|                &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } => {
 8790|      0|                    match pattern5_0 {
 8791|       |                        &Opcode::Uload8x8  => {
 8792|       |                            // Rule at src/isa/x64/lower.isle line 2550.
 8793|      0|                            let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 8794|      0|                            let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 8795|      0|                            let expr2_0 = constructor_x64_pmovzxbw(ctx, &expr1_0)?;
 8796|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8797|      0|                            return Some(expr3_0);
 8798|       |                        }
 8799|       |                        &Opcode::Sload8x8  => {
 8800|       |                            // Rule at src/isa/x64/lower.isle line 2548.
 8801|      0|                            let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 8802|      0|                            let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 8803|      0|                            let expr2_0 = constructor_x64_pmovsxbw(ctx, &expr1_0)?;
 8804|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8805|      0|                            return Some(expr3_0);
 8806|       |                        }
 8807|      0|                        _ => {}
 8808|       |                    }
 8809|       |                }
 8810|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 8811|      0|                    match pattern5_0 {
 8812|       |                        &Opcode::Imin  => {
 8813|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8814|       |                            // Rule at src/isa/x64/lower.isle line 1382.
 8815|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8816|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8817|      0|                            let expr2_0 = constructor_x64_pminsw(ctx, expr0_0, &expr1_0)?;
 8818|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8819|      0|                            return Some(expr3_0);
 8820|       |                        }
 8821|       |                        &Opcode::Umin  => {
 8822|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8823|       |                            // Rule at src/isa/x64/lower.isle line 1404.
 8824|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8825|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8826|      0|                            let expr2_0 = constructor_x64_pminuw(ctx, expr0_0, &expr1_0)?;
 8827|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8828|      0|                            return Some(expr3_0);
 8829|       |                        }
 8830|       |                        &Opcode::Imax  => {
 8831|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8832|       |                            // Rule at src/isa/x64/lower.isle line 1371.
 8833|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8834|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8835|      0|                            let expr2_0 = constructor_x64_pmaxsw(ctx, expr0_0, &expr1_0)?;
 8836|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8837|      0|                            return Some(expr3_0);
 8838|       |                        }
 8839|       |                        &Opcode::Umax  => {
 8840|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8841|       |                            // Rule at src/isa/x64/lower.isle line 1393.
 8842|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8843|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8844|      0|                            let expr2_0 = constructor_x64_pmaxuw(ctx, expr0_0, &expr1_0)?;
 8845|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8846|      0|                            return Some(expr3_0);
 8847|       |                        }
 8848|       |                        &Opcode::Ishl  => {
 8849|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8850|      0|                            // Rule at src/isa/x64/lower.isle line 552.
 8851|      0|                            let expr0_0: Type = I64;
 8852|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 8853|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 8854|      0|                            let expr3_0 = RegMemImm::Imm {
 8855|      0|                                simm32: expr2_0,
 8856|      0|                            };
 8857|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 8858|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 8859|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 8860|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8861|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 8862|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 8863|      0|                            let expr10_0 = constructor_x64_psllw(ctx, expr7_0, &expr9_0)?;
 8864|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 8865|      0|                            return Some(expr11_0);
 8866|       |                        }
 8867|       |                        &Opcode::Ushr  => {
 8868|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8869|      0|                            // Rule at src/isa/x64/lower.isle line 659.
 8870|      0|                            let expr0_0: Type = I64;
 8871|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 8872|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 8873|      0|                            let expr3_0 = RegMemImm::Imm {
 8874|      0|                                simm32: expr2_0,
 8875|      0|                            };
 8876|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 8877|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 8878|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 8879|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8880|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 8881|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 8882|      0|                            let expr10_0 = constructor_x64_psrlw(ctx, expr7_0, &expr9_0)?;
 8883|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 8884|      0|                            return Some(expr11_0);
 8885|       |                        }
 8886|       |                        &Opcode::Sshr  => {
 8887|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8888|      0|                            // Rule at src/isa/x64/lower.isle line 762.
 8889|      0|                            let expr0_0: Type = I64;
 8890|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 8891|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 8892|      0|                            let expr3_0 = RegMemImm::Imm {
 8893|      0|                                simm32: expr2_0,
 8894|      0|                            };
 8895|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 8896|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 8897|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 8898|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8899|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 8900|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 8901|      0|                            let expr10_0 = constructor_x64_psraw(ctx, expr7_0, &expr9_0)?;
 8902|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 8903|      0|                            return Some(expr11_0);
 8904|       |                        }
 8905|       |                        &Opcode::Snarrow  => {
 8906|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8907|      0|                            let pattern8_0 = C::value_type(ctx, pattern7_0);
 8908|      0|                            if pattern8_0 == I32X4 {
 8909|       |                                // Rule at src/isa/x64/lower.isle line 3265.
 8910|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8911|      0|                                let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8912|      0|                                let expr2_0 = constructor_x64_packssdw(ctx, expr0_0, &expr1_0)?;
 8913|      0|                                let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8914|      0|                                return Some(expr3_0);
 8915|      0|                            }
 8916|       |                        }
 8917|       |                        &Opcode::Unarrow  => {
 8918|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8919|      0|                            let pattern8_0 = C::value_type(ctx, pattern7_0);
 8920|      0|                            if pattern8_0 == I32X4 {
 8921|       |                                // Rule at src/isa/x64/lower.isle line 3299.
 8922|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 8923|      0|                                let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 8924|      0|                                let expr2_0 = constructor_x64_packusdw(ctx, expr0_0, &expr1_0)?;
 8925|      0|                                let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 8926|      0|                                return Some(expr3_0);
 8927|      0|                            }
 8928|       |                        }
 8929|       |                        &Opcode::IaddPairwise  => {
 8930|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 8931|      0|                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
 8932|      0|                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
 8933|      0|                                if let &InstructionData::Unary { opcode: ref pattern10_0, arg: pattern10_1 } = &pattern9_0 {
 8934|      0|                                    match pattern10_0 {
 8935|       |                                        &Opcode::SwidenLow  => {
 8936|      0|                                            let pattern12_0 = C::value_type(ctx, pattern10_1);
 8937|      0|                                            if pattern12_0 == I8X16 {
 8938|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1) {
 8939|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
 8940|      0|                                                    if let &InstructionData::Unary { opcode: ref pattern16_0, arg: pattern16_1 } = &pattern15_0 {
 8941|      0|                                                        if let &Opcode::SwidenHigh  = pattern16_0 {
 8942|      0|                                                            if pattern16_1 == pattern10_1 {
 8943|       |                                                                // Rule at src/isa/x64/lower.isle line 3178.
 8944|      0|                                                                let expr0_0: Type = I8X16;
 8945|      0|                                                                let expr1_0 = C::iadd_pairwise_mul_const_16(ctx, );
 8946|      0|                                                                let expr2_0 = constructor_x64_xmm_load_const(ctx, expr0_0, expr1_0)?;
 8947|      0|                                                                let expr3_0 = C::put_in_xmm_mem(ctx, pattern10_1);
 8948|      0|                                                                let expr4_0 = constructor_x64_pmaddubsw(ctx, expr2_0, &expr3_0)?;
 8949|      0|                                                                let expr5_0 = constructor_output_xmm(ctx, expr4_0)?;
 8950|      0|                                                                return Some(expr5_0);
 8951|      0|                                                            }
 8952|      0|                                                        }
 8953|      0|                                                    }
 8954|      0|                                                }
 8955|      0|                                            }
 8956|       |                                        }
 8957|       |                                        &Opcode::UwidenLow  => {
 8958|      0|                                            let pattern12_0 = C::value_type(ctx, pattern10_1);
 8959|      0|                                            if pattern12_0 == I8X16 {
 8960|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1) {
 8961|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
 8962|      0|                                                    if let &InstructionData::Unary { opcode: ref pattern16_0, arg: pattern16_1 } = &pattern15_0 {
 8963|      0|                                                        if let &Opcode::UwidenHigh  = pattern16_0 {
 8964|      0|                                                            if pattern16_1 == pattern10_1 {
 8965|       |                                                                // Rule at src/isa/x64/lower.isle line 3192.
 8966|      0|                                                                let expr0_0: Type = I8X16;
 8967|      0|                                                                let expr1_0 = C::iadd_pairwise_mul_const_16(ctx, );
 8968|      0|                                                                let expr2_0 = constructor_x64_xmm_load_const(ctx, expr0_0, expr1_0)?;
 8969|      0|                                                                let expr3_0 = constructor_put_in_xmm(ctx, pattern10_1)?;
 8970|      0|                                                                let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
 8971|      0|                                                                let expr5_0 = constructor_x64_pmaddubsw(ctx, expr3_0, &expr4_0)?;
 8972|      0|                                                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 8973|      0|                                                                return Some(expr6_0);
 8974|      0|                                                            }
 8975|      0|                                                        }
 8976|      0|                                                    }
 8977|      0|                                                }
 8978|      0|                                            }
 8979|       |                                        }
 8980|      0|                                        _ => {}
 8981|       |                                    }
 8982|      0|                                }
 8983|      0|                            }
 8984|       |                        }
 8985|      0|                        _ => {}
 8986|       |                    }
 8987|       |                }
 8988|      0|                _ => {}
 8989|       |            }
 8990|  39.3k|        }
 8991|  39.3k|        if pattern2_0 == I32X4 {
 8992|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 8993|      0|            match &pattern4_0 {
 8994|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 8995|      0|                    match pattern5_0 {
 8996|       |                        &Opcode::Ineg  => {
 8997|       |                            // Rule at src/isa/x64/lower.isle line 845.
 8998|      0|                            let expr0_0: Type = I32X4;
 8999|      0|                            let expr1_0: u64 = 0i128 as u64;
 9000|      0|                            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 9001|      0|                            let expr3_0 = C::xmm_new(ctx, expr2_0);
 9002|      0|                            let expr4_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9003|      0|                            let expr5_0 = constructor_x64_psubd(ctx, expr3_0, &expr4_0)?;
 9004|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 9005|      0|                            return Some(expr6_0);
 9006|       |                        }
 9007|       |                        &Opcode::Iabs  => {
 9008|       |                            // Rule at src/isa/x64/lower.isle line 1166.
 9009|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9010|      0|                            let expr1_0 = constructor_x64_pabsd(ctx, &expr0_0)?;
 9011|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9012|      0|                            return Some(expr2_0);
 9013|       |                        }
 9014|       |                        &Opcode::SwidenLow  => {
 9015|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9016|      0|                            if pattern7_0 == I16X8 {
 9017|       |                                // Rule at src/isa/x64/lower.isle line 3217.
 9018|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9019|      0|                                let expr1_0 = constructor_x64_pmovsxwd(ctx, &expr0_0)?;
 9020|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9021|      0|                                return Some(expr2_0);
 9022|      0|                            }
 9023|       |                        }
 9024|       |                        &Opcode::SwidenHigh  => {
 9025|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9026|      0|                            if pattern7_0 == I16X8 {
 9027|       |                                // Rule at src/isa/x64/lower.isle line 3229.
 9028|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9029|      0|                                let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 9030|      0|                                let expr2_0: u8 = 8i128 as u8;
 9031|      0|                                let expr3_0 = OperandSize::Size32;
 9032|      0|                                let expr4_0 = constructor_x64_palignr(ctx, expr0_0, &expr1_0, expr2_0, &expr3_0)?;
 9033|      0|                                let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
 9034|      0|                                let expr6_0 = constructor_x64_pmovsxwd(ctx, &expr5_0)?;
 9035|      0|                                let expr7_0 = constructor_output_xmm(ctx, expr6_0)?;
 9036|      0|                                return Some(expr7_0);
 9037|      0|                            }
 9038|       |                        }
 9039|       |                        &Opcode::UwidenLow  => {
 9040|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9041|      0|                            if pattern7_0 == I16X8 {
 9042|       |                                // Rule at src/isa/x64/lower.isle line 3241.
 9043|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9044|      0|                                let expr1_0 = constructor_x64_pmovzxwd(ctx, &expr0_0)?;
 9045|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9046|      0|                                return Some(expr2_0);
 9047|      0|                            }
 9048|       |                        }
 9049|       |                        &Opcode::UwidenHigh  => {
 9050|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9051|      0|                            if pattern7_0 == I16X8 {
 9052|       |                                // Rule at src/isa/x64/lower.isle line 3253.
 9053|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9054|      0|                                let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 9055|      0|                                let expr2_0: u8 = 8i128 as u8;
 9056|      0|                                let expr3_0 = OperandSize::Size32;
 9057|      0|                                let expr4_0 = constructor_x64_palignr(ctx, expr0_0, &expr1_0, expr2_0, &expr3_0)?;
 9058|      0|                                let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
 9059|      0|                                let expr6_0 = constructor_x64_pmovzxwd(ctx, &expr5_0)?;
 9060|      0|                                let expr7_0 = constructor_output_xmm(ctx, expr6_0)?;
 9061|      0|                                return Some(expr7_0);
 9062|      0|                            }
 9063|       |                        }
 9064|       |                        &Opcode::FcvtToUintSat  => {
 9065|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9066|      0|                            if pattern7_0 == F32X4 {
 9067|       |                                // Rule at src/isa/x64/lower.isle line 3131.
 9068|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9069|      0|                                let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 9070|      0|                                let expr2_0 = constructor_x64_pxor(ctx, expr0_0, &expr1_0)?;
 9071|      0|                                let expr3_0 = constructor_x64_maxps(ctx, expr0_0, expr2_0)?;
 9072|      0|                                let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
 9073|      0|                                let expr5_0 = constructor_x64_pcmpeqd(ctx, expr2_0, &expr4_0)?;
 9074|      0|                                let expr6_0: u32 = 1i128 as u32;
 9075|      0|                                let expr7_0 = RegMemImm::Imm {
 9076|      0|                                    simm32: expr6_0,
 9077|      0|                                };
 9078|      0|                                let expr8_0 = constructor_mov_rmi_to_xmm(ctx, &expr7_0)?;
 9079|      0|                                let expr9_0 = constructor_x64_psrld(ctx, expr5_0, &expr8_0)?;
 9080|      0|                                let expr10_0 = constructor_x64_cvtdq2ps(ctx, expr9_0)?;
 9081|      0|                                let expr11_0: Type = F32X4;
 9082|      0|                                let expr12_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
 9083|      0|                                let expr13_0 = constructor_x64_cvttps2dq(ctx, expr11_0, &expr12_0)?;
 9084|      0|                                let expr14_0 = C::xmm_to_xmm_mem(ctx, expr10_0);
 9085|      0|                                let expr15_0 = constructor_x64_subps(ctx, expr3_0, &expr14_0)?;
 9086|      0|                                let expr16_0 = C::xmm_to_xmm_mem(ctx, expr15_0);
 9087|      0|                                let expr17_0 = FcmpImm::LessThanOrEqual;
 9088|      0|                                let expr18_0 = constructor_x64_cmpps(ctx, expr10_0, &expr16_0, &expr17_0)?;
 9089|      0|                                let expr19_0: Type = F32X4;
 9090|      0|                                let expr20_0 = C::xmm_to_xmm_mem(ctx, expr15_0);
 9091|      0|                                let expr21_0 = constructor_x64_cvttps2dq(ctx, expr19_0, &expr20_0)?;
 9092|      0|                                let expr22_0 = C::xmm_to_xmm_mem(ctx, expr18_0);
 9093|      0|                                let expr23_0 = constructor_x64_pxor(ctx, expr21_0, &expr22_0)?;
 9094|      0|                                let expr24_0 = C::xmm_to_xmm_mem(ctx, expr18_0);
 9095|      0|                                let expr25_0 = constructor_x64_pxor(ctx, expr18_0, &expr24_0)?;
 9096|      0|                                let expr26_0 = C::xmm_to_xmm_mem(ctx, expr25_0);
 9097|      0|                                let expr27_0 = constructor_x64_pmaxsd(ctx, expr23_0, &expr26_0)?;
 9098|      0|                                let expr28_0 = C::xmm_to_xmm_mem(ctx, expr13_0);
 9099|      0|                                let expr29_0 = constructor_x64_paddd(ctx, expr27_0, &expr28_0)?;
 9100|      0|                                let expr30_0 = constructor_output_xmm(ctx, expr29_0)?;
 9101|      0|                                return Some(expr30_0);
 9102|      0|                            }
 9103|       |                        }
 9104|       |                        &Opcode::FcvtToSintSat  => {
 9105|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9106|      0|                            if pattern7_0 == F32X4 {
 9107|       |                                // Rule at src/isa/x64/lower.isle line 3060.
 9108|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9109|      0|                                let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 9110|      0|                                let expr2_0 = FcmpImm::Equal;
 9111|      0|                                let expr3_0 = constructor_x64_cmpps(ctx, expr0_0, &expr1_0, &expr2_0)?;
 9112|      0|                                let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
 9113|      0|                                let expr5_0 = constructor_x64_andps(ctx, expr0_0, &expr4_0)?;
 9114|      0|                                let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9115|      0|                                let expr7_0 = constructor_x64_pxor(ctx, expr3_0, &expr6_0)?;
 9116|      0|                                let expr8_0: Type = F32X4;
 9117|      0|                                let expr9_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9118|      0|                                let expr10_0 = constructor_x64_cvttps2dq(ctx, expr8_0, &expr9_0)?;
 9119|      0|                                let expr11_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 9120|      0|                                let expr12_0 = constructor_x64_pand(ctx, expr10_0, &expr11_0)?;
 9121|      0|                                let expr13_0: u32 = 31i128 as u32;
 9122|      0|                                let expr14_0 = RegMemImm::Imm {
 9123|      0|                                    simm32: expr13_0,
 9124|      0|                                };
 9125|      0|                                let expr15_0 = constructor_mov_rmi_to_xmm(ctx, &expr14_0)?;
 9126|      0|                                let expr16_0 = constructor_x64_psrad(ctx, expr12_0, &expr15_0)?;
 9127|      0|                                let expr17_0 = C::xmm_to_xmm_mem(ctx, expr10_0);
 9128|      0|                                let expr18_0 = constructor_x64_pxor(ctx, expr16_0, &expr17_0)?;
 9129|      0|                                let expr19_0 = constructor_output_xmm(ctx, expr18_0)?;
 9130|      0|                                return Some(expr19_0);
 9131|      0|                            }
 9132|       |                        }
 9133|      0|                        _ => {}
 9134|       |                    }
 9135|       |                }
 9136|      0|                &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } => {
 9137|      0|                    match pattern5_0 {
 9138|       |                        &Opcode::Uload16x4  => {
 9139|       |                            // Rule at src/isa/x64/lower.isle line 2554.
 9140|      0|                            let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 9141|      0|                            let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 9142|      0|                            let expr2_0 = constructor_x64_pmovzxwd(ctx, &expr1_0)?;
 9143|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9144|      0|                            return Some(expr3_0);
 9145|       |                        }
 9146|       |                        &Opcode::Sload16x4  => {
 9147|       |                            // Rule at src/isa/x64/lower.isle line 2552.
 9148|      0|                            let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 9149|      0|                            let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 9150|      0|                            let expr2_0 = constructor_x64_pmovsxwd(ctx, &expr1_0)?;
 9151|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9152|      0|                            return Some(expr3_0);
 9153|       |                        }
 9154|      0|                        _ => {}
 9155|       |                    }
 9156|       |                }
 9157|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 9158|      0|                    match pattern5_0 {
 9159|       |                        &Opcode::Imin  => {
 9160|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9161|       |                            // Rule at src/isa/x64/lower.isle line 1385.
 9162|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9163|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9164|      0|                            let expr2_0 = constructor_x64_pminsd(ctx, expr0_0, &expr1_0)?;
 9165|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9166|      0|                            return Some(expr3_0);
 9167|       |                        }
 9168|       |                        &Opcode::Umin  => {
 9169|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9170|       |                            // Rule at src/isa/x64/lower.isle line 1407.
 9171|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9172|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9173|      0|                            let expr2_0 = constructor_x64_pminud(ctx, expr0_0, &expr1_0)?;
 9174|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9175|      0|                            return Some(expr3_0);
 9176|       |                        }
 9177|       |                        &Opcode::Imax  => {
 9178|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9179|       |                            // Rule at src/isa/x64/lower.isle line 1374.
 9180|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9181|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9182|      0|                            let expr2_0 = constructor_x64_pmaxsd(ctx, expr0_0, &expr1_0)?;
 9183|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9184|      0|                            return Some(expr3_0);
 9185|       |                        }
 9186|       |                        &Opcode::Umax  => {
 9187|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9188|       |                            // Rule at src/isa/x64/lower.isle line 1396.
 9189|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9190|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9191|      0|                            let expr2_0 = constructor_x64_pmaxud(ctx, expr0_0, &expr1_0)?;
 9192|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9193|      0|                            return Some(expr3_0);
 9194|       |                        }
 9195|       |                        &Opcode::Ishl  => {
 9196|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9197|      0|                            // Rule at src/isa/x64/lower.isle line 556.
 9198|      0|                            let expr0_0: Type = I64;
 9199|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 9200|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 9201|      0|                            let expr3_0 = RegMemImm::Imm {
 9202|      0|                                simm32: expr2_0,
 9203|      0|                            };
 9204|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 9205|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 9206|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 9207|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9208|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 9209|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 9210|      0|                            let expr10_0 = constructor_x64_pslld(ctx, expr7_0, &expr9_0)?;
 9211|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 9212|      0|                            return Some(expr11_0);
 9213|       |                        }
 9214|       |                        &Opcode::Ushr  => {
 9215|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9216|      0|                            // Rule at src/isa/x64/lower.isle line 663.
 9217|      0|                            let expr0_0: Type = I64;
 9218|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 9219|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 9220|      0|                            let expr3_0 = RegMemImm::Imm {
 9221|      0|                                simm32: expr2_0,
 9222|      0|                            };
 9223|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 9224|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 9225|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 9226|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9227|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 9228|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 9229|      0|                            let expr10_0 = constructor_x64_psrld(ctx, expr7_0, &expr9_0)?;
 9230|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 9231|      0|                            return Some(expr11_0);
 9232|       |                        }
 9233|       |                        &Opcode::Sshr  => {
 9234|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9235|      0|                            // Rule at src/isa/x64/lower.isle line 766.
 9236|      0|                            let expr0_0: Type = I64;
 9237|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 9238|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 9239|      0|                            let expr3_0 = RegMemImm::Imm {
 9240|      0|                                simm32: expr2_0,
 9241|      0|                            };
 9242|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 9243|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 9244|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 9245|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9246|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 9247|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 9248|      0|                            let expr10_0 = constructor_x64_psrad(ctx, expr7_0, &expr9_0)?;
 9249|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 9250|      0|                            return Some(expr11_0);
 9251|       |                        }
 9252|       |                        &Opcode::Snarrow  => {
 9253|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9254|      0|                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
 9255|      0|                                if let Some(pattern9_0) = C::first_result(ctx, pattern8_0) {
 9256|      0|                                    let pattern10_0 = C::value_type(ctx, pattern9_0);
 9257|      0|                                    if pattern10_0 == I64X2 {
 9258|      0|                                        let pattern12_0 = C::inst_data(ctx, pattern8_0);
 9259|      0|                                        if let &InstructionData::Unary { opcode: ref pattern13_0, arg: pattern13_1 } = &pattern12_0 {
 9260|      0|                                            if let &Opcode::FcvtToSintSat  = pattern13_0 {
 9261|      0|                                                if let Some(pattern15_0) = C::def_inst(ctx, pattern7_1) {
 9262|      0|                                                    let pattern16_0 = C::inst_data(ctx, pattern15_0);
 9263|      0|                                                    if let &InstructionData::UnaryConst { opcode: ref pattern17_0, constant_handle: pattern17_1 } = &pattern16_0 {
 9264|      0|                                                        if let &Opcode::Vconst  = pattern17_0 {
 9265|      0|                                                            if let Some(pattern19_0) = C::u128_from_constant(ctx, pattern17_1) {
 9266|      0|                                                                if pattern19_0 == 0i128 as u128  {
 9267|       |                                                                    // Rule at src/isa/x64/lower.isle line 3274.
 9268|      0|                                                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern13_1)?;
 9269|      0|                                                                    let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 9270|      0|                                                                    let expr2_0 = FcmpImm::Equal;
 9271|      0|                                                                    let expr3_0 = constructor_x64_cmppd(ctx, expr0_0, &expr1_0, &expr2_0)?;
 9272|      0|                                                                    let expr4_0: Type = F64X2;
 9273|      0|                                                                    let expr5_0 = C::snarrow_umax_mask(ctx, );
 9274|      0|                                                                    let expr6_0 = constructor_x64_xmm_load_const(ctx, expr4_0, expr5_0)?;
 9275|      0|                                                                    let expr7_0 = C::xmm_to_xmm_mem(ctx, expr6_0);
 9276|      0|                                                                    let expr8_0 = constructor_x64_andps(ctx, expr3_0, &expr7_0)?;
 9277|      0|                                                                    let expr9_0 = constructor_x64_minpd(ctx, expr0_0, expr8_0)?;
 9278|      0|                                                                    let expr10_0 = C::xmm_to_xmm_mem(ctx, expr9_0);
 9279|      0|                                                                    let expr11_0 = constructor_x64_cvttpd2dq(ctx, &expr10_0)?;
 9280|      0|                                                                    let expr12_0 = constructor_output_xmm(ctx, expr11_0)?;
 9281|      0|                                                                    return Some(expr12_0);
 9282|      0|                                                                }
 9283|      0|                                                            }
 9284|      0|                                                        }
 9285|      0|                                                    }
 9286|      0|                                                }
 9287|      0|                                            }
 9288|      0|                                        }
 9289|      0|                                    }
 9290|      0|                                }
 9291|      0|                            }
 9292|       |                        }
 9293|       |                        &Opcode::IaddPairwise  => {
 9294|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9295|      0|                            if let Some(pattern8_0) = C::def_inst(ctx, pattern7_0) {
 9296|      0|                                let pattern9_0 = C::inst_data(ctx, pattern8_0);
 9297|      0|                                if let &InstructionData::Unary { opcode: ref pattern10_0, arg: pattern10_1 } = &pattern9_0 {
 9298|      0|                                    match pattern10_0 {
 9299|       |                                        &Opcode::SwidenLow  => {
 9300|      0|                                            let pattern12_0 = C::value_type(ctx, pattern10_1);
 9301|      0|                                            if pattern12_0 == I16X8 {
 9302|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1) {
 9303|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
 9304|      0|                                                    if let &InstructionData::Unary { opcode: ref pattern16_0, arg: pattern16_1 } = &pattern15_0 {
 9305|      0|                                                        if let &Opcode::SwidenHigh  = pattern16_0 {
 9306|      0|                                                            if pattern16_1 == pattern10_1 {
 9307|       |                                                                // Rule at src/isa/x64/lower.isle line 3185.
 9308|      0|                                                                let expr0_0: Type = I16X8;
 9309|      0|                                                                let expr1_0 = C::iadd_pairwise_mul_const_32(ctx, );
 9310|      0|                                                                let expr2_0 = constructor_x64_xmm_load_const(ctx, expr0_0, expr1_0)?;
 9311|      0|                                                                let expr3_0 = constructor_put_in_xmm(ctx, pattern10_1)?;
 9312|      0|                                                                let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
 9313|      0|                                                                let expr5_0 = constructor_x64_pmaddwd(ctx, expr3_0, &expr4_0)?;
 9314|      0|                                                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 9315|      0|                                                                return Some(expr6_0);
 9316|      0|                                                            }
 9317|      0|                                                        }
 9318|      0|                                                    }
 9319|      0|                                                }
 9320|      0|                                            }
 9321|       |                                        }
 9322|       |                                        &Opcode::UwidenLow  => {
 9323|      0|                                            let pattern12_0 = C::value_type(ctx, pattern10_1);
 9324|      0|                                            if pattern12_0 == I16X8 {
 9325|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern7_1) {
 9326|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
 9327|      0|                                                    if let &InstructionData::Unary { opcode: ref pattern16_0, arg: pattern16_1 } = &pattern15_0 {
 9328|      0|                                                        if let &Opcode::UwidenHigh  = pattern16_0 {
 9329|      0|                                                            if pattern16_1 == pattern10_1 {
 9330|       |                                                                // Rule at src/isa/x64/lower.isle line 3199.
 9331|      0|                                                                let expr0_0: Type = I16X8;
 9332|      0|                                                                let expr1_0 = C::iadd_pairwise_xor_const_32(ctx, );
 9333|      0|                                                                let expr2_0 = constructor_x64_xmm_load_const(ctx, expr0_0, expr1_0)?;
 9334|      0|                                                                let expr3_0 = constructor_put_in_xmm(ctx, pattern10_1)?;
 9335|      0|                                                                let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
 9336|      0|                                                                let expr5_0 = constructor_x64_pxor(ctx, expr3_0, &expr4_0)?;
 9337|      0|                                                                let expr6_0: Type = I16X8;
 9338|      0|                                                                let expr7_0 = C::iadd_pairwise_mul_const_32(ctx, );
 9339|      0|                                                                let expr8_0 = constructor_x64_xmm_load_const(ctx, expr6_0, expr7_0)?;
 9340|      0|                                                                let expr9_0 = C::xmm_to_xmm_mem(ctx, expr8_0);
 9341|      0|                                                                let expr10_0 = constructor_x64_pmaddwd(ctx, expr5_0, &expr9_0)?;
 9342|      0|                                                                let expr11_0: Type = I16X8;
 9343|      0|                                                                let expr12_0 = C::iadd_pairwise_addd_const_32(ctx, );
 9344|      0|                                                                let expr13_0 = constructor_x64_xmm_load_const(ctx, expr11_0, expr12_0)?;
 9345|      0|                                                                let expr14_0 = C::xmm_to_xmm_mem(ctx, expr13_0);
 9346|      0|                                                                let expr15_0 = constructor_x64_paddd(ctx, expr10_0, &expr14_0)?;
 9347|      0|                                                                let expr16_0 = constructor_output_xmm(ctx, expr15_0)?;
 9348|      0|                                                                return Some(expr16_0);
 9349|      0|                                                            }
 9350|      0|                                                        }
 9351|      0|                                                    }
 9352|      0|                                                }
 9353|      0|                                            }
 9354|       |                                        }
 9355|      0|                                        _ => {}
 9356|       |                                    }
 9357|      0|                                }
 9358|      0|                            }
 9359|       |                        }
 9360|       |                        &Opcode::WideningPairwiseDotProductS  => {
 9361|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9362|       |                            // Rule at src/isa/x64/lower.isle line 2208.
 9363|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9364|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9365|      0|                            let expr2_0 = constructor_x64_pmaddwd(ctx, expr0_0, &expr1_0)?;
 9366|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9367|      0|                            return Some(expr3_0);
 9368|       |                        }
 9369|      0|                        _ => {}
 9370|       |                    }
 9371|       |                }
 9372|      0|                _ => {}
 9373|       |            }
 9374|  39.3k|        }
 9375|  39.3k|        if pattern2_0 == I64X2 {
 9376|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 9377|      0|            match &pattern4_0 {
 9378|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 9379|      0|                    match pattern5_0 {
 9380|       |                        &Opcode::Ineg  => {
 9381|       |                            // Rule at src/isa/x64/lower.isle line 848.
 9382|      0|                            let expr0_0: Type = I64X2;
 9383|      0|                            let expr1_0: u64 = 0i128 as u64;
 9384|      0|                            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 9385|      0|                            let expr3_0 = C::xmm_new(ctx, expr2_0);
 9386|      0|                            let expr4_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9387|      0|                            let expr5_0 = constructor_x64_psubq(ctx, expr3_0, &expr4_0)?;
 9388|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 9389|      0|                            return Some(expr6_0);
 9390|       |                        }
 9391|       |                        &Opcode::Iabs  => {
 9392|       |                            // Rule at src/isa/x64/lower.isle line 1180.
 9393|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9394|      0|                            let expr1_0: Type = I64X2;
 9395|      0|                            let expr2_0: u64 = 0i128 as u64;
 9396|      0|                            let expr3_0 = constructor_imm(ctx, expr1_0, expr2_0)?;
 9397|      0|                            let expr4_0 = C::xmm_new(ctx, expr3_0);
 9398|      0|                            let expr5_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 9399|      0|                            let expr6_0 = constructor_x64_psubq(ctx, expr4_0, &expr5_0)?;
 9400|      0|                            let expr7_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
 9401|      0|                            let expr8_0 = constructor_x64_blendvpd(ctx, expr6_0, &expr7_0, expr6_0)?;
 9402|      0|                            let expr9_0 = constructor_output_xmm(ctx, expr8_0)?;
 9403|      0|                            return Some(expr9_0);
 9404|       |                        }
 9405|       |                        &Opcode::SwidenLow  => {
 9406|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9407|      0|                            if pattern7_0 == I32X4 {
 9408|       |                                // Rule at src/isa/x64/lower.isle line 3220.
 9409|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9410|      0|                                let expr1_0 = constructor_x64_pmovsxdq(ctx, &expr0_0)?;
 9411|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9412|      0|                                return Some(expr2_0);
 9413|      0|                            }
 9414|       |                        }
 9415|       |                        &Opcode::SwidenHigh  => {
 9416|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9417|      0|                            if pattern7_0 == I32X4 {
 9418|       |                                // Rule at src/isa/x64/lower.isle line 3233.
 9419|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9420|      0|                                let expr1_0: u8 = 238i128 as u8;
 9421|      0|                                let expr2_0 = OperandSize::Size32;
 9422|      0|                                let expr3_0 = constructor_x64_pshufd(ctx, &expr0_0, expr1_0, &expr2_0)?;
 9423|      0|                                let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
 9424|      0|                                let expr5_0 = constructor_x64_pmovsxdq(ctx, &expr4_0)?;
 9425|      0|                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 9426|      0|                                return Some(expr6_0);
 9427|      0|                            }
 9428|       |                        }
 9429|       |                        &Opcode::UwidenLow  => {
 9430|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9431|      0|                            if pattern7_0 == I32X4 {
 9432|       |                                // Rule at src/isa/x64/lower.isle line 3244.
 9433|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9434|      0|                                let expr1_0 = constructor_x64_pmovzxdq(ctx, &expr0_0)?;
 9435|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9436|      0|                                return Some(expr2_0);
 9437|      0|                            }
 9438|       |                        }
 9439|       |                        &Opcode::UwidenHigh  => {
 9440|      0|                            let pattern7_0 = C::value_type(ctx, pattern5_1);
 9441|      0|                            if pattern7_0 == I32X4 {
 9442|       |                                // Rule at src/isa/x64/lower.isle line 3257.
 9443|      0|                                let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
 9444|      0|                                let expr1_0: u8 = 238i128 as u8;
 9445|      0|                                let expr2_0 = OperandSize::Size32;
 9446|      0|                                let expr3_0 = constructor_x64_pshufd(ctx, &expr0_0, expr1_0, &expr2_0)?;
 9447|      0|                                let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
 9448|      0|                                let expr5_0 = constructor_x64_pmovzxdq(ctx, &expr4_0)?;
 9449|      0|                                let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
 9450|      0|                                return Some(expr6_0);
 9451|      0|                            }
 9452|       |                        }
 9453|      0|                        _ => {}
 9454|       |                    }
 9455|       |                }
 9456|      0|                &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } => {
 9457|      0|                    match pattern5_0 {
 9458|       |                        &Opcode::Uload32x2  => {
 9459|       |                            // Rule at src/isa/x64/lower.isle line 2558.
 9460|      0|                            let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 9461|      0|                            let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 9462|      0|                            let expr2_0 = constructor_x64_pmovzxdq(ctx, &expr1_0)?;
 9463|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9464|      0|                            return Some(expr3_0);
 9465|       |                        }
 9466|       |                        &Opcode::Sload32x2  => {
 9467|       |                            // Rule at src/isa/x64/lower.isle line 2556.
 9468|      0|                            let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 9469|      0|                            let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 9470|      0|                            let expr2_0 = constructor_x64_pmovsxdq(ctx, &expr1_0)?;
 9471|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9472|      0|                            return Some(expr3_0);
 9473|       |                        }
 9474|      0|                        _ => {}
 9475|       |                    }
 9476|       |                }
 9477|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 9478|      0|                    match pattern5_0 {
 9479|       |                        &Opcode::Ishl  => {
 9480|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9481|      0|                            // Rule at src/isa/x64/lower.isle line 560.
 9482|      0|                            let expr0_0: Type = I64;
 9483|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 9484|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 9485|      0|                            let expr3_0 = RegMemImm::Imm {
 9486|      0|                                simm32: expr2_0,
 9487|      0|                            };
 9488|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 9489|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 9490|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 9491|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9492|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 9493|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 9494|      0|                            let expr10_0 = constructor_x64_psllq(ctx, expr7_0, &expr9_0)?;
 9495|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 9496|      0|                            return Some(expr11_0);
 9497|       |                        }
 9498|       |                        &Opcode::Ushr  => {
 9499|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9500|      0|                            // Rule at src/isa/x64/lower.isle line 667.
 9501|      0|                            let expr0_0: Type = I64;
 9502|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
 9503|      0|                            let expr2_0 = C::shift_mask(ctx, pattern2_0);
 9504|      0|                            let expr3_0 = RegMemImm::Imm {
 9505|      0|                                simm32: expr2_0,
 9506|      0|                            };
 9507|      0|                            let expr4_0 = C::gpr_mem_imm_new(ctx, &expr3_0);
 9508|      0|                            let expr5_0 = constructor_x64_and(ctx, expr0_0, expr1_0, &expr4_0)?;
 9509|      0|                            let expr6_0 = C::gpr_to_reg(ctx, expr5_0);
 9510|      0|                            let expr7_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9511|      0|                            let expr8_0 = C::reg_to_reg_mem_imm(ctx, expr6_0);
 9512|      0|                            let expr9_0 = constructor_mov_rmi_to_xmm(ctx, &expr8_0)?;
 9513|      0|                            let expr10_0 = constructor_x64_psrlq(ctx, expr7_0, &expr9_0)?;
 9514|      0|                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 9515|      0|                            return Some(expr11_0);
 9516|       |                        }
 9517|       |                        &Opcode::Sshr  => {
 9518|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9519|       |                            // Rule at src/isa/x64/lower.isle line 778.
 9520|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9521|      0|                            let expr1_0: Type = I64;
 9522|      0|                            let expr2_0: u8 = 0i128 as u8;
 9523|      0|                            let expr3_0 = constructor_x64_pextrd(ctx, expr1_0, expr0_0, expr2_0)?;
 9524|      0|                            let expr4_0: Type = I64;
 9525|      0|                            let expr5_0: u8 = 1i128 as u8;
 9526|      0|                            let expr6_0 = constructor_x64_pextrd(ctx, expr4_0, expr0_0, expr5_0)?;
 9527|      0|                            let expr7_0: Type = I64;
 9528|      0|                            let expr8_0 = constructor_put_masked_in_imm8_gpr(ctx, pattern7_1, expr7_0)?;
 9529|      0|                            let expr9_0: Type = I64;
 9530|      0|                            let expr10_0 = constructor_x64_sar(ctx, expr9_0, expr3_0, &expr8_0)?;
 9531|      0|                            let expr11_0: Type = I64;
 9532|      0|                            let expr12_0 = constructor_x64_sar(ctx, expr11_0, expr6_0, &expr8_0)?;
 9533|      0|                            let expr13_0 = C::gpr_to_gpr_mem(ctx, expr10_0);
 9534|      0|                            let expr14_0 = C::gpr_to_gpr_mem(ctx, expr12_0);
 9535|      0|                            let expr15_0 = constructor_make_i64x2_from_lanes(ctx, &expr13_0, &expr14_0)?;
 9536|      0|                            let expr16_0 = constructor_output_xmm(ctx, expr15_0)?;
 9537|      0|                            return Some(expr16_0);
 9538|       |                        }
 9539|      0|                        _ => {}
 9540|       |                    }
 9541|       |                }
 9542|      0|                _ => {}
 9543|       |            }
 9544|  39.3k|        }
 9545|  39.3k|        if pattern2_0 == F32X4 {
 9546|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 9547|      0|            match &pattern4_0 {
 9548|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 9549|      0|                    match pattern5_0 {
 9550|       |                        &Opcode::Sqrt  => {
 9551|       |                            // Rule at src/isa/x64/lower.isle line 2265.
 9552|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9553|      0|                            let expr1_0 = constructor_x64_sqrtps(ctx, expr0_0)?;
 9554|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9555|      0|                            return Some(expr2_0);
 9556|       |                        }
 9557|       |                        &Opcode::Fneg  => {
 9558|       |                            // Rule at src/isa/x64/lower.isle line 1213.
 9559|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9560|      0|                            let expr1_0 = constructor_vector_all_ones(ctx, )?;
 9561|      0|                            let expr2_0: u32 = 31i128 as u32;
 9562|      0|                            let expr3_0 = RegMemImm::Imm {
 9563|      0|                                simm32: expr2_0,
 9564|      0|                            };
 9565|      0|                            let expr4_0 = constructor_mov_rmi_to_xmm(ctx, &expr3_0)?;
 9566|      0|                            let expr5_0 = constructor_x64_pslld(ctx, expr1_0, &expr4_0)?;
 9567|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9568|      0|                            let expr7_0 = constructor_x64_xorps(ctx, expr0_0, &expr6_0)?;
 9569|      0|                            let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
 9570|      0|                            return Some(expr8_0);
 9571|       |                        }
 9572|       |                        &Opcode::Fabs  => {
 9573|       |                            // Rule at src/isa/x64/lower.isle line 1194.
 9574|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9575|      0|                            let expr1_0 = constructor_vector_all_ones(ctx, )?;
 9576|      0|                            let expr2_0: u32 = 1i128 as u32;
 9577|      0|                            let expr3_0 = RegMemImm::Imm {
 9578|      0|                                simm32: expr2_0,
 9579|      0|                            };
 9580|      0|                            let expr4_0 = constructor_mov_rmi_to_xmm(ctx, &expr3_0)?;
 9581|      0|                            let expr5_0 = constructor_x64_psrld(ctx, expr1_0, &expr4_0)?;
 9582|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9583|      0|                            let expr7_0 = constructor_x64_andps(ctx, expr0_0, &expr6_0)?;
 9584|      0|                            let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
 9585|      0|                            return Some(expr8_0);
 9586|       |                        }
 9587|       |                        &Opcode::Fvdemote  => {
 9588|       |                            // Rule at src/isa/x64/lower.isle line 2283.
 9589|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9590|      0|                            let expr1_0 = constructor_x64_cvtpd2ps(ctx, expr0_0)?;
 9591|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9592|      0|                            return Some(expr2_0);
 9593|       |                        }
 9594|       |                        &Opcode::FcvtFromUint  => {
 9595|       |                            // Rule at src/isa/x64/lower.isle line 3023.
 9596|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9597|      0|                            let expr1_0: u32 = 16i128 as u32;
 9598|      0|                            let expr2_0 = RegMemImm::Imm {
 9599|      0|                                simm32: expr1_0,
 9600|      0|                            };
 9601|      0|                            let expr3_0 = constructor_mov_rmi_to_xmm(ctx, &expr2_0)?;
 9602|      0|                            let expr4_0 = constructor_x64_pslld(ctx, expr0_0, &expr3_0)?;
 9603|      0|                            let expr5_0: u32 = 16i128 as u32;
 9604|      0|                            let expr6_0 = RegMemImm::Imm {
 9605|      0|                                simm32: expr5_0,
 9606|      0|                            };
 9607|      0|                            let expr7_0 = constructor_mov_rmi_to_xmm(ctx, &expr6_0)?;
 9608|      0|                            let expr8_0 = constructor_x64_psrld(ctx, expr4_0, &expr7_0)?;
 9609|      0|                            let expr9_0 = C::xmm_to_xmm_mem(ctx, expr8_0);
 9610|      0|                            let expr10_0 = constructor_x64_psubd(ctx, expr0_0, &expr9_0)?;
 9611|      0|                            let expr11_0 = constructor_x64_cvtdq2ps(ctx, expr8_0)?;
 9612|      0|                            let expr12_0: u32 = 1i128 as u32;
 9613|      0|                            let expr13_0 = RegMemImm::Imm {
 9614|      0|                                simm32: expr12_0,
 9615|      0|                            };
 9616|      0|                            let expr14_0 = constructor_mov_rmi_to_xmm(ctx, &expr13_0)?;
 9617|      0|                            let expr15_0 = constructor_x64_psrld(ctx, expr10_0, &expr14_0)?;
 9618|      0|                            let expr16_0 = constructor_x64_cvtdq2ps(ctx, expr15_0)?;
 9619|      0|                            let expr17_0 = C::xmm_to_xmm_mem(ctx, expr16_0);
 9620|      0|                            let expr18_0 = constructor_x64_addps(ctx, expr16_0, &expr17_0)?;
 9621|      0|                            let expr19_0 = C::xmm_to_xmm_mem(ctx, expr11_0);
 9622|      0|                            let expr20_0 = constructor_x64_addps(ctx, expr18_0, &expr19_0)?;
 9623|      0|                            let expr21_0 = constructor_output_xmm(ctx, expr20_0)?;
 9624|      0|                            return Some(expr21_0);
 9625|       |                        }
 9626|      0|                        _ => {}
 9627|       |                    }
 9628|       |                }
 9629|      0|                &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } => {
 9630|      0|                    if let &Opcode::Load  = pattern5_0 {
 9631|       |                        // Rule at src/isa/x64/lower.isle line 2530.
 9632|      0|                        let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 9633|      0|                        let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 9634|      0|                        let expr2_0 = constructor_x64_movups(ctx, &expr1_0)?;
 9635|      0|                        let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9636|      0|                        return Some(expr3_0);
 9637|      0|                    }
 9638|       |                }
 9639|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 9640|      0|                    match pattern5_0 {
 9641|       |                        &Opcode::Fadd  => {
 9642|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9643|       |                            // Rule at src/isa/x64/lower.isle line 2222.
 9644|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9645|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9646|      0|                            let expr2_0 = constructor_x64_addps(ctx, expr0_0, &expr1_0)?;
 9647|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9648|      0|                            return Some(expr3_0);
 9649|       |                        }
 9650|       |                        &Opcode::Fsub  => {
 9651|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9652|       |                            // Rule at src/isa/x64/lower.isle line 2233.
 9653|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9654|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9655|      0|                            let expr2_0 = constructor_x64_subps(ctx, expr0_0, &expr1_0)?;
 9656|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9657|      0|                            return Some(expr3_0);
 9658|       |                        }
 9659|       |                        &Opcode::Fmul  => {
 9660|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9661|       |                            // Rule at src/isa/x64/lower.isle line 2244.
 9662|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9663|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9664|      0|                            let expr2_0 = constructor_x64_mulps(ctx, expr0_0, &expr1_0)?;
 9665|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9666|      0|                            return Some(expr3_0);
 9667|       |                        }
 9668|       |                        &Opcode::Fdiv  => {
 9669|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9670|       |                            // Rule at src/isa/x64/lower.isle line 2255.
 9671|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9672|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9673|      0|                            let expr2_0 = constructor_x64_divps(ctx, expr0_0, &expr1_0)?;
 9674|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9675|      0|                            return Some(expr3_0);
 9676|       |                        }
 9677|       |                        &Opcode::Fmin  => {
 9678|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9679|       |                            // Rule at src/isa/x64/lower.isle line 2305.
 9680|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9681|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9682|      0|                            let expr2_0 = constructor_x64_minps(ctx, expr0_0, expr1_0)?;
 9683|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9684|      0|                            let expr4_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9685|      0|                            let expr5_0 = constructor_x64_minps(ctx, expr3_0, expr4_0)?;
 9686|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9687|      0|                            let expr7_0 = constructor_x64_orps(ctx, expr2_0, &expr6_0)?;
 9688|      0|                            let expr8_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9689|      0|                            let expr9_0 = FcmpImm::Unordered;
 9690|      0|                            let expr10_0 = constructor_x64_cmpps(ctx, expr7_0, &expr8_0, &expr9_0)?;
 9691|      0|                            let expr11_0 = C::xmm_to_xmm_mem(ctx, expr10_0);
 9692|      0|                            let expr12_0 = constructor_x64_orps(ctx, expr7_0, &expr11_0)?;
 9693|      0|                            let expr13_0: u32 = 10i128 as u32;
 9694|      0|                            let expr14_0 = RegMemImm::Imm {
 9695|      0|                                simm32: expr13_0,
 9696|      0|                            };
 9697|      0|                            let expr15_0 = constructor_mov_rmi_to_xmm(ctx, &expr14_0)?;
 9698|      0|                            let expr16_0 = constructor_x64_psrld(ctx, expr10_0, &expr15_0)?;
 9699|      0|                            let expr17_0 = C::xmm_to_xmm_mem(ctx, expr12_0);
 9700|      0|                            let expr18_0 = constructor_x64_andnps(ctx, expr16_0, &expr17_0)?;
 9701|      0|                            let expr19_0 = constructor_output_xmm(ctx, expr18_0)?;
 9702|      0|                            return Some(expr19_0);
 9703|       |                        }
 9704|       |                        &Opcode::FminPseudo  => {
 9705|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9706|       |                            // Rule at src/isa/x64/lower.isle line 2461.
 9707|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9708|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9709|      0|                            let expr2_0 = constructor_x64_minps(ctx, expr0_0, expr1_0)?;
 9710|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9711|      0|                            return Some(expr3_0);
 9712|       |                        }
 9713|       |                        &Opcode::Fmax  => {
 9714|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9715|       |                            // Rule at src/isa/x64/lower.isle line 2368.
 9716|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9717|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9718|      0|                            let expr2_0 = constructor_x64_maxps(ctx, expr0_0, expr1_0)?;
 9719|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9720|      0|                            let expr4_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9721|      0|                            let expr5_0 = constructor_x64_maxps(ctx, expr3_0, expr4_0)?;
 9722|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9723|      0|                            let expr7_0 = constructor_x64_xorps(ctx, expr2_0, &expr6_0)?;
 9724|      0|                            let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 9725|      0|                            let expr9_0 = constructor_x64_orps(ctx, expr2_0, &expr8_0)?;
 9726|      0|                            let expr10_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 9727|      0|                            let expr11_0 = constructor_x64_subps(ctx, expr9_0, &expr10_0)?;
 9728|      0|                            let expr12_0 = C::xmm_to_xmm_mem(ctx, expr9_0);
 9729|      0|                            let expr13_0 = FcmpImm::Unordered;
 9730|      0|                            let expr14_0 = constructor_x64_cmpps(ctx, expr9_0, &expr12_0, &expr13_0)?;
 9731|      0|                            let expr15_0: u32 = 10i128 as u32;
 9732|      0|                            let expr16_0 = RegMemImm::Imm {
 9733|      0|                                simm32: expr15_0,
 9734|      0|                            };
 9735|      0|                            let expr17_0 = constructor_mov_rmi_to_xmm(ctx, &expr16_0)?;
 9736|      0|                            let expr18_0 = constructor_x64_psrld(ctx, expr14_0, &expr17_0)?;
 9737|      0|                            let expr19_0 = C::xmm_to_xmm_mem(ctx, expr11_0);
 9738|      0|                            let expr20_0 = constructor_x64_andnps(ctx, expr18_0, &expr19_0)?;
 9739|      0|                            let expr21_0 = constructor_output_xmm(ctx, expr20_0)?;
 9740|      0|                            return Some(expr21_0);
 9741|       |                        }
 9742|       |                        &Opcode::FmaxPseudo  => {
 9743|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9744|       |                            // Rule at src/isa/x64/lower.isle line 2472.
 9745|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9746|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9747|      0|                            let expr2_0 = constructor_x64_maxps(ctx, expr0_0, expr1_0)?;
 9748|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9749|      0|                            return Some(expr3_0);
 9750|       |                        }
 9751|      0|                        _ => {}
 9752|       |                    }
 9753|       |                }
 9754|      0|                _ => {}
 9755|       |            }
 9756|  39.3k|        }
 9757|  39.3k|        if pattern2_0 == F64X2 {
 9758|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
 9759|      0|            match &pattern4_0 {
 9760|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
 9761|      0|                    match pattern5_0 {
 9762|       |                        &Opcode::Sqrt  => {
 9763|       |                            // Rule at src/isa/x64/lower.isle line 2267.
 9764|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9765|      0|                            let expr1_0 = constructor_x64_sqrtpd(ctx, expr0_0)?;
 9766|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9767|      0|                            return Some(expr2_0);
 9768|       |                        }
 9769|       |                        &Opcode::Fneg  => {
 9770|       |                            // Rule at src/isa/x64/lower.isle line 1218.
 9771|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9772|      0|                            let expr1_0 = constructor_vector_all_ones(ctx, )?;
 9773|      0|                            let expr2_0: u32 = 63i128 as u32;
 9774|      0|                            let expr3_0 = RegMemImm::Imm {
 9775|      0|                                simm32: expr2_0,
 9776|      0|                            };
 9777|      0|                            let expr4_0 = constructor_mov_rmi_to_xmm(ctx, &expr3_0)?;
 9778|      0|                            let expr5_0 = constructor_x64_psllq(ctx, expr1_0, &expr4_0)?;
 9779|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9780|      0|                            let expr7_0 = constructor_x64_xorpd(ctx, expr0_0, &expr6_0)?;
 9781|      0|                            let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
 9782|      0|                            return Some(expr8_0);
 9783|       |                        }
 9784|       |                        &Opcode::Fabs  => {
 9785|       |                            // Rule at src/isa/x64/lower.isle line 1200.
 9786|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9787|      0|                            let expr1_0 = constructor_vector_all_ones(ctx, )?;
 9788|      0|                            let expr2_0: u32 = 1i128 as u32;
 9789|      0|                            let expr3_0 = RegMemImm::Imm {
 9790|      0|                                simm32: expr2_0,
 9791|      0|                            };
 9792|      0|                            let expr4_0 = constructor_mov_rmi_to_xmm(ctx, &expr3_0)?;
 9793|      0|                            let expr5_0 = constructor_x64_psrlq(ctx, expr1_0, &expr4_0)?;
 9794|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9795|      0|                            let expr7_0 = constructor_x64_andpd(ctx, expr0_0, &expr6_0)?;
 9796|      0|                            let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
 9797|      0|                            return Some(expr8_0);
 9798|       |                        }
 9799|       |                        &Opcode::FvpromoteLow  => {
 9800|       |                            // Rule at src/isa/x64/lower.isle line 2275.
 9801|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
 9802|      0|                            let expr1_0 = constructor_x64_cvtps2pd(ctx, expr0_0)?;
 9803|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9804|      0|                            return Some(expr2_0);
 9805|       |                        }
 9806|       |                        &Opcode::FcvtFromUint  => {
 9807|      0|                            if let Some(pattern7_0) = C::def_inst(ctx, pattern5_1) {
 9808|      0|                                let pattern8_0 = C::inst_data(ctx, pattern7_0);
 9809|      0|                                if let &InstructionData::Unary { opcode: ref pattern9_0, arg: pattern9_1 } = &pattern8_0 {
 9810|      0|                                    if let &Opcode::UwidenLow  = pattern9_0 {
 9811|      0|                                        let pattern11_0 = C::value_type(ctx, pattern9_1);
 9812|      0|                                        if pattern11_0 == I32X4 {
 9813|       |                                            // Rule at src/isa/x64/lower.isle line 2985.
 9814|      0|                                            let expr0_0: Type = I32X4;
 9815|      0|                                            let expr1_0 = C::fcvt_uint_mask_const(ctx, );
 9816|      0|                                            let expr2_0 = constructor_x64_xmm_load_const(ctx, expr0_0, expr1_0)?;
 9817|      0|                                            let expr3_0 = constructor_put_in_xmm(ctx, pattern9_1)?;
 9818|      0|                                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
 9819|      0|                                            let expr5_0 = constructor_x64_unpcklps(ctx, expr3_0, &expr4_0)?;
 9820|      0|                                            let expr6_0: Type = I32X4;
 9821|      0|                                            let expr7_0 = C::fcvt_uint_mask_high_const(ctx, );
 9822|      0|                                            let expr8_0 = constructor_x64_xmm_load_const(ctx, expr6_0, expr7_0)?;
 9823|      0|                                            let expr9_0 = C::xmm_to_xmm_mem(ctx, expr8_0);
 9824|      0|                                            let expr10_0 = constructor_x64_subpd(ctx, expr5_0, &expr9_0)?;
 9825|      0|                                            let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
 9826|      0|                                            return Some(expr11_0);
 9827|      0|                                        }
 9828|      0|                                    }
 9829|      0|                                }
 9830|      0|                            }
 9831|       |                        }
 9832|      0|                        _ => {}
 9833|       |                    }
 9834|       |                }
 9835|      0|                &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } => {
 9836|      0|                    if let &Opcode::Load  = pattern5_0 {
 9837|       |                        // Rule at src/isa/x64/lower.isle line 2532.
 9838|      0|                        let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
 9839|      0|                        let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
 9840|      0|                        let expr2_0 = constructor_x64_movupd(ctx, &expr1_0)?;
 9841|      0|                        let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9842|      0|                        return Some(expr3_0);
 9843|      0|                    }
 9844|       |                }
 9845|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
 9846|      0|                    match pattern5_0 {
 9847|       |                        &Opcode::Fadd  => {
 9848|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9849|       |                            // Rule at src/isa/x64/lower.isle line 2224.
 9850|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9851|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9852|      0|                            let expr2_0 = constructor_x64_addpd(ctx, expr0_0, &expr1_0)?;
 9853|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9854|      0|                            return Some(expr3_0);
 9855|       |                        }
 9856|       |                        &Opcode::Fsub  => {
 9857|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9858|       |                            // Rule at src/isa/x64/lower.isle line 2235.
 9859|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9860|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9861|      0|                            let expr2_0 = constructor_x64_subpd(ctx, expr0_0, &expr1_0)?;
 9862|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9863|      0|                            return Some(expr3_0);
 9864|       |                        }
 9865|       |                        &Opcode::Fmul  => {
 9866|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9867|       |                            // Rule at src/isa/x64/lower.isle line 2246.
 9868|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9869|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9870|      0|                            let expr2_0 = constructor_x64_mulpd(ctx, expr0_0, &expr1_0)?;
 9871|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9872|      0|                            return Some(expr3_0);
 9873|       |                        }
 9874|       |                        &Opcode::Fdiv  => {
 9875|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9876|       |                            // Rule at src/isa/x64/lower.isle line 2257.
 9877|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9878|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9879|      0|                            let expr2_0 = constructor_x64_divpd(ctx, expr0_0, &expr1_0)?;
 9880|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9881|      0|                            return Some(expr3_0);
 9882|       |                        }
 9883|       |                        &Opcode::Fmin  => {
 9884|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9885|       |                            // Rule at src/isa/x64/lower.isle line 2348.
 9886|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9887|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9888|      0|                            let expr2_0 = constructor_x64_minpd(ctx, expr0_0, expr1_0)?;
 9889|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9890|      0|                            let expr4_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9891|      0|                            let expr5_0 = constructor_x64_minpd(ctx, expr3_0, expr4_0)?;
 9892|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9893|      0|                            let expr7_0 = constructor_x64_orpd(ctx, expr2_0, &expr6_0)?;
 9894|      0|                            let expr8_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9895|      0|                            let expr9_0 = FcmpImm::Unordered;
 9896|      0|                            let expr10_0 = constructor_x64_cmppd(ctx, expr2_0, &expr8_0, &expr9_0)?;
 9897|      0|                            let expr11_0 = C::xmm_to_xmm_mem(ctx, expr10_0);
 9898|      0|                            let expr12_0 = constructor_x64_orpd(ctx, expr7_0, &expr11_0)?;
 9899|      0|                            let expr13_0: u32 = 13i128 as u32;
 9900|      0|                            let expr14_0 = RegMemImm::Imm {
 9901|      0|                                simm32: expr13_0,
 9902|      0|                            };
 9903|      0|                            let expr15_0 = constructor_mov_rmi_to_xmm(ctx, &expr14_0)?;
 9904|      0|                            let expr16_0 = constructor_x64_psrlq(ctx, expr10_0, &expr15_0)?;
 9905|      0|                            let expr17_0 = C::xmm_to_xmm_mem(ctx, expr12_0);
 9906|      0|                            let expr18_0 = constructor_x64_andnpd(ctx, expr16_0, &expr17_0)?;
 9907|      0|                            let expr19_0 = constructor_output_xmm(ctx, expr18_0)?;
 9908|      0|                            return Some(expr19_0);
 9909|       |                        }
 9910|       |                        &Opcode::FminPseudo  => {
 9911|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9912|       |                            // Rule at src/isa/x64/lower.isle line 2463.
 9913|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9914|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9915|      0|                            let expr2_0 = constructor_x64_minpd(ctx, expr0_0, expr1_0)?;
 9916|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9917|      0|                            return Some(expr3_0);
 9918|       |                        }
 9919|       |                        &Opcode::Fmax  => {
 9920|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9921|       |                            // Rule at src/isa/x64/lower.isle line 2411.
 9922|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9923|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9924|      0|                            let expr2_0 = constructor_x64_maxpd(ctx, expr0_0, expr1_0)?;
 9925|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9926|      0|                            let expr4_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9927|      0|                            let expr5_0 = constructor_x64_maxpd(ctx, expr3_0, expr4_0)?;
 9928|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
 9929|      0|                            let expr7_0 = constructor_x64_xorpd(ctx, expr2_0, &expr6_0)?;
 9930|      0|                            let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 9931|      0|                            let expr9_0 = constructor_x64_orpd(ctx, expr2_0, &expr8_0)?;
 9932|      0|                            let expr10_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
 9933|      0|                            let expr11_0 = constructor_x64_subpd(ctx, expr9_0, &expr10_0)?;
 9934|      0|                            let expr12_0 = C::xmm_to_xmm_mem(ctx, expr9_0);
 9935|      0|                            let expr13_0 = FcmpImm::Unordered;
 9936|      0|                            let expr14_0 = constructor_x64_cmppd(ctx, expr9_0, &expr12_0, &expr13_0)?;
 9937|      0|                            let expr15_0: u32 = 13i128 as u32;
 9938|      0|                            let expr16_0 = RegMemImm::Imm {
 9939|      0|                                simm32: expr15_0,
 9940|      0|                            };
 9941|      0|                            let expr17_0 = constructor_mov_rmi_to_xmm(ctx, &expr16_0)?;
 9942|      0|                            let expr18_0 = constructor_x64_psrlq(ctx, expr14_0, &expr17_0)?;
 9943|      0|                            let expr19_0 = C::xmm_to_xmm_mem(ctx, expr11_0);
 9944|      0|                            let expr20_0 = constructor_x64_andnpd(ctx, expr18_0, &expr19_0)?;
 9945|      0|                            let expr21_0 = constructor_output_xmm(ctx, expr20_0)?;
 9946|      0|                            return Some(expr21_0);
 9947|       |                        }
 9948|       |                        &Opcode::FmaxPseudo  => {
 9949|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
 9950|       |                            // Rule at src/isa/x64/lower.isle line 2474.
 9951|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
 9952|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
 9953|      0|                            let expr2_0 = constructor_x64_maxpd(ctx, expr0_0, expr1_0)?;
 9954|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9955|      0|                            return Some(expr3_0);
 9956|       |                        }
 9957|      0|                        _ => {}
 9958|       |                    }
 9959|       |                }
 9960|      0|                _ => {}
 9961|       |            }
 9962|  39.3k|        }
 9963|  39.3k|        if let Some(()) = C::avx512vl_enabled(ctx, pattern2_0) {
 9964|  18.4E|            if let Some(()) = C::avx512dq_enabled(ctx, pattern2_0) {
 9965|  18.4E|                if let Some((pattern5_0, pattern5_1)) = C::multi_lane(ctx, pattern2_0) {
 9966|  18.4E|                    if pattern5_0 == 64i128 as u32  {
 9967|  18.4E|                        if pattern5_1 == 2i128 as u32  {
 9968|  18.4E|                            let pattern8_0 = C::inst_data(ctx, pattern0_0);
 9969|  18.4E|                            if let &InstructionData::Binary { opcode: ref pattern9_0, args: ref pattern9_1 } = &pattern8_0 {
 9970|  18.4E|                                if let &Opcode::Imul  = pattern9_0 {
 9971|  18.4E|                                    let (pattern11_0, pattern11_1) = C::unpack_value_array_2(ctx, pattern9_1);
 9972|  18.4E|                                    // Rule at src/isa/x64/lower.isle line 942.
 9973|  18.4E|                                    let expr0_0 = C::put_in_xmm_mem(ctx, pattern11_0);
 9974|  18.4E|                                    let expr1_0 = constructor_put_in_xmm(ctx, pattern11_1)?;
 9975|  18.4E|                                    let expr2_0 = constructor_x64_vpmullq(ctx, &expr0_0, expr1_0)?;
 9976|  18.4E|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
 9977|      0|                                    return Some(expr3_0);
 9978|      0|                                }
 9979|      0|                            }
 9980|      0|                        }
 9981|      0|                    }
 9982|      0|                }
 9983|      0|            }
 9984|      0|            if let Some(()) = C::avx512f_enabled(ctx, pattern2_0) {
 9985|      0|                if pattern2_0 == I64X2 {
 9986|      0|                    let pattern6_0 = C::inst_data(ctx, pattern0_0);
 9987|      0|                    if let &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } = &pattern6_0 {
 9988|      0|                        if let &Opcode::Iabs  = pattern7_0 {
 9989|       |                            // Rule at src/isa/x64/lower.isle line 1170.
 9990|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern7_1);
 9991|      0|                            let expr1_0 = constructor_x64_vpabsq(ctx, &expr0_0)?;
 9992|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
 9993|      0|                            return Some(expr2_0);
 9994|      0|                        }
 9995|      0|                    }
 9996|      0|                }
 9997|      0|            }
 9998|      0|            if let Some(()) = C::avx512vbmi_enabled(ctx, pattern2_0) {
 9999|      0|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
10000|      0|                if let &InstructionData::Shuffle { opcode: ref pattern6_0, args: ref pattern6_1, imm: pattern6_2 } = &pattern5_0 {
10001|      0|                    if let &Opcode::Shuffle  = pattern6_0 {
10002|      0|                        let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
10003|      0|                        if let Some(pattern9_0) = C::vec_mask_from_immediate(ctx, pattern6_2) {
10004|      0|                            if let Some((pattern10_0, pattern10_1)) = C::perm_from_mask_with_zeros(ctx, &pattern9_0) {
10005|       |                                // Rule at src/isa/x64/lower.isle line 3509.
10006|      0|                                let expr0_0: Type = I8X16;
10007|      0|                                let expr1_0 = constructor_x64_xmm_load_const(ctx, expr0_0, pattern10_1)?;
10008|      0|                                let expr2_0 = constructor_put_in_xmm(ctx, pattern8_1)?;
10009|      0|                                let expr3_0 = constructor_put_in_xmm(ctx, pattern8_0)?;
10010|      0|                                let expr4_0: Type = I8X16;
10011|      0|                                let expr5_0 = constructor_x64_xmm_load_const(ctx, expr4_0, pattern10_0)?;
10012|      0|                                let expr6_0 = constructor_x64_vpermi2b(ctx, expr2_0, expr3_0, expr5_0)?;
10013|      0|                                let expr7_0 = C::xmm_to_xmm_mem(ctx, expr6_0);
10014|      0|                                let expr8_0 = constructor_x64_andps(ctx, expr1_0, &expr7_0)?;
10015|      0|                                let expr9_0 = constructor_output_xmm(ctx, expr8_0)?;
10016|      0|                                return Some(expr9_0);
10017|      0|                            }
10018|       |                            // Rule at src/isa/x64/lower.isle line 3518.
10019|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern8_1)?;
10020|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern8_0)?;
10021|      0|                            let expr2_0: Type = I8X16;
10022|      0|                            let expr3_0 = C::perm_from_mask(ctx, &pattern9_0);
10023|      0|                            let expr4_0 = constructor_x64_xmm_load_const(ctx, expr2_0, expr3_0)?;
10024|      0|                            let expr5_0 = constructor_x64_vpermi2b(ctx, expr0_0, expr1_0, expr4_0)?;
10025|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
10026|      0|                            return Some(expr6_0);
10027|      0|                        }
10028|      0|                    }
10029|      0|                }
10030|      0|            }
10031|  39.3k|        }
10032|  39.3k|        if let Some(()) = C::use_fma(ctx, pattern2_0) {
10033|  39.3k|            if pattern2_0 == F32X4 {
10034|      0|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
10035|      0|                if let &InstructionData::Ternary { opcode: ref pattern6_0, args: ref pattern6_1 } = &pattern5_0 {
10036|      0|                    if let &Opcode::Fma  = pattern6_0 {
10037|      0|                        let (pattern8_0, pattern8_1, pattern8_2) = C::unpack_value_array_3(ctx, pattern6_1);
10038|       |                        // Rule at src/isa/x64/lower.isle line 2487.
10039|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern8_0)?;
10040|      0|                        let expr1_0 = constructor_put_in_xmm(ctx, pattern8_1)?;
10041|      0|                        let expr2_0 = constructor_put_in_xmm(ctx, pattern8_2)?;
10042|      0|                        let expr3_0 = constructor_x64_vfmadd213ps(ctx, expr0_0, expr1_0, expr2_0)?;
10043|      0|                        let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
10044|      0|                        return Some(expr4_0);
10045|      0|                    }
10046|      0|                }
10047|  39.3k|            }
10048|  39.3k|            if pattern2_0 == F64X2 {
10049|      0|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
10050|      0|                if let &InstructionData::Ternary { opcode: ref pattern6_0, args: ref pattern6_1 } = &pattern5_0 {
10051|      0|                    if let &Opcode::Fma  = pattern6_0 {
10052|      0|                        let (pattern8_0, pattern8_1, pattern8_2) = C::unpack_value_array_3(ctx, pattern6_1);
10053|       |                        // Rule at src/isa/x64/lower.isle line 2489.
10054|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern8_0)?;
10055|      0|                        let expr1_0 = constructor_put_in_xmm(ctx, pattern8_1)?;
10056|      0|                        let expr2_0 = constructor_put_in_xmm(ctx, pattern8_2)?;
10057|      0|                        let expr3_0 = constructor_x64_vfmadd213pd(ctx, expr0_0, expr1_0, expr2_0)?;
10058|      0|                        let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
10059|      0|                        return Some(expr4_0);
10060|      0|                    }
10061|      0|                }
10062|  39.3k|            }
10063|      0|        }
10064|  39.3k|        if let Some(()) = C::use_sse41(ctx, pattern2_0) {
10065|  39.3k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
10066|  39.3k|            if let &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } = &pattern4_0 {
10067|    766|                match pattern5_0 {
10068|       |                    &Opcode::Ceil  => {
10069|     12|                        let pattern7_0 = C::value_type(ctx, pattern5_1);
10070|     12|                        if pattern7_0 == F32 {
10071|       |                            // Rule at src/isa/x64/lower.isle line 3335.
10072|      4|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10073|      4|                            let expr1_0 = RoundImm::RoundUp;
10074|      4|                            let expr2_0 = constructor_x64_roundss(ctx, &expr0_0, &expr1_0)?;
10075|      4|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10076|      4|                            return Some(expr3_0);
10077|      8|                        }
10078|      8|                        if pattern7_0 == F64 {
10079|       |                            // Rule at src/isa/x64/lower.isle line 3341.
10080|      8|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10081|      8|                            let expr1_0 = RoundImm::RoundUp;
10082|      8|                            let expr2_0 = constructor_x64_roundsd(ctx, &expr0_0, &expr1_0)?;
10083|      8|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10084|      8|                            return Some(expr3_0);
10085|      0|                        }
10086|      0|                        if pattern7_0 == F32X4 {
10087|       |                            // Rule at src/isa/x64/lower.isle line 3347.
10088|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10089|      0|                            let expr1_0 = RoundImm::RoundUp;
10090|      0|                            let expr2_0 = constructor_x64_roundps(ctx, &expr0_0, &expr1_0)?;
10091|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10092|      0|                            return Some(expr3_0);
10093|      0|                        }
10094|      0|                        if pattern7_0 == F64X2 {
10095|       |                            // Rule at src/isa/x64/lower.isle line 3350.
10096|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10097|      0|                            let expr1_0 = RoundImm::RoundUp;
10098|      0|                            let expr2_0 = constructor_x64_roundpd(ctx, &expr0_0, &expr1_0)?;
10099|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10100|      0|                            return Some(expr3_0);
10101|      0|                        }
10102|       |                    }
10103|       |                    &Opcode::Floor  => {
10104|      0|                        let pattern7_0 = C::value_type(ctx, pattern5_1);
10105|      0|                        if pattern7_0 == F32 {
10106|       |                            // Rule at src/isa/x64/lower.isle line 3355.
10107|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10108|      0|                            let expr1_0 = RoundImm::RoundDown;
10109|      0|                            let expr2_0 = constructor_x64_roundss(ctx, &expr0_0, &expr1_0)?;
10110|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10111|      0|                            return Some(expr3_0);
10112|      0|                        }
10113|      0|                        if pattern7_0 == F64 {
10114|       |                            // Rule at src/isa/x64/lower.isle line 3361.
10115|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10116|      0|                            let expr1_0 = RoundImm::RoundDown;
10117|      0|                            let expr2_0 = constructor_x64_roundsd(ctx, &expr0_0, &expr1_0)?;
10118|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10119|      0|                            return Some(expr3_0);
10120|      0|                        }
10121|      0|                        if pattern7_0 == F32X4 {
10122|       |                            // Rule at src/isa/x64/lower.isle line 3367.
10123|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10124|      0|                            let expr1_0 = RoundImm::RoundDown;
10125|      0|                            let expr2_0 = constructor_x64_roundps(ctx, &expr0_0, &expr1_0)?;
10126|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10127|      0|                            return Some(expr3_0);
10128|      0|                        }
10129|      0|                        if pattern7_0 == F64X2 {
10130|       |                            // Rule at src/isa/x64/lower.isle line 3370.
10131|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10132|      0|                            let expr1_0 = RoundImm::RoundDown;
10133|      0|                            let expr2_0 = constructor_x64_roundpd(ctx, &expr0_0, &expr1_0)?;
10134|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10135|      0|                            return Some(expr3_0);
10136|      0|                        }
10137|       |                    }
10138|       |                    &Opcode::Trunc  => {
10139|      0|                        let pattern7_0 = C::value_type(ctx, pattern5_1);
10140|      0|                        if pattern7_0 == F32 {
10141|       |                            // Rule at src/isa/x64/lower.isle line 3395.
10142|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10143|      0|                            let expr1_0 = RoundImm::RoundZero;
10144|      0|                            let expr2_0 = constructor_x64_roundss(ctx, &expr0_0, &expr1_0)?;
10145|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10146|      0|                            return Some(expr3_0);
10147|      0|                        }
10148|      0|                        if pattern7_0 == F64 {
10149|       |                            // Rule at src/isa/x64/lower.isle line 3401.
10150|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10151|      0|                            let expr1_0 = RoundImm::RoundZero;
10152|      0|                            let expr2_0 = constructor_x64_roundsd(ctx, &expr0_0, &expr1_0)?;
10153|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10154|      0|                            return Some(expr3_0);
10155|      0|                        }
10156|      0|                        if pattern7_0 == F32X4 {
10157|       |                            // Rule at src/isa/x64/lower.isle line 3407.
10158|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10159|      0|                            let expr1_0 = RoundImm::RoundZero;
10160|      0|                            let expr2_0 = constructor_x64_roundps(ctx, &expr0_0, &expr1_0)?;
10161|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10162|      0|                            return Some(expr3_0);
10163|      0|                        }
10164|      0|                        if pattern7_0 == F64X2 {
10165|       |                            // Rule at src/isa/x64/lower.isle line 3410.
10166|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10167|      0|                            let expr1_0 = RoundImm::RoundZero;
10168|      0|                            let expr2_0 = constructor_x64_roundpd(ctx, &expr0_0, &expr1_0)?;
10169|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10170|      0|                            return Some(expr3_0);
10171|      0|                        }
10172|       |                    }
10173|       |                    &Opcode::Nearest  => {
10174|      2|                        let pattern7_0 = C::value_type(ctx, pattern5_1);
10175|      2|                        if pattern7_0 == F32 {
10176|       |                            // Rule at src/isa/x64/lower.isle line 3375.
10177|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10178|      0|                            let expr1_0 = RoundImm::RoundNearest;
10179|      0|                            let expr2_0 = constructor_x64_roundss(ctx, &expr0_0, &expr1_0)?;
10180|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10181|      0|                            return Some(expr3_0);
10182|      2|                        }
10183|      2|                        if pattern7_0 == F64 {
10184|       |                            // Rule at src/isa/x64/lower.isle line 3381.
10185|      2|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10186|      2|                            let expr1_0 = RoundImm::RoundNearest;
10187|      2|                            let expr2_0 = constructor_x64_roundsd(ctx, &expr0_0, &expr1_0)?;
10188|      2|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10189|      2|                            return Some(expr3_0);
10190|      0|                        }
10191|      0|                        if pattern7_0 == F32X4 {
10192|       |                            // Rule at src/isa/x64/lower.isle line 3387.
10193|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10194|      0|                            let expr1_0 = RoundImm::RoundNearest;
10195|      0|                            let expr2_0 = constructor_x64_roundps(ctx, &expr0_0, &expr1_0)?;
10196|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10197|      0|                            return Some(expr3_0);
10198|      0|                        }
10199|      0|                        if pattern7_0 == F64X2 {
10200|       |                            // Rule at src/isa/x64/lower.isle line 3390.
10201|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern5_1);
10202|      0|                            let expr1_0 = RoundImm::RoundNearest;
10203|      0|                            let expr2_0 = constructor_x64_roundpd(ctx, &expr0_0, &expr1_0)?;
10204|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10205|      0|                            return Some(expr3_0);
10206|      0|                        }
10207|       |                    }
10208|    752|                    _ => {}
10209|       |                }
10210|  38.5k|            }
10211|      0|        }
10212|  39.3k|        if let Some((pattern3_0, pattern3_1)) = C::multi_lane(ctx, pattern2_0) {
10213|      0|            if pattern3_0 == 8i128 as u32  {
10214|      0|                if pattern3_1 == 16i128 as u32  {
10215|      0|                    let pattern6_0 = C::inst_data(ctx, pattern0_0);
10216|      0|                    match &pattern6_0 {
10217|      0|                        &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } => {
10218|      0|                            if let &Opcode::Splat  = pattern7_0 {
10219|       |                                // Rule at src/isa/x64/lower.isle line 3598.
10220|      0|                                let expr0_0: Type = I8X16;
10221|      0|                                let expr1_0 = constructor_xmm_uninit_value(ctx, )?;
10222|      0|                                let expr2_0 = C::put_in_reg_mem(ctx, pattern7_1);
10223|      0|                                let expr3_0: u8 = 0i128 as u8;
10224|      0|                                let expr4_0 = constructor_vec_insert_lane(ctx, expr0_0, expr1_0, &expr2_0, expr3_0)?;
10225|      0|                                let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
10226|      0|                                let expr6_0 = constructor_x64_pxor(ctx, expr4_0, &expr5_0)?;
10227|      0|                                let expr7_0 = C::xmm_to_xmm_mem(ctx, expr6_0);
10228|      0|                                let expr8_0 = constructor_x64_pshufb(ctx, expr4_0, &expr7_0)?;
10229|      0|                                let expr9_0 = constructor_output_xmm(ctx, expr8_0)?;
10230|      0|                                return Some(expr9_0);
10231|      0|                            }
10232|       |                        }
10233|      0|                        &InstructionData::Binary { opcode: ref pattern7_0, args: ref pattern7_1 } => {
10234|      0|                            match pattern7_0 {
10235|       |                                &Opcode::AvgRound  => {
10236|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10237|       |                                    // Rule at src/isa/x64/lower.isle line 853.
10238|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10239|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10240|      0|                                    let expr2_0 = constructor_x64_pavgb(ctx, expr0_0, &expr1_0)?;
10241|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10242|      0|                                    return Some(expr3_0);
10243|       |                                }
10244|       |                                &Opcode::UaddSat  => {
10245|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10246|       |                                    // Rule at src/isa/x64/lower.isle line 141.
10247|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10248|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10249|      0|                                    let expr2_0 = constructor_x64_paddusb(ctx, expr0_0, &expr1_0)?;
10250|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10251|      0|                                    return Some(expr3_0);
10252|       |                                }
10253|       |                                &Opcode::SaddSat  => {
10254|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10255|       |                                    // Rule at src/isa/x64/lower.isle line 131.
10256|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10257|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10258|      0|                                    let expr2_0 = constructor_x64_paddsb(ctx, expr0_0, &expr1_0)?;
10259|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10260|      0|                                    return Some(expr3_0);
10261|       |                                }
10262|       |                                &Opcode::UsubSat  => {
10263|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10264|       |                                    // Rule at src/isa/x64/lower.isle line 256.
10265|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10266|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10267|      0|                                    let expr2_0 = constructor_x64_psubusb(ctx, expr0_0, &expr1_0)?;
10268|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10269|      0|                                    return Some(expr3_0);
10270|       |                                }
10271|       |                                &Opcode::SsubSat  => {
10272|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10273|       |                                    // Rule at src/isa/x64/lower.isle line 246.
10274|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10275|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10276|      0|                                    let expr2_0 = constructor_x64_psubsb(ctx, expr0_0, &expr1_0)?;
10277|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10278|      0|                                    return Some(expr3_0);
10279|       |                                }
10280|       |                                &Opcode::Iadd  => {
10281|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10282|       |                                    // Rule at src/isa/x64/lower.isle line 99.
10283|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10284|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10285|      0|                                    let expr2_0 = constructor_x64_paddb(ctx, expr0_0, &expr1_0)?;
10286|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10287|      0|                                    return Some(expr3_0);
10288|       |                                }
10289|       |                                &Opcode::Isub  => {
10290|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10291|       |                                    // Rule at src/isa/x64/lower.isle line 214.
10292|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10293|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10294|      0|                                    let expr2_0 = constructor_x64_psubb(ctx, expr0_0, &expr1_0)?;
10295|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10296|      0|                                    return Some(expr3_0);
10297|       |                                }
10298|      0|                                _ => {}
10299|       |                            }
10300|       |                        }
10301|      0|                        _ => {}
10302|       |                    }
10303|      0|                }
10304|      0|            }
10305|      0|            if pattern3_0 == 16i128 as u32  {
10306|      0|                if pattern3_1 == 8i128 as u32  {
10307|      0|                    let pattern6_0 = C::inst_data(ctx, pattern0_0);
10308|      0|                    match &pattern6_0 {
10309|      0|                        &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } => {
10310|      0|                            if let &Opcode::Splat  = pattern7_0 {
10311|       |                                // Rule at src/isa/x64/lower.isle line 3604.
10312|      0|                                let expr0_0 = C::put_in_reg(ctx, pattern7_1);
10313|      0|                                let expr1_0 = RegMem::Reg {
10314|      0|                                    reg: expr0_0,
10315|      0|                                };
10316|      0|                                let expr2_0: Type = I16X8;
10317|      0|                                let expr3_0 = constructor_xmm_uninit_value(ctx, )?;
10318|      0|                                let expr4_0: u8 = 0i128 as u8;
10319|      0|                                let expr5_0 = constructor_vec_insert_lane(ctx, expr2_0, expr3_0, &expr1_0, expr4_0)?;
10320|      0|                                let expr6_0: Type = I16X8;
10321|      0|                                let expr7_0: u8 = 1i128 as u8;
10322|      0|                                let expr8_0 = constructor_vec_insert_lane(ctx, expr6_0, expr5_0, &expr1_0, expr7_0)?;
10323|      0|                                let expr9_0 = C::xmm_to_xmm_mem(ctx, expr8_0);
10324|      0|                                let expr10_0: u8 = 0i128 as u8;
10325|      0|                                let expr11_0 = OperandSize::Size32;
10326|      0|                                let expr12_0 = constructor_x64_pshufd(ctx, &expr9_0, expr10_0, &expr11_0)?;
10327|      0|                                let expr13_0 = constructor_output_xmm(ctx, expr12_0)?;
10328|      0|                                return Some(expr13_0);
10329|      0|                            }
10330|       |                        }
10331|      0|                        &InstructionData::Binary { opcode: ref pattern7_0, args: ref pattern7_1 } => {
10332|      0|                            match pattern7_0 {
10333|       |                                &Opcode::AvgRound  => {
10334|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10335|       |                                    // Rule at src/isa/x64/lower.isle line 857.
10336|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10337|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10338|      0|                                    let expr2_0 = constructor_x64_pavgw(ctx, expr0_0, &expr1_0)?;
10339|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10340|      0|                                    return Some(expr3_0);
10341|       |                                }
10342|       |                                &Opcode::UaddSat  => {
10343|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10344|       |                                    // Rule at src/isa/x64/lower.isle line 145.
10345|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10346|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10347|      0|                                    let expr2_0 = constructor_x64_paddusw(ctx, expr0_0, &expr1_0)?;
10348|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10349|      0|                                    return Some(expr3_0);
10350|       |                                }
10351|       |                                &Opcode::SaddSat  => {
10352|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10353|       |                                    // Rule at src/isa/x64/lower.isle line 135.
10354|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10355|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10356|      0|                                    let expr2_0 = constructor_x64_paddsw(ctx, expr0_0, &expr1_0)?;
10357|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10358|      0|                                    return Some(expr3_0);
10359|       |                                }
10360|       |                                &Opcode::UsubSat  => {
10361|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10362|       |                                    // Rule at src/isa/x64/lower.isle line 260.
10363|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10364|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10365|      0|                                    let expr2_0 = constructor_x64_psubusw(ctx, expr0_0, &expr1_0)?;
10366|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10367|      0|                                    return Some(expr3_0);
10368|       |                                }
10369|       |                                &Opcode::SsubSat  => {
10370|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10371|       |                                    // Rule at src/isa/x64/lower.isle line 250.
10372|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10373|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10374|      0|                                    let expr2_0 = constructor_x64_psubsw(ctx, expr0_0, &expr1_0)?;
10375|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10376|      0|                                    return Some(expr3_0);
10377|       |                                }
10378|       |                                &Opcode::Iadd  => {
10379|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10380|       |                                    // Rule at src/isa/x64/lower.isle line 103.
10381|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10382|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10383|      0|                                    let expr2_0 = constructor_x64_paddw(ctx, expr0_0, &expr1_0)?;
10384|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10385|      0|                                    return Some(expr3_0);
10386|       |                                }
10387|       |                                &Opcode::Isub  => {
10388|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10389|       |                                    // Rule at src/isa/x64/lower.isle line 218.
10390|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10391|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10392|      0|                                    let expr2_0 = constructor_x64_psubw(ctx, expr0_0, &expr1_0)?;
10393|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10394|      0|                                    return Some(expr3_0);
10395|       |                                }
10396|       |                                &Opcode::Imul  => {
10397|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10398|      0|                                    if let Some(pattern10_0) = C::def_inst(ctx, pattern9_0) {
10399|      0|                                        let pattern11_0 = C::inst_data(ctx, pattern10_0);
10400|      0|                                        if let &InstructionData::Unary { opcode: ref pattern12_0, arg: pattern12_1 } = &pattern11_0 {
10401|      0|                                            match pattern12_0 {
10402|       |                                                &Opcode::SwidenLow  => {
10403|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10404|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10405|      0|                                                        if pattern15_0 == 8i128 as u32  {
10406|      0|                                                            if pattern15_1 == 16i128 as u32  {
10407|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10408|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10409|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10410|      0|                                                                        if let &Opcode::SwidenLow  = pattern20_0 {
10411|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10412|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10413|      0|                                                                                if pattern23_0 == 8i128 as u32  {
10414|      0|                                                                                    if pattern23_1 == 16i128 as u32  {
10415|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1030.
10416|      0|                                                                                        let expr0_0 = C::put_in_xmm_mem(ctx, pattern12_1);
10417|      0|                                                                                        let expr1_0 = constructor_x64_pmovsxbw(ctx, &expr0_0)?;
10418|      0|                                                                                        let expr2_0 = C::put_in_xmm_mem(ctx, pattern20_1);
10419|      0|                                                                                        let expr3_0 = constructor_x64_pmovsxbw(ctx, &expr2_0)?;
10420|      0|                                                                                        let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
10421|      0|                                                                                        let expr5_0 = constructor_x64_pmullw(ctx, expr1_0, &expr4_0)?;
10422|      0|                                                                                        let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
10423|      0|                                                                                        return Some(expr6_0);
10424|      0|                                                                                    }
10425|      0|                                                                                }
10426|      0|                                                                            }
10427|      0|                                                                        }
10428|      0|                                                                    }
10429|      0|                                                                }
10430|      0|                                                            }
10431|      0|                                                        }
10432|      0|                                                    }
10433|       |                                                }
10434|       |                                                &Opcode::SwidenHigh  => {
10435|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10436|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10437|      0|                                                        if pattern15_0 == 8i128 as u32  {
10438|      0|                                                            if pattern15_1 == 16i128 as u32  {
10439|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10440|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10441|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10442|      0|                                                                        if let &Opcode::SwidenHigh  = pattern20_0 {
10443|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10444|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10445|      0|                                                                                if pattern23_0 == 8i128 as u32  {
10446|      0|                                                                                    if pattern23_1 == 16i128 as u32  {
10447|       |                                                                                        // Rule at src/isa/x64/lower.isle line 990.
10448|      0|                                                                                        let expr0_0 = constructor_put_in_xmm(ctx, pattern12_1)?;
10449|      0|                                                                                        let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
10450|      0|                                                                                        let expr2_0: u8 = 8i128 as u8;
10451|      0|                                                                                        let expr3_0 = OperandSize::Size32;
10452|      0|                                                                                        let expr4_0 = constructor_x64_palignr(ctx, expr0_0, &expr1_0, expr2_0, &expr3_0)?;
10453|      0|                                                                                        let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
10454|      0|                                                                                        let expr6_0 = constructor_x64_pmovsxbw(ctx, &expr5_0)?;
10455|      0|                                                                                        let expr7_0 = constructor_put_in_xmm(ctx, pattern20_1)?;
10456|      0|                                                                                        let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
10457|      0|                                                                                        let expr9_0: u8 = 8i128 as u8;
10458|      0|                                                                                        let expr10_0 = OperandSize::Size32;
10459|      0|                                                                                        let expr11_0 = constructor_x64_palignr(ctx, expr7_0, &expr8_0, expr9_0, &expr10_0)?;
10460|      0|                                                                                        let expr12_0 = C::xmm_to_xmm_mem(ctx, expr11_0);
10461|      0|                                                                                        let expr13_0 = constructor_x64_pmovsxbw(ctx, &expr12_0)?;
10462|      0|                                                                                        let expr14_0 = C::xmm_to_xmm_mem(ctx, expr13_0);
10463|      0|                                                                                        let expr15_0 = constructor_x64_pmullw(ctx, expr6_0, &expr14_0)?;
10464|      0|                                                                                        let expr16_0 = constructor_output_xmm(ctx, expr15_0)?;
10465|      0|                                                                                        return Some(expr16_0);
10466|      0|                                                                                    }
10467|      0|                                                                                }
10468|      0|                                                                            }
10469|      0|                                                                        }
10470|      0|                                                                    }
10471|      0|                                                                }
10472|      0|                                                            }
10473|      0|                                                        }
10474|      0|                                                    }
10475|       |                                                }
10476|       |                                                &Opcode::UwidenLow  => {
10477|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10478|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10479|      0|                                                        if pattern15_0 == 8i128 as u32  {
10480|      0|                                                            if pattern15_1 == 16i128 as u32  {
10481|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10482|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10483|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10484|      0|                                                                        if let &Opcode::UwidenLow  = pattern20_0 {
10485|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10486|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10487|      0|                                                                                if pattern23_0 == 8i128 as u32  {
10488|      0|                                                                                    if pattern23_1 == 16i128 as u32  {
10489|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1106.
10490|      0|                                                                                        let expr0_0 = C::put_in_xmm_mem(ctx, pattern12_1);
10491|      0|                                                                                        let expr1_0 = constructor_x64_pmovzxbw(ctx, &expr0_0)?;
10492|      0|                                                                                        let expr2_0 = C::put_in_xmm_mem(ctx, pattern20_1);
10493|      0|                                                                                        let expr3_0 = constructor_x64_pmovzxbw(ctx, &expr2_0)?;
10494|      0|                                                                                        let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
10495|      0|                                                                                        let expr5_0 = constructor_x64_pmullw(ctx, expr1_0, &expr4_0)?;
10496|      0|                                                                                        let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
10497|      0|                                                                                        return Some(expr6_0);
10498|      0|                                                                                    }
10499|      0|                                                                                }
10500|      0|                                                                            }
10501|      0|                                                                        }
10502|      0|                                                                    }
10503|      0|                                                                }
10504|      0|                                                            }
10505|      0|                                                        }
10506|      0|                                                    }
10507|       |                                                }
10508|       |                                                &Opcode::UwidenHigh  => {
10509|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10510|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10511|      0|                                                        if pattern15_0 == 8i128 as u32  {
10512|      0|                                                            if pattern15_1 == 16i128 as u32  {
10513|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10514|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10515|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10516|      0|                                                                        if let &Opcode::UwidenHigh  = pattern20_0 {
10517|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10518|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10519|      0|                                                                                if pattern23_0 == 8i128 as u32  {
10520|      0|                                                                                    if pattern23_1 == 16i128 as u32  {
10521|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1066.
10522|      0|                                                                                        let expr0_0 = constructor_put_in_xmm(ctx, pattern12_1)?;
10523|      0|                                                                                        let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
10524|      0|                                                                                        let expr2_0: u8 = 8i128 as u8;
10525|      0|                                                                                        let expr3_0 = OperandSize::Size32;
10526|      0|                                                                                        let expr4_0 = constructor_x64_palignr(ctx, expr0_0, &expr1_0, expr2_0, &expr3_0)?;
10527|      0|                                                                                        let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
10528|      0|                                                                                        let expr6_0 = constructor_x64_pmovzxbw(ctx, &expr5_0)?;
10529|      0|                                                                                        let expr7_0 = constructor_put_in_xmm(ctx, pattern20_1)?;
10530|      0|                                                                                        let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
10531|      0|                                                                                        let expr9_0: u8 = 8i128 as u8;
10532|      0|                                                                                        let expr10_0 = OperandSize::Size32;
10533|      0|                                                                                        let expr11_0 = constructor_x64_palignr(ctx, expr7_0, &expr8_0, expr9_0, &expr10_0)?;
10534|      0|                                                                                        let expr12_0 = C::xmm_to_xmm_mem(ctx, expr11_0);
10535|      0|                                                                                        let expr13_0 = constructor_x64_pmovzxbw(ctx, &expr12_0)?;
10536|      0|                                                                                        let expr14_0 = C::xmm_to_xmm_mem(ctx, expr13_0);
10537|      0|                                                                                        let expr15_0 = constructor_x64_pmullw(ctx, expr6_0, &expr14_0)?;
10538|      0|                                                                                        let expr16_0 = constructor_output_xmm(ctx, expr15_0)?;
10539|      0|                                                                                        return Some(expr16_0);
10540|      0|                                                                                    }
10541|      0|                                                                                }
10542|      0|                                                                            }
10543|      0|                                                                        }
10544|      0|                                                                    }
10545|      0|                                                                }
10546|      0|                                                            }
10547|      0|                                                        }
10548|      0|                                                    }
10549|       |                                                }
10550|      0|                                                _ => {}
10551|       |                                            }
10552|      0|                                        }
10553|      0|                                    }
10554|       |                                    // Rule at src/isa/x64/lower.isle line 934.
10555|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10556|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10557|      0|                                    let expr2_0 = constructor_x64_pmullw(ctx, expr0_0, &expr1_0)?;
10558|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10559|      0|                                    return Some(expr3_0);
10560|       |                                }
10561|      0|                                _ => {}
10562|       |                            }
10563|       |                        }
10564|      0|                        _ => {}
10565|       |                    }
10566|      0|                }
10567|      0|            }
10568|      0|            if pattern3_0 == 32i128 as u32  {
10569|      0|                if pattern3_1 == 4i128 as u32  {
10570|      0|                    let pattern6_0 = C::inst_data(ctx, pattern0_0);
10571|      0|                    match &pattern6_0 {
10572|      0|                        &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } => {
10573|      0|                            if let &Opcode::Splat  = pattern7_0 {
10574|      0|                                let pattern9_0 = C::value_type(ctx, pattern7_1);
10575|      0|                                if let Some(pattern10_0) = C::ty_scalar_float(ctx, pattern9_0) {
10576|       |                                    // Rule at src/isa/x64/lower.isle line 3613.
10577|      0|                                    let expr0_0: Type = F32X4;
10578|      0|                                    let expr1_0 = constructor_lower_splat_32x4(ctx, expr0_0, pattern7_1)?;
10579|      0|                                    let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
10580|      0|                                    return Some(expr2_0);
10581|      0|                                }
10582|      0|                                // Rule at src/isa/x64/lower.isle line 3616.
10583|      0|                                let expr0_0: Type = I32X4;
10584|      0|                                let expr1_0 = constructor_lower_splat_32x4(ctx, expr0_0, pattern7_1)?;
10585|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
10586|      0|                                return Some(expr2_0);
10587|      0|                            }
10588|       |                        }
10589|      0|                        &InstructionData::Binary { opcode: ref pattern7_0, args: ref pattern7_1 } => {
10590|      0|                            match pattern7_0 {
10591|       |                                &Opcode::Iadd  => {
10592|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10593|       |                                    // Rule at src/isa/x64/lower.isle line 107.
10594|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10595|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10596|      0|                                    let expr2_0 = constructor_x64_paddd(ctx, expr0_0, &expr1_0)?;
10597|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10598|      0|                                    return Some(expr3_0);
10599|       |                                }
10600|       |                                &Opcode::Isub  => {
10601|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10602|       |                                    // Rule at src/isa/x64/lower.isle line 222.
10603|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10604|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10605|      0|                                    let expr2_0 = constructor_x64_psubd(ctx, expr0_0, &expr1_0)?;
10606|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10607|      0|                                    return Some(expr3_0);
10608|       |                                }
10609|       |                                &Opcode::Imul  => {
10610|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10611|      0|                                    if let Some(pattern10_0) = C::def_inst(ctx, pattern9_0) {
10612|      0|                                        let pattern11_0 = C::inst_data(ctx, pattern10_0);
10613|      0|                                        if let &InstructionData::Unary { opcode: ref pattern12_0, arg: pattern12_1 } = &pattern11_0 {
10614|      0|                                            match pattern12_0 {
10615|       |                                                &Opcode::SwidenLow  => {
10616|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10617|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10618|      0|                                                        if pattern15_0 == 16i128 as u32  {
10619|      0|                                                            if pattern15_1 == 8i128 as u32  {
10620|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10621|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10622|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10623|      0|                                                                        if let &Opcode::SwidenLow  = pattern20_0 {
10624|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10625|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10626|      0|                                                                                if pattern23_0 == 16i128 as u32  {
10627|      0|                                                                                    if pattern23_1 == 8i128 as u32  {
10628|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1040.
10629|      0|                                                                                        let expr0_0 = constructor_put_in_xmm(ctx, pattern12_1)?;
10630|      0|                                                                                        let expr1_0 = constructor_put_in_xmm(ctx, pattern20_1)?;
10631|      0|                                                                                        let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10632|      0|                                                                                        let expr3_0 = constructor_x64_pmullw(ctx, expr0_0, &expr2_0)?;
10633|      0|                                                                                        let expr4_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10634|      0|                                                                                        let expr5_0 = constructor_x64_pmulhw(ctx, expr0_0, &expr4_0)?;
10635|      0|                                                                                        let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
10636|      0|                                                                                        let expr7_0 = constructor_x64_punpcklwd(ctx, expr3_0, &expr6_0)?;
10637|      0|                                                                                        let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
10638|      0|                                                                                        return Some(expr8_0);
10639|      0|                                                                                    }
10640|      0|                                                                                }
10641|      0|                                                                            }
10642|      0|                                                                        }
10643|      0|                                                                    }
10644|      0|                                                                }
10645|      0|                                                            }
10646|      0|                                                        }
10647|      0|                                                    }
10648|       |                                                }
10649|       |                                                &Opcode::SwidenHigh  => {
10650|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10651|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10652|      0|                                                        if pattern15_0 == 16i128 as u32  {
10653|      0|                                                            if pattern15_1 == 8i128 as u32  {
10654|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10655|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10656|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10657|      0|                                                                        if let &Opcode::SwidenHigh  = pattern20_0 {
10658|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10659|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10660|      0|                                                                                if pattern23_0 == 16i128 as u32  {
10661|      0|                                                                                    if pattern23_1 == 8i128 as u32  {
10662|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1004.
10663|      0|                                                                                        let expr0_0 = constructor_put_in_xmm(ctx, pattern12_1)?;
10664|      0|                                                                                        let expr1_0 = constructor_put_in_xmm(ctx, pattern20_1)?;
10665|      0|                                                                                        let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10666|      0|                                                                                        let expr3_0 = constructor_x64_pmullw(ctx, expr0_0, &expr2_0)?;
10667|      0|                                                                                        let expr4_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10668|      0|                                                                                        let expr5_0 = constructor_x64_pmulhw(ctx, expr0_0, &expr4_0)?;
10669|      0|                                                                                        let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
10670|      0|                                                                                        let expr7_0 = constructor_x64_punpckhwd(ctx, expr3_0, &expr6_0)?;
10671|      0|                                                                                        let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
10672|      0|                                                                                        return Some(expr8_0);
10673|      0|                                                                                    }
10674|      0|                                                                                }
10675|      0|                                                                            }
10676|      0|                                                                        }
10677|      0|                                                                    }
10678|      0|                                                                }
10679|      0|                                                            }
10680|      0|                                                        }
10681|      0|                                                    }
10682|       |                                                }
10683|       |                                                &Opcode::UwidenLow  => {
10684|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10685|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10686|      0|                                                        if pattern15_0 == 16i128 as u32  {
10687|      0|                                                            if pattern15_1 == 8i128 as u32  {
10688|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10689|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10690|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10691|      0|                                                                        if let &Opcode::UwidenLow  = pattern20_0 {
10692|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10693|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10694|      0|                                                                                if pattern23_0 == 16i128 as u32  {
10695|      0|                                                                                    if pattern23_1 == 8i128 as u32  {
10696|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1116.
10697|      0|                                                                                        let expr0_0 = constructor_put_in_xmm(ctx, pattern12_1)?;
10698|      0|                                                                                        let expr1_0 = constructor_put_in_xmm(ctx, pattern20_1)?;
10699|      0|                                                                                        let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10700|      0|                                                                                        let expr3_0 = constructor_x64_pmullw(ctx, expr0_0, &expr2_0)?;
10701|      0|                                                                                        let expr4_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10702|      0|                                                                                        let expr5_0 = constructor_x64_pmulhuw(ctx, expr0_0, &expr4_0)?;
10703|      0|                                                                                        let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
10704|      0|                                                                                        let expr7_0 = constructor_x64_punpcklwd(ctx, expr3_0, &expr6_0)?;
10705|      0|                                                                                        let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
10706|      0|                                                                                        return Some(expr8_0);
10707|      0|                                                                                    }
10708|      0|                                                                                }
10709|      0|                                                                            }
10710|      0|                                                                        }
10711|      0|                                                                    }
10712|      0|                                                                }
10713|      0|                                                            }
10714|      0|                                                        }
10715|      0|                                                    }
10716|       |                                                }
10717|       |                                                &Opcode::UwidenHigh  => {
10718|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10719|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10720|      0|                                                        if pattern15_0 == 16i128 as u32  {
10721|      0|                                                            if pattern15_1 == 8i128 as u32  {
10722|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10723|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10724|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10725|      0|                                                                        if let &Opcode::UwidenHigh  = pattern20_0 {
10726|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10727|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10728|      0|                                                                                if pattern23_0 == 16i128 as u32  {
10729|      0|                                                                                    if pattern23_1 == 8i128 as u32  {
10730|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1080.
10731|      0|                                                                                        let expr0_0 = constructor_put_in_xmm(ctx, pattern12_1)?;
10732|      0|                                                                                        let expr1_0 = constructor_put_in_xmm(ctx, pattern20_1)?;
10733|      0|                                                                                        let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10734|      0|                                                                                        let expr3_0 = constructor_x64_pmullw(ctx, expr0_0, &expr2_0)?;
10735|      0|                                                                                        let expr4_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10736|      0|                                                                                        let expr5_0 = constructor_x64_pmulhuw(ctx, expr0_0, &expr4_0)?;
10737|      0|                                                                                        let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
10738|      0|                                                                                        let expr7_0 = constructor_x64_punpckhwd(ctx, expr3_0, &expr6_0)?;
10739|      0|                                                                                        let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
10740|      0|                                                                                        return Some(expr8_0);
10741|      0|                                                                                    }
10742|      0|                                                                                }
10743|      0|                                                                            }
10744|      0|                                                                        }
10745|      0|                                                                    }
10746|      0|                                                                }
10747|      0|                                                            }
10748|      0|                                                        }
10749|      0|                                                    }
10750|       |                                                }
10751|      0|                                                _ => {}
10752|       |                                            }
10753|      0|                                        }
10754|      0|                                    }
10755|       |                                    // Rule at src/isa/x64/lower.isle line 937.
10756|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10757|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10758|      0|                                    let expr2_0 = constructor_x64_pmulld(ctx, expr0_0, &expr1_0)?;
10759|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10760|      0|                                    return Some(expr3_0);
10761|       |                                }
10762|      0|                                _ => {}
10763|       |                            }
10764|       |                        }
10765|      0|                        _ => {}
10766|       |                    }
10767|      0|                }
10768|      0|            }
10769|      0|            if pattern3_0 == 64i128 as u32  {
10770|      0|                if pattern3_1 == 2i128 as u32  {
10771|      0|                    let pattern6_0 = C::inst_data(ctx, pattern0_0);
10772|      0|                    match &pattern6_0 {
10773|      0|                        &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } => {
10774|      0|                            if let &Opcode::Splat  = pattern7_0 {
10775|      0|                                let pattern9_0 = C::value_type(ctx, pattern7_1);
10776|      0|                                if let Some(pattern10_0) = C::ty_scalar_float(ctx, pattern9_0) {
10777|       |                                    // Rule at src/isa/x64/lower.isle line 3626.
10778|      0|                                    let expr0_0: Type = F64X2;
10779|      0|                                    let expr1_0 = constructor_lower_splat_64x2(ctx, expr0_0, pattern7_1)?;
10780|      0|                                    let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
10781|      0|                                    return Some(expr2_0);
10782|      0|                                }
10783|      0|                                // Rule at src/isa/x64/lower.isle line 3629.
10784|      0|                                let expr0_0: Type = I64X2;
10785|      0|                                let expr1_0 = constructor_lower_splat_64x2(ctx, expr0_0, pattern7_1)?;
10786|      0|                                let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
10787|      0|                                return Some(expr2_0);
10788|      0|                            }
10789|       |                        }
10790|      0|                        &InstructionData::Binary { opcode: ref pattern7_0, args: ref pattern7_1 } => {
10791|      0|                            match pattern7_0 {
10792|       |                                &Opcode::Iadd  => {
10793|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10794|       |                                    // Rule at src/isa/x64/lower.isle line 111.
10795|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10796|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10797|      0|                                    let expr2_0 = constructor_x64_paddq(ctx, expr0_0, &expr1_0)?;
10798|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10799|      0|                                    return Some(expr3_0);
10800|       |                                }
10801|       |                                &Opcode::Isub  => {
10802|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10803|       |                                    // Rule at src/isa/x64/lower.isle line 226.
10804|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10805|      0|                                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern9_1);
10806|      0|                                    let expr2_0 = constructor_x64_psubq(ctx, expr0_0, &expr1_0)?;
10807|      0|                                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
10808|      0|                                    return Some(expr3_0);
10809|       |                                }
10810|       |                                &Opcode::Imul  => {
10811|      0|                                    let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
10812|      0|                                    if let Some(pattern10_0) = C::def_inst(ctx, pattern9_0) {
10813|      0|                                        let pattern11_0 = C::inst_data(ctx, pattern10_0);
10814|      0|                                        if let &InstructionData::Unary { opcode: ref pattern12_0, arg: pattern12_1 } = &pattern11_0 {
10815|      0|                                            match pattern12_0 {
10816|       |                                                &Opcode::SwidenLow  => {
10817|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10818|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10819|      0|                                                        if pattern15_0 == 32i128 as u32  {
10820|      0|                                                            if pattern15_1 == 4i128 as u32  {
10821|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10822|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10823|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10824|      0|                                                                        if let &Opcode::SwidenLow  = pattern20_0 {
10825|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10826|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10827|      0|                                                                                if pattern23_0 == 32i128 as u32  {
10828|      0|                                                                                    if pattern23_1 == 4i128 as u32  {
10829|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1052.
10830|      0|                                                                                        let expr0_0 = C::put_in_xmm_mem(ctx, pattern12_1);
10831|      0|                                                                                        let expr1_0: u8 = 80i128 as u8;
10832|      0|                                                                                        let expr2_0 = OperandSize::Size32;
10833|      0|                                                                                        let expr3_0 = constructor_x64_pshufd(ctx, &expr0_0, expr1_0, &expr2_0)?;
10834|      0|                                                                                        let expr4_0 = C::put_in_xmm_mem(ctx, pattern20_1);
10835|      0|                                                                                        let expr5_0: u8 = 80i128 as u8;
10836|      0|                                                                                        let expr6_0 = OperandSize::Size32;
10837|      0|                                                                                        let expr7_0 = constructor_x64_pshufd(ctx, &expr4_0, expr5_0, &expr6_0)?;
10838|      0|                                                                                        let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
10839|      0|                                                                                        let expr9_0 = constructor_x64_pmuldq(ctx, expr3_0, &expr8_0)?;
10840|      0|                                                                                        let expr10_0 = constructor_output_xmm(ctx, expr9_0)?;
10841|      0|                                                                                        return Some(expr10_0);
10842|      0|                                                                                    }
10843|      0|                                                                                }
10844|      0|                                                                            }
10845|      0|                                                                        }
10846|      0|                                                                    }
10847|      0|                                                                }
10848|      0|                                                            }
10849|      0|                                                        }
10850|      0|                                                    }
10851|       |                                                }
10852|       |                                                &Opcode::SwidenHigh  => {
10853|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10854|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10855|      0|                                                        if pattern15_0 == 32i128 as u32  {
10856|      0|                                                            if pattern15_1 == 4i128 as u32  {
10857|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10858|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10859|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10860|      0|                                                                        if let &Opcode::SwidenHigh  = pattern20_0 {
10861|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10862|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10863|      0|                                                                                if pattern23_0 == 32i128 as u32  {
10864|      0|                                                                                    if pattern23_1 == 4i128 as u32  {
10865|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1016.
10866|      0|                                                                                        let expr0_0 = C::put_in_xmm_mem(ctx, pattern12_1);
10867|      0|                                                                                        let expr1_0: u8 = 250i128 as u8;
10868|      0|                                                                                        let expr2_0 = OperandSize::Size32;
10869|      0|                                                                                        let expr3_0 = constructor_x64_pshufd(ctx, &expr0_0, expr1_0, &expr2_0)?;
10870|      0|                                                                                        let expr4_0 = C::put_in_xmm_mem(ctx, pattern20_1);
10871|      0|                                                                                        let expr5_0: u8 = 250i128 as u8;
10872|      0|                                                                                        let expr6_0 = OperandSize::Size32;
10873|      0|                                                                                        let expr7_0 = constructor_x64_pshufd(ctx, &expr4_0, expr5_0, &expr6_0)?;
10874|      0|                                                                                        let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
10875|      0|                                                                                        let expr9_0 = constructor_x64_pmuldq(ctx, expr3_0, &expr8_0)?;
10876|      0|                                                                                        let expr10_0 = constructor_output_xmm(ctx, expr9_0)?;
10877|      0|                                                                                        return Some(expr10_0);
10878|      0|                                                                                    }
10879|      0|                                                                                }
10880|      0|                                                                            }
10881|      0|                                                                        }
10882|      0|                                                                    }
10883|      0|                                                                }
10884|      0|                                                            }
10885|      0|                                                        }
10886|      0|                                                    }
10887|       |                                                }
10888|       |                                                &Opcode::UwidenLow  => {
10889|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10890|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10891|      0|                                                        if pattern15_0 == 32i128 as u32  {
10892|      0|                                                            if pattern15_1 == 4i128 as u32  {
10893|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10894|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10895|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10896|      0|                                                                        if let &Opcode::UwidenLow  = pattern20_0 {
10897|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10898|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10899|      0|                                                                                if pattern23_0 == 32i128 as u32  {
10900|      0|                                                                                    if pattern23_1 == 4i128 as u32  {
10901|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1128.
10902|      0|                                                                                        let expr0_0 = C::put_in_xmm_mem(ctx, pattern12_1);
10903|      0|                                                                                        let expr1_0: u8 = 80i128 as u8;
10904|      0|                                                                                        let expr2_0 = OperandSize::Size32;
10905|      0|                                                                                        let expr3_0 = constructor_x64_pshufd(ctx, &expr0_0, expr1_0, &expr2_0)?;
10906|      0|                                                                                        let expr4_0 = C::put_in_xmm_mem(ctx, pattern20_1);
10907|      0|                                                                                        let expr5_0: u8 = 80i128 as u8;
10908|      0|                                                                                        let expr6_0 = OperandSize::Size32;
10909|      0|                                                                                        let expr7_0 = constructor_x64_pshufd(ctx, &expr4_0, expr5_0, &expr6_0)?;
10910|      0|                                                                                        let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
10911|      0|                                                                                        let expr9_0 = constructor_x64_pmuludq(ctx, expr3_0, &expr8_0)?;
10912|      0|                                                                                        let expr10_0 = constructor_output_xmm(ctx, expr9_0)?;
10913|      0|                                                                                        return Some(expr10_0);
10914|      0|                                                                                    }
10915|      0|                                                                                }
10916|      0|                                                                            }
10917|      0|                                                                        }
10918|      0|                                                                    }
10919|      0|                                                                }
10920|      0|                                                            }
10921|      0|                                                        }
10922|      0|                                                    }
10923|       |                                                }
10924|       |                                                &Opcode::UwidenHigh  => {
10925|      0|                                                    let pattern14_0 = C::value_type(ctx, pattern12_1);
10926|      0|                                                    if let Some((pattern15_0, pattern15_1)) = C::multi_lane(ctx, pattern14_0) {
10927|      0|                                                        if pattern15_0 == 32i128 as u32  {
10928|      0|                                                            if pattern15_1 == 4i128 as u32  {
10929|      0|                                                                if let Some(pattern18_0) = C::def_inst(ctx, pattern9_1) {
10930|      0|                                                                    let pattern19_0 = C::inst_data(ctx, pattern18_0);
10931|      0|                                                                    if let &InstructionData::Unary { opcode: ref pattern20_0, arg: pattern20_1 } = &pattern19_0 {
10932|      0|                                                                        if let &Opcode::UwidenHigh  = pattern20_0 {
10933|      0|                                                                            let pattern22_0 = C::value_type(ctx, pattern20_1);
10934|      0|                                                                            if let Some((pattern23_0, pattern23_1)) = C::multi_lane(ctx, pattern22_0) {
10935|      0|                                                                                if pattern23_0 == 32i128 as u32  {
10936|      0|                                                                                    if pattern23_1 == 4i128 as u32  {
10937|       |                                                                                        // Rule at src/isa/x64/lower.isle line 1092.
10938|      0|                                                                                        let expr0_0 = C::put_in_xmm_mem(ctx, pattern12_1);
10939|      0|                                                                                        let expr1_0: u8 = 250i128 as u8;
10940|      0|                                                                                        let expr2_0 = OperandSize::Size32;
10941|      0|                                                                                        let expr3_0 = constructor_x64_pshufd(ctx, &expr0_0, expr1_0, &expr2_0)?;
10942|      0|                                                                                        let expr4_0 = C::put_in_xmm_mem(ctx, pattern20_1);
10943|      0|                                                                                        let expr5_0: u8 = 250i128 as u8;
10944|      0|                                                                                        let expr6_0 = OperandSize::Size32;
10945|      0|                                                                                        let expr7_0 = constructor_x64_pshufd(ctx, &expr4_0, expr5_0, &expr6_0)?;
10946|      0|                                                                                        let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
10947|      0|                                                                                        let expr9_0 = constructor_x64_pmuludq(ctx, expr3_0, &expr8_0)?;
10948|      0|                                                                                        let expr10_0 = constructor_output_xmm(ctx, expr9_0)?;
10949|      0|                                                                                        return Some(expr10_0);
10950|      0|                                                                                    }
10951|      0|                                                                                }
10952|      0|                                                                            }
10953|      0|                                                                        }
10954|      0|                                                                    }
10955|      0|                                                                }
10956|      0|                                                            }
10957|      0|                                                        }
10958|      0|                                                    }
10959|       |                                                }
10960|      0|                                                _ => {}
10961|       |                                            }
10962|      0|                                        }
10963|      0|                                    }
10964|       |                                    // Rule at src/isa/x64/lower.isle line 968.
10965|      0|                                    let expr0_0 = constructor_put_in_xmm(ctx, pattern9_0)?;
10966|      0|                                    let expr1_0 = constructor_put_in_xmm(ctx, pattern9_1)?;
10967|      0|                                    let expr2_0: u32 = 32i128 as u32;
10968|      0|                                    let expr3_0 = RegMemImm::Imm {
10969|      0|                                        simm32: expr2_0,
10970|      0|                                    };
10971|      0|                                    let expr4_0 = constructor_mov_rmi_to_xmm(ctx, &expr3_0)?;
10972|      0|                                    let expr5_0 = constructor_x64_psrlq(ctx, expr0_0, &expr4_0)?;
10973|      0|                                    let expr6_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10974|      0|                                    let expr7_0 = constructor_x64_pmuludq(ctx, expr5_0, &expr6_0)?;
10975|      0|                                    let expr8_0: u32 = 32i128 as u32;
10976|      0|                                    let expr9_0 = RegMemImm::Imm {
10977|      0|                                        simm32: expr8_0,
10978|      0|                                    };
10979|      0|                                    let expr10_0 = constructor_mov_rmi_to_xmm(ctx, &expr9_0)?;
10980|      0|                                    let expr11_0 = constructor_x64_psrlq(ctx, expr1_0, &expr10_0)?;
10981|      0|                                    let expr12_0 = C::xmm_to_xmm_mem(ctx, expr11_0);
10982|      0|                                    let expr13_0 = constructor_x64_pmuludq(ctx, expr0_0, &expr12_0)?;
10983|      0|                                    let expr14_0 = C::xmm_to_xmm_mem(ctx, expr13_0);
10984|      0|                                    let expr15_0 = constructor_x64_paddq(ctx, expr7_0, &expr14_0)?;
10985|      0|                                    let expr16_0: u32 = 32i128 as u32;
10986|      0|                                    let expr17_0 = RegMemImm::Imm {
10987|      0|                                        simm32: expr16_0,
10988|      0|                                    };
10989|      0|                                    let expr18_0 = constructor_mov_rmi_to_xmm(ctx, &expr17_0)?;
10990|      0|                                    let expr19_0 = constructor_x64_psllq(ctx, expr15_0, &expr18_0)?;
10991|      0|                                    let expr20_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
10992|      0|                                    let expr21_0 = constructor_x64_pmuludq(ctx, expr0_0, &expr20_0)?;
10993|      0|                                    let expr22_0 = C::xmm_to_xmm_mem(ctx, expr19_0);
10994|      0|                                    let expr23_0 = constructor_x64_paddq(ctx, expr21_0, &expr22_0)?;
10995|      0|                                    let expr24_0 = constructor_output_xmm(ctx, expr23_0)?;
10996|      0|                                    return Some(expr24_0);
10997|       |                                }
10998|      0|                                _ => {}
10999|       |                            }
11000|       |                        }
11001|      0|                        _ => {}
11002|       |                    }
11003|      0|                }
11004|      0|            }
11005|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11006|      0|            match &pattern4_0 {
11007|      0|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
11008|      0|                    if let &Opcode::Bnot  = pattern5_0 {
11009|       |                        // Rule at src/isa/x64/lower.isle line 1248.
11010|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern5_1)?;
11011|      0|                        let expr1_0 = constructor_vector_all_ones(ctx, )?;
11012|      0|                        let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
11013|      0|                        let expr3_0 = constructor_sse_xor(ctx, pattern2_0, expr0_0, &expr2_0)?;
11014|      0|                        let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
11015|      0|                        return Some(expr4_0);
11016|      0|                    }
11017|       |                }
11018|      0|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
11019|      0|                    match pattern5_0 {
11020|       |                        &Opcode::Band  => {
11021|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11022|       |                            // Rule at src/isa/x64/lower.isle line 302.
11023|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
11024|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
11025|      0|                            let expr2_0 = constructor_sse_and(ctx, pattern2_0, expr0_0, &expr1_0)?;
11026|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
11027|      0|                            return Some(expr3_0);
11028|       |                        }
11029|       |                        &Opcode::Bor  => {
11030|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11031|       |                            // Rule at src/isa/x64/lower.isle line 366.
11032|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
11033|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
11034|      0|                            let expr2_0 = constructor_sse_or(ctx, pattern2_0, expr0_0, &expr1_0)?;
11035|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
11036|      0|                            return Some(expr3_0);
11037|       |                        }
11038|       |                        &Opcode::Bxor  => {
11039|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11040|       |                            // Rule at src/isa/x64/lower.isle line 427.
11041|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
11042|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
11043|      0|                            let expr2_0 = constructor_sse_xor(ctx, pattern2_0, expr0_0, &expr1_0)?;
11044|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
11045|      0|                            return Some(expr3_0);
11046|       |                        }
11047|      0|                        _ => {}
11048|       |                    }
11049|       |                }
11050|      0|                &InstructionData::Ternary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
11051|      0|                    match pattern5_0 {
11052|       |                        &Opcode::Bitselect  => {
11053|      0|                            let (pattern7_0, pattern7_1, pattern7_2) = C::unpack_value_array_3(ctx, pattern5_1);
11054|       |                            // Rule at src/isa/x64/lower.isle line 1253.
11055|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern7_0)?;
11056|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
11057|      0|                            let expr2_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
11058|      0|                            let expr3_0 = constructor_sse_and(ctx, pattern2_0, expr1_0, &expr2_0)?;
11059|      0|                            let expr4_0 = C::put_in_xmm_mem(ctx, pattern7_2);
11060|      0|                            let expr5_0 = constructor_sse_and_not(ctx, pattern2_0, expr0_0, &expr4_0)?;
11061|      0|                            let expr6_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
11062|      0|                            let expr7_0 = constructor_sse_or(ctx, pattern2_0, expr5_0, &expr6_0)?;
11063|      0|                            let expr8_0 = constructor_output_xmm(ctx, expr7_0)?;
11064|      0|                            return Some(expr8_0);
11065|       |                        }
11066|       |                        &Opcode::Vselect  => {
11067|      0|                            let (pattern7_0, pattern7_1, pattern7_2) = C::unpack_value_array_3(ctx, pattern5_1);
11068|      0|                            // Rule at src/isa/x64/lower.isle line 1267.
11069|      0|                            let expr0_0 = C::put_in_xmm_mem(ctx, pattern7_0);
11070|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern7_1);
11071|      0|                            let expr2_0 = constructor_put_in_xmm(ctx, pattern7_2)?;
11072|      0|                            let expr3_0 = constructor_x64_blend(ctx, pattern2_0, &expr0_0, &expr1_0, expr2_0)?;
11073|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
11074|      0|                            return Some(expr4_0);
11075|       |                        }
11076|      0|                        _ => {}
11077|       |                    }
11078|       |                }
11079|      0|                _ => {}
11080|       |            }
11081|  39.3k|        }
11082|  39.3k|        if let Some(pattern3_0) = C::fits_in_32(ctx, pattern2_0) {
11083|  24.5k|            if let Some(pattern4_0) = C::ty_int(ctx, pattern2_0) {
11084|  24.3k|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
11085|  24.3k|                if let &InstructionData::LoadNoOffset { opcode: ref pattern6_0, arg: pattern6_1, flags: pattern6_2 } = &pattern5_0 {
11086|      0|                    if let &Opcode::AtomicLoad  = pattern6_0 {
11087|       |                        // Rule at src/isa/x64/lower.isle line 2791.
11088|      0|                        let expr0_0 = C::ty_bits_u16(ctx, pattern3_0);
11089|      0|                        let expr1_0: u16 = 64i128 as u16;
11090|      0|                        let expr2_0 = C::ext_mode(ctx, expr0_0, expr1_0);
11091|      0|                        let expr3_0 = C::zero_offset(ctx, );
11092|      0|                        let expr4_0 = constructor_to_amode(ctx, pattern6_2, pattern6_1, expr3_0)?;
11093|      0|                        let expr5_0 = constructor_amode_to_gpr_mem(ctx, &expr4_0)?;
11094|      0|                        let expr6_0 = constructor_x64_movzx(ctx, &expr2_0, &expr5_0)?;
11095|      0|                        let expr7_0 = constructor_output_gpr(ctx, expr6_0)?;
11096|      0|                        return Some(expr7_0);
11097|      0|                    }
11098|  24.3k|                }
11099|    188|            }
11100|  24.5k|            if let Some(pattern4_0) = C::is_gpr_type(ctx, pattern2_0) {
11101|  24.4k|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
11102|  24.4k|                if let &InstructionData::Load { opcode: ref pattern6_0, arg: pattern6_1, flags: pattern6_2, offset: pattern6_3 } = &pattern5_0 {
11103|  9.55k|                    if let &Opcode::Load  = pattern6_0 {
11104|       |                        // Rule at src/isa/x64/lower.isle line 2500.
11105|  9.45k|                        let expr0_0 = C::ty_bits_u16(ctx, pattern3_0);
11106|  9.45k|                        let expr1_0: u16 = 64i128 as u16;
11107|  9.45k|                        let expr2_0 = C::ext_mode(ctx, expr0_0, expr1_0);
11108|  9.45k|                        let expr3_0 = constructor_to_amode(ctx, pattern6_2, pattern6_1, pattern6_3)?;
11109|  9.45k|                        let expr4_0 = constructor_amode_to_gpr_mem(ctx, &expr3_0)?;
11110|  9.45k|                        let expr5_0 = constructor_x64_movzx(ctx, &expr2_0, &expr4_0)?;
11111|  9.45k|                        let expr6_0 = constructor_output_gpr(ctx, expr5_0)?;
11112|  9.45k|                        return Some(expr6_0);
11113|     98|                    }
11114|  14.9k|                }
11115|     32|            }
11116|  15.0k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11117|  15.0k|            if let &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } = &pattern4_0 {
11118|    524|                if let &Opcode::Uextend  = pattern5_0 {
11119|      0|                    let pattern7_0 = C::value_type(ctx, pattern5_1);
11120|      0|                    if let Some(pattern8_0) = C::fits_in_32(ctx, pattern7_0) {
11121|       |                        // Rule at src/isa/x64/lower.isle line 2079.
11122|      0|                        let expr0_0: Type = I32;
11123|      0|                        let expr1_0 = ExtendKind::Zero;
11124|      0|                        let expr2_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr0_0, &expr1_0)?;
11125|      0|                        let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11126|      0|                        return Some(expr3_0);
11127|      0|                    }
11128|    524|                }
11129|  14.5k|            }
11130|  14.8k|        }
11131|  29.8k|        if let Some(pattern3_0) = C::fits_in_64(ctx, pattern2_0) {
11132|  29.8k|            if let Some(pattern4_0) = C::ty_int(ctx, pattern2_0) {
11133|  29.6k|                let pattern5_0 = C::inst_data(ctx, pattern0_0);
11134|  29.6k|                match &pattern5_0 {
11135|      0|                    &InstructionData::AtomicRmw { opcode: ref pattern6_0, args: ref pattern6_1, flags: pattern6_2, op: ref pattern6_3 } => {
11136|      0|                        if let &Opcode::AtomicRmw  = pattern6_0 {
11137|      0|                            let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
11138|      0|                            // Rule at src/isa/x64/lower.isle line 2824.
11139|      0|                            let expr0_0 = C::atomic_rmw_op_to_mach_atomic_rmw_op(ctx, pattern6_3);
11140|      0|                            let expr1_0 = C::zero_offset(ctx, );
11141|      0|                            let expr2_0 = constructor_to_amode(ctx, pattern6_2, pattern8_0, expr1_0)?;
11142|      0|                            let expr3_0 = C::amode_to_synthetic_amode(ctx, &expr2_0);
11143|      0|                            let expr4_0 = constructor_put_in_gpr(ctx, pattern8_1)?;
11144|      0|                            let expr5_0 = constructor_x64_atomic_rmw_seq(ctx, pattern3_0, &expr0_0, &expr3_0, expr4_0)?;
11145|      0|                            let expr6_0 = constructor_output_gpr(ctx, expr5_0)?;
11146|      0|                            return Some(expr6_0);
11147|      0|                        }
11148|       |                    }
11149|      0|                    &InstructionData::AtomicCas { opcode: ref pattern6_0, args: ref pattern6_1, flags: pattern6_2 } => {
11150|      0|                        if let &Opcode::AtomicCas  = pattern6_0 {
11151|      0|                            let (pattern8_0, pattern8_1, pattern8_2) = C::unpack_value_array_3(ctx, pattern6_1);
11152|       |                            // Rule at src/isa/x64/lower.isle line 2808.
11153|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern8_1)?;
11154|      0|                            let expr1_0 = constructor_put_in_gpr(ctx, pattern8_2)?;
11155|      0|                            let expr2_0 = C::zero_offset(ctx, );
11156|      0|                            let expr3_0 = constructor_to_amode(ctx, pattern6_2, pattern8_0, expr2_0)?;
11157|      0|                            let expr4_0 = C::amode_to_synthetic_amode(ctx, &expr3_0);
11158|      0|                            let expr5_0 = constructor_x64_cmpxchg(ctx, pattern3_0, expr0_0, expr1_0, &expr4_0)?;
11159|      0|                            let expr6_0 = constructor_output_gpr(ctx, expr5_0)?;
11160|      0|                            return Some(expr6_0);
11161|      0|                        }
11162|       |                    }
11163|  29.6k|                    _ => {}
11164|       |                }
11165|    216|            }
11166|  29.8k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11167|  29.8k|            match &pattern4_0 {
11168|    752|                &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } => {
11169|    752|                    match pattern5_0 {
11170|       |                        &Opcode::Ineg  => {
11171|       |                            // Rule at src/isa/x64/lower.isle line 834.
11172|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
11173|      0|                            let expr1_0 = constructor_x64_neg(ctx, pattern3_0, expr0_0)?;
11174|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11175|      0|                            return Some(expr2_0);
11176|       |                        }
11177|       |                        &Opcode::Bnot  => {
11178|       |                            // Rule at src/isa/x64/lower.isle line 1227.
11179|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
11180|      0|                            let expr1_0 = constructor_x64_not(ctx, pattern3_0, expr0_0)?;
11181|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11182|      0|                            return Some(expr2_0);
11183|       |                        }
11184|       |                        &Opcode::Breduce  => {
11185|       |                            // Rule at src/isa/x64/lower.isle line 2184.
11186|      0|                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
11187|      0|                            let expr1_0: usize = 0i128 as usize;
11188|      0|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
11189|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11190|      0|                            return Some(expr3_0);
11191|       |                        }
11192|       |                        &Opcode::Bint  => {
11193|       |                            // Rule at src/isa/x64/lower.isle line 2192.
11194|    156|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
11195|    156|                            let expr1_0: u32 = 1i128 as u32;
11196|    156|                            let expr2_0 = RegMemImm::Imm {
11197|    156|                                simm32: expr1_0,
11198|    156|                            };
11199|    156|                            let expr3_0 = C::gpr_mem_imm_new(ctx, &expr2_0);
11200|    156|                            let expr4_0 = constructor_x64_and(ctx, pattern3_0, expr0_0, &expr3_0)?;
11201|    156|                            let expr5_0 = constructor_output_gpr(ctx, expr4_0)?;
11202|    156|                            return Some(expr5_0);
11203|       |                        }
11204|       |                        &Opcode::Ireduce  => {
11205|       |                            // Rule at src/isa/x64/lower.isle line 2176.
11206|    342|                            let expr0_0 = C::put_in_regs(ctx, pattern5_1);
11207|    342|                            let expr1_0: usize = 0i128 as usize;
11208|    342|                            let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
11209|    342|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11210|    342|                            return Some(expr3_0);
11211|       |                        }
11212|    254|                        _ => {}
11213|       |                    }
11214|       |                }
11215|      0|                &InstructionData::UnaryImm { opcode: ref pattern5_0, imm: pattern5_1 } => {
11216|      0|                    if let &Opcode::Iconst  = pattern5_0 {
11217|      0|                        let pattern7_0 = C::u64_from_imm64(ctx, pattern5_1);
11218|       |                        // Rule at src/isa/x64/lower.isle line 15.
11219|      0|                        let expr0_0 = constructor_imm(ctx, pattern3_0, pattern7_0)?;
11220|      0|                        let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
11221|      0|                        return Some(expr1_0);
11222|      0|                    }
11223|       |                }
11224|      0|                &InstructionData::UnaryBool { opcode: ref pattern5_0, imm: pattern5_1 } => {
11225|      0|                    if let &Opcode::Bconst  = pattern5_0 {
11226|      0|                        if pattern5_1 == true {
11227|       |                            // Rule at src/isa/x64/lower.isle line 33.
11228|      0|                            let expr0_0: u64 = 1i128 as u64;
11229|      0|                            let expr1_0 = constructor_imm(ctx, pattern3_0, expr0_0)?;
11230|      0|                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
11231|      0|                            return Some(expr2_0);
11232|      0|                        }
11233|      0|                        if pattern5_1 == false {
11234|       |                            // Rule at src/isa/x64/lower.isle line 29.
11235|      0|                            let expr0_0: u64 = 0i128 as u64;
11236|      0|                            let expr1_0 = constructor_imm(ctx, pattern3_0, expr0_0)?;
11237|      0|                            let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
11238|      0|                            return Some(expr2_0);
11239|      0|                        }
11240|      0|                    }
11241|       |                }
11242|  9.53k|                &InstructionData::Binary { opcode: ref pattern5_0, args: ref pattern5_1 } => {
11243|  9.53k|                    match pattern5_0 {
11244|       |                        &Opcode::Imin  => {
11245|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11246|      0|                            // Rule at src/isa/x64/lower.isle line 1360.
11247|      0|                            let expr0_0 = CC::L;
11248|      0|                            let expr1_0 = constructor_cmp_and_choose(ctx, pattern3_0, &expr0_0, pattern7_0, pattern7_1)?;
11249|      0|                            let expr2_0 = C::output(ctx, expr1_0);
11250|      0|                            return Some(expr2_0);
11251|       |                        }
11252|       |                        &Opcode::Umin  => {
11253|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11254|      0|                            // Rule at src/isa/x64/lower.isle line 1354.
11255|      0|                            let expr0_0 = CC::B;
11256|      0|                            let expr1_0 = constructor_cmp_and_choose(ctx, pattern3_0, &expr0_0, pattern7_0, pattern7_1)?;
11257|      0|                            let expr2_0 = C::output(ctx, expr1_0);
11258|      0|                            return Some(expr2_0);
11259|       |                        }
11260|       |                        &Opcode::Imax  => {
11261|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11262|      0|                            // Rule at src/isa/x64/lower.isle line 1363.
11263|      0|                            let expr0_0 = CC::NL;
11264|      0|                            let expr1_0 = constructor_cmp_and_choose(ctx, pattern3_0, &expr0_0, pattern7_0, pattern7_1)?;
11265|      0|                            let expr2_0 = C::output(ctx, expr1_0);
11266|      0|                            return Some(expr2_0);
11267|       |                        }
11268|       |                        &Opcode::Umax  => {
11269|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11270|      0|                            // Rule at src/isa/x64/lower.isle line 1357.
11271|      0|                            let expr0_0 = CC::NB;
11272|      0|                            let expr1_0 = constructor_cmp_and_choose(ctx, pattern3_0, &expr0_0, pattern7_0, pattern7_1)?;
11273|      0|                            let expr2_0 = C::output(ctx, expr1_0);
11274|      0|                            return Some(expr2_0);
11275|       |                        }
11276|       |                        &Opcode::Iadd  => {
11277|  4.89k|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11278|  4.89k|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_0) {
11279|       |                                // Rule at src/isa/x64/lower.isle line 79.
11280|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11281|      0|                                let expr1_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11282|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11283|      0|                                return Some(expr2_0);
11284|  4.89k|                            }
11285|  4.89k|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_0) {
11286|       |                                // Rule at src/isa/x64/lower.isle line 91.
11287|     14|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11288|     14|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11289|     14|                                let expr2_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &expr1_0)?;
11290|     14|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11291|     14|                                return Some(expr3_0);
11292|  4.87k|                            }
11293|  4.87k|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_1) {
11294|       |                                // Rule at src/isa/x64/lower.isle line 75.
11295|  4.86k|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11296|  4.86k|                                let expr1_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11297|  4.86k|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11298|  4.86k|                                return Some(expr2_0);
11299|     14|                            }
11300|     14|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_1) {
11301|       |                                // Rule at src/isa/x64/lower.isle line 85.
11302|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11303|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11304|      0|                                let expr2_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &expr1_0)?;
11305|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11306|      0|                                return Some(expr3_0);
11307|     14|                            }
11308|       |                            // Rule at src/isa/x64/lower.isle line 69.
11309|     14|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11310|     14|                            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern7_1)?;
11311|     14|                            let expr2_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &expr1_0)?;
11312|     14|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11313|     14|                            return Some(expr3_0);
11314|       |                        }
11315|       |                        &Opcode::Isub  => {
11316|  4.56k|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11317|  4.56k|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_1) {
11318|       |                                // Rule at src/isa/x64/lower.isle line 202.
11319|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11320|      0|                                let expr1_0 = constructor_x64_sub(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11321|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11322|      0|                                return Some(expr2_0);
11323|  4.56k|                            }
11324|  4.56k|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_1) {
11325|       |                                // Rule at src/isa/x64/lower.isle line 207.
11326|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11327|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11328|      0|                                let expr2_0 = constructor_x64_sub(ctx, pattern3_0, expr0_0, &expr1_0)?;
11329|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11330|      0|                                return Some(expr3_0);
11331|  4.56k|                            }
11332|       |                            // Rule at src/isa/x64/lower.isle line 197.
11333|  4.56k|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11334|  4.56k|                            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern7_1)?;
11335|  4.56k|                            let expr2_0 = constructor_x64_sub(ctx, pattern3_0, expr0_0, &expr1_0)?;
11336|  4.56k|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11337|  4.56k|                            return Some(expr3_0);
11338|       |                        }
11339|       |                        &Opcode::Imul  => {
11340|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11341|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_0) {
11342|       |                                // Rule at src/isa/x64/lower.isle line 875.
11343|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11344|      0|                                let expr1_0 = constructor_x64_mul(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11345|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11346|      0|                                return Some(expr2_0);
11347|      0|                            }
11348|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_0) {
11349|       |                                // Rule at src/isa/x64/lower.isle line 887.
11350|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11351|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11352|      0|                                let expr2_0 = constructor_x64_mul(ctx, pattern3_0, expr0_0, &expr1_0)?;
11353|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11354|      0|                                return Some(expr3_0);
11355|      0|                            }
11356|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_1) {
11357|       |                                // Rule at src/isa/x64/lower.isle line 871.
11358|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11359|      0|                                let expr1_0 = constructor_x64_mul(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11360|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11361|      0|                                return Some(expr2_0);
11362|      0|                            }
11363|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_1) {
11364|       |                                // Rule at src/isa/x64/lower.isle line 881.
11365|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11366|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11367|      0|                                let expr2_0 = constructor_x64_mul(ctx, pattern3_0, expr0_0, &expr1_0)?;
11368|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11369|      0|                                return Some(expr3_0);
11370|      0|                            }
11371|       |                            // Rule at src/isa/x64/lower.isle line 866.
11372|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11373|      0|                            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern7_1)?;
11374|      0|                            let expr2_0 = constructor_x64_mul(ctx, pattern3_0, expr0_0, &expr1_0)?;
11375|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11376|      0|                            return Some(expr3_0);
11377|       |                        }
11378|       |                        &Opcode::IaddIfcout  => {
11379|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11380|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_0) {
11381|       |                                // Rule at src/isa/x64/lower.isle line 176.
11382|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11383|      0|                                let expr1_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11384|      0|                                let expr2_0 = C::gpr_to_reg(ctx, expr1_0);
11385|      0|                                let expr3_0 = constructor_output_ifcout(ctx, expr2_0)?;
11386|      0|                                return Some(expr3_0);
11387|      0|                            }
11388|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_0) {
11389|       |                                // Rule at src/isa/x64/lower.isle line 186.
11390|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11391|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11392|      0|                                let expr2_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &expr1_0)?;
11393|      0|                                let expr3_0 = C::gpr_to_reg(ctx, expr2_0);
11394|      0|                                let expr4_0 = constructor_output_ifcout(ctx, expr3_0)?;
11395|      0|                                return Some(expr4_0);
11396|      0|                            }
11397|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_1) {
11398|       |                                // Rule at src/isa/x64/lower.isle line 172.
11399|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11400|      0|                                let expr1_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11401|      0|                                let expr2_0 = C::gpr_to_reg(ctx, expr1_0);
11402|      0|                                let expr3_0 = constructor_output_ifcout(ctx, expr2_0)?;
11403|      0|                                return Some(expr3_0);
11404|      0|                            }
11405|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_1) {
11406|       |                                // Rule at src/isa/x64/lower.isle line 182.
11407|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11408|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11409|      0|                                let expr2_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &expr1_0)?;
11410|      0|                                let expr3_0 = C::gpr_to_reg(ctx, expr2_0);
11411|      0|                                let expr4_0 = constructor_output_ifcout(ctx, expr3_0)?;
11412|      0|                                return Some(expr4_0);
11413|      0|                            }
11414|       |                            // Rule at src/isa/x64/lower.isle line 166.
11415|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11416|      0|                            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern7_1)?;
11417|      0|                            let expr2_0 = constructor_x64_add(ctx, pattern3_0, expr0_0, &expr1_0)?;
11418|      0|                            let expr3_0 = C::gpr_to_reg(ctx, expr2_0);
11419|      0|                            let expr4_0 = constructor_output_ifcout(ctx, expr3_0)?;
11420|      0|                            return Some(expr4_0);
11421|       |                        }
11422|       |                        &Opcode::Band  => {
11423|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11424|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_0) {
11425|       |                                // Rule at src/isa/x64/lower.isle line 291.
11426|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11427|      0|                                let expr1_0 = constructor_x64_and(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11428|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11429|      0|                                return Some(expr2_0);
11430|      0|                            }
11431|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_0) {
11432|       |                                // Rule at src/isa/x64/lower.isle line 279.
11433|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11434|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11435|      0|                                let expr2_0 = constructor_x64_and(ctx, pattern3_0, expr0_0, &expr1_0)?;
11436|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11437|      0|                                return Some(expr3_0);
11438|      0|                            }
11439|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_1) {
11440|       |                                // Rule at src/isa/x64/lower.isle line 287.
11441|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11442|      0|                                let expr1_0 = constructor_x64_and(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11443|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11444|      0|                                return Some(expr2_0);
11445|      0|                            }
11446|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_1) {
11447|       |                                // Rule at src/isa/x64/lower.isle line 274.
11448|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11449|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11450|      0|                                let expr2_0 = constructor_x64_and(ctx, pattern3_0, expr0_0, &expr1_0)?;
11451|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11452|      0|                                return Some(expr3_0);
11453|      0|                            }
11454|       |                            // Rule at src/isa/x64/lower.isle line 269.
11455|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11456|      0|                            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern7_1)?;
11457|      0|                            let expr2_0 = constructor_x64_and(ctx, pattern3_0, expr0_0, &expr1_0)?;
11458|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11459|      0|                            return Some(expr3_0);
11460|       |                        }
11461|       |                        &Opcode::Bor  => {
11462|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11463|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_0) {
11464|       |                                // Rule at src/isa/x64/lower.isle line 355.
11465|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11466|      0|                                let expr1_0 = constructor_x64_or(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11467|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11468|      0|                                return Some(expr2_0);
11469|      0|                            }
11470|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_0) {
11471|       |                                // Rule at src/isa/x64/lower.isle line 344.
11472|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11473|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11474|      0|                                let expr2_0 = constructor_x64_or(ctx, pattern3_0, expr0_0, &expr1_0)?;
11475|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11476|      0|                                return Some(expr3_0);
11477|      0|                            }
11478|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_1) {
11479|       |                                // Rule at src/isa/x64/lower.isle line 351.
11480|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11481|      0|                                let expr1_0 = constructor_x64_or(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11482|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11483|      0|                                return Some(expr2_0);
11484|      0|                            }
11485|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_1) {
11486|       |                                // Rule at src/isa/x64/lower.isle line 339.
11487|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11488|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11489|      0|                                let expr2_0 = constructor_x64_or(ctx, pattern3_0, expr0_0, &expr1_0)?;
11490|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11491|      0|                                return Some(expr3_0);
11492|      0|                            }
11493|       |                            // Rule at src/isa/x64/lower.isle line 334.
11494|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11495|      0|                            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern7_1)?;
11496|      0|                            let expr2_0 = constructor_x64_or(ctx, pattern3_0, expr0_0, &expr1_0)?;
11497|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11498|      0|                            return Some(expr3_0);
11499|       |                        }
11500|       |                        &Opcode::Bxor  => {
11501|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11502|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_0) {
11503|       |                                // Rule at src/isa/x64/lower.isle line 421.
11504|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11505|      0|                                let expr1_0 = constructor_x64_xor(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11506|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11507|      0|                                return Some(expr2_0);
11508|      0|                            }
11509|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_0) {
11510|       |                                // Rule at src/isa/x64/lower.isle line 410.
11511|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_1)?;
11512|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11513|      0|                                let expr2_0 = constructor_x64_xor(ctx, pattern3_0, expr0_0, &expr1_0)?;
11514|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11515|      0|                                return Some(expr3_0);
11516|      0|                            }
11517|      0|                            if let Some(pattern8_0) = C::simm32_from_value(ctx, pattern7_1) {
11518|       |                                // Rule at src/isa/x64/lower.isle line 417.
11519|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11520|      0|                                let expr1_0 = constructor_x64_xor(ctx, pattern3_0, expr0_0, &pattern8_0)?;
11521|      0|                                let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11522|      0|                                return Some(expr2_0);
11523|      0|                            }
11524|      0|                            if let Some(pattern8_0) = C::sinkable_load(ctx, pattern7_1) {
11525|       |                                // Rule at src/isa/x64/lower.isle line 405.
11526|      0|                                let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11527|      0|                                let expr1_0 = constructor_sink_load_to_gpr_mem_imm(ctx, &pattern8_0)?;
11528|      0|                                let expr2_0 = constructor_x64_xor(ctx, pattern3_0, expr0_0, &expr1_0)?;
11529|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11530|      0|                                return Some(expr3_0);
11531|      0|                            }
11532|       |                            // Rule at src/isa/x64/lower.isle line 400.
11533|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11534|      0|                            let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern7_1)?;
11535|      0|                            let expr2_0 = constructor_x64_xor(ctx, pattern3_0, expr0_0, &expr1_0)?;
11536|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11537|      0|                            return Some(expr3_0);
11538|       |                        }
11539|       |                        &Opcode::Rotl  => {
11540|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11541|       |                            // Rule at src/isa/x64/lower.isle line 793.
11542|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11543|      0|                            let expr1_0 = constructor_put_masked_in_imm8_gpr(ctx, pattern7_1, pattern3_0)?;
11544|      0|                            let expr2_0 = constructor_x64_rotl(ctx, pattern3_0, expr0_0, &expr1_0)?;
11545|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11546|      0|                            return Some(expr3_0);
11547|       |                        }
11548|       |                        &Opcode::Rotr  => {
11549|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11550|       |                            // Rule at src/isa/x64/lower.isle line 814.
11551|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11552|      0|                            let expr1_0 = constructor_put_masked_in_imm8_gpr(ctx, pattern7_1, pattern3_0)?;
11553|      0|                            let expr2_0 = constructor_x64_rotr(ctx, pattern3_0, expr0_0, &expr1_0)?;
11554|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11555|      0|                            return Some(expr3_0);
11556|       |                        }
11557|       |                        &Opcode::Ishl  => {
11558|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11559|       |                            // Rule at src/isa/x64/lower.isle line 457.
11560|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern7_0)?;
11561|      0|                            let expr1_0 = constructor_put_masked_in_imm8_gpr(ctx, pattern7_1, pattern3_0)?;
11562|      0|                            let expr2_0 = constructor_x64_shl(ctx, pattern3_0, expr0_0, &expr1_0)?;
11563|      0|                            let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
11564|      0|                            return Some(expr3_0);
11565|       |                        }
11566|       |                        &Opcode::Ushr  => {
11567|     76|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11568|     76|                            // Rule at src/isa/x64/lower.isle line 568.
11569|     76|                            let expr0_0 = ExtendKind::Zero;
11570|     76|                            let expr1_0 = constructor_extend_to_gpr(ctx, pattern7_0, pattern3_0, &expr0_0)?;
11571|     76|                            let expr2_0 = constructor_put_masked_in_imm8_gpr(ctx, pattern7_1, pattern3_0)?;
11572|     76|                            let expr3_0 = constructor_x64_shr(ctx, pattern3_0, expr1_0, &expr2_0)?;
11573|     76|                            let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11574|     76|                            return Some(expr4_0);
11575|       |                        }
11576|       |                        &Opcode::Sshr  => {
11577|      0|                            let (pattern7_0, pattern7_1) = C::unpack_value_array_2(ctx, pattern5_1);
11578|      0|                            // Rule at src/isa/x64/lower.isle line 675.
11579|      0|                            let expr0_0 = ExtendKind::Sign;
11580|      0|                            let expr1_0 = constructor_extend_to_gpr(ctx, pattern7_0, pattern3_0, &expr0_0)?;
11581|      0|                            let expr2_0 = constructor_put_masked_in_imm8_gpr(ctx, pattern7_1, pattern3_0)?;
11582|      0|                            let expr3_0 = constructor_x64_sar(ctx, pattern3_0, expr1_0, &expr2_0)?;
11583|      0|                            let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11584|      0|                            return Some(expr4_0);
11585|       |                        }
11586|      0|                        _ => {}
11587|       |                    }
11588|       |                }
11589|  19.6k|                _ => {}
11590|       |            }
11591|      0|        }
11592|  19.8k|        if let Some(pattern3_0) = C::ty_32_or_64(ctx, pattern2_0) {
11593|  19.7k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11594|  19.7k|            if let &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } = &pattern4_0 {
11595|    254|                match pattern5_0 {
11596|       |                    &Opcode::Clz  => {
11597|       |                        // Rule at src/isa/x64/lower.isle line 1740.
11598|      0|                        let expr0_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
11599|      0|                        let expr1_0 = constructor_do_clz(ctx, pattern3_0, pattern3_0, expr0_0)?;
11600|      0|                        let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11601|      0|                        return Some(expr2_0);
11602|       |                    }
11603|       |                    &Opcode::Ctz  => {
11604|       |                        // Rule at src/isa/x64/lower.isle line 1782.
11605|      0|                        let expr0_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
11606|      0|                        let expr1_0 = constructor_do_ctz(ctx, pattern3_0, pattern3_0, expr0_0)?;
11607|      0|                        let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11608|      0|                        return Some(expr2_0);
11609|       |                    }
11610|       |                    &Opcode::Popcnt  => {
11611|       |                        // Rule at src/isa/x64/lower.isle line 1834.
11612|      0|                        let expr0_0 = constructor_put_in_gpr(ctx, pattern5_1)?;
11613|      0|                        let expr1_0 = constructor_do_popcnt(ctx, pattern3_0, expr0_0)?;
11614|      0|                        let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11615|      0|                        return Some(expr2_0);
11616|       |                    }
11617|    254|                    _ => {}
11618|       |                }
11619|  19.4k|            }
11620|    156|        }
11621|  19.8k|        if let Some(pattern3_0) = C::ty_8_or_16(ctx, pattern2_0) {
11622|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11623|      0|            if let &InstructionData::Unary { opcode: ref pattern5_0, arg: pattern5_1 } = &pattern4_0 {
11624|      0|                match pattern5_0 {
11625|       |                    &Opcode::Clz  => {
11626|       |                        // Rule at src/isa/x64/lower.isle line 1745.
11627|      0|                        let expr0_0: Type = I32;
11628|      0|                        let expr1_0: Type = I32;
11629|      0|                        let expr2_0 = ExtendKind::Zero;
11630|      0|                        let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
11631|      0|                        let expr4_0 = constructor_do_clz(ctx, expr0_0, pattern3_0, expr3_0)?;
11632|      0|                        let expr5_0 = constructor_output_gpr(ctx, expr4_0)?;
11633|      0|                        return Some(expr5_0);
11634|       |                    }
11635|       |                    &Opcode::Ctz  => {
11636|       |                        // Rule at src/isa/x64/lower.isle line 1787.
11637|      0|                        let expr0_0: Type = I32;
11638|      0|                        let expr1_0: Type = I32;
11639|      0|                        let expr2_0 = ExtendKind::Zero;
11640|      0|                        let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
11641|      0|                        let expr4_0 = constructor_do_ctz(ctx, expr0_0, pattern3_0, expr3_0)?;
11642|      0|                        let expr5_0 = constructor_output_gpr(ctx, expr4_0)?;
11643|      0|                        return Some(expr5_0);
11644|       |                    }
11645|       |                    &Opcode::Popcnt  => {
11646|       |                        // Rule at src/isa/x64/lower.isle line 1839.
11647|      0|                        let expr0_0: Type = I32;
11648|      0|                        let expr1_0: Type = I32;
11649|      0|                        let expr2_0 = ExtendKind::Zero;
11650|      0|                        let expr3_0 = constructor_extend_to_gpr(ctx, pattern5_1, expr1_0, &expr2_0)?;
11651|      0|                        let expr4_0 = constructor_do_popcnt(ctx, expr0_0, expr3_0)?;
11652|      0|                        let expr5_0 = constructor_output_gpr(ctx, expr4_0)?;
11653|      0|                        return Some(expr5_0);
11654|       |                    }
11655|      0|                    _ => {}
11656|       |                }
11657|      0|            }
11658|  19.8k|        }
11659|  19.8k|        if let Some(pattern3_0) = C::ty_int_bool_ref_64(ctx, pattern2_0) {
11660|  10.1k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11661|  10.1k|            if let &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } = &pattern4_0 {
11662|  9.60k|                if let &Opcode::Load  = pattern5_0 {
11663|       |                    // Rule at src/isa/x64/lower.isle line 2504.
11664|  9.50k|                    let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11665|  9.50k|                    let expr1_0 = constructor_x64_mov(ctx, &expr0_0)?;
11666|  9.50k|                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
11667|  9.50k|                    return Some(expr2_0);
11668|    100|                }
11669|    530|            }
11670|  9.73k|        }
11671|  10.3k|        if let Some(pattern3_0) = C::ty_int_bool_128(ctx, pattern2_0) {
11672|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11673|      0|            if let &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } = &pattern4_0 {
11674|      0|                if let &Opcode::Load  = pattern5_0 {
11675|       |                    // Rule at src/isa/x64/lower.isle line 2538.
11676|      0|                    let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11677|      0|                    let expr1_0: u32 = 8i128 as u32;
11678|      0|                    let expr2_0 = C::amode_offset(ctx, &expr0_0, expr1_0);
11679|      0|                    let expr3_0 = constructor_x64_mov(ctx, &expr0_0)?;
11680|      0|                    let expr4_0 = constructor_x64_mov(ctx, &expr2_0)?;
11681|      0|                    let expr5_0 = C::value_regs(ctx, expr3_0, expr4_0);
11682|      0|                    let expr6_0 = C::output(ctx, expr5_0);
11683|      0|                    return Some(expr6_0);
11684|      0|                }
11685|      0|            }
11686|  10.3k|        }
11687|  10.3k|        if let Some(pattern3_0) = C::ty_scalar_float(ctx, pattern2_0) {
11688|     60|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11689|     60|            if let &InstructionData::BinaryImm8 { opcode: ref pattern5_0, arg: pattern5_1, imm: pattern5_2 } = &pattern4_0 {
11690|      0|                if let &Opcode::Extractlane  = pattern5_0 {
11691|      0|                    let pattern7_0 = C::u8_from_uimm8(ctx, pattern5_2);
11692|      0|                    if pattern7_0 == 0i128 as u8  {
11693|       |                        // Rule at src/isa/x64/lower.isle line 3549.
11694|      0|                        let expr0_0 = constructor_output_value(ctx, pattern5_1)?;
11695|      0|                        return Some(expr0_0);
11696|      0|                    }
11697|      0|                }
11698|     60|            }
11699|  10.3k|        }
11700|  10.3k|        if let Some(pattern3_0) = C::ty_vec128(ctx, pattern2_0) {
11701|      0|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11702|      0|            if let &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } = &pattern4_0 {
11703|      0|                if let &Opcode::Load  = pattern5_0 {
11704|       |                    // Rule at src/isa/x64/lower.isle line 2534.
11705|      0|                    let expr0_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11706|      0|                    let expr1_0 = constructor_amode_to_xmm_mem(ctx, &expr0_0)?;
11707|      0|                    let expr2_0 = constructor_x64_movdqu(ctx, &expr1_0)?;
11708|      0|                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
11709|      0|                    return Some(expr3_0);
11710|      0|                }
11711|      0|            }
11712|  10.3k|        }
11713|  10.3k|        if let Some(pattern3_0) = C::is_gpr_type(ctx, pattern2_0) {
11714|  10.3k|            let pattern4_0 = C::inst_data(ctx, pattern0_0);
11715|  10.3k|            if let &InstructionData::Load { opcode: ref pattern5_0, arg: pattern5_1, flags: pattern5_2, offset: pattern5_3 } = &pattern4_0 {
11716|    198|                match pattern5_0 {
11717|       |                    &Opcode::Uload8  => {
11718|       |                        // Rule at src/isa/x64/lower.isle line 2509.
11719|     40|                        let expr0_0 = ExtMode::BQ;
11720|     40|                        let expr1_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11721|     40|                        let expr2_0 = constructor_amode_to_gpr_mem(ctx, &expr1_0)?;
11722|     40|                        let expr3_0 = constructor_x64_movzx(ctx, &expr0_0, &expr2_0)?;
11723|     40|                        let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11724|     40|                        return Some(expr4_0);
11725|       |                    }
11726|       |                    &Opcode::Sload8  => {
11727|       |                        // Rule at src/isa/x64/lower.isle line 2511.
11728|     20|                        let expr0_0 = ExtMode::BQ;
11729|     20|                        let expr1_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11730|     20|                        let expr2_0 = constructor_amode_to_gpr_mem(ctx, &expr1_0)?;
11731|     20|                        let expr3_0 = constructor_x64_movsx(ctx, &expr0_0, &expr2_0)?;
11732|     20|                        let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11733|     20|                        return Some(expr4_0);
11734|       |                    }
11735|       |                    &Opcode::Uload16  => {
11736|       |                        // Rule at src/isa/x64/lower.isle line 2513.
11737|     34|                        let expr0_0 = ExtMode::WQ;
11738|     34|                        let expr1_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11739|     34|                        let expr2_0 = constructor_amode_to_gpr_mem(ctx, &expr1_0)?;
11740|     34|                        let expr3_0 = constructor_x64_movzx(ctx, &expr0_0, &expr2_0)?;
11741|     34|                        let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11742|     34|                        return Some(expr4_0);
11743|       |                    }
11744|       |                    &Opcode::Sload16  => {
11745|       |                        // Rule at src/isa/x64/lower.isle line 2515.
11746|     94|                        let expr0_0 = ExtMode::WQ;
11747|     94|                        let expr1_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11748|     94|                        let expr2_0 = constructor_amode_to_gpr_mem(ctx, &expr1_0)?;
11749|     94|                        let expr3_0 = constructor_x64_movsx(ctx, &expr0_0, &expr2_0)?;
11750|     94|                        let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11751|     94|                        return Some(expr4_0);
11752|       |                    }
11753|       |                    &Opcode::Uload32  => {
11754|       |                        // Rule at src/isa/x64/lower.isle line 2517.
11755|      8|                        let expr0_0 = ExtMode::LQ;
11756|      8|                        let expr1_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11757|      8|                        let expr2_0 = constructor_amode_to_gpr_mem(ctx, &expr1_0)?;
11758|      8|                        let expr3_0 = constructor_x64_movzx(ctx, &expr0_0, &expr2_0)?;
11759|      8|                        let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11760|      8|                        return Some(expr4_0);
11761|       |                    }
11762|       |                    &Opcode::Sload32  => {
11763|       |                        // Rule at src/isa/x64/lower.isle line 2519.
11764|      2|                        let expr0_0 = ExtMode::LQ;
11765|      2|                        let expr1_0 = constructor_to_amode(ctx, pattern5_2, pattern5_1, pattern5_3)?;
11766|      2|                        let expr2_0 = constructor_amode_to_gpr_mem(ctx, &expr1_0)?;
11767|      2|                        let expr3_0 = constructor_x64_movsx(ctx, &expr0_0, &expr2_0)?;
11768|      2|                        let expr4_0 = constructor_output_gpr(ctx, expr3_0)?;
11769|      2|                        return Some(expr4_0);
11770|       |                    }
11771|      0|                    _ => {}
11772|       |                }
11773|  10.1k|            }
11774|     60|        }
11775|  10.1k|        let pattern3_0 = C::inst_data(ctx, pattern0_0);
11776|  10.1k|        match &pattern3_0 {
11777|      0|            &InstructionData::NullAry { opcode: ref pattern4_0 } => {
11778|      0|                if let &Opcode::Null  = pattern4_0 {
11779|       |                    // Rule at src/isa/x64/lower.isle line 61.
11780|      0|                    let expr0_0: u64 = 0i128 as u64;
11781|      0|                    let expr1_0 = constructor_imm(ctx, pattern2_0, expr0_0)?;
11782|      0|                    let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
11783|      0|                    return Some(expr2_0);
11784|      0|                }
11785|       |            }
11786|    254|            &InstructionData::Unary { opcode: ref pattern4_0, arg: pattern4_1 } => {
11787|    254|                match pattern4_0 {
11788|       |                    &Opcode::Breduce  => {
11789|      0|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11790|      0|                        if pattern6_0 == pattern2_0 {
11791|       |                            // Rule at src/isa/x64/lower.isle line 2181.
11792|      0|                            let expr0_0 = constructor_output_value(ctx, pattern4_1)?;
11793|      0|                            return Some(expr0_0);
11794|      0|                        }
11795|       |                    }
11796|       |                    &Opcode::Bextend  => {
11797|      0|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11798|       |                        // Rule at src/isa/x64/lower.isle line 2162.
11799|      0|                        let expr0_0 = constructor_generic_sextend(ctx, pattern4_1, pattern6_0, pattern2_0)?;
11800|      0|                        return Some(expr0_0);
11801|       |                    }
11802|       |                    &Opcode::Ireduce  => {
11803|      0|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11804|      0|                        if pattern6_0 == pattern2_0 {
11805|       |                            // Rule at src/isa/x64/lower.isle line 2170.
11806|      0|                            let expr0_0 = constructor_output_value(ctx, pattern4_1)?;
11807|      0|                            return Some(expr0_0);
11808|      0|                        }
11809|       |                    }
11810|       |                    &Opcode::Uextend  => {
11811|      0|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11812|      0|                        if pattern6_0 == pattern2_0 {
11813|       |                            // Rule at src/isa/x64/lower.isle line 2063.
11814|      0|                            let expr0_0 = constructor_output_value(ctx, pattern4_1)?;
11815|      0|                            return Some(expr0_0);
11816|      0|                        }
11817|       |                    }
11818|       |                    &Opcode::Sextend  => {
11819|      8|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11820|       |                        // Rule at src/isa/x64/lower.isle line 2156.
11821|      8|                        let expr0_0 = constructor_generic_sextend(ctx, pattern4_1, pattern6_0, pattern2_0)?;
11822|      8|                        return Some(expr0_0);
11823|       |                    }
11824|       |                    &Opcode::FcvtToUint  => {
11825|     30|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11826|     30|                        if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
11827|       |                            // Rule at src/isa/x64/lower.isle line 3047.
11828|     30|                            let expr0_0: bool = false;
11829|     30|                            let expr1_0 = constructor_cvt_float_to_uint_seq(ctx, pattern2_0, pattern4_1, expr0_0)?;
11830|     30|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11831|     30|                            return Some(expr2_0);
11832|      0|                        }
11833|       |                    }
11834|       |                    &Opcode::FcvtToSint  => {
11835|    216|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11836|    216|                        if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
11837|       |                            // Rule at src/isa/x64/lower.isle line 3053.
11838|    216|                            let expr0_0: bool = false;
11839|    216|                            let expr1_0 = constructor_cvt_float_to_sint_seq(ctx, pattern2_0, pattern4_1, expr0_0)?;
11840|    216|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11841|    216|                            return Some(expr2_0);
11842|      0|                        }
11843|       |                    }
11844|       |                    &Opcode::FcvtToUintSat  => {
11845|      0|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11846|      0|                        if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
11847|       |                            // Rule at src/isa/x64/lower.isle line 3050.
11848|      0|                            let expr0_0: bool = true;
11849|      0|                            let expr1_0 = constructor_cvt_float_to_uint_seq(ctx, pattern2_0, pattern4_1, expr0_0)?;
11850|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11851|      0|                            return Some(expr2_0);
11852|      0|                        }
11853|       |                    }
11854|       |                    &Opcode::FcvtToSintSat  => {
11855|      0|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11856|      0|                        if let Some(pattern7_0) = C::ty_scalar_float(ctx, pattern6_0) {
11857|       |                            // Rule at src/isa/x64/lower.isle line 3056.
11858|      0|                            let expr0_0: bool = true;
11859|      0|                            let expr1_0 = constructor_cvt_float_to_sint_seq(ctx, pattern2_0, pattern4_1, expr0_0)?;
11860|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
11861|      0|                            return Some(expr2_0);
11862|      0|                        }
11863|       |                    }
11864|       |                    &Opcode::FcvtFromUint  => {
11865|      0|                        let pattern6_0 = C::value_type(ctx, pattern4_1);
11866|      0|                        if pattern6_0 == I64 {
11867|       |                            // Rule at src/isa/x64/lower.isle line 2978.
11868|      0|                            let expr0_0 = constructor_put_in_gpr(ctx, pattern4_1)?;
11869|      0|                            let expr1_0 = constructor_cvt_u64_to_float_seq(ctx, pattern2_0, expr0_0)?;
11870|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
11871|      0|                            return Some(expr2_0);
11872|      0|                        }
11873|       |                    }
11874|      0|                    _ => {}
11875|       |                }
11876|       |            }
11877|      0|            &InstructionData::UnaryConst { opcode: ref pattern4_0, constant_handle: pattern4_1 } => {
11878|      0|                if let &Opcode::Vconst  = pattern4_0 {
11879|       |                    // Rule at src/isa/x64/lower.isle line 3484.
11880|      0|                    let expr0_0 = C::const_to_vconst(ctx, pattern4_1);
11881|      0|                    let expr1_0 = constructor_x64_xmm_load_const(ctx, pattern2_0, expr0_0)?;
11882|      0|                    let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
11883|      0|                    return Some(expr2_0);
11884|      0|                }
11885|       |            }
11886|      0|            &InstructionData::Binary { opcode: ref pattern4_0, args: ref pattern4_1 } => {
11887|      0|                if let &Opcode::BandNot  = pattern4_0 {
11888|      0|                    let (pattern6_0, pattern6_1) = C::unpack_value_array_2(ctx, pattern4_1);
11889|       |                    // Rule at src/isa/x64/lower.isle line 1155.
11890|      0|                    let expr0_0 = constructor_put_in_xmm(ctx, pattern6_1)?;
11891|      0|                    let expr1_0 = C::put_in_xmm_mem(ctx, pattern6_0);
11892|      0|                    let expr2_0 = constructor_sse_and_not(ctx, pattern2_0, expr0_0, &expr1_0)?;
11893|      0|                    let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
11894|      0|                    return Some(expr3_0);
11895|      0|                }
11896|       |            }
11897|     52|            &InstructionData::Ternary { opcode: ref pattern4_0, args: ref pattern4_1 } => {
11898|     52|                if let &Opcode::Select  = pattern4_0 {
11899|     52|                    let (pattern6_0, pattern6_1, pattern6_2) = C::unpack_value_array_3(ctx, pattern4_1);
11900|     52|                    if let Some(pattern7_0) = C::def_inst(ctx, pattern6_0) {
11901|     52|                        let pattern8_0 = C::inst_data(ctx, pattern7_0);
11902|     52|                        match &pattern8_0 {
11903|     52|                            &InstructionData::FloatCompare { opcode: ref pattern9_0, args: ref pattern9_1, cond: ref pattern9_2 } => {
11904|     52|                                if let &Opcode::Fcmp  = pattern9_0 {
11905|     52|                                    let (pattern11_0, pattern11_1) = C::unpack_value_array_2(ctx, pattern9_1);
11906|     52|                                    match pattern9_2 {
11907|       |                                        &FloatCC::Equal  => {
11908|       |                                            // Rule at src/isa/x64/lower.isle line 1695.
11909|     26|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_0, pattern11_1)?;
11910|     26|                                            let expr1_0 = CC::NZ;
11911|     26|                                            let expr2_0 = CC::P;
11912|     26|                                            let expr3_0 = constructor_cmove_or_from_values(ctx, pattern2_0, &expr1_0, &expr2_0, pattern6_2, pattern6_1)?;
11913|     26|                                            let expr4_0 = constructor_with_flags(ctx, &expr0_0, &expr3_0)?;
11914|     26|                                            let expr5_0 = C::output(ctx, expr4_0);
11915|     26|                                            return Some(expr5_0);
11916|       |                                        }
11917|       |                                        &FloatCC::GreaterThan  => {
11918|       |                                            // Rule at src/isa/x64/lower.isle line 1647.
11919|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_1, pattern11_0)?;
11920|      0|                                            let expr1_0 = CC::NBE;
11921|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11922|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11923|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11924|      0|                                            return Some(expr4_0);
11925|       |                                        }
11926|       |                                        &FloatCC::GreaterThanOrEqual  => {
11927|       |                                            // Rule at src/isa/x64/lower.isle line 1650.
11928|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_1, pattern11_0)?;
11929|      0|                                            let expr1_0 = CC::NB;
11930|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11931|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11932|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11933|      0|                                            return Some(expr4_0);
11934|       |                                        }
11935|       |                                        &FloatCC::LessThan  => {
11936|       |                                            // Rule at src/isa/x64/lower.isle line 1670.
11937|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_0, pattern11_1)?;
11938|      0|                                            let expr1_0 = CC::NBE;
11939|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11940|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11941|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11942|      0|                                            return Some(expr4_0);
11943|       |                                        }
11944|       |                                        &FloatCC::LessThanOrEqual  => {
11945|       |                                            // Rule at src/isa/x64/lower.isle line 1673.
11946|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_0, pattern11_1)?;
11947|      0|                                            let expr1_0 = CC::NB;
11948|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11949|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11950|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11951|      0|                                            return Some(expr4_0);
11952|       |                                        }
11953|       |                                        &FloatCC::NotEqual  => {
11954|       |                                            // Rule at src/isa/x64/lower.isle line 1698.
11955|     26|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_0, pattern11_1)?;
11956|     26|                                            let expr1_0 = CC::NZ;
11957|     26|                                            let expr2_0 = CC::P;
11958|     26|                                            let expr3_0 = constructor_cmove_or_from_values(ctx, pattern2_0, &expr1_0, &expr2_0, pattern6_1, pattern6_2)?;
11959|     26|                                            let expr4_0 = constructor_with_flags(ctx, &expr0_0, &expr3_0)?;
11960|     26|                                            let expr5_0 = C::output(ctx, expr4_0);
11961|     26|                                            return Some(expr5_0);
11962|       |                                        }
11963|       |                                        &FloatCC::Ordered  => {
11964|       |                                            // Rule at src/isa/x64/lower.isle line 1641.
11965|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_1, pattern11_0)?;
11966|      0|                                            let expr1_0 = CC::NP;
11967|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11968|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11969|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11970|      0|                                            return Some(expr4_0);
11971|       |                                        }
11972|       |                                        &FloatCC::Unordered  => {
11973|       |                                            // Rule at src/isa/x64/lower.isle line 1644.
11974|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_1, pattern11_0)?;
11975|      0|                                            let expr1_0 = CC::P;
11976|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11977|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11978|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11979|      0|                                            return Some(expr4_0);
11980|       |                                        }
11981|       |                                        &FloatCC::UnorderedOrGreaterThan  => {
11982|       |                                            // Rule at src/isa/x64/lower.isle line 1676.
11983|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_0, pattern11_1)?;
11984|      0|                                            let expr1_0 = CC::B;
11985|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11986|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11987|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11988|      0|                                            return Some(expr4_0);
11989|       |                                        }
11990|       |                                        &FloatCC::UnorderedOrGreaterThanOrEqual  => {
11991|       |                                            // Rule at src/isa/x64/lower.isle line 1679.
11992|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_0, pattern11_1)?;
11993|      0|                                            let expr1_0 = CC::BE;
11994|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
11995|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
11996|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
11997|      0|                                            return Some(expr4_0);
11998|       |                                        }
11999|       |                                        &FloatCC::UnorderedOrLessThan  => {
12000|       |                                            // Rule at src/isa/x64/lower.isle line 1653.
12001|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_1, pattern11_0)?;
12002|      0|                                            let expr1_0 = CC::B;
12003|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
12004|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
12005|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
12006|      0|                                            return Some(expr4_0);
12007|       |                                        }
12008|       |                                        &FloatCC::UnorderedOrLessThanOrEqual  => {
12009|       |                                            // Rule at src/isa/x64/lower.isle line 1656.
12010|      0|                                            let expr0_0 = constructor_x64_ucomis(ctx, pattern11_1, pattern11_0)?;
12011|      0|                                            let expr1_0 = CC::BE;
12012|      0|                                            let expr2_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr1_0, pattern6_1, pattern6_2)?;
12013|      0|                                            let expr3_0 = constructor_with_flags(ctx, &expr0_0, &expr2_0)?;
12014|      0|                                            let expr4_0 = C::output(ctx, expr3_0);
12015|      0|                                            return Some(expr4_0);
12016|       |                                        }
12017|      0|                                        _ => {}
12018|       |                                    }
12019|      0|                                }
12020|       |                            }
12021|      0|                            &InstructionData::IntCompare { opcode: ref pattern9_0, args: ref pattern9_1, cond: ref pattern9_2 } => {
12022|      0|                                if let &Opcode::Icmp  = pattern9_0 {
12023|      0|                                    let (pattern11_0, pattern11_1) = C::unpack_value_array_2(ctx, pattern9_1);
12024|      0|                                    let pattern12_0 = C::value_type(ctx, pattern11_0);
12025|      0|                                    if let Some(pattern13_0) = C::fits_in_64(ctx, pattern12_0) {
12026|       |                                        // Rule at src/isa/x64/lower.isle line 1706.
12027|      0|                                        let expr0_0 = C::raw_operand_size_of_type(ctx, pattern13_0);
12028|      0|                                        let expr1_0 = constructor_put_in_gpr_mem_imm(ctx, pattern11_1)?;
12029|      0|                                        let expr2_0 = constructor_put_in_gpr(ctx, pattern11_0)?;
12030|      0|                                        let expr3_0 = constructor_x64_cmp(ctx, &expr0_0, &expr1_0, expr2_0)?;
12031|      0|                                        let expr4_0 = C::intcc_to_cc(ctx, pattern9_2);
12032|      0|                                        let expr5_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr4_0, pattern6_1, pattern6_2)?;
12033|      0|                                        let expr6_0 = constructor_with_flags(ctx, &expr3_0, &expr5_0)?;
12034|      0|                                        let expr7_0 = C::output(ctx, expr6_0);
12035|      0|                                        return Some(expr7_0);
12036|      0|                                    }
12037|      0|                                }
12038|       |                            }
12039|      0|                            _ => {}
12040|       |                        }
12041|      0|                    }
12042|      0|                    let pattern7_0 = C::value_type(ctx, pattern6_0);
12043|      0|                    if pattern7_0 == B1 {
12044|       |                        // Rule at src/isa/x64/lower.isle line 1713.
12045|      0|                        let expr0_0: Type = B1;
12046|      0|                        let expr1_0 = C::raw_operand_size_of_type(ctx, expr0_0);
12047|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern6_0)?;
12048|      0|                        let expr3_0: u32 = 1i128 as u32;
12049|      0|                        let expr4_0 = RegMemImm::Imm {
12050|      0|                            simm32: expr3_0,
12051|      0|                        };
12052|      0|                        let expr5_0 = C::gpr_mem_imm_new(ctx, &expr4_0);
12053|      0|                        let expr6_0 = constructor_x64_test(ctx, &expr1_0, &expr5_0, expr2_0)?;
12054|      0|                        let expr7_0 = CC::NZ;
12055|      0|                        let expr8_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr7_0, pattern6_1, pattern6_2)?;
12056|      0|                        let expr9_0 = constructor_with_flags(ctx, &expr6_0, &expr8_0)?;
12057|      0|                        let expr10_0 = C::output(ctx, expr9_0);
12058|      0|                        return Some(expr10_0);
12059|      0|                    }
12060|      0|                    if let Some(pattern8_0) = C::fits_in_64(ctx, pattern7_0) {
12061|       |                        // Rule at src/isa/x64/lower.isle line 1720.
12062|      0|                        let expr0_0 = C::raw_operand_size_of_type(ctx, pattern8_0);
12063|      0|                        let expr1_0 = constructor_put_in_gpr(ctx, pattern6_0)?;
12064|      0|                        let expr2_0 = C::gpr_to_gpr_mem_imm(ctx, expr1_0);
12065|      0|                        let expr3_0 = constructor_x64_test(ctx, &expr0_0, &expr2_0, expr1_0)?;
12066|      0|                        let expr4_0 = CC::NZ;
12067|      0|                        let expr5_0 = constructor_cmove_from_values(ctx, pattern2_0, &expr4_0, pattern6_1, pattern6_2)?;
12068|      0|                        let expr6_0 = constructor_with_flags(ctx, &expr3_0, &expr5_0)?;
12069|      0|                        let expr7_0 = C::output(ctx, expr6_0);
12070|      0|                        return Some(expr7_0);
12071|      0|                    }
12072|      0|                }
12073|       |            }
12074|  9.85k|            _ => {}
12075|       |        }
12076|   118k|    }
12077|   128k|    let pattern1_0 = C::inst_data(ctx, pattern0_0);
12078|   128k|    match &pattern1_0 {
12079|      0|        &InstructionData::NullAry { opcode: ref pattern2_0 } => {
12080|      0|            match pattern2_0 {
12081|       |                &Opcode::Debugtrap  => {
12082|       |                    // Rule at src/isa/x64/lower.isle line 2203.
12083|      0|                    let expr0_0 = constructor_x64_hlt(ctx, )?;
12084|      0|                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
12085|      0|                    return Some(expr1_0);
12086|       |                }
12087|       |                &Opcode::GetPinnedReg  => {
12088|       |                    // Rule at src/isa/x64/lower.isle line 3474.
12089|      0|                    let expr0_0 = constructor_read_pinned_gpr(ctx, )?;
12090|      0|                    let expr1_0 = constructor_output_gpr(ctx, expr0_0)?;
12091|      0|                    return Some(expr1_0);
12092|       |                }
12093|       |                &Opcode::GetFramePointer  => {
12094|       |                    // Rule at src/isa/x64/lower.isle line 2838.
12095|      0|                    let expr0_0 = constructor_x64_rbp(ctx, )?;
12096|      0|                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
12097|      0|                    return Some(expr1_0);
12098|       |                }
12099|       |                &Opcode::GetStackPointer  => {
12100|       |                    // Rule at src/isa/x64/lower.isle line 2841.
12101|      0|                    let expr0_0 = constructor_x64_rsp(ctx, )?;
12102|      0|                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
12103|      0|                    return Some(expr1_0);
12104|       |                }
12105|       |                &Opcode::GetReturnAddress  => {
12106|       |                    // Rule at src/isa/x64/lower.isle line 2844.
12107|      0|                    let expr0_0: Type = I64;
12108|      0|                    let expr1_0: u32 = 8i128 as u32;
12109|      0|                    let expr2_0 = C::preg_rbp(ctx, );
12110|      0|                    let expr3_0 = C::preg_to_reg(ctx, expr2_0);
12111|      0|                    let expr4_0 = C::mem_flags_trusted(ctx, );
12112|      0|                    let expr5_0 = Amode::ImmReg {
12113|      0|                        simm32: expr1_0,
12114|      0|                        base: expr3_0,
12115|      0|                        flags: expr4_0,
12116|      0|                    };
12117|      0|                    let expr6_0 = C::amode_to_synthetic_amode(ctx, &expr5_0);
12118|      0|                    let expr7_0 = ExtKind::None;
12119|      0|                    let expr8_0 = constructor_x64_load(ctx, expr0_0, &expr6_0, &expr7_0)?;
12120|      0|                    let expr9_0 = constructor_output_reg(ctx, expr8_0)?;
12121|      0|                    return Some(expr9_0);
12122|       |                }
12123|       |                &Opcode::Nop  => {
12124|       |                    // Rule at src/isa/x64/lower.isle line 3764.
12125|      0|                    let expr0_0 = C::invalid_reg(ctx, );
12126|      0|                    let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
12127|      0|                    return Some(expr1_0);
12128|       |                }
12129|       |                &Opcode::Fence  => {
12130|       |                    // Rule at src/isa/x64/lower.isle line 2767.
12131|      0|                    let expr0_0 = constructor_x64_mfence(ctx, )?;
12132|      0|                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
12133|      0|                    return Some(expr1_0);
12134|       |                }
12135|      0|                _ => {}
12136|       |            }
12137|       |        }
12138|      0|        &InstructionData::Unary { opcode: ref pattern2_0, arg: pattern2_1 } => {
12139|      0|            match pattern2_0 {
12140|       |                &Opcode::SetPinnedReg  => {
12141|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12142|       |                    // Rule at src/isa/x64/lower.isle line 3479.
12143|      0|                    let expr0_0 = constructor_put_in_gpr(ctx, pattern2_1)?;
12144|      0|                    let expr1_0 = constructor_write_pinned_gpr(ctx, expr0_0)?;
12145|      0|                    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
12146|      0|                    return Some(expr2_0);
12147|       |                }
12148|       |                &Opcode::VanyTrue  => {
12149|       |                    // Rule at src/isa/x64/lower.isle line 3642.
12150|      0|                    let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12151|      0|                    let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
12152|      0|                    let expr2_0 = constructor_x64_ptest(ctx, &expr1_0, expr0_0)?;
12153|      0|                    let expr3_0 = CC::NZ;
12154|      0|                    let expr4_0 = constructor_x64_setcc(ctx, &expr3_0)?;
12155|      0|                    let expr5_0 = constructor_with_flags(ctx, &expr2_0, &expr4_0)?;
12156|      0|                    let expr6_0 = C::output(ctx, expr5_0);
12157|      0|                    return Some(expr6_0);
12158|       |                }
12159|       |                &Opcode::VallTrue  => {
12160|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12161|       |                    // Rule at src/isa/x64/lower.isle line 3648.
12162|      0|                    let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12163|      0|                    let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
12164|      0|                    let expr2_0 = constructor_x64_pxor(ctx, expr0_0, &expr1_0)?;
12165|      0|                    let expr3_0 = constructor_vec_int_type(ctx, pattern4_0)?;
12166|      0|                    let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
12167|      0|                    let expr5_0 = constructor_x64_pcmpeq(ctx, expr3_0, expr0_0, &expr4_0)?;
12168|      0|                    let expr6_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
12169|      0|                    let expr7_0 = constructor_x64_ptest(ctx, &expr6_0, expr5_0)?;
12170|      0|                    let expr8_0 = CC::Z;
12171|      0|                    let expr9_0 = constructor_x64_setcc(ctx, &expr8_0)?;
12172|      0|                    let expr10_0 = constructor_with_flags(ctx, &expr7_0, &expr9_0)?;
12173|      0|                    let expr11_0 = C::output(ctx, expr10_0);
12174|      0|                    return Some(expr11_0);
12175|       |                }
12176|       |                &Opcode::VhighBits  => {
12177|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12178|      0|                    if let Some((pattern5_0, pattern5_1)) = C::multi_lane(ctx, pattern4_0) {
12179|      0|                        if pattern5_0 == 8i128 as u32  {
12180|      0|                            if pattern5_1 == 16i128 as u32  {
12181|       |                                // Rule at src/isa/x64/lower.isle line 3665.
12182|      0|                                let expr0_0 = OperandSize::Size32;
12183|      0|                                let expr1_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12184|      0|                                let expr2_0 = constructor_x64_pmovmskb(ctx, &expr0_0, expr1_0)?;
12185|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
12186|      0|                                return Some(expr3_0);
12187|      0|                            }
12188|      0|                        }
12189|      0|                        if pattern5_0 == 16i128 as u32  {
12190|      0|                            if pattern5_1 == 8i128 as u32  {
12191|       |                                // Rule at src/isa/x64/lower.isle line 3680.
12192|      0|                                let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12193|      0|                                let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
12194|      0|                                let expr2_0 = constructor_x64_packsswb(ctx, expr0_0, &expr1_0)?;
12195|      0|                                let expr3_0 = OperandSize::Size32;
12196|      0|                                let expr4_0 = constructor_x64_pmovmskb(ctx, &expr3_0, expr2_0)?;
12197|      0|                                let expr5_0: Type = I64;
12198|      0|                                let expr6_0: u8 = 8i128 as u8;
12199|      0|                                let expr7_0 = Imm8Reg::Imm8 {
12200|      0|                                    imm: expr6_0,
12201|      0|                                };
12202|      0|                                let expr8_0 = C::imm8_reg_to_imm8_gpr(ctx, &expr7_0);
12203|      0|                                let expr9_0 = constructor_x64_shr(ctx, expr5_0, expr4_0, &expr8_0)?;
12204|      0|                                let expr10_0 = constructor_output_gpr(ctx, expr9_0)?;
12205|      0|                                return Some(expr10_0);
12206|      0|                            }
12207|      0|                        }
12208|      0|                        if pattern5_0 == 32i128 as u32  {
12209|      0|                            if pattern5_1 == 4i128 as u32  {
12210|       |                                // Rule at src/isa/x64/lower.isle line 3668.
12211|      0|                                let expr0_0 = OperandSize::Size32;
12212|      0|                                let expr1_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12213|      0|                                let expr2_0 = constructor_x64_movmskps(ctx, &expr0_0, expr1_0)?;
12214|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
12215|      0|                                return Some(expr3_0);
12216|      0|                            }
12217|      0|                        }
12218|      0|                        if pattern5_0 == 64i128 as u32  {
12219|      0|                            if pattern5_1 == 2i128 as u32  {
12220|       |                                // Rule at src/isa/x64/lower.isle line 3671.
12221|      0|                                let expr0_0 = OperandSize::Size32;
12222|      0|                                let expr1_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12223|      0|                                let expr2_0 = constructor_x64_movmskpd(ctx, &expr0_0, expr1_0)?;
12224|      0|                                let expr3_0 = constructor_output_gpr(ctx, expr2_0)?;
12225|      0|                                return Some(expr3_0);
12226|      0|                            }
12227|      0|                        }
12228|      0|                    }
12229|       |                }
12230|       |                &Opcode::Ceil  => {
12231|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12232|      0|                    if pattern4_0 == F32 {
12233|       |                        // Rule at src/isa/x64/lower.isle line 3338.
12234|      0|                        let expr0_0 = LibCall::CeilF32;
12235|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12236|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12237|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12238|      0|                        return Some(expr3_0);
12239|      0|                    }
12240|      0|                    if pattern4_0 == F64 {
12241|       |                        // Rule at src/isa/x64/lower.isle line 3344.
12242|      0|                        let expr0_0 = LibCall::CeilF64;
12243|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12244|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12245|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12246|      0|                        return Some(expr3_0);
12247|      0|                    }
12248|       |                }
12249|       |                &Opcode::Floor  => {
12250|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12251|      0|                    if pattern4_0 == F32 {
12252|       |                        // Rule at src/isa/x64/lower.isle line 3358.
12253|      0|                        let expr0_0 = LibCall::FloorF32;
12254|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12255|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12256|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12257|      0|                        return Some(expr3_0);
12258|      0|                    }
12259|      0|                    if pattern4_0 == F64 {
12260|       |                        // Rule at src/isa/x64/lower.isle line 3364.
12261|      0|                        let expr0_0 = LibCall::FloorF64;
12262|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12263|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12264|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12265|      0|                        return Some(expr3_0);
12266|      0|                    }
12267|       |                }
12268|       |                &Opcode::Trunc  => {
12269|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12270|      0|                    if pattern4_0 == F32 {
12271|       |                        // Rule at src/isa/x64/lower.isle line 3398.
12272|      0|                        let expr0_0 = LibCall::TruncF32;
12273|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12274|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12275|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12276|      0|                        return Some(expr3_0);
12277|      0|                    }
12278|      0|                    if pattern4_0 == F64 {
12279|       |                        // Rule at src/isa/x64/lower.isle line 3404.
12280|      0|                        let expr0_0 = LibCall::TruncF64;
12281|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12282|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12283|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12284|      0|                        return Some(expr3_0);
12285|      0|                    }
12286|       |                }
12287|       |                &Opcode::Nearest  => {
12288|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12289|      0|                    if pattern4_0 == F32 {
12290|       |                        // Rule at src/isa/x64/lower.isle line 3378.
12291|      0|                        let expr0_0 = LibCall::NearestF32;
12292|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12293|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12294|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12295|      0|                        return Some(expr3_0);
12296|      0|                    }
12297|      0|                    if pattern4_0 == F64 {
12298|       |                        // Rule at src/isa/x64/lower.isle line 3384.
12299|      0|                        let expr0_0 = LibCall::NearestF64;
12300|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern2_1);
12301|      0|                        let expr2_0 = C::libcall_1(ctx, &expr0_0, expr1_0);
12302|      0|                        let expr3_0 = constructor_output_reg(ctx, expr2_0)?;
12303|      0|                        return Some(expr3_0);
12304|      0|                    }
12305|       |                }
12306|       |                &Opcode::IsNull  => {
12307|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12308|      0|                    if pattern4_0 == R64 {
12309|       |                        // Rule at src/isa/x64/lower.isle line 2046.
12310|      0|                        let expr0_0 = OperandSize::Size64;
12311|      0|                        let expr1_0: u32 = 0i128 as u32;
12312|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern2_1)?;
12313|      0|                        let expr3_0 = constructor_x64_cmp_imm(ctx, &expr0_0, expr1_0, expr2_0)?;
12314|      0|                        let expr4_0 = CC::Z;
12315|      0|                        let expr5_0 = constructor_x64_setcc(ctx, &expr4_0)?;
12316|      0|                        let expr6_0 = constructor_with_flags(ctx, &expr3_0, &expr5_0)?;
12317|      0|                        let expr7_0 = C::output(ctx, expr6_0);
12318|      0|                        return Some(expr7_0);
12319|      0|                    }
12320|       |                }
12321|       |                &Opcode::IsInvalid  => {
12322|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12323|      0|                    if pattern4_0 == R64 {
12324|       |                        // Rule at src/isa/x64/lower.isle line 2054.
12325|      0|                        let expr0_0 = OperandSize::Size64;
12326|      0|                        let expr1_0: u32 = 4294967295i128 as u32;
12327|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern2_1)?;
12328|      0|                        let expr3_0 = constructor_x64_cmp_imm(ctx, &expr0_0, expr1_0, expr2_0)?;
12329|      0|                        let expr4_0 = CC::Z;
12330|      0|                        let expr5_0 = constructor_x64_setcc(ctx, &expr4_0)?;
12331|      0|                        let expr6_0 = constructor_with_flags(ctx, &expr3_0, &expr5_0)?;
12332|      0|                        let expr7_0 = C::output(ctx, expr6_0);
12333|      0|                        return Some(expr7_0);
12334|      0|                    }
12335|       |                }
12336|       |                &Opcode::RawBitcast  => {
12337|       |                    // Rule at src/isa/x64/lower.isle line 3494.
12338|      0|                    let expr0_0 = C::put_in_regs(ctx, pattern2_1);
12339|      0|                    let expr1_0 = C::output(ctx, expr0_0);
12340|      0|                    return Some(expr1_0);
12341|       |                }
12342|       |                &Opcode::ScalarToVector  => {
12343|      0|                    if let Some(pattern4_0) = C::sinkable_load(ctx, pattern2_1) {
12344|      0|                        let pattern5_0 = C::value_type(ctx, pattern2_1);
12345|      0|                        if let Some(pattern6_0) = C::ty_32(ctx, pattern5_0) {
12346|       |                            // Rule at src/isa/x64/lower.isle line 3591.
12347|      0|                            let expr0_0 = constructor_sink_load_to_xmm_mem(ctx, &pattern4_0)?;
12348|      0|                            let expr1_0 = constructor_x64_movss_load(ctx, &expr0_0)?;
12349|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
12350|      0|                            return Some(expr2_0);
12351|      0|                        }
12352|      0|                        if let Some(pattern6_0) = C::ty_64(ctx, pattern5_0) {
12353|       |                            // Rule at src/isa/x64/lower.isle line 3593.
12354|      0|                            let expr0_0 = constructor_sink_load_to_xmm_mem(ctx, &pattern4_0)?;
12355|      0|                            let expr1_0 = constructor_x64_movsd_load(ctx, &expr0_0)?;
12356|      0|                            let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
12357|      0|                            return Some(expr2_0);
12358|      0|                        }
12359|      0|                    }
12360|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12361|      0|                    if let Some(pattern5_0) = C::ty_scalar_float(ctx, pattern4_0) {
12362|       |                        // Rule at src/isa/x64/lower.isle line 3581.
12363|      0|                        let expr0_0 = constructor_output_value(ctx, pattern2_1)?;
12364|      0|                        return Some(expr0_0);
12365|      0|                    }
12366|       |                    // Rule at src/isa/x64/lower.isle line 3586.
12367|      0|                    let expr0_0 = constructor_put_in_gpr(ctx, pattern2_1)?;
12368|      0|                    let expr1_0 = constructor_bitcast_gpr_to_xmm(ctx, pattern4_0, expr0_0)?;
12369|      0|                    let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
12370|      0|                    return Some(expr2_0);
12371|       |                }
12372|       |                &Opcode::FcvtFromSint  => {
12373|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12374|      0|                    if pattern4_0 == I32X4 {
12375|       |                        // Rule at src/isa/x64/lower.isle line 2962.
12376|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12377|      0|                        let expr1_0 = constructor_x64_cvtdq2ps(ctx, expr0_0)?;
12378|      0|                        let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
12379|      0|                        return Some(expr2_0);
12380|      0|                    }
12381|       |                }
12382|       |                &Opcode::FcvtLowFromSint  => {
12383|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12384|       |                    // Rule at src/isa/x64/lower.isle line 2967.
12385|      0|                    let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12386|      0|                    let expr1_0 = constructor_x64_cvtdq2pd(ctx, pattern4_0, expr0_0)?;
12387|      0|                    let expr2_0 = constructor_output_xmm(ctx, expr1_0)?;
12388|      0|                    return Some(expr2_0);
12389|       |                }
12390|       |                &Opcode::Isplit  => {
12391|      0|                    let pattern4_0 = C::value_type(ctx, pattern2_1);
12392|      0|                    if pattern4_0 == I128 {
12393|       |                        // Rule at src/isa/x64/lower.isle line 3693.
12394|      0|                        let expr0_0 = C::put_in_regs(ctx, pattern2_1);
12395|      0|                        let expr1_0: usize = 0i128 as usize;
12396|      0|                        let expr2_0 = C::value_regs_get(ctx, expr0_0, expr1_0);
12397|      0|                        let expr3_0: usize = 1i128 as usize;
12398|      0|                        let expr4_0 = C::value_regs_get(ctx, expr0_0, expr3_0);
12399|      0|                        let expr5_0 = C::value_reg(ctx, expr2_0);
12400|      0|                        let expr6_0 = C::value_reg(ctx, expr4_0);
12401|      0|                        let expr7_0 = C::output_pair(ctx, expr5_0, expr6_0);
12402|      0|                        return Some(expr7_0);
12403|      0|                    }
12404|       |                }
12405|      0|                _ => {}
12406|       |            }
12407|       |        }
12408|      0|        &InstructionData::BinaryImm8 { opcode: ref pattern2_0, arg: pattern2_1, imm: pattern2_2 } => {
12409|      0|            if let &Opcode::Extractlane  = pattern2_0 {
12410|      0|                let pattern4_0 = C::value_type(ctx, pattern2_1);
12411|      0|                if let Some((pattern5_0, pattern5_1)) = C::multi_lane(ctx, pattern4_0) {
12412|      0|                    if pattern5_0 == 8i128 as u32  {
12413|      0|                        if pattern5_1 == 16i128 as u32  {
12414|      0|                            let pattern8_0 = C::u8_from_uimm8(ctx, pattern2_2);
12415|       |                            // Rule at src/isa/x64/lower.isle line 3563.
12416|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12417|      0|                            let expr1_0 = constructor_x64_pextrb(ctx, pattern4_0, expr0_0, pattern8_0)?;
12418|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12419|      0|                            return Some(expr2_0);
12420|      0|                        }
12421|      0|                    }
12422|      0|                    if pattern5_0 == 16i128 as u32  {
12423|      0|                        if pattern5_1 == 8i128 as u32  {
12424|      0|                            let pattern8_0 = C::u8_from_uimm8(ctx, pattern2_2);
12425|       |                            // Rule at src/isa/x64/lower.isle line 3566.
12426|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12427|      0|                            let expr1_0 = constructor_x64_pextrw(ctx, pattern4_0, expr0_0, pattern8_0)?;
12428|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12429|      0|                            return Some(expr2_0);
12430|      0|                        }
12431|      0|                    }
12432|      0|                    if pattern5_0 == 32i128 as u32  {
12433|      0|                        if pattern5_1 == 4i128 as u32  {
12434|      0|                            let pattern8_0 = C::u8_from_uimm8(ctx, pattern2_2);
12435|       |                            // Rule at src/isa/x64/lower.isle line 3569.
12436|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12437|      0|                            let expr1_0 = constructor_x64_pextrd(ctx, pattern4_0, expr0_0, pattern8_0)?;
12438|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12439|      0|                            return Some(expr2_0);
12440|      0|                        }
12441|      0|                    }
12442|      0|                    if pattern5_0 == 64i128 as u32  {
12443|      0|                        if pattern5_1 == 2i128 as u32  {
12444|      0|                            let pattern8_0 = C::u8_from_uimm8(ctx, pattern2_2);
12445|       |                            // Rule at src/isa/x64/lower.isle line 3572.
12446|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern2_1)?;
12447|      0|                            let expr1_0 = constructor_x64_pextrd(ctx, pattern4_0, expr0_0, pattern8_0)?;
12448|      0|                            let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12449|      0|                            return Some(expr2_0);
12450|      0|                        }
12451|      0|                    }
12452|      0|                }
12453|      0|            }
12454|       |        }
12455|      0|        &InstructionData::FloatCondTrap { opcode: ref pattern2_0, arg: pattern2_1, cond: ref pattern2_2, code: ref pattern2_3 } => {
12456|      0|            if let &Opcode::Trapff  = pattern2_0 {
12457|      0|                if let Some(pattern4_0) = C::def_inst(ctx, pattern2_1) {
12458|      0|                    let pattern5_0 = C::inst_data(ctx, pattern4_0);
12459|      0|                    if let &InstructionData::Binary { opcode: ref pattern6_0, args: ref pattern6_1 } = &pattern5_0 {
12460|      0|                        if let &Opcode::Ffcmp  = pattern6_0 {
12461|      0|                            let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
12462|       |                            // Rule at src/isa/x64/lower.isle line 1430.
12463|      0|                            let expr0_0 = constructor_emit_fcmp(ctx, pattern2_2, pattern8_0, pattern8_1)?;
12464|      0|                            let expr1_0 = constructor_trap_if_fcmp(ctx, &expr0_0, pattern2_3)?;
12465|      0|                            let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
12466|      0|                            return Some(expr2_0);
12467|      0|                        }
12468|      0|                    }
12469|      0|                }
12470|      0|            }
12471|       |        }
12472|      0|        &InstructionData::IntCondTrap { opcode: ref pattern2_0, arg: pattern2_1, cond: ref pattern2_2, code: ref pattern2_3 } => {
12473|      0|            if let &Opcode::Trapif  = pattern2_0 {
12474|      0|                if let Some(pattern4_0) = C::def_inst(ctx, pattern2_1) {
12475|      0|                    let pattern5_0 = C::inst_data(ctx, pattern4_0);
12476|      0|                    if let &InstructionData::Binary { opcode: ref pattern6_0, args: ref pattern6_1 } = &pattern5_0 {
12477|      0|                        match pattern6_0 {
12478|       |                            &Opcode::Ifcmp  => {
12479|      0|                                let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
12480|       |                                // Rule at src/isa/x64/lower.isle line 1425.
12481|      0|                                let expr0_0 = constructor_emit_cmp(ctx, pattern2_2, pattern8_0, pattern8_1)?;
12482|      0|                                let expr1_0 = constructor_trap_if_icmp(ctx, &expr0_0, pattern2_3)?;
12483|      0|                                let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
12484|      0|                                return Some(expr2_0);
12485|       |                            }
12486|       |                            &Opcode::IaddIfcout  => {
12487|      0|                                let (pattern8_0, pattern8_1) = C::unpack_value_array_2(ctx, pattern6_1);
12488|       |                                // Rule at src/isa/x64/lower.isle line 1420.
12489|      0|                                let expr0_0 = constructor_flags_to_producesflags(ctx, pattern2_1)?;
12490|      0|                                let expr1_0 = C::intcc_to_cc(ctx, pattern2_2);
12491|      0|                                let expr2_0 = constructor_icmp_cond_result(ctx, &expr0_0, &expr1_0)?;
12492|      0|                                let expr3_0 = constructor_trap_if_icmp(ctx, &expr2_0, pattern2_3)?;
12493|      0|                                let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
12494|      0|                                return Some(expr4_0);
12495|       |                            }
12496|      0|                            _ => {}
12497|       |                        }
12498|      0|                    }
12499|      0|                }
12500|      0|            }
12501|       |        }
12502|  50.2k|        &InstructionData::MultiAry { opcode: ref pattern2_0, args: pattern2_1 } => {
12503|  50.2k|            if let &Opcode::Return  = pattern2_0 {
12504|  50.2k|                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
12505|  50.2k|                // Rule at src/isa/x64/lower.isle line 1441.
12506|  50.2k|                let expr0_0: usize = 0i128 as usize;
12507|  50.2k|                let expr1_0 = C::value_slice_len(ctx, pattern4_0);
12508|  50.2k|                let expr2_0 = C::range(ctx, expr0_0, expr1_0);
12509|  50.2k|                let expr3_0 = constructor_lower_return(ctx, expr2_0, pattern4_0)?;
12510|  50.2k|                return Some(expr3_0);
12511|      0|            }
12512|       |        }
12513|  44.3k|        &InstructionData::Call { opcode: ref pattern2_0, args: pattern2_1, func_ref: pattern2_2 } => {
12514|  44.3k|            if let &Opcode::Call  = pattern2_0 {
12515|  44.3k|                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
12516|  44.3k|                let (pattern5_0, pattern5_1, pattern5_2) = C::func_ref_data(ctx, pattern2_2);
12517|  44.3k|                // Rule at src/isa/x64/lower.isle line 2830.
12518|  44.3k|                let expr0_0 = C::gen_call(ctx, pattern5_0, pattern5_1, pattern5_2, pattern4_0);
12519|  44.3k|                return Some(expr0_0);
12520|      0|            }
12521|       |        }
12522|  4.87k|        &InstructionData::CallIndirect { opcode: ref pattern2_0, args: pattern2_1, sig_ref: pattern2_2 } => {
12523|  4.87k|            if let &Opcode::CallIndirect  = pattern2_0 {
12524|  4.87k|                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
12525|  4.87k|                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
12526|       |                    // Rule at src/isa/x64/lower.isle line 2833.
12527|  4.87k|                    let expr0_0 = C::gen_call_indirect(ctx, pattern2_2, pattern5_0, pattern5_1);
12528|  4.87k|                    return Some(expr0_0);
12529|      0|                }
12530|      0|            }
12531|       |        }
12532|      0|        &InstructionData::FuncAddr { opcode: ref pattern2_0, func_ref: pattern2_1 } => {
12533|      0|            if let &Opcode::FuncAddr  = pattern2_0 {
12534|      0|                let (pattern4_0, pattern4_1, pattern4_2) = C::func_ref_data(ctx, pattern2_1);
12535|      0|                // Rule at src/isa/x64/lower.isle line 2772.
12536|      0|                let expr0_0: i64 = 0i128 as i64;
12537|      0|                let expr1_0 = constructor_load_ext_name(ctx, pattern4_1, expr0_0)?;
12538|      0|                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
12539|      0|                return Some(expr2_0);
12540|      0|            }
12541|       |        }
12542|      0|        &InstructionData::UnaryGlobalValue { opcode: ref pattern2_0, global_value: pattern2_1 } => {
12543|      0|            match pattern2_0 {
12544|       |                &Opcode::SymbolValue  => {
12545|      0|                    if let Some((pattern4_0, pattern4_1, pattern4_2)) = C::symbol_value_data(ctx, pattern2_1) {
12546|       |                        // Rule at src/isa/x64/lower.isle line 2777.
12547|      0|                        let expr0_0 = constructor_load_ext_name(ctx, pattern4_0, pattern4_2)?;
12548|      0|                        let expr1_0 = constructor_output_reg(ctx, expr0_0)?;
12549|      0|                        return Some(expr1_0);
12550|      0|                    }
12551|       |                }
12552|       |                &Opcode::TlsValue  => {
12553|      0|                    if let Some((pattern4_0, pattern4_1, pattern4_2)) = C::symbol_value_data(ctx, pattern2_1) {
12554|      0|                        let mut closure5 = || {
12555|       |                            let expr0_0 = C::tls_model_is_elf_gd(ctx, )?;
12556|       |                            return Some(expr0_0);
12557|       |                        };
12558|      0|                        if let Some(pattern5_0) = closure5() {
12559|       |                            // Rule at src/isa/x64/lower.isle line 3701.
12560|      0|                            let expr0_0 = constructor_elf_tls_get_addr(ctx, pattern4_0)?;
12561|      0|                            let expr1_0 = constructor_output_gpr(ctx, expr0_0)?;
12562|      0|                            return Some(expr1_0);
12563|      0|                        }
12564|      0|                        let mut closure5 = || {
12565|       |                            let expr0_0 = C::tls_model_is_macho(ctx, )?;
12566|       |                            return Some(expr0_0);
12567|       |                        };
12568|      0|                        if let Some(pattern5_0) = closure5() {
12569|       |                            // Rule at src/isa/x64/lower.isle line 3705.
12570|      0|                            let expr0_0 = constructor_macho_tls_get_addr(ctx, pattern4_0)?;
12571|      0|                            let expr1_0 = constructor_output_gpr(ctx, expr0_0)?;
12572|      0|                            return Some(expr1_0);
12573|      0|                        }
12574|      0|                        let mut closure5 = || {
12575|       |                            let expr0_0 = C::tls_model_is_coff(ctx, )?;
12576|       |                            return Some(expr0_0);
12577|       |                        };
12578|      0|                        if let Some(pattern5_0) = closure5() {
12579|       |                            // Rule at src/isa/x64/lower.isle line 3709.
12580|      0|                            let expr0_0 = constructor_coff_tls_get_addr(ctx, pattern4_0)?;
12581|      0|                            let expr1_0 = constructor_output_gpr(ctx, expr0_0)?;
12582|      0|                            return Some(expr1_0);
12583|      0|                        }
12584|      0|                    }
12585|       |                }
12586|      0|                _ => {}
12587|       |            }
12588|       |        }
12589|      0|        &InstructionData::UnaryIeee32 { opcode: ref pattern2_0, imm: pattern2_1 } => {
12590|      0|            if let &Opcode::F32const  = pattern2_0 {
12591|      0|                let pattern4_0 = C::u64_from_ieee32(ctx, pattern2_1);
12592|      0|                // Rule at src/isa/x64/lower.isle line 51.
12593|      0|                let expr0_0: Type = F32;
12594|      0|                let expr1_0 = constructor_imm(ctx, expr0_0, pattern4_0)?;
12595|      0|                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
12596|      0|                return Some(expr2_0);
12597|      0|            }
12598|       |        }
12599|      0|        &InstructionData::UnaryIeee64 { opcode: ref pattern2_0, imm: pattern2_1 } => {
12600|      0|            if let &Opcode::F64const  = pattern2_0 {
12601|      0|                let pattern4_0 = C::u64_from_ieee64(ctx, pattern2_1);
12602|      0|                // Rule at src/isa/x64/lower.isle line 56.
12603|      0|                let expr0_0: Type = F64;
12604|      0|                let expr1_0 = constructor_imm(ctx, expr0_0, pattern4_0)?;
12605|      0|                let expr2_0 = constructor_output_reg(ctx, expr1_0)?;
12606|      0|                return Some(expr2_0);
12607|      0|            }
12608|       |        }
12609|      0|        &InstructionData::StackLoad { opcode: ref pattern2_0, stack_slot: pattern2_1, offset: pattern2_2 } => {
12610|      0|            if let &Opcode::StackAddr  = pattern2_0 {
12611|       |                // Rule at src/isa/x64/lower.isle line 3415.
12612|      0|                let expr0_0 = constructor_stack_addr_impl(ctx, pattern2_1, pattern2_2)?;
12613|      0|                let expr1_0 = constructor_output_gpr(ctx, expr0_0)?;
12614|      0|                return Some(expr1_0);
12615|      0|            }
12616|       |        }
12617|  9.71k|        &InstructionData::Trap { opcode: ref pattern2_0, code: ref pattern2_1 } => {
12618|  9.71k|            match pattern2_0 {
12619|       |                &Opcode::Trap  => {
12620|       |                    // Rule at src/isa/x64/lower.isle line 1412.
12621|  9.71k|                    let expr0_0 = constructor_x64_ud2(ctx, pattern2_1)?;
12622|  9.71k|                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
12623|  9.71k|                    return Some(expr1_0);
12624|       |                }
12625|       |                &Opcode::ResumableTrap  => {
12626|       |                    // Rule at src/isa/x64/lower.isle line 1435.
12627|      0|                    let expr0_0 = constructor_x64_ud2(ctx, pattern2_1)?;
12628|      0|                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
12629|      0|                    return Some(expr1_0);
12630|       |                }
12631|      0|                _ => {}
12632|       |            }
12633|       |        }
12634|  18.4E|        &InstructionData::Binary { opcode: ref pattern2_0, args: ref pattern2_1 } => {
12635|  18.4E|            match pattern2_0 {
12636|       |                &Opcode::Swizzle  => {
12637|  18.4E|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12638|       |                    // Rule at src/isa/x64/lower.isle line 3538.
12639|  18.4E|                    let expr0_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
12640|  18.4E|                    let expr1_0: Type = I8X16;
12641|  18.4E|                    let expr2_0 = C::swizzle_zero_mask(ctx, );
12642|  18.4E|                    let expr3_0 = constructor_x64_xmm_load_const(ctx, expr1_0, expr2_0)?;
12643|  18.4E|                    let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
12644|  18.4E|                    let expr5_0 = constructor_x64_paddusb(ctx, expr0_0, &expr4_0)?;
12645|  18.4E|                    let expr6_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
12646|  18.4E|                    let expr7_0 = C::xmm_to_xmm_mem(ctx, expr5_0);
12647|  18.4E|                    let expr8_0 = constructor_x64_pshufb(ctx, expr6_0, &expr7_0)?;
12648|  18.4E|                    let expr9_0 = constructor_output_xmm(ctx, expr8_0)?;
12649|      0|                    return Some(expr9_0);
12650|       |                }
12651|       |                &Opcode::Umulhi  => {
12652|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12653|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12654|      0|                    if pattern5_0 == I16 {
12655|       |                        // Rule at src/isa/x64/lower.isle line 3440.
12656|      0|                        let expr0_0: Type = I16;
12657|      0|                        let expr1_0: bool = false;
12658|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
12659|      0|                        let expr3_0 = constructor_put_in_gpr_mem(ctx, pattern4_1)?;
12660|      0|                        let expr4_0 = constructor_mul_hi(ctx, expr0_0, expr1_0, expr2_0, &expr3_0)?;
12661|      0|                        let expr5_0: usize = 1i128 as usize;
12662|      0|                        let expr6_0 = constructor_value_regs_get_gpr(ctx, expr4_0, expr5_0)?;
12663|      0|                        let expr7_0 = constructor_output_gpr(ctx, expr6_0)?;
12664|      0|                        return Some(expr7_0);
12665|      0|                    }
12666|      0|                    if pattern5_0 == I32 {
12667|       |                        // Rule at src/isa/x64/lower.isle line 3445.
12668|      0|                        let expr0_0: Type = I32;
12669|      0|                        let expr1_0: bool = false;
12670|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
12671|      0|                        let expr3_0 = constructor_put_in_gpr_mem(ctx, pattern4_1)?;
12672|      0|                        let expr4_0 = constructor_mul_hi(ctx, expr0_0, expr1_0, expr2_0, &expr3_0)?;
12673|      0|                        let expr5_0: usize = 1i128 as usize;
12674|      0|                        let expr6_0 = constructor_value_regs_get_gpr(ctx, expr4_0, expr5_0)?;
12675|      0|                        let expr7_0 = constructor_output_gpr(ctx, expr6_0)?;
12676|      0|                        return Some(expr7_0);
12677|      0|                    }
12678|      0|                    if pattern5_0 == I64 {
12679|       |                        // Rule at src/isa/x64/lower.isle line 3450.
12680|      0|                        let expr0_0: Type = I64;
12681|      0|                        let expr1_0: bool = false;
12682|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
12683|      0|                        let expr3_0 = constructor_put_in_gpr_mem(ctx, pattern4_1)?;
12684|      0|                        let expr4_0 = constructor_mul_hi(ctx, expr0_0, expr1_0, expr2_0, &expr3_0)?;
12685|      0|                        let expr5_0: usize = 1i128 as usize;
12686|      0|                        let expr6_0 = constructor_value_regs_get_gpr(ctx, expr4_0, expr5_0)?;
12687|      0|                        let expr7_0 = constructor_output_gpr(ctx, expr6_0)?;
12688|      0|                        return Some(expr7_0);
12689|      0|                    }
12690|       |                }
12691|       |                &Opcode::Smulhi  => {
12692|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12693|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12694|      0|                    if pattern5_0 == I16 {
12695|       |                        // Rule at src/isa/x64/lower.isle line 3457.
12696|      0|                        let expr0_0: Type = I16;
12697|      0|                        let expr1_0: bool = true;
12698|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
12699|      0|                        let expr3_0 = constructor_put_in_gpr_mem(ctx, pattern4_1)?;
12700|      0|                        let expr4_0 = constructor_mul_hi(ctx, expr0_0, expr1_0, expr2_0, &expr3_0)?;
12701|      0|                        let expr5_0: usize = 1i128 as usize;
12702|      0|                        let expr6_0 = constructor_value_regs_get_gpr(ctx, expr4_0, expr5_0)?;
12703|      0|                        let expr7_0 = constructor_output_gpr(ctx, expr6_0)?;
12704|      0|                        return Some(expr7_0);
12705|      0|                    }
12706|      0|                    if pattern5_0 == I32 {
12707|       |                        // Rule at src/isa/x64/lower.isle line 3462.
12708|      0|                        let expr0_0: Type = I32;
12709|      0|                        let expr1_0: bool = true;
12710|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
12711|      0|                        let expr3_0 = constructor_put_in_gpr_mem(ctx, pattern4_1)?;
12712|      0|                        let expr4_0 = constructor_mul_hi(ctx, expr0_0, expr1_0, expr2_0, &expr3_0)?;
12713|      0|                        let expr5_0: usize = 1i128 as usize;
12714|      0|                        let expr6_0 = constructor_value_regs_get_gpr(ctx, expr4_0, expr5_0)?;
12715|      0|                        let expr7_0 = constructor_output_gpr(ctx, expr6_0)?;
12716|      0|                        return Some(expr7_0);
12717|      0|                    }
12718|      0|                    if pattern5_0 == I64 {
12719|       |                        // Rule at src/isa/x64/lower.isle line 3467.
12720|      0|                        let expr0_0: Type = I64;
12721|      0|                        let expr1_0: bool = true;
12722|      0|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
12723|      0|                        let expr3_0 = constructor_put_in_gpr_mem(ctx, pattern4_1)?;
12724|      0|                        let expr4_0 = constructor_mul_hi(ctx, expr0_0, expr1_0, expr2_0, &expr3_0)?;
12725|      0|                        let expr5_0: usize = 1i128 as usize;
12726|      0|                        let expr6_0 = constructor_value_regs_get_gpr(ctx, expr4_0, expr5_0)?;
12727|      0|                        let expr7_0 = constructor_output_gpr(ctx, expr6_0)?;
12728|      0|                        return Some(expr7_0);
12729|      0|                    }
12730|       |                }
12731|       |                &Opcode::SqmulRoundSat  => {
12732|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12733|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12734|      0|                    if pattern5_0 == I16X8 {
12735|       |                        // Rule at src/isa/x64/lower.isle line 3715.
12736|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
12737|      0|                        let expr1_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
12738|      0|                        let expr2_0: Type = I16X8;
12739|      0|                        let expr3_0 = C::sqmul_round_sat_mask(ctx, );
12740|      0|                        let expr4_0 = constructor_x64_xmm_load_const(ctx, expr2_0, expr3_0)?;
12741|      0|                        let expr5_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
12742|      0|                        let expr6_0 = constructor_x64_pmulhrsw(ctx, expr0_0, &expr5_0)?;
12743|      0|                        let expr7_0 = C::xmm_to_xmm_mem(ctx, expr6_0);
12744|      0|                        let expr8_0 = constructor_x64_pcmpeqw(ctx, expr4_0, &expr7_0)?;
12745|      0|                        let expr9_0 = C::xmm_to_xmm_mem(ctx, expr8_0);
12746|      0|                        let expr10_0 = constructor_x64_pxor(ctx, expr6_0, &expr9_0)?;
12747|      0|                        let expr11_0 = constructor_output_xmm(ctx, expr10_0)?;
12748|      0|                        return Some(expr11_0);
12749|      0|                    }
12750|       |                }
12751|       |                &Opcode::Udiv  => {
12752|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12753|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12754|      0|                    // Rule at src/isa/x64/lower.isle line 3420.
12755|      0|                    let expr0_0 = DivOrRemKind::UnsignedDiv;
12756|      0|                    let expr1_0 = constructor_div_or_rem(ctx, &expr0_0, pattern4_0, pattern4_1)?;
12757|      0|                    let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12758|      0|                    return Some(expr2_0);
12759|       |                }
12760|       |                &Opcode::Sdiv  => {
12761|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12762|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12763|      0|                    // Rule at src/isa/x64/lower.isle line 3425.
12764|      0|                    let expr0_0 = DivOrRemKind::SignedDiv;
12765|      0|                    let expr1_0 = constructor_div_or_rem(ctx, &expr0_0, pattern4_0, pattern4_1)?;
12766|      0|                    let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12767|      0|                    return Some(expr2_0);
12768|       |                }
12769|       |                &Opcode::Urem  => {
12770|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12771|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12772|      0|                    // Rule at src/isa/x64/lower.isle line 3430.
12773|      0|                    let expr0_0 = DivOrRemKind::UnsignedRem;
12774|      0|                    let expr1_0 = constructor_div_or_rem(ctx, &expr0_0, pattern4_0, pattern4_1)?;
12775|      0|                    let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12776|      0|                    return Some(expr2_0);
12777|       |                }
12778|       |                &Opcode::Srem  => {
12779|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12780|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12781|      0|                    // Rule at src/isa/x64/lower.isle line 3435.
12782|      0|                    let expr0_0 = DivOrRemKind::SignedRem;
12783|      0|                    let expr1_0 = constructor_div_or_rem(ctx, &expr0_0, pattern4_0, pattern4_1)?;
12784|      0|                    let expr2_0 = constructor_output_gpr(ctx, expr1_0)?;
12785|      0|                    return Some(expr2_0);
12786|       |                }
12787|       |                &Opcode::Uunarrow  => {
12788|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12789|      0|                    if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
12790|      0|                        let pattern6_0 = C::inst_data(ctx, pattern5_0);
12791|      0|                        if let &InstructionData::Unary { opcode: ref pattern7_0, arg: pattern7_1 } = &pattern6_0 {
12792|      0|                            if let &Opcode::FcvtToUintSat  = pattern7_0 {
12793|      0|                                let pattern9_0 = C::value_type(ctx, pattern7_1);
12794|      0|                                if pattern9_0 == F64X2 {
12795|      0|                                    if let Some(pattern11_0) = C::def_inst(ctx, pattern4_1) {
12796|      0|                                        let pattern12_0 = C::inst_data(ctx, pattern11_0);
12797|      0|                                        if let &InstructionData::UnaryConst { opcode: ref pattern13_0, constant_handle: pattern13_1 } = &pattern12_0 {
12798|      0|                                            if let &Opcode::Vconst  = pattern13_0 {
12799|      0|                                                if let Some(pattern15_0) = C::u128_from_constant(ctx, pattern13_1) {
12800|      0|                                                    if pattern15_0 == 0i128 as u128  {
12801|       |                                                        // Rule at src/isa/x64/lower.isle line 3738.
12802|      0|                                                        let expr0_0 = constructor_put_in_xmm(ctx, pattern7_1)?;
12803|      0|                                                        let expr1_0 = C::xmm_to_xmm_mem(ctx, expr0_0);
12804|      0|                                                        let expr2_0 = constructor_x64_xorpd(ctx, expr0_0, &expr1_0)?;
12805|      0|                                                        let expr3_0 = constructor_x64_maxpd(ctx, expr0_0, expr2_0)?;
12806|      0|                                                        let expr4_0: Type = F64X2;
12807|      0|                                                        let expr5_0 = C::uunarrow_umax_mask(ctx, );
12808|      0|                                                        let expr6_0 = constructor_x64_xmm_load_const(ctx, expr4_0, expr5_0)?;
12809|      0|                                                        let expr7_0 = constructor_x64_minpd(ctx, expr3_0, expr6_0)?;
12810|      0|                                                        let expr8_0 = C::xmm_to_xmm_mem(ctx, expr7_0);
12811|      0|                                                        let expr9_0 = RoundImm::RoundZero;
12812|      0|                                                        let expr10_0 = constructor_x64_roundpd(ctx, &expr8_0, &expr9_0)?;
12813|      0|                                                        let expr11_0: Type = F64X2;
12814|      0|                                                        let expr12_0 = C::uunarrow_uint_mask(ctx, );
12815|      0|                                                        let expr13_0 = constructor_x64_xmm_load_const(ctx, expr11_0, expr12_0)?;
12816|      0|                                                        let expr14_0 = C::xmm_to_xmm_mem(ctx, expr13_0);
12817|      0|                                                        let expr15_0 = constructor_x64_addpd(ctx, expr10_0, &expr14_0)?;
12818|      0|                                                        let expr16_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
12819|      0|                                                        let expr17_0: u8 = 136i128 as u8;
12820|      0|                                                        let expr18_0 = constructor_x64_shufps(ctx, expr15_0, &expr16_0, expr17_0)?;
12821|      0|                                                        let expr19_0 = constructor_output_xmm(ctx, expr18_0)?;
12822|      0|                                                        return Some(expr19_0);
12823|      0|                                                    }
12824|      0|                                                }
12825|      0|                                            }
12826|      0|                                        }
12827|      0|                                    }
12828|      0|                                }
12829|      0|                            }
12830|      0|                        }
12831|      0|                    }
12832|       |                }
12833|       |                &Opcode::Iconcat  => {
12834|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12835|      0|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
12836|      0|                    if pattern5_0 == I64 {
12837|       |                        // Rule at src/isa/x64/lower.isle line 3688.
12838|      0|                        let expr0_0 = C::put_in_reg(ctx, pattern4_0);
12839|      0|                        let expr1_0 = C::put_in_reg(ctx, pattern4_1);
12840|      0|                        let expr2_0 = C::value_regs(ctx, expr0_0, expr1_0);
12841|      0|                        let expr3_0 = C::output(ctx, expr2_0);
12842|      0|                        return Some(expr3_0);
12843|      0|                    }
12844|       |                }
12845|      0|                _ => {}
12846|       |            }
12847|       |        }
12848|      0|        &InstructionData::Shuffle { opcode: ref pattern2_0, args: ref pattern2_1, imm: pattern2_2 } => {
12849|      0|            if let &Opcode::Shuffle  = pattern2_0 {
12850|      0|                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12851|      0|                if pattern4_1 == pattern4_0 {
12852|      0|                    if let Some(pattern6_0) = C::vec_mask_from_immediate(ctx, pattern2_2) {
12853|       |                        // Rule at src/isa/x64/lower.isle line 3503.
12854|      0|                        let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
12855|      0|                        let expr1_0: Type = I8X16;
12856|      0|                        let expr2_0 = C::shuffle_0_31_mask(ctx, &pattern6_0);
12857|      0|                        let expr3_0 = constructor_x64_xmm_load_const(ctx, expr1_0, expr2_0)?;
12858|      0|                        let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
12859|      0|                        let expr5_0 = constructor_x64_pshufb(ctx, expr0_0, &expr4_0)?;
12860|      0|                        let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
12861|      0|                        return Some(expr6_0);
12862|      0|                    }
12863|      0|                }
12864|      0|                if let Some(pattern5_0) = C::vec_mask_from_immediate(ctx, pattern2_2) {
12865|       |                    // Rule at src/isa/x64/lower.isle line 3525.
12866|      0|                    let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
12867|      0|                    let expr1_0: Type = I8X16;
12868|      0|                    let expr2_0 = C::shuffle_0_15_mask(ctx, &pattern5_0);
12869|      0|                    let expr3_0 = constructor_x64_xmm_load_const(ctx, expr1_0, expr2_0)?;
12870|      0|                    let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
12871|      0|                    let expr5_0 = constructor_x64_pshufb(ctx, expr0_0, &expr4_0)?;
12872|      0|                    let expr6_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
12873|      0|                    let expr7_0: Type = I8X16;
12874|      0|                    let expr8_0 = C::shuffle_16_31_mask(ctx, &pattern5_0);
12875|      0|                    let expr9_0 = constructor_x64_xmm_load_const(ctx, expr7_0, expr8_0)?;
12876|      0|                    let expr10_0 = C::xmm_to_xmm_mem(ctx, expr9_0);
12877|      0|                    let expr11_0 = constructor_x64_pshufb(ctx, expr6_0, &expr10_0)?;
12878|      0|                    let expr12_0 = C::xmm_to_xmm_mem(ctx, expr11_0);
12879|      0|                    let expr13_0 = constructor_x64_por(ctx, expr5_0, &expr12_0)?;
12880|      0|                    let expr14_0 = constructor_output_xmm(ctx, expr13_0)?;
12881|      0|                    return Some(expr14_0);
12882|      0|                }
12883|      0|            }
12884|       |        }
12885|      0|        &InstructionData::StoreNoOffset { opcode: ref pattern2_0, args: ref pattern2_1, flags: pattern2_2 } => {
12886|      0|            if let &Opcode::AtomicStore  = pattern2_0 {
12887|      0|                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12888|      0|                let pattern5_0 = C::value_type(ctx, pattern4_0);
12889|      0|                if let Some(pattern6_0) = C::fits_in_64(ctx, pattern5_0) {
12890|      0|                    if let Some(pattern7_0) = C::ty_int(ctx, pattern5_0) {
12891|       |                        // Rule at src/isa/x64/lower.isle line 2799.
12892|      0|                        let expr0_0 = C::zero_offset(ctx, );
12893|      0|                        let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, expr0_0)?;
12894|      0|                        let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
12895|      0|                        let expr3_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
12896|      0|                        let expr4_0 = constructor_x64_movrm(ctx, pattern6_0, &expr2_0, expr3_0)?;
12897|      0|                        let expr5_0 = constructor_x64_mfence(ctx, )?;
12898|      0|                        let expr6_0 = constructor_side_effect_concat(ctx, &expr4_0, &expr5_0)?;
12899|      0|                        let expr7_0 = constructor_side_effect(ctx, &expr6_0)?;
12900|      0|                        return Some(expr7_0);
12901|      0|                    }
12902|      0|                }
12903|      0|            }
12904|       |        }
12905|  18.8k|        &InstructionData::Store { opcode: ref pattern2_0, args: ref pattern2_1, flags: pattern2_2, offset: pattern2_3 } => {
12906|  18.8k|            match pattern2_0 {
12907|       |                &Opcode::Store  => {
12908|  18.8k|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
12909|  18.8k|                    if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
12910|  18.8k|                        if let Some(pattern6_0) = C::first_result(ctx, pattern5_0) {
12911|  18.8k|                            let pattern7_0 = C::value_type(ctx, pattern6_0);
12912|  18.8k|                            if let Some(pattern8_0) = C::ty_32_or_64(ctx, pattern7_0) {
12913|  18.8k|                                let pattern9_0 = C::inst_data(ctx, pattern5_0);
12914|  18.8k|                                if let &InstructionData::Binary { opcode: ref pattern10_0, args: ref pattern10_1 } = &pattern9_0 {
12915|  14.2k|                                    match pattern10_0 {
12916|       |                                        &Opcode::Iadd  => {
12917|  9.72k|                                            let (pattern12_0, pattern12_1) = C::unpack_value_array_2(ctx, pattern10_1);
12918|  9.72k|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_0) {
12919|  4.86k|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_0) {
12920|  4.86k|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
12921|  4.86k|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
12922|  4.86k|                                                        if let &Opcode::Load  = pattern16_0 {
12923|  4.86k|                                                            if pattern4_1 == pattern16_1 {
12924|  4.86k|                                                                if pattern2_2 == pattern16_2 {
12925|  4.86k|                                                                    if pattern2_3 == pattern16_3 {
12926|       |                                                                        // Rule at src/isa/x64/lower.isle line 2640.
12927|  4.86k|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
12928|  4.86k|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
12929|  4.86k|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
12930|  4.86k|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_1)?;
12931|  4.86k|                                                                        let expr4_0 = constructor_x64_add_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
12932|  4.86k|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
12933|  4.86k|                                                                        return Some(expr5_0);
12934|      0|                                                                    }
12935|      0|                                                                }
12936|      0|                                                            }
12937|      0|                                                        }
12938|      0|                                                    }
12939|      0|                                                }
12940|  4.86k|                                            }
12941|  4.86k|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_1) {
12942|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_1) {
12943|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
12944|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
12945|      0|                                                        if let &Opcode::Load  = pattern16_0 {
12946|      0|                                                            if pattern4_1 == pattern16_1 {
12947|      0|                                                                if pattern2_2 == pattern16_2 {
12948|      0|                                                                    if pattern2_3 == pattern16_3 {
12949|       |                                                                        // Rule at src/isa/x64/lower.isle line 2654.
12950|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
12951|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
12952|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
12953|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_0)?;
12954|      0|                                                                        let expr4_0 = constructor_x64_add_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
12955|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
12956|      0|                                                                        return Some(expr5_0);
12957|      0|                                                                    }
12958|      0|                                                                }
12959|      0|                                                            }
12960|      0|                                                        }
12961|      0|                                                    }
12962|      0|                                                }
12963|  4.86k|                                            }
12964|       |                                        }
12965|       |                                        &Opcode::Isub  => {
12966|  4.56k|                                            let (pattern12_0, pattern12_1) = C::unpack_value_array_2(ctx, pattern10_1);
12967|  4.56k|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_0) {
12968|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_0) {
12969|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
12970|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
12971|      0|                                                        if let &Opcode::Load  = pattern16_0 {
12972|      0|                                                            if pattern4_1 == pattern16_1 {
12973|      0|                                                                if pattern2_2 == pattern16_2 {
12974|      0|                                                                    if pattern2_3 == pattern16_3 {
12975|       |                                                                        // Rule at src/isa/x64/lower.isle line 2668.
12976|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
12977|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
12978|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
12979|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_1)?;
12980|      0|                                                                        let expr4_0 = constructor_x64_sub_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
12981|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
12982|      0|                                                                        return Some(expr5_0);
12983|      0|                                                                    }
12984|      0|                                                                }
12985|      0|                                                            }
12986|      0|                                                        }
12987|      0|                                                    }
12988|      0|                                                }
12989|  4.56k|                                            }
12990|       |                                        }
12991|       |                                        &Opcode::Band  => {
12992|      0|                                            let (pattern12_0, pattern12_1) = C::unpack_value_array_2(ctx, pattern10_1);
12993|      0|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_0) {
12994|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_0) {
12995|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
12996|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
12997|      0|                                                        if let &Opcode::Load  = pattern16_0 {
12998|      0|                                                            if pattern4_1 == pattern16_1 {
12999|      0|                                                                if pattern2_2 == pattern16_2 {
13000|      0|                                                                    if pattern2_3 == pattern16_3 {
13001|       |                                                                        // Rule at src/isa/x64/lower.isle line 2682.
13002|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
13003|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
13004|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
13005|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_1)?;
13006|      0|                                                                        let expr4_0 = constructor_x64_and_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
13007|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13008|      0|                                                                        return Some(expr5_0);
13009|      0|                                                                    }
13010|      0|                                                                }
13011|      0|                                                            }
13012|      0|                                                        }
13013|      0|                                                    }
13014|      0|                                                }
13015|      0|                                            }
13016|      0|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_1) {
13017|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_1) {
13018|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
13019|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
13020|      0|                                                        if let &Opcode::Load  = pattern16_0 {
13021|      0|                                                            if pattern4_1 == pattern16_1 {
13022|      0|                                                                if pattern2_2 == pattern16_2 {
13023|      0|                                                                    if pattern2_3 == pattern16_3 {
13024|       |                                                                        // Rule at src/isa/x64/lower.isle line 2696.
13025|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
13026|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
13027|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
13028|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_0)?;
13029|      0|                                                                        let expr4_0 = constructor_x64_and_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
13030|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13031|      0|                                                                        return Some(expr5_0);
13032|      0|                                                                    }
13033|      0|                                                                }
13034|      0|                                                            }
13035|      0|                                                        }
13036|      0|                                                    }
13037|      0|                                                }
13038|      0|                                            }
13039|       |                                        }
13040|       |                                        &Opcode::Bor  => {
13041|      0|                                            let (pattern12_0, pattern12_1) = C::unpack_value_array_2(ctx, pattern10_1);
13042|      0|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_0) {
13043|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_0) {
13044|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
13045|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
13046|      0|                                                        if let &Opcode::Load  = pattern16_0 {
13047|      0|                                                            if pattern4_1 == pattern16_1 {
13048|      0|                                                                if pattern2_2 == pattern16_2 {
13049|      0|                                                                    if pattern2_3 == pattern16_3 {
13050|       |                                                                        // Rule at src/isa/x64/lower.isle line 2710.
13051|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
13052|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
13053|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
13054|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_1)?;
13055|      0|                                                                        let expr4_0 = constructor_x64_or_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
13056|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13057|      0|                                                                        return Some(expr5_0);
13058|      0|                                                                    }
13059|      0|                                                                }
13060|      0|                                                            }
13061|      0|                                                        }
13062|      0|                                                    }
13063|      0|                                                }
13064|      0|                                            }
13065|      0|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_1) {
13066|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_1) {
13067|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
13068|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
13069|      0|                                                        if let &Opcode::Load  = pattern16_0 {
13070|      0|                                                            if pattern4_1 == pattern16_1 {
13071|      0|                                                                if pattern2_2 == pattern16_2 {
13072|      0|                                                                    if pattern2_3 == pattern16_3 {
13073|       |                                                                        // Rule at src/isa/x64/lower.isle line 2724.
13074|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
13075|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
13076|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
13077|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_0)?;
13078|      0|                                                                        let expr4_0 = constructor_x64_or_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
13079|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13080|      0|                                                                        return Some(expr5_0);
13081|      0|                                                                    }
13082|      0|                                                                }
13083|      0|                                                            }
13084|      0|                                                        }
13085|      0|                                                    }
13086|      0|                                                }
13087|      0|                                            }
13088|       |                                        }
13089|       |                                        &Opcode::Bxor  => {
13090|      0|                                            let (pattern12_0, pattern12_1) = C::unpack_value_array_2(ctx, pattern10_1);
13091|      0|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_0) {
13092|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_0) {
13093|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
13094|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
13095|      0|                                                        if let &Opcode::Load  = pattern16_0 {
13096|      0|                                                            if pattern4_1 == pattern16_1 {
13097|      0|                                                                if pattern2_2 == pattern16_2 {
13098|      0|                                                                    if pattern2_3 == pattern16_3 {
13099|       |                                                                        // Rule at src/isa/x64/lower.isle line 2738.
13100|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
13101|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
13102|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
13103|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_1)?;
13104|      0|                                                                        let expr4_0 = constructor_x64_xor_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
13105|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13106|      0|                                                                        return Some(expr5_0);
13107|      0|                                                                    }
13108|      0|                                                                }
13109|      0|                                                            }
13110|      0|                                                        }
13111|      0|                                                    }
13112|      0|                                                }
13113|      0|                                            }
13114|      0|                                            if let Some(pattern13_0) = C::sinkable_load(ctx, pattern12_1) {
13115|      0|                                                if let Some(pattern14_0) = C::def_inst(ctx, pattern12_1) {
13116|      0|                                                    let pattern15_0 = C::inst_data(ctx, pattern14_0);
13117|      0|                                                    if let &InstructionData::Load { opcode: ref pattern16_0, arg: pattern16_1, flags: pattern16_2, offset: pattern16_3 } = &pattern15_0 {
13118|      0|                                                        if let &Opcode::Load  = pattern16_0 {
13119|      0|                                                            if pattern4_1 == pattern16_1 {
13120|      0|                                                                if pattern2_2 == pattern16_2 {
13121|      0|                                                                    if pattern2_3 == pattern16_3 {
13122|       |                                                                        // Rule at src/isa/x64/lower.isle line 2752.
13123|      0|                                                                        let expr0_0 = C::sink_load(ctx, &pattern13_0);
13124|      0|                                                                        let expr1_0 = constructor_reg_mem_to_reg_mem_imm(ctx, &expr0_0)?;
13125|      0|                                                                        let expr2_0 = constructor_to_amode(ctx, pattern16_2, pattern16_1, pattern16_3)?;
13126|      0|                                                                        let expr3_0 = constructor_put_in_gpr(ctx, pattern12_0)?;
13127|      0|                                                                        let expr4_0 = constructor_x64_xor_mem(ctx, pattern8_0, &expr2_0, expr3_0)?;
13128|      0|                                                                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13129|      0|                                                                        return Some(expr5_0);
13130|      0|                                                                    }
13131|      0|                                                                }
13132|      0|                                                            }
13133|      0|                                                        }
13134|      0|                                                    }
13135|      0|                                                }
13136|      0|                                            }
13137|       |                                        }
13138|      0|                                        _ => {}
13139|       |                                    }
13140|  4.57k|                                }
13141|      0|                            }
13142|      0|                        }
13143|      0|                    }
13144|  13.9k|                    let pattern5_0 = C::value_type(ctx, pattern4_0);
13145|  13.9k|                    if pattern5_0 == F32 {
13146|       |                        // Rule at src/isa/x64/lower.isle line 2583.
13147|      0|                        let expr0_0 = SseOpcode::Movss;
13148|      0|                        let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13149|      0|                        let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13150|      0|                        let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13151|      0|                        let expr4_0 = constructor_x64_xmm_movrm(ctx, &expr0_0, &expr2_0, expr3_0)?;
13152|      0|                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13153|      0|                        return Some(expr5_0);
13154|  13.9k|                    }
13155|  13.9k|                    if pattern5_0 == F64 {
13156|       |                        // Rule at src/isa/x64/lower.isle line 2591.
13157|      4|                        let expr0_0 = SseOpcode::Movsd;
13158|      4|                        let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13159|      4|                        let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13160|      4|                        let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13161|      4|                        let expr4_0 = constructor_x64_xmm_movrm(ctx, &expr0_0, &expr2_0, expr3_0)?;
13162|      4|                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13163|      4|                        return Some(expr5_0);
13164|  13.9k|                    }
13165|  13.9k|                    if pattern5_0 == F32X4 {
13166|       |                        // Rule at src/isa/x64/lower.isle line 2599.
13167|      0|                        let expr0_0 = SseOpcode::Movups;
13168|      0|                        let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13169|      0|                        let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13170|      0|                        let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13171|      0|                        let expr4_0 = constructor_x64_xmm_movrm(ctx, &expr0_0, &expr2_0, expr3_0)?;
13172|      0|                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13173|      0|                        return Some(expr5_0);
13174|  13.9k|                    }
13175|  13.9k|                    if pattern5_0 == F64X2 {
13176|       |                        // Rule at src/isa/x64/lower.isle line 2607.
13177|      0|                        let expr0_0 = SseOpcode::Movupd;
13178|      0|                        let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13179|      0|                        let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13180|      0|                        let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13181|      0|                        let expr4_0 = constructor_x64_xmm_movrm(ctx, &expr0_0, &expr2_0, expr3_0)?;
13182|      0|                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13183|      0|                        return Some(expr5_0);
13184|  13.9k|                    }
13185|  13.9k|                    if let Some(pattern6_0) = C::ty_int_bool_128(ctx, pattern5_0) {
13186|       |                        // Rule at src/isa/x64/lower.isle line 2623.
13187|      0|                        let expr0_0 = C::put_in_regs(ctx, pattern4_0);
13188|      0|                        let expr1_0: usize = 0i128 as usize;
13189|      0|                        let expr2_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr1_0)?;
13190|      0|                        let expr3_0: usize = 1i128 as usize;
13191|      0|                        let expr4_0 = constructor_value_regs_get_gpr(ctx, expr0_0, expr3_0)?;
13192|      0|                        let expr5_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13193|      0|                        let expr6_0: u32 = 8i128 as u32;
13194|      0|                        let expr7_0 = C::amode_offset(ctx, &expr5_0, expr6_0);
13195|      0|                        let expr8_0: Type = I64;
13196|      0|                        let expr9_0 = C::amode_to_synthetic_amode(ctx, &expr5_0);
13197|      0|                        let expr10_0 = constructor_x64_movrm(ctx, expr8_0, &expr9_0, expr2_0)?;
13198|      0|                        let expr11_0: Type = I64;
13199|      0|                        let expr12_0 = C::amode_to_synthetic_amode(ctx, &expr7_0);
13200|      0|                        let expr13_0 = constructor_x64_movrm(ctx, expr11_0, &expr12_0, expr4_0)?;
13201|      0|                        let expr14_0 = constructor_side_effect_concat(ctx, &expr10_0, &expr13_0)?;
13202|      0|                        let expr15_0 = constructor_side_effect(ctx, &expr14_0)?;
13203|      0|                        return Some(expr15_0);
13204|  13.9k|                    }
13205|  13.9k|                    if let Some(pattern6_0) = C::ty_vec128_int(ctx, pattern5_0) {
13206|       |                        // Rule at src/isa/x64/lower.isle line 2615.
13207|      0|                        let expr0_0 = SseOpcode::Movdqu;
13208|      0|                        let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13209|      0|                        let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13210|      0|                        let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13211|      0|                        let expr4_0 = constructor_x64_xmm_movrm(ctx, &expr0_0, &expr2_0, expr3_0)?;
13212|      0|                        let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13213|      0|                        return Some(expr5_0);
13214|  13.9k|                    }
13215|  13.9k|                    if let Some(pattern6_0) = C::is_gpr_type(ctx, pattern5_0) {
13216|       |                        // Rule at src/isa/x64/lower.isle line 2564.
13217|  13.9k|                        let expr0_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13218|  13.9k|                        let expr1_0 = C::amode_to_synthetic_amode(ctx, &expr0_0);
13219|  13.9k|                        let expr2_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
13220|  13.9k|                        let expr3_0 = constructor_x64_movrm(ctx, pattern6_0, &expr1_0, expr2_0)?;
13221|  13.9k|                        let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
13222|  13.9k|                        return Some(expr4_0);
13223|      0|                    }
13224|       |                }
13225|       |                &Opcode::Istore8  => {
13226|      8|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
13227|      8|                    // Rule at src/isa/x64/lower.isle line 2572.
13228|      8|                    let expr0_0: Type = I8;
13229|      8|                    let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13230|      8|                    let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13231|      8|                    let expr3_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
13232|      8|                    let expr4_0 = constructor_x64_movrm(ctx, expr0_0, &expr2_0, expr3_0)?;
13233|      8|                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13234|      8|                    return Some(expr5_0);
13235|       |                }
13236|       |                &Opcode::Istore16  => {
13237|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
13238|      0|                    // Rule at src/isa/x64/lower.isle line 2575.
13239|      0|                    let expr0_0: Type = I16;
13240|      0|                    let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13241|      0|                    let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13242|      0|                    let expr3_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
13243|      0|                    let expr4_0 = constructor_x64_movrm(ctx, expr0_0, &expr2_0, expr3_0)?;
13244|      0|                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13245|      0|                    return Some(expr5_0);
13246|       |                }
13247|       |                &Opcode::Istore32  => {
13248|      0|                    let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
13249|      0|                    // Rule at src/isa/x64/lower.isle line 2578.
13250|      0|                    let expr0_0: Type = I32;
13251|      0|                    let expr1_0 = constructor_to_amode(ctx, pattern2_2, pattern4_1, pattern2_3)?;
13252|      0|                    let expr2_0 = C::amode_to_synthetic_amode(ctx, &expr1_0);
13253|      0|                    let expr3_0 = constructor_put_in_gpr(ctx, pattern4_0)?;
13254|      0|                    let expr4_0 = constructor_x64_movrm(ctx, expr0_0, &expr2_0, expr3_0)?;
13255|      0|                    let expr5_0 = constructor_side_effect(ctx, &expr4_0)?;
13256|      0|                    return Some(expr5_0);
13257|       |                }
13258|      0|                _ => {}
13259|       |            }
13260|       |        }
13261|      0|        &InstructionData::TernaryImm8 { opcode: ref pattern2_0, args: ref pattern2_1, imm: pattern2_2 } => {
13262|      0|            if let &Opcode::Insertlane  = pattern2_0 {
13263|      0|                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
13264|      0|                let pattern5_0 = C::value_type(ctx, pattern4_0);
13265|      0|                let pattern6_0 = C::u8_from_uimm8(ctx, pattern2_2);
13266|       |                // Rule at src/isa/x64/lower.isle line 1276.
13267|      0|                let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13268|      0|                let expr1_0 = C::put_in_reg_mem(ctx, pattern4_1);
13269|      0|                let expr2_0 = constructor_vec_insert_lane(ctx, pattern5_0, expr0_0, &expr1_0, pattern6_0)?;
13270|      0|                let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
13271|      0|                return Some(expr3_0);
13272|      0|            }
13273|       |        }
13274|      0|        &InstructionData::FloatCompare { opcode: ref pattern2_0, args: ref pattern2_1, cond: ref pattern2_2 } => {
13275|      0|            if let &Opcode::Fcmp  = pattern2_0 {
13276|      0|                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
13277|      0|                let pattern5_0 = C::value_type(ctx, pattern4_0);
13278|      0|                if let Some(pattern6_0) = C::ty_scalar_float(ctx, pattern5_0) {
13279|       |                    // Rule at src/isa/x64/lower.isle line 1574.
13280|      0|                    let expr0_0 = constructor_emit_fcmp(ctx, pattern2_2, pattern4_0, pattern4_1)?;
13281|      0|                    let expr1_0 = constructor_lower_fcmp_bool(ctx, &expr0_0)?;
13282|      0|                    let expr2_0 = C::output(ctx, expr1_0);
13283|      0|                    return Some(expr2_0);
13284|      0|                }
13285|      0|                if let Some(pattern6_0) = C::ty_vec128(ctx, pattern5_0) {
13286|      0|                    match pattern2_2 {
13287|       |                        &FloatCC::Equal  => {
13288|       |                            // Rule at src/isa/x64/lower.isle line 1581.
13289|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13290|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13291|      0|                            let expr2_0 = FcmpImm::Equal;
13292|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13293|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13294|      0|                            return Some(expr4_0);
13295|       |                        }
13296|       |                        &FloatCC::GreaterThan  => {
13297|       |                            // Rule at src/isa/x64/lower.isle line 1601.
13298|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13299|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_0);
13300|      0|                            let expr2_0 = FcmpImm::LessThan;
13301|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13302|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13303|      0|                            return Some(expr4_0);
13304|       |                        }
13305|       |                        &FloatCC::GreaterThanOrEqual  => {
13306|       |                            // Rule at src/isa/x64/lower.isle line 1603.
13307|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13308|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_0);
13309|      0|                            let expr2_0 = FcmpImm::LessThanOrEqual;
13310|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13311|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13312|      0|                            return Some(expr4_0);
13313|       |                        }
13314|       |                        &FloatCC::LessThan  => {
13315|       |                            // Rule at src/isa/x64/lower.isle line 1585.
13316|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13317|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13318|      0|                            let expr2_0 = FcmpImm::LessThan;
13319|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13320|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13321|      0|                            return Some(expr4_0);
13322|       |                        }
13323|       |                        &FloatCC::LessThanOrEqual  => {
13324|       |                            // Rule at src/isa/x64/lower.isle line 1587.
13325|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13326|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13327|      0|                            let expr2_0 = FcmpImm::LessThanOrEqual;
13328|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13329|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13330|      0|                            return Some(expr4_0);
13331|       |                        }
13332|       |                        &FloatCC::NotEqual  => {
13333|       |                            // Rule at src/isa/x64/lower.isle line 1583.
13334|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13335|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13336|      0|                            let expr2_0 = FcmpImm::NotEqual;
13337|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13338|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13339|      0|                            return Some(expr4_0);
13340|       |                        }
13341|       |                        &FloatCC::Ordered  => {
13342|       |                            // Rule at src/isa/x64/lower.isle line 1589.
13343|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13344|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13345|      0|                            let expr2_0 = FcmpImm::Ordered;
13346|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13347|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13348|      0|                            return Some(expr4_0);
13349|       |                        }
13350|       |                        &FloatCC::Unordered  => {
13351|       |                            // Rule at src/isa/x64/lower.isle line 1591.
13352|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13353|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13354|      0|                            let expr2_0 = FcmpImm::Unordered;
13355|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13356|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13357|      0|                            return Some(expr4_0);
13358|       |                        }
13359|       |                        &FloatCC::UnorderedOrGreaterThan  => {
13360|       |                            // Rule at src/isa/x64/lower.isle line 1593.
13361|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13362|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13363|      0|                            let expr2_0 = FcmpImm::UnorderedOrGreaterThan;
13364|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13365|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13366|      0|                            return Some(expr4_0);
13367|       |                        }
13368|       |                        &FloatCC::UnorderedOrGreaterThanOrEqual  => {
13369|       |                            // Rule at src/isa/x64/lower.isle line 1595.
13370|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13371|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13372|      0|                            let expr2_0 = FcmpImm::UnorderedOrGreaterThanOrEqual;
13373|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13374|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13375|      0|                            return Some(expr4_0);
13376|       |                        }
13377|       |                        &FloatCC::UnorderedOrLessThan  => {
13378|       |                            // Rule at src/isa/x64/lower.isle line 1605.
13379|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13380|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_0);
13381|      0|                            let expr2_0 = FcmpImm::UnorderedOrGreaterThan;
13382|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13383|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13384|      0|                            return Some(expr4_0);
13385|       |                        }
13386|       |                        &FloatCC::UnorderedOrLessThanOrEqual  => {
13387|       |                            // Rule at src/isa/x64/lower.isle line 1607.
13388|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13389|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_0);
13390|      0|                            let expr2_0 = FcmpImm::UnorderedOrGreaterThanOrEqual;
13391|      0|                            let expr3_0 = constructor_x64_cmpp(ctx, pattern6_0, expr0_0, &expr1_0, &expr2_0)?;
13392|      0|                            let expr4_0 = constructor_output_xmm(ctx, expr3_0)?;
13393|      0|                            return Some(expr4_0);
13394|       |                        }
13395|      0|                        _ => {}
13396|       |                    }
13397|      0|                }
13398|      0|            }
13399|       |        }
13400|    156|        &InstructionData::IntCompare { opcode: ref pattern2_0, args: ref pattern2_1, cond: ref pattern2_2 } => {
13401|    156|            if let &Opcode::Icmp  = pattern2_0 {
13402|    156|                let (pattern4_0, pattern4_1) = C::unpack_value_array_2(ctx, pattern2_1);
13403|    156|                let pattern5_0 = C::value_type(ctx, pattern4_0);
13404|    156|                if pattern5_0 == I128 {
13405|       |                    // Rule at src/isa/x64/lower.isle line 1449.
13406|      0|                    let expr0_0 = constructor_emit_cmp(ctx, pattern2_2, pattern4_0, pattern4_1)?;
13407|      0|                    let expr1_0 = constructor_lower_icmp_bool(ctx, &expr0_0)?;
13408|      0|                    let expr2_0 = C::output(ctx, expr1_0);
13409|      0|                    return Some(expr2_0);
13410|    156|                }
13411|    156|                if pattern5_0 == I64X2 {
13412|      0|                    match pattern2_2 {
13413|       |                        &IntCC::SignedGreaterThanOrEqual  => {
13414|       |                            // Rule at src/isa/x64/lower.isle line 1541.
13415|      0|                            let expr0_0: Type = I64X2;
13416|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13417|      0|                            let expr2_0 = C::put_in_xmm_mem(ctx, pattern4_0);
13418|      0|                            let expr3_0 = constructor_x64_pcmpgt(ctx, expr0_0, expr1_0, &expr2_0)?;
13419|      0|                            let expr4_0 = constructor_vector_all_ones(ctx, )?;
13420|      0|                            let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
13421|      0|                            let expr6_0 = constructor_x64_pxor(ctx, expr3_0, &expr5_0)?;
13422|      0|                            let expr7_0 = constructor_output_xmm(ctx, expr6_0)?;
13423|      0|                            return Some(expr7_0);
13424|       |                        }
13425|       |                        &IntCC::SignedLessThanOrEqual  => {
13426|       |                            // Rule at src/isa/x64/lower.isle line 1545.
13427|      0|                            let expr0_0: Type = I64X2;
13428|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13429|      0|                            let expr2_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13430|      0|                            let expr3_0 = constructor_x64_pcmpgt(ctx, expr0_0, expr1_0, &expr2_0)?;
13431|      0|                            let expr4_0 = constructor_vector_all_ones(ctx, )?;
13432|      0|                            let expr5_0 = C::xmm_to_xmm_mem(ctx, expr4_0);
13433|      0|                            let expr6_0 = constructor_x64_pxor(ctx, expr3_0, &expr5_0)?;
13434|      0|                            let expr7_0 = constructor_output_xmm(ctx, expr6_0)?;
13435|      0|                            return Some(expr7_0);
13436|       |                        }
13437|      0|                        _ => {}
13438|       |                    }
13439|    156|                }
13440|    156|                if let Some(pattern6_0) = C::fits_in_64(ctx, pattern5_0) {
13441|       |                    // Rule at src/isa/x64/lower.isle line 1446.
13442|    156|                    let expr0_0 = constructor_emit_cmp(ctx, pattern2_2, pattern4_0, pattern4_1)?;
13443|    156|                    let expr1_0 = constructor_lower_icmp_bool(ctx, &expr0_0)?;
13444|    156|                    let expr2_0 = C::output(ctx, expr1_0);
13445|    156|                    return Some(expr2_0);
13446|      0|                }
13447|      0|                if let Some(pattern6_0) = C::ty_vec128(ctx, pattern5_0) {
13448|      0|                    match pattern2_2 {
13449|       |                        &IntCC::Equal  => {
13450|       |                            // Rule at src/isa/x64/lower.isle line 1489.
13451|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13452|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13453|      0|                            let expr2_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr0_0, &expr1_0)?;
13454|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
13455|      0|                            return Some(expr3_0);
13456|       |                        }
13457|       |                        &IntCC::NotEqual  => {
13458|       |                            // Rule at src/isa/x64/lower.isle line 1494.
13459|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13460|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13461|      0|                            let expr2_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr0_0, &expr1_0)?;
13462|      0|                            let expr3_0 = constructor_vector_all_ones(ctx, )?;
13463|      0|                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr3_0);
13464|      0|                            let expr5_0 = constructor_x64_pxor(ctx, expr2_0, &expr4_0)?;
13465|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
13466|      0|                            return Some(expr6_0);
13467|       |                        }
13468|       |                        &IntCC::SignedGreaterThan  => {
13469|       |                            // Rule at src/isa/x64/lower.isle line 1501.
13470|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13471|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13472|      0|                            let expr2_0 = constructor_x64_pcmpgt(ctx, pattern6_0, expr0_0, &expr1_0)?;
13473|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
13474|      0|                            return Some(expr3_0);
13475|       |                        }
13476|       |                        &IntCC::SignedGreaterThanOrEqual  => {
13477|       |                            // Rule at src/isa/x64/lower.isle line 1526.
13478|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13479|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13480|      0|                            let expr2_0 = constructor_x64_pmaxs(ctx, pattern6_0, expr0_0, &expr1_0)?;
13481|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13482|      0|                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
13483|      0|                            let expr5_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr3_0, &expr4_0)?;
13484|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
13485|      0|                            return Some(expr6_0);
13486|       |                        }
13487|       |                        &IntCC::SignedLessThan  => {
13488|       |                            // Rule at src/isa/x64/lower.isle line 1503.
13489|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13490|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_0);
13491|      0|                            let expr2_0 = constructor_x64_pcmpgt(ctx, pattern6_0, expr0_0, &expr1_0)?;
13492|      0|                            let expr3_0 = constructor_output_xmm(ctx, expr2_0)?;
13493|      0|                            return Some(expr3_0);
13494|       |                        }
13495|       |                        &IntCC::SignedLessThanOrEqual  => {
13496|       |                            // Rule at src/isa/x64/lower.isle line 1529.
13497|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13498|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13499|      0|                            let expr2_0 = constructor_x64_pmins(ctx, pattern6_0, expr0_0, &expr1_0)?;
13500|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13501|      0|                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
13502|      0|                            let expr5_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr3_0, &expr4_0)?;
13503|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
13504|      0|                            return Some(expr6_0);
13505|       |                        }
13506|       |                        &IntCC::UnsignedGreaterThan  => {
13507|       |                            // Rule at src/isa/x64/lower.isle line 1505.
13508|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13509|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13510|      0|                            let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
13511|      0|                            let expr3_0 = constructor_x64_pmaxu(ctx, pattern6_0, expr0_0, &expr2_0)?;
13512|      0|                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
13513|      0|                            let expr5_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr3_0, &expr4_0)?;
13514|      0|                            let expr6_0 = constructor_vector_all_ones(ctx, )?;
13515|      0|                            let expr7_0 = C::xmm_to_xmm_mem(ctx, expr6_0);
13516|      0|                            let expr8_0 = constructor_x64_pxor(ctx, expr5_0, &expr7_0)?;
13517|      0|                            let expr9_0 = constructor_output_xmm(ctx, expr8_0)?;
13518|      0|                            return Some(expr9_0);
13519|       |                        }
13520|       |                        &IntCC::UnsignedGreaterThanOrEqual  => {
13521|       |                            // Rule at src/isa/x64/lower.isle line 1532.
13522|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13523|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13524|      0|                            let expr2_0 = constructor_x64_pmaxu(ctx, pattern6_0, expr0_0, &expr1_0)?;
13525|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13526|      0|                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
13527|      0|                            let expr5_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr3_0, &expr4_0)?;
13528|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
13529|      0|                            return Some(expr6_0);
13530|       |                        }
13531|       |                        &IntCC::UnsignedLessThan  => {
13532|       |                            // Rule at src/isa/x64/lower.isle line 1515.
13533|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13534|      0|                            let expr1_0 = constructor_put_in_xmm(ctx, pattern4_1)?;
13535|      0|                            let expr2_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
13536|      0|                            let expr3_0 = constructor_x64_pminu(ctx, pattern6_0, expr0_0, &expr2_0)?;
13537|      0|                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr1_0);
13538|      0|                            let expr5_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr3_0, &expr4_0)?;
13539|      0|                            let expr6_0 = constructor_vector_all_ones(ctx, )?;
13540|      0|                            let expr7_0 = C::xmm_to_xmm_mem(ctx, expr6_0);
13541|      0|                            let expr8_0 = constructor_x64_pxor(ctx, expr5_0, &expr7_0)?;
13542|      0|                            let expr9_0 = constructor_output_xmm(ctx, expr8_0)?;
13543|      0|                            return Some(expr9_0);
13544|       |                        }
13545|       |                        &IntCC::UnsignedLessThanOrEqual  => {
13546|       |                            // Rule at src/isa/x64/lower.isle line 1535.
13547|      0|                            let expr0_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13548|      0|                            let expr1_0 = C::put_in_xmm_mem(ctx, pattern4_1);
13549|      0|                            let expr2_0 = constructor_x64_pminu(ctx, pattern6_0, expr0_0, &expr1_0)?;
13550|      0|                            let expr3_0 = constructor_put_in_xmm(ctx, pattern4_0)?;
13551|      0|                            let expr4_0 = C::xmm_to_xmm_mem(ctx, expr2_0);
13552|      0|                            let expr5_0 = constructor_x64_pcmpeq(ctx, pattern6_0, expr3_0, &expr4_0)?;
13553|      0|                            let expr6_0 = constructor_output_xmm(ctx, expr5_0)?;
13554|      0|                            return Some(expr6_0);
13555|       |                        }
13556|      0|                        _ => {}
13557|       |                    }
13558|      0|                }
13559|      0|            }
13560|       |        }
13561|     28|        &InstructionData::IntSelect { opcode: ref pattern2_0, args: ref pattern2_1, cond: ref pattern2_2 } => {
13562|     28|            match pattern2_0 {
13563|       |                &Opcode::Selectif  => {
13564|      0|                    let (pattern4_0, pattern4_1, pattern4_2) = C::unpack_value_array_3(ctx, pattern2_1);
13565|      0|                    if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
13566|      0|                        let pattern6_0 = C::inst_data(ctx, pattern5_0);
13567|      0|                        if let &InstructionData::Binary { opcode: ref pattern7_0, args: ref pattern7_1 } = &pattern6_0 {
13568|      0|                            if let &Opcode::Ifcmp  = pattern7_0 {
13569|      0|                                let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
13570|       |                                // Rule at src/isa/x64/lower.isle line 2936.
13571|      0|                                let expr0_0 = constructor_emit_cmp(ctx, pattern2_2, pattern9_0, pattern9_1)?;
13572|      0|                                let expr1_0 = constructor_select_icmp(ctx, &expr0_0, pattern4_1, pattern4_2)?;
13573|      0|                                let expr2_0 = C::output(ctx, expr1_0);
13574|      0|                                return Some(expr2_0);
13575|      0|                            }
13576|      0|                        }
13577|      0|                    }
13578|       |                }
13579|       |                &Opcode::SelectifSpectreGuard  => {
13580|     28|                    let (pattern4_0, pattern4_1, pattern4_2) = C::unpack_value_array_3(ctx, pattern2_1);
13581|     28|                    if let Some(pattern5_0) = C::def_inst(ctx, pattern4_0) {
13582|     28|                        let pattern6_0 = C::inst_data(ctx, pattern5_0);
13583|     28|                        if let &InstructionData::Binary { opcode: ref pattern7_0, args: ref pattern7_1 } = &pattern6_0 {
13584|     28|                            if let &Opcode::Ifcmp  = pattern7_0 {
13585|     28|                                let (pattern9_0, pattern9_1) = C::unpack_value_array_2(ctx, pattern7_1);
13586|       |                                // Rule at src/isa/x64/lower.isle line 2939.
13587|     28|                                let expr0_0 = constructor_emit_cmp(ctx, pattern2_2, pattern9_0, pattern9_1)?;
13588|     28|                                let expr1_0 = constructor_select_icmp(ctx, &expr0_0, pattern4_1, pattern4_2)?;
13589|     28|                                let expr2_0 = C::output(ctx, expr1_0);
13590|     28|                                return Some(expr2_0);
13591|      0|                            }
13592|      0|                        }
13593|      0|                    }
13594|       |                }
13595|      0|                _ => {}
13596|       |            }
13597|       |        }
13598|      0|        _ => {}
13599|       |    }
13600|      0|    return None;
13601|   158k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code30constructor_bitcast_gpr_to_xmmINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6746|     14|pub fn constructor_bitcast_gpr_to_xmm<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr) -> Option<Xmm> {
 6747|     14|    let pattern0_0 = arg0;
 6748|     14|    if pattern0_0 == I32 {
 6749|      2|        let pattern2_0 = arg1;
 6750|      2|        // Rule at src/isa/x64/inst.isle line 3653.
 6751|      2|        let expr0_0 = SseOpcode::Movd;
 6752|      2|        let expr1_0 = C::gpr_to_gpr_mem(ctx, pattern2_0);
 6753|      2|        let expr2_0 = OperandSize::Size32;
 6754|      2|        let expr3_0 = constructor_gpr_to_xmm(ctx, &expr0_0, &expr1_0, &expr2_0)?;
 6755|      2|        return Some(expr3_0);
 6756|     12|    }
 6757|     12|    if pattern0_0 == I64 {
 6758|     12|        let pattern2_0 = arg1;
 6759|     12|        // Rule at src/isa/x64/inst.isle line 3655.
 6760|     12|        let expr0_0 = SseOpcode::Movq;
 6761|     12|        let expr1_0 = C::gpr_to_gpr_mem(ctx, pattern2_0);
 6762|     12|        let expr2_0 = OperandSize::Size64;
 6763|     12|        let expr3_0 = constructor_gpr_to_xmm(ctx, &expr0_0, &expr1_0, &expr2_0)?;
 6764|     12|        return Some(expr3_0);
 6765|      0|    }
 6766|      0|    return None;
 6767|     14|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code30constructor_value_regs_get_gprINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1753|    342|pub fn constructor_value_regs_get_gpr<C: Context>(ctx: &mut C, arg0: ValueRegs, arg1: usize) -> Option<Gpr> {
 1754|    342|    let pattern0_0 = arg0;
 1755|    342|    let pattern1_0 = arg1;
 1756|    342|    // Rule at src/isa/x64/inst.isle line 1338.
 1757|    342|    let expr0_0 = C::value_regs_get(ctx, pattern0_0, pattern1_0);
 1758|    342|    let expr1_0 = C::gpr_new(ctx, expr0_0);
 1759|    342|    return Some(expr1_0);
 1760|    342|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code26constructor_amode_finalizeINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 1618|  38.2k|pub fn constructor_amode_finalize<C: Context>(ctx: &mut C, arg0: &Amode) -> Option<Amode> {
 1619|  38.2k|    let pattern0_0 = arg0;
 1620|  38.2k|    if let &Amode::ImmReg { simm32: pattern1_0, base: pattern1_1, flags: pattern1_2 } = pattern0_0 {
 1621|  37.9k|        if let Some(()) = C::invalid_reg_etor(ctx, pattern1_1) {
 1622|       |            // Rule at src/isa/x64/inst.isle line 1029.
 1623|  18.4E|            let expr0_0: Type = I64;
 1624|  18.4E|            let expr1_0: u64 = 0i128 as u64;
 1625|  18.4E|            let expr2_0 = constructor_imm(ctx, expr0_0, expr1_0)?;
 1626|      0|            let expr3_0 = Amode::ImmReg {
 1627|      0|                simm32: pattern1_0,
 1628|      0|                base: expr2_0,
 1629|      0|                flags: pattern1_2,
 1630|      0|            };
 1631|      0|            return Some(expr3_0);
 1632|  37.9k|        }
 1633|    248|    }
 1634|  38.2k|    let pattern0_0 = arg0;
 1635|  38.2k|    // Rule at src/isa/x64/inst.isle line 1031.
 1636|  38.2k|    return Some(pattern0_0.clone());
 1637|  38.2k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code24constructor_lower_branchINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
13604|  55.7k|pub fn constructor_lower_branch<C: Context>(ctx: &mut C, arg0: Inst, arg1: &MachLabelSlice) -> Option<InstOutput> {
13605|  55.7k|    let pattern0_0 = arg0;
13606|  55.7k|    let pattern1_0 = C::inst_data(ctx, pattern0_0);
13607|  55.7k|    match &pattern1_0 {
13608|      2|        &InstructionData::BranchTable { opcode: ref pattern2_0, arg: pattern2_1, destination: pattern2_2, table: pattern2_3 } => {
13609|      2|            if let &Opcode::BrTable  = pattern2_0 {
13610|      2|                let pattern4_0 = C::value_type(ctx, pattern2_1);
13611|      2|                let pattern5_0 = arg1;
13612|      2|                if let Some((pattern6_0, pattern6_1)) = C::jump_table_targets(ctx, pattern5_0) {
13613|       |                    // Rule at src/isa/x64/lower.isle line 2931.
13614|      2|                    let expr0_0 = constructor_put_in_gpr(ctx, pattern2_1)?;
13615|      2|                    let expr1_0 = constructor_jmp_table_seq(ctx, pattern4_0, expr0_0, pattern6_0, &pattern6_1)?;
13616|      2|                    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
13617|      2|                    return Some(expr2_0);
13618|      0|                }
13619|      0|            }
13620|       |        }
13621|  9.46k|        &InstructionData::Branch { opcode: ref pattern2_0, args: pattern2_1, destination: pattern2_2 } => {
13622|  9.46k|            match pattern2_0 {
13623|       |                &Opcode::Brz  => {
13624|  9.46k|                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
13625|  9.46k|                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
13626|  9.46k|                        if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
13627|  9.46k|                            let pattern7_0 = C::inst_data(ctx, pattern6_0);
13628|  9.46k|                            match &pattern7_0 {
13629|      0|                                &InstructionData::FloatCompare { opcode: ref pattern8_0, args: ref pattern8_1, cond: ref pattern8_2 } => {
13630|      0|                                    if let &Opcode::Fcmp  = pattern8_0 {
13631|      0|                                        let (pattern10_0, pattern10_1) = C::unpack_value_array_2(ctx, pattern8_1);
13632|      0|                                        let pattern11_0 = arg1;
13633|      0|                                        if let Some((pattern12_0, pattern12_1)) = C::two_targets(ctx, pattern11_0) {
13634|       |                                            // Rule at src/isa/x64/lower.isle line 2870.
13635|      0|                                            let expr0_0 = C::floatcc_inverse(ctx, pattern8_2);
13636|      0|                                            let expr1_0 = constructor_emit_fcmp(ctx, &expr0_0, pattern10_0, pattern10_1)?;
13637|      0|                                            let expr2_0 = constructor_jmp_cond_fcmp(ctx, &expr1_0, pattern12_0, pattern12_1)?;
13638|      0|                                            let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
13639|      0|                                            return Some(expr3_0);
13640|      0|                                        }
13641|      0|                                    }
13642|       |                                }
13643|  9.45k|                                &InstructionData::IntCompare { opcode: ref pattern8_0, args: ref pattern8_1, cond: ref pattern8_2 } => {
13644|  9.45k|                                    if let &Opcode::Icmp  = pattern8_0 {
13645|  9.45k|                                        let (pattern10_0, pattern10_1) = C::unpack_value_array_2(ctx, pattern8_1);
13646|  9.45k|                                        let pattern11_0 = arg1;
13647|  9.45k|                                        if let Some((pattern12_0, pattern12_1)) = C::two_targets(ctx, pattern11_0) {
13648|       |                                            // Rule at src/isa/x64/lower.isle line 2866.
13649|  9.45k|                                            let expr0_0 = constructor_emit_cmp(ctx, pattern8_2, pattern10_0, pattern10_1)?;
13650|  9.45k|                                            let expr1_0 = constructor_invert_icmp_cond_result(ctx, &expr0_0)?;
13651|  9.45k|                                            let expr2_0 = constructor_jmp_cond_icmp(ctx, &expr1_0, pattern12_0, pattern12_1)?;
13652|  9.45k|                                            let expr3_0 = constructor_side_effect(ctx, &expr2_0)?;
13653|  9.45k|                                            return Some(expr3_0);
13654|      0|                                        }
13655|      0|                                    }
13656|       |                                }
13657|      4|                                _ => {}
13658|       |                            }
13659|      0|                        }
13660|      4|                        let pattern6_0 = C::value_type(ctx, pattern5_0);
13661|      4|                        if pattern6_0 == I128 {
13662|      0|                            let pattern8_0 = arg1;
13663|      0|                            if let Some((pattern9_0, pattern9_1)) = C::two_targets(ctx, pattern8_0) {
13664|       |                                // Rule at src/isa/x64/lower.isle line 2874.
13665|      0|                                let expr0_0 = CC::NZ;
13666|      0|                                let expr1_0 = C::put_in_regs(ctx, pattern5_0);
13667|      0|                                let expr2_0 = constructor_cmp_zero_i128(ctx, &expr0_0, expr1_0)?;
13668|      0|                                let expr3_0 = constructor_jmp_cond_icmp(ctx, &expr2_0, pattern9_0, pattern9_1)?;
13669|      0|                                let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
13670|      0|                                return Some(expr4_0);
13671|      0|                            }
13672|      4|                        }
13673|      4|                        if let Some(()) = C::ty_int_bool_or_ref(ctx, pattern6_0) {
13674|      4|                            let pattern8_0 = arg1;
13675|      4|                            if let Some((pattern9_0, pattern9_1)) = C::two_targets(ctx, pattern8_0) {
13676|       |                                // Rule at src/isa/x64/lower.isle line 2877.
13677|      4|                                let expr0_0 = constructor_cmp_zero_int_bool_ref(ctx, pattern5_0)?;
13678|      4|                                let expr1_0 = CC::Z;
13679|      4|                                let expr2_0 = constructor_jmp_cond(ctx, &expr1_0, pattern9_0, pattern9_1)?;
13680|      4|                                let expr3_0 = constructor_with_flags_side_effect(ctx, &expr0_0, &expr2_0)?;
13681|      4|                                let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
13682|      4|                                return Some(expr4_0);
13683|      0|                            }
13684|      0|                        }
13685|      0|                    }
13686|       |                }
13687|       |                &Opcode::Brnz  => {
13688|      2|                    let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
13689|      2|                    if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
13690|      2|                        if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
13691|      2|                            let pattern7_0 = C::inst_data(ctx, pattern6_0);
13692|      2|                            match &pattern7_0 {
13693|      0|                                &InstructionData::FloatCompare { opcode: ref pattern8_0, args: ref pattern8_1, cond: ref pattern8_2 } => {
13694|      0|                                    if let &Opcode::Fcmp  = pattern8_0 {
13695|      0|                                        let (pattern10_0, pattern10_1) = C::unpack_value_array_2(ctx, pattern8_1);
13696|      0|                                        let pattern11_0 = arg1;
13697|      0|                                        if let Some((pattern12_0, pattern12_1)) = C::two_targets(ctx, pattern11_0) {
13698|       |                                            // Rule at src/isa/x64/lower.isle line 2886.
13699|      0|                                            let expr0_0 = constructor_emit_fcmp(ctx, pattern8_2, pattern10_0, pattern10_1)?;
13700|      0|                                            let expr1_0 = constructor_jmp_cond_fcmp(ctx, &expr0_0, pattern12_0, pattern12_1)?;
13701|      0|                                            let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
13702|      0|                                            return Some(expr2_0);
13703|      0|                                        }
13704|      0|                                    }
13705|       |                                }
13706|      0|                                &InstructionData::IntCompare { opcode: ref pattern8_0, args: ref pattern8_1, cond: ref pattern8_2 } => {
13707|      0|                                    if let &Opcode::Icmp  = pattern8_0 {
13708|      0|                                        let (pattern10_0, pattern10_1) = C::unpack_value_array_2(ctx, pattern8_1);
13709|      0|                                        let pattern11_0 = arg1;
13710|      0|                                        if let Some((pattern12_0, pattern12_1)) = C::two_targets(ctx, pattern11_0) {
13711|       |                                            // Rule at src/isa/x64/lower.isle line 2883.
13712|      0|                                            let expr0_0 = constructor_emit_cmp(ctx, pattern8_2, pattern10_0, pattern10_1)?;
13713|      0|                                            let expr1_0 = constructor_jmp_cond_icmp(ctx, &expr0_0, pattern12_0, pattern12_1)?;
13714|      0|                                            let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
13715|      0|                                            return Some(expr2_0);
13716|      0|                                        }
13717|      0|                                    }
13718|       |                                }
13719|      2|                                _ => {}
13720|       |                            }
13721|      0|                        }
13722|      2|                        let pattern6_0 = C::value_type(ctx, pattern5_0);
13723|      2|                        if pattern6_0 == I128 {
13724|      0|                            let pattern8_0 = arg1;
13725|      0|                            if let Some((pattern9_0, pattern9_1)) = C::two_targets(ctx, pattern8_0) {
13726|       |                                // Rule at src/isa/x64/lower.isle line 2890.
13727|      0|                                let expr0_0 = CC::Z;
13728|      0|                                let expr1_0 = C::put_in_regs(ctx, pattern5_0);
13729|      0|                                let expr2_0 = constructor_cmp_zero_i128(ctx, &expr0_0, expr1_0)?;
13730|      0|                                let expr3_0 = constructor_jmp_cond_icmp(ctx, &expr2_0, pattern9_0, pattern9_1)?;
13731|      0|                                let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
13732|      0|                                return Some(expr4_0);
13733|      0|                            }
13734|      2|                        }
13735|      2|                        if let Some(()) = C::ty_int_bool_or_ref(ctx, pattern6_0) {
13736|      2|                            let pattern8_0 = arg1;
13737|      2|                            if let Some((pattern9_0, pattern9_1)) = C::two_targets(ctx, pattern8_0) {
13738|       |                                // Rule at src/isa/x64/lower.isle line 2893.
13739|      2|                                let expr0_0 = constructor_cmp_zero_int_bool_ref(ctx, pattern5_0)?;
13740|      2|                                let expr1_0 = CC::NZ;
13741|      2|                                let expr2_0 = constructor_jmp_cond(ctx, &expr1_0, pattern9_0, pattern9_1)?;
13742|      2|                                let expr3_0 = constructor_with_flags_side_effect(ctx, &expr0_0, &expr2_0)?;
13743|      2|                                let expr4_0 = constructor_side_effect(ctx, &expr3_0)?;
13744|      2|                                return Some(expr4_0);
13745|      0|                            }
13746|      0|                        }
13747|      0|                    }
13748|       |                }
13749|      0|                _ => {}
13750|       |            }
13751|       |        }
13752|  46.2k|        &InstructionData::Jump { opcode: ref pattern2_0, args: pattern2_1, destination: pattern2_2 } => {
13753|  46.2k|            if let &Opcode::Jump  = pattern2_0 {
13754|  46.2k|                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
13755|  46.2k|                let pattern5_0 = arg1;
13756|  46.2k|                if let Some(pattern6_0) = C::single_target(ctx, pattern5_0) {
13757|       |                    // Rule at src/isa/x64/lower.isle line 2851.
13758|  46.2k|                    let expr0_0 = constructor_jmp_known(ctx, pattern6_0)?;
13759|  46.2k|                    let expr1_0 = constructor_side_effect(ctx, &expr0_0)?;
13760|  46.2k|                    return Some(expr1_0);
13761|      0|                }
13762|      0|            }
13763|       |        }
13764|      0|        &InstructionData::BranchFloat { opcode: ref pattern2_0, args: pattern2_1, cond: ref pattern2_2, destination: pattern2_3 } => {
13765|      0|            if let &Opcode::Brff  = pattern2_0 {
13766|      0|                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
13767|      0|                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
13768|      0|                    if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
13769|      0|                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
13770|      0|                        if let &InstructionData::Binary { opcode: ref pattern8_0, args: ref pattern8_1 } = &pattern7_0 {
13771|      0|                            if let &Opcode::Ffcmp  = pattern8_0 {
13772|      0|                                let (pattern10_0, pattern10_1) = C::unpack_value_array_2(ctx, pattern8_1);
13773|      0|                                let pattern11_0 = arg1;
13774|      0|                                if let Some((pattern12_0, pattern12_1)) = C::two_targets(ctx, pattern11_0) {
13775|       |                                    // Rule at src/isa/x64/lower.isle line 2861.
13776|      0|                                    let expr0_0 = constructor_emit_fcmp(ctx, pattern2_2, pattern10_0, pattern10_1)?;
13777|      0|                                    let expr1_0 = constructor_jmp_cond_fcmp(ctx, &expr0_0, pattern12_0, pattern12_1)?;
13778|      0|                                    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
13779|      0|                                    return Some(expr2_0);
13780|      0|                                }
13781|      0|                            }
13782|      0|                        }
13783|      0|                    }
13784|      0|                }
13785|      0|            }
13786|       |        }
13787|      0|        &InstructionData::BranchIcmp { opcode: ref pattern2_0, args: pattern2_1, cond: ref pattern2_2, destination: pattern2_3 } => {
13788|      0|            if let &Opcode::BrIcmp  = pattern2_0 {
13789|      0|                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
13790|      0|                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
13791|      0|                    if let Some((pattern6_0, pattern6_1)) = C::value_slice_unwrap(ctx, pattern5_1) {
13792|      0|                        let pattern7_0 = arg1;
13793|      0|                        if let Some((pattern8_0, pattern8_1)) = C::two_targets(ctx, pattern7_0) {
13794|       |                            // Rule at src/isa/x64/lower.isle line 2926.
13795|      0|                            let expr0_0 = constructor_emit_cmp(ctx, pattern2_2, pattern5_0, pattern6_0)?;
13796|      0|                            let expr1_0 = constructor_jmp_cond_icmp(ctx, &expr0_0, pattern8_0, pattern8_1)?;
13797|      0|                            let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
13798|      0|                            return Some(expr2_0);
13799|      0|                        }
13800|      0|                    }
13801|      0|                }
13802|      0|            }
13803|       |        }
13804|      0|        &InstructionData::BranchInt { opcode: ref pattern2_0, args: pattern2_1, cond: ref pattern2_2, destination: pattern2_3 } => {
13805|      0|            if let &Opcode::Brif  = pattern2_0 {
13806|      0|                let pattern4_0 = C::value_list_slice(ctx, pattern2_1);
13807|      0|                if let Some((pattern5_0, pattern5_1)) = C::value_slice_unwrap(ctx, pattern4_0) {
13808|      0|                    if let Some(pattern6_0) = C::def_inst(ctx, pattern5_0) {
13809|      0|                        let pattern7_0 = C::inst_data(ctx, pattern6_0);
13810|      0|                        if let &InstructionData::Binary { opcode: ref pattern8_0, args: ref pattern8_1 } = &pattern7_0 {
13811|      0|                            if let &Opcode::Ifcmp  = pattern8_0 {
13812|      0|                                let (pattern10_0, pattern10_1) = C::unpack_value_array_2(ctx, pattern8_1);
13813|      0|                                let pattern11_0 = arg1;
13814|      0|                                if let Some((pattern12_0, pattern12_1)) = C::two_targets(ctx, pattern11_0) {
13815|       |                                    // Rule at src/isa/x64/lower.isle line 2856.
13816|      0|                                    let expr0_0 = constructor_emit_cmp(ctx, pattern2_2, pattern10_0, pattern10_1)?;
13817|      0|                                    let expr1_0 = constructor_jmp_cond_icmp(ctx, &expr0_0, pattern12_0, pattern12_1)?;
13818|      0|                                    let expr2_0 = constructor_side_effect(ctx, &expr1_0)?;
13819|      0|                                    return Some(expr2_0);
13820|      0|                                }
13821|      0|                            }
13822|      0|                        }
13823|      0|                    }
13824|      0|                }
13825|      0|            }
13826|       |        }
13827|      0|        _ => {}
13828|       |    }
13829|      0|    return None;
13830|  55.7k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code26constructor_x64_movsd_loadINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2156|    196|pub fn constructor_x64_movsd_load<C: Context>(ctx: &mut C, arg0: &XmmMem) -> Option<Xmm> {
 2157|    196|    let pattern0_0 = arg0;
 2158|    196|    // Rule at src/isa/x64/inst.isle line 1660.
 2159|    196|    let expr0_0 = SseOpcode::Movsd;
 2160|    196|    let expr1_0 = constructor_xmm_unary_rm_r(ctx, &expr0_0, pattern0_0)?;
 2161|    196|    return Some(expr1_0);
 2162|    196|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code38constructor_synthetic_amode_to_xmm_memINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6966|    214|pub fn constructor_synthetic_amode_to_xmm_mem<C: Context>(ctx: &mut C, arg0: &SyntheticAmode) -> Option<XmmMem> {
 6967|    214|    let pattern0_0 = arg0;
 6968|    214|    // Rule at src/isa/x64/inst.isle line 3857.
 6969|    214|    let expr0_0 = C::synthetic_amode_to_reg_mem(ctx, pattern0_0);
 6970|    214|    let expr1_0 = C::reg_mem_to_xmm_mem(ctx, &expr0_0);
 6971|    214|    return Some(expr1_0);
 6972|    214|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code19constructor_x64_subINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2398|  4.56k|pub fn constructor_x64_sub<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: &GprMemImm) -> Option<Gpr> {
 2399|  4.56k|    let pattern0_0 = arg0;
 2400|  4.56k|    let pattern1_0 = arg1;
 2401|  4.56k|    let pattern2_0 = arg2;
 2402|  4.56k|    // Rule at src/isa/x64/inst.isle line 1771.
 2403|  4.56k|    let expr0_0 = AluRmiROpcode::Sub;
 2404|  4.56k|    let expr1_0 = constructor_alu_rmi_r(ctx, pattern0_0, &expr0_0, pattern1_0, pattern2_0)?;
 2405|  4.56k|    return Some(expr1_0);
 2406|  4.56k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code33constructor_cmp_zero_int_bool_refINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
14883|      6|pub fn constructor_cmp_zero_int_bool_ref<C: Context>(ctx: &mut C, arg0: Value) -> Option<ProducesFlags> {
14884|      6|    let pattern0_0 = arg0;
14885|      6|    let pattern1_0 = C::value_type(ctx, pattern0_0);
14886|      6|    if pattern1_0 == B1 {
14887|       |        // Rule at src/isa/x64/lower.isle line 2917.
14888|      0|        let expr0_0 = OperandSize::Size8;
14889|      0|        let expr1_0: u32 = 1i128 as u32;
14890|      0|        let expr2_0 = RegMemImm::Imm {
14891|      0|            simm32: expr1_0,
14892|      0|        };
14893|      0|        let expr3_0 = C::gpr_mem_imm_new(ctx, &expr2_0);
14894|      0|        let expr4_0 = constructor_put_in_gpr(ctx, pattern0_0)?;
14895|      0|        let expr5_0 = constructor_x64_test(ctx, &expr0_0, &expr3_0, expr4_0)?;
14896|      0|        return Some(expr5_0);
14897|      6|    }
14898|      6|    // Rule at src/isa/x64/lower.isle line 2919.
14899|      6|    let expr0_0 = C::raw_operand_size_of_type(ctx, pattern1_0);
14900|      6|    let expr1_0 = constructor_put_in_gpr(ctx, pattern0_0)?;
14901|      6|    let expr2_0 = C::gpr_to_gpr_mem_imm(ctx, expr1_0);
14902|      6|    let expr3_0 = constructor_x64_test(ctx, &expr0_0, &expr2_0, expr1_0)?;
14903|      6|    return Some(expr3_0);
14904|      6|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code25constructor_jmp_table_seqINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6096|      2|pub fn constructor_jmp_table_seq<C: Context>(ctx: &mut C, arg0: Type, arg1: Gpr, arg2: MachLabel, arg3: &BoxVecMachLabel) -> Option<SideEffectNoResult> {
 6097|      2|    let pattern0_0 = arg0;
 6098|      2|    let pattern1_0 = arg1;
 6099|      2|    let pattern2_0 = arg2;
 6100|      2|    let pattern3_0 = arg3;
 6101|      2|    // Rule at src/isa/x64/inst.isle line 3374.
 6102|      2|    let expr0_0 = C::temp_writable_gpr(ctx, );
 6103|      2|    let expr1_0 = C::temp_writable_gpr(ctx, );
 6104|      2|    let expr2_0 = C::raw_operand_size_of_type(ctx, pattern0_0);
 6105|      2|    let expr3_0 = C::jump_table_size(ctx, pattern3_0);
 6106|      2|    let expr4_0 = RegMemImm::Imm {
 6107|      2|        simm32: expr3_0,
 6108|      2|    };
 6109|      2|    let expr5_0 = C::gpr_mem_imm_new(ctx, &expr4_0);
 6110|      2|    let expr6_0 = constructor_x64_cmp(ctx, &expr2_0, &expr5_0, pattern1_0)?;
 6111|      2|    let expr7_0 = C::gpr_to_reg(ctx, pattern1_0);
 6112|      2|    let expr8_0 = C::writable_gpr_to_reg(ctx, expr0_0);
 6113|      2|    let expr9_0 = C::writable_gpr_to_reg(ctx, expr1_0);
 6114|      2|    let expr10_0 = MInst::JmpTableSeq {
 6115|      2|        idx: expr7_0,
 6116|      2|        tmp1: expr8_0,
 6117|      2|        tmp2: expr9_0,
 6118|      2|        default_target: pattern2_0,
 6119|      2|        targets: pattern3_0.clone(),
 6120|      2|    };
 6121|      2|    let expr11_0 = ConsumesFlags::ConsumesFlagsSideEffect {
 6122|      2|        inst: expr10_0,
 6123|      2|    };
 6124|      2|    let expr12_0 = constructor_with_flags_side_effect(ctx, &expr6_0, &expr11_0)?;
 6125|      2|    return Some(expr12_0);
 6126|      2|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code24constructor_xmm_cmp_rm_rINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2783|     52|pub fn constructor_xmm_cmp_rm_r<C: Context>(ctx: &mut C, arg0: &SseOpcode, arg1: &XmmMem, arg2: Xmm) -> Option<ProducesFlags> {
 2784|     52|    let pattern0_0 = arg0;
 2785|     52|    let pattern1_0 = arg1;
 2786|     52|    let pattern2_0 = arg2;
 2787|     52|    // Rule at src/isa/x64/inst.isle line 1985.
 2788|     52|    let expr0_0 = MInst::XmmCmpRmR {
 2789|     52|        op: pattern0_0.clone(),
 2790|     52|        src: pattern1_0.clone(),
 2791|     52|        dst: pattern2_0,
 2792|     52|    };
 2793|     52|    let expr1_0 = ProducesFlags::ProducesFlagsSideEffect {
 2794|     52|        inst: expr0_0,
 2795|     52|    };
 2796|     52|    return Some(expr1_0);
 2797|     52|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code21constructor_alu_rmi_rINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 2318|  9.61k|pub fn constructor_alu_rmi_r<C: Context>(ctx: &mut C, arg0: Type, arg1: &AluRmiROpcode, arg2: Gpr, arg3: &GprMemImm) -> Option<Gpr> {
 2319|  9.61k|    let pattern0_0 = arg0;
 2320|  9.61k|    let pattern1_0 = arg1;
 2321|  9.61k|    let pattern2_0 = arg2;
 2322|  9.61k|    let pattern3_0 = arg3;
 2323|  9.61k|    // Rule at src/isa/x64/inst.isle line 1731.
 2324|  9.61k|    let expr0_0 = C::temp_writable_gpr(ctx, );
 2325|  9.61k|    let expr1_0 = C::operand_size_of_type_32_64(ctx, pattern0_0);
 2326|  9.61k|    let expr2_0 = MInst::AluRmiR {
 2327|  9.61k|        size: expr1_0,
 2328|  9.61k|        op: pattern1_0.clone(),
 2329|  9.61k|        src1: pattern2_0,
 2330|  9.61k|        src2: pattern3_0.clone(),
 2331|  9.61k|        dst: expr0_0,
 2332|  9.61k|    };
 2333|  9.61k|    let expr3_0 = C::emit(ctx, &expr2_0);
 2334|  9.61k|    let expr4_0 = C::writable_gpr_to_gpr(ctx, expr0_0);
 2335|  9.61k|    return Some(expr4_0);
 2336|  9.61k|}
_RINvNtNtNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x645lower4isle14generated_code28constructor_amode_to_gpr_memINtNtNtBc_8machinst4isle11IsleContextNtB2_5MInstNtNtBc_8settings5FlagsNtNtB8_8settings5FlagsKj6_EEBc_:
 6948|  9.65k|pub fn constructor_amode_to_gpr_mem<C: Context>(ctx: &mut C, arg0: &Amode) -> Option<GprMem> {
 6949|  9.65k|    let pattern0_0 = arg0;
 6950|  9.65k|    // Rule at src/isa/x64/inst.isle line 3849.
 6951|  9.65k|    let expr0_0 = C::amode_to_synthetic_amode(ctx, pattern0_0);
 6952|  9.65k|    let expr1_0 = constructor_synthetic_amode_to_gpr_mem(ctx, &expr0_0)?;
 6953|  9.65k|    return Some(expr1_0);
 6954|  9.65k|}

_RNvXsn_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionDataNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneCsfUdr7hIf7mV_18cranelift_frontend:
  247|   349k|#[derive(Clone, Debug, PartialEq, Hash)]
_RNvXsv_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6OpcodeNtNtCs8gdQ2z332JV_4core3cmp9PartialEq2eqCsfUdr7hIf7mV_18cranelift_frontend:
 1312|     56|#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]
_RNvXst_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6OpcodeNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneCsfUdr7hIf7mV_18cranelift_frontend:
 1312|   349k|#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]
_RNvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionData13arguments_mut:
  666|   738k|    pub fn arguments_mut<'a>(&'a mut self, pool: &'a mut ir::ValueListPool) -> &mut [Value] {
  667|   738k|        match *self {
  668|       |            Self::DynamicStackLoad { .. } |
  669|       |            Self::FuncAddr { .. } |
  670|       |            Self::NullAry { .. } |
  671|       |            Self::StackLoad { .. } |
  672|       |            Self::Trap { .. } |
  673|       |            Self::UnaryBool { .. } |
  674|       |            Self::UnaryConst { .. } |
  675|       |            Self::UnaryGlobalValue { .. } |
  676|       |            Self::UnaryIeee32 { .. } |
  677|       |            Self::UnaryIeee64 { .. } |
  678|       |            Self::UnaryImm { .. } => {
  679|   231k|                &mut []
  680|       |            }
  681|      0|            Self::AtomicRmw { args: ref mut args_arity2, .. } |
  682|  29.6k|            Self::Binary { args: ref mut args_arity2, .. } |
  683|    656|            Self::FloatCompare { args: ref mut args_arity2, .. } |
  684|  19.2k|            Self::IntCompare { args: ref mut args_arity2, .. } |
  685|      0|            Self::Shuffle { args: ref mut args_arity2, .. } |
  686|  37.7k|            Self::Store { args: ref mut args_arity2, .. } |
  687|      0|            Self::StoreNoOffset { args: ref mut args_arity2, .. } |
  688|      0|            Self::TernaryImm8 { args: ref mut args_arity2, .. } => {
  689|  87.2k|                args_arity2
  690|       |            }
  691|  18.4E|            Self::AtomicCas { args: ref mut args_arity3, .. } |
  692|     56|            Self::IntSelect { args: ref mut args_arity3, .. } |
  693|    962|            Self::Ternary { args: ref mut args_arity3, .. } => {
  694|    893|                args_arity3
  695|       |            }
  696|      0|            Self::BinaryImm64 { ref mut arg, .. } |
  697|      0|            Self::BinaryImm8 { ref mut arg, .. } |
  698|      4|            Self::BranchTable { ref mut arg, .. } |
  699|      0|            Self::CondTrap { ref mut arg, .. } |
  700|      0|            Self::DynamicStackStore { ref mut arg, .. } |
  701|      0|            Self::FloatCond { ref mut arg, .. } |
  702|      0|            Self::FloatCondTrap { ref mut arg, .. } |
  703|      0|            Self::HeapAddr { ref mut arg, .. } |
  704|      0|            Self::IntCompareImm { ref mut arg, .. } |
  705|      0|            Self::IntCond { ref mut arg, .. } |
  706|      0|            Self::IntCondTrap { ref mut arg, .. } |
  707|  67.7k|            Self::Load { ref mut arg, .. } |
  708|      0|            Self::LoadNoOffset { ref mut arg, .. } |
  709|      0|            Self::StackStore { ref mut arg, .. } |
  710|      0|            Self::TableAddr { ref mut arg, .. } |
  711|  13.3k|            Self::Unary { ref mut arg, .. } => {
  712|  81.1k|                core::slice::from_mut(arg)
  713|       |            }
  714|  28.3k|            Self::Branch { ref mut args, .. } |
  715|      0|            Self::BranchFloat { ref mut args, .. } |
  716|      0|            Self::BranchIcmp { ref mut args, .. } |
  717|      0|            Self::BranchInt { ref mut args, .. } |
  718|  88.6k|            Self::Call { ref mut args, .. } |
  719|  9.74k|            Self::CallIndirect { ref mut args, .. } |
  720|   111k|            Self::Jump { ref mut args, .. } |
  721|   100k|            Self::MultiAry { ref mut args, .. } => {
  722|   338k|                args.as_mut_slice(pool)
  723|       |            }
  724|       |        }
  725|   738k|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode9is_branch:
 1883|  3.46M|    pub fn is_branch(self) -> bool {
 1884|  3.46M|        match self {
 1885|       |            Self::BrIcmp |
 1886|       |            Self::BrTable |
 1887|       |            Self::Brff |
 1888|       |            Self::Brif |
 1889|       |            Self::Brnz |
 1890|       |            Self::Brz |
 1891|       |            Self::Jump => {
 1892|   780k|                true
 1893|       |            }
 1894|       |            _ => {
 1895|  2.68M|                false
 1896|       |            }
 1897|       |        }
 1898|  3.46M|    }
_RNvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionData14put_value_list:
  756|  39.2k|    pub fn put_value_list(&mut self, vlist: ir::ValueList) {
  757|  39.2k|        let args = match *self {
  758|      0|            Self::Branch { ref mut args, .. } => args,
  759|      0|            Self::BranchFloat { ref mut args, .. } => args,
  760|      0|            Self::BranchIcmp { ref mut args, .. } => args,
  761|      0|            Self::BranchInt { ref mut args, .. } => args,
  762|      0|            Self::Call { ref mut args, .. } => args,
  763|      0|            Self::CallIndirect { ref mut args, .. } => args,
  764|  39.2k|            Self::Jump { ref mut args, .. } => args,
  765|      0|            Self::MultiAry { ref mut args, .. } => args,
  766|      0|            _ => panic!("No value list: {:?}", self),
  767|       |        };
  768|      0|        debug_assert!(args.is_empty(), "Value list already in use");
  769|  39.2k|        *args = vlist;
  770|  39.2k|    }
_RNvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionData15take_value_list:
  732|  39.2k|    pub fn take_value_list(&mut self) -> Option<ir::ValueList> {
  733|  39.2k|        match *self {
  734|      0|            Self::Branch { ref mut args, .. } |
  735|      0|            Self::BranchFloat { ref mut args, .. } |
  736|      0|            Self::BranchIcmp { ref mut args, .. } |
  737|      0|            Self::BranchInt { ref mut args, .. } |
  738|      0|            Self::Call { ref mut args, .. } |
  739|      0|            Self::CallIndirect { ref mut args, .. } |
  740|  39.2k|            Self::Jump { ref mut args, .. } |
  741|      0|            Self::MultiAry { ref mut args, .. } => {
  742|  39.2k|                Some(args.take())
  743|       |            }
  744|       |            _ => {
  745|      0|                None
  746|       |            }
  747|       |        }
  748|  39.2k|    }
_RINvXsz_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB6_6OpcodeNtNtCs8gdQ2z332JV_4core4hash4Hash4hashNtNtBa_2fx8FxHasherEBa_:
 1312|   471k|#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]
_RNvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionData2eq:
  776|   121k|    pub fn eq(&self, other: &Self, pool: &ir::ValueListPool) -> bool {
  777|   121k|        if ::core::mem::discriminant(self) != ::core::mem::discriminant(other) {
  778|  9.99k|            return false;
  779|   111k|        }
  780|   111k|        match (self, other) {
  781|      0|            (&Self::AtomicCas { opcode: ref opcode1, args: ref args1, flags: ref flags1 }, &Self::AtomicCas { opcode: ref opcode2, args: ref args2, flags: ref flags2 }) => {
  782|      0|                opcode1 == opcode2
  783|      0|                && flags1 == flags2
  784|      0|                && args1 == args2
  785|       |            }
  786|      0|            (&Self::AtomicRmw { opcode: ref opcode1, args: ref args1, flags: ref flags1, op: ref op1 }, &Self::AtomicRmw { opcode: ref opcode2, args: ref args2, flags: ref flags2, op: ref op2 }) => {
  787|      0|                opcode1 == opcode2
  788|      0|                && flags1 == flags2
  789|      0|                && op1 == op2
  790|      0|                && args1 == args2
  791|       |            }
  792|  19.7k|            (&Self::Binary { opcode: ref opcode1, args: ref args1 }, &Self::Binary { opcode: ref opcode2, args: ref args2 }) => {
  793|  19.7k|                opcode1 == opcode2
  794|  19.7k|                && args1 == args2
  795|       |            }
  796|      0|            (&Self::BinaryImm64 { opcode: ref opcode1, arg: ref arg1, imm: ref imm1 }, &Self::BinaryImm64 { opcode: ref opcode2, arg: ref arg2, imm: ref imm2 }) => {
  797|      0|                opcode1 == opcode2
  798|      0|                && imm1 == imm2
  799|      0|                && arg1 == arg2
  800|       |            }
  801|      0|            (&Self::BinaryImm8 { opcode: ref opcode1, arg: ref arg1, imm: ref imm1 }, &Self::BinaryImm8 { opcode: ref opcode2, arg: ref arg2, imm: ref imm2 }) => {
  802|      0|                opcode1 == opcode2
  803|      0|                && imm1 == imm2
  804|      0|                && arg1 == arg2
  805|       |            }
  806|      0|            (&Self::Branch { opcode: ref opcode1, args: ref args1, destination: ref destination1 }, &Self::Branch { opcode: ref opcode2, args: ref args2, destination: ref destination2 }) => {
  807|      0|                opcode1 == opcode2
  808|      0|                && destination1 == destination2
  809|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  810|       |            }
  811|      0|            (&Self::BranchFloat { opcode: ref opcode1, args: ref args1, cond: ref cond1, destination: ref destination1 }, &Self::BranchFloat { opcode: ref opcode2, args: ref args2, cond: ref cond2, destination: ref destination2 }) => {
  812|      0|                opcode1 == opcode2
  813|      0|                && cond1 == cond2
  814|      0|                && destination1 == destination2
  815|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  816|       |            }
  817|      0|            (&Self::BranchIcmp { opcode: ref opcode1, args: ref args1, cond: ref cond1, destination: ref destination1 }, &Self::BranchIcmp { opcode: ref opcode2, args: ref args2, cond: ref cond2, destination: ref destination2 }) => {
  818|      0|                opcode1 == opcode2
  819|      0|                && cond1 == cond2
  820|      0|                && destination1 == destination2
  821|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  822|       |            }
  823|      0|            (&Self::BranchInt { opcode: ref opcode1, args: ref args1, cond: ref cond1, destination: ref destination1 }, &Self::BranchInt { opcode: ref opcode2, args: ref args2, cond: ref cond2, destination: ref destination2 }) => {
  824|      0|                opcode1 == opcode2
  825|      0|                && cond1 == cond2
  826|      0|                && destination1 == destination2
  827|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  828|       |            }
  829|      0|            (&Self::BranchTable { opcode: ref opcode1, arg: ref arg1, destination: ref destination1, table: ref table1 }, &Self::BranchTable { opcode: ref opcode2, arg: ref arg2, destination: ref destination2, table: ref table2 }) => {
  830|      0|                opcode1 == opcode2
  831|      0|                && destination1 == destination2
  832|      0|                && table1 == table2
  833|      0|                && arg1 == arg2
  834|       |            }
  835|      0|            (&Self::Call { opcode: ref opcode1, args: ref args1, func_ref: ref func_ref1 }, &Self::Call { opcode: ref opcode2, args: ref args2, func_ref: ref func_ref2 }) => {
  836|      0|                opcode1 == opcode2
  837|      0|                && func_ref1 == func_ref2
  838|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  839|       |            }
  840|      0|            (&Self::CallIndirect { opcode: ref opcode1, args: ref args1, sig_ref: ref sig_ref1 }, &Self::CallIndirect { opcode: ref opcode2, args: ref args2, sig_ref: ref sig_ref2 }) => {
  841|      0|                opcode1 == opcode2
  842|      0|                && sig_ref1 == sig_ref2
  843|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  844|       |            }
  845|      0|            (&Self::CondTrap { opcode: ref opcode1, arg: ref arg1, code: ref code1 }, &Self::CondTrap { opcode: ref opcode2, arg: ref arg2, code: ref code2 }) => {
  846|      0|                opcode1 == opcode2
  847|      0|                && code1 == code2
  848|      0|                && arg1 == arg2
  849|       |            }
  850|      0|            (&Self::DynamicStackLoad { opcode: ref opcode1, dynamic_stack_slot: ref dynamic_stack_slot1 }, &Self::DynamicStackLoad { opcode: ref opcode2, dynamic_stack_slot: ref dynamic_stack_slot2 }) => {
  851|      0|                opcode1 == opcode2
  852|      0|                && dynamic_stack_slot1 == dynamic_stack_slot2
  853|       |            }
  854|      0|            (&Self::DynamicStackStore { opcode: ref opcode1, arg: ref arg1, dynamic_stack_slot: ref dynamic_stack_slot1 }, &Self::DynamicStackStore { opcode: ref opcode2, arg: ref arg2, dynamic_stack_slot: ref dynamic_stack_slot2 }) => {
  855|      0|                opcode1 == opcode2
  856|      0|                && dynamic_stack_slot1 == dynamic_stack_slot2
  857|      0|                && arg1 == arg2
  858|       |            }
  859|     28|            (&Self::FloatCompare { opcode: ref opcode1, args: ref args1, cond: ref cond1 }, &Self::FloatCompare { opcode: ref opcode2, args: ref args2, cond: ref cond2 }) => {
  860|     28|                opcode1 == opcode2
  861|     28|                && cond1 == cond2
  862|     14|                && args1 == args2
  863|       |            }
  864|      0|            (&Self::FloatCond { opcode: ref opcode1, arg: ref arg1, cond: ref cond1 }, &Self::FloatCond { opcode: ref opcode2, arg: ref arg2, cond: ref cond2 }) => {
  865|      0|                opcode1 == opcode2
  866|      0|                && cond1 == cond2
  867|      0|                && arg1 == arg2
  868|       |            }
  869|      0|            (&Self::FloatCondTrap { opcode: ref opcode1, arg: ref arg1, cond: ref cond1, code: ref code1 }, &Self::FloatCondTrap { opcode: ref opcode2, arg: ref arg2, cond: ref cond2, code: ref code2 }) => {
  870|      0|                opcode1 == opcode2
  871|      0|                && cond1 == cond2
  872|      0|                && code1 == code2
  873|      0|                && arg1 == arg2
  874|       |            }
  875|      0|            (&Self::FuncAddr { opcode: ref opcode1, func_ref: ref func_ref1 }, &Self::FuncAddr { opcode: ref opcode2, func_ref: ref func_ref2 }) => {
  876|      0|                opcode1 == opcode2
  877|      0|                && func_ref1 == func_ref2
  878|       |            }
  879|      0|            (&Self::HeapAddr { opcode: ref opcode1, arg: ref arg1, heap: ref heap1, imm: ref imm1 }, &Self::HeapAddr { opcode: ref opcode2, arg: ref arg2, heap: ref heap2, imm: ref imm2 }) => {
  880|      0|                opcode1 == opcode2
  881|      0|                && heap1 == heap2
  882|      0|                && imm1 == imm2
  883|      0|                && arg1 == arg2
  884|       |            }
  885|  23.5k|            (&Self::IntCompare { opcode: ref opcode1, args: ref args1, cond: ref cond1 }, &Self::IntCompare { opcode: ref opcode2, args: ref args2, cond: ref cond2 }) => {
  886|  23.5k|                opcode1 == opcode2
  887|  23.5k|                && cond1 == cond2
  888|  23.5k|                && args1 == args2
  889|       |            }
  890|      0|            (&Self::IntCompareImm { opcode: ref opcode1, arg: ref arg1, cond: ref cond1, imm: ref imm1 }, &Self::IntCompareImm { opcode: ref opcode2, arg: ref arg2, cond: ref cond2, imm: ref imm2 }) => {
  891|      0|                opcode1 == opcode2
  892|      0|                && cond1 == cond2
  893|      0|                && imm1 == imm2
  894|      0|                && arg1 == arg2
  895|       |            }
  896|      0|            (&Self::IntCond { opcode: ref opcode1, arg: ref arg1, cond: ref cond1 }, &Self::IntCond { opcode: ref opcode2, arg: ref arg2, cond: ref cond2 }) => {
  897|      0|                opcode1 == opcode2
  898|      0|                && cond1 == cond2
  899|      0|                && arg1 == arg2
  900|       |            }
  901|      0|            (&Self::IntCondTrap { opcode: ref opcode1, arg: ref arg1, cond: ref cond1, code: ref code1 }, &Self::IntCondTrap { opcode: ref opcode2, arg: ref arg2, cond: ref cond2, code: ref code2 }) => {
  902|      0|                opcode1 == opcode2
  903|      0|                && cond1 == cond2
  904|      0|                && code1 == code2
  905|      0|                && arg1 == arg2
  906|       |            }
  907|      0|            (&Self::IntSelect { opcode: ref opcode1, args: ref args1, cond: ref cond1 }, &Self::IntSelect { opcode: ref opcode2, args: ref args2, cond: ref cond2 }) => {
  908|      0|                opcode1 == opcode2
  909|      0|                && cond1 == cond2
  910|      0|                && args1 == args2
  911|       |            }
  912|      0|            (&Self::Jump { opcode: ref opcode1, args: ref args1, destination: ref destination1 }, &Self::Jump { opcode: ref opcode2, args: ref args2, destination: ref destination2 }) => {
  913|      0|                opcode1 == opcode2
  914|      0|                && destination1 == destination2
  915|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  916|       |            }
  917|  9.71k|            (&Self::Load { opcode: ref opcode1, arg: ref arg1, flags: ref flags1, offset: ref offset1 }, &Self::Load { opcode: ref opcode2, arg: ref arg2, flags: ref flags2, offset: ref offset2 }) => {
  918|  9.71k|                opcode1 == opcode2
  919|  9.71k|                && flags1 == flags2
  920|  9.71k|                && offset1 == offset2
  921|  9.71k|                && arg1 == arg2
  922|       |            }
  923|      0|            (&Self::LoadNoOffset { opcode: ref opcode1, arg: ref arg1, flags: ref flags1 }, &Self::LoadNoOffset { opcode: ref opcode2, arg: ref arg2, flags: ref flags2 }) => {
  924|      0|                opcode1 == opcode2
  925|      0|                && flags1 == flags2
  926|      0|                && arg1 == arg2
  927|       |            }
  928|      0|            (&Self::MultiAry { opcode: ref opcode1, args: ref args1 }, &Self::MultiAry { opcode: ref opcode2, args: ref args2 }) => {
  929|      0|                opcode1 == opcode2
  930|      0|                && args1.as_slice(pool) == args2.as_slice(pool)
  931|       |            }
  932|      0|            (&Self::NullAry { opcode: ref opcode1 }, &Self::NullAry { opcode: ref opcode2 }) => {
  933|      0|                opcode1 == opcode2
  934|       |            }
  935|      0|            (&Self::Shuffle { opcode: ref opcode1, args: ref args1, imm: ref imm1 }, &Self::Shuffle { opcode: ref opcode2, args: ref args2, imm: ref imm2 }) => {
  936|      0|                opcode1 == opcode2
  937|      0|                && imm1 == imm2
  938|      0|                && args1 == args2
  939|       |            }
  940|      0|            (&Self::StackLoad { opcode: ref opcode1, stack_slot: ref stack_slot1, offset: ref offset1 }, &Self::StackLoad { opcode: ref opcode2, stack_slot: ref stack_slot2, offset: ref offset2 }) => {
  941|      0|                opcode1 == opcode2
  942|      0|                && stack_slot1 == stack_slot2
  943|      0|                && offset1 == offset2
  944|       |            }
  945|      0|            (&Self::StackStore { opcode: ref opcode1, arg: ref arg1, stack_slot: ref stack_slot1, offset: ref offset1 }, &Self::StackStore { opcode: ref opcode2, arg: ref arg2, stack_slot: ref stack_slot2, offset: ref offset2 }) => {
  946|      0|                opcode1 == opcode2
  947|      0|                && stack_slot1 == stack_slot2
  948|      0|                && offset1 == offset2
  949|      0|                && arg1 == arg2
  950|       |            }
  951|      0|            (&Self::Store { opcode: ref opcode1, args: ref args1, flags: ref flags1, offset: ref offset1 }, &Self::Store { opcode: ref opcode2, args: ref args2, flags: ref flags2, offset: ref offset2 }) => {
  952|      0|                opcode1 == opcode2
  953|      0|                && flags1 == flags2
  954|      0|                && offset1 == offset2
  955|      0|                && args1 == args2
  956|       |            }
  957|      0|            (&Self::StoreNoOffset { opcode: ref opcode1, args: ref args1, flags: ref flags1 }, &Self::StoreNoOffset { opcode: ref opcode2, args: ref args2, flags: ref flags2 }) => {
  958|      0|                opcode1 == opcode2
  959|      0|                && flags1 == flags2
  960|      0|                && args1 == args2
  961|       |            }
  962|      0|            (&Self::TableAddr { opcode: ref opcode1, arg: ref arg1, table: ref table1, offset: ref offset1 }, &Self::TableAddr { opcode: ref opcode2, arg: ref arg2, table: ref table2, offset: ref offset2 }) => {
  963|      0|                opcode1 == opcode2
  964|      0|                && table1 == table2
  965|      0|                && offset1 == offset2
  966|      0|                && arg1 == arg2
  967|       |            }
  968|      8|            (&Self::Ternary { opcode: ref opcode1, args: ref args1 }, &Self::Ternary { opcode: ref opcode2, args: ref args2 }) => {
  969|      8|                opcode1 == opcode2
  970|      8|                && args1 == args2
  971|       |            }
  972|      0|            (&Self::TernaryImm8 { opcode: ref opcode1, args: ref args1, imm: ref imm1 }, &Self::TernaryImm8 { opcode: ref opcode2, args: ref args2, imm: ref imm2 }) => {
  973|      0|                opcode1 == opcode2
  974|      0|                && imm1 == imm2
  975|      0|                && args1 == args2
  976|       |            }
  977|      0|            (&Self::Trap { opcode: ref opcode1, code: ref code1 }, &Self::Trap { opcode: ref opcode2, code: ref code2 }) => {
  978|      0|                opcode1 == opcode2
  979|      0|                && code1 == code2
  980|       |            }
  981|  23.6k|            (&Self::Unary { opcode: ref opcode1, arg: ref arg1 }, &Self::Unary { opcode: ref opcode2, arg: ref arg2 }) => {
  982|  23.6k|                opcode1 == opcode2
  983|  23.6k|                && arg1 == arg2
  984|       |            }
  985|      0|            (&Self::UnaryBool { opcode: ref opcode1, imm: ref imm1 }, &Self::UnaryBool { opcode: ref opcode2, imm: ref imm2 }) => {
  986|      0|                opcode1 == opcode2
  987|      0|                && imm1 == imm2
  988|       |            }
  989|      0|            (&Self::UnaryConst { opcode: ref opcode1, constant_handle: ref constant_handle1 }, &Self::UnaryConst { opcode: ref opcode2, constant_handle: ref constant_handle2 }) => {
  990|      0|                opcode1 == opcode2
  991|      0|                && constant_handle1 == constant_handle2
  992|       |            }
  993|      0|            (&Self::UnaryGlobalValue { opcode: ref opcode1, global_value: ref global_value1 }, &Self::UnaryGlobalValue { opcode: ref opcode2, global_value: ref global_value2 }) => {
  994|      0|                opcode1 == opcode2
  995|      0|                && global_value1 == global_value2
  996|       |            }
  997|    300|            (&Self::UnaryIeee32 { opcode: ref opcode1, imm: ref imm1 }, &Self::UnaryIeee32 { opcode: ref opcode2, imm: ref imm2 }) => {
  998|    300|                opcode1 == opcode2
  999|    300|                && imm1 == imm2
 1000|       |            }
 1001|  2.75k|            (&Self::UnaryIeee64 { opcode: ref opcode1, imm: ref imm1 }, &Self::UnaryIeee64 { opcode: ref opcode2, imm: ref imm2 }) => {
 1002|  2.75k|                opcode1 == opcode2
 1003|  2.75k|                && imm1 == imm2
 1004|       |            }
 1005|  31.2k|            (&Self::UnaryImm { opcode: ref opcode1, imm: ref imm1 }, &Self::UnaryImm { opcode: ref opcode2, imm: ref imm2 }) => {
 1006|  31.2k|                opcode1 == opcode2
 1007|  31.2k|                && imm1 == imm2
 1008|       |            }
 1009|      0|            _ => unreachable!()
 1010|       |        }
 1011|   121k|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode18other_side_effects:
 2001|   927k|    pub fn other_side_effects(self) -> bool {
 2002|   927k|        match self {
 2003|       |            Self::AtomicCas |
 2004|       |            Self::AtomicLoad |
 2005|       |            Self::AtomicRmw |
 2006|       |            Self::AtomicStore |
 2007|       |            Self::Debugtrap |
 2008|       |            Self::Fence |
 2009|       |            Self::GetPinnedReg |
 2010|       |            Self::SelectifSpectreGuard |
 2011|       |            Self::SetPinnedReg => {
 2012|    150|                true
 2013|       |            }
 2014|       |            _ => {
 2015|   927k|                false
 2016|       |            }
 2017|       |        }
 2018|   927k|    }
_RNvXsn_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionDataNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneB9_:
  247|  1.25M|#[derive(Clone, Debug, PartialEq, Hash)]
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode9is_return:
 1914|  1.19M|    pub fn is_return(self) -> bool {
 1915|  1.19M|        match self {
 1916|       |            Self::Return => {
 1917|  50.1k|                true
 1918|       |            }
 1919|       |            _ => {
 1920|  1.14M|                false
 1921|       |            }
 1922|       |        }
 1923|  1.19M|    }
_RNvXst_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6OpcodeNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneB9_:
 1312|  1.25M|#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]
_RNvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionData15typevar_operand:
  537|  29.3k|    pub fn typevar_operand(&self, pool: &ir::ValueListPool) -> Option<Value> {
  538|  29.3k|        match *self {
  539|       |            Self::Call { .. } |
  540|       |            Self::DynamicStackLoad { .. } |
  541|       |            Self::FuncAddr { .. } |
  542|       |            Self::Jump { .. } |
  543|       |            Self::MultiAry { .. } |
  544|       |            Self::NullAry { .. } |
  545|       |            Self::StackLoad { .. } |
  546|       |            Self::Trap { .. } |
  547|       |            Self::UnaryBool { .. } |
  548|       |            Self::UnaryConst { .. } |
  549|       |            Self::UnaryGlobalValue { .. } |
  550|       |            Self::UnaryIeee32 { .. } |
  551|       |            Self::UnaryIeee64 { .. } |
  552|       |            Self::UnaryImm { .. } => {
  553|      0|                None
  554|       |            }
  555|      0|            Self::BinaryImm64 { arg, .. } |
  556|      0|            Self::BinaryImm8 { arg, .. } |
  557|      0|            Self::BranchTable { arg, .. } |
  558|      0|            Self::CondTrap { arg, .. } |
  559|      0|            Self::DynamicStackStore { arg, .. } |
  560|      0|            Self::FloatCond { arg, .. } |
  561|      0|            Self::FloatCondTrap { arg, .. } |
  562|      0|            Self::HeapAddr { arg, .. } |
  563|      0|            Self::IntCompareImm { arg, .. } |
  564|      0|            Self::IntCond { arg, .. } |
  565|      0|            Self::IntCondTrap { arg, .. } |
  566|      0|            Self::Load { arg, .. } |
  567|      0|            Self::LoadNoOffset { arg, .. } |
  568|      0|            Self::StackStore { arg, .. } |
  569|      0|            Self::TableAddr { arg, .. } |
  570|      0|            Self::Unary { arg, .. } => {
  571|      0|                Some(arg)
  572|       |            }
  573|      0|            Self::AtomicRmw { args: ref args_arity2, .. } |
  574|      0|            Self::Binary { args: ref args_arity2, .. } |
  575|    656|            Self::FloatCompare { args: ref args_arity2, .. } |
  576|  28.6k|            Self::IntCompare { args: ref args_arity2, .. } |
  577|      0|            Self::Shuffle { args: ref args_arity2, .. } |
  578|      0|            Self::Store { args: ref args_arity2, .. } |
  579|      0|            Self::StoreNoOffset { args: ref args_arity2, .. } |
  580|      0|            Self::TernaryImm8 { args: ref args_arity2, .. } => {
  581|  29.3k|                Some(args_arity2[0])
  582|       |            }
  583|      0|            Self::IntSelect { args: ref args_arity3, .. } => {
  584|      0|                Some(args_arity3[0])
  585|       |            }
  586|      0|            Self::Ternary { args: ref args_arity3, .. } => {
  587|      0|                Some(args_arity3[1])
  588|       |            }
  589|      1|            Self::AtomicCas { args: ref args_arity3, .. } => {
  590|      1|                Some(args_arity3[2])
  591|       |            }
  592|      0|            Self::Branch { ref args, .. } |
  593|      0|            Self::BranchFloat { ref args, .. } |
  594|      0|            Self::BranchIcmp { ref args, .. } |
  595|      0|            Self::BranchInt { ref args, .. } |
  596|      0|            Self::CallIndirect { ref args, .. } => {
  597|      0|                args.get(0, pool)
  598|       |            }
  599|       |        }
  600|  29.3k|    }
_RNvXsv_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6OpcodeNtNtCs8gdQ2z332JV_4core3cmp9PartialEq2eqB9_:
 1312|  1.50M|#[derive(Copy, Clone, PartialEq, Eq, Debug, Hash)]
_RNvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionData6opcode:
  483|  6.81M|    pub fn opcode(&self) -> Opcode {
  484|  6.81M|        match *self {
  485|  18.4E|            Self::AtomicCas { opcode, .. } |
  486|      0|            Self::AtomicRmw { opcode, .. } |
  487|   307k|            Self::Binary { opcode, .. } |
  488|  10.2k|            Self::BinaryImm64 { opcode, .. } |
  489|      0|            Self::BinaryImm8 { opcode, .. } |
  490|   198k|            Self::Branch { opcode, .. } |
  491|      0|            Self::BranchFloat { opcode, .. } |
  492|      0|            Self::BranchIcmp { opcode, .. } |
  493|      0|            Self::BranchInt { opcode, .. } |
  494|     48|            Self::BranchTable { opcode, .. } |
  495|   539k|            Self::Call { opcode, .. } |
  496|  72.6k|            Self::CallIndirect { opcode, .. } |
  497|     28|            Self::CondTrap { opcode, .. } |
  498|      0|            Self::DynamicStackLoad { opcode, .. } |
  499|      0|            Self::DynamicStackStore { opcode, .. } |
  500|  4.24k|            Self::FloatCompare { opcode, .. } |
  501|      0|            Self::FloatCond { opcode, .. } |
  502|      0|            Self::FloatCondTrap { opcode, .. } |
  503|      0|            Self::FuncAddr { opcode, .. } |
  504|    882|            Self::HeapAddr { opcode, .. } |
  505|   191k|            Self::IntCompare { opcode, .. } |
  506|    274|            Self::IntCompareImm { opcode, .. } |
  507|      0|            Self::IntCond { opcode, .. } |
  508|      0|            Self::IntCondTrap { opcode, .. } |
  509|    364|            Self::IntSelect { opcode, .. } |
  510|  1.21M|            Self::Jump { opcode, .. } |
  511|   547k|            Self::Load { opcode, .. } |
  512|      0|            Self::LoadNoOffset { opcode, .. } |
  513|   953k|            Self::MultiAry { opcode, .. } |
  514|      0|            Self::NullAry { opcode, .. } |
  515|      0|            Self::Shuffle { opcode, .. } |
  516|      0|            Self::StackLoad { opcode, .. } |
  517|      0|            Self::StackStore { opcode, .. } |
  518|   339k|            Self::Store { opcode, .. } |
  519|      0|            Self::StoreNoOffset { opcode, .. } |
  520|      0|            Self::TableAddr { opcode, .. } |
  521|  4.39k|            Self::Ternary { opcode, .. } |
  522|      0|            Self::TernaryImm8 { opcode, .. } |
  523|   184k|            Self::Trap { opcode, .. } |
  524|   100k|            Self::Unary { opcode, .. } |
  525|      0|            Self::UnaryBool { opcode, .. } |
  526|      0|            Self::UnaryConst { opcode, .. } |
  527|   114k|            Self::UnaryGlobalValue { opcode, .. } |
  528|  6.55k|            Self::UnaryIeee32 { opcode, .. } |
  529|  23.8k|            Self::UnaryIeee64 { opcode, .. } |
  530|  2.01M|            Self::UnaryImm { opcode, .. } => {
  531|  6.81M|                opcode
  532|  6.81M|            }
  533|  6.81M|        }
  534|  6.81M|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode16writes_cpu_flags:
 2021|   342k|    pub fn writes_cpu_flags(self) -> bool {
 2022|   342k|        match self {
 2023|       |            Self::Ffcmp |
 2024|       |            Self::IaddIfcarry |
 2025|       |            Self::IaddIfcout |
 2026|       |            Self::Ifcmp |
 2027|       |            Self::IfcmpImm |
 2028|       |            Self::IsubIfborrow |
 2029|       |            Self::IsubIfbout => {
 2030|     82|                true
 2031|       |            }
 2032|       |            _ => {
 2033|   342k|                false
 2034|       |            }
 2035|       |        }
 2036|   342k|    }
_RNvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_15InstructionData9arguments:
  603|   951k|    pub fn arguments<'a>(&'a self, pool: &'a ir::ValueListPool) -> &[Value] {
  604|   951k|        match *self {
  605|       |            Self::DynamicStackLoad { .. } |
  606|       |            Self::FuncAddr { .. } |
  607|       |            Self::NullAry { .. } |
  608|       |            Self::StackLoad { .. } |
  609|       |            Self::Trap { .. } |
  610|       |            Self::UnaryBool { .. } |
  611|       |            Self::UnaryConst { .. } |
  612|       |            Self::UnaryGlobalValue { .. } |
  613|       |            Self::UnaryIeee32 { .. } |
  614|       |            Self::UnaryIeee64 { .. } |
  615|       |            Self::UnaryImm { .. } => {
  616|   210k|                &[]
  617|       |            }
  618|      0|            Self::AtomicRmw { args: ref args_arity2, .. } |
  619|  39.3k|            Self::Binary { args: ref args_arity2, .. } |
  620|    142|            Self::FloatCompare { args: ref args_arity2, .. } |
  621|  19.2k|            Self::IntCompare { args: ref args_arity2, .. } |
  622|      0|            Self::Shuffle { args: ref args_arity2, .. } |
  623|  37.7k|            Self::Store { args: ref args_arity2, .. } |
  624|      0|            Self::StoreNoOffset { args: ref args_arity2, .. } |
  625|      0|            Self::TernaryImm8 { args: ref args_arity2, .. } => {
  626|  96.4k|                args_arity2
  627|       |            }
  628|  18.4E|            Self::AtomicCas { args: ref args_arity3, .. } |
  629|     60|            Self::IntSelect { args: ref args_arity3, .. } |
  630|    448|            Self::Ternary { args: ref args_arity3, .. } => {
  631|    293|                args_arity3
  632|       |            }
  633|      0|            Self::BinaryImm64 { ref arg, .. } |
  634|      0|            Self::BinaryImm8 { ref arg, .. } |
  635|     10|            Self::BranchTable { ref arg, .. } |
  636|      0|            Self::CondTrap { ref arg, .. } |
  637|      0|            Self::DynamicStackStore { ref arg, .. } |
  638|      0|            Self::FloatCond { ref arg, .. } |
  639|      0|            Self::FloatCondTrap { ref arg, .. } |
  640|      0|            Self::HeapAddr { ref arg, .. } |
  641|      0|            Self::IntCompareImm { ref arg, .. } |
  642|      0|            Self::IntCond { ref arg, .. } |
  643|      0|            Self::IntCondTrap { ref arg, .. } |
  644|  96.7k|            Self::Load { ref arg, .. } |
  645|      0|            Self::LoadNoOffset { ref arg, .. } |
  646|      0|            Self::StackStore { ref arg, .. } |
  647|      0|            Self::TableAddr { ref arg, .. } |
  648|  3.36k|            Self::Unary { ref arg, .. } => {
  649|   100k|                core::slice::from_ref(arg)
  650|       |            }
  651|  66.1k|            Self::Branch { ref args, .. } |
  652|      0|            Self::BranchFloat { ref args, .. } |
  653|      0|            Self::BranchIcmp { ref args, .. } |
  654|      0|            Self::BranchInt { ref args, .. } |
  655|  88.6k|            Self::Call { ref args, .. } |
  656|  9.74k|            Self::CallIndirect { ref args, .. } |
  657|   278k|            Self::Jump { ref args, .. } |
  658|   100k|            Self::MultiAry { ref args, .. } => {
  659|   543k|                args.as_slice(pool)
  660|       |            }
  661|       |        }
  662|   951k|    }
_RINvMsd_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB6_15InstructionData4hashNtNtBa_2fx8FxHasherEBa_:
 1017|   471k|    pub fn hash<H: ::core::hash::Hasher>(&self, state: &mut H, pool: &ir::ValueListPool) {
 1018|   471k|        match *self {
 1019|  18.4E|            Self::AtomicCas{opcode, ref args, flags} => {
 1020|  18.4E|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1021|  18.4E|                ::core::hash::Hash::hash(&opcode, state);
 1022|  18.4E|                ::core::hash::Hash::hash(&flags, state);
 1023|  18.4E|                ::core::hash::Hash::hash(args, state);
 1024|  18.4E|            }
 1025|      0|            Self::AtomicRmw{opcode, ref args, flags, op} => {
 1026|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1027|      0|                ::core::hash::Hash::hash(&opcode, state);
 1028|      0|                ::core::hash::Hash::hash(&flags, state);
 1029|      0|                ::core::hash::Hash::hash(&op, state);
 1030|      0|                ::core::hash::Hash::hash(args, state);
 1031|      0|            }
 1032|  73.5k|            Self::Binary{opcode, ref args} => {
 1033|  73.5k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1034|  73.5k|                ::core::hash::Hash::hash(&opcode, state);
 1035|  73.5k|                ::core::hash::Hash::hash(args, state);
 1036|  73.5k|            }
 1037|      0|            Self::BinaryImm64{opcode, ref arg, imm} => {
 1038|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1039|      0|                ::core::hash::Hash::hash(&opcode, state);
 1040|      0|                ::core::hash::Hash::hash(&imm, state);
 1041|      0|                ::core::hash::Hash::hash(arg, state);
 1042|      0|            }
 1043|      0|            Self::BinaryImm8{opcode, ref arg, imm} => {
 1044|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1045|      0|                ::core::hash::Hash::hash(&opcode, state);
 1046|      0|                ::core::hash::Hash::hash(&imm, state);
 1047|      0|                ::core::hash::Hash::hash(arg, state);
 1048|      0|            }
 1049|      0|            Self::Branch{opcode, ref args, destination} => {
 1050|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1051|      0|                ::core::hash::Hash::hash(&opcode, state);
 1052|      0|                ::core::hash::Hash::hash(&destination, state);
 1053|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1054|      0|            }
 1055|      0|            Self::BranchFloat{opcode, ref args, cond, destination} => {
 1056|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1057|      0|                ::core::hash::Hash::hash(&opcode, state);
 1058|      0|                ::core::hash::Hash::hash(&cond, state);
 1059|      0|                ::core::hash::Hash::hash(&destination, state);
 1060|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1061|      0|            }
 1062|      0|            Self::BranchIcmp{opcode, ref args, cond, destination} => {
 1063|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1064|      0|                ::core::hash::Hash::hash(&opcode, state);
 1065|      0|                ::core::hash::Hash::hash(&cond, state);
 1066|      0|                ::core::hash::Hash::hash(&destination, state);
 1067|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1068|      0|            }
 1069|      0|            Self::BranchInt{opcode, ref args, cond, destination} => {
 1070|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1071|      0|                ::core::hash::Hash::hash(&opcode, state);
 1072|      0|                ::core::hash::Hash::hash(&cond, state);
 1073|      0|                ::core::hash::Hash::hash(&destination, state);
 1074|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1075|      0|            }
 1076|      0|            Self::BranchTable{opcode, ref arg, destination, table} => {
 1077|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1078|      0|                ::core::hash::Hash::hash(&opcode, state);
 1079|      0|                ::core::hash::Hash::hash(&destination, state);
 1080|      0|                ::core::hash::Hash::hash(&table, state);
 1081|      0|                ::core::hash::Hash::hash(arg, state);
 1082|      0|            }
 1083|      0|            Self::Call{opcode, ref args, func_ref} => {
 1084|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1085|      0|                ::core::hash::Hash::hash(&opcode, state);
 1086|      0|                ::core::hash::Hash::hash(&func_ref, state);
 1087|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1088|      0|            }
 1089|      0|            Self::CallIndirect{opcode, ref args, sig_ref} => {
 1090|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1091|      0|                ::core::hash::Hash::hash(&opcode, state);
 1092|      0|                ::core::hash::Hash::hash(&sig_ref, state);
 1093|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1094|      0|            }
 1095|      0|            Self::CondTrap{opcode, ref arg, code} => {
 1096|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1097|      0|                ::core::hash::Hash::hash(&opcode, state);
 1098|      0|                ::core::hash::Hash::hash(&code, state);
 1099|      0|                ::core::hash::Hash::hash(arg, state);
 1100|      0|            }
 1101|      0|            Self::DynamicStackLoad{opcode, dynamic_stack_slot} => {
 1102|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1103|      0|                ::core::hash::Hash::hash(&opcode, state);
 1104|      0|                ::core::hash::Hash::hash(&dynamic_stack_slot, state);
 1105|      0|                ::core::hash::Hash::hash(&(), state);
 1106|      0|            }
 1107|      0|            Self::DynamicStackStore{opcode, ref arg, dynamic_stack_slot} => {
 1108|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1109|      0|                ::core::hash::Hash::hash(&opcode, state);
 1110|      0|                ::core::hash::Hash::hash(&dynamic_stack_slot, state);
 1111|      0|                ::core::hash::Hash::hash(arg, state);
 1112|      0|            }
 1113|  1.26k|            Self::FloatCompare{opcode, ref args, cond} => {
 1114|  1.26k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1115|  1.26k|                ::core::hash::Hash::hash(&opcode, state);
 1116|  1.26k|                ::core::hash::Hash::hash(&cond, state);
 1117|  1.26k|                ::core::hash::Hash::hash(args, state);
 1118|  1.26k|            }
 1119|      0|            Self::FloatCond{opcode, ref arg, cond} => {
 1120|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1121|      0|                ::core::hash::Hash::hash(&opcode, state);
 1122|      0|                ::core::hash::Hash::hash(&cond, state);
 1123|      0|                ::core::hash::Hash::hash(arg, state);
 1124|      0|            }
 1125|      0|            Self::FloatCondTrap{opcode, ref arg, cond, code} => {
 1126|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1127|      0|                ::core::hash::Hash::hash(&opcode, state);
 1128|      0|                ::core::hash::Hash::hash(&cond, state);
 1129|      0|                ::core::hash::Hash::hash(&code, state);
 1130|      0|                ::core::hash::Hash::hash(arg, state);
 1131|      0|            }
 1132|      0|            Self::FuncAddr{opcode, func_ref} => {
 1133|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1134|      0|                ::core::hash::Hash::hash(&opcode, state);
 1135|      0|                ::core::hash::Hash::hash(&func_ref, state);
 1136|      0|                ::core::hash::Hash::hash(&(), state);
 1137|      0|            }
 1138|      0|            Self::HeapAddr{opcode, ref arg, heap, imm} => {
 1139|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1140|      0|                ::core::hash::Hash::hash(&opcode, state);
 1141|      0|                ::core::hash::Hash::hash(&heap, state);
 1142|      0|                ::core::hash::Hash::hash(&imm, state);
 1143|      0|                ::core::hash::Hash::hash(arg, state);
 1144|      0|            }
 1145|  48.0k|            Self::IntCompare{opcode, ref args, cond} => {
 1146|  48.0k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1147|  48.0k|                ::core::hash::Hash::hash(&opcode, state);
 1148|  48.0k|                ::core::hash::Hash::hash(&cond, state);
 1149|  48.0k|                ::core::hash::Hash::hash(args, state);
 1150|  48.0k|            }
 1151|      0|            Self::IntCompareImm{opcode, ref arg, cond, imm} => {
 1152|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1153|      0|                ::core::hash::Hash::hash(&opcode, state);
 1154|      0|                ::core::hash::Hash::hash(&cond, state);
 1155|      0|                ::core::hash::Hash::hash(&imm, state);
 1156|      0|                ::core::hash::Hash::hash(arg, state);
 1157|      0|            }
 1158|      0|            Self::IntCond{opcode, ref arg, cond} => {
 1159|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1160|      0|                ::core::hash::Hash::hash(&opcode, state);
 1161|      0|                ::core::hash::Hash::hash(&cond, state);
 1162|      0|                ::core::hash::Hash::hash(arg, state);
 1163|      0|            }
 1164|      0|            Self::IntCondTrap{opcode, ref arg, cond, code} => {
 1165|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1166|      0|                ::core::hash::Hash::hash(&opcode, state);
 1167|      0|                ::core::hash::Hash::hash(&cond, state);
 1168|      0|                ::core::hash::Hash::hash(&code, state);
 1169|      0|                ::core::hash::Hash::hash(arg, state);
 1170|      0|            }
 1171|      0|            Self::IntSelect{opcode, ref args, cond} => {
 1172|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1173|      0|                ::core::hash::Hash::hash(&opcode, state);
 1174|      0|                ::core::hash::Hash::hash(&cond, state);
 1175|      0|                ::core::hash::Hash::hash(args, state);
 1176|      0|            }
 1177|      0|            Self::Jump{opcode, ref args, destination} => {
 1178|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1179|      0|                ::core::hash::Hash::hash(&opcode, state);
 1180|      0|                ::core::hash::Hash::hash(&destination, state);
 1181|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1182|      0|            }
 1183|  29.1k|            Self::Load{opcode, ref arg, flags, offset} => {
 1184|  29.1k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1185|  29.1k|                ::core::hash::Hash::hash(&opcode, state);
 1186|  29.1k|                ::core::hash::Hash::hash(&flags, state);
 1187|  29.1k|                ::core::hash::Hash::hash(&offset, state);
 1188|  29.1k|                ::core::hash::Hash::hash(arg, state);
 1189|  29.1k|            }
 1190|      0|            Self::LoadNoOffset{opcode, ref arg, flags} => {
 1191|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1192|      0|                ::core::hash::Hash::hash(&opcode, state);
 1193|      0|                ::core::hash::Hash::hash(&flags, state);
 1194|      0|                ::core::hash::Hash::hash(arg, state);
 1195|      0|            }
 1196|      0|            Self::MultiAry{opcode, ref args} => {
 1197|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1198|      0|                ::core::hash::Hash::hash(&opcode, state);
 1199|      0|                ::core::hash::Hash::hash(args.as_slice(pool), state);
 1200|      0|            }
 1201|      0|            Self::NullAry{opcode} => {
 1202|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1203|      0|                ::core::hash::Hash::hash(&opcode, state);
 1204|      0|                ::core::hash::Hash::hash(&(), state);
 1205|      0|            }
 1206|      0|            Self::Shuffle{opcode, ref args, imm} => {
 1207|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1208|      0|                ::core::hash::Hash::hash(&opcode, state);
 1209|      0|                ::core::hash::Hash::hash(&imm, state);
 1210|      0|                ::core::hash::Hash::hash(args, state);
 1211|      0|            }
 1212|      0|            Self::StackLoad{opcode, stack_slot, offset} => {
 1213|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1214|      0|                ::core::hash::Hash::hash(&opcode, state);
 1215|      0|                ::core::hash::Hash::hash(&stack_slot, state);
 1216|      0|                ::core::hash::Hash::hash(&offset, state);
 1217|      0|                ::core::hash::Hash::hash(&(), state);
 1218|      0|            }
 1219|      0|            Self::StackStore{opcode, ref arg, stack_slot, offset} => {
 1220|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1221|      0|                ::core::hash::Hash::hash(&opcode, state);
 1222|      0|                ::core::hash::Hash::hash(&stack_slot, state);
 1223|      0|                ::core::hash::Hash::hash(&offset, state);
 1224|      0|                ::core::hash::Hash::hash(arg, state);
 1225|      0|            }
 1226|      0|            Self::Store{opcode, ref args, flags, offset} => {
 1227|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1228|      0|                ::core::hash::Hash::hash(&opcode, state);
 1229|      0|                ::core::hash::Hash::hash(&flags, state);
 1230|      0|                ::core::hash::Hash::hash(&offset, state);
 1231|      0|                ::core::hash::Hash::hash(args, state);
 1232|      0|            }
 1233|      0|            Self::StoreNoOffset{opcode, ref args, flags} => {
 1234|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1235|      0|                ::core::hash::Hash::hash(&opcode, state);
 1236|      0|                ::core::hash::Hash::hash(&flags, state);
 1237|      0|                ::core::hash::Hash::hash(args, state);
 1238|      0|            }
 1239|      0|            Self::TableAddr{opcode, ref arg, table, offset} => {
 1240|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1241|      0|                ::core::hash::Hash::hash(&opcode, state);
 1242|      0|                ::core::hash::Hash::hash(&table, state);
 1243|      0|                ::core::hash::Hash::hash(&offset, state);
 1244|      0|                ::core::hash::Hash::hash(arg, state);
 1245|      0|            }
 1246|  1.19k|            Self::Ternary{opcode, ref args} => {
 1247|  1.19k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1248|  1.19k|                ::core::hash::Hash::hash(&opcode, state);
 1249|  1.19k|                ::core::hash::Hash::hash(args, state);
 1250|  1.19k|            }
 1251|      0|            Self::TernaryImm8{opcode, ref args, imm} => {
 1252|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1253|      0|                ::core::hash::Hash::hash(&opcode, state);
 1254|      0|                ::core::hash::Hash::hash(&imm, state);
 1255|      0|                ::core::hash::Hash::hash(args, state);
 1256|      0|            }
 1257|      0|            Self::Trap{opcode, code} => {
 1258|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1259|      0|                ::core::hash::Hash::hash(&opcode, state);
 1260|      0|                ::core::hash::Hash::hash(&code, state);
 1261|      0|                ::core::hash::Hash::hash(&(), state);
 1262|      0|            }
 1263|  43.8k|            Self::Unary{opcode, ref arg} => {
 1264|  43.8k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1265|  43.8k|                ::core::hash::Hash::hash(&opcode, state);
 1266|  43.8k|                ::core::hash::Hash::hash(arg, state);
 1267|  43.8k|            }
 1268|      0|            Self::UnaryBool{opcode, imm} => {
 1269|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1270|      0|                ::core::hash::Hash::hash(&opcode, state);
 1271|      0|                ::core::hash::Hash::hash(&imm, state);
 1272|      0|                ::core::hash::Hash::hash(&(), state);
 1273|      0|            }
 1274|      0|            Self::UnaryConst{opcode, constant_handle} => {
 1275|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1276|      0|                ::core::hash::Hash::hash(&opcode, state);
 1277|      0|                ::core::hash::Hash::hash(&constant_handle, state);
 1278|      0|                ::core::hash::Hash::hash(&(), state);
 1279|      0|            }
 1280|      0|            Self::UnaryGlobalValue{opcode, global_value} => {
 1281|      0|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1282|      0|                ::core::hash::Hash::hash(&opcode, state);
 1283|      0|                ::core::hash::Hash::hash(&global_value, state);
 1284|      0|                ::core::hash::Hash::hash(&(), state);
 1285|      0|            }
 1286|  1.65k|            Self::UnaryIeee32{opcode, imm} => {
 1287|  1.65k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1288|  1.65k|                ::core::hash::Hash::hash(&opcode, state);
 1289|  1.65k|                ::core::hash::Hash::hash(&imm, state);
 1290|  1.65k|                ::core::hash::Hash::hash(&(), state);
 1291|  1.65k|            }
 1292|  4.61k|            Self::UnaryIeee64{opcode, imm} => {
 1293|  4.61k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1294|  4.61k|                ::core::hash::Hash::hash(&opcode, state);
 1295|  4.61k|                ::core::hash::Hash::hash(&imm, state);
 1296|  4.61k|                ::core::hash::Hash::hash(&(), state);
 1297|  4.61k|            }
 1298|   267k|            Self::UnaryImm{opcode, imm} => {
 1299|   267k|                ::core::hash::Hash::hash( &::core::mem::discriminant(self), state);
 1300|   267k|                ::core::hash::Hash::hash(&opcode, state);
 1301|   267k|                ::core::hash::Hash::hash(&imm, state);
 1302|   267k|                ::core::hash::Hash::hash(&(), state);
 1303|   267k|            }
 1304|       |        }
 1305|   471k|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode8can_load:
 1926|  1.12M|    pub fn can_load(self) -> bool {
 1927|  1.12M|        match self {
 1928|       |            Self::AtomicCas |
 1929|       |            Self::AtomicLoad |
 1930|       |            Self::AtomicRmw |
 1931|       |            Self::Debugtrap |
 1932|       |            Self::DynamicStackLoad |
 1933|       |            Self::Load |
 1934|       |            Self::Sload16 |
 1935|       |            Self::Sload16x4 |
 1936|       |            Self::Sload32 |
 1937|       |            Self::Sload32x2 |
 1938|       |            Self::Sload8 |
 1939|       |            Self::Sload8x8 |
 1940|       |            Self::StackLoad |
 1941|       |            Self::Uload16 |
 1942|       |            Self::Uload16x4 |
 1943|       |            Self::Uload32 |
 1944|       |            Self::Uload32x2 |
 1945|       |            Self::Uload8 |
 1946|       |            Self::Uload8x8 => {
 1947|   212k|                true
 1948|       |            }
 1949|       |            _ => {
 1950|   910k|                false
 1951|       |            }
 1952|       |        }
 1953|  1.12M|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode13is_terminator:
 1868|  1.70M|    pub fn is_terminator(self) -> bool {
 1869|  1.70M|        match self {
 1870|       |            Self::BrTable |
 1871|       |            Self::Jump |
 1872|       |            Self::Return |
 1873|       |            Self::Trap => {
 1874|   525k|                true
 1875|       |            }
 1876|       |            _ => {
 1877|  1.18M|                false
 1878|       |            }
 1879|       |        }
 1880|  1.70M|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode8can_trap:
 1977|   928k|    pub fn can_trap(self) -> bool {
 1978|   928k|        match self {
 1979|       |            Self::FcvtToSint |
 1980|       |            Self::FcvtToUint |
 1981|       |            Self::ResumableTrap |
 1982|       |            Self::ResumableTrapnz |
 1983|       |            Self::Sdiv |
 1984|       |            Self::Srem |
 1985|       |            Self::Trap |
 1986|       |            Self::Trapff |
 1987|       |            Self::Trapif |
 1988|       |            Self::Trapnz |
 1989|       |            Self::Trapz |
 1990|       |            Self::Udiv |
 1991|       |            Self::Urem => {
 1992|  1.36k|                true
 1993|       |            }
 1994|       |            _ => {
 1995|   927k|                false
 1996|       |            }
 1997|       |        }
 1998|   928k|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode7is_call:
 1901|  1.84M|    pub fn is_call(self) -> bool {
 1902|  1.84M|        match self {
 1903|       |            Self::Call |
 1904|       |            Self::CallIndirect => {
 1905|   294k|                true
 1906|       |            }
 1907|       |            _ => {
 1908|  1.55M|                false
 1909|       |            }
 1910|       |        }
 1911|  1.84M|    }
_RNvMse_NtNtCsaK1aHRjoYiN_17cranelift_codegen2ir12instructionsNtB5_6Opcode9can_store:
 1956|  1.57M|    pub fn can_store(self) -> bool {
 1957|  1.57M|        match self {
 1958|       |            Self::AtomicCas |
 1959|       |            Self::AtomicRmw |
 1960|       |            Self::AtomicStore |
 1961|       |            Self::Debugtrap |
 1962|       |            Self::DynamicStackStore |
 1963|       |            Self::Istore16 |
 1964|       |            Self::Istore32 |
 1965|       |            Self::Istore8 |
 1966|       |            Self::StackStore |
 1967|       |            Self::Store => {
 1968|   150k|                true
 1969|       |            }
 1970|       |            _ => {
 1971|  1.42M|                false
 1972|       |            }
 1973|       |        }
 1974|  1.57M|    }

_RNvXs2_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5FlagsNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneBb_:
    1|   100k|#[derive(Clone, Hash)]
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags9has_sse42:
  136|  9.12k|    pub fn has_sse42(&self) -> bool {
  137|  9.12k|        self.numbered_predicate(3)
  138|  9.12k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags17use_avx512vl_simd:
  228|  79.5k|    pub fn use_avx512vl_simd(&self) -> bool {
  229|  79.5k|        self.numbered_predicate(23)
  230|  79.5k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags7use_fma:
  240|  79.5k|    pub fn use_fma(&self) -> bool {
  241|  79.5k|        self.numbered_predicate(26)
  242|  79.5k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags9has_ssse3:
  126|  4.56k|    pub fn has_ssse3(&self) -> bool {
  127|  4.56k|        self.numbered_predicate(1)
  128|  4.56k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags7has_avx:
  141|  4.56k|    pub fn has_avx(&self) -> bool {
  142|  4.56k|        self.numbered_predicate(4)
  143|  4.56k|    }
_RNvMs_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB4_5Flags4iter:
   95|  4.56k|    pub fn iter(&self) -> impl Iterator<Item = Value> {
   96|  4.56k|        let mut bytes = [0; 2];
   97|  4.56k|        bytes.copy_from_slice(&self.bytes[0..2]);
   98|  4.56k|        DESCRIPTORS.iter().filter_map(move |d| {
   99|       |            let values = match &d.detail {
  100|       |                detail::Detail::Preset => return None,
  101|       |                detail::Detail::Enum { last, enumerators } => Some(TEMPLATE.enums(*last, *enumerators)),
  102|       |                _ => None
  103|       |            };
  104|       |            Some(Value{ name: d.name, detail: d.detail, values, value: bytes[d.offset as usize] })
  105|  4.56k|        })
  106|  4.56k|    }
_RNCNvMs_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB6_5Flags4iter0Bc_:
   98|   109k|        DESCRIPTORS.iter().filter_map(move |d| {
   99|   109k|            let values = match &d.detail {
  100|  36.5k|                detail::Detail::Preset => return None,
  101|      0|                detail::Detail::Enum { last, enumerators } => Some(TEMPLATE.enums(*last, *enumerators)),
  102|  73.0k|                _ => None
  103|       |            };
  104|  73.0k|            Some(Value{ name: d.name, detail: d.detail, values, value: bytes[d.offset as usize] })
  105|   109k|        })
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags9use_lzcnt:
  244|  40.0k|    pub fn use_lzcnt(&self) -> bool {
  245|  40.0k|        self.numbered_predicate(27)
  246|  40.0k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags8has_bmi1:
  186|  4.56k|    pub fn has_bmi1(&self) -> bool {
  187|  4.56k|        self.numbered_predicate(13)
  188|  4.56k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags10use_popcnt:
  248|  40.0k|    pub fn use_popcnt(&self) -> bool {
  249|  40.0k|        self.numbered_predicate(28)
  250|  40.0k|    }
_RNvNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settings7builder:
  493|  4.56k|pub fn builder() -> Builder {
  494|  4.56k|    Builder::new(&TEMPLATE)
  495|  4.56k|}
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags8use_bmi1:
  236|  39.9k|    pub fn use_bmi1(&self) -> bool {
  237|  39.9k|        self.numbered_predicate(25)
  238|  39.9k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags10has_popcnt:
  181|  4.56k|    pub fn has_popcnt(&self) -> bool {
  182|  4.56k|        self.numbered_predicate(12)
  183|  4.56k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags9has_lzcnt:
  196|  4.56k|    pub fn has_lzcnt(&self) -> bool {
  197|  4.56k|        self.numbered_predicate(15)
  198|  4.56k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags9has_sse41:
  131|  9.12k|    pub fn has_sse41(&self) -> bool {
  132|  9.12k|        self.numbered_predicate(2)
  133|  9.12k|    }
_RNvMNtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB2_5Flags3new:
    9|  4.56k|    pub fn new(shared: &settings::Flags, builder: Builder) -> Self {
   10|  4.56k|        let bvec = builder.state_for("x86");
   11|  4.56k|        let mut x86 = Self { bytes: [0; 5] };
   12|      0|        debug_assert_eq!(bvec.len(), 2);
   13|  4.56k|        x86.bytes[0..2].copy_from_slice(&bvec);
   14|  4.56k|        // Precompute #16.
   15|  4.56k|        if shared.is_pic() {
   16|      0|            x86.bytes[2] |= 1 << 0;
   17|  4.56k|        }
   18|       |        // Precompute #17.
   19|  4.56k|        if !(shared.is_pic()) {
   20|  4.56k|            x86.bytes[2] |= 1 << 1;
   21|  4.56k|        }
   22|       |        // Precompute #18.
   23|  4.56k|        if shared.enable_simd() && x86.has_avx2() {
   24|      0|            x86.bytes[2] |= 1 << 2;
   25|  4.56k|        }
   26|       |        // Precompute #19.
   27|  4.56k|        if shared.enable_simd() && x86.has_avx512bitalg() {
   28|      0|            x86.bytes[2] |= 1 << 3;
   29|  4.56k|        }
   30|       |        // Precompute #20.
   31|  4.56k|        if shared.enable_simd() && x86.has_avx512dq() {
   32|      0|            x86.bytes[2] |= 1 << 4;
   33|  4.56k|        }
   34|       |        // Precompute #21.
   35|  4.56k|        if shared.enable_simd() && x86.has_avx512f() {
   36|      0|            x86.bytes[2] |= 1 << 5;
   37|  4.56k|        }
   38|       |        // Precompute #22.
   39|  4.56k|        if shared.enable_simd() && x86.has_avx512vbmi() {
   40|      0|            x86.bytes[2] |= 1 << 6;
   41|  4.56k|        }
   42|       |        // Precompute #23.
   43|  4.56k|        if shared.enable_simd() && x86.has_avx512vl() {
   44|      0|            x86.bytes[2] |= 1 << 7;
   45|  4.56k|        }
   46|       |        // Precompute #24.
   47|  4.56k|        if shared.enable_simd() && x86.has_avx() {
   48|      0|            x86.bytes[3] |= 1 << 0;
   49|  4.56k|        }
   50|       |        // Precompute #25.
   51|  4.56k|        if x86.has_bmi1() {
   52|  4.56k|            x86.bytes[3] |= 1 << 1;
   53|  4.56k|        }
   54|       |        // Precompute #26.
   55|  4.56k|        if x86.has_avx() && x86.has_fma() {
   56|  4.56k|            x86.bytes[3] |= 1 << 2;
   57|  4.56k|        }
   58|       |        // Precompute #27.
   59|  4.56k|        if x86.has_lzcnt() {
   60|  4.56k|            x86.bytes[3] |= 1 << 3;
   61|  4.56k|        }
   62|       |        // Precompute #28.
   63|  4.56k|        if x86.has_popcnt() && x86.has_sse42() {
   64|  4.56k|            x86.bytes[3] |= 1 << 4;
   65|  4.56k|        }
   66|       |        // Precompute #29.
   67|  4.56k|        if x86.has_sse41() {
   68|  4.56k|            x86.bytes[3] |= 1 << 5;
   69|  4.56k|        }
   70|       |        // Precompute #30.
   71|  4.56k|        if shared.enable_simd() && x86.has_sse41() {
   72|      0|            x86.bytes[3] |= 1 << 6;
   73|  4.56k|        }
   74|       |        // Precompute #31.
   75|  4.56k|        if x86.has_sse41() && x86.has_sse42() {
   76|  4.56k|            x86.bytes[3] |= 1 << 7;
   77|  4.56k|        }
   78|       |        // Precompute #32.
   79|  4.56k|        if shared.enable_simd() && x86.has_sse41() && x86.has_sse42() {
   80|      0|            x86.bytes[4] |= 1 << 0;
   81|  4.56k|        }
   82|       |        // Precompute #33.
   83|  4.56k|        if x86.has_ssse3() {
   84|  4.56k|            x86.bytes[4] |= 1 << 1;
   85|  4.56k|        }
   86|       |        // Precompute #34.
   87|  4.56k|        if shared.enable_simd() && x86.has_ssse3() {
   88|      0|            x86.bytes[4] |= 1 << 2;
   89|  4.56k|        }
   90|  4.56k|        x86
   91|  4.56k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags7has_fma:
  151|  4.56k|    pub fn has_fma(&self) -> bool {
  152|  4.56k|        self.numbered_predicate(6)
  153|  4.56k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags9use_sse41:
  252|  39.3k|    pub fn use_sse41(&self) -> bool {
  253|  39.3k|        self.numbered_predicate(29)
  254|  39.3k|    }
_RNvMs0_NtNtNtCsaK1aHRjoYiN_17cranelift_codegen3isa3x648settingsNtB5_5Flags18numbered_predicate:
  116|   364k|    fn numbered_predicate(&self, p: usize) -> bool {
  117|   364k|        self.bytes[0 + p / 8] & (1 << (p % 8)) != 0
  118|   364k|    }

_RNCNvMss_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB7_5Flags4iter0Csl5R1U3jbXkA_18wasmtime_cranelift:
   22|   132k|        DESCRIPTORS.iter().filter_map(move |d| {
   23|   132k|            let values = match &d.detail {
   24|      0|                detail::Detail::Preset => return None,
   25|  18.2k|                detail::Detail::Enum { last, enumerators } => Some(TEMPLATE.enums(*last, *enumerators)),
   26|   114k|                _ => None
   27|       |            };
   28|   132k|            Some(Value{ name: d.name, detail: d.detail, values, value: bytes[d.offset as usize] })
   29|   132k|        })
_RNvMsr_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags3new:
    9|  4.56k|    pub fn new(builder: Builder) -> Self {
   10|  4.56k|        let bvec = builder.state_for("shared");
   11|  4.56k|        let mut shared = Self { bytes: [0; 8] };
   12|      0|        debug_assert_eq!(bvec.len(), 8);
   13|  4.56k|        shared.bytes[0..8].copy_from_slice(&bvec);
   14|  4.56k|        shared
   15|  4.56k|    }
_RNvMss_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags4iter:
   19|  4.56k|    pub fn iter(&self) -> impl Iterator<Item = Value> {
   20|  4.56k|        let mut bytes = [0; 8];
   21|  4.56k|        bytes.copy_from_slice(&self.bytes[0..8]);
   22|  4.56k|        DESCRIPTORS.iter().filter_map(move |d| {
   23|       |            let values = match &d.detail {
   24|       |                detail::Detail::Preset => return None,
   25|       |                detail::Detail::Enum { last, enumerators } => Some(TEMPLATE.enums(*last, *enumerators)),
   26|       |                _ => None
   27|       |            };
   28|       |            Some(Value{ name: d.name, detail: d.detail, values, value: bytes[d.offset as usize] })
   29|  4.56k|        })
   30|  4.56k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags37enable_heap_access_spectre_mitigation:
  461|     28|    pub fn enable_heap_access_spectre_mitigation(&self) -> bool {
  462|     28|        self.numbered_predicate(21)
  463|     28|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags9opt_level:
  186|  50.4k|    pub fn opt_level(&self) -> OptLevel {
  187|  50.4k|        match self.bytes[0] {
  188|       |            0 => {
  189|      0|                OptLevel::None
  190|       |            }
  191|       |            1 => {
  192|  50.4k|                OptLevel::Speed
  193|       |            }
  194|       |            2 => {
  195|      0|                OptLevel::SpeedAndSize
  196|       |            }
  197|       |            _ => {
  198|      0|                panic!("Invalid enum value")
  199|       |            }
  200|       |        }
  201|  50.4k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags21enable_alias_analysis:
  312|  50.4k|    pub fn enable_alias_analysis(&self) -> bool {
  313|  50.4k|        self.numbered_predicate(2)
  314|  50.4k|    }
_RNvXsJ_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_8OptLevelNtNtCs8gdQ2z332JV_4core3cmp9PartialEq2eqB7_:
   33|   201k|#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags27enable_nan_canonicalization:
  355|  50.4k|    pub fn enable_nan_canonicalization(&self) -> bool {
  356|  50.4k|        self.numbered_predicate(8)
  357|  50.4k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags11enable_simd:
  379|  50.2k|    pub fn enable_simd(&self) -> bool {
  380|  50.2k|        self.numbered_predicate(11)
  381|  50.2k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags11unwind_info:
  415|   166k|    pub fn unwind_info(&self) -> bool {
  416|   166k|        self.numbered_predicate(15)
  417|   166k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags15enable_verifier:
  319|   504k|    pub fn enable_verifier(&self) -> bool {
  320|   504k|        self.numbered_predicate(3)
  321|   504k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags17enable_probestack:
  441|   180k|    pub fn enable_probestack(&self) -> bool {
  442|   180k|        self.numbered_predicate(18)
  443|   180k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags17enable_pinned_reg:
  363|  2.24M|    pub fn enable_pinned_reg(&self) -> bool {
  364|  2.24M|        self.numbered_predicate(9)
  365|  2.24M|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags16regalloc_checker:
  296|  50.4k|    pub fn regalloc_checker(&self) -> bool {
  297|  50.4k|        self.numbered_predicate(0)
  298|  50.4k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags23preserve_frame_pointers:
  425|  50.4k|    pub fn preserve_frame_pointers(&self) -> bool {
  426|  50.4k|        self.numbered_predicate(16)
  427|  50.4k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags21machine_code_cfg_info:
  437|  50.4k|    pub fn machine_code_cfg_info(&self) -> bool {
  438|  50.4k|        self.numbered_predicate(17)
  439|  50.4k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags6is_pic:
  323|  9.12k|    pub fn is_pic(&self) -> bool {
  324|  9.12k|        self.numbered_predicate(4)
  325|  9.12k|    }
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags18numbered_predicate:
  176|  3.45M|    fn numbered_predicate(&self, p: usize) -> bool {
  177|  3.45M|        self.bytes[5 + p / 8] & (1 << (p % 8)) != 0
  178|  3.45M|    }
_RNvNtCsaK1aHRjoYiN_17cranelift_codegen8settings7builder:
  761|  4.56k|pub fn builder() -> Builder {
  762|  4.56k|    Builder::new(&TEMPLATE)
  763|  4.56k|}
_RNvXsD_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5FlagsNtNtCs8gdQ2z332JV_4core5clone5Clone5cloneB7_:
    1|   200k|#[derive(Clone, Hash)]
_RNvMsB_NtCsaK1aHRjoYiN_17cranelift_codegen8settingsNtB5_5Flags21regalloc_verbose_logs:
  305|  50.4k|    pub fn regalloc_verbose_logs(&self) -> bool {
  306|  50.4k|        self.numbered_predicate(1)
  307|  50.4k|    }

_RNvMs3_NtCse4iUyVljil5_14target_lexicon4hostNtNtB7_6triple6Triple4host:
   64|  9.12k|    pub const fn host() -> Self {
   65|  9.12k|        Self {
   66|  9.12k|            architecture: Architecture::X86_64,
   67|  9.12k|            vendor: Vendor::Unknown,
   68|  9.12k|            operating_system: OperatingSystem::Linux,
   69|  9.12k|            environment: Environment::Gnu,
   70|  9.12k|            binary_format: BinaryFormat::Elf,
   71|  9.12k|        }
   72|  9.12k|    }






















































































